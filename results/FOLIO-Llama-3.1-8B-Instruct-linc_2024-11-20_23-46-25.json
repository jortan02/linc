[
 {
  "index": 0,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> (AttendSchoolEvents(x) & VeryEngagedWithSchoolEvents(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShows(bonnie) | InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -AttendSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagers(x) & WishToFurtherAcademicCareers(x) -> AttendSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformOften(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformOften(bonnie) | InactiveDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Attend(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareer(x) -> Attend(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((Attend",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShow(x) -> AttendAndEngage(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (exists x. PerformInTalentShow(x) & exists x. InactiveAndDisinterested(x)) | (-exists x. PerformInTalentShow(x) & -exists x. InactiveAndDisinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneDance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungAndWishToFurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShow(x) -> (AttendAndEngage(x) & AttendSchool(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShow(people) & -InactiveAndDisinterested(people)) | (-PerformInTalentShow(people) & InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -AttendSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagers(x) & WishToFurtherAcademicCareers(x) -> AttendSchool(x))\nTEXT:",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> AttendAndEngage(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShows(people) & -InactiveAndDisinterested(people)) | (-PerformInSchoolTalentShows(people) & InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareers(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and"
   ],
   [
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShow(x) -> AttendAndEngage(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShow(x) | InactiveAndDisinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> AttendAndEngaged(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShows(bonnie) & -InactiveAndDisinterested(bonnie)) | (-PerformInSchoolTalentShows(bonnie) & InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagers(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> (AttendAndEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShows(bonnie) & -InactiveAndDisinterested(bonnie)) | (-PerformInSchoolTalentShows(bonnie) & InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendsSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareers(x) -> StudentWhoAttendsSchool(x))\nTEXT",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShow(x) -> (AttendSchoolEvent(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShow(people) | InactiveCommunity(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneDance(x) -> -AttendSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveCommunity(x) -> ChaperoneDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (FurtherAcademicCareer(x) -> AttendSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> (AttendAndAreVeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShowsOften(bonnie) & -InactiveAndDisinterested(bonnie)) | (-PerformInSchoolTalentShowsOften(bonnie) & InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendsSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagersWhoWishToFurtherTheirAcademicCare"
   ],
   [
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> AttendAndEngage(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: ((PerformInSchoolTalentShows(x) & -InactiveAndDisinterested(x)) | (-PerformInSchoolTalentShows(x) & InactiveAndDisinterested(x)))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareers(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> AttendAndEngaged(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShows(people) | InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendsSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareers(x) -> StudentWhoAttendsSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngage(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) | InactiveAndDisinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -AttendSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareers(x) -> AttendSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (TalentShow(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: ((TalentShow(x) & -Inactive(x)) | (TalentShow(x) & Inactive(x)) | (-TalentShow(x) & Inactive(x)))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Attend(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (Inactive(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (FurtherAcademicCareers(x) -> Attend(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShow(x) -> AttendAndEngage(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShow(bonnie) & -InactiveAndDisinterested(bonnie)) | (-PerformInTalentShow(bonnie) & InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneDance(x) -> -AttendSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishFurtherAcademicCareer(x) -> AttendSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student"
   ],
   [
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> (AttendAndAreVeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShowsOften(bonnie) & -InactiveAndDisinterested(bonnie)) | (-PerformInSchoolTalentShowsOften(bonnie) & InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendsSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagersWhoWishToFurtherAcademicCareers",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(bonnie) | InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -Attend(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagers(x) -> Attend(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> AttendAndEngaged(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(people) & -InactiveAndDisinterested(people)) | (-PerformInTalentShows(people) & InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneDances(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (FurtherAcademicCareers(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformOften(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformOften(bonnie) | InactiveDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishFurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: ((Attend(bon",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformOften(x) -> AttendAndEngaged(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformOften(bonnie) | InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -AttendSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareers(x) -> AttendSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. \nFOL:"
   ],
   [
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(bonnie) | InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneDances(x) -> -Attend(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareers(x) -> Attend(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> AttendAndEngageWithSchoolEvents(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShows(bonnie) & -InactiveAndDisinterested(bonnie)) | (-PerformInSchoolTalentShows(bonnie) & InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendsTheSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagersWhoWishToFurtherTheirAcademicCareers(x",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShow(x) -> (AttendSchoolEvent(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShow(bonnie) & -InactiveAndDisinterested(bonnie)) | (-PerformInTalentShow(bonnie) & InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneDance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (FurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShow(x) -> (AttendAndEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShow(bonnie) | InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendsSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagersWhoWishToFurtherAcademicCareers(x) -> StudentWhoAttendsSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> AttendAndEngageWithSchoolEvents(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShows(people) | InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -AttendSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareers(x) -> AttendSchool(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is"
   ]
  ]
 },
 {
  "index": 1,
  "responses": [
   [
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShow(x) -> AttendAndEngaged(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShow(people) | InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & WishToFurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> AttendAndEngaged(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShows(people) & -InactiveAndDisinterested(people)) | (-PerformInSchoolTalentShows(people) & InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendsSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. ((YoungChildOrTeenager(x) & WishToFurtherAcademicCareer(x)) -> StudentWhoAttendsSchool(x))\n",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShow(x) -> AttendAndEngage(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShow(bonnie) & -InactiveAndDisinterested(bonnie)) | (-PerformInTalentShow(bonnie) & InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneDance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & WishToFurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (TalentShow(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: ((TalentShow(x) & -Inactive(x)) | (-TalentShow(x) & Inactive(x)))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Attend(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (Inactive(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (Young(x) & FurtherAcademicCareer(x) -> Attend(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShow(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShow(people) & -InactiveAndDisinterested(people)) | (-PerformInTalentShow(people) & InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & WishToFurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and"
   ],
   [
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShow(x) -> (Attend(x) & VeryEngagedWithSchoolEvents(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShow(people) & -InactiveAndDisinterestedMember(people)) | (-PerformInSchoolTalentShow(people) & InactiveAndDisinterestedMember(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendsSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMember(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareer(x",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> AttendAndEngage(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShows(people) & -InactiveAndDisinterested(people)) | (-PerformInSchoolTalentShows(people) & InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & WishToFurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngaged(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShowsOften(bonnie) & -InactiveAndDisinterested(bonnie)) | (-PerformInSchoolTalentShowsOften(bonnie) & InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendsSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareer(x) -> Student",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> (AttendSchoolEvents(x) & VeryEngagedWithSchoolEvents(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShows(bonnie) & -InactiveAndDisinterestedMember(bonnie)) | (-PerformInSchoolTalentShows(bonnie) & InactiveAndDisinterestedMember(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendsSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterestedMember(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishes",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (TalentShow(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: ((TalentShow(x) & -Inactive(x)) | (-TalentShow(x) & Inactive(x)))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Attend(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (Inactive(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. ((YoungChild(x) | Teenager(x)) & WishToFurther(x) -> Attend(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a"
   ],
   [
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (TalentShow(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (TalentShow(people) & -InactiveAndDisinterested(people)) | (-TalentShow(people) & InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & FurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (TalentShow(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (TalentShow(bonnie) & -InactiveAndDisinterested(bonnie)) | (-TalentShow(bonnie) & InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneDance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (AcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (TalentShow(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (TalentShow(x) | InactiveCommunity(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Attend(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveCommunity(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChild(x) | Teenager(x) | AcademicCareer(x) -> Attend(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShow(x) -> AttendAndEngaged(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (exists x. (PerformInTalentShow(x) & -AttendAndEngaged(x)) | exists x. (PerformInTalentShow(x) & AttendAndEngaged(x)) | exists x. (-PerformInTalentShow(x) & Inactive(x)))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneDance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (Inactive(x) -> ChaperoneDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. ((Young(x) & AcademicCareer(x)) -> Student(x))\nTEXT: Bonnie either both attends and",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> AttendAndEngage(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShows(people) | InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & WishToFurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is"
   ],
   [
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShows(x) -> (AttendAndEngage(x) & Student(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShows(bonnie) & -InactiveAndDisinterested(bonnie)) | (-PerformInSchoolTalentShows(bonnie) & InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. ((YoungChildOrTeenager(x) & WishToFurtherAcademicCareer(x)) -> Student(x",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShow(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShow(people) & -InactiveAndDisinterested(people)) | (-PerformInTalentShow(people) & InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. ((YoungChildOrTeenager(x) & WishToFurtherAcademicCareer(x)) -> Student(x))\nTEXT: Bonnie either both attends",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngaged(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) | InactiveAndDisinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & WishToFurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShow(x) -> (AttendAndEngage(x) & Student(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (exists x. (PerformInTalentShow(x) & -InactiveAndDisinterested(x)) | exists x. (-PerformInTalentShow(x) & InactiveAndDisinterested(x)))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneDance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. ((YoungChildOrTeenager(x) & WishToFurtherCareer(x)) -> Student(x))\nTEXT: Bonnie either both attends and is very",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (TalentShow(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (exists x. TalentShow(x) & exists x. InactiveCommunity(x)) | (forall x. (TalentShow(x) -> -InactiveCommunity(x)) & forall x. (InactiveCommunity(x) -> -TalentShow(x)))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Attend(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveCommunity(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & WishToFurther(x) -> Attend(x))\nTEXT: Bonnie either both attends and is very engaged"
   ],
   [
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShow(x) -> (AttendSchoolEvents(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: ((PerformInSchoolTalentShow(people) & -InactiveAndDisinterested(people)) | (-PerformInSchoolTalentShow(people) & InactiveAndDisinterested(people)))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & WishToFurtherAcademicCareer(x) -> Student(x))\nTEXT:",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInSchoolTalentShowsOften(x) -> AttendAndEngagedWithSchoolEvents(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInSchoolTalentShowsOften(bonnie) & -InactiveAndDisinterested(bonnie)) | (-PerformInSchoolTalentShowsOften(bonnie) & InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendsSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareer(x",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (TalentShow(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (TalentShow(bonnie) | InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. ((YoungChild(x) | Teenager(x)) & FurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (TalentShow(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (TalentShow(someone) | InactiveAndDisinterested(someone))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Attend(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WishToFurtherAcademicCareer(x) -> Attend(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. \nF",
    "<EVALUATE>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformOftenInSchoolTalentShows(x) -> AttendAndEngage(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformOftenInSchoolTalentShows(bonnie) & -InactiveAndDisinterested(bonnie)) | (-PerformOftenInSchoolTalentShows(bonnie) & InactiveAndDisinterested(bonnie))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDances(x) -> -StudentWhoAttendsSchool(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDances(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenagerWhoWishesToFurtherAcademicCareer(x) ->"
   ]
  ]
 },
 {
  "index": 2,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(employee) & -LunchAtHome(employee)) | (-LunchInCompany(employee) & LunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: LunchAtHome(x) -> WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL:",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x, customer) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x, customer))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(james) & -LunchAtHome(james)) | (-LunchInCompany(james) & LunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkingRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x) -> AppearToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeeting(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (HaveLunchInCompany(james) & -HaveLunchAtHome(james)) | (-HaveLunchInCompany(james) & HaveLunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(x) -> WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears",
    "<PREMISES>\nAll employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomers(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetingWithCustomers(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (HaveLunchInCompany(employee) & -HaveLunchAtHome(employee)) | (-HaveLunchInCompany(employee) & HaveLunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(x) -> WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x, customer) -> AppearsToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeeting(x, customer))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (HaveLunchInCompany(employee) & -HaveLunchAtHome(employee)) | (-HaveLunchInCompany(employee) & HaveLunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(x) -> WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in"
   ],
   [
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x) -> AppearToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeeting(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (HaveLunchInCompany(james) & -HaveLunchAtHome(james)) | (-HaveLunchInCompany(james) & HaveLunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(x) -> WorkRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomers(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetingWithCustomers(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: ((HaveLunchInCompany(employee) & -HaveLunchAtHome(employee)) | (-HaveLunchInCompany(employee) & HaveLunchAtHome(employee)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(employee) -> WorkingRemotelyFromHome(employee)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x, customer) -> AppearsInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x, customer))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(employee) & -LunchAtHome(employee)) | (-LunchInCompany(employee) & LunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: LunchAtHome(x) -> RemoteWorkFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (OtherCountry(x) -> RemoteWorkFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -RemoteWorkFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearsInCompany",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(james) & -LunchAtHome(james)) | (-LunchInCompany(james) & LunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: -LunchAtHome(x) -> -WorkRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountries(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x, customer) -> InCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (InCompanyToday(x) -> ScheduleMeeting(x, customer))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (InCompanyToday(employee) & -InHome(employee)) | (-InCompanyToday(employee) & InHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: InHome(employee) -> RemoteWorkFromHome(employee)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> RemoteWorkFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -RemoteWorkFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & InCompanyToday(james)) | (-Manager"
   ],
   [
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(employee) & -LunchAtHome(employee)) | (-LunchInCompany(employee) & LunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: LunchAtHome(x) -> RemoteWorkFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> RemoteWorkFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -RemoteWorkFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearInCompany(james))",
    "<PREMISES>\nAll employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(employee) & -LunchAtHome(employee)) | (-LunchInCompany(employee) & LunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: -LunchAtHome(x) -> -WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nF",
    "<PREMISES>\nAll employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x, customer(x)) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x, customer(x)))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(james) & -LunchAtHome(james)) | (-LunchInCompany(james) & LunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(james) & -LunchAtHome(james)) | (-LunchInCompany(james) & LunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: -LunchAtHome(x) -> -WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (HaveLunchInCompany(james) | HaveLunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(x) -> WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: (Manager(james) &"
   ],
   [
    "<PREMISES>\nAll employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nEveryone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nEmployees will either have lunch in the company or have lunch at home.\nFOL: (HaveLunchInCompany(employee) & -HaveLunchAtHome(employee)) | (-HaveLunchInCompany(employee) & HaveLunchAtHome(employee))\nIf an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(x) -> WorkingRemotelyFromHome(x)\nAll employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nNo managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james)",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearsInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(james) & -LunchAtHome(james)) | (-LunchInCompany(james) & LunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: -LunchAtHome(x) -> -WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x, customer) -> AppearToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeeting(x, customer))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: ((HaveLunchInCompany(employee) & -HaveLunchAtHome(employee)) | (-HaveLunchInCompany(employee) & HaveLunchAtHome(employee)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(employee) -> WorkingRemotelyFromHome(employee)\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears",
    "<PREMISES>\nAll employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (HaveLunchInCompany(employee) & -HaveLunchAtHome(employee)) | (-HaveLunchInCompany(employee) & HaveLunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(employee) -> WorkingRemotelyFromHome(employee)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in",
    "<PREMISES>\nAll employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: ((HaveLunchInCompany(employee) & -HaveLunchAtHome(employee)) | (-HaveLunchInCompany(employee) & HaveLunchAtHome(employee)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(employee) -> WorkingRemotelyFromHome(employee)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in"
   ],
   [
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: ((LunchInCompany(james) & -LunchAtHome(james)) | (-LunchInCompany(james) & LunchAtHome(james)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: LunchAtHome(x) -> WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nF",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (HaveLunchInCompany(james) & -HaveLunchAtHome(james)) | (-HaveLunchInCompany(james) & HaveLunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(x) -> WorkRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x, customer) -> AppearsInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x, customer))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(employee) & -LunchAtHome(employee)) | (-LunchInCompany(employee) & LunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: LunchAtHome(employee) -> WorkRemotelyFromHome(employee)\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (OtherCountry(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearsInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (HaveLunchInCompany(james) & -HaveLunchAtHome(james)) | (-HaveLunchInCompany(james) & HaveLunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(x) -> WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x) -> AppearsToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeeting(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (HaveLunchInCompany(employee) & -HaveLunchAtHome(employee)) | (-HaveLunchInCompany(employee) & HaveLunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(x) -> WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL"
   ]
  ]
 },
 {
  "index": 3,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x, customer) -> AppearsInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x, customer))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(employee) & -LunchAtHome(employee)) | (-LunchInCompany(employee) & LunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: -LunchInCompany(employee) -> RemoteWorkFromHome(employee)\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (OtherCountry(x) -> RemoteWorkFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -RemoteWorkFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (HaveLunchInCompany(james) & -HaveLunchAtHome(james)) | (-HaveLunchInCompany(james) & HaveLunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(x) -> WorkRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(james) & -LunchAtHome(james)) | (-LunchInCompany(james) & LunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in",
    "<PREMISES>\nAll employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(employee) & -LunchAtHome(employee)) | (-LunchInCompany(employee) & LunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x) -> AppearsToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeeting(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (HaveLunchInCompany(employee) & -HaveLunchAtHome(employee)) | (-HaveLunchInCompany(employee) & HaveLunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(x) -> WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL"
   ],
   [
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x) -> InCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (InCompanyLunch(x) -> ScheduleMeeting(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (InCompanyLunch(employee) & -InHomeLunch(employee)) | (-InCompanyLunch(employee) & InHomeLunch(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: InHomeLunch(x) -> WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: (Manager(james",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x, customer) -> AppearInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x, customer))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(employee) & -LunchAtHome(employee)) | (-LunchInCompany(employee) & LunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: -LunchAtHome(x) -> -WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nF",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(employee) & -LunchAtHome(employee)) | (-LunchInCompany(employee) & LunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: LunchAtHome(x) -> WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nF",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (HaveLunchInCompany(james) & -HaveLunchAtHome(james)) | (-HaveLunchInCompany(james) & HaveLunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(x) -> WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeeting(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(james) & -LunchAtHome(james)) | (-LunchInCompany(james) & LunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: LunchAtHome(x) -> WorkRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager"
   ],
   [
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x, customer) -> AppearInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x, customer))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(employee) & -LunchAtHome(employee)) | (-LunchInCompany(employee) & LunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: -LunchAtHome(x) -> -WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nF",
    "<PREMISES>\nAll employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomers(x) -> AppearInCompanyToday(x))\nEveryone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomers(x))\nEmployees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(james) & -LunchAtHome(james)) | (-LunchInCompany(james) & LunchAtHome(james))\nIf an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkRemotelyFromHome(x))\nAll employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountries(x) -> WorkRemotelyFromHome(x))\nNo managers work remotely from home. \nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: (Manager",
    "<PREMISES>\nAll employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeeting(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: ((HaveLunchInCompany(employee) & -HaveLunchAtHome(employee)) | (-HaveLunchInCompany(employee) & HaveLunchAtHome(employee)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(x) -> WorkRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountry(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (HaveLunchInCompany(employee) & -HaveLunchAtHome(employee)) | (-HaveLunchInCompany(employee) & HaveLunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(x) -> WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x) -> AppearToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeeting(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (HaveLunchInCompany(james) & -HaveLunchAtHome(james)) | (-HaveLunchInCompany(james) & HaveLunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(x) -> WorkRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountries(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears"
   ],
   [
    "<PREMISES>\nAll employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x) -> AppearToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(james) & -LunchAtHome(james)) | (-LunchInCompany(james) & LunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nF",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x) -> AppearInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(employee) & -LunchAtHome(employee)) | (-LunchInCompany(employee) & LunchAtHome(employee))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: LunchAtHome(x) -> WorkRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james)",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x) -> AppearsInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(james) & -LunchAtHome(james)) | (-LunchInCompany(james) & LunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkingRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomers(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomers(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(james) & -LunchAtHome(james)) | (-LunchInCompany(james) & LunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: -LunchAtHome(x) -> -WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (HaveLunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: ((HaveLunchInCompany(employee) & -HaveLunchAtHome(employee)) | (-HaveLunchInCompany(employee) & HaveLunchAtHome(employee)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(x) -> WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the"
   ],
   [
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearsInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: ((LunchInCompany(employee) & -LunchAtHome(employee)) | (-LunchInCompany(employee) & LunchAtHome(employee)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: LunchAtHome(x) -> WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(james) & -LunchAtHome(james)) | (-LunchInCompany(james) & LunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: -LunchInCompany(x) -> WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountry(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x) -> InCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (InCompanyLunch(x) -> ScheduleMeeting(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (InCompanyLunch(james) & -InHomeLunch(james)) | (-InCompanyLunch(james) & InHomeLunch(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: InHomeLunch(x) -> RemoteWorkFromHome(x)\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountries(x) -> RemoteWorkFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -RemoteWorkFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeeting(x, customer) -> InCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (InCompanyToday(x) -> ScheduleMeeting(x, customer))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: ((InCompanyToday(employee) & -HaveLunchAtHome(employee)) | (-InCompanyToday(employee) & HaveLunchAtHome(employee)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: HaveLunchAtHome(x) -> WorkingRemotelyFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL:",
    "<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (ScheduleMeetingWithCustomer(x) -> AppearInCompanyToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (LunchInCompany(x) -> ScheduleMeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: (LunchInCompany(james) & -LunchAtHome(james)) | (-LunchInCompany(james) & LunchAtHome(james))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home. \nFOL: all x. (InOtherCountry(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home. \nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a"
   ]
  ]
 },
 {
  "index": 4,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) | Human(x)))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) & (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> (Glu(x) -> FeelingTired(x)))\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(monkeypoxVirus, animal) & Includes(humans, animal)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(monkeypox, fever) & Symptom(monkeypox, headache) & Symptom(monkeypox, musclePains) & Symptom(monkeypox, feelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(glu)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> Occur(monkeypoxVirus, x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Monkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> (Glu(x) -> Tired(x)))\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) | Human(x)))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomOfMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\nFOL: exists x. Animal(x)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Monkey",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> OccursIn(x, monkeypoxVirus))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptons(monkeypox, {Fever, Headache, MusclePains, FeelingTired})\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> (Glu(x) -> FeelingTired(x)))\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) | Human(x)))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomsOf(x, monkeypox) -> (Fever(x) | Headache(x) | MusclePains(x) | Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> (Glu(x) -> Tired(x)))\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\nFOL: exists x. Animal(x)\n</CONCLUSION>\n\n<EVAL",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Monkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomOfMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> (FeelingTired(x) & Glu(x)))\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> Occurs(monkeypoxVirus, x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Monkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> Tired(x))\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever & Headache & MusclePains & FeelingTired) \nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(glu)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) | Human(x)))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomsOf(x, monkeypox) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Human(x) -> (Glu(x) -> FeelingTired(x)))\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) | Human(x)))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever & Headache & MusclePains & FeelingTired) (symptomsOf(monkeypox))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Human(x) -> (Glu(x) -> FeelingTired(x)))\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) | Human(x)))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever & Headache & MusclePains & Tired &...) (symptomsOf(monkeypox))\nTEXT: People feel tired when they get a glu.\nFOL: Tired(glu)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) | Human(x)))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever & Headache & MusclePains & FeelingTired) (SymptomsOf(monkeypox))\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(Glu)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever & Headache & MusclePains & FeelingTired) (symptomsOf(monkeypox))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> FeelingTired(x, getGlu(x)))\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Monkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccurIn(monkeypoxVirus, animal) & OccurIn(monkeypoxVirus, human)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever & Headache & MusclePains & FeelingTired) |...\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(glu)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) | Human(x)))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Monkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (People(x) -> (Glu(x) -> FeelingTired(x)))\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> OccursIn(x, monkeypoxVirus))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Monkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (People(x) -> (Glu(x) -> Tired(x)))\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> Occur(monkeypoxVirus, x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever(monkeypox) & Headache(monkeypox) & MusclePains(monkeypox) & Tired(monkeypox))\nTEXT: People feel tired when they get a glu.\nFOL: Tired(glu)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever | Headache | MusclePains | Tired) monkeypox\nTEXT: People feel tired when they get a glu.\nFOL: Tired(glu)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) | Human(x)))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever & Headache & MusclePains & Tired &...) (symptomsOf(monkeypox))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> Tired(x))\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(monkeypoxVirus, animal) & Includes(humans, animal)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever(monkeypox) & Headache(monkeypox) & MusclePains(monkeypox) & Tired(monkeypox)) |...\nTEXT: People feel tired when they get a glu.\nFOL: Tired(people) -> GetGlu(people)\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomOfMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Monkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> Tired(x))\nTEXT: There is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 5,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> OccursIn(x, MonkeypoxVirus))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x) & -Flu(x) & (Fever(x) | Headache(x) | MusclePain(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> (Glu(x) -> FeelingTired(x)))\nTEXT: No one gets flu.\nFOL: all x. (-Person(x) | -Glu(x) | -Feeling",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Monkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\nTEXT: No one gets flu.\nFOL: -Flu(anyone)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) & -Human(x))) | (MonkeypoxVirus(x) -> Human(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Monkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> Tired(x))\nTEXT: No one gets flu.\nFOL: -Flu(everyone)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomOf(x, monkeypox) -> (Fever(x) | Headache(x) | MusclePains(x) | Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> (Glu(x) -> Tired(x)))\nTEXT: No one gets flu.\nFOL: -exists x. Flu(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> OccursIn(monkeypoxVirus, x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomsOf(x, monkeypox) -> (Fever(x) | Headache(x) | MusclePains(x) | Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: Tired(glu)  # Note: This statement is likely intended to be \"People feel tired when they get the flu\", but as written, it's unclear what \"glu\" refers to. Assuming it's a typo and"
   ],
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever | Headache | MusclePains | FeelTired) & (Fever | Headache | MusclePains | FeelTired) \nTEXT: People feel tired when they get a glu.\nFOL: FeelTired(-)\nTEXT: No one gets flu.\nFOL: -Flu\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) & -Human(x))) | (MonkeypoxVirus(x) -> Human(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever(monkeypox) & Headache(monkeypox) & MusclePains(monkeypox) & Tired(monkeypox)) | (Fever(monkeypox) & Headache(monkeypox) & MusclePains(monkeypox) & Tired(monkeypox) &... )\nTEXT: People feel tired when they get a glu.\nF",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) & -Human(x))) | MonkeypoxVirus(human)\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever & Headache & MusclePains & Tired &...) (symptomsOf(monkeypox))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> Tired(x))\nTEXT: No one gets flu.\nFOL: -Glu(anyone)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Monkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> (Glu(x) -> Tired(x)))\nTEXT: No one gets flu.\nFOL: -Flu(anyone)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(monkeypoxVirus, Animal) & Animal(human)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: Animal(mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(monkeypox, Fever) & Symptom(monkeypox, Headache) & Symptom(monkeypox, MusclePains) & Symptom(monkeypox, FeelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(people, Glu)\nTEXT: No one gets flu.\nFOL: -Flu(everyone)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Monkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> Tired(x))\nTEXT: No one gets flu.\nFOL: -Flu(anyone)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) & -Human(x)) | Human(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomsOf(x, monkeypox) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\nTEXT: No one gets flu.\nFOL: -exists x. Flu(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, MonkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> (OccurIn(x, MonkeypoxVirus) | Human(x)))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptom(x, Monkeypox) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> (Glu(x) -> FeelingTired(x)))\nTEXT: No one gets flu.\nFOL: -exists x. (Person(x) & Flu(x))\n</E",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomOf(monkeypox, x) <- (Fever(x) | Headache(x) | MusclePains(x) | Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Tired(x) <- Glu(x))\nTEXT: No one gets flu.\nFOL: -exists x. Flu(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever & Headache & MusclePains & FeelingTired) <- SymptonsOf(Monkeypox)\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired <- Glu\nTEXT: No one gets flu.\nFOL: -Flu\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomOfMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (People(x) -> (Glu(x) -> FeelingTired(x)))\nTEXT: No one gets flu.\nFOL: -Flu(everyone)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) & -Human(x))) | (Animal(x) & Human(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Symptoms(x, monkeypox) -> (Fever(x) | Headache(x) | MusclePains(x) | Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: Tired(x) -> Glu(x)\nTEXT: No one gets flu.\nFOL: -Flu(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> MonkeypoxVirus(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Monkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\nTEXT: No one gets flu.\nFOL: -Flu(anyone)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever & Headache & MusclePains & Tired &...) (symptomsOf(monkeypox))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> Tired(x))\nTEXT: No one gets flu.\nFOL: -Flu(anyone)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) & -Human(x))) | MonkeypoxVirus(human)\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Monkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\nTEXT: No one gets flu.\nFOL: -exists x. (Flu(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Monkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> Tired(x))\nTEXT: No one gets flu.\nFOL: -Flu(anyone)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Monkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> Tired(x))\nTEXT: No one gets flu.\nFOL: all x. (-Flu(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomOf(monkeypox, x) & (x = Fever | x = Headache | x = MusclePains | x = FeelingTired))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> (Glue(x) -> FeelingTired(x)))\nTEXT: No one gets flu.\nFOL: -Flu(anyone)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever & Headache & MusclePains & FeelTired) & SymptomOf(monkeypox,...)\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelTired(x))\nTEXT: No one gets flu.\nFOL: -Glu(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) & -Human(x))) | MonkeypoxVirus(human)\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomsOf(x, monkeypox) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(x) -> Glu(x)\nTEXT: No one gets flu.\nFOL: -exists x. (Glu(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 6,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomsOfMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptomsOfMonkeypox(coughing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) & -Human(x))) | (Animal(human) & MonkeypoxVirus(human))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever & Headache & MusclePains & FeelingTired &...) are SymptonsOf(Monkeypox)\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> (GetGlu(x) -> FeelingTired(x)))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: Coughing",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomOfMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (People(x) -> (GetGlu(x) -> FeelingTired(x)))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptomOfMonkeypox(coughing)\n</EVALUATE>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) & -Human(x)) | Human(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Fever & Headache & MusclePains & Tired &...) (SymptonsOf(monkeypox))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> Tired(x))\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\nFOL: (Fever & Headache & MusclePains & Tired &... &",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomOfMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> (GetGlu(x) -> FeelingTired(x)))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptomOfMonkeypox(coughing)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> MonkeypoxVirus(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptonsOf(monkeypox, (Fever & Headache & MusclePains & FeelingTired))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> FeelingTired(x) & GetGlu(x))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptonsOf(monkeypox, Coughing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(monkeypoxVirus, animals) & OccursIn(monkeypoxVirus, humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\nTEXT: Mammals are animals.\nFOL: Animal(mammals)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptom(monkeypox, fever) & Symptom(monkeypox, headache) & Symptom(monkeypox, musclePains) & Symptom(monkeypox, feelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: (Symptom(glu, feelingTired))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: Symptom(monkeypox, coughing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomOfMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptomOfMonkeypox(coughing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> MonkeypoxVirus(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptonOfMonkeypox(x) & (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptonOfMonkeypox(coughing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> MonkeypoxVirus(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptonOfMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (People(x) -> (Glu(x) -> FeelingTired(x)))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptonOfMonkeypox(coughing)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) & (Human(x) | exists y. Animal(y))))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptonsOfMonkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(x) <- Glu(x)\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptonsOfMonkeypox(x) & -C",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> MonkeypoxVirus(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptonOfMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> Tired(x))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptonOfMonkeypox(coughing)\n</EVALUATE>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) & -Human(x))) | (Animal(x) & Human(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomsOfMonkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\nFOL:",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> MonkeypoxVirus(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptonOfMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> (Glu(x) -> FeelingTired(x)))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptonOfMonkeypox(coughing)\n</EVALUATE>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomsOfMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\nFOL: SymptomsOfMonkeypox(coughing)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptonsOfMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(x) -> Glu(x)\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptonsOfMonkeypox(x) -> Coughing(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) & -Human(x)))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptons(monkeypox, Fever) & Symptons(monkeypox, Headache) & Symptons(monkeypox, MusclePains) & Symptons(monkeypox, FeelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: Symptons",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptons(monkeypox, (Fever & Headache & MusclePains & Tired))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (People(x) -> (GetGlu(x) -> Tired(x)))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: Symptons(monkeypox, Coughing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> MonkeypoxVirus(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptonsOfMonkeypox(x) & (Fever(x) | Headache(x) | MusclePains(x) | Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> (Glu(x) -> Tired(x)))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptonsOfMonkeypox(coughing)\n</EVALUATE>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) & -Human(x))) | (Animal(x) & Human(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptonOfMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\nFOL:"
   ],
   [
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomOfMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: FeelingTired(x) -> Glu(x)\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptomOfMonkeypox(coughing)\n</EVALUATE>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) & (Human(x) | exists y. (Animal(y) & -Human(y)) & OccursIn(x, y))))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomsOf(x, monkeypox) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Person(x) -> (FeelingTired(x) & Glu(x)))\n</PREMISES",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> (Animal(x) & -Animal(human) | Animal(x) & Animal(human)))\nTEXT: Humans are mammals.\nFOL: Mammal(human)\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptonsOfMonkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (People(x) -> FeelingTired(x) & GetGlu(x))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptonsOfMonkeypox",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (Animal(x) -> Occur(monkeypoxVirus, x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptonsOfMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> FeelingTired(x))\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptonsOfMonkeypox(x) -> Coughing(x)\n</E",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: InfectiousDisease(monkeypox) & CausedBy(monkeypox, monkeypoxVirus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: all x. (MonkeypoxVirus(x) -> Animal(x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (SymptomsOfMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | Tired(x)))\nTEXT: People feel tired when they get a glu.\nFOL: Tired(x) -> Glu(x)\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptomsOfMonkeypox(x) -> Coughing(x)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 7,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(legendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: Top10(legendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(japaneseGameCompany) & Created(japaneseGameCompany, theLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> MadeByJapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(createdLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10List(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> Top10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(legendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: Top10List(legendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(japaneseGameCompany) & Created(japaneseGameCompany, legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(Made(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(legendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: Top10(legendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(gameCompany) & Created(gameCompany, theLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(theLegendOfZelda)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThan1MillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThan1MillionCopies(legendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: Top10(legendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(createdTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(legendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10(legendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(legendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(legendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(createdTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(theLegendOfZelda)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(legendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10(legendOfZelda)\n</EVALUATE>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(createdTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(created x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: Top10(theLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is in the Top 10 list.\nFOL: Top10(theLegendOfZelda)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(createdTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL:",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(legendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: Top10(legendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(japaneseGameCompany) & Created(japaneseGameCompany, theLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> MadeByJapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillion(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: Top10(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(legendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(legendOfZelda)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(zeldaCreator)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(creator(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(zeldaCreator)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10(zelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(legendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: Top10(legendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(japaneseGameCompany) & Created(japaneseGameCompany, theLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(zelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(zelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: Top10(zelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(legendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10(legendOfZelda)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(japaneseGameCompany) & Created(japaneseGameCompany, legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(Made(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(legendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(legendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(zeldaCreator)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(zeldaCreator)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10(zeldaCreator)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(createdTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(theLegendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(japaneseGameCompany) & Created(japaneseGameCompany, legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(Made(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(legendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: InTop10List(legendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(legendOfZelda)\nTEXT: The Legend of Zelda is in the Top 10 list.\nFOL: Top10(legendOfZelda)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 8,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThan1MillionCopies(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThan1MillionCopies(legendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(fifa22)\n</EVALUATE>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(theLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(MadeBy(fifa22))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & CreatedGame(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(legendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(fifa22)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(zeldaCreator)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(xCreator))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(zeldaCreator)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(fifa22Creator)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(zeldaCreator)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(xCreator))\nTEXT: If a game sells more than one million copies, then it",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(TheLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(MadeBy(fifa22))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(createdTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(madeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseVideoGameCompany(madeBy(fifa22))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedGame(zelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(zelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseVideoGameCompany(MadeBy(fifa22))\n</EVALUATE>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(legendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(fifa22)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(zeldaCreator)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(gameMaker(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(zelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(fifa22Creator)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(zeldaCreator)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(gameMaker(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(Created(TheLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(Made(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(TheLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseVideoGameCompany(Made(FIFA22))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & Created(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(theLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(fifa22)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & Created(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(createdTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(madeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(madeBy(fifa22))\n</EVALUATE>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(japaneseGameCompany) & Created(japaneseGameCompany, theLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\nFOL: JapaneseVideoGameCompany(fifa22)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(japaneseGameCompany) & Created(japaneseGameCompany, theLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x.",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & Created(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(MadeBy(fifa22))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & Created(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL:",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(legendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(fifa22)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThan1M(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThan1M(legendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(fifa22)\n</EVALUATE>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedGame(TheLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(MadeBy(FIFA22))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedGame(TheLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(Made",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(japaneseGameCompany) & CreatedGame(japaneseGameCompany, theLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(GameCompany(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(japaneseGameCompany) & GameCompany(japaneseGameCompany) & MadeGame(japaneseGameCompany, fifa22)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(legendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(fifa22)\n</EVALUATE>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(Made(x)))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\nFOL: JapaneseVideoGameCompany(Made(FIFA22))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(Made(x)))\nTEXT:"
   ],
   [
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(legendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\nFOL: JapaneseVideoGameCompany(fifa22)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedGame(zelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThan1Million(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThan1Million(zelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(MadeBy(fifa22))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(Made(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(TheLegendOfZelda)\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(Made(FIFA22))\n</EVALUATE>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(legendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(fifa22)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & Created(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(theLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\nFOL: JapaneseGameCompany(MadeBy(fifa22))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: exists x. (JapaneseGameCompany(x) & Created(x, theLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10"
   ]
  ]
 },
 {
  "index": 9,
  "responses": [
   [
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(createdTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(theLegendOfZelda)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(createdLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(created x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(legendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(legendOfZelda)\n</EVALUATE>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(zeldaCreator)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(gameMaker(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThan1Million(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThan1Million(zeldaCreator)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -Top10(zeldaCreator)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(japaneseGameCompany) & CreatedGame(japaneseGameCompany, theLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10List(x) -> JapaneseGameCompany(GameCompanyOf(x)))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> Top10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -Top10List(theLegendOfZelda)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(japaneseGameCompany) & CreatedGame(japaneseGameCompany, theLegendOfZelda)\nTEXT: All games in the Top 10 list are",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(legendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -Top10(legendOfZelda)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(legendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -Top10(legendOfZelda)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(legendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10(legendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(japaneseGameCompany) & Created(japaneseGameCompany, theLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(Made(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(theLegendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10(theLegendOfZelda)\n</EVALUATE>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(zeldaCreator)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(gameMaker(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(zelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -Top10(zelda)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(legendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(legendOfZelda)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(createdLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(legendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(legendOfZelda)\n</EVALUATE>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(japaneseGameCompany) & Created(japaneseGameCompany, theLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(GameCompany(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(theLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -Top10(theLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(createdTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(theLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(theLegendOfZelda)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(createdTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT:",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(legendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -Top10(legendOfZelda)\n</EVALUATE>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(legendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(legendOfZelda)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(japaneseGameCompany) & Created(japaneseGameCompany, legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10List(x) -> JapaneseGameCompany(MadeBy(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(legendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -Top10List(legendOfZelda)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(japaneseGameCompany) & Created(japaneseGameCompany, legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(japaneseGameCompany) & Created(japaneseGameCompany, legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10List(x) -> JapaneseGameCompany(GameCompanyOf(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(legendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -Top10List(legendOfZelda)\n</EVALUATE>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(createdTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10List(x) -> JapaneseGameCompany(Made(x)))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillionCopies(x) -> Top10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillionCopies(theLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -Top10List(theLegendOfZelda)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(createdTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10List(x) -> JapaneseGameCompany(Made(x)))\n",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(legendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10(legendOfZelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10List(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillionCopies(x) -> InTop10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(legendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10List(legendOfZelda)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(legendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -Top10(legendOfZelda)\n</EVALUATE>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(legendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -Top10(legendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(legendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(legendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -Top10(legendOfZelda)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(gameCreator) & Game(game) & TheLegendOfZelda(zelda) & Creator(zelda, gameCreator)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(zelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10(zelda)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(japaneseGameCompany) & Created(japaneseGameCompany, theLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> MadeByJapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (SellsMoreThanOneMillion(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillion(theLegendOfZelda)\nTEXT: The Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10(theLegendOfZelda)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 10,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes. \nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes. \nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes. \nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes. \nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes. \nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes. \nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes. \nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSided(x))\nTEXT: All four-sided things are shapes. \nFOL: all x. (FourSided(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes.\nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes. \nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 11,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: ((Rabbit(x) & -Squirrel(x)) | (-Rabbit(x) & Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<PREMISES>\nAll rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nSome turtles exist.\nFOL: exists x. Turtle(x)\nAn animal is either a rabbit or a squirrel.\nFOL: ((Rabbit(animal) & -Squirrel(animal)) | (-Rabbit(animal) & Squirrel(animal)))\nIf something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nAll squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nRock is still.\nFOL: Still(rock)\n</PREMISES>\n<CONCLUSION>\nRock is a turtle.\nFOL: Turtle(rock)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<PREMISES>\nAll rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nSome turtles exist.\nFOL: exists x. Turtle(x)\nAn animal is either a rabbit or a squirrel.\nFOL: ((Rabbit(x) & -Squirrel(x)) | (-Rabbit(x) & Squirrel(x)))\nIf something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nAll squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nRock is still.\nFOL: Still(rock)\n</PREMISES>\n<CONCLUSION>\nRock is a turtle.\nFOL: Turtle(rock)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: ((Rabbit(x) & -Squirrel(x)) | (-Rabbit(x) & Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: ((Rabbit(x) & -Squirrel(x)) | (-Rabbit(x) & Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: ((Rabbit(animal) & -Squirrel(animal)) | (-Rabbit(animal) & Squirrel(animal)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle.\nFOL: Turtle(rock)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 12,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<PREMISES>\nAll rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nSome turtles exist.\nFOL: exists x. Turtle(x)\nAn animal is either a rabbit or a squirrel.\nFOL: (Rabbit(animal) & -Squirrel(animal)) | (-Rabbit(animal) & Squirrel(animal))\nIf something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nAll squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nRock is still.\nFOL: Still(rock)\n</PREMISES>\n<CONCLUSION>\nRock is not a turtle.\nFOL: -Turtle(rock)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: (Rabbit(animal) & -Squirrel(animal)) | (-Rabbit(animal) & Squirrel(animal))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nSome turtles exist. \nFOL: exists x. Turtle(x)\nAn animal is either a rabbit or a squirrel.\nFOL: ((Rabbit(x) & -Squirrel(x)) | (-Rabbit(x) & Squirrel(x)))\nIf something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nAll squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nRock is still.\nFOL: Still(rock)\n</PREMISES>\n<CONCLUSION>\nRock is not a turtle.\nFOL: -Turtle(rock)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\n</PREMISES>\n<CONCLUSION>\nRock is not a turtle.\nFOL: -Turtle(rock)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nSome turtles exist. \nFOL: exists x. (Turtle(x))\nAn animal is either a rabbit or a squirrel.\nFOL: ((Rabbit(x) & -Squirrel(x)) | (-Rabbit(x) & Squirrel(x)))\nIf something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nAll squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nRock is still.\nFOL: Still(rock)\n</PREMISES>\n<CONCLUSION>\nRock is not a turtle.\nFOL: -Turtle(rock)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(rock)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 13,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: Turtle(rock) | Cute(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: Turtle(rock) | Cute(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: Turtle(rock) | Cute(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: Turtle(rock) | Cute(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<PREMISES>\nAll rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nSome turtles exist.\nFOL: exists x. Turtle(x)\nAn animal is either a rabbit or a squirrel.\nFOL: (Rabbit(animal) & -Squirrel(animal)) | (-Rabbit(animal) & Squirrel(animal))\nIf something is skittish, then it is not still.\nFOL: Skittish(x) -> -Still(x)\nAll squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nRock is still.\nFOL: Still(rock)\n</PREMISES>\n<CONCLUSION>\nRock is a turtle or cute.\nFOL: Turtle(rock) | Cute(rock)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: Turtle(rock) | Cute(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: (Rabbit(animal) & -Squirrel(animal)) | (-Rabbit(animal) & Squirrel(animal))\nTEXT: If something is skittish, then it is not still.\nFOL: Skittish(x) -> -Still(x)\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: Turtle(rock) | Cute(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: Turtle(rock) | Cute(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: Turtle(rock) | Cute(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: Turtle(rock) | Cute(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(rock) | Cute(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: Turtle(rock) | Cute(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: Turtle(rock) | Cute(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: Turtle(rock) | Cute(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: Turtle(rock) | Cute(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: Turtle(rock) | Cute(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: Rock is a turtle or cute.\nFOL: Turtle(rock) | Cute(rock)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 14,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -(Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: (Rabbit(rock) & -Squirrel(rock)) | (-Rabbit(rock) & Squirrel(rock))\nTEXT: If something is skittish, then it is not still.\nFOL: Skittish(x) -> -Still(x)\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -Turtle(rock) & -Squirrel(rock) -> (Cute(rock) | Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: (Rabbit(rock) & -Squirrel(rock)) | (-Rabbit(rock) & Squirrel(rock))\nTEXT: If something is skittish, then it is not still.\nFOL: Skittish(x) -> -Still(x)\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -Turtle(rock) & -Squirrel(rock) -> (Cute(rock) | Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: - (Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: - (Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -(Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: (Rabbit(animal) & -Squirrel(animal)) | (-Rabbit(animal) & Squirrel(animal))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -(Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -(Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -(Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -(Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -(Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -Turtle(rock) & -Squirrel(rock) -> (Cute(rock) | Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -(Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -((Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock)))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 15,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nSome turtles exist. \nFOL: exists x. Turtle(x)\nAn animal is either a rabbit or a squirrel.\nFOL: (Rabbit(animal) & -Squirrel(animal)) | (-Rabbit(animal) & Squirrel(animal))\nIf something is skittish, then it is not still.\nFOL: Skittish(x) -> -Still(x)\nAll squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nRock is still.\nFOL: Still(rock)\n</PREMISES>\n<CONCLUSION>\nIf Rock is cute and still, then Rock is a turtle and skittish.\nFOL: Cute(rock) & Still(rock) -> (Turtle(rock) & Skittish(rock))\n</CONCLUSION>",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\n</PREMISES>\n<CONCLUSION>\nIf Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. Turtle(x)\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(rock)\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(rock) & Still(rock)) -> (Turtle(rock) & Skittish(rock))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 16,
  "responses": [
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(strangerThings) & Netflix(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(karen, lisa, strangerThings)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) -> Download(x, karen)) & (Download(x, karen) -> BingeWatch(x, karen)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\", karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, karen, lisa))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(\"Stranger Things\", karen, lisa)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow) & Netflix(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(karen, lisa, strangerThings)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) -> Download(x, karen)) & (Download(x, karen) -> BingeWatch(x, karen)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\", karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, karen, lisa))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(\"Stranger Things\", karen, lisa)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(strangerThings) & Netflix(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(karen, lisa, strangerThings)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) & NetflixShow(x)) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(karen, lisa, netflixShow)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(Karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(Karen, x) <-> Download(Karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, NetflixShow(\"Black Mirror\"))\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(Karen, x) -> Share(Karen, x, Lisa))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(Karen, NetflixShow(\"Stranger Things\"), Lisa)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(strangerThings))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, netflixShow(\"Black Mirror\"))\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(netflixShow(\"Black Mirror\"))\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(karen, lisa, netflixShow(\"Stranger Things\"))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(strangerThings) & NetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(karen, lisa, strangerThings)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow) & Netflix(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) & -Download(karen, x)) | (-BingeWatch(karen, x) & Download(karen, x)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> ShareToLisa(karen, x))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: ShareToLisa(karen, strangerThings)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow) & Netflix(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> ShareTo(lisa, karen, x))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: ShareTo(lisa, karen, strangerThings)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow) & NetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(karen, lisa, strangerThings)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(strangerThings))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) & NetflixShow(x)) -> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(NetflixShow(blackMirror), karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(NetflixShow(strangerThings), lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(Netflix, strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x, karen) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> ShareTo(lisa, karen, x))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: ShareTo(lisa, karen, strangerThings)\n</EVALUATE>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: Popular(strangerThings) & NetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Stranger Things\" to Lisa.\nFOL: Share(strangerThings, lisa, karen)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: \"Stranger Things\" is a popular"
   ],
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow) & NetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(strangerThings, lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow) & NetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) & NetflixShow(x)) -> Download(karen, x)) & all x. ((Download(karen, x) & NetflixShow(x)) -> BingeWatch(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(karen, lisa, stranger",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixStrangerThings) & Netflix(netflixStrangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) & Netflix(x)) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(karen, lisa, netflixStrangerThings)\n</EVALUATE>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(NetflixShow(\"Black Mirror\"), karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Stranger Things\" to Lisa.\nFOL: Share(NetflixShow(\"Stranger Things\"), lisa, karen)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow) & NetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Stranger Things\" to Lisa.\nFOL: Share(karen, lisa, strangerThings)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show"
   ],
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\", karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(\"Stranger Things\", lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(strangerThings) & Netflix(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(karen, lisa, strangerThings)\n</EVALUATE>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(NetflixShow(\"Black Mirror\"), karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Stranger Things\" to Lisa.\nFOL: Share(NetflixShow(\"Stranger Things\"), lisa, karen)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(strangerThings))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) -> Download(x, karen)) & (Download(x, karen) -> BingeWatch(x, karen)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(NetflixShow(blackMirror), karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, karen, lisa))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(NetflixShow(strangerThings), karen, lisa)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) -> Download(x, karen)) & (Download(x, karen) -> BingeWatch(x, karen)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\", karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, karen, lisa))\nTEXT: Karen will share \"Stranger Things\" to Lisa.\nFOL: Share(\"Stranger Things\", karen, lisa)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 17,
  "responses": [
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow) \nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixStrangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (Netflix(x) -> (BingeWatch(karen, x) <-> Download(karen, x)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(strangerThings) & Netflix(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</EVALUATE>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: Popular(Netflix(strangerThings))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\n</PREMISES>\n<CONCLUSION>\n\"Black Mirror\" is popular.\nFOL: Popular(Netflix(blackMirror))\n</CONCLUSION>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\", karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\n</PREMISES>\n<CONCLUSION>\n\"Black Mirror\" is popular.\nFOL: Popular(\"Black Mirror\")\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> ShareTo(lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixStrangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) & NetflixShow(x)) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixStrangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) & NetflixShow(x)) -> Download(karen, x) & Download(karen, x) -> BingeWatch(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(Netflix, strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x, karen) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (Netflix(x) & BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Netflix, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(Netflix, blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(strangerThings) & Netflix(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) -> Download(x, karen)) & (Download(x, karen) -> BingeWatch(x, karen)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow1)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow)  # Assuming \"Stranger Things\" is a Netflix show, this is incorrect and should be NetflixShow(\"Stranger Things\") and then Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> ShareTo(lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(Netflix, strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x, karen) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) & Netflix(x)) -> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(Netflix, blackMirror)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) -> Download(karen, x)) & (Download(karen, x) -> BingeWatch(karen, x)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, netflixShow(\"Black Mirror\"))\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(netflixShow(\"Black Mirror\"))\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(netflixShow(\"Black Mirror\"))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(strangerThings) & Netflix(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) -> Download(karen, x)) & (Download(karen, x) -> BingeWatch(karen, x)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow1)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(netflixShow2, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(netflixShow2)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(netflixShow2)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow) & NetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> ShareTo(lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: Popular(\"Stranger Things\") & Netflix(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) & Netflix(x)) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\", karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\n</PREMISES>\n<CONCLUSION>\n\"Black Mirror\" is popular.\nFOL: Popular(\"Black Mirror\")\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(strangerThings) & Netflix(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) -> Download(karen, x)) & (Download(karen, x) -> BingeWatch(karen, x)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, x, lisa))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(strangerThings) & Netflix(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) -> Download(karen, x)) & (Download(karen, x) -> BingeWatch(karen, x)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: \"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</EVALUATE>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: Popular(\"Stranger Things\") & Netflix(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(Karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (Netflix(x) & BingeWatch(Karen, x) <-> Download(Karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, \"Black Mirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(Karen, x) -> Share(Karen, x, Lisa))\n</PREMISES>\n<CONCLUSION>\n\"Black Mirror\" is popular.\nFOL: Popular(\"Black Mirror\")\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(\"Str",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\n</PREMISES>\n<CONCLUSION>\n\"Black Mirror\" is popular.\nFOL: Popular(blackMirror)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(strangerThings)\nTEXT"
   ]
  ]
 },
 {
  "index": 18,
  "responses": [
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: (Popular(netflixShow) -> BingeWatch(netflixShow, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: (BingeWatch(netflixShow, karen) <-> Download(netflixShow, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: (BingeWatch(netflixShow, karen) -> Share(netflixShow, karen, lisa))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, karen, lisa)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) -> Download(x, karen)) & (Download(x, karen) -> BingeWatch(x, karen)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(NetflixShow(\"Black Mirror\"), karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, karen, lisa))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(NetflixShow(\"Black Mirror\"), karen, lisa)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(NetflixShow(\"Black Mirror\"), karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(NetflixShow(\"Black Mirror\"), lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow) \nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> ShareTo(lisa, x, karen))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: ShareTo(lisa, blackMirror, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) & NetflixShow(x)) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(NetflixShow(\"Black Mirror\"), karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(NetflixShow(\"Black Mirror\"), lisa, karen)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(Karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(Karen, x) <-> Download(Karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, NetflixShow(\"Black Mirror\"))\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(Karen, x) -> Share(Karen, x, Lisa))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(Karen, NetflixShow(\"Black Mirror\"), Lisa)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) <-> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(NetflixShow(\"Black Mirror\"), karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(NetflixShow(\"Black Mirror\"), lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, x, lisa))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(karen, blackMirror, lisa)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(strangerThings) & Netflix(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) -> Download(karen, x)) & (Download(karen, x) -> BingeWatch(karen, x)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(karen, lisa, blackMirror)\n</EVALUATE>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow1)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) & NetflixShow(x)) -> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, lisa, karen)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show"
   ],
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) & NetflixShow(x)) -> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\", karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, karen, lisa))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(\"Black Mirror\", karen, lisa)\n</EVALUATE>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow) & NetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) -> (BingeWatch(x, karen) <-> Download(x, karen)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, karen, lisa))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, karen, lisa)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: \"Stranger",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow) \nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) & NetflixShow(x)) -> Download(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, lisa, karen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(karen, lisa, blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(Karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(Karen, x) -> Download(Karen, x)) & (Download(Karen, x) -> BingeWatch(Karen, x)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, NetflixShow(\"Black Mirror\"))\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(NetflixShow(\"Black Mirror\"))\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(Karen, x) -> Share(Karen, x, Lisa))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(Karen, NetflixShow(\"Black Mirror\"), Lisa)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixStrangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) -> Download(karen, x)) & (Download(karen, x) -> BingeWatch(karen, x)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(karen, lisa, blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (NetflixShow(x) -> (BingeWatch(karen, x) <-> Download(karen, x)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> ShareTo(lisa, karen, x))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: ShareTo(lisa, karen, blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> ShareTo(lisa, karen, x))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: ShareTo(lisa, karen, blackMirror)\n</EVALUATE>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: Popular(Netflix, strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(Netflix, x) -> BingeWatch(Netflix, karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (Netflix(x) & BingeWatch(Netflix, karen, x) <-> Download(Netflix, karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Netflix, karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(Netflix, karen, x) -> Share(Netflix, karen, lisa, x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Black Mirror\" to Lisa.\nFOL: Share(Netflix, karen, lisa, blackMirror)\n</CON",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: Popular(Netflix(strangerThings))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) <-> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Black Mirror\" to Lisa.\nFOL: Share(karen, lisa, blackMirror)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular"
   ],
   [
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: Popular(NetflixShow(\"Stranger Things\"))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) -> Download(x, karen)) & (Download(x, karen) -> BingeWatch(x, karen)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(NetflixShow(\"Black Mirror\"), karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, karen, lisa))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Black Mirror\" to Lisa.\nFOL: Share(NetflixShow(\"Black Mirror\"), karen, lisa)\n",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: Popular(Netflix, strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(Netflix, x) -> BingeWatch(Karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((Netflix(x) & BingeWatch(Karen, x)) <-> Download(Karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(Karen, x) -> Share(Karen, Lisa, x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Black Mirror\" to Lisa.\nFOL: Share(Karen, Lisa, blackMirror)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL:",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow) \nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: (Popular(netflixShow) -> BingeWatch(netflixShow, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: (BingeWatch(netflixShow, karen) <-> Download(netflixShow, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: (BingeWatch(netflixShow, karen) -> Share(netflixShow, karen, lisa))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, karen, lisa)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(Netflix(strangerThings))\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (Netflix(x) -> (BingeWatch(karen, x) <-> Download(karen, x)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Share(karen, lisa, x))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(karen, lisa, blackMirror)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: Popular(netflixShow1)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(x, karen) -> Download(x, karen)) & (Download(x, karen) -> BingeWatch(x, karen)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror, karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> Share(x, lisa, karen))\nTEXT: Karen will share \"Black Mirror\" to Lisa.\nFOL: Share(blackMirror, lisa, karen)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 19,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympics(beijing, 2008) & HostedSummerParalympics(beijing, 2008)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing,?) & HostedWinterOlympics(beijing,?) & HostedSummerParalympics(beijing,?) & HostedWinterParalympics(beijing,?)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) & LocatedIn(x, beijing) & NumberOfUniversities(91) -> BestUniversity(x",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted(2008SummerOlympics(beijing) & 2008SummerParalympics(beijing))\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (Hosted(SummerOlympics(beijing)) & Hosted(WinterOlympics(beijing)) & Hosted(SummerParalympics(beijing)) & Hosted(WinterParalympics(beijing)))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: (exists x. University(x) & LocatedIn(beijing, x) & NumberOfUniversities(91)) & BestIn(asiaPacific & world, x",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: (Exists x. University(x) & LocatedInBeijing(x) & (NumberOfUniversitiesInBeijing() = 91) & ConsistentlyRankAmongBestInAsiaPacificAndWorld(x))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted2008SummerOlympics(be",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(people'sRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(beijing) & -WorstUniversity(x))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olymp",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: true\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted2008SummerOlympicsAndWinterOlympics(beijing)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(China, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(NorthernChina, beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympics(beijing, 2008) & HostedSummerParalympics(beijing, 2008)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing, 2008) & HostedWinterOlympics(beijing, _) & HostedSummerParalympics(beijing, 2008) & HostedWinterParalympics(beijing, _)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) & LocatedIn(beijing, x) -> RankedAmongBest(x))\nTEXT: Beijing has",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(people'sRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: (exists x. University(x) & EnrolledIn(beijing, x)) -> ConsistentlyRankAmongBest(x)\nTEXT: Beijing has hosted both the 2008 Summer Olympics and",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted(2008SummerOlympics(beijing)) & Hosted(2008SummerParalympics(beijing))\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Hosted(BothSummerAndWinterOlympics(beijing)) & Hosted(BothSummerAndWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankAmongBest(university(beijing), asiaPacificAndWorld)\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted(2008SummerOlympics(be",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) & (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: (RankAmongBestAsiaPacific(beijing) & RankAmongBestWorld(beijing))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: (Hosted2008SummerOlymp",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(northernChina, beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted(2008SummerOlympics, beijing) & Hosted(2008SummerParalympics, beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Hosted(SummerOlympics, beijing) & Hosted(WinterOlympics, beijing) & Hosted(SummerParalympics, beijing) & Hosted(WinterParalympics, beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: many x. (University(x) & LocatedIn(beijing, x) & ConsistentlyRankAmongBest(x))\n"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) | (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: -exists x. (University(x) & NotBestUniversityInAsiaPacificAndWorld(x))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: (Hosted2008",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankAmongBest(91, asiaPacific, world)\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) & (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) & LocatedIn(x, beijing) & NumberOfUniversities(91) -> ConsistentlyRankAmongBest(x))\nTEXT: Beijing has",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) & (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankAmongBestInAsiaPacificAndWorld(count: 91, universitiesOf(beijing))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyUniversitiesConsistentlyRankAmongBest(beijing)\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted2008SummerOlympics(be"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: (BestUniversity(rank91) & LocatedIn(rank91, beijing)) | (BestUniversity(rank92) & LocatedIn(rank92, beijing)) |... | (BestUniversity(rank",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted(2008SummerOlympics) & Hosted(2008SummerParalympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Hosted(SummerOlympics) & Hosted(WinterOlympics) & Hosted(SummerParalympics) & Hosted(WinterParalympics)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: (NumberUniversities(beijing) = 91) & BestUniversity(asiaPacific, beijing) & BestUniversity(world, beijing)\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(northernChina, beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) | (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(beijing, x) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing has hosted both the 2008",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: CapitalOf(people'sRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: (HostedSummerOlympics(beijing, 2008) & HostedSummerParalympics(beijing, 2008))\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing, _) & HostedWinterOlympics(beijing, _) & HostedSummerParalympics(beijing, _) & HostedWinterParalympics(beijing, _))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(x, beijing) & NumberOfUniversities(91) & Consist",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: (exists x. University(x) & LocatedInBeijing(x) & NumberOfUniversities(91)) -> ConsistentlyRankAmongBestInAsiaPacificAndWorld()\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: (Hosted2008SummerOlympics(beijing) & exists x."
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) & LocatedInBeijing(x) -> RankedAmongBest(x))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted2008SummerOlympics(beijing) & HostedWinterOlympics(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: Capital(people'sRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(northernChina, beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted(2008SummerOlympics, beijing) & Hosted(2008SummerParalympics, beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Hosted(2008SummerOlympics, beijing) & Hosted(2008SummerParalympics, beijing) & Hosted(WinterOlympics, beijing) & Hosted(WinterParalympics, beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(beijing, x) & Consistently",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: (exists x. University(x) & LocatedIn(x, beijing) & NumberOfUniversities(91) & -NotAmongBest(x))\nTEXT: Beijing has hosted both the ",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: (exists x. University(x) & LocatedInBeijing(x) & NumberOfUniversities(91)) -> ConsistentlyRankedAmongBestInAsiaPacificAndWorld\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted2008SummerOlympics(beijing) & HostedWinterO",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: (exists x. (UniversityInBeijing(x) & NumberOfUniversity(x) = 91)) -> (exists x. (University(x) & ConsistentlyRankAmongBest(x) & LocatedIn"
   ]
  ]
 },
 {
  "index": 20,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankAmongBest(beijing, 91)\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympicsAndParalympicsGames(beijing, 2008)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerAndWinterOlympicsAndParalympicsGames(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankAmongBestUniversities(beijing, 91)\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyUniversitiesOfBeijingConsistentlyRankAmongTheBest()\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyUniversitiesOfBeijingConsistentlyRankAmongTheBestInTheAsiaPacificAndTheWorld\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerAndWinterOlympics(beijing) & HostedSummerAndWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: -University(beijing) \nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankAmongBestUniversities(beijing, 91)\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympics2008(beijing) & HostedSummerParalympics2008(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) & (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(x) & RankedAmongBest(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALU",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) & (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: (exists x. University(x) & LocatedInBeijing(x) & RankedAmongBest(x)) & Number_of_universities_beijing = 91\nTEXT: Beijing is located in southern China.\nF",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) & (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: many x. (University(x) & LocatedInBeijing(x) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyUniversitiesRankAmongBestInAsiaPacificAndWorld(beijing)\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympics(beijing) & HostedSummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(x) & RankedAmongBest(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympicsAndParalympics(beijing, 2008)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyUniversitiesRankAmongBest(beijing, 91)\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) & (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(beijing) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthern",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: Capital(people'sRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympics2008(beijing) & HostedSummerParalympics2008(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankAmongBest(91, beijing)\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: -University(beijing) | (University(beijing) & ConsistentlyRankAmongBest(beijing))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympics(beijing) & HostedBothSummerAndWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyUniversitiesOfBeijingConsistentlyRankAmongTheBest\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyUniversitiesOf(beijing, 91) & ConsistentlyRankAmongBestInAsiaPacificAndWorld(beijing)\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthern",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerAndWinterOlympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) & LocatedInBeijing(x) -> RankedAmongBest(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) & (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(beijing) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedIn",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyUniversitiesOfBeijingConsistentlyRankAmongBestInAsiaPacificAndWorld\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) & LocatedInBeijing(x) -> RankedAmongBest(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) & (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(x) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: -LocatedInSouthernChina(beijing)\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerAndWinterOlympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: (exists x. University(x) & LocatedInBeijing(x)) -> BestUniversityInAsiaPacific(x)\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankAmongTheBestInAsiaPacificAndTheWorld(universityOfBeijing)\nTEXT: Beijing is located in southern China.\nFOL: LocatedInSouthernChina(beijing)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 21,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyUniversitiesOfBeijingConsistentlyRankAmongTheBestInTheAsiaPacificAndTheWorld\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankAmongBestUniversities(beijing)\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) & (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyOfBeijingsUniversitiesAreAmongTheBestInTheAsiaPacificAndTheWorld\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCity",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: -exists x. (NationalCapital(x) & MorePopulous(x, beijing))\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted(beijing, 2008SummerOlympics) & Hosted(beijing, 2008SummerParalympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (Hosted(beijing, SummerOlympics) & Hosted(beijing, WinterOlympics)) & (Hosted(beijing, SummerParalympics) & Hosted(beijing, WinterParalympics))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(x, beijing) & -exists y.",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(China, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedOlympics(beijing, Summer, 2008) & HostedParalympics(beijing, Summer, 2008)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedOlympics(beijing, Summer, 2008) & HostedOlympics(beijing, Winter, 2008)) & (HostedParalympics(beijing, Summer, 2008) & HostedParalympics(beijing, Winter, 2008))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(x, beijing)"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankAmongBestUniversitiesInAsiaPacificAndWorld(beijing)\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(northernChina, beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerAndWinterOlympics(beijing) & HostedSummerAndWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: many x. (University(x) & LocatedIn(beijing, x) & 91 = NumberOfUniversitiesInBeijing) -> BestInAsiaPacificAndWorld(x)\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargest",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: many x. (UniversityInBeijing(x) & RankedAmongBest(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrban",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(northernChina, beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) & (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(beijing, x) & RankedAmongBest(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\n",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(northernChina, beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted(2008SummerOlympics, beijing) & Hosted(2008SummerParalympics, beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Hosted(BothSummerAndWinterOlympics, beijing) & Hosted(BothSummerAndWinterParalympics, beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyUniversities(91, beijing) & ConsistentlyRankAmongBest(asiaPacific, world, beijing)\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondL"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympics2008(beijing) & HostedSummerParalympics2008(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerAndWinterOlympics(beijing) & HostedSummerAndWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(x, beijing) & NumberOfUniversities(91) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrban",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: Capital(China, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted(beijing, SummerOlympics, 2008) & Hosted(beijing, SummerParalympics, 2008)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Hosted(beijing, SummerOlympics) & Hosted(beijing, WinterOlympics) & Hosted(beijing, SummerParalympics) & Hosted(beijing, WinterParalympics)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(x, beijing) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing is the second largest Chinese",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympics2008(beijing) & HostedSummerParalympics2008(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) & (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankedAmongBest(beijing, 91)\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(be",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing)) & (HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedIn(x, beijing) & NumberOfUniversities(91) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing is",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: many x. (University(x) & LocatedIn(beijing, x) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(people'sRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(northernChina, beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted(2008SummerOlympics, beijing) & Hosted(2008SummerParalympics, beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: (Hosted(SummerOlympics, beijing) & Hosted(WinterOlympics, beijing)) & (Hosted(SummerParalympics, beijing) & Hosted(WinterParalympics, beijing))\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & InBeijing(x) & BestRanking(x))\nTEXT: Beijing is",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (UniversityInBeijing(x) & -BadRank(x) & NumberOfUniversitiesInBeijing = 91)\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: Capital(China, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankAmongBestInAsiaPacificAndWorld(university, beijing)\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankedAmongBestUniversities(beijing)\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOf(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerAndWinterOlympics(beijing) & HostedSummerAndWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankedAmongBest(beijing, 91, asiaPacific, world)\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: -MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympics(beijing) & HostedBothSummerAndWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(beijing) & BestUniversityInAsiaPacificAndWorld(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: -MostPopulousNationalCapitalCity(beijing)  // This sentence is false, as Beijing is indeed the world's most populous national capital city.\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyUniversitiesOfBeijingConsistentlyRankAmongTheBestInTheAsiaPacificAndTheWorld\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfPeopleRepublicOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: -MostPopulousNationalCapitalCity(beijing)  // This statement is incorrect, as the conclusion is that Beijing is the second largest Chinese city by urban population, not the most populous.\nFOL: MostPopulousNationalCapitalCity(beijing) -> SecondLargestChineseCityByUrbanPopulation(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) & LocatedInBeijing(x) -> BestUniversityInAsiaPacific",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & LocatedInBeijing(beijing) & ConsistentlyRankAmongBest(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL:",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Capital(peopleRepublicOfChina, beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedIn(beijing, northernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerAndWinterOlympics(beijing) & HostedSummerAndWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: many x. (University(x) & LocatedIn(beijing, x) & -WorstRanking(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 22,
  "responses": [
   [
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) | -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</CONCLUSION>",
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) | -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they",
    "<EVALUATE>\nTEXT: All aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\nTEXT: Marvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</EVALUATE>",
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Alien(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 23,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djok",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djok",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djok",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djok"
   ],
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic)",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHavens(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives"
   ],
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(person) & -OscarNominatedActor(person)) | (-GrandSlamChampion(person) & OscarNominatedActor(person))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(person) | OscarNominatedActor(person))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djok",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(d",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djok",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(d"
   ],
   [
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHavens(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(person) | OscarNominatedActor(person))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(d",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHavens(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(dj",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(person) | OscarNominatedActor(person))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic)"
   ],
   [
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHavens(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djok",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djok",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djok",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in"
   ]
  ]
 },
 {
  "index": 24,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djok",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djok",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nAll people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nAll Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nAll professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nIf a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nIf a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nAll well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(person) & -OscarNominatedActor(person)) | (-GrandSlamChampion(person) & OscarNominatedActor(person))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid"
   ],
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(person) & -OscarNominatedActor(person)) | (-GrandSlamChampion(person) & OscarNominatedActor(person))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(someone) | OscarNominatedActor(someone))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(d",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djok"
   ],
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(someone) | OscarNominatedActor(someone))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Ath",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic"
   ],
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(someone) & -OscarNominatedActor(someone)) | (-GrandSlamChampion(someone) & OscarNominatedActor(someone))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nAll people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nAll Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nAll professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nIf a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nIf a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nAll well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(dj",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic)",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(d"
   ],
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nAll people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nAll Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nAll professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nIf a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nIf a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nAll well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) &",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(someone) | OscarNominatedActor(someone))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Ath"
   ]
  ]
 },
 {
  "index": 25,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(d",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(person) & -OscarNominatedActor(person)) | (-GrandSlamChampion(person) & OscarNominatedActor(person)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic)",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(d",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(d"
   ],
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(person) & -OscarNominatedActor(person)) | (-GrandSlamChampion(person) & OscarNominatedActor(person))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic)",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in"
   ],
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(djokovic)",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djok"
   ],
   [
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nAll people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nAll Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nAll professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nIf a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nIf a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nAll well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(dj",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(x) & -OscarNominatedActor(x)) | (-GrandSlamChampion(x) & OscarNominatedActor(x)))\nAll people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nAll Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nAll professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nIf a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nIf a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nAll well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nIf Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: Famous(djokovic) & Athlete(dj"
   ],
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(person) | OscarNominatedActor(person))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(d",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(person) & -OscarNominatedActor(person)) | (-GrandSlamChampion(person) & OscarNominatedActor(person))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: ((GrandSlamChampion(person) & -OscarNominatedActor(person)) | (-GrandSlamChampion(person) & OscarNominatedActor(person)))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(person) | OscarNominatedActor(person))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(d"
   ]
  ]
 },
 {
  "index": 26,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(x, roderickStrong) & ProfessionalWrestlingStable(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(roderickStrong, x) & ProfessionalWrestlingStable(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Lead(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Include(diamondMine, creedBrothers) & Include(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Lead(x, roderickStrong) & ProfessionalWrestlingStable(x)\n</EVALUATE>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: Leads(RoderickStrong, ProfessionalWrestlingStable(x)) & ProfessionalWrestlingStable(x)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: Leads(x, roderickStrong) & ProfessionalWrestlingStable(x)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamond"
   ],
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(professionalWrestlingStable, roderickStrong)\n</EVALUATE>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nImperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: Leads(diamondMine, roderickStrong) & ProfessionalWrestlingStable(diamondMine)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nImperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: Leads(diamondMine, roderickStrong)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Lead(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Lead(_, roderickStrong) & ProfessionalWrestlingStable(_)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: (Includes(creedBrothers, diamondMine) & Includes(ivyNile, diamondMine))\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(roderickStrong, x) & ProfessionalWrestlingStable(x)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(x, roderickStrong) & ProfessionalWrestlingStable(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(RoderickStrong, x) & ProfessionalWrestlingStable(x)\n</EVALUATE>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nImperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: Leads(roderickStrong, x) & ProfessionalWrestlingStable(x)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Lead(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Include(diamondMine, creedBrothers) & Include(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Lead(x, roderickStrong) & ProfessionalWrestlingStable(x)\n</EVALUATE>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nImperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: Leads(x, roderickStrong) & ProfessionalWrestlingStable(x)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(d"
   ],
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Lead(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Lead(x, roderickStrong) & ProfessionalWrestlingStable(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Lead(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: (CreedBrothers & IvyNile) IncludedIn(diamondMine)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Lead(x, roderickStrong) & ProfessionalWrestlingStable(x)\n</EVALUATE>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: Leads(roderickStrong, x) & ProfessionalWrestlingStable(x)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine,",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(x, roderickStrong) & ProfessionalWrestlingStable(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(x, roderickStrong) & ProfessionalWrestlingStable(x)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(roderickStrong,?x) & ProfessionalWrestlingStable(?x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leads(x, roderickStrong) & ProfessionalWrestlingStable(x)\n</EVALUATE>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nImperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: Leads(a, roderickStrong) & ProfessionalWrestlingStable(a)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(d",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Lead(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Lead(x, roderickStrong) & ProfessionalWrestlingStable(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Lead(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Include(diamondMine, creedBrothers) & Include(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Lead(x, roderickStrong) & ProfessionalWrestlingStable(x)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 27,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(creedBrothers, roderickStrong)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(roderickStrong, creedBrothers)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Lead(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Include(diamondMine, creedBrothers) & Include(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Lead(creedBrothers, roderickStrong)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(roderickStrong, creedBrothers)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(roderickStrong, creedBrothers)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Lead(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Lead(creedBrothers, roderickStrong)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(roderickStrong, creedBrothers)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(roderickStrong, creedBrothers)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Lead(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Lead(creedBrothers, roderickStrong)\n</EVALUATE>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nImperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Leads(creedBrothers, roderickStrong)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyN"
   ],
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(creedBrothers, roderickStrong)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Lead(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Include(diamondMine, creedBrothers) & Include(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Lead(creedBrothers, roderickStrong)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(CreedBrothers, DiamondMine) & Includes(IvyNile, DiamondMine)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(RoderickStrong, CreedBrothers)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(creedBrothers, roderickStrong)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(creedBrothers, roderickStrong)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(roderickStrong, creedBrothers)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Lead(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Lead(creedBrothers, roderickStrong)\n</EVALUATE>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Leads(creedBrothers, roderickStrong)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Lead(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: (Include(diamondMine, creedBrothers) & Include(diamondMine, ivyNile))\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Lead(creedBrothers, roderickStrong)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(RoderickStrong, CreedBrothers)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(RoderickStrong, CreedBrothers)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(creedBrothers, roderickStrong)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Lead(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Include(diamondMine, creedBrothers) & Include(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Lead(creedBrothers, roderickStrong)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Lead(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Include(diamondMine, creedBrothers) & Include(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Lead(creedBrothers, roderickStrong)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(RoderickStrong, DiamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(RoderickStrong, CreedBrothers)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 28,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, x) & ProfessionalWrestlingStable(x) & Includes(x, ivyNile)\n</EVALUATE>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nImperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\n</PREMISES>\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, x) & ProfessionalWrestlingStable(x) & Includes(x, ivyNile)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers,",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -Feud(imperium, x) & ProfessionalWrestlingStable(x) & Includes(x, ivyNile)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, Stable(ivyNile))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Lead(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Include(diamondMine, creedBrothers) & Include(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -Feud(imperium, x) & ProfessionalWrestlingStable(x) & Include(x, ivyNile)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\n</PREMISES>\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -Feud(imperium, x) | -Includes(x, ivyNile)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine,",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(DiamondMine) & FormedInWWE(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Leads(RoderickStrong, DiamondMine)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers) & Includes(DiamondMine, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, x) & ProfessionalWrestlingStable(x) & Includes(x, IvyNile)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -Feud(imperium, x) & ProfessionalWrestlingStable(x) & Includes(x, ivyNile)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, x) & Includes(x, ivyNile) | x!= diamondMine\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, x) & ProfessionalWrestlingStable(x) & Includes(x, ivyNile)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, x) & ProfessionalWrestlingStable(x) & Includes(x, ivyNile)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, Stable(ivyNile))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, {x | ProfessionalWrestlingStable(x) & Includes(x, ivyNile)})\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -Feud(imperium, x) & ProfessionalWrestlingStable(x) & Includes(x, ivyNile)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Lead(diamondMine, roderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, {x | ProfessionalWrestlingStable(x) & Includes(x, ivyNile)})\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, x) & ProfessionalWrestlingStable(x) & Includes(x, ivyNile)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, ProfessionalWrestlingStable(x)) | -Includes(x, ivyNile)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, x) & ProfessionalWrestlingStable(x) & Includes(x, ivyNile)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, x) & ProfessionalWrestlingStable(x) & Includes(x, ivyNile)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, {x | ProfessionalWrestlingStable(x) & Includes(x, ivyNile)})\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, x) & ProfessionalWrestlingStable(x) & Includes(x, ivyNile)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, {x | ProfessionalWrestlingStable(x) & Includes(x, ivyNile)})\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, x) & ProfessionalWrestlingStable(x) & Includes(x, ivyNile)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine) & FormedInWWE(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, x) & ProfessionalWrestlingStable(x) & Includes(x, ivyNile)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: ProfessionalWrestlingStable(diamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(roderickStrong, diamondMine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(diamondMine, creedBrothers) & Includes(diamondMine, ivyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(imperium, diamondMine)\nTEXT: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(imperium, x) & Includes(x, ivyNile) | x!= diamondMine\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 29,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & -MusicPiece(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & -MusicPiece(viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Orchestra(viennaMusicSociety) & -Orchestra(beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & -MusicPiece(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & -MusicPiece(viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Orchestra(viennaMusicSociety) & -Orchestra(beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: -MusicPiece(symphonyNo9) | Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: -Premiered(symphonyNo9) | Orchestra(viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x, Conductor(x)))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: -MusicPiece(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: -MusicPiece(viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Lead(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & -MusicPiece(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & -MusicPiece(viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Orchestra(viennaMusicSociety) & -Orchestra(beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> Write(x, MusicPiece))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Write(beethoven, MusicPiece(symphonyNo9))\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, MusicPiece(symphonyNo9))\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Lead(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedBy(x, Conductor))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Orchestra(viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Orchestra(viennaMusicSociety) & Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x, Conductor(x)))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: WriteMusicPiece(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiere(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Lead(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & -MusicPiece(beethoven) & Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & -MusicPiece(viennaMusicSociety) & Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Orchestra(viennaMusicSociety) & -Orchestra(beethoven) & Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Orchestra(viennaMusicSociety) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x, Conductor(x)))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & -MusicPiece(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & -MusicPiece(viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Orchestra(viennaMusicSociety) & -Orchestra(beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> Write(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Write(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiere(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Lead(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: WriteMusicPiece(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiere(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Lead(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: -MusicPiece(symphonyNo9) | Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: -Premiered(symphonyNo9) | Orchestra(viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: -Leads(viennaMusicSociety) | Conductor(beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: WriteMusicPiece(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiere(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Lead(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: WriteMusicPiece(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiere(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Lead(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Orchestra(viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Orchestra(viennaMusicSociety) & Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x, Conductor(x)))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 30,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Premiered(society, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(society)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, society)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, _))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Premiered(societyOfMusicOfVienna, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(societyOfMusicOfVienna)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Orchestra(societyOfMusicOfVienna) & Leader(beethoven, societyOfMusicOfVienna)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x, Conductor(x)))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, _))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, _))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, _))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & PremieredBy(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedBy(x, Conductor(x)))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & PremieredBy(x, MusicPiece(x)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, _))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(MusicPiece(x), x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedBy(x, Conductor(x)))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, _))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Lead(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, _))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(MusicPiece(x), x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, y))  # Note: 'y' should be replaced with a variable representing a music piece, but since 'y' is not specified in the premises, it cannot be replaced.\nHowever, we can express the conclusion as: exists x. (Orchestra(x",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & PremieredBy(viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Orchestra(viennaMusicSociety) & Leader(beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x) = Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & PremieredBy(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, _))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: -MusicPiece(beethoven) & -PremieredBy(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: PremieredBy(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & PremieredBy(x,?y))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & PremieredBy(viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Orchestra(viennaMusicSociety) & Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & PremieredBy(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Orchestra(viennaMusicSociety) & Conductor(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(y, x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, y))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Lead(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, y))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Orchestra(viennaMusicSociety) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Lead(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Orchestra(viennaMusicSociety) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Orchestra(viennaMusicSociety) & Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x, Conductor(x)))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(someMusicPiece, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & PremieredBy(viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Orchestra(viennaMusicSociety) & Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & PremieredBy(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Orchestra(viennaMusicSociety) & Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x, Conductor(x)))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(MusicPiece(x), x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & PremieredBy(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x, Conductor(x)))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & PremieredBy(x, MusicPiece(y)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 31,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(symphonyNo9, viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & PremieredBy(viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & PremieredBy(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedBy(x, Conductor(x)))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Orchestra(viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Orchestra(viennaMusicSociety) & Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x, Conductor(x)))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & PremieredBy(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x, Conductor(x)))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & -MusicPiece(viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Orchestra(viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(leader(x)))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: -MusicPiece(symphonyNo9) | Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: -Premiered(symphonyNo9) | Premiered(symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: -Leads(viennaMusicSociety) | Leads(viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & -MusicPiece(viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x, Conductor(x)))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: PremieredBy(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: -MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: -MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & PremieredBy(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x, Conductor(x)))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: -PremieredBy(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, conductor))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Orchestra(viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Orchestra(viennaMusicSociety) & Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x, Conductor(x)))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & -MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & PremieredBy(viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & PremieredBy(viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & Composer(beethoven)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(symphonyNo9) & PremieredBy(viennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Orchestra(viennaMusicSociety) & Leader(beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Wrote(beethoven, symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: PremieredBy(viennaMusicSociety, symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(beethoven, viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedBy(x, Conductor(x)))\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 32,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProduct(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesignStyle(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadidDesignStyle(x) & -KellyWearstlerDesignStyle(x)) | (-ZahaHadidDesignStyle(x) & KellyWearstlerDesignStyle(x))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesignStyle(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesignStyle(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(MaxDesign) -> (MassProductDesign(MaxDesign) & Evocative(MaxDesign))\nTEXT: A design by Max",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProduct(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProductDesign(max) & Evocative(max))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesignStyle(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadidDesignStyle(kellyWearstler) | KellyWearstlerDesignStyle(kellyWearstler)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesignStyle(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesignStyle(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProductDesign(max) & Evocative(max))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProduct(max) & Evocative(max))\nTEXT: A design by Max is a mass product design.\nFOL: MassProduct(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProduct(max) & Evocative(max))\nTEXT: A design by Max is a mass product design.\nFOL: MassProduct(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProduct(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesignStyle(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadidDesignStyle(kellyWearstler) | KellyWearstlerDesignStyle(kellyWearstler))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesignStyle(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesignStyle(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(MaxDesign) -> (MassProductDesign(MaxDesign) & Evocative(MaxDesign))\nTEXT: A design by Max is a mass product design.\nFOL: MassProduct",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProductDesign(max) & Evocative(max))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadidDesign(max) | KellyWearstlerDesign(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProductDesign(max) & Evocative(max))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadidDesign(kellyWearstler) | KellyWearstlerDesign(kellyWearstler))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n</EVALU",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(kellyWearstler) | KellyWearstler(kellyWearstler))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(Max) -> (MassProductDesign(Max) & Evocative(Max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(Max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProduct(max) & Evocative(max))\nTEXT: A design by Max is a mass product design.\nFOL: MassProduct(max)\n</EVALUATE>",
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: (ZahaHadid(kellyWearstler) & -ZahaHadid(kellyWearstler)) | (-ZahaHadid(kellyWearstler) & ZahaHadid(kellyWearstler))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\n</PREMISES>\n",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(Max) | KellyWearstler(Max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(Max) -> (MassProductDesign(Max) & Evocative(Max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(Max)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(kellyWearstler) & -KellyWearstler(kellyWearstler)) | (-ZahaHadid(kellyWearstler) & KellyWearstler(kellyWearstler))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\n</PREM",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadidDesign(max) | KellyWearstlerDesign(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProductDesign(max) & Evocative(max))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is a mass product design.\nFOL: MassProductDesign(max)\n</EVALUATE>",
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadidDesign(kellyWearstler) | KellyWearstlerDesign(kellyWearstler)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(maxDesign) -> (MassProductDesign(maxDesign) & Evocative(maxDesign)))\n</PREMISES>\n<CONCLUSION>\nA design by Max is a mass product design.\nFOL:",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProduct(max) & Evocative(max))\nTEXT: A design by Max is a mass product design.\nFOL: MassProduct(max)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 33,
  "responses": [
   [
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProduct(max) & Evocative(max))\n</PREMISES>\n<CONCLUSION>\nA design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</CONCLUSION>\n\n<EVALUATE",
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProduct(max) & Evocative(max))\n</PREMISES>\n<CONCLUSION>\nA design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</CONCLUSION>\n\n<EVALUATE",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProduct(max) & Evocative(max))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\n</PREMISES>\n<CONCLUSION>\nA design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</CONCLUSION>\n\n<E"
   ],
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProductDesign(max) & Evocative(max))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(Max) & -KellyWearstler(Max)) | (-ZahaHadid(Max) & KellyWearstler(Max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(Max) -> (MassProduct(Max) & Evocative(Max))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(Max) & Dreamy",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(max) & -KellyWearstler(max)) | (-ZahaHadid(max) & KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProductDesign(max) & Evocative(max))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) &",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProduct(max) & Evocative(max))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(max) & -KellyWearstler(max)) | (-ZahaHadid(max) & KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProductDesign(max) & Evocative(max))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) &",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProduct(max) & Evocative(max))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProduct(max) & Evocative(max))\n</PREMISES>\n<CONCLUSION>\nA design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadidDesign(max) | KellyWearstlerDesign(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProduct(max) & Evocative(max))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadidDesign(max) | KellyWearstlerDesign(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProductDesign(max) & Evocative(max))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesignStyle(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadidDesignStyle(max) | KellyWearstlerDesignStyle(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesignStyle(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesignStyle(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVAL",
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadidDesign(max) | KellyWearstlerDesign(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProductDesign(max) & Evocative(max))\n</PREMISES>\n<CONCLUSION>\nA design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProduct(max) & Evocative(max))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(kellyWearstler) & -KellyWearstler(kellyWearstler)) | (-ZahaHadid(kellyWearstler) & KellyWearstler(kellyWearstler))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(Max) -> (MassProductDesign(Max) & Evocative(Max)))\n</PREM",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProduct(max) & Evocative(max))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (DesignStyleByZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (DesignStyleByZahaHadid(max) & -DesignStyleByKellyWearstler(max)) | (-DesignStyleByZahaHadid(max) & DesignStyleByKellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (DesignStyleByKellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (DesignStyleByKellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProductDesign(max) & Evocative(max))\nTEXT:",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is evocative and dreamy.\nFOL: Evocative(max) & Dreamy(max)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 34,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) | Dreamy(max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProduct(max) & Evocative(max))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy(max))\n</",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProduct(max) & Evocative(max))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy(max))\n",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(max) | KellyWearstler(max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) | Dreamy(max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) | Dreamy(max))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadidDesign(max) | KellyWearstlerDesign(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) | Dreamy(max))\n</EVALUATE>",
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(kellyWearstler) | KellyWearstler(kellyWearstler))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\n</PREMISES>\n<CONCLUSION>\nA design by Max is either evocative or dreamy.\nFOL: (Evocative",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadidDesign(max) | KellyWearstlerDesign(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProductDesign(max) & Evocative(max))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy(max",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(kellyWearstler) | KellyWearstler(kellyWearstler))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(Max) -> (MassProduct(Max) & Evocative(Max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(Max) | Dreamy(Max))\n</E"
   ],
   [
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(kellyWearstler) | KellyWearstler(kellyWearstler)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\n</PREMISES>\n<CONCLUSION>\nA design by Max is either evocative or dreamy.\nFOL: (Evocative(max) |",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadidDesign(max) | KellyWearstlerDesign(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) | Dreamy(max))\n</EVALUATE",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(Max) & -KellyWearstler(Max)) | (-ZahaHadid(Max) & KellyWearstler(Max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(Max) -> (MassProductDesign(Max) & Evocative(Max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative",
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProductDesign(max) & Evocative(max))\n</PREMISES>\n<CONCLUSION>\nA design by Max is either evocative or dreamy.\nFOL: Evocative(max) | Dreamy(max)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProduct(max) & Evocative(max))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy(max))\n</"
   ],
   [
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProduct(max) & Evocative(max))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy(max))\n</",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) | Dreamy(max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) | Dreamy(max))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(Max) & -KellyWearstler(Max)) | (-ZahaHadid(Max) & KellyWearstler(Max))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(Max) -> (MassProduct(Max) & Evocative(Max))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(Max) &",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) | Dreamy(max))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\n</PREMISES>\n<CONCLUSION>\nA design by Max is either evocative or dreamy.\nFOL: (Evocative(max) | Dreamy(max))\n</CONCLUSION",
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(kellyWearstler) | KellyWearstler(zahaHadid)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProductDesign(max) & Evocative(max)))\n</PREMISES>\n<CONCLUSION>\nA design by Max is either evocative or dreamy.\nFOL: (Evocative(max)",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProductDesign(max) & Evocative(max))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Timeless(max) -> (MassProduct(max) & Evocative(max)))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy(max",
    "<EVALUATE>\nTEXT: All of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: ZahaHadid(max) | KellyWearstler(max)\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Timeless(max) -> (MassProductDesign(max) & Evocative(max))\nTEXT: A design by Max is either evocative or dreamy.\nFOL: (Evocative(max) & -Dreamy(max)) | (-Evocative(max) & Dreamy"
   ]
  ]
 },
 {
  "index": 35,
  "responses": [
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaHighRank(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaHighRank(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT:",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaHighlyRanked(x) -> MostActiveInMajorTennis(x))\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaHighlyRanked(x))\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nIf Coco Gauff",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActiveInMajorTennis(x))\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nIf Coco Gauff",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaHighlyRanked(x) -> MostActiveMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafael",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaRankedHighly(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaRankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafael"
   ],
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToR",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaHighlyRanked(x) -> MostActiveInMajorTennis(x))\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaHighlyRanked(x))\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (exists x. FemaleTennisPlayerAtRolandGarros2022(x)) | exists x. MaleTennisPlayerAtRolandGarros2022(x)\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nIf Coco Ga",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaRankHigh(x) -> MostActiveMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaRankHigh(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerRolandGarros2022(cocoGauff) | MaleTennisPlayerRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT:",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MajorTennisActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: exists x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT"
   ],
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaHighlyRanked(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: FemalePlayerAtRolandGarros2022(cocoGauff) | MalePlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostTo",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: FemalePlayerAtRolandGarros2022(cocoGauff) | MalePlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighRank(x) -> MostActiveMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighRank(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayerRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: FemalePlayerRolandGarros2022(someone) | MalePlayerRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayerRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaRankHigh(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaRankHigh(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemalePlayerAtRolandGarros2022(cocoGauff) | MalePlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff"
   ],
   [
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemalePlayerAtRolandGarros2022(cocoGauff) | MalePlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayer(rolandGarros2022) | MaleTennisPlayer(rolandGarros2022)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> ActiveMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActivePlayerInMajorTennis(x))\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: exists x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nIf Coco Ga",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x"
   ],
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWta(x) -> MostActivePlayer(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWta(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaHighRank(x) -> MostActivePlayer(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaHighRank(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayer(x) & RolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (exists x. (FemalePlayer(x) & RolandGarros2022(x))) | (exists x. (MalePlayer(x) & RolandGarros2022(x)))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\n",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nIf Coco",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayer(x) & RolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: exists x. (FemalePlayer(x) & RolandGarros2022(x)) | exists x. (MalePlayer(x) & RolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is"
   ]
  ]
 },
 {
  "index": 36,
  "responses": [
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaHighlyRanked(x) -> MostActiveMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelN",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (Wta(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> Wta(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (exists x. (FemaleTennisPlayer(x) & RolandGarros2022(x))) | (exists x. (MaleTennisPlayer(x) & RolandGarros2022(x)))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostTo",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaRankHigh(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaRankHigh(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT:",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (WTA(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayer(x) & RolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: FemalePlayer(rolandGarros2022) | MalePlayer(rolandGarros2022)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHighly(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal"
   ],
   [
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (Wta(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> Wta(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Ga",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (WTA(x) -> MajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (WTAHighRank(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighRank(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRaf",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActiveMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafael"
   ],
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaHighlyRanked(x) -> MostActiveMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelN",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MajorTennisActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: exists x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostTo",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (WtaRankHigh(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaRankHigh(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: exists x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToR"
   ],
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (WTA(x) -> ActiveMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT:",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: FemaleTennisPlayer(rolandGarros2022) | MaleTennisPlayer(rolandGarros2022)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaHighlyRanked(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (exists x. (FemaleTennisPlayer(x) & RolandGarros2022(x)) & -exists x. (MaleTennisPlayer(x) & RolandGarros2022(x))) | (exists x. (MaleTennisPlayer(x) & RolandGarros2022(x)) & -exists x. (FemaleTennisPlayer(x) & RolandGarros2022(x)))\nTEXT",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaRankHigh(x) -> MajorTennisActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaRankHigh(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (exists x. (FemaleTennisPlayer(x) & RolandGarros2022(x))) | (exists x. (MaleTennisPlayer(x) & RolandGarros2022(x)))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> Lost",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (WtaHighRank(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women'S Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaHighRank(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x"
   ],
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (WtaRanked(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (WTAHighRank(x) -> MajorTennisActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighRank(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: FemalePlayerAtRolandGarros2022(cocoGauff) | MalePlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Ga",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaRanked(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemalePlayerAtRolandGarros2022(cocoGauff) | MalePlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaRankedHigh(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaRankedHigh(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT:",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafael"
   ]
  ]
 },
 {
  "index": 37,
  "responses": [
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(someone) | MaleTennisPlayerAtRolandGarros2022(someone)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaRankedHighly(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaRankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRaf",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaRankedHighly(x) -> MostActiveMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaRankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: exists x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayer(x) & RolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemalePlayer(rolandGarros2022) | MalePlayer(rolandGarros2022)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayer(x) & RolandGarros2022(x) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemalePlayer(rolandGarros2022) | MalePlayer(rolandGarros2022)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayer(x) & RolandGarros2022(x) -> LostToRafael(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal"
   ],
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayer(x) & RolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (exists x. (FemalePlayer(x) & RolandGarros2022(x))) | (exists x. (MalePlayer(x) & RolandGarros2022(x)))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActiveMajorTennis(x))\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayerRolandGarros2022(x) -> LostToIgaSwiatek(x))\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemalePlayerRolandGarros2022(cocoGauff) | MalePlayerRolandGarros2022(cocoGauff)\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayerRolandGarros2022(x) -> LostToRafaelNadal(x))\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActiveInMajorTennis(x))\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nIf Coco Gauff",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaRanked(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayer(rolandGarros2022) | MaleTennisPlayer(rolandGarros2022)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n"
   ],
   [
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRaf",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: exists x. (FemaleTennisPlayer(x) & RolandGarros2022(x)) | exists x. (MaleTennisPlayer(x) & RolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\n",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActiveMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelN",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTA(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayer(x) & RolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: exists x. (FemalePlayer(x) & RolandGarros2022(x)) | exists x. (MalePlayer(x) & RolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighlyRanked(x) -> MostActiveInMajorTennis(x))\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighlyRanked(x))\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemalePlayerAtRolandGarros2022(someone) | MalePlayerAtRolandGarros2022(someone)\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nIf Coco Gauff is a player who is ranked highly by the Women"
   ],
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRG2022(x) -> LostToIgaSwiatek(x))\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: exists x. (FemaleTennisPlayerAtRG2022(x) | MaleTennisPlayerAtRG2022(x))\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRG2022(x) -> LostToRafaelNadal(x))\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaRankHigh(x) -> MostActiveInMajorTennis(x))\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaRankHigh(x))\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: exists x. (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nIf Coco Gauff is a player who",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaRankHigh(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaRankHigh(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayer(x) & RolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: exists x. (FemalePlayer(x) & RolandGarros2022(x)) | exists x. (MalePlayer(x) & RolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (WtaRankedHighly(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaRankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostTo",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaRanked(x) -> MostActiveInMajorTennis(x))\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaRanked(x))\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemalePlayerAtRolandGarros2022(cocoGauff) | MalePlayerAtRolandGarros2022(cocoGauff)\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis"
   ],
   [
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActivePlayerInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> Lost",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaRankedHigh(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaRankedHigh(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelN",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WtaRankHigh(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WtaRankHigh(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemaleTennisPlayerAtRolandGarros2022(cocoGauff) | MaleTennisPlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT:",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (WTAHighRank(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> WTAHighRank(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayer(x) & RolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: exists x. (FemalePlayer(x) & RolandGarros2022(x)) | exists x. (MalePlayer(x) & RolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighlyByWTA(x) -> MostActiveInMajorTennis(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIgaSwiatek(x) -> RankedHighlyByWTA(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemalePlayerAtRolandGarros2022(x) -> LostToIgaSwiatek(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: FemalePlayerAtRolandGarros2022(cocoGauff) | MalePlayerAtRolandGarros2022(cocoGauff)\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MalePlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT:"
   ]
  ]
 },
 {
  "index": 38,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: all x. (Pet(x) -> -Cat(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 39,
  "responses": [
   [
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: FavoriteSeason(mia, Spring) | FavoriteSeason(mia, Fall) | FavoriteSeason(mia, Winter)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, Summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(spring) & Season(summer) & Season(fall) & Season(winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -FavoriteSeason(mia, summer) | -FavoriteSeason(emma, summer)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(emma, summer) | Season(emma, fall) | Season(emma, spring) | Season(emma, winter) | Season(mia, summer) | Season(mia, fall) | Season(mia, spring) | Season(mia, winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> FavoriteSeason(x, summer))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -FavoriteSeason(mia, summer) | -FavoriteSeason(mia, summer) & FavoriteSeason(mia, fall) | -FavoriteSeason(mia, summer) & FavoriteSeason(mia, spring) | -FavoriteSeason(mia, summer) & FavoriteSeason(mia, winter)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, summer)\n</EVALUATE",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) | x = Spring | x = Summer | x = Fall | x = Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LovesSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: LovesSummer(emma)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -Equals(Season(mia), Season(emma))\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: LovesSummer(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: LoveSummerMost(emma)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameFavoriteSeason(emma, mia)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: LoveSummerMost(james)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameSeason(Mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, Summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(emma) | Season(mia) | Season(james) | Season(james) | Season(james) | Season(james)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LovesSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: LovesSummer(emma)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameSeason(emma, mia)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: LovesSummer(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameFavoriteSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, Summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(emma, summer) | Season(emma, fall) | Season(emma, winter) | Season(emma, spring)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> FavoriteSeason(x, summer))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -FavoriteSeason(mia, summer)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(emma) | Season(mia) | Season(james) | Season(james) | Season(james) | Season(james) \n  (Note: This sentence can be rewritten as: Season(emma) | Season(mia) | Season(james) | Season(james) | Season(james) | Season(james) \n   is equivalent to: exists x. (Season(x) & x!= emma & x!= mia & x!= james) | exists x. (Season(x) & x!= emma & x!= mia & x!= james) | exists x. (Season(x) & x!= emma & x!= mia & x!= james))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: LoveSummer(emma)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameSeason(emma, mia)\nTEXT: James wants to have a long vacation.\nF"
   ],
   [
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(emma) | Season(mia) | Season(james) | Season(james2)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: LoveSummerMost(emma)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameSeason(emma, mia)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: LoveSummerMost(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameSeason(Mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, Summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> x = Spring | x = Summer | x = Fall | x = Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: LoveSummerMost(emma)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: - (FavoriteSeason(mia) = FavoriteSeason(emma))\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: LoveSummerMost(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LovesSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: LovesSummerMost(emma)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameFavoriteSeason(emma, mia)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: LovesSummerMost(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameFavoriteSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, Summer)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(emma) | Season(mia) | Season(james) | Season(bg)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: LoveSummerMost(emma)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameSeason(emma, mia)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: LoveSummerMost(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantsLongVacation(x) -> LovesSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: LovesSummerMost(emma)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantsLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: LovesSummerMost(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Summer) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia, -Summer) | FavoriteSeason(mia, -Emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, Summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(emma, spring) | Season(emma, summer) | Season(emma, fall) | Season(emma, winter) | Season(mia, spring) | Season(mia, summer) | Season(mia, fall) | Season(mia, winter) | Season(james, spring) | Season(james, summer) | Season(james, fall) | Season(james, winter)\n TEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> FavoriteSeason(x, summer))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -FavoriteSeason(mia, summer)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(spring) & Season(summer) & Season(fall) & Season(winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LovesSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: LovesSummerMost(emma)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: LovesSummerMost(james)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> (Spring(x) | Summer(x) | Fall(x) | Winter(x)))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameFavoriteSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(spring) & Season(summer) & Season(fall) & Season(winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: LoveSummerMost(emma)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: LoveSummerMost(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia, x) & -x = FavoriteSeason(emma, Summer)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, Summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> FavoriteSeason(x, Summer))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameSeason(Mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, Summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: LoveSummerMost(emma)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -LoveSummerMost(mia) | -LoveSummerMost(emma)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: LoveSummerMost(james)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 40,
  "responses": [
   [
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Summer) & Season(Spring) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantsLongVacation(x) -> LovesSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: LovesSummer(emma)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantsLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LovesSpring(mia)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: LoveSummerMost(emma)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LoveSummerMost(mia)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameSeason(Mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia, Spring)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameFavoriteSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia, Spring)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameSeason(Mia, Emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia, Spring)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(emma, spring) | Season(emma, summer) | Season(emma, fall) | Season(emma, winter) & Season(mia, spring) | Season(mia, summer) | Season(mia, fall) | Season(mia, winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: LoveSummerMost(emma)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameSeason(emma, mia)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LoveSummerMost(mia) -> Season(mia, spring) -> Season(mia, spring)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: LoveSummerMost(emma)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameFavoriteSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LoveSummerMost(mia)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantsLongVacation(x) -> LovesSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: LovesSummer(emma)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantsLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LovesSpring(mia)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: FavoriteSeason(mia, S) & - (S = Summer)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia, Spring)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Summer) & Season(Spring) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantsLongVacation(x) -> LovesSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: LovesSummerMost(emma)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameFavoriteSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantsLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LovesSummerMost(mia) | LovesSpringMost(mia) | LovesFallMost(mia) | LovesWinterMost(mia)\n   -> LovesSpringMost(mia)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: FavoriteSeason(mia, -FavoriteSeason(emma, _))\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia, Spring)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameSeason(Mia, Emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia, Spring)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -FavoriteSeason(mia, Summer)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia, Spring)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(emma, summer) | Season(emma, fall) | Season(emma, winter) | Season(emma, spring)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantsLongVacation(x) -> LovesSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: LovesSummerMost(emma)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -Equals(emma, mia)\nTEXT: James wants to have a long vacation.\nFOL: WantsLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LovesSummerMost(mia) | LovesSummerMost(fall) | LovesSummerMost(winter) | LovesSummerMost(spring)\n</EVALUATE>\n TEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantsLongVacation(x) -> LovesSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: LovesSummerMost(emma)\nTEXT: Mia's",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(spring) & Season(summer) & Season(fall) & Season(winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantsLongVacation(x) -> LovesSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: LovesSummer(emma)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantsLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LovesSpring(mia)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameFavoriteSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia, Spring)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(emma) | Season(mia) | Season(james) | Season(james2)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantsLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: LoveSummer(emma)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameSeason(emma, mia)\nTEXT: James wants to have a long vacation.\nFOL: WantsLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LoveSpring(mia)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(emma, summer) | Season(emma, spring) | Season(emma, fall) | Season(emma, winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: Season(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -Season(mia, summer) | -Season(mia, spring) | -Season(mia, fall) | -Season(mia, winter)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: Season(mia, spring)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(emma) | Season(mia) | Season(james) | Season(bob) \nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: LoveSummer(emma)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LoveSpring(mia)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(emma) | Season(mia) | Season(james) | Season(james)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: LoveSummer(emma)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameSeason(emma, mia)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LoveSpring(mia)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(emma, summer) | Season(emma, spring) | Season(emma, fall) | Season(emma, winter) | Season(mia, summer) | Season(mia, spring) | Season(mia, fall) | Season(mia, winter) | Season(james, summer) | Season(james, spring) | Season(james, fall) | Season(james, winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: LoveSummerMost(emma)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameSeason(emma, mia)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LoveSpringMost(mia)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(spring) & Season(summer) & Season(fall) & Season(winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantsLongVacation(x) -> LovesSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: LovesSummerMost(emma)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameFavoriteSeason(emma, mia)\nTEXT: James wants to have a long vacation.\nFOL: WantsLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LovesSummerMost(mia)\n</EVALUATE>\n\nHowever, we need to add a FOL expression for \"SameFavoriteSeason(x, y)\" which is equivalent to \"FavoriteSeason(x) = FavoriteSeason(y)\".\nLet's assume FavoriteSeason(x) is represented by F(x). Then, \"SameFavoriteSeason(x, y)\" can be represented as F(x) = F(y).\n\nNow, the updated FOL expressions are:\n\n<EVALUATE>\nTEXT: There",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameSeason(FavoriteSeason(mia), FavoriteSeason(emma))\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia, Spring)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Spring) & Season(Summer) & Season(Fall) & Season(Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummerMost(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: FavoriteSeason(mia, S) -> S!= Summer\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia, Spring)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Season(Emma) | Season(Mia) | Season(James) | Season(BG)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: LoveSummer(emma)\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: -SameSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: LoveSpring(mia)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 41,
  "responses": [
   [
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT:",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: DigitalMedia(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT:",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT:",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: DigitalMedia(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT:",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT:",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\nTEXT: 1984 is a hardcover book.\nFOL: HardcoverBook(1984)\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 42,
  "responses": [
   [
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT"
   ],
   [
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</EVALUATE>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover"
   ]
  ]
 },
 {
  "index": 43,
  "responses": [
   [
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x"
   ],
   [
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a"
   ],
   [
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 44,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Basque(x) & Related(basque, x))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & LanguageMember(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists y. (Language(y) & Related(basque, y))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> Related(x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Related(basque, x) & x!= basque)\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists y. (Basque(y) & Related(basque, y))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Romance(x) -> IndoEuropean(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(Romance)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: Romance(french) & Romance(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x, y))\nTEXT: Basque is a Romance language.\nFOL: Romance(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (x!= basque -> -Related(x, basque))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & LanguageMember(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Basque(x) & Related(basque, x))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Romance(x) -> IndoEuropean(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(Romance)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: Romance(french) & Romance(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists y. Related(basque, y)\nTEXT: Basque is a Romance language.\nFOL: Romance(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (MemberOf(x, y) -> RelatedTo(x, y)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: RelatedTo(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -RelatedTo(basque, x)\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(romanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) & Member(z, x) -> Related(y, z))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists y. Related(basque, y)\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(romanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) & Member(z, x) -> Related(y, z))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Language(x) & Related(basque, x))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x, y))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(romanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x, y))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(romanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x, _))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Language(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Romance(x) -> IndoEuropean(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(Romance)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: Romance(french) & Romance(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Basque(x) & Related(basque, x))\nTEXT: Basque is a Romance language.\nFOL: Romance(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & MemberOf(x, y) -> Related(y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Basque(x) & Related(x, _))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (Member(x, y) -> Related(y)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & LanguageMember(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (x!= Basque -> -Related(x, Basque))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> Related(x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (x!= basque -> -Related(basque, x))\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\nTEXT: Basque is a Romance language.\nFOL: RomanceLanguage(basque)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Romance(x) -> IndoEuropean(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(Romance)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> RelatedToEachOther(x))\nTEXT: French and Spanish are both Romance languages.\nFOL: Romance(french) & Romance(spanish)\nTEXT: German is related to Spanish.\nFOL: RelatedToEachOther(spanish, german)\nTEXT: Basque is not related to any other language.\nFOL: -RelatedToEachOther(basque, x)\nTEXT: Basque is a Romance language.\nFOL: Romance(basque)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 45,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists y. (Basque(y) & Related(basque, y))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Basque(x) & Related(basque, x))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists y. (Basque(y) & Related(basque, y))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (MemberOfLanguageFamily(x, y) -> Related(y)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Related(basque, x) & x!= basque)\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x, _))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Romance(x) -> IndoEuropean(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(Romance)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Language(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: Romance(french) & Romance(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (-Related(basque, x) & -Related(x, basque))\nTEXT: German is a Romance language.\nFOL: Romance(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Romance(x) -> IndoEuropean(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(Romance)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: Romance(french) & Romance(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x, _))\nTEXT: German is a Romance language.\nFOL: Romance(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Language(x) & x!= basque -> -Related(x, basque))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Basque(x) & Related(basque, x))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & MemberOf(x, y) -> RelatedTo(y, x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: RelatedTo(spanish, german)\nTEXT: Basque is not related to any other language.\nFOL: -RelatedTo(basque, x)\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> RelatedToEachOther(x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: RelatedTo(spanish, german)\nTEXT: Basque is not related to any other language.\nFOL: -RelatedTo(basque, x)\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Basque(x) & Related(basque, x))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & MemberOf(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Basque(x) & Related(basque, x))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (x!= basque -> -Related(x, basque))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Romance(x) -> IndoEuropean(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(Romance)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> RelatedToEachOther(x))\nTEXT: French and Spanish are both Romance languages.\nFOL: Romance(french) & Romance(spanish)\nTEXT: German is related to Spanish.\nFOL: RelatedTo(spanish, german)\nTEXT: Basque is not related to any other language.\nFOL: -RelatedTo(basque, x)\nTEXT: German is a Romance language.\nFOL: Romance(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> Related(x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> RelatedTo(y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: RelatedTo(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -RelatedTo(x, _))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Language(y) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists y. (Language(y) & Member(LanguageFamily(RomanceLanguage), y) & Related(basque, y))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> Related(x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> Related(x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (x!= basque -> -Related(x, basque))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (Romance(x) -> IndoEuropean(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(Romance)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(y))\nTEXT: French and Spanish are both Romance languages.\nFOL: Romance(french) & Romance(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\nTEXT: German is a Romance language.\nFOL: Romance(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Basque(x) & Related(basque, x))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & LanguageMember(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> not exists y. (x!= y & Related(x, y)))\nTEXT: German is a Romance language.\nFOL: RomanceLanguage(german)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 46,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x, _))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> RelatedToEachOther(x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: RelatedTo(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists y. (Basque(y) & RelatedTo(basque, y))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & MemberOf(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists y. (Basque(y) & Related(basque, y))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> Related(x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Basque(x) & Related(basque, x))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & MemberOfFamily(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x, _))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Basque(x) & Related(basque, x))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Language(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x) for all x\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Language(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Related(basque, x) | Related(x, basque))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> RelatedToEachOther(x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: RelatedTo(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Basque(x) & RelatedTo(x, _))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(romanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) & Member(z, x) -> Related(y, z))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. Related(basque, x)\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x, y))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Basque(x) & Related(basque, x))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & MemberOf(x, y) -> Related(y, x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists y. (Basque(y) & Related(y, Basque))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> Related(x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(romanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x, y))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> Related(x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (-Related(basque, x) & -Related(x, basque))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Basque(x) -> -Related(x, y))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & LanguageMember(y, x) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists y. Related(basque, y)\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & MemberOf(x, y) -> RelatedTo(y, x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: RelatedTo(spanish, german)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (RelatedTo(basque, x) & x!= basque)\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Language(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Language(x) & x!= basque -> -Related(x, basque))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(y, x) & Member(z, x) -> Related(y, z))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists x. (Basque(x) & Related(basque, x))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Language(y) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: all x. (Language(x) & x!= basque -> -Related(x, basque))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & Member(x, y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -exists y. (Basque(y) & Related(basque, y))\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguage)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> RelatedToEachOther(x))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: RelatedTo(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -RelatedTo(basque, x)\nTEXT: French is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 47,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: Left(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & Left(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayForTeam(x))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayForTeam(x))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayForTeam(x))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x, Team(x)))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: Left(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & Left(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayForTeam(x))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x, x))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayForTeam(x))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: Left(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & Left(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(robertLewandowski)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 48,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: Left(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & Left(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x, TeamLeft(x)))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayForTeam(x))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayForTeam(robertLewandowski, bayernMunchen)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayForTeam(x))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayForTeam(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayForTeam(x))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayForTeam(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x, BayernMunchen) -> -PlayFor(x, BayernMunchen))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, BayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayForTeam(x))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayForTeam(robertLewandowski, bayernMunchen)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayForTeam(x))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayForTeam(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayForTeam(x))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayForTeam(robertLewandowski, bayernMunchen)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x, x))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: Left(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & Left(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(robertLewandowski, bayernMunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayForTeam(x))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayForTeam(robertLewandowski, bayernMunchen)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 49,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x, Team(x)))\nTEXT: Robert Lewandowski is a star.\nFOL: -Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: -Star(robertLewandowski) \n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: -Star(robertLewandowski)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: -Star(robertLewandowski)  # This is the negation of the conclusion\n</EVALUATE>\n\nNote: To prove that the conclusion follows from the premises, we need to show that the negation of the conclusion is not entailed by the premises. In other words, we need to show that the premises do not logically imply that Robert Lewandowski is not a star.",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: -Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: Left(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & Team(x, y) & Left(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: -Star(robertLewandowski)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: -Star(robertLewandowski)  # Note: The conclusion is negated, so we need to negate it in the FOL expression\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: -Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: -Star(robertLewandowski)  // Note: The conclusion is the negation of the statement \"Robert Lewandowski is a star.\"\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayForTeam(x))\nTEXT: Robert Lewandowski is a star.\nFOL: -Star(robertLewandowski)  // Note: We assume that 'Star' is the negation of being a star, as it's not explicitly stated in the premises.\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: -Star(robertLewandowski)  (Incorrect)\n Corrected FOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: -Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: -Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: -Star(robertLewandowski)  // Changed to -Star, as the correct interpretation is that Robert Lewandowski is not a star.\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: Left(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & Left(x, y) -> -Play(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: -Star(robertLewandowski)  # This is the negation of the conclusion\n</EVALUATE>\n\nHowever, we cannot directly translate the conclusion into FOL as it is given in the problem. The conclusion \"Robert Lewandowski is a star\" should be negated to make it a conclusion that can be checked against the premises.\n\nIn the format provided, the conclusion should be a statement that can be checked against the premises. The original conclusion is a positive statement, so we need to negate it to make it a statement that can be checked against the premises.",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(robertLewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x, BayernMunchen) -> -PlayFor(x, BayernMunchen))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(robertLewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftTeam(robertLewandowski, bayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(robertLewandowski)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 50,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityInMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityInMontana(butte) & CityInMontana(helena) & CityInMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityInMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityInPierre(butte)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(Montana, billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(Montana, butte) & CityIn(Montana, helena) & CityIn(Montana, missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(Montana, pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityIn(pierre, x)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityOf(x, butte) -> -CityOf(x, pierre))\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityIn(x, butte) -> -CityIn(x, pierre))\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityInMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityInMontana(butte) & CityInMontana(helena) & CityInMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityInMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityInPierre(butte)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityIn(x, pierre) | -CityIn(x, butte)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityIn(x, butte) -> -CityIn(x, pierre))\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityIn(butte, pierre)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: InCityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InCityOf(butte, montana) & InCityOf(helena, montana) & InCityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: InCityOf(whiteSulphurSprings, state1) & InCityOf(butte, state1)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InCityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InCityOf(cityInButte, pierre)\nTEXT: Butte and Pierre are in the same state.\nFOL: InCityOf(butte, state1) & InCityOf(pierre, state1)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityOf(x, pierre) | -CityOf(x, butte)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityInMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityInMontana(butte) & CityInMontana(helena) & CityInMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityInMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityInPierre(x) | -CityInButte(x)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityIn(x, butte) -> -CityIn(x, pierre))\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityIn(x, butte) -> -CityIn(x, pierre))\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOfMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOfMontana(butte) & CityOfMontana(helena) & CityOfMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOfMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityOfPierre(butte)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityOf(x, butte) -> -CityOf(x, pierre))\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityOf(butte, pierre)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: StateOf(whiteSulphurSprings, x) & StateOf(butte, x)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityOf(x, butte) -> -CityOf(x, pierre))\nTEXT: Butte and Pierre are in the same state.\nFOL: StateOf(butte, y) & StateOf(pierre, y)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityOf(x, pierre) | -CityOf(x, butte)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityOf(butte, pierre)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOfMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOfMontana(butte) & CityOfMontana(helena) & CityOfMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOfMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityOfPierre(butte)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityOf(x, pierre) | -CityOf(x, butte)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityInMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityInMontana(butte) & CityInMontana(helena) & CityInMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityInMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityInPierre(butte)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityInMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityInMontana(butte) & CityInMontana(helena) & CityInMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityInMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityInPierre(butte)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(x) | -InButte(x)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: InCity(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InCity(butte, montana) & InCity(helena, montana) & InCity(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InCity(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InCity(butte, pierre)\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 51,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (InButte(x) -> -InPierre(x))\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte) & City(helena) & City(missoula) & InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (InButte(x) -> -InPierre(x))\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityOf(x, butte) -> -CityOf(x, pierre))\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityIn(butte, pierre)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityIn(x, butte) -> -CityIn(x, pierre))\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityIn(x, butte) -> -CityIn(x, pierre))\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: StateOf(whiteSulphurSprings, x) & StateOf(butte, x)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityOf(butte, pierre)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: StateOf(pierre, x) & StateOf(bismarck, x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityIn(x, butte) -> -CityIn(x, pierre))\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityIn(x, butte) -> -CityIn(x, pierre))\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: InButte(x) -> -InPierre(x)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: City(pierre) & City(bismarck) & SameState(pierre, bismarck)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityIn(x, butte) -> -CityIn(x, pierre))\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityIn(x, pierre) | -CityIn(x, butte)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InState(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte) & City(helena) & City(missoula) & InState(butte, montana) & InState(helena, montana) & InState(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whiteSulphurSprings) & City(butte) & InState(whiteSulphurSprings, sameState(butte))\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -InState(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: InState(butte, pierre) -> -InState(pierre, pierre)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: InState(pierre, sameState(bismarck))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityInMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityInMontana(butte) & CityInMontana(helena) & CityInMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityInMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityInButte(x) -> -CityInPierre(x))\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(butte)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityIn(x, butte) -> -CityIn(x, pierre))\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityIn(x, butte) -> -CityIn(x, pierre))\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityIn(x, butte) -> -CityIn(x, pierre))\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityIn(x, butte) -> -CityIn(x, pierre))\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityOf(x, butte) -> -CityOf(x, pierre))\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (InButte(x) -> -InPierre(x))\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityIn(x, butte) -> -CityIn(x, pierre))\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityIn(x, butte) -> -CityIn(x, pierre))\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityInMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityInMontana(butte) & CityInMontana(helena) & CityInMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityInMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityInButte(x) -> -CityInPierre(x))\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityOf(x, pierre) | -CityOf(x, butte)\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 52,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityIn(x, butte) -> -CityIn(x, pierre))\nTEXT: Montana is home to the city of Missoula.\nFOL: CityIn(missoula, montana)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityOf(x, butte) -> -CityOf(x, pierre))\nTEXT: Montana is home to the city of Missoula.\nFOL: CityOf(missoula, montana)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: InCity(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Includes(montana, butte) & Includes(montana, helena) & Includes(montana, missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InCity(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (InCity(x, butte) -> -InCity(x, pierre))\nTEXT: Montana is home to the city of Missoula.\nFOL: InCity(missoula, montana)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOfMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOfMontana(butte) & CityOfMontana(helena) & CityOfMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOfMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityOfPierre(butte)\nTEXT: Montana is home to the city of Missoula.\nFOL: CityOfMontana(missoula)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: StateOf(whiteSulphurSprings, state1) & StateOf(butte, state1)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -CityOf(x, pierre) | -CityOf(x, butte)\nTEXT: Montana is home to the city of Missoula.\nFOL: CityOf(missoula, montana)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: InMontana(billings) & City(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(butte) & City(helena) & City(missoula) & IncludesMontana(butte) & IncludesMontana(helena) & IncludesMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte) & City(whiteSulphurSprings) & City(butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre) & City(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (InButte(x) -> -InPierre(x))\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula) & HomeToMontana(missoula)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityIn(x, butte) -> -CityIn(x, pierre))\nTEXT: Montana is home to the city of Missoula.\nFOL: CityIn(missoula, montana)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityOf(x, butte) -> -CityOf(x, pierre))\nTEXT: Montana is home to the city of Missoula.\nFOL: CityOf(missoula, montana)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityOf(x, butte) -> -CityOf(x, pierre))\nTEXT: Montana is home to the city of Missoula.\nFOL: CityOf(missoula, montana)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: IncludesCities(montana, butte, helena, missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InState(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (InButte(x) -> -InPierre(x))\nTEXT: Montana is home to the city of Missoula.\nFOL: InState(missoula, montana)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Includes(montana, butte) & Includes(montana, helena) & Includes(montana, missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityIn(x, butte) -> -CityIn(x, pierre))\nTEXT: Montana is home to the city of Missoula.\nFOL: CityIn(missoula, montana)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityOf(x, butte) -> -CityOf(x, pierre))\nTEXT: Montana is home to the city of Missoula.\nFOL: HomeTo(montana, missoula)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityOf(x, butte) -> -CityOf(x, pierre))\nTEXT: Montana is home to the city of Missoula.\nFOL: CityOf(missoula, montana)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (InButte(x) -> -InPierre(x))\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityIn(x, butte) -> -CityIn(x, pierre))\nTEXT: Montana is home to the city of Missoula.\nFOL: CityIn(missoula, montana)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: includes(montana, butte) & includes(montana, helena) & includes(montana, missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: StateOf(whiteSulphurSprings, x) & StateOf(butte, x)\nTEXT: The city of Pierre is not in Montana.\nFOL: -includes(montana, pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -includes(pierre, x)\nTEXT: Montana is home to the city of Missoula.\nFOL: includes(montana, missoula)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State(whiteSulphurSprings) = State(butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityOf(x, butte) -> -CityOf(x, pierre))\nTEXT: Montana is home to the city of Missoula.\nFOL: CityOf(missoula, montana)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityIn(x, butte) -> -CityIn(x, pierre))\nTEXT: Montana is home to the city of Missoula.\nFOL: CityIn(missoula, montana)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOfMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOfMontana(butte) & CityOfMontana(helena) & CityOfMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOfMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (InButte(x) -> -InPierre(x))\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: StateOf(whiteSulphurSprings, x) & StateOf(butte, x)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityIn(x, butte) -> -CityIn(x, pierre))\nTEXT: Montana is home to the city of Missoula.\nFOL: CityIn(missoula, montana)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityIn(x, butte) -> -CityIn(x, pierre))\nTEXT: Montana is home to the city of Missoula.\nFOL: CityIn(missoula, montana)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOf(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOf(butte, montana) & CityOf(helena, montana) & CityOf(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOf(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityOf(x, butte) -> -CityOf(x, pierre))\nTEXT: Montana is home to the city of Missoula.\nFOL: CityOf(missoula, montana)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityOfMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityOfMontana(butte) & CityOfMontana(helena) & CityOfMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityOfMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (InButte(x) -> -InPierre(x))\nTEXT: Montana is home to the city of Missoula.\nFOL: CityOfMontana(missoula)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityIn(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityIn(butte, montana) & CityIn(helena, montana) & CityIn(missoula, montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityIn(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityIn(x, butte) -> -CityIn(x, pierre))\nTEXT: Montana is home to the city of Missoula.\nFOL: CityIn(missoula, montana)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: InMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: InMontana(butte) & InMontana(helena) & InMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: InSameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -InMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -InPierre(x) | -InButte(x)\nTEXT: Montana is home to the city of Missoula.\nFOL: InMontana(missoula)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 53,
  "responses": [
   [
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> CPT(x) | OPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> CPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> CPT(x) | OPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> CPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 54,
  "responses": [
   [
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> CPT(x) | OPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> CPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> CPT(x) | OPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> CPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) & ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) & ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) & ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & F1Visa(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> CPT(x) | OPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & F1Visa(mike) & WantsToWorkInUS(mike) -> CPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) & ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) & ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WantsToWorkInUS(mike) & ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> CPT(x) | OPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> CPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) & ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudentInUS(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudentInUS(x) & F1Visa(x) & WantsToWorkInUS(x) -> ApplyForCPT(x) | ApplyForOPT(x))\nTEXT: Mike is an international student.\nFOL: InternationalStudentInUS(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: InternationalStudentInUS(mike) & WantsToWorkInUS(mike) -> ApplyForCPT(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 55,
  "responses": [
   [
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nSome pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nIf something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nNo domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTed is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet.\nFOL: Pet(ted)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nSome pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nIf something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nNo domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTed is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet.\nFOL: Pet(ted)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT"
   ],
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nSome pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nIf something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nNo domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTed is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet.\nFOL: Pet(ted)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nSome pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nIf something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nNo domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTed is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet.\nFOL: Pet(ted)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nSome pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nIf something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nNo domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTed is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet.\nFOL: Pet(ted)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nSome pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nIf something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nNo domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTed is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet.\nFOL: Pet(ted)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nSome pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nIf something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nNo domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTed is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet.\nFOL: Pet(ted)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 56,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nSome pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nIf something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nNo domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTed is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nSome pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nIf something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nNo domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTed is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nSome pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nIf something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nNo domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTed is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: (Pet(ted) & Cow(ted))\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nSome pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nIf something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nNo domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTed is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</CONCLUSION>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nSome pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nIf something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nNo domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTed is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nSome pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nIf something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nNo domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTed is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nSome pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nIf something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nNo domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTed is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nSome pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nIf something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nNo domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTed is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: (Pet(ted) & Cow(ted))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 57,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nSome pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nIf something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nNo domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTed is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nIf Ted is a cow, then Ted is not a pet.\nFOL: (Cow(ted) -> -Pet(ted))\n</CONCLUSION>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nSome pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nIf something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nNo domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTed is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nIf Ted is a cow, then Ted is not a pet.\nFOL: (Cow(ted) -> -Pet(ted))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nSome pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nIf something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nNo domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTed is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nIf Ted is a cow, then Ted is not a pet.\nFOL: (Cow(ted) -> -Pet(ted))",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nSome pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nIf something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nNo domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTed is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nIf Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nSome pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nIf something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nNo domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTed is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nIf Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nSome pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nIf something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nNo domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTed is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nIf Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nSome pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nIf something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nNo domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTed is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nIf Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Cow(ted) -> -Pet(ted)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 58,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateUniversity(yale) & IvyLeague(yale) & ResearchUniversity(yale)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yale, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValue(yale, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoCollegesAndSchools(yale, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yale, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEd",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, Paul",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, Paul",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValuedAt(yaleUniversity, 42.3 * 10^9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwards",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoCollegesAndSchools(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [benjaminFranklinCollege, berkeleyCollege, branfordCollege, davenportCollege, ezraStilesCollege, graceHopperCollege,"
   ],
   [
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: Endowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (ConstituentCollegeOrSchool(x) & ConstituentOf(yaleUniversity, x))\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollege(benjaminFranklinCollege) & ResidentialCollege(berkeleyCollege) & ResidentialCollege(branfordCollege) & ResidentialCollege(davenportCollege) & Residential",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValue(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, {benjaminFranklinCollege, berkeleyCollege, branfordCollege, davenportCollege, ezraStilesCollege, graceHopperCollege, jonathanEdwardsCollege",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, Pi",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValue(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoCollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [benjaminFranklinCollege, berkeleyCollege, branfordCollege, davenportCollege, ezraStilesCollege, graceHopperCollege, jonathanEdwards",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, Paul"
   ],
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValuedAt(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoCollegesAndSchools(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, Morse",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValue(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoConstituentColleges(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege,",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoCollegesAndSchools(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege,",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollegesAtYale([BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege,"
   ],
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: Endowment(yaleUniversity, 42.3 billion)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoCollegesAndSchools(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, Paul",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (ConstituentCollege(x, yaleUniversity) -> (ResidentialCollege(x) | YaleGraduateSchool(x) | ProfessionalSchool(x)))\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollege(benjaminFranklinCollege, yaleUniversity) & ResidentialCollege(berkeleyCollege,",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoCollegesAndSchools(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValue(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, Pauli",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValuedAt(yaleUniversity, 42.3 billion)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoConstituentCollegesAndSchools(yaleUniversity, 27, [residentialColleges, YaleGraduateSchoolOfArtsAndSciences, twelveProfessionalSchools])\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialColleges = [BenjaminFranklinCollege,"
   ],
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValue(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoCollegesAndSchools(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege,",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: Endowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurray",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValue(yaleUniversity, 42.3 * 10^9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEd",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValuedAt(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoConstituentColleges(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [benjaminFranklinCollege, berkeleyCollege, branfordCollege, davenportCollege, ezraStilesCollege, graceHopperCollege"
   ]
  ]
 },
 {
  "index": 59,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: HasEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, Pauli",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: IvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: Endowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoConstituentColleges(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege,",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAt(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto(yaleUniversity, 27, [ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, TwelveProfessionalSchools])\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege,",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValue(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: ConstituentColleges(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, {benjaminFranklinCollege, berkeleyCollege, branfordCollege, davenportCollege, ezraStilesCollege, graceHopperCollege, jonathanEdwardsCollege",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege"
   ],
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: HasEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege,",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, Paul",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValuedAt(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoConstituentCollegesAndSchools(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege,",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateUniversity(yale) & IvyLeague(yale) & ResearchUniversity(yale)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yale, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: Endowment(yale) = 42.3 billion\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoCollegesAndSchools(yale, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yale, {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, Jonathan",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege,"
   ],
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAt(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto(27, YaleUniversity, ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, TwelveProfessionalSchools)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ListOfResidentialColleges(yaleUniversity, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, Davenport",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: HasEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoConstituentColleges(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege,",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAt($42.3Billion, Endowment(yaleUniversity))\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto(27, ConstituentCollegesAndSchools(yaleUniversity))\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ListOfResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, Grace",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateUniversity(yale) & IvyLeague(yale) & ResearchUniversity(yale)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yale, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: Endowment(yale, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoMultipleColleges(yale, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yale, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwards",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: Endowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: ConstituentCollegesAndSchools(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege"
   ],
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoConstituentColleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateUniversity(yaleUniversity) & IvyLeague(yaleUniversity) & ResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: HasEndowment(yaleUniversity) & EndowmentValue(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopper",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: Endowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, Morse",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateUniversity(yaleUniversity) & IvyLeague(yaleUniversity) & ResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: HasEndowment(yaleUniversity, 42.3 billion)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege"
   ],
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, Morse",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ListOfResidentialColleges(yaleUniversity, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwards",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAt42Point3Billion(yaleUniversity)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, Paul",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAt42Point3Billion(Endowment(yaleUniversity))\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27ConstituentCollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, Jonathan",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, Paul"
   ]
  ]
 },
 {
  "index": 60,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollegesAtYale = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: ConstituentColleges(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege,",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateUniversity(yale) & IvyLeague(yale) & ResearchUniversity(yale)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yale, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: Endowment(yale, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoResidentialCollegesAndSchools(yale)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yale, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateUniversity(yale) & IvyLeague(yale) & ResearchUniversity(yale)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yale, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValue(yale, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yale)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yale, [benjaminFranklin, berkeley, branford, davenport, ezraStiles, graceHopper, jonathanEdwards, morse, pauliM",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateUniversity(yaleUniversity) & IvyLeague(yaleUniversity) & ResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceH"
   ],
   [
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: PrivateUniversity(yale) & IvyLeague(yale) & ResearchUniversity(yale)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yale, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: Endowment(yale, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: ConstituentCollegesAndSchools(yale, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yale, {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEd",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: Endowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollegesAtYale = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, Morse",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollegesAtYale = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAt(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto(yaleUniversity, 27, ResidentialColleges, YaleGraduateSchoolOfArtsAndSciences, TwelveProfessionalSchools)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraSt",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: Endowment(yaleUniversity, 42.3 billion)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: ConstituentCollegesAndSchools(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, Morse"
   ],
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValue(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoCollegesAndSchools(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege,",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoResidentialCollegesAndSchools(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollegesAtYale = {benjaminFranklinCollege, berkeleyCollege, branfordCollege, davenportCollege, ezraStilesCollege, graceHopper",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAt42Point3Billion(yaleUniversity)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollegesAtYale = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateUniversity(yale) & IvyLeague(yale) & ResearchUniversity(yale)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yale, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: Endowment(yale, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yale)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yale, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwards"
   ],
   [
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yaleUniversity, 42.3e9)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoResidentialColleges(yaleUniversity) & OrganizedIntoGraduateSchool(yaleUniversity) & OrganizedIntoProfessionalSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [benjaminFranklinCollege, berkeleyCollege, bran",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValuedAt(yaleUniversity, 42.3 billion)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollegesAtYale = {benjaminFranklinCollege, berkeleyCollege, branfordCollege, davenportCollege, ezraStilesCollege, graceHopperCollege, jonathan",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValuedAt(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoResidentialCollegesAndSchools(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollegesAtYale = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, Jonathan",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: Endowment(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoCollegesAndSchools(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollegesAtYale = {benjaminFranklinCollege, berkeleyCollege, branfordCollege, davenportCollege, ezraStilesCollege, graceHopperCollege, jonathanEdwards",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAt(yaleUniversity, 42.3 billion)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27Colleges(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, Paul"
   ],
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValuedAt(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege,",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateUniversity(yale) & IvyLeague(yale) & ResearchUniversity(yale)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yale, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedEndowment(yale, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: ConstituentColleges(yale, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yale, {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege,",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValuedAt(yaleUniversity, 42.3)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27CollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollegesAtYale = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege,",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: Private(IvyLeagueResearchUniversity(yaleUniversity))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHavenIn1716(yaleUniversity)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValuedAt42Point3Billion(yaleUniversity)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27ConstituentCollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollegesAtYale = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwards",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAt42Point3Billion(yaleUniversity)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27ConstituentCollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege"
   ]
  ]
 },
 {
  "index": 61,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, The Secret Dude Society)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, Andrew Collins)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(X, Andrew Collins) & WorkingTitle(X, The Secret Dude Society)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, andrewCollins)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(WorkingTitle(\"The Secret Dude Society\", X), andrewCollins)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(starring)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewCollins, WorkingTitle(_, TheSecretDudeSociety))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, 2013) & PilotedOn(Badults, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewCollins, Series(\"The Secret Dude Society\"))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewCollins, Series(WorkingTitle(\"The Secret Dude Society\", _)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(Andrew Collins, WorkingTitle(\"The Secret Dude Society\", X))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(Andrew Collins, SeriesWithWorkingTitle(\"The Secret Dude Society\"))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & StarringMembersOfPappys(Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedInJuly2013(Badults, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewCollins, Series(WorkingTitle(\"The Secret Dude Society\", _)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewCollins, X) & WorkingTitle(X, TheSecretDudeSociety) & BritishSitcom(X)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewCollins, WorkingTitle(\"The Secret Dude Society\", X))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Pappys, Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewCollins, Series(WorkingTitle(TheSecretDudeSociety)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(X, AndrewCollins) & WorkingTitle(X, TheSecretDudeSociety)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Pappys, Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, \"The Secret Dude Society\")\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewCollins, X) & WorkingTitle(X, \"The Secret Dude Society\") & X = Badults\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(Andrew Collins, Series(WorkingTitle(\"The Secret Dude Society\", _)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(Andrew Collins, Series(WorkingTitle(\"The Secret Dude Society\")))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(Andrew Collins, SeriesWithWorkingTitle(\"The Secret Dude Society\"))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(X, AndrewCollins) & WorkingTitle(\"The Secret Dude Society\", X) & BritishSitcom(X)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Pappys(Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, \"The Secret Dude Society\")\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewCollins, Series(WorkingTitle(\"The Secret Dude Society\")))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappy)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, \"The Secret Dude Society\")\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(WorkingTitle(\"The Secret Dude Society\"), AndrewCollins)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, \"The Secret Dude Society\")\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(Andrew Collins, X) & WorkingTitle(X, \"The Secret Dude Society\")\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, \"The Secret Dude Society\")\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(x, AndrewCollins) & WorkingTitle(x, \"The Secret Dude Society\")\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Pappys, Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, \"The Secret Dude Society\")\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewCollins, Series(WorkingTitle(\"The Secret Dude Society\")))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Pappys, Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(Andrew Collins, Series(\"The Secret Dude Society\"))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Pappys, Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(TheSecretDudeSociety, Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewCollins, X) & WorkingTitle(TheSecretDudeSociety, X)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Pappys(Member(Badults))\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, \"The Secret Dude Society\")\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(Andrew Collins, Series(WorkingTitle(\"The Secret Dude Society\")))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 62,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: Sitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, \"The Secret Dude Society\")\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (Pappys(x) -> -StarringInShow(x, BBCTwo) & -StarringInShow(x, BBCThree))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (Pappys(x) -> -StarringInShow(x, BBCTwo) & -StarringInShow(x, BBCThree))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July 2013) & BBCThree(Badults)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, The Secret Dude Society)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, Andrew Collins)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (MemberOf(x, Pappys) & Starring(x,?y) & Pilot(?y,?z) & (BBCTwo(?z) | BBCThree(?z)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MembersOfPappys(stars(Badults))\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July 2013) & BBCThree(channel(Badults))\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\n</EVALUATE>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, membersOfPappy)\nBadults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July 2013) & Channel(Badults, BBCThree)\nThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nAndrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, andrewCollins)\n</PREMISES>\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (MemberOfPappy(x) & Starring(x,?y) & Pilot(?y,?z) & Channel(?y, BBCTwo) | Channel(?y, BBCThree))\n</CONCLUSION>\n\nHowever, since the conclusion involves existential quantification, we need to rephrase it to make it universally quantifiable. Here's the revised conclusion:\n\n<CONCLUSION>\nFor all x, if x is a member",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MembersOfPappys(starsOfBadults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotIn(July2013, Badults) & BBCThree(channelOfBadults)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MembersOfPappys(x) -> (-BBCTwo(channelOfy) & -BBCThree(channelOfy)))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MembersOfPappys(stars)\nBadults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBCThree)\nThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, \"The Secret Dude Society\")\nAndrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\n</PREMISES>\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x y z. (MembersOfPappys(x) & Stars(x, y, z) & (BBCTwo(z) | BBCThree(z)))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MembersOfPappys(stars)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (Pappys(x) -> -((Pilot(y, _, BBCTwo) | Pilot(y, _, BBCThree)) & Starring(y, x)))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (Pappys(x) -> -((Pilot(y, _, BBCTwo) | Pilot(y, _, BBCThree)) & Starring(y, x)))\n</EVAL",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MembersOfPappys(starringOf(Badults))\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedOn(Badults, BBCThree, July 2013)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\") = Badults\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MembersOfPappys(x) -> -(PilotedOn(x, BBCTwo, _) | PilotedOn(x, BBCThree, _)))\n</EVALUATE>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nBadults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July 2013, BBCThree)\nThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nAndrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\n</PREMISES>\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (MemberOfPappys(x) & Starring(_, x, Pilot(_, _, BBCTwo)) | Starring(_, x, Pilot(_, _, BBCThree)))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, MembersOfPappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July 2013) & Channel(Badults, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, \"The Secret Dude Society\")\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -(PilotedOn(x, BBCTwo) | PilotedOn(x, BBCThree)))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -(PilotedOn(x, BBCTwo) | PilotedOn(x, BBCThree)))\n</EVALU"
   ],
   [
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MembersOfPappys(starringBadults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MembersOfPappys(x) -> -Piloted(x, _, BBC Two | BBC Three))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MembersOfPappys(x) -> -Piloted(x, _, BBC Two | BBC Three))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: Sitcom(Badults) & MembersOfPappys(starringBadults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, July 2013) & PilotedOn(Badults, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Andrew Collins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MembersOfPappys(x) -> (PilotedOn(x, BBC Two) | PilotedOn(x, BBC Three)))\n</EVALUATE>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nBadults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July 2013, BBCThree)\nThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, The Secret Dude Society)\nAndrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\n</PREMISES>\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (MemberOfPappys(x) & Starring(x, BBCTwo) | MemberOfPappys(x) & Starring(x, BBCThree))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\n",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: Sitcom(Badults) & British(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July2013) & Channel(Badults, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (MemberOf(x, Pappys) & Starring(x, _) & Piloted(_, _) & Channel(_, BBCTwo) | Starring(x, _) & Piloted(_, _) & Channel(_, BBCThree))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (MemberOf(x, Pappys) & (",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MembersOfPappys(starringBadults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(TheSecretDudeSociety, Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (MembersOfPappys(x) & exists y. (Show(y) & Piloted(y, _, BBCTwo) | Piloted(y, _, BBCThree) & Starring(x, y)))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013) & Channel(Badults, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, The Secret Dude Society)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, Andrew Collins)\n</PREMISES>\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (MemberOf(x, Pappys) & Starring(x, Badults) & Piloted(x, BBCTwo) | MemberOf(x, Pappys) & Starring(x, Badults) & Piloted(x, BBCThree))\n</CONCLUSION>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Pappys, Badults)\nBadults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July2013) & Channel(Badults, BBCThree)\nThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nAndrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\n</PREMISES>\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (MemberOfPappys(x) & Starring(x, Pilot(_, BBCTwo | BBCThree)))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Pappys, Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Bad",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (Pappys(x) & Starring(x,?y) & Pilot(?y, _, BBCTwo) | Pappys(x) & Starring(x,?y) & Pilot(?y, _, BBCThree))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (Pappys(x) & exists y. (Starring(x, y) & Pilot(y, _,",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, The Secret Dude Society)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, Andrew Collins)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -((Piloted(x, _, BBC Two) | Piloted(x, _, BBC Three))))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MemberOfPappys(x) -> -(Piloted(x, _, BBC Two) | Piloted(x, _, BBC Three)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, \"The Secret Dude Society\")\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (Member(x, Pappys) & Starring(x, Pilot(_, _, BBCTwo | BBCThree)))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (Member(x, Pappys) & Starring(x, Pilot(_, _, BBCTwo | BBCThree)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013) & Channel(Badults, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (MemberOf(x, Pappys) & Starring(x, y) & Piloted(y, BBCTwo) | Starring(x, y) & Piloted(y, BBCThree))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (MemberOf(x, Pappys) & (exists y. (Starring(x,",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MembersOfPappys(starringBadults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedOn(Badults, BBCThree, July 2013)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MembersOfPappys(x) -> -PilotedOn(x, BBCTwo | BBCThree))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MembersOfPappys(x) -> -PilotedOn(x, BBCTwo) & -PilotedOn(x, BBCThree))\n</EVALUATE>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nBadults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July2013) & Channel(Badults, BBCThree)\nThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nAndrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\n</PREMISES>\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (MemberOf(x, Pappys) & Starring(_, x) & (Pilot(_, BBCTwo) | Pilot(_, BBCThree)))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Badults, Pappys)\nTEXT: Badults piloted in July 2013",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Pappys, Badults)\nBadults piloted in July 2013 on BBC Three.\nFOL: Pilot(Badults, July 2013) & Channel(Badults, BBCThree)\nThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nAndrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\n</PREMISES>\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (Member(x, Pappys) & Starring(x, exists y. (Pilot(y, BBCTwo) | Pilot(y, BBCThree))))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & Starring(Pappys, Badults)\nTEXT: Badults piloted in July 201",
    "<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MembersOfPappys(starsBadults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: PilotedIn(Badults, July 2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MembersOfPappys(x) -> -(PilotedIn(x, BBCTwo) | PilotedIn(x, BBCThree)))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: all x. (MembersOfPappys(x) -> -(PilotedIn(x, BBCTwo) | PilotedIn(x, BBCThree)))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 63,
  "responses": [
   [
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\nFOL: CompanyStock(ko)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<PREMISES>\nAll growth companies' stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies' stocks are growth companies' stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies' stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company's stock.\nFOL: MatureCompanyStock(ko)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\nFOL: CompanyStock(ko)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All growth companies' stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some"
   ],
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: Stock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\nFOL: CompanyStock(ko)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\nFOL: CompanyStock(ko)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\nFOL: CompanyStock(ko)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019",
    "<PREMISES>\nAll growth companies' stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies' stocks are growth companies' stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies' stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company's stock.\nFOL: MatureStock(ko)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\nFOL: CompanyStock(ko)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All growth companies' stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies' stocks are growth",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock.\nFOL: CompanyStock(ko)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 64,
  "responses": [
   [
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthCompanyStock(ko)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthCompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (CompanyStock(ko) & GrowthCompanyStock(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: Stock(ko) & GrowthStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthStock(ko)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthCompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthStock(ko)\n</EVALUATE>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthCompanyStock(ko)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthCompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthStock(ko)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (CompanyStock(ko) & GrowthStock(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthCompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthCompanyStock(ko)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (CompanyStock(ko) & GrowthStock(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthStock(ko)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthCompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthCompanyStock(ko)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: (CompanyStock(ko) & GrowthStock(ko))\n</EVALUATE>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthCompanyStock(ko)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: KO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthStock(ko)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 65,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\n</PREMISES>\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> ((-CompanyStock(ko)) & -Volatile(ko))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-Stock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<PREMISES>\nAll growth companies' stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies' stocks are growth companies' stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies' stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company's stock.\nFOL: MatureStock(ko)\n</PREMISES>\n<CONCLUSION>\nIf KO is a growth company's stock or if its price is volatile, then KO is neither a company's stock nor is its price volatile.\nFOL: ((GrowthStock(ko) | Volatile(ko)) -> (-Stock(ko) & -Volatile(ko)))\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> ((-CompanyStock(ko)) & (-Volatile(ko)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-Stock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-Stock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-Stock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-Stock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-Stock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-Stock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> ((-CompanyStock(ko)) & -Volatile(ko))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\n</PREMISES>\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-Stock(ko) & -Volatile(ko))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-Stock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -RetirementFundSuitable(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> RetirementFundSuitable(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Stock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\nTEXT: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-Stock(ko) & -Volatile(ko))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 66,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (IstanbulPlate(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -IstanbulPlate(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: IstanbulPlate(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (IstanbulPlate(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -IstanbulPlate(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: IstanbulPlate(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (FromIstanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -FromIstanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: FromIstanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (IstanbulPlate(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -IstanbulPlate(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: IstanbulPlate(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (FromIstanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -FromIstanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: FromIstanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (FromIstanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -FromIstanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: FromIstanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (IstanbulPlate(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -IstanbulPlate(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: IstanbulPlate(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (FromIstanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -FromIstanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: FromIstanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Joe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 67,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginWith35(x) -> -BeginWith34(x)\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-(BeginsWith34(x)) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (FromIstanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -FromIstanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: FromIstanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: FromIstanbul(tom)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginWith35(x) -> -BeginWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (FromIstanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -FromIstanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: FromIstanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Tom's license plate is from Istanbul.\nFOL: FromIstanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (FromIstanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-BeginsWith34(x) -> -FromIstanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: FromIstanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: FromIstanbul(tom)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (FromIstanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-BeginsWith34(x) -> -FromIstanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: FromIstanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: FromIstanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (BeginsWith34(x) -> Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: all x. (BeginsWith35(x) -> -BeginsWith34(x))\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (BeginsWith34(x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\nTEXT: Tom's license plate is from Istanbul.\nFOL: Istanbul(tom)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 68,
  "responses": [
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAnd",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeout(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeout(mary) & EnjoyDiningHall(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -Picky(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeInDiningHalls(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedMoneyToHelpPayForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyD",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedMoneyForTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEatingAndCatchingUp(x))\nTEXT: If Mary works in"
   ],
   [
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeout(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobsOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobsOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDining"
   ],
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendLotOfTime",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x, campus) -> NeedMoney(x, tuition))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x, college) -> StudentJob(x, campus))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(mary, college) & -EnjoyDiningHall(mary)) | (-OrderTakeout(mary, college) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -Picky(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x, campus))\nTEXT: If Mary works in student jobs on campus and needs to earn",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and"
   ],
   [
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeout(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyToPayForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobs(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAnd",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals"
   ],
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedMoneyToHelpPayForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyD",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedMoneyToHelpPayForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobs(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDining",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobsOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobsOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) ->",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -Picky(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeInDiningHall(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her"
   ]
  ]
 },
 {
  "index": 69,
  "responses": [
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendALot",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(mary) & -DiningHallMeals(mary)) | (-OrderTakeout(mary) & DiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (DiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (DiningHallMeals(x) -> EatAndCatchUp(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition,",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary works",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedMoneyToHelpPayForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (Enjoy"
   ],
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeout(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMeals(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> NotPickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help"
   ],
   [
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendALot",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendLotOf",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeout(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -Picky(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAnd"
   ],
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobsOnCampus(x) -> NeedToEarnMoneyToHelpPayForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobsOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMeals(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If"
   ],
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAnd",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedMoneyToHelpPayForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (Enjoy",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x, campus) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x, campus))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobsOnCampus(x) -> NeedToEarnMoneyToHelpPayForCollegeTuition(x))\nIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobsOnCampus(x))\nPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary)))\nIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedMoneyToHelpPayForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyD"
   ]
  ]
 },
 {
  "index": 70,
  "responses": [
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedMoneyToHelpPayCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDining",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobsOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobsOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDining",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her"
   ],
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary works in",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobsOnCampus(x) -> NeedToEarnMoneyToHelpPayForCollegeTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> WorkInStudentJobsOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL:",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAnd"
   ],
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendLotOfTimeEating(x))\nTEXT:",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeout(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is"
   ],
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (WorkInStudentJobs(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> WorkInStudentJobs(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary works in",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAnd",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary",
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help"
   ],
   [
    "<EVALUATE>\nTEXT: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(mary) & -DiningHallMeals(mary)) | (-OrderTakeout(mary) & DiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (DiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (DiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(mary) & -EnjoyDiningHallMeals(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHallMeals(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMeals(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMeals(x) -> SpendTimeEating(x))\nTEXT: If Mary",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAnd",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequentlyInCollege(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequentlyInCollege(mary) & -EnjoyDiningHallMealsAndRecipes(mary)) | (-OrderTakeoutFrequentlyInCollege(mary) & EnjoyDiningHallMealsAndRecipes(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHallMealsAndRecipes(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHallMealsAnd",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: ((OrderTakeoutFrequently(mary) & -EnjoyDiningHall(mary)) | (-OrderTakeoutFrequently(mary) & EnjoyDiningHall(mary)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEating(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay"
   ]
  ]
 },
 {
  "index": 71,
  "responses": [
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are baker",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are baker",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are baker",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 72,
  "responses": [
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\n",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChilies)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 73,
  "responses": [
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cup",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cup",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cup",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cup",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cup",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cup",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 74,
  "responses": [
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 75,
  "responses": [
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & BakedByMelissa(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & BakedByMelissa(driedThaiChilies)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) ->",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) ->"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) ->",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & BakedByMelissa(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) ->",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) ->",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) ->",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & BakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & BakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & BakedByMelissa(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(thaiChilies) | Bakery(thaiChilies)) -> (Hotpot(thaiChilies) | Spicy(thaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(thaiChilies) & BakedByMelissa(thaiChilies)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & BakedByMelissa(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & BakedByMelissa(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & BakedByMelissa(driedThaiChilies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChilies) | Bakery(driedThaiChilies)) -> (Hotpot(driedThaiChilies) | Spicy(driedThaiChilies))\nTEXT: Dried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 76,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) & -PopularAmongLocalResidents(subway)) | (-RatingGreaterThan9(subway) & PopularAmongLocalResidents(subway))\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> (",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\n</PREMISES>\n<CONCLUSION>\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -TakeOutService",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -TakeOutService(subway))\n</EVALUATE",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) & -PopularAmongLocalResidents(subway)) | (-RatingGreaterThan9(subway) & PopularAmongLocalResidents(subway))\n</PREMISES>\n<CONCLUSION>\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegative",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) & -PopularAmongLocalResidents(subway)) | (-RatingGreaterThan9(subway) & PopularAmongLocalResidents(subway))\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> ("
   ],
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -TakeOutService(subway))\n</EVALU",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\n</PREMISES>\n<CONCLUSION>\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOut(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOut",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) & -PopularAmongLocalResidents(subway)) | (-RatingGreaterThan9(subway) & PopularAmongLocalResidents(subway))\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> (Rating",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) & -PopularAmongLocalResidents(subway)) | (-RatingGreaterThan9(subway) & PopularAmongLocalResidents(subway))\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> (Rating",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeoutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeoutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeoutService(subway))\n</"
   ],
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendations(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ReceiveManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) & -PopularAmongLocalResidents(subway)) | (-RatingGreaterThan9(subway) & PopularAmongLocalResidents(subway))\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOutService(subway) & ReceiveManyNegativeReviews(sub",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeout(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\n</PREMISES>\n<CONCLUSION>\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeout(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeout(sub",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOut(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOut(subway))\n</EVALU",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -TakeOutService(subway))\n</EVALU",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\n</PREMISES>\n<CONCLUSION>\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -TakeOut"
   ],
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway))\n</E",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -TakeOutService(subway))\n</EVALU",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway))\n",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -TakeOutService(subway))\n</EVALUATE",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -TakeOutService(subway))\n</EVALUATE"
   ],
   [
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\n</PREMISES>\n<CONCLUSION>\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -TakeOutService(sub",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -TakeOutService(subway))\n</EVALUATE",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -TakeOutService(subway))\n</EVALU",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreaterThan9(subway) & -ProvideTakeOutService(subway))\n</E",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreater9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreater9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreater9(subway) | PopularAmongLocalResidents(subway))\n</PREMISES>\n<CONCLUSION>\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> (RatingGreater9(subway) & -TakeOut"
   ]
  ]
 },
 {
  "index": 77,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOutService(subway) & NotManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: TakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOut(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOutService(subway) & NotManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: TakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreater9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreater9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreater9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOut(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOut(subway) & NotManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreater9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreater9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreater9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: TakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreater9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreater9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreater9(subway) & -PopularAmongLocalResidents(subway)) | (-RatingGreater9(subway) & PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOut(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeout(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeout(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) & -PopularAmongLocalResidents(subway)) | (-RatingGreaterThan9(subway) & PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: TakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOutService(subway) & NotManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) & -PopularAmongLocalResidents(subway)) | (-RatingGreaterThan9(subway) & PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: TakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreater9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreater9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreater9(subway) & -PopularAmongLocalResidents(subway)) | (-RatingGreater9(subway) & PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: TakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendations(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) & -PopularAmongLocalResidents(subway)) | (-RatingGreaterThan9(subway) & PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOutService(subway) & NotManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOut(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreater9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreater9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreater9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOut(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (ListedInYelpsRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInYelpsRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: TakeOutService(subway) & NotManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOut(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: TakeOutService(subway) & NotManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (ListedInYelpsRecommendations(x) -> -ReceiveManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> ListedInYelpsRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ReceiveManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOutService(subway) & -ReceiveManyNegativeReviews(subway)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 78,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOut(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) & -PopularAmongLocalResidents(subway)) | (-RatingGreaterThan9(subway) & PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -TakeOutService(subway)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreater9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreater9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreater9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOut(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -TakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreater9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreater9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreater9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -TakeOutService(subway)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) & -PopularAmongLocalResidents(subway)) | (-RatingGreaterThan9(subway) & PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOut(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeoutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeoutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOut(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) & -PopularAmongLocalResidents(subway)) | (-RatingGreaterThan9(subway) & PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -TakeOutService(subway)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeout(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeout(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -TakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway does not provide take-out service.\nFOL: -TakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreater9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeout(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreater9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreater9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeout(subway)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> NotManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOut(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -TakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpsRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (RatingGreaterThan9(x) -> YelpsWithRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> RatingGreaterThan9(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: RatingGreaterThan9(subway) | PopularAmongLocalResidents(subway)\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOutService(subway)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 79,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: Walden contains knowledge.\nFOL: Knowledge(walden)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x) -> GainsKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge.\nFOL: all x. (Reads(x) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Person(x) & Read(x, y) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Person(x) & Reads(x) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> BecomesSmarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Person(x) & Reads(x, y) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Person(x) & ReadBook(x, y) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadBook(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: Walden contains knowledge.\nFOL: Knowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: Walden contains knowledge.\nFOL: ContainsKnowledge(walden)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 80,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge.\nFOL: all x. (Person(x) & Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Person(harry) & Read(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry) \n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadBook(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, before)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (ReadsBook(x) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadsBook(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, \"Walden\")\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, Before(harry))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge.\nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge.\nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (ReadsBook(x) -> GainsKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadsBook(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> Knowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, before)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x) -> Knowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, before)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, beforeHarry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, before)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Person(x) & ReadBook(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadBook(harry) & Book(walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Person(x) & ReadBook(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadBook(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Person(x) & ReadBook(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Person(harry) & ReadBook(walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 81,
  "responses": [
   [
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> Knowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> Knowledge(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainKnowledge(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainsKnowledge(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge.\nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainKnowledge(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> Knowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> Knowledge(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainKnowledge(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainKnowledge(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> Knowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> Knowledge(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainsKnowledge(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainKnowledge(x)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainKnowledge(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge.\nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainKnowledge(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (ReadBook(x) -> GainKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadBook(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainKnowledge(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> Knowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> Knowledge(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry) & Book(walden)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainsKnowledge(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainKnowledge(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> Knowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> Knowledge(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainKnowledge(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainKnowledge(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainKnowledge(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainKnowledge(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainsKnowledge(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainsKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (ReadsBook(x) -> GainsKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadsBook(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainsKnowledge(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Person(x) & ReadBook(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadBook(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainKnowledge(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> ContainKnowledge(x))\nTEXT: [BG] When a person reads a book, that person gains knowledge.\nFOL: all x. (Read(x) -> GainKnowledge(x))\nTEXT: [BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry)\nTEXT: A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainKnowledge(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 82,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x)",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: LanguageGeneration(machineTranslation)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(Output(x)) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(Output(machineTranslation))\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(OUTPUT(x)) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(OUTPUT(machineTranslation))\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(ouput(x)) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(output(machineTranslation))\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGeneration(machineTranslation)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGeneration(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGeneration(machineTranslation)\n</EVALUATE>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: LanguageGeneration(machineTranslation)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(outputOfMachineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</EVALUATE>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP_Task(x) -> (LanguageGeneration_Task(x) | LanguageUnderstanding_Task(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGeneration_Task(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP_Task(machine_translation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machine_translation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: LanguageGeneration_Task(machine_translation)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGeneration(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGeneration(machineTranslation)\n</EVALUATE>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGenerationTask(x",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 83,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstanding(machineTranslation)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstanding(machineTranslation)\n</EVALUATE>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: LanguageUnderstanding(machineTranslation)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) & NLP(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstanding(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstanding(machineTranslation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstanding(machineTranslation)\n</EVALUATE>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: LanguageUnderstanding(machineTranslation)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x)"
   ],
   [
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP_Task(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP_Task(machine_translation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machine_translation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machine_translation)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP_Task(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: LanguageUnderstanding(machineTranslation)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstanding(machineTranslation)\n</EVALUATE>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGenerationTask(x"
   ],
   [
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: LanguageUnderstanding(machineTranslation)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: LanguageUnderstanding(machineTranslation)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGeneration(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NaturalLanguageProcessingTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 84,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (OneMonthRent(x) | More(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetsAllowed(theOliveGarden) & Deposit(theOliveGarden) & -More(theO",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (OneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetsAllowed(theOliveGarden) & SecurityDeposit(theOliveGarden",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (EqualToOneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetsAllowed(theOliveGarden) & Deposit(theOliveGarden",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (MonthRent(x) = Deposit(x) | MonthRent(x) < Deposit(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & PetsAllowed(x) & Deposit(x)",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (Equal(x, OneMonthsRent) | More(x, OneMonthsRent)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthsRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) &"
   ],
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (Equal(x, 1 * Rent) | More(x, 1 * Rent)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: TomAllowed(theOliveGarden, tom, fluffy) & Deposit",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (OneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowed(theOliveGarden) & MoreThanOneMonthRent(theO",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (EqualToOneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: EqualToOneMonthRent(theOliveGarden)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveInWithPet(tom, fluffy) & DepositNoMoreThan150",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (OneMonthRent(x) | More(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & PetsAllowed(x) & Deposit(x) & LessOrEqual(1500,",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (MonthRent(x) = Deposit(x) | Deposit(x) > MonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetsAllowed(theOliveGarden) & Deposit(theOlive"
   ],
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (OneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowed(theOliveGarden) & MoreThanOneMonthRent(the",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (EqualDeposit(x, 2000) | MoreDeposit(x, 2000)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: EqualDeposit(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetsAllowed(theOliveGarden) & LessOrEqualDeposit",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (OneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, theOliveGarden, fluffy) & DepositNoMore",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x) & Allowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (EqualDeposit(x) | MoreDeposit(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: EqualDeposit(theOliveGarden)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (Allowed(theOliveGarden & Pet(fluffy)) & LessDeposit(theOliveGarden, 1500",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (EqualDeposit(x, 2000) | MoreThanDeposit(x, 2000)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: EqualDeposit(2000, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowedWith(fluffy, tom) & DepositNoMoreThan(150"
   ],
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (Equal(x, 2000) | More(x, 2000)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Equal(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (Allowed(tom, fluffy) & LessThanOrEqualTo(theOliveGarden, 1500))",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (EqualToMonthRent(x) | MoreThanMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: EqualToMonthRent(theOliveGarden)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetsAllowed(theOliveGarden) & LessThanOrEqualToMonthRent(theOliveGarden))",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (EqualToOneMonthsRent(x) | MoreThanOneMonthsRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthsRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveInWithFluffy(tom) & NoMoreThanOne",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (EqualToMonthRent(x) | MoreThanMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: EqualToMonthRent(theOliveGarden)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy) & LessThanOrEqualToMonthRent(theOliveG",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (EqualDeposit(x, 1 * monthRent(x)) | MoreDeposit(x, 1 * monthRent(x))))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: monthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & Allowed"
   ],
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (EqualToOneMonthsRent(x) | MoreThanOneMonthsRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthsRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & PetsAllowed(x) & -MoreThanOne",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (EqualDeposit(x, MonthRent(x)) | MoreDeposit(x, MonthRent(x))))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetsAllowed(theOliveGarden) & Deposit(theOlive",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (OneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(theOliveGarden) & PetsAllowed(theOliveG",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (EqualDeposit(x) | MoreDeposit(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetsAllowed(theOliveGarden) & Owner(tom, fluffy) & MoreDeposit(theOliveG",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x) & Allowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (MonthRent(x) = x | MonthRent(x) < x))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (Allowed(tom, fluffy) & SecurityDeposit(theOlive"
   ]
  ]
 },
 {
  "index": 85,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (Equal(x, 2000) | More(x, 2000)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Equal(2000, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowedWith(fluffy, theOliveGarden) & DepositNoMoreThan(",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (EqualDeposit(x) | MoreDeposit(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowed(theOliveGarden) & MoreDeposit(theOliveGarden, 1500))",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (MonthRent(x) = x | MonthRent(x) < x))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & Security",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (EqualDeposit(x, MonthRent) | MoreDeposit(x, MonthRent)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy, theOliveGarden) & Less",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (EqualsOneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: EqualsOneMonthRent(theOliveGarden)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & DepositNoMoreThan150"
   ],
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (EqualDeposit(x, 2000) | MoreDeposit(x, 2000)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: EqualDeposit(2000, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & PetsAllowed(x) & Deposit(x) & MoreDeposit",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (Equal(x, 2000) | More(x, 2000)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Equal(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, theOliveGarden, fluffy) & Less",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x) & Allowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (OneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (Allowed(tom, fluffy) & DepositNoMoreThan1500",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (EqualDeposit(x, MonthRent(x)) | MoreDeposit(x, MonthRent(x))))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, theOliveGarden,",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (EqualToOneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) &"
   ],
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (Equal(x, OneMonthRent(x)) | More(x, OneMonthRent(x))))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & PetAllowed(x) & Security",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (MonthRent(x) = Deposit(x) | Deposit(x) > MonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy)",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x) & AllowedIn(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> RequiredDeposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (RequiredDeposit(x) -> (MonthRent(x) = SecurityDeposit(x) | SecurityDeposit(x) > MonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedIn(theOliveG",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x) & Allowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> RequiredDeposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (SecurityDeposit(oliveGarden) = 2000 | SecurityDeposit(oliveGarden) > 2000)\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(oliveGarden) &",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (MonthRent(x) = Deposit(x) | Deposit(x) > MonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy"
   ],
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (Deposit(x) = 2000 | Deposit(x) > 2000))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & Deposit",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (OneMonthRent(OliveGarden) | MoreThanOneMonthRent(OliveGarden))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(oliveGarden)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, oliveGarden, fluffy) & -MoreThanOneMonthRent(oliveGarden))",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (OneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowed(theOliveGarden) & Deposit(theOliveGarden) &",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (EqualsOneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: ManagedBuilding(x) & AllowedToMoveIn(x, fluffy, tom) &",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (EqualDeposit(x, 2000) | MoreDeposit(x, 2000)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: EqualDeposit(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & PetsAllowed(x) & MoreDeposit(x,"
   ],
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x) & Allowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> RequiredDeposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (RequiredDeposit(x) -> (EqualDeposit(x, 2000) | MoreDeposit(x, 2000)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: EqualDeposit(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (Allowed(tom, fluffy) & LessDeposit(the",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (EqualDeposit(x) | MoreDeposit(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: EqualDeposit(theOliveGarden)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowed(theOliveGarden) & LessDeposit(theOliveGarden, 1500)) <-> WillRent",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (MonthRent(x) = SecurityDeposit(x) | MonthRent(x) < SecurityDeposit(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & PetAllowed(x) &",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (EqualToOneMonthsRent(x) | MoreThanOneMonthsRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthsRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetsAllowed(theOliveGarden) & MoreThanOneMonthsRent(the",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (MonthRent(x) | MoreThan(x, MonthRent(x))))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy, theOliveGarden) & LessThan("
   ]
  ]
 },
 {
  "index": 86,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (MonthRent(x) = 2000 | MoreThan2000(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, theOliveGarden, fluffy) & Less",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (OneMonthsRent(x) | More(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthsRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowed(theOliveGarden) & SecurityDeposit(theOliveGarden, 1500",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (MonthRent(oilveGarden) = SecurityDeposit(oilveGarden)) | (MonthRent(oilveGarden) < SecurityDeposit(oilveGarden))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oilveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(oilveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowed",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (MonthRent(x) | MoreThanMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy) & LessThanOrEqualThan1500(SecurityDeposit",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (EqualToOneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(oliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowed(oliveGarden) & -MoreThanOneMonthRent"
   ],
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (MonthRent(x) & Deposit(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowed(theOliveGarden) & Deposit(theOliveGarden) & Deposit(theOliveG",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (DepositRequired(x) -> (OneMonthRent(x) | More(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(oliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & AllowedToMoveIn(x, fluffy) & More(x, 1500)) <-> (Tom",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (EqualDeposit(x, 2000) | MoreDeposit(x, 2000)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: EqualDeposit(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowed(theOliveGarden) & LessOrEqual",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetsAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (EqualToMonthRent(x) | More(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: EqualToMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & PetsAllowed(x) & Deposit(x) & LessThanOrEqualTo(theOlive",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (EqualDeposit(x, 2000) | MoreDeposit(x, 2000)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: EqualDeposit(2000, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowed(theOliveGarden) & MoreDeposit(1500, "
   ],
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (OneMonthsRent(x) | More(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthsRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowed(theOliveGarden) & AllowedToMoveIn(tom, fluffy, the",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (MonthRent(x) | More(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (Pet(fluffy) & ManagedBuilding(theOliveGarden) & More(1500)) <-> Rentable(theOlive",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (Equal(x, OneMonthRent) | More(x, OneMonthRent)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowed(theOliveGarden) & SecurityDeposit(theOlive",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (Equal(x, 2000) | MoreThan(x, 2000)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Equal(2000, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowed(oliveGarden) & AllowedToMoveIn(tom, fluffy",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (EqualDeposit(x, OneMonthsRent) | MoreDeposit(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owns(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthsRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowed(theOliveGarden) & Deposit(theOliveGarden"
   ],
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (MonthRent(x) = 2000 | MonthRent(x) > 2000))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowed(theOliveGarden) & MonthRent",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (EqualDeposit(x, MonthRent) | MoreDeposit(x, MonthRent)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowed(theOliveGarden) & MoreDeposit(theOlive",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (EqualDeposit(x) | MoreDeposit(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowed(theOliveGarden) & AllowedToMoveIn(tom, fluffy) & Deposit(theO",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & Pet(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (OneMonthRent(x) | More(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (AllowedToMoveIn(tom, fluffy) & LessOrEqual(1500, Deposit(theOliveGarden",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (MonthRent(x) & Deposit(x)) | MoreThanMonthRent(x))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowed(theOliveGarden) & DepositRequired(theOliveGarden"
   ],
   [
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (EqualDeposit(x, MonthRent(x)) | MoreDeposit(x, MonthRent(x))))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowed(theOliveGarden) & NoMoreDeposit",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (MonthRent(x) = Deposit(x) | MonthRent(x) < Deposit(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(oliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowed(oliveGarden) & Owner(fluffy",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (Deposit(x) -> (EqualToMonthRent(x) | MoreThanMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(oliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowed(oliveGarden) & AllowedToMoveIn(tom, fluffy,",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (DepositRequired(x) -> (EqualToOneMonthRent(x) | MoreThanOneMonthRent(x)))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: OneMonthRent(oliveGarden, 2000)\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (PetAllowed(oliveGarden) & AllowedToMoveInWith",
    "<EVALUATE>\nTEXT: Pets are allowed in some managed buildings.\nFOL: exists x. (ManagedBuilding(x) & PetAllowed(x))\nTEXT: A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: all x. (SecurityDeposit(x) -> (MonthRent(x) = x | MoreThan(x, MonthRent(x))))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(fluffy, tom)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(theOliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & PetAllowed(x) & MoreThan(150"
   ]
  ]
 },
 {
  "index": 87,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\nFOL: all x. (Koala(x) -> LoveToSleep(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Quokka(x) -> -Koala(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxsFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxsFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxsFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxsFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxsFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxsFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\nFOL: LoveToSleep(koala)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxsFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxsFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxsFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\nFOL: LoveToSleep(koala)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxsFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxsFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxsFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimalOfMax(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimalOfMax(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (FavoriteAnimalOfMax(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Quokka(x) -> -Koala(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<PREMISES>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\n</PREMISES>\n<CONCLUSION>\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimalOfMax(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (FavoriteAnimalOfMax(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimalOfMax(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 88,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimal(x, max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimal(x, max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (FavoriteAnimal(x, max) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</EVALUATE>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxsFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxsFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxsFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nFOL: (Love",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (Australia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> Australia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteOfMax(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteOfMax(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteOfMax(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustraliaAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustraliaAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxsFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxsFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxsFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If animals are",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</EVALUATE>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 89,
  "responses": [
   [
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\n</PREMISES>\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy. \nFOL: (Quokka(koala) -> (",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Koala(x) & Quokka(x) -> (LoveToSleep(x) | Very",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Quokka(x) -> -Koala(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Koala(x) & Quokka(x) -> (LoveToSleep(x",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. ((Koala(x) & Quokka(x)) -> (LoveToSleep(x) | VeryFl",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. ((Quokka(x) & Koala(x)) -> (LoveToSleep(x) |"
   ],
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteOfMax(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (FavoriteOfMax(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteOfMax(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (VeryFluffy(x) & Quokka(x) -> -Koala(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy. \nFOL: all x. (Koala(x) & Quokka(x",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Quokka(x) & Koala(x) -> (LoveToSleep(x) | VeryFluffy",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Quokka(x) & Koala(x) -> (LoveToSleep",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (VeryFluffy(x) & Quokka(x) -> -Koala(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy. \nFOL: (Koala(x) & Quokka(x)) -> (LoveToSleep",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. ((Quokka(x) & Koala(x)) -> (LoveToSleep(x) | VeryFluffy"
   ],
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimalOfMax(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimalOfMax(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimalOfMax(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Quokka(x) -> -Koala(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Koala(x) & Quokka(x",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Quokka(x) & Koala(x) -> (LoveToSleep(x) |",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (Koala(x) & VeryFluffy(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: (Koala(x) & Quokka(x)) -> (LoveToSleep(x) | VeryFluffy(x",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\n</PREMISES>\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: (Quokka(koala) -> (LoveToSleep(ko",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Quokka(x) & Koala(x) -> (LoveToSleep(x) |"
   ],
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Quokka(x) & Koala(x) -> (LoveToSleep(x)",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Quokka(x) & Koala(x) -> (LoveToSleep(x)",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Quokka(x) -> -Koala(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Koala(x) & Quokka(x) -> (LoveToSleep(x) | Very",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Quokka(x) -> -Koala(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Koala(x) & Quokka(x) -> (LoveToSleep(x)",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: (Koala(x) & Quokka(x) -> (LoveToSleep(x) | VeryFl"
   ],
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (VeryFluffy(x) & Quokka(x) -> -Koala(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy. \nFOL: all x. (Koala(x) & Quokka(x) -> (",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimalOfMax(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimalOfMax(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (FavoriteAnimalOfMax(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Koala(x) & Quokka(x) ->",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\n</PREMISES>\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: (Quokka(koala) -> (LoveToSleep(ko",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: (Quokka(koala) & -LoveToSleep(koala) | -",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: all x. (VeryFluffy(x) & Koala(x) -> -Quokka(x))\nTEXT: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: all x. (Quokka(x) & Koala(x) -> (LoveToSleep"
   ]
  ]
 },
 {
  "index": 90,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: exists x. (Man(x) & (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: exists x. (Man(x) & (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: exists x. (Man(x) & (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: exists x. (Man(x) & (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: exists x. (Man(x) & (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(man) | Evil(man))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 91,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (-Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (-Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (-Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (-Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 92,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(man) | Evil(man))\nTEXT: No ugly person is handsome.\nFOL: -Ugly(x) | -Handsome(x)\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: exists x. (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(man) | Evil(man))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry))) -> (-Kind(harry) & -CEO(harry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: exists x. (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: exists x. (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry))) -> (-Kind(harry) & -CEO(harry))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry))) -> (-Kind(harry) & -CEO(harry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: (Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nFOL: ((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> (-Kind(harry) & -CEO(harry)))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 93,
  "responses": [
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (AnnoyingSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((Twin(x) | Triplet(x)) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (Twin(x) | Triplet(x)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (AnnoyingSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHome(x) -> -StrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHome(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a"
   ],
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((TwinsOrTriplets(x) | Triplets(x)) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (TwinsOrTriplets(x) | Triplets(x)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (AnnoyingSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (AnnoyingSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a"
   ],
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((Twin(x) | Triplets(x)) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (Twin(x) | Triplets(x)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (AnnoyingSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin"
   ],
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((Twins(x) | Triplets(x)) -> SpendTimeHangingOutWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (Twins(x) | Triplets(x)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutAnnoyingSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeHangingOutWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (HaveSameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> HaveSameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin"
   ],
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((Twin(x) | Triplet(x)) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (Twin(x) | Triplet(x)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (AnnoyingSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((Twins(x) | Triplets(x)) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (HaveSameAgeSiblings(x) -> (Twins(x) | Triplets(x)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> HaveSameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members"
   ]
  ]
 },
 {
  "index": 94,
  "responses": [
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((Twins(x) | Triplets(x)) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (Twins(x) | Triplets(x)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members"
   ],
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> OftenDidNotLiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or"
   ],
   [
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> OftenDidNotLiveAtHome(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> OftenDidNotLiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> OftenDidNotLiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> OftenDidNotLiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is"
   ],
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or"
   ],
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (HaveSameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutAnnoyingSiblings(x) -> HaveSameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (HaveSameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutAnnoyingSiblings(x) -> HaveSameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> OftenDidNotLiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHome(x) -> -StrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHome(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds"
   ]
  ]
 },
 {
  "index": 95,
  "responses": [
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((TwinsOrTriplets(x) | Triplets(x)) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (HaveSameAgeSiblings(x) -> (TwinsOrTriplets(x) | Triplets(x)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> HaveSameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> OftenDidNotLiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((TwinsOrTriplets(x) | Triplets(x)) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet"
   ],
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((TwinsOrTriplets(x) | Triplets(x)) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((TwinsOrTriplets(x) | Triplets(x)) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (HaveSameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> HaveSameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members,",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin"
   ],
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((Twins(x) | Triplets(x)) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (HaveSameAgeSiblings(x) -> (Twins(x) | Triplets(x)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> HaveSameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> OftenDidNotLiveAtHome(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (HaveSameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> HaveSameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin"
   ],
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> OftenDidNotLiveAtHome(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a"
   ],
   [
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> OftenDidNotLiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinsOrTriplets(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> TwinsOrTriplets(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> OftenDidNotLiveAtHome(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin",
    "<EVALUATE>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((Twins(x) | Triplets(x)) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (Twins(x) | Triplets(x)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members,",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. (TwinOrTriplet(x) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (HaveSameAgeSiblings(x) -> TwinOrTriplet(x))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> HaveSameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x. ((Twins(x) | Triplets(x)) -> SpendTimeWithSiblings(x))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x. (SameAgeSiblings(x) -> (Twins(x) | Triplets(x)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutSiblings(x) -> SameAgeSiblings(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBondsWithFamily(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his family members,"
   ]
  ]
 },
 {
  "index": 96,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 97,
  "responses": [
   [
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNMorTX(picurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTX(x) -> -Donated(MineIn(x)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTX(x) & Visited(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNewMexico(picurisMountains) & -MountainRangeInTexas(picurisMountains)) | (MountainRangeInTexas(picurisMountains) & -MountainRangeInNewMexico(picurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine, picurisMountains)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -exists x. (MountainRangeInTexas(x) & Mine(x) & Donated(x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & Visited(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNMorTX(picurisMountains) & -MountainRangeInNM(picurisMountains)) | (-MountainRangeInTX(picurisMountains) & MountainRangeInTX(picurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: VisitedOnate(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine, picurisMountains)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -exists x. (MountainRangeInTX(x) & HasMine(x, y) & Donated(y, x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (VisitedOnate(juanDeOnate, x) & MountainRangeInTX(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: MountainRangeInNMorTX(picurisMountains)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine, picurisMountains)\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTX(x) -> -Donated(MineIn(x), x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTX(x) & Visited(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNewMexico(picurisMountains) | MountainRangeInTexas(picurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTexas(x) -> -Donated(MineIn(x)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & Visited(juanDeOnate, x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: MountainRangeInNMorTX(picurisMountains)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -exists x. (MountainRangeInTX(x) & HasMine(x) & Donated(x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTX(x) & Visited(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNewMexico(picurisMountains) & -MountainRangeInTexas(picurisMountains)) | (MountainRangeInTexas(picurisMountains) & -MountainRangeInNewMexico(picurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: -exists x. (MountainRangeInTexas(x) & HasMine(x) & Donated(HasMine(x)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & Visited(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNewMexico(picurisMountains) | MountainRangeInTexas(picurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTexas(x) -> -HasDonatedMine(x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & Visited(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: MountainRangeInNewMexicoOrTexas(picurisMountains)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -exists x. (MountainRangeInTexas(x) & HasDonatedMine(x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & Visited(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: MountainRangeInNMorTX(picurisMountains)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine, picurisMountains)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTX(x) -> exists y. (Mine(y) & LocatedIn(x, y) & -Donated(y)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTX(x) & Visited(juanDeOnate, x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNMOrTX(picurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine, picurisMountains)\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTX(x) -> exists y. (MineIn(x, y) & -Donated(y)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTX(x) & Visited(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: MountainRangeInNewMexicoOrTexas(picurisMountains)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: VisitedOnate(picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTexas(x) -> -Donated(HasMine(x)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & VisitedOnate(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNMorTX(picurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -exists x. (MountainRangeInTX(x) & HasMine(x, hardingPegmatiteMine) & Donated(hardingPegmatiteMine))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTX(x) & Visited(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: MountainRangeInNMorTX(picurisMountains)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTX(x) -> -Donated(x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTX(x) & Visited(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: MountainRangeInNewMexicoOrTexas(picurisMountains)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine, picurisMountains)\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTexas(x) -> -Donated(x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & Visited(juanDeOnate, x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: MountainRangeInNewMexicoOrTexas(picurisMountains)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: -exists x. (MountainRangeInTexas(x) & HasDonatedMine(x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: Visited(juanDeOnate, x) & MountainRangeInTexas(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNewMexico(PicurisMountains) | MountainRangeInTexas(PicurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(PicurisMountains, JuanDeOnate)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(HardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -exists x. (MountainRangeInTexas(x) & HasMine(x) & Donated(x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & Visited(x, JuanDeOnate))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: MountainRangeInNMorTX(picurisMountains)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine, picurisMountains)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTX(x) -> -Donated(Mine(x)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTX(x) & Visited(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: MountainRangeInNewMexicoOrTexas(picurisMountains)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: VisitedOnate(picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTexas(x) -> -Donated(Mine(x)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & VisitedOnate(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: MountainRangeInNMorTX(picurisMountains)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine, picurisMountains)\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTX(x) -> exists y. (Mine(x, y) & -Donated(y)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTX(x) & Visited(juanDeOnate, x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNewMexico(PicurisMountains) | MountainRangeInTexas(PicurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(PicurisMountains, JuanDeOnate)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(HardingPegmatiteMine, PicurisMountains)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -exists x. (MountainRangeInTexas(x) & HasMine(x) & Donated(Mine(x)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & Visited(x, JuanDeOnate))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNewMexico(picurisMountains) | MountainRangeInTexas(picurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: VisitedOnate(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTexas(x) -> -Donated(x))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & VisitedOnate(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: MountainRangeInNewMexicoOrTexas(picurisMountains)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine, picurisMountains)\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTexas(x) -> exists y. (MineIn(x, y) & -Donated(y)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & Visited(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (MountainRangeInNewMexico(picurisMountains) & -MountainRangeInTexas(picurisMountains)) | (MountainRangeInTexas(picurisMountains) & -MountainRangeInNewMexico(picurisMountains))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine, picurisMountains)\nTEXT: There are no mountain ranges in Texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTexas(x) -> exists y. (Mine(y) & LocatedIn(x, y) & -Donated(y)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTexas(x) & Visited(juanDeOnate, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: MountainRangeInNMorTX(picurisMountains)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(juanDeOnate, picurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: all x. (MountainRangeInTX(x) -> -Donated(MineIn(x)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: exists x. (MountainRangeInTX(x) & Visited(juanDeOnate, x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 98,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Taller(michael, y) for all y in Michael'sClass\nFOL: Taller(michael, x) -> x in Michael'sClass\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: CanBlock(michael, x) & -CanJump(x) for all x\nFOL: CanBlock(michael, x) -> -CanJump(x)\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT:",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> BlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Taller(x, michael) -> -Taller(michael, x)\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: BlockShooting(michael, x) & -JumpWhenShooting(x)\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (JumpWhenShooting(x) -> GreatShooter(x))\nTEXT",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) ->",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Sh",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (CanJump(x) -> Great"
   ],
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(x, y) & Classmate(x, y)) -> Taller(michael, y)\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL:",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all z. (Man(z) & Class(z) & Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, x) for all x in Michael's class\nFOL: all x. (ManInClassOfMichael(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -Jump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatSh",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) & Class(z) -> Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael,"
   ],
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Taller(x, michael) -> -Taller(michael, x) for all x in Michael's class\nFOL: all x. (InMichaelsClass(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlockShooting(michael, x) & -CanJumpWhenShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(m",
    "<PREMISES>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) & Class(z, michael) -> -Taller(z, michael))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Can",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (TallerThan(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & TallerThan(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (TallerThan(x, y) & TallerThan(y, z) -> TallerThan(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: TallerThan(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) &",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(x, y) & Class(y, michaelClass) -> Taller(michael, y))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlockShooting(michael, x) & -CanJumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT:",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -JumpWhenShooting(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenSh"
   ],
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) & InMichaelClass(z) -> Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(x, y) & ClassMember(y, michaelClass) -> Taller(x, michael))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (TallerThan(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & TallerThan(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((TallerThan(x, y) & TallerThan(y, z)) -> TallerThan(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: TallerThan(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Class(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -Jump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL:",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Class(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -JumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x"
   ],
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) & Class(z) -> Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlockShooting(michael, x) & -CanJumpWhenShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (CanJumpWhenShooting",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) & Class(z) -> Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: CanBlockShooting(michael, x) & -JumpWhenShooting(x) \nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Taller(michael, x) for all x in Michael's class\nFOL: all x. (InMichaelClass(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -JumpWhenShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) & Class(z) -> -Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nF"
   ]
  ]
 },
 {
  "index": 99,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (TallerThan(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: TallerThan(michael, x) for all x in his class\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (TallerThan(x, y) & TallerThan(y, z) -> TallerThan(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: TallerThan(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Can",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> BlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (-JumpWhenShooting(x) -> BlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (JumpWhenShooting(x) -> GreatShooter(x))\nTEXT:",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, y) for all y in his class\n  (Note: The \"for all y in his class\" part is not directly expressible in FOL, but we can use a predicate to represent the class, e.g. Class(x) to represent \"x is in Michael's class\". Then the FOL expression would be: Man(michael) & Taller(michael, y) & Class(y))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -JumpWhenShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (GreatShooter(x) -> JumpWhenShooting(x))\n</PREMISES",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -JumpWhenShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenShooting(x) ->"
   ],
   [
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> BlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (-JumpWhenShooting(x) -> BlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (JumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Wind",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlockShooting(michael, x) & -CanJumpWhenShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (CanJumpWhenShooting(x) -> Great",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (TallerThan(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & TallerThan(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (TallerThan(x, y) & TallerThan(y, z) -> TallerThan(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: TallerThan(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x)",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) & Class(z) -> Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: CanBlock(michael, x) | -CanJump(x)\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can"
   ],
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Sh",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> BlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> BlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (TallerThan(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & TallerThan(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (TallerThan(x, y) & TallerThan(y, z) -> TallerThan(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: TallerThan(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x)",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all y. (Man(y) & InSameClass(michael, y) -> Taller(michael, y))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL:",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -JumpWhenShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenShooting(x) -> GreatShooter(x"
   ],
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, x) for all x in his class\nFOL: all x. (ManInClass(x) & Man(michael) & Taller(michael, x) -> Taller(michael, x))\nFOL: all x. (ManInClass(x) -> Taller(michael, x))\nFOL: Taller(michael, x) for all x in his class\nFOL: Taller(michael, y) for all y\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> Taller(x, y))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Man(x) & Man(y) & Man(z) & Taller",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> BlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> BlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> Block(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) & Class(z) & -Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -JumpWhenShooting(x) -> Block(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Block(michael",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, x) (for all x in his class)\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT:",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (TallerThan(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (TallerThan(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((TallerThan(x, y) & TallerThan(y, z)) -> TallerThan(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: TallerThan(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlockShooting(michael, x) & -JumpWhenShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x)"
   ],
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Taller(michael, x) for all x in his class\nFOL: Taller(michael, everyone)\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -JumpWhenShooting(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenSh",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, x) (for all x in his class)\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -Jump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nF",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> BlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (BlockShooting(michael, x) & -JumpWhenShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenShooting(x",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Taller(michael, x) for all x in his class\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -CanJump(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (CanJump(x) -> Great"
   ]
  ]
 },
 {
  "index": 100,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Can",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Taller(michael, everyoneElseInHisClass)\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (CanJump(x) -> GreatShooter(x))\n</",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (TallerThan(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & TallerThan(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((TallerThan(x, y) & TallerThan(y, z)) -> TallerThan(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & TallerThan(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -JumpWhenShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Great",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Taller(michael, x) for all x in his class\nFOL: Taller(michael, y) for all y in his class\nFOL: Taller(michael, z) for all z in his class\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (-CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -CanJump(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (CanJump(x) -> GreatShooter(x))\nTEXT: Peter can"
   ],
   [
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) -> Great",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & CanJump(x) ->",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -JumpWhenShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (GreatShooter(x) -> JumpWhenShooting(x))\n",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -CanJump(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (CanJump(x) -> GreatShooter(x))\nTEXT: Peter can block Windy's",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> BlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (BlockShooting(michael, x) & -JumpWhenShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (GreatShooter(x) & JumpWhenSh"
   ],
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -JumpWhenShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (JumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Peter can",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (-JumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhen",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all z. (Man(z) & Class(z) -> Taller(michael, z))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael,",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (-CanJumpShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (CanJumpShooting(x) -> GreatShooter(x",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlockShooting(michael, x) & -CanJumpWhenShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) &"
   ],
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> BlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (BlockShooting(michael, x) & -JumpWhenShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (GreatShooter(x) & JumpWhenSh",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -JumpWhenShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (GreatShooter(x) -> JumpWhenShooting(x))\n",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -JumpWhenShooting(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (GreatShooter(x) -> JumpWhen",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -Jump(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & Jump(x) -> GreatShooter(x))\n</PRE",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, x)  (where x represents every other man in the class)\nFOL: Taller(michael, x) -> all y. (Man(y) -> Taller(michael, y))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x)"
   ],
   [
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Taller(michael, x) (forall x. Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlockShooting(michael, x) & -CanJumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, y) for all y in his class\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJump(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\n",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Taller(michael, everyoneElseInHisClass)\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (-CanJumpWhenShooting(x) -> CanBlock(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (CanJumpWhenShooting(x) -> GreatShooter(x))\nTEXT: Peter",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, x) (for all x in his class)\nFOL: Man(michael) & all y. (Man(y) & Classmate(y, michael) -> Taller(michael, y))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -JumpWhenShooting(x) -> CanBlockShooting(michael,",
    "<EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Taller(x, y) -> CanBlock(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: all x. (Man(x) & Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. ((Taller(x, y) & Taller(y, z)) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlock(michael, x) & -JumpWhenShooting(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Shooter(x) & JumpWhenShooting(x) ->"
   ]
  ]
 },
 {
  "index": 101,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: On(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (IslandInAntarctica(x) -> NamedAfter(x, barutin))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & PartOf(x, antarctica) -> NamedAfter(x, barutin))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & PartOf(x, antarctica) -> NamedAfter(x, barutin))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (IslandInAntarctica(x) -> NamedAfter(x, barutin))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & PartOf(x, antarctica) -> NamedAfter(x, barutin))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: (LocatedIn(southShetlandIslands, snowIsland) & LocatedIn(southShetlandIslands, greenwichIsland) & LocatedIn(southShetlandIslands, deceptionIsland))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: LocatedIn(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: (LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z)\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (LocatedIn(x, antarctica) -> NamedAfter(barutin, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: On(snowIsland, barutinCove)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(antarctica, southShetlandIslands)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & PartOf(x, antarctica) -> NamedAfter(x, barutin))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (IslandIn(x, antarctica) -> NamedAfter(x, barutin))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: (SnowIsland & GreenwichIsland & DeceptionIsland) subset SouthShetlandIslands\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(antarctica, southShetlandIslands)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & PartOf(antarctica, x) -> NamedAfter(x, barutin))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: (LocatedIn(snowIsland, southShetlandIslands) & LocatedIn(greenwichIsland, southShetlandIslands) & LocatedIn(deceptionIsland, southShetlandIslands))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & PartOf(x, antarctica) -> NamedAfter(x, barutin))\n</EVALU"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (IslandInAntarctica(x) -> NamedAfter(barutin, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: (LocatedIn(snowIsland, southShetlandIslands) & LocatedIn(greenwichIsland, southShetlandIslands) & LocatedIn(deceptionIsland, southShetlandIslands))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: LocatedIn(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (LocatedIn(x, antarctica) -> NamedAfter(x, barutin))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: On(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & In(x, antarctica) -> NamedAfter(x, barutin))\n</EVALUATE",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & PartOf(x, antarctica) -> NamedAfter(x, barutin))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & PartOf(x, antarctica) -> NamedAfter(x, barutin))\n</EVAL"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: (LocatedIn(snowIsland, southShetlandIslands) & LocatedIn(greenwichIsland, southShetlandIslands) & LocatedIn(deceptionIsland, southShetlandIslands))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (LocatedIn(x, antarctica) -> NamedAfter(x, barutin))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & PartOf(x, antarctica) -> NamedAfter(x, barutin))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & PartOf(x, antarctica) -> NamedAfter(x, barutin))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(BarutinCove, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(BarutinCove, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(SouthShetlandIslands, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (IslandIn(x, Antarctica) -> NamedAfter(x, Barutin))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & PartOf(x, antarctica) -> NamedAfter(x, barutin))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (IslandInAntarctica(x) -> NamedAfter(x, barutin))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: On(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (On(x, y) & On(y, z) -> On(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (IslandInAntarctica(x) -> NamedAfter(x, barutin))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(Barutin) & NamedAfter(BarutinCove, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(BarutinCove, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: (LocatedIn(SnowIsland, SouthShetlandIslands) & LocatedIn(GreenwichIsland, SouthShetlandIslands) & LocatedIn(DeceptionIsland, SouthShetlandIslands))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: LocatedIn(SouthShetlandIslands, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & LocatedIn(x, Antarctica) -> NamedAfter(",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: On(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (Island(x) & PartOf(x, antarctica) -> NamedAfter(x, barutin))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCoveIsNamedAfter(barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: OnSouthwestCoastOfSnowIsland(barutinCove)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslandsInclude(snowIsland, greenwichIsland, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOfAntarctica(southShetlandIslands)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is named after all islands in Antarctica.\nFOL: all x. (IslandInAntarctica(x) -> BarutinIsNamedAfter(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 102,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: On(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, barutin))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: On(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, y) & LocatedIn(y",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: On(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, placeInBulgaria))\n",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, y) & LocatedIn(y, bulgaria",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: LocatedIn(snowIsland, southShetlandIslands) & LocatedIn(greenwichIsland, southShetlandIslands) & LocatedIn(deceptionIsland, southShetlandIslands)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, barutin))\n</EVALU"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, y) & LocatedIn(y, bulgaria",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: LocatedIn(BarutinCove, Barutin) & LocatedIn(Barutin, Bulgaria)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(BarutinCove, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: LocatedIn(SnowIsland, SouthShetlandIslands) & LocatedIn(GreenwichIsland, SouthShetlandIslands) & LocatedIn(DeceptionIsland, SouthShetlandIslands)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: LocatedIn(SouthShetlandIslands, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, Antarctica) & LocatedIn(x",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: On(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, y) & LocatedIn(y",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: LocatedIn(BulgarianSettlement(barutin), BarutinCove)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(SnowIsland, BarutinCove)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: LocatedIn(SouthShetlandIslands, SnowIsland) & LocatedIn(SouthShetlandIslands, GreenwichIsland) & LocatedIn(SouthShetlandIslands, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: LocatedIn(Antarctica, SouthShetlandIslands)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(PlaceInBulgaria(x), x) & Located",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, placeInBulgaria"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, placeInBulgaria))\n</EVALU",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: LocatedIn(BarutinCove, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(BarutinCove, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: LocatedIn(SnowIsland, SouthShetlandIslands) & LocatedIn(GreenwichIsland, SouthShetlandIslands) & LocatedIn(DeceptionIsland, SouthShetlandIslands)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: LocatedIn(SouthShetlandIslands, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, Antarctica) & LocatedIn(x, Bulgaria) & -LocatedIn(x,",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: LocatedIn(snowIsland, southShetlandIslands) & LocatedIn(greenwichIsland, southShetlandIslands) & LocatedIn(deceptionIsland, southShetlandIslands)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: LocatedIn(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, y) & LocatedIn(y,",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, placeInBulgaria",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, placeInBulgaria"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: LocatedIn(BarutinCove, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(BarutinCove, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: LocatedIn(SnowIsland, SouthShetlandIslands) & LocatedIn(GreenwichIsland, SouthShetlandIslands) & LocatedIn(DeceptionIsland, SouthShetlandIslands)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: LocatedIn(SouthShetlandIslands, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, Antarctica) & LocatedIn(x, Bulgaria) & NamedAfter(x, Place",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, placeInBulgaria",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: LocatedIn(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, y) & LocatedIn(y, bulgaria",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: IncludedIn(southShetlandIslands, snowIsland) & IncludedIn(southShetlandIslands, greenwichIsland) & IncludedIn(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, y)",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(BarutinCove, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(BarutinCove, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIslands(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIslands(x) -> PartOfAntarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, Antarctica) & NamedAfter(x, PlaceInBulgaria))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, y) & LocatedIn(y, bulgaria",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: (LocatedIn(snowIsland, southShetlandIslands) & LocatedIn(greenwichIsland, southShetlandIslands) & LocatedIn(deceptionIsland, southShetlandIslands))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, y) & LocatedIn(y",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, y) & LocatedIn(y, bulgaria",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: IncludedIn(snowIsland, southShetlandIslands) & IncludedIn(greenwichIsland, southShetlandIslands) & IncludedIn(deceptionIsland, southShetlandIslands)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, y) & LocatedIn(y,",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: (LocatedIn(snowIsland, southShetlandIslands) & LocatedIn(greenwichIsland, southShetlandIslands) & LocatedIn(deceptionIsland, southShetlandIslands))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: LocatedIn(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, antarctica) & NamedAfter(x, y) & LocatedIn(y"
   ]
  ]
 },
 {
  "index": 103,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(barutinCove) & NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, snowIsland) & SouthwestCoast(snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Include(southShetlandIslands, snowIsland) & Include(southShetlandIslands, greenwichIsland) & Include(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(barutinCove) & NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIsland(x) -> PartOfAntarctica(x))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: On(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(SnowIsland, BarutinCove)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(DeceptionIsland, Antarctica) | PartOf(GreenwichIsland, Antarctica) | PartOf(SnowIsland, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: LocatedIn(southShetlandIslands, snowIsland) & LocatedIn(southShetlandIslands, greenwichIsland) & LocatedIn(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: LocatedIn(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(SnowIsland, BarutinCove)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: LocatedIn(SouthShetlandIslands, SnowIsland) & LocatedIn(SouthShetlandIslands, GreenwichIsland) & LocatedIn(SouthShetlandIslands, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: LocatedIn(Continent, SouthShetlandIslands)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Continent)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(barutinCove) & NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: OnCoast(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCoveNamedAfter(barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCoveOnSouthwestCoastOfSnowIsland(barutinCove)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslandsInclude(snowIsland, greenwichIsland, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOfAntarctica(southShetlandIslands)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(barutinCove) & NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: OnCoast(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Include(southShetlandIslands, snowIsland) & Include(southShetlandIslands, greenwichIsland) & Include(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCoveNamedAfter(barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCoveLocatedOn(snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIncludes(snowIsland) & SouthShetlandIncludes(greenwichIsland) & SouthShetlandIncludes(deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandLocatedIn(antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(barutinCove) & NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: OnCoast(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: all x. (SouthShetlandIsland(x) -> (snowIsland(x) | greenwichIsland(x) | deceptionIsland(x)))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: all x. (SouthShetlandIsland(x) -> PartOf(x, antarctica))\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. ((LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedIn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: On(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(barutinCove) & NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: OnSouthwestCoastOf(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: (Include(snowIsland, southShetlandIslands) & Include(greenwichIsland, southShetlandIslands) & Include(deceptionIsland, southShetlandIslands))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: ConsideredPartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: OnSouthwestCoastOfSnowIsland(BarutinCove)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(SouthShetlandIslands, SnowIsland) & Includes(SouthShetlandIslands, GreenwichIsland) & Includes(SouthShetlandIslands, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(SouthShetlandIslands, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Antarctica)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(barutinCove) & NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: OnTheCoast(barutinCove, southwestCoastOfSnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: On(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Include(southShetlandIslands, snowIsland) & Include(southShetlandIslands, greenwichIsland) & Include(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(barutinCove) & NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOn(barutinCove, southwestCoastOf(snowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Includes(southShetlandIslands, snowIsland) & Includes(southShetlandIslands, greenwichIsland) & Includes(southShetlandIslands, deceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(barutinCove) & NamedAfter(barutinCove, barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: OnTheCoastOf(barutinCove, snowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: (Include(snowIsland, southShetlandIslands) & Include(greenwichIsland, southShetlandIslands) & Include(deceptionIsland, southShetlandIslands))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(southShetlandIslands, antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, antarctica)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 104,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 105,
  "responses": [
   [
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(greyhound)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(greyhound)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<PREMISES>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</PREMISES>\n<CONCLUSION>\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</CONCLUSION>\n<EVALUATE>\nTEXT: If Greyhound is an airline, then there are no Greyhound planes.\nFOL: Airline(greyhound) -> -Plane(greyhound)\nTEXT: There are no Greyhound planes.\nFOL: -Plane(greyhound)\n</EVALU"
   ],
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(greyhound)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<PREMISES>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\n</PREMISES>\n<CONCLUSION>\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(greyhound)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x",
    "<PREMISES>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\n</PREMISES>\n<CONCLUSION>\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(greyhound)\n</EVALUATE>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(greyhound)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x"
   ]
  ]
 },
 {
  "index": 106,
  "responses": [
   [
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x.",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x.",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<PREMISES>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\n</PREMISES>\n<CONCLUSION>\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL"
   ],
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x.",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x.",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 107,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL:",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL:",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL:",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\nTEXT: A Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</EVALUATE>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Plane(greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL:"
   ]
  ]
 },
 {
  "index": 108,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(animal) & -Bird(animal)) | (-Monkey(animal) & Bird(animal)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(animal) & -Bird(animal)) | (-Monkey(animal) & Bird(animal)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> -Fly(rock) & -Breathe(rock)\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>",
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nAll monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nAn animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nAll birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nAll animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nIf something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\n</PREMISES>\n<CONCLUSION>\nRock is a monkey.\nFOL: Monkey(rock)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(animal) & -Bird(animal)) | (-Monkey(animal) & Bird(animal)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(animal) & -Bird(animal)) | (-Monkey(animal) & Bird(animal)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(Rock)\n</EVALUATE>",
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nAll monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nAn animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nAll birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nAll animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nIf something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\n</PREMISES>\n<CONCLUSION>\nRock is a monkey.\nFOL: Monkey(rock)\n</CONCLUSION>",
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nAll monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nAn animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nAll birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nAll animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nIf something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\n</PREMISES>\n<CONCLUSION>\nRock is a monkey.\nFOL: Monkey(Rock)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(animal) & -Bird(animal)) | (-Monkey(animal) & Bird(animal)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(animal) & -Bird(animal)) | (-Monkey(animal) & Bird(animal)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -(Fly(rock) | Bird(rock)) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(animal) & -Bird(animal)) | (-Monkey(animal) & Bird(animal)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(Rock)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nAll monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nAn animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nAll birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nAll animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nIf something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\n</PREMISES>\n<CONCLUSION>\nRock is a monkey.\nFOL: Monkey(rock)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(animal) & -Bird(animal)) | (-Monkey(animal) & Bird(animal)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Monkey(rock) & -Bird(rock)) | (-Monkey(rock) & Bird(rock))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> -Breathe(rock)\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(animal) & -Bird(animal)) | (-Monkey(animal) & Bird(animal)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: (-Fly(Rock) & -Bird(Rock) -> -Fly(Rock) & -Breathe(Rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(Rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Monkey(rock) & -Bird(rock)) | (-Monkey(rock) & Bird(rock))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(rock)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 109,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(animal) & -Bird(animal)) | (-Monkey(animal) & Bird(animal)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Monkey(rock) & -Bird(rock)) | (-Monkey(rock) & Bird(rock))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Monkey(animal) & -Bird(animal)) | (-Monkey(animal) & Bird(animal))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: Fly(x) -> HasWings(x)\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: Wings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Monkey(rock) & -Bird(rock)) | (-Monkey(rock) & Bird(rock))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Monkey(rock) & -Bird(rock)) | (-Monkey(rock) & Bird(rock))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Monkey(rock) & -Bird(rock)) | (-Monkey(rock) & Bird(rock))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: Fly(x) -> Wings(x)\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: Wings(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: Wings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock has wings.\nFOL: HasWings(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(animal) & -Bird(animal)) | (-Monkey(animal) & Bird(animal)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: Wings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: (-Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock)))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(animal) & -Bird(animal)) | (-Monkey(animal) & Bird(animal)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> -Fly(Rock) & -Breathe(Rock)\nTEXT: Rock has wings.\nFOL: HasWings(Rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> -Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: Wings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock has wings.\nFOL: HasWings(rock)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 110,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: (Animal(monkey) & -Bird(monkey)) | (-Animal(monkey) & Bird(monkey))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -Wings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(animal) & -Bird(animal)) | (-Monkey(animal) & Bird(animal)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -Wings(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -Wings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock does not have wings.\nFOL: -Wings(Rock)\n</EVALUATE>",
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nAll monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nAn animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nAll birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nAll animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nIf something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\n</PREMISES>\n<CONCLUSION>\nRock does not have wings.\nFOL: -HasWings(rock)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -(Fly(rock) | Bird(rock)) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -HasWings(rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: (-Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock)))\nTEXT: Rock does not have wings.\nFOL: -HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -Wings(rock)\n</EVALUATE>",
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nAll monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nAn animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nAll birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nAll animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nIf something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: (-Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock)))\n</PREMISES>\n<CONCLUSION>\nRock does not have wings.\nFOL: -Wings(rock)\n</CONCLUSION>",
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nAll monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nAn animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nAll birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nAll animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nIf something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> -Fly(rock) & -Breathe(rock)\n</PREMISES>\n<CONCLUSION>\nRock does not have wings.\nFOL: -HasWings(rock)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -Wings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -HasWings(rock)\n</EVALUATE>",
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nAll monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nAn animal is either a monkey or a bird.\nFOL: (Monkey(rock) & -Bird(rock)) | (-Monkey(rock) & Bird(rock))\nAll birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nAll animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nIf something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -(Fly(rock) | Bird(rock)) -> (-Fly(rock) & -Breathe(rock))\n</PREMISES>\n<CONCLUSION>\nRock does not have wings.\nFOL: -Wings(rock)\n</CONCLUSION>",
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nAll monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nAn animal is either a monkey or a bird.\nFOL: (Monkey(rock) & -Bird(rock)) | (-Monkey(rock) & Bird(rock))\nAll birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nAll animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nIf something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\n</PREMISES>\n<CONCLUSION>\nRock does not have wings.\nFOL: -HasWings(rock)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -(Fly(rock) | Bird(rock)) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -Wings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(x) & -Bird(x)) | (-Monkey(x) & Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> (-Fly(rock) & -Breathe(rock))\nTEXT: Rock does not have wings.\nFOL: -HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> -Fly(rock) & -Breathe(rock)\nTEXT: Rock does not have wings.\nFOL: -HasWings(rock)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: ((Monkey(animal) & -Bird(animal)) | (-Monkey(animal) & Bird(animal)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(rock) & -Bird(rock) -> -Breathe(rock)\nTEXT: Rock does not have wings.\nFOL: -Wings(rock)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 111,
  "responses": [
   [
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: HaveWedding(john) & WellAttended(john)",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: HaveWedding(john) & WellAttended(john) -> ((Wedding",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: Wedding(john) & WellAttended(john) -> ((July",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (HaveWedding(john)"
   ],
   [
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (HaveWedding(john) & WellAttended(john",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (WellAttended(john) & -JulyWedding(john)) -> TravelToParisForHoneymoon(john)\n",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: HaveWedding(john) & WellAttended(john) -> ((WeddingIn",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (July(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (HaveWedding(john) & WellAttended(john)) -> ((July(john) & -Travel"
   ],
   [
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: (HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john)))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (HaveWedding(john) & WellAttended(john) -> (",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (HaveWedding(john) & WellAttended(john)) -> ((Wedding",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (HaveWedding(john)",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (HaveWedding(john) & WellAttended(john)) -> ((Wed"
   ],
   [
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (HaveWedding(john) & WellAttended(john",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: HaveWedding(john) & Well",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (WellAttended(john) & -JulyWedding(john)) -> TravelToParis",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((Wedding",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john"
   ],
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (WellAttended(john) & JulyWedding(john)) | (-WellAtt",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (WellAttended(john) & -WeddingInJuly",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (HaveWedding(john)",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (WellAttended(john) & Wedding(john)) -> ((WeddingInJuly(john) | -Wed",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john)"
   ]
  ]
 },
 {
  "index": 112,
  "responses": [
   [
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: (HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john)))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (HaveWedding(john) & WellAttended(john) -> (",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: HaveWedding(john) & WellAttended(john",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john) | -JulyWed",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john))",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (HaveWedding(john)"
   ],
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: HaveWedding(john)",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(j",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (HaveWedding(john",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (HaveWedding(john)"
   ],
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (HaveWedding(john) & WellAttended(john",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (WellAttended(john) & -WeddingInJuly",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (WellAttended(john) & HaveWedding(john)) -> ((Wed",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: WellAttended(john) -> ((JulyWedding(john) | -JulyWed"
   ],
   [
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: Wedding(john) & WellAttended(john) -> (WeddingInJuly",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (HaveWedding(john)",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (HaveWedding(john) & WellAttended(john)) -> ((Wed",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (WellAttended(john) & -WeddingInJuly(john)) |",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: HaveWedding(john) &"
   ],
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((Wedding",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (HaveWedding(john) & WellAttended(j",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: HaveWedding(john)",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: HaveWedding(john)"
   ]
  ]
 },
 {
  "index": 113,
  "responses": [
   [
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(j",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (HaveWedding(john) & WellAttended(j",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (HaveWedding(john) & WellAttended(john))",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john) | -",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(j"
   ],
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (HaveWedding(john)",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (HaveWedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) &",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((WeddingInJuly(john) | -WeddingInJuly",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (HaveWedding(john) & WellAttended(john)) -> ((JulyWedding(j",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: HaveWedding(john)"
   ],
   [
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (July(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (HaveWedding(john) & WellAttended(john)) -> ((July(john) & -TravelTo",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (HaveWedding(john) & WellAttended(john)) -> ((Wed",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: Wedding(john) & WellAttended(john) ->",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john) | -Well",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(j"
   ],
   [
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (HaveWedding(john) & WellAttended(john)) -> ((Wedding",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (HaveWedding(john) & WellAttended(john)) -> ((Wed",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (HaveWedding(john) & WellAttended(john)) -> ((Wed",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john))"
   ],
   [
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (HaveWedding(john) & WellAttended(john)) -> ((JulyWedding(j",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (WellAttended(john) & -JulyWedding(john)) -> TravelToParisForHoneymoon(j",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: HaveWedding(john)",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: HaveWedding(john)",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john"
   ]
  ]
 },
 {
  "index": 114,
  "responses": [
   [
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (HaveWedding(john) & WellAttended(john)) -> ((Wed",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (WellAttended(john) & -",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (WellAttended(john) & -JulyWedding(john)) -> TravelToParisForHoneymoon(john",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) ->",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (July(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((July(j"
   ],
   [
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (HaveWedding(john) &",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (Wedding(john) & WellAttended(john)) -> ((JulyWedding(john)) | (-July",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (HaveWedding(john)",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (July(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john)) -> ((July(john",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: Wedding(john) & WellAttended(john"
   ],
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (WellAttended(john) & -WeddingInJuly(john)) ->",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (HaveWedding(john) & WellAttended(john",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (WellAttended(john) & -WeddingInJuly",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (WellAttended(john) & -JulyWedding(john"
   ],
   [
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (HaveWedding(john) & WellAttended(john)) -> ((Wedding",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (HaveWedding(john) & WellAttended(john)) -> ((Wedding",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nFOL: (HaveWedding(john) & WellAttended(john)) -> ((Wedding",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (HaveWedding(john",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: WellAttended(john) -> ((WeddingInJuly(john) |"
   ],
   [
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (July(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (WellAttended(john) & -July(john)) -> TravelToParisForHoneymoon(j",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (HaveWedding(x) -> HaveAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> HaveWedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HaveAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HaveWedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (WellAttended(john) & -WeddingInJuly(john)) ->",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (JulyWedding(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (JulyWedding(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (Wedding(john) & WellAttended(john))",
    "<PREMISES>\nAll people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> HasAtLeastOneChild(x))\nAll people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nAll weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nSome weddings in July are well-attended.\nFOL: exists x. (WeddingInJuly(x) & WellAttended(x))\nIf John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nIf John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (WellAttended(john) & -WeddingInJuly(john)) -> TravelToParisFor",
    "<EVALUATE>\nTEXT: All people who have a wedding are people who have at least one child.\nFOL: all x. (Wedding(x) -> AtLeastOneChild(x))\nTEXT: All people who travel to Paris for their honeymoon are people who have a wedding.\nFOL: all x. (TravelToParisForHoneymoon(x) -> Wedding(x))\nTEXT: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\nFOL: all x. (July(x) -> TravelToParisForHoneymoon(x))\nTEXT: Some weddings in July are well-attended.\nFOL: exists x. (July(x) & WellAttended(x))\nTEXT: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nFOL: AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -Wedding(john))\nTEXT: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \nFOL: (WellAttended(john) & -July(john)) -> TravelToParisFor"
   ]
  ]
 },
 {
  "index": 115,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & HaveTeeth(platypus)\n</EVALUATE>\n\nNote: The expression for the conclusion is incorrect as it should be a contradiction to the premises. The correct expression should be: \n\nFOL: Mammal(platypus) & -HaveTeeth(platypus)",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & HaveTeeth(platypus)\n</EVALUATE>\n\nHowever, the conclusion should be modified to reflect the correct logical expression. Since the conclusion states \"Platypus are mammals with no teeth\", we need to combine the fact that platypus are mammals (Mammal(platypus)) with the fact that platypus have no teeth (-HaveTeeth(platypus)).\n\nThe correct logical expression for the conclusion should be:\nFOL: Mammal(platypus) & -HaveTeeth(platypus)",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: (Mammal(platypus) & HaveTeeth(platypus))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & HasTeeth(platypus)\n</EVALUATE>\n\nNote that the FOL expression for the conclusion is incorrect because it incorrectly states that platypus have teeth. However, the FOL expression for the conclusion should be the conjunction of \"Platypus are mammals\" and \"Platypus have no teeth\", which is:\n\nMammal(platypus) & -HasTeeth(platypus)",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & HaveTeeth(platypus)\n</EVALUATE>\n\nHowever, there's an issue with the conclusion. The FOL expression for the conclusion should be \"Mammal(platypus) & -HaveTeeth(platypus)\" to accurately represent the statement \"Platypus are mammals with no teeth.\""
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & -HaveTeeth(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: (Mammal(platypus) & HaveTeeth(platypus))\n</EVALUATE>\n\nNote: The FOL expression for the conclusion is not a correct translation of the conclusion. The correct translation would be:\n\nFOL: Mammal(platypus) & -HaveTeeth(platypus)\n\nThis is because the conclusion states that \"Platypus are mammals with no teeth\", which means that Platypus are mammals and Platypus have no teeth. The original FOL expression for the conclusion is incorrect because it states that Platypus have teeth, which contradicts the fact that Platypus have no teeth.",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: (Mammal(platypus) & HaveTeeth(platypus))\n</EVALUATE>\n\nHowever, the conclusion \"Platypus are mammals with no teeth\" seems to be incorrect based on the premises. The correct conclusion should be \"Platypus are mammals and have no teeth\" or simply \"Platypus are mammals with no teeth\" is not a logical conclusion based on the premises.",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: (Mammal(platypus) & HaveTeeth(platypus))\n</EVALUATE>\n\nHowever, this conclusion does not follow from the premises. The first premise states that some mammals have teeth, but it does not imply that all mammals have teeth. The second premise states that platypus have no teeth, which contradicts the conclusion. The third premise states that platypus are mammals, but it does not imply that platypus have no teeth. Therefore, the conclusion does not follow from the premises.",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & HaveTeeth(platypus)\n</EVALUATE>\n\nHowever, the FOL expression for the conclusion should be: Mammal(platypus) & -HaveTeeth(platypus)"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals. \nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: (Mammal(platypus) & HaveTeeth(platypus)) | (Mammal(platypus) & -HaveTeeth(platypus))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & HaveTeeth(platypus)\n</EVALUATE>\n\nNote that the conclusion does not logically follow from the premises. The first premise states that \"some mammals have teeth\", which means that not all mammals have teeth. The fact that platypus have no teeth does not contradict this premise, and the fact that platypus are mammals does not change this conclusion. Therefore, the conclusion \"platypus are mammals with no teeth\" is not logically entailed by the premises.",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: (Mammal(platypus) & HaveTeeth(platypus))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals. \nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & HaveTeeth(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals. \nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: (Mammal(platypus) & HaveTeeth(platypus)) | (Mammal(platypus) & -HaveTeeth(platypus))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: (Mammal(platypus) & -HaveTeeth(platypus))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & -HaveTeeth(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & -HaveTeeth(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & HaveTeeth(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & -HasTeeth(platypus)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & HaveTeeth(platypus)\n</EVALUATE>\n\nHowever, the conclusion \"Platypus are mammals with no teeth\" cannot be directly inferred from the premises. The premises state that some mammals have teeth, and platypus are mammals with no teeth, but it does not necessarily follow that platypus are mammals with no teeth. The conclusion is a direct contradiction to the premise that some mammals have teeth.\n\nThe correct conclusion would be that platypus are mammals without teeth, not with no teeth. This is because the premise states that some mammals have teeth, but it does not exclude the possibility that there are mammals without teeth.\n\n<EVALUATE>\nTEXT: Platypus are mammals without teeth.\n",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & HaveTeeth(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & -HaveTeeth(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: (Mammal(platypus) & HaveTeeth(platypus))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(platypus) & -HasTeeth(platypus)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 116,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals. \nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals. \nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals. \nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals. \nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals. \nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Platypus are reptiles.\nFOL: Reptile(platypus)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 117,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals. \nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals. \nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HaveTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HaveTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Mammal(platypus)\nTEXT: Humans have teeth.\nFOL: HaveTeeth(humans)\nTEXT: Humans are mammals.\nFOL: Mammal(humans)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 118,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(vacuum) & Space(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(vacuum) & Space(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: all x. (Duster(x) -> -Suck(x))\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(vacuum) & Space(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(vacuum) & Space(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(vacuum) & Space(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(vacuum) & Space(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(vacuum) & Space(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(vacuum) & Space(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space sucks.\nFOL: Suck(space)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 119,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(vacuum) & Space(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Space(vampire)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(space) & Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster) & HouseholdAppliance(duster)\nTEXT: Space is a vampire.\nFOL: Space(space) & Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(vacuum) & Space(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Space(vampire)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(vacuum) & Space(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster) & HouseholdAppliance(duster)\nTEXT: Space is a vampire.\nFOL: Space(vampire) & -Space(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(space) & Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Space(space) & Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(space) & Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Space(space) & Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(space) & Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster) & HouseholdAppliance(duster)\nTEXT: Space is a vampire.\nFOL: Space(space) & Vampire(space)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(vacuum) & Space(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Space(vampire)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(space) & Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Space(space) & Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(vacuum) & Space(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Space(vampire)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(space) & Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Space(space) & Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(vacuum) & Space(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Space(vampire)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(vacuum) & Space(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Space(vampire)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(space) & Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster) & HouseholdAppliance(duster)\nTEXT: Space is a vampire.\nFOL: Space(space) & Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(vacuum) & Space(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Space(vampire)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(space) & Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Space(space) & Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(space) & Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster) & HouseholdAppliance(duster)\nTEXT: Space is a vampire.\nFOL: Space(space) & Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(vacuum) & Space(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Space(vampire)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(space) & Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster)\nTEXT: Space is a vampire.\nFOL: Space(space) & Vampire(space)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Space(space) & Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster) & HouseholdAppliance(duster)\nTEXT: Space is a vampire.\nFOL: Space(space) & Vampire(space)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 120,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster) & HouseholdAppliance(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster) & HouseholdAppliance(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster) & HouseholdAppliance(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster) & HouseholdAppliance(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Sucks(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Sucks(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Sucks(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Sucks(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Sucks(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Suck(plunger)\nTEXT: Vacuums suck.\nFOL: Suck(vacuum)\nTEXT: Vampires suck.\nFOL: Suck(vampire)\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: -Suck(duster) & HouseholdAppliance(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: HouseholdAppliance(duster) & -Suck(duster)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: all x. (Plunger(x) -> Suck(x))\nTEXT: Vacuums suck.\nFOL: all x. (Vacuum(x) -> Suck(x))\nTEXT: Vampires suck.\nFOL: all x. (Vampire(x) -> Suck(x))\nTEXT: Space is a vacuum.\nFOL: Vacuum(space)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: (HouseholdAppliance(duster) & -Suck(duster))\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 121,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\n</PREMISES>\n<CONCLUSION>\nBen is loved by children.\nFOL: LovedByChildren(ben)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\n</PREMISES>\n<CONCLUSION>\nBen is loved by children.\nFOL: LovedByChildren(ben)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If a cartoon character is funny, then",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nIf a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nIf a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nIf a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nBen is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\n</PREMISES>\n<CONCLUSION>\nBen is loved by children.\nFOL: LovedByChildren(ben)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x.",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nIf a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nIf a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nIf a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nBen is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\n</PREMISES>\n<CONCLUSION>\nBen is loved by children.\nFOL: LovedByChildren(ben)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x)"
   ],
   [
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\n</PREMISES>\n<CONCLUSION>\nBen is loved by children.\nFOL: LovedByChildren(ben)\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\n</PREMISES>\n<CONCLUSION>\nBen is loved by children.\nFOL: LovedByChildren(ben)\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben))\n</PREMISES>\n<CONCLUSION>\nBen is loved by children.\nFOL: LovedByChildren(ben)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If a cartoon character is funny, then",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 122,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben))\n</PREMISES>\n<CONCLUSION>\nBen is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nIf a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nIf a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nIf a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nBen is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) | Funny(ben))\n</PREMISES>\n<CONCLUSION>\nBen is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) & -Yellow(ben)) | (-Ugly(ben) & Yellow(ben))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\n</PREMISES>\n<CONCLUSION>\nBen is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\n</PREMISES>\n<CONCLUSION>\nBen is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nIf a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nIf a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nIf a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nBen is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\n</PREMISES>\n<CONCLUSION>\nBen is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben))\n</PREMISES>\n<CONCLUSION>\nBen is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nIf a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nIf a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nIf a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nBen is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\n</PREMISES>\n<CONCLUSION>\nBen is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x.",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\n</PREMISES>\n<CONCLUSION>\nBen is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben))\n</PREMISES>\n<CONCLUSION>\nBen is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben))\n</PREMISES>\n<CONCLUSION>\nBen is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 123,
  "responses": [
   [
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nIf a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nIf a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nIf a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nBen is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\n</PREMISES>\n<CONCLUSION>\nBen is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</E",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</E",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\n</PREMISES>\n<CONCLUSION>\nBen is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</E",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</E",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</E",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nIf a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nIf a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nIf a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nIf a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nBen is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) | Funny(ben))\n</PREMISES>\n<CONCLUSION>\nBen is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</E"
   ],
   [
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</E",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromSimpsons(ben) & -Funny(ben)) | (-FromSimpsons(ben) & Funny(ben)))\n</PREMISES>\n<CONCLUSION>\nBen is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</E",
    "<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) & -Funny(ben)) | (-FromTheSimpsons(ben) & Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</E"
   ]
  ]
 },
 {
  "index": 124,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelection(BreedingBack) & all x. (DomesticAnimal(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(hekkCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(hekkCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, y) & Extinct(y))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelection(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedingBack(heckCattle)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & -Animal(x))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelection(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedingBack(heckCattle) & Resemble(heckCattle, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (AnimalToBeBredBack(x) & Resemble(x, y) & Extinct(y))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (BredBack(x, y) & Extinct(y))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelection(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreeding(BreedingBack)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, 1920s, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _, _) & Extinct(Resemble(x, _)))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreeding(BreedingBack)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _, _) & Extinct(_))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreedingOfDomesticAnimals(breedingBack)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ToBeBredBack(x) & Animal(x) & Resemble(x, ExtinctAnimal))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelection(HeckCattle) & SelectiveBreeding(HeckCattle)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, 1920s, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _, _) & Extinct(animal(x)))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreeding(DomesticAnimal)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(hekkCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(hekkCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (BredBack(x, y, _) & Extinct(y))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedingBack(heckCattle)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (BredBack(x) & Animal(x) & Extinct(y) & Resemble(x, y))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelection(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (BredBack(x, y) & Extinct(y))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelection(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedingBack(heckCattle)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Animal(x) & Extinct(Resemble(x)))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelection(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle) & Resemble(heckCattle, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resemble(x, Extinct))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelection(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedingBack(heckCattle) & Resemble(heckCattle, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resemble(x, ExtinctAnimal))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelection(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelection(HeckCattle)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(HeckCattle, 1920s, Aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(HeckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(Aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _, _) & Extinct(Resemblance(x)))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelection(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x) & DomesticAnimal(x)))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedingBack(heckCattle) & Resemble(heckCattle, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resemble(x, ExtinctAnimal))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelection(hekk cattle) | (ArtificialSelection(x) & DeliberateSelectiveBreeding(x) & DomesticAnimal(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(hekk cattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(hekk cattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (BredBack(x, y, z) & Extinct(y))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelection(x) -> (DomesticAnimal(x) & SelectiveBreeding(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (BredBack(x, y, _) & Extinct(y))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelection(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x) & DomesticAnimal(x)))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, 1920s, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ToBeBredBack(x) & Resemble(x, ExtinctAnimal))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelection(HeckCattle) & BreedingBack(HeckCattle)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, 1920s, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _, _) & Extinct(Resemble(x, _)))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x) & DomesticAnimal(x)))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedingBack(heckCattle)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Animal(x) & Resemble(x, ExtinctAnimal))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (BredBack(x, y, _) & Extinct(y))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelection(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (ToBeBredBack(x) & Animal(y) & Extinct(y) & Resemble(x, y))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreedingOfDomesticAnimals(breedingBack)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBackIn1920sToResembleAurochs(heckCattle)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ToBeBredBack(x) & ResembleExtinctAnimal(x))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificiallySelected(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedingBack(heckCattle)\nTEXT: [BG] Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resemble(x, ExtinctAnimal))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelection(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 125,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByBreedingBack\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (ToBeBredBack(x) & Animal(y) & Extinct(y) & Resemble(x, y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (BredBack(x, y) & Extinct(y) & Resemble(x, y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreedingOfDomesticAnimals(breedingBack)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ToBeBredBack(x) & Animal(x) & Resemble(x, ExtinctAnimal))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreedingOfDomesticAnimals(breedingBack)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBackIn1920sToResembleAurochs(heckCattle)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ToBeBredBack(x) & Resemble(x, ExtinctAnimal))\nTEXT: Aurochs are extinct.\nFOL: ExtinctAnimal(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByBreedingBack\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ToBeBredBack(x) & Resemble(x, ExtinctAnimal))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, 1920s, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (BredBack(x, _, y) & Extinct(y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByBreedingBack\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (BredBack(x, y) & -Animal(x) & Animal(y))\nTEXT: Aurochs are extinct.\nFOL: -Animal(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreedingOfDomesticAnimals(breedingBack)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ToBeBredBack(x) & Resemble(x, Extinct(x)))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreedingOfDomesticAnimals(breedingBack)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _, _) & Extinct(Resemble(x)))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (BredBack(x, y) & Extinct(y) & Resemble(x, y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByBreedingBack\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (ToBeBredBack(x) & Animal(y) & Extinct(y) & Resemble(x, y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreedingOfDomesticAnimals(breedingBack)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (BredBack(x, y, _) & Extinct(y) -> Resemble(x, y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreeding(DomesticAnimal)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ToBeBredBack(x) & Resemble(AnimalThatIsExtinct(x)))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedingBack(heckCattle) & Resemble(heckCattle, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (ToBeBredBack(x) & Resemble(x, Extinct))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreedingOfDomesticAnimals(breedingBack)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (BredBack(x, y, _) & Extinct(y) -> Resemble(x, y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> (ArtificialSelection(x) & DomesticAnimal(x)))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedingBack(heckCattle) & Resemble(heckCattle, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resemble(x, Extinct))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreedingDomesticAnimals(breedingBack)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (ToBeBredBack(x) & Animal(y) & -Animal(x) & Resemble(x, y))\nTEXT: Aurochs are extinct.\nFOL: -Animal(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByBreedingBack\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (BredBack(x, y, _) & Extinct(y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedingBack(heckCattle) & Resemble(heckCattle, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resemble(x, Extinct(x)))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreedingOfDomesticAnimals(breedingBack)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (BredBack(x, y, _) & Extinct(y) -> Resemble(x, y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByDomesticAnimals(breedingBack)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (BredBack(x, y, _) & Extinct(y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedingBack(heckCattle) & ArtificialSelection(heckCattle, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & -Animal(x))\nTEXT: Aurochs are extinct.\nFOL: -Animal(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedingBack(heckCattle) & Resemble(heckCattle, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (ToBeBredBack(x) & Resemble(x, y) & Extinct(y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: all x. (BreedingBack(x) -> ArtificialSelection(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedingBack(heckCattle) & Resemble(heckCattle, aurochs)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resemble(x, Extinct(x)))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreedingOfDomesticAnimals(breedingBack)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(heckCattle, aurochs, 1920s)\nTEXT: Heck cattle are animals.\nFOL: Animal(heckCattle)\nTEXT: Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x y. (ToBeBredBack(x) & Animal(y) & Extinct(y) & Resemble(x, y))\nTEXT: Aurochs are extinct.\nFOL: Extinct(aurochs)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 126,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studys(someone) & -Teaches(someone)) | (-Studys(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(someone) | Teaches(someone)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Human(x) -> (Studys(x) | Teaches(x)))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(jerry) & -Teaches(jerry)) | (-Studies(jerry) & Teaches(jerry))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 127,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(someone) | Teaches(someone)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(someone) | Teaches(someone)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(someone) | Teaches(someone)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(someone) | Teaches(someone)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is not young.\nFOL: -Young(jerry)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 128,
  "responses": [
   [
    "<PREMISES>\nAll students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\n</PREMISES>\n<CONCLUSION>\nRose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(x) | Teaches(x)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(someone) | Teaches(someone)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(jerry) & -Teaches(jerry)) | (-Studies(jerry) & Teaches(jerry))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studys(someone) & -Teaches(someone)) | (-Studys(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(someone) | Teaches(someone)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(someone) | Teaches(someone)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studys(someone) & -Teaches(someone)) | (-Studys(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: (Young(rose) & -Student(rose)) | (-Young(rose) & Student(rose))\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(someone) | Teaches(someone)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(someone) | Teaches(someone)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: (Young(rose) & -Student(rose)) | (-Young(rose) & Student(rose))\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studys(someone) & -Teaches(someone)) | (-Studys(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<PREMISES>\nAll students are humans. \nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\n</PREMISES>\n<CONCLUSION>\nRose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 129,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(someone) | Teaches(someone)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(jerry) & -Teaches(jerry)) | (-Studies(jerry) & Teaches(jerry))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: (Young(rose) & -Student(rose)) | (-Young(rose) & Student(rose))\nTEXT: Rose is a human or Jerry is a manager.\nFOL: (Human(rose) & -Manager(jerry)) | (-Human(rose) & Manager(jerry))\n</EVALUATE>",
    "<PREMISES>\nAll students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(someone) | Teaches(someone)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\n</PREMISES>\n<CONCLUSION>\nRose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(someone) | Teaches(someone)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<PREMISES>\nAll students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\n</PREMISES>\n<CONCLUSION>\nRose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studys(someone) & -Teaches(someone)) | (-Studys(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: (Young(rose) & -Student(rose)) | (-Young(rose) & Student(rose))\nTEXT: Rose is a human or Jerry is a manager.\nFOL: (Human(rose) & -Manager(rose)) | (-Human(rose) & Manager(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nAll students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studys(person) & -Teaches(person)) | (-Studys(person) & Teaches(person))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\n</PREMISES>\n<CONCLUSION>\nRose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</CONCLUSION>",
    "<PREMISES>\nAll students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\n</PREMISES>\n<CONCLUSION>\nRose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(someone) | Teaches(someone)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Rose is a human or Jerry is a manager.\nFOL: Human(rose) | Manager(jerry)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 130,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: - (Student(rose) & Human(jerry))\n</EVALUATE>",
    "<PREMISES>\nAll students are humans. \nFOL: all x. (Student(x) -> Human(x))\nIf someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nA person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nNo young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nJerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nRose is young or a student.\nFOL: Young(rose) | Student(rose)\n</PREMISES>\n<CONCLUSION>\nIt is not true that Rose is a student and Jerry is a human.\nFOL: - (Student(rose) & Human(jerry))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: - (Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -Student(rose) & -Human(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: - (Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: Studies(someone) | Teaches(someone)\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<PREMISES>\nAll students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\n</PREMISES>\n<CONCLUSION>\nIt is not true that Rose is a student and Jerry is a human.\nFOL: - (Student(rose) & Human(jerry))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -Student(rose) | -Human(jerry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<PREMISES>\nAll students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\n</PREMISES>\n<CONCLUSION>\nIt is not true that Rose is a student and Jerry is a human.\nFOL: - (Student(rose) & Human(jerry))\n</CONCLUSION>",
    "<PREMISES>\nAll students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\n</PREMISES>\n<CONCLUSION>\nIt is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</CONCLUSION>",
    "<PREMISES>\nAll students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\n</PREMISES>\n<CONCLUSION>\nIt is not true that Rose is a student and Jerry is a human.\nFOL: - (Student(rose) & Human(jerry))\n</CONCLUSION>",
    "<PREMISES>\nAll students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\n</PREMISES>\n<CONCLUSION>\nIt is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studys(someone) & -Teaches(someone)) | (-Studys(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(someone) & -Teaches(someone)) | (-Studies(someone) & Teaches(someone))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: It is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</EVALUATE>",
    "<PREMISES>\nAll students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) -> -Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\n</PREMISES>\n<CONCLUSION>\nIt is not true that Rose is a student and Jerry is a human.\nFOL: -(Student(rose) & Human(jerry))\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 131,
  "responses": [
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & TranslatesForeignIntoEnglish(NewVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> English(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: English(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializesIn(newVesselPress, TranslateForeignIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(italian, neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializesIn(newVesselPress, EnglishTranslation)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, Italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeign(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> English(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: English(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & TranslatesForeignLiterature(NewVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> English(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: English(neapolitanChronicles)\n</EVALUATE>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignIntoEnglish(newVesselPress)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignIntoEnglish(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL"
   ],
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslatingForeignToEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & TranslatesForeignLiterature(NewVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, NeapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, PalaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(NeapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializesIn(newVesselPress, TranslatingForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignToEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & SpecializeIn(NewVesselPress, TranslateForeignIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, NeapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, PalaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(NeapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeign(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignToEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignIntoEnglish)\nTEXT: All"
   ],
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & Translates(newVesselPress, English, Foreign)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InLanguage(x, English))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, Italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InLanguage(neapolitanChronicles, English)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignToEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializesIn(newVesselPress, TranslatingForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, Italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Neapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 132,
  "responses": [
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, Italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeign(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalien(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslatingForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & TranslatesForeignLiteratureIntoEnglish(NewVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, NeapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, PalaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, HarryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignToEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, Italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslatingForeignLiteratureToEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, Italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & SpecializeIn(NewVesselPress, TranslateForeignIntoEnglish)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, NeapolitanChronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, PalaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\nFOL: -PublishedBy(NewVesselPress, HarryPotter)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & SpecializeIn(NewVesselPress, TranslateForeignIntoEnglish)\nTEXT: All of",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslateForeign(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializesIn(newVesselPress, EnglishTranslation)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, Italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializesIn(newVesselPress, TranslateForeignToEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, Italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslateForeign(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializesIn(newVesselPress, TranslatingForeignLitIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, Italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializesIn(newVesselPress, TranslateForeignToEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializesIn(newVesselPress, TranslatingForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, Italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Harry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 133,
  "responses": [
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslatingForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, Italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFrom(palaceOfFlies, Italian)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFrom(palaceOfFlies, italian)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & SpecializeIn(NewVesselPress, TranslateForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFrom(Italian, palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslatingForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeign(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeign(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeign(newVesselPress)\nTEXT: All of New Vessel Press's published books",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializesIn(newVesselPress, TranslatingForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, Italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFrom(palaceOfFlies, Italian)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeign(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslatingForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeign(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeign(newVesselPress)\nTEXT: All of New Vessel Press's published books",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & TranslatesForeignLiteratureIntoEnglish(NewVesselPress)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, NeapolitanChronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, PalaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFrom(Italian, PalaceOfFlies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & TranslatesForeignLiteratureIntoEnglish(NewVesselPress)\nTEXT: All of New Vessel",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializesIn(newVesselPress, TranslatingForeignLiteratureToEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & TranslatesForeign(NewVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, palaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFrom(Italian, palaceOfFlies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & TranslatesForeign(NewVesselPress)\nTEXT: All of New Vessel Press",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeign(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeignLiterature(newVesselPress)\nTEXT: All of New Vessel",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(newVesselPress, TranslateForeignToEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, Italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFrom(palaceOfFlies, Italian)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializesIn(newVesselPress, TranslateForeignIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(neapolitanChronicles, italian)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFrom(palaceOfFlies, italian)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeign(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & TranslatesForeign(newVesselPress)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & Specialize(NewVesselPress, TranslatingForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(NewVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(NewVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFrom(Italian, palaceOfFlies)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializesIn(newVesselPress, TranslatingForeignLiteratureIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\nTEXT: Palace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 134,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLate",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAtHome(x) -> SpendFreeTimeTidying(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidying(x) -> -GoToBedLate(x))\nTEXT: Remy either both goes to bed late and wakes up every day after noon",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) -> -(GoToBed",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) ->",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) ->"
   ],
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLate",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) -> -Go",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoTo",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) ->",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) -> -(GoToBed"
   ],
   [
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBed",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpacesInHome(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpacesInHome(x) ->",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBed",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoTo",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) -> -GoTo"
   ],
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(Go",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAtHome(x) -> SpendFreeTimeTidying(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidying(x) -> -GoToBedLate(x) & WakeUpAfterNoon(x))\nTEXT: Remy either both goes to",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLate",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLate",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -("
   ],
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpacesInHome(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpacesInHome",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAnd",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) -> -(GoTo",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLate",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLate"
   ]
  ]
 },
 {
  "index": 135,
  "responses": [
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyOftenAtHome(x) -> SpendFreeTimeTidyingOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingOrganizing(x) -> -(GoToBedLate(x) & WakeUpEveryDay",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyOftenAtHome(x) -> SpendFreeTimeTidying(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidying(x) -> -GoToBedLate(x) & WakeUpAfterNoon(x))\nTEXT",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAtHome(x) -> SpendFreeTimeTidying(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidying(x) -> -(GoToBedLate(x) & WakeUpAfterNoon(x)))\nTEXT: Remy either both goes to bed",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBed"
   ],
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpacesInHome(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpacesIn",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLate",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpacesInHome(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpacesInHome(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpacesIn",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLate"
   ],
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitor(x) -> WorkRegularlyOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedImpressiveHomeOffice(x) -> LargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyOftenAtHome(x) -> SpendFreeTimeTidyingOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingOrganizing(x) -> -GoToBedLate(x) & WakeUpEveryDayAfterNoon",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) ->",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) -> -(Go",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidying(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidying(x) -> -GoToBedLate(x) & WakeUpEveryDayAfterNoon(x))\n"
   ],
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLate",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpacesInHome(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBed",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> LargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> TidyAndOrganizeSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (TidyAndOrganizeSpaces(x) -> -(GoToBedLate(x) & WakeUpEveryDayAfterNoon(x)))\nTEXT: Remy either",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLate"
   ],
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) ->",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -Go",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpacesInHome(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpacesIn",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpacesInHome(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpacesIn"
   ]
  ]
 },
 {
  "index": 136,
  "responses": [
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) ->",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpacesInHome(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpacesIn",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) -> -GoToBed",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyOftenAtHome(x) -> SpendFreeTimeTidying(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidying(x) -> -GoToBedLate(x) & WakeUpAfterNoon(x))\nTEXT: Remy",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBed"
   ],
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -Go",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAnd",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpacesInHome(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpacesIn",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HaveFullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x)",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLate(x"
   ],
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) -> -GoTo",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBed",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLate",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLate",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLate(x)"
   ],
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLate",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAtHome(x) -> SpendFreeTimeTidying(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidying(x) -> -GoToBedLate(x) & -WakeUpAfterNoon(x))\nTEXT: Remy either both goes to bed",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLate",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLateAnd",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpacesInHome(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpacesInHome(x"
   ],
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpaces(x) -> -GoTo",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLateAndWake",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLate",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizingSpacesInHome(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizingSpacesInHome(x)",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (LargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> LargeDesktopMonitorAtHome(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -(GoToBedLate"
   ]
  ]
 },
 {
  "index": 137,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 138,
  "responses": [
   [
    "<PREMISES>\nNo students who work in the library are from the computer science department. \nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\nTEXT: James has a part",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (WorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -WorkInLab(jack)\nTEXT: James has a part-time job offered by the",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityPartTimeJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (WorkInLibrary(x) -> -FromComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJobUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -PartTimeJobUniversity(jack) & -WorkInLab(jack)\nTEXT: James has a part-time job offered by the",
    "<PREMISES>\nNo students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJob(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJob(jack) & -WorkInLab(jack)\n</PREMISES>\n<CONCLUSION>\nJames has a part-time job offered by the university.\n"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJob(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -PartTimeJob(jack) & -WorkInLab(jack)\nTEXT: James has a part-time job offered",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (WorkInLibrary(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJob(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -PartTimeJob(jack) & -WorkInLab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityPartTimeJob(james)\n</EVAL",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\nTEXT: James has a part-time job offered by",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityJob(james)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityJob(james)\n</EVALUATE>",
    "<PREMISES>\nNo students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\n</PREMISES>\n<CONCLUSION>\nJames has a part-time job offered by the university.\nFOL: UniversityJob(james)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityPartTimeJob(james)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOffered(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOffered(jack) & -WorkInLab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL:",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityJob(james)\n</EVALUATE>",
    "<PREMISES>\nNo students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityJob(james)\n</PREMISES>\n<CONCLUSION>\nJames has a",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James has a part-time job offered by the university.\nFOL: UniversityJob(james)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 139,
  "responses": [
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james) & David(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJobUniversity(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james) & David(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -PartTimeJobUniversity(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -PartTimeJobUniversity(james)\n</E",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOffered(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOffered(jack) & -WorkInLab(jack)\nTEXT: James does not have a part-time job offered by the university.\nF",
    "<PREMISES>\nNo students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\n</PREMISES>\n<CONCLUSION>\nJames does not have a part-time job offered by the university.\nFOL: -UniversityJob(james)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityJob(james)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobByUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobByUniversity(jack) & -WorkInLab(jack)\nTEXT: James does not have a part-time job offered by the university.\nF",
    "<PREMISES>\nNo students who work in the library are from the computer science department. \nFOL: all x. (WorkInLibrary(x) -> -FromComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\nTEXT: James does",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityJob(james)\n</EVALUATE>",
    "<PREMISES>\nNo students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityPartTimeJob(james)\n</PREMISES>\n",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james) & David(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -PartTimeJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -PartTimeJob(james)\n</EVALUATE"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\nTEXT: James does not have a part-time job offered by",
    "<PREMISES>\nNo students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\n</PREMISES>\n<CONCLUSION>\nJames does not have a part-time job offered by the university.\nFOL: -UniversityJob(james)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityJob(james)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (WorkInLibrary(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -WorkInLab(jack)\nTEXT: James does not have a part-time job offered by the",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (WorkInLibrary(x) -> -FromComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJobUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -PartTimeJobUniversity(jack) & -WorkInLab(jack)\nTEXT: James does not have a part-time job offered",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityJob(james)\n</EVALUATE>",
    "<PREMISES>\nNo students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\n</PREMISES>\n<CONCLUSION>\nJames does not have a part-time job offered by the university.\nFOL: -UniversityJob(james)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (WorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityPartTimeJob(james)\n</EVALUATE",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -UniversityJob(james)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -PartTimeJob(james)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 140,
  "responses": [
   [
    "<PREMISES>\nNo students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\n</PREMISES>\n<CONCLUSION>\nJames either takes the database course or has a part-time job offered by the university.\nFOL: Database(james) | UniversityJob(j",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (WorkInLibrary(x) -> -FromComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJob(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -PartTimeJob(jack) & -WorkInLab(jack)\nTEXT: James either takes the database course or has a part-time",
    "<PREMISES>\nNo students who work in the library are from the computer science department. \nFOL: all x. (WorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -WorkInLab(jack)\n</PREMISES>\n<CONCLUSION>\nJames either takes the",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (Database(james) & -UniversityJob(james)) | (-Database(james) & UniversityJob(j",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (Database(james) & -UniversityPartTimeJob(james)) | (-Database(j"
   ],
   [
    "<PREMISES>\nNo students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJobUniversity(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (ProfessorDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> ProfessorDavid(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -PartTimeJobUniversity(jack) & -Lab(jack)\n</PREMISES>\n<CONCLUSION>\nJames either takes the database course or has a part-time job offered by the university.\nFOL:",
    "<PREMISES>\nNo students who work in the library are from the computer science department. \nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJobUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\nTEXT: James is a student working in the lab. \nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -PartTimeJobUniversity(jack) & -WorkInLab(jack)\n</PREMISES>\n<CON",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -PartTimeJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (Database(james) & -PartTimeJob(james))",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (DatabaseCourse(james) & -University",
    "<PREMISES>\nNo students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJob(jack) & -Lab(jack)\n</PREMISES>\n<CONCLUSION>\nJames either takes the database course or has a part-time job offered by the university.\nFOL: (Database(james) | PartTimeJob(james))\n</"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (Database(james) & -UniversityJob(james)) | (-Database",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (WorkInLibrary(x) -> -FromComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -WorkInLab(jack)\nTEXT: James either takes the database course or has a",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (Database(james) & -UniversityJob(james)) | (-Database",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (Database(james) | UniversityJob(james))\n</EVALU",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobByUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobByUniversity(jack) & -WorkInLab(jack)\nTEXT: James either takes the database course or has a part-time job"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (ProfessorDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> ProfessorDavid(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (DatabaseCourse(james",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (WorkInLibrary(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJobUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -PartTimeJobUniversity(jack) & -WorkInLab(jack)\nTEXT: James either takes the database course or has a",
    "<PREMISES>\nNo students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\n</PREMISES>\n<CONCLUSION>\nJames either takes the database course or has a part-time job offered by the university.\nFOL: (Database(james) | UniversityJob",
    "<PREMISES>\nNo students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\n</PREMISES>\n<CONCLUSION>\nJames either takes the database course or has a part-time job offered by the university.\nFOL: Database(james)",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (DatabaseCourse(james) & -UniversityPartTimeJob(james"
   ],
   [
    "<PREMISES>\nNo students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james) & Student(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\n</PREMISES>\n<CONCLUSION>\nJames either takes the database course or has a part-time job offered by the university.\nFOL: (Database(j",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (DatabaseCourse(james) & -UniversityJob(j",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (WorkInLibrary(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJobByUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -PartTimeJobByUniversity(jack) & -WorkInLab(jack)\nTEXT: James either takes the database course or has a",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJobUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\nTEXT: James is a student working in the lab. \nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -PartTimeJobUniversity(jack) & -WorkInLab(jack)\nTEXT: James either takes the database",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James either takes the database course or has a part-time job offered by the university.\nFOL: (Database(james) | UniversityJob(james))\n</EVALU"
   ]
  ]
 },
 {
  "index": 141,
  "responses": [
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobUniversity(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobUniversity(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: Database(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobByUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobByUniversity(jack) & -WorkInLab(jack)\nTEXT: Jack takes the database course.\nFOL: TakeDatabaseCourse(jack",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: Database(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (WorkInLibrary(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJobUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -PartTimeJobUniversity(jack) & -WorkInLab(jack)\nTEXT: Jack takes the database course.\nFOL: TakeDatabase",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (WorkInLibrary(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james) & David(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: DatabaseCourse(jack)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (WorkInLibrary(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (TakeDatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -WorkInLab(jack)\nTEXT: Jack takes the database course.\nFOL: TakeDatabase",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: Database(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -PartTimeJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: Database(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: Database(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: Database(jack)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -PartTimeJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: Database(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: Database(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: DatabaseCourse(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (WorkInLibrary(x) -> -FromComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab. \nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -WorkInLab(jack)\nTEXT: Jack takes the database course.\nF",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: Database(jack)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobByUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobByUniversity(jack) & -WorkInLab(jack)\nTEXT: Jack takes the database course.\nFOL: TakeDatabaseCourse",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: Database(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (HavePartTimeJob(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -HavePartTimeJob(jack) & -WorkInLab(jack)\nTEXT: Jack takes the database course.\nFOL: TakeDatabaseCourse(jack",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (ProfessorDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> ProfessorDavid(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: DatabaseCourse(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: DatabaseCourse(jack)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james) & David(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: DatabaseCourse(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: DatabaseCourse(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (WorkInLibrary(x) -> -FromComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (PartTimeJobOfferedByUniversity(x) -> WorkInLibrary(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (TakeDatabaseCourse(x) -> FromComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (InstructedByProfessorDavid(x) -> TakeDatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (WorkInLab(x) -> InstructedByProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: WorkInLab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJobOfferedByUniversity(jack) & -WorkInLab(jack)\nTEXT: Jack takes the database course.\n",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: Database(jack)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: Database(jack)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 142,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & HasAccessToProgram(george) -> WillCompose(george))\n</EVALUATE>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. ((CanCompose(x) & WantsToCompose(x)) -> WillCompose(x))\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & HasAccessToProgram(george)) -> WillCompose(george)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: ((LikesMusic(george) & AccessToProgram(george)) -> WillCompose(george))\n</EVALUATE>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & AccessToProgram(george) -> WillCompose(george))\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & AccessToProgram(george) -> WillCompose(george))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & HasAccessToProgram(george) -> WillCompose(george))\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (AccessToProgram(x) -> CanCompose(x))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. ((CanCompose(x) & WantsToCompose(x)) -> WillCompose(x))\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & AccessToProgram(george)) -> WillCompose(george)\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nIf George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nIf George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & HasAccessToProgram(george) -> WillCompose(george))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & AccessToProgram(george) -> WillCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: ((LikesMusic(george) & HasAccessToProgram(george)) -> WillCompose(george))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. ((CanCompose(x) & WantsToCompose(x)) -> WillCompose(x))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: ((LikesMusic(george) & HasAccessToProgram(george)) -> WillCompose(george))\n</EVALUATE>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & HasAccessToProgram(george) -> WillCompose(george))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & HasAccessToProgram(george) -> WillCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & HasAccessToProgram(george) -> WillCompose(george))\n</EVALUATE>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic(george) -> GeorgeWantsToCompose(george)\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram(george) -> GeorgeCanCompose(george)\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose(george) & GeorgeWantsToCompose(george)) -> GeorgeWillCompose(george)\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (GeorgeLikesMusic(george) & GeorgeHasAccessToProgram(george)) -> GeorgeWillCompose(george)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: GeorgeLikesMusic(george) -> GeorgeWantsToCompose(george)\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram(george) -> GeorgeCanCompose(george)\nTEXT: If George can compose and wants to compose, he will"
   ],
   [
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & AccessToProgram(george) -> WillCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (AccessToProgram(x) -> CanCompose(x))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. ((CanCompose(x) & WantsToCompose(x)) -> WillCompose(x))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & AccessToProgram(george)) -> WillCompose(george)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. ((CanCompose(x) & WantsToCompose(x)) -> WillCompose(x))\nTEXT: If George likes music and has access to a program, he will compose.\nFOL: ((LikesMusic(george) & HasAccessToProgram(george)) -> WillCompose(george))\n</EVALUATE>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & HasAccessToProgram(george) -> WillCompose(george))\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (AccessToProgram(x) -> CanCompose(x))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. ((CanCompose(x) & WantsToCompose(x)) -> WillCompose(x))\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & AccessToProgram(george)) -> WillCompose(george)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (AccessToProgram(x) -> CanCompose(x))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. ((CanCompose(x) & WantsToCompose(x)) -> WillCompose(x))\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & AccessToProgram(george)) -> WillCompose(george)\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic(george) -> WantsToCompose(george)\nIf George has access to a program, he can compose.\nFOL: GeorgeHasAccess(george) -> CanCompose(george)\nIf George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george)) -> WillCompose(george)\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (GeorgeLikesMusic(george) & GeorgeHasAccess(george)) -> WillCompose(george)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: GeorgeLikesMusic(george) -> WantsToCompose(george)\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccess(george) -> CanCompose(george)\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george)) ->",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nIf George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nIf George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & HasAccessToProgram(george) -> WillCompose(george))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: all x. (LikesMusic(x) -> WantsToCompose(x))\nTEXT: If George has access to a program, he can compose.\nFOL: all x. (HasAccessToProgram(x) -> CanCompose(x))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: all x. ((CanCompose(x) & WantsToCompose(x)) -> WillCompose(x))\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & HasAccessToProgram(george)) -> WillCompose(george)\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nIf George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nIf George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & HasAccessToProgram(george) -> WillCompose(george))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose("
   ]
  ]
 },
 {
  "index": 143,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: -(WillCompose(george) -> -CanCompose(george))\n</EVALUATE>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nIf George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nIf George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -(WillCompose(george) -> -CanCompose(george))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT:",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: -WillCompose(george) -> -CanCompose(george)\n</EVALUATE>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: (-(WillCompose(george)) -> -CanCompose(george))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (WillNotCompose(george) -> CantCompose(george))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: (-WillCompose(george) -> -CanCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: GeorgeLikeMusic(george) -> GeorgeWantToCompose(george)\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeAccessProgram(george) -> GeorgeCanCompose(george)\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose(george) & GeorgeWantToCompose(george)) -> GeorgeWillCompose(george)\nTEXT: If George will not compose, George can not compose.\nFOL: -GeorgeWillCompose(george) -> -GeorgeCanCompose(george)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: -(WillCompose(george) -> -CanCompose(george))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: -WillCompose(george) -> -CanCompose(george)\n</EVALUATE>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: (-WillCompose(george) -> -CanCompose(george))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: likesMusic(george) -> wantsToCompose(george)\nIf George has access to a program, he can compose.\nFOL: hasAccess(george, program) -> canCompose(george)\nIf George can compose and wants to compose, he will compose.\nFOL: (canCompose(george) & wantsToCompose(george)) -> willCompose(george)\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -willCompose(george) -> -canCompose(george)\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nIf George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nIf George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -(WillCompose(george) -> -CanCompose(george))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT:",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic(george) -> GeorgeWantsToCompose(george)\nIf George has access to a program, he can compose.\nFOL: GeorgeHasAccess(george) -> GeorgeCanCompose(george)\nIf George can compose and wants to compose, he will compose.\nFOL: GeorgeCanCompose(george) & GeorgeWantsToCompose(george) -> GeorgeWillCompose(george)\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -GeorgeWillCompose(george) -> -GeorgeCanCompose(george)\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: (WillNotCompose(george) -> CanNotCompose(george))\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -WillCompose(george) -> -CanCompose(george)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: -WillCompose(george) -> -CanCompose(george)\n</EVALUATE>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic(george) -> GeorgeWantsToCompose(george)\nIf George has access to a program, he can compose.\nFOL: GeorgeHasAccess(george) -> GeorgeCanCompose(george)\nIf George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose(george) & GeorgeWantsToCompose(george)) -> GeorgeWillCompose(george)\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -GeorgeWillCompose(george) -> -GeorgeCanCompose(george)\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -(WillCompose(george) -> -CanCompose(george))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: -(WillCompose(george) -> -CanCompose(george))\n</EVALUATE>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic(george) -> GeorgeWantsToCompose(george)\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram(george) -> GeorgeCanCompose(george)\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: GeorgeCanCompose(george) & GeorgeWantsToCompose(george) -> GeorgeWillCompose(george)\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -GeorgeWillCompose(george) -> -GeorgeCanCompose(george)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: likesMusic(george) -> wantsToCompose(george)\nIf George has access to a program, he can compose.\nFOL: hasAccess(george) -> canCompose(george)\nIf George can compose and wants to compose, he will compose.\nFOL: (canCompose(george) & wantsToCompose(george)) -> willCompose(george)\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -willCompose(george) -> -canCompose(george)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: likesMusic(george) -> wantsToCompose(george)\nTEXT: If George has access to a program, he can compose.\nFOL: hasAccess(george) -> canCompose(george)\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (canCompose(george) & wantsToCompose(george)) -> willCompose(george)\nTEXT: If George will not compose, George can",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (AccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: -WillCompose(george) -> -CanCompose(george)\n</EVALUATE>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: likesMusic(george) -> wantsToCompose(george)\nTEXT: If George has access to a program, he can compose.\nFOL: hasAccessToProgram(george) -> canCompose(george)\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (canCompose(george) & wantsToCompose(george)) -> willCompose(george)\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -willCompose(george) -> -canCompose(george)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: ((CanCompose(george) & WantsToCompose(george)) -> WillCompose(george))\nTEXT: If George will not compose, George can not compose.\nFOL: -WillCompose(george) -> -CanCompose(george)\n</EVALUATE>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic(george) -> GeorgeWantsToCompose(george)\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram(george) -> GeorgeCanCompose(george)\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose(george) & GeorgeWantsToCompose(george)) -> GeorgeWillCompose(george)\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -GeorgeWillCompose(george) -> -GeorgeCanCompose(george)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 144,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Land(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Land(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: -all x. (Bird(x) -> -Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: -all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: -all x. (Bird(x) -> -Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Land(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Land(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: -all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Land(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Land(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Land(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Land(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Land(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land.\nFOL: all x. (Bird(x) -> Land(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: -all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Land(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Land(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 145,
  "responses": [
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseOnTV(x) -> OnBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: Monday(breakingBad) & 8pm(breakingBad)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 146,
  "responses": [
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & RosesGivenOutOnMondayAt8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & TV(x) & RoseGivenOut(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOut(x) & TV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortrayRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortrayRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TV(breakingBad) & Monday(breakingBad) & 8pm(breakingBad) & RoseGivenOut(breakingBad)\n</EVALUATE>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\n</PREMISES>\n\n<EVALUATE>\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\n",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (Monday(breakingBad) & 8pm(breakingBad) & RosesGivenOutOnTV(breakingBad))\n</PREMISES>\n<CONCLUSION>\nFOL: TVShow(breakingBad) & (Monday",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (Monday(breakingBad) & 8pm(breakingBad) & RosesOnTV(breakingBad))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (Monday(breakingBad) & 8pm(breakingBad) & RosesGivenOutOnTV(breakingBad))\n</PREMISES>\n<CONCLUSION>\nFOL: -TVShow(breakingBad) | -(Monday(breakingBad) & ",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & Monday(breakingBad) & 8pm(breakingBad) & RoseGivenOutOnTV(breakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseOnTV(x) -> OnBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnBachelor(x) -> RealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (Monday(breakingBad) & 8pm(breakingBad) & RoseOnTV(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & TV(x) & RoseGivenOut(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOut(x) & TV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TV(breakingBad) & (Monday(breakingBad) & 8pm(breakingBad) & RoseGivenOut(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & TV(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TV(breakingBad) & RosesGivenOutOnMondayAt8pm(breakingBad)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & TV(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TV(breakingBad) & (Monday(breakingBad) & 8pm(breakingBad) & RoseGivenOutOnTV(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (Monday(breakingBad) & 8pm(breakingBad) & RoseGivenOutOnTV(breakingBad))\n</EVALUATE>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & RosesGivenOutOnTV(breakingBad) & Monday(breakingBad) & 8pm(breakingBad)\n</PREMISES>\n<CONCLUSION>\nFOL: TVShow(breakingBad) & RosesGivenOutOnTV(breakingBad",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTVShow(breakingBad) | (Monday(breakingBad) & 8pm(breakingBad) & RosesGivenOutOnTV(breakingBad))\n</PREMISES>\n<CONCLUSION>\nFOL: - (RealityTVShow(breakingBad) | (Monday(break",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: (RealityTVShow(breakingBad) & Monday(breakingBad) & 8pm(breakingBad) & RosesGivenOutOnTV(breakingBad)) | (-RealityTVShow(breakingBad) & (Monday(breakingBad) & 8pm(breakingBad)"
   ],
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (Monday(breakingBad) & 8pm(breakingBad) & RosesGivenOutOnTV(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: -((RealityTVShow(breakingBad) & Monday(8pm) & RosesOnTV(8pm)) | (-RealityTVShow(breakingBad) & -Monday(8pm) & -RosesOnTV(8pm)))\n</EVALUATE>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: (TVShow(breakingBad) & Monday(breakingBad) & 8pm(breakingBad) & RosesGivenOutOnTV(breakingBad))\n</PREMISES>\n<CONCLUSION>\n<EVALUATE>\nFOL: TVShow(breakingBad) & Monday(break",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (Monday(breakingBad) & 8pm(breakingBad) & RosesGivenOutOnTV(breakingBad))\n</EVALUATE>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: (RealityTV(breakingBad) & Monday(breakingBad) & 8pm(breakingBad) & RosesOnTV(breakingBad))\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTV(breaking"
   ],
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: (RealityTVShow(breakingBad) & Monday(breakingBad) & 8pm(breakingBad) & RosesGivenOutOnTV(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (Monday(breakingBad) & 8pm(breakingBad) & RosesGivenOutOnTV(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & RosesGivenOutOnMondayAt8pm(breakingBad)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: TVShow(breakingBad) & (exists x. (Monday(x) & 8pm(x) & RosesOnTV(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTVShow(breakingBad) | (RealityTVShow(breakingBad) -> RosesGivenOutOnTV(breakingBad))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 147,
  "responses": [
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutDuring(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RoseGivenOutDuring(breakingBad) -> (Monday(when) & 8pm(when)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (MondayAt8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesGivenOutOnTV(breakingBad) -> MondayAt8pm(breakingBad)\n</EVALUATE>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutDuring(breakingBad) -> (Monday(when) & 8pm(when)))\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutDuring(breakingBad",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (MondayAt8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesGivenOutDuringBreakingBad -> MondayAt8pm\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutDuring(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGiven",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RoseGivenOutOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (MondayAt8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutDuring(breakingBad) -> MondayAt8pm(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RoseOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTv(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTv(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTvShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTvShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesGivenOutOnTv(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad))\n</EVALUATE>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad))\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesOnTV(breakingBad) -> (Monday(break",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesGivenOutDuring(breakingBad) -> (Monday(?) & 8pm(?))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutDuring(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RoseGivenOutDuring(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> OnBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnBachelor(x) -> PortrayRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortrayRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesGivenOutDuring(breakingBad) -> (Monday(x) & 8pm(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RoseGivenOutDuring(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RoseGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RoseGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RoseGivenOutDuring(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\n</EVALUATE>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesGivenOutOnTV(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad))\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesGivenOutOnTV"
   ],
   [
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesGivenOutDuring(breakingBad) -> (Monday(x) & 8pm(x))\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesGivenOutDuring(breakingBad) -> (Monday",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutDuring(breakingBad) -> (Monday(x) & 8pm(x)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> OnBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: RosesOnTV(breakingBad) -> (Monday(x) & 8pm(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (MondayAt8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutOnTV(breakingBad) -> MondayAt8pm(breakingBad))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTv(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTv(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTvShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTvShow(breakingBad)\nTEXT: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutOnTv(breakingBad) -> (Monday(breakingBad) & 8pm(breakingBad)))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 148,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: ((German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliamentMember(heinrichSchmidt) & NaziReichstagMember(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliamentMember(heinrichSchmidt) & NaziReichstagMember(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: ((German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliamentMember(heinrichSchmidt) & NaziReichstagMember(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliamentMember(heinrichSchmidt) & NaziReichstagMember(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliamentMember(heinrichSchmidt) & NaziReichstagMember(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliamentMember(heinrichSchmidt) & NaziReichstagMember(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliamentMember(heinrichScmidt) & NaziReichstagMember(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliamentMember(heinrichScmidt) & NaziReichstagMember(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliamentMember(heinrichSchmidt) & NaziReichstagMember(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliamentMember(heinrichScmidt) & NaziReichstagMember(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (NaziGerman(heinrichSchmidt) | Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliamentMember(heinrichSchmidt) & NaziReichstagMember(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliamentMember(heinrichSchmidt) & NaziReichstagMember(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) & -Russian(heinrichSchmidt)) | (-German(heinrichSchmidt) & Russian(heinrichSchmidt))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 149,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOf(heinrichSchmidt, PrussianStateParliament) & MemberOf(heinrichSchmidt, NaziReichstag)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberOf(x, PrussianStateParliament) & MemberOf(x, NaziReichstag))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliamentMember(heinrichSchmidt) & NaziReichstagMember(heinrichSchmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliamentMember(x) & NaziReichstagMember(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOf(heinrichScmidt, PrussianStateParliament) & MemberOf(heinrichScmidt, NaziReichstag)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberOf(x, PrussianStateParliament) & MemberOf(x, NaziReichstag))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: Member(heinrichScmidt, PrussianStateParliament) & Member(heinrichScmidt, NaziReichstag)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & Member(x, PrussianStateParliament) & Member(x, NaziReichstag))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliamentMember(heinrichSchmidt) & NaziReichstagMember(heinrichSchmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliamentMember(x) & NaziReichstagMember(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOf(heinrichSchmidt, PrussianStateParliament) & MemberOf(heinrichSchmidt, NaziReichstag)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberOf(x, PrussianStateParliament) & MemberOf(x, NaziReichstag))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliamentMember(heinrichScmidt) & NaziReichstagMember(heinrichScmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliamentMember(x) & NaziReichstagMember(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: Member(heinrichSchmidt, PrussianStateParliament) & Member(heinrichSchmidt, NaziReichstag)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & Member(x, PrussianStateParliament) & Member(x, NaziReichstag))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOf(heinrichSchmidt, PrussianStateParliament) & MemberOf(heinrichSchmidt, NaziReichstag)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberOf(x, PrussianStateParliament) & MemberOf(x, NaziReichstag))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOf(heinrichSchmidt, PrussianStateParliament) & MemberOf(heinrichSchmidt, NaziReichstag)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberOf(x, PrussianStateParliament) & MemberOf(x, NaziReichstag))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOf(heinrichScmidt, PrussianStateParliament) & MemberOf(heinrichScmidt, NaziReichstag)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberOf(x, PrussianStateParliament) & MemberOf(x, NaziReichstag))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 150,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -MemberOfNaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliamentMember(heinrichSchmidt) & NaziReichstagMember(heinrichSchmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: -Politician(x) | -NaziReichstagMember(x)\n</EVALUATE>\n\nHowever, this conclusion does not follow from the premises. The premises only state that Heinrich Scmidt was a Nazi German politician and a member of the Prussian State Parliament and the Nazi Reichstag, but they do not provide any information about other politicians. Therefore, we cannot conclude that no politicians are part of the Nazi Reichstag."
   ],
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: No politicans are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -MemberOfNaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: Member(heinrichSchmidt, PrussianStateParliament) & Member(heinrichSchmidt, NaziReichstag)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: -Politician(x) | -Member(x, NaziReichstag)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: No politicans are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliamentMember(heinrichSchmidt) & NaziReichstagMember(heinrichSchmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: -Politician(x) | -NaziReichstagMember(x)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: No politicans are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -MemberOfNaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliamentMember(heinrichScmidt) & NaziReichstagMember(heinrichScmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstagMember(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -MemberOfNaziReichstag(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: Politician(heinrichSchmidt) & Nazi(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: Politician(heinrichScmidt) & Nazi(heinrichScmidt) & German(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -MemberOfNaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichScmidt) & NaziReichstag(heinrichScmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -MemberOfNaziReichstag(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: Politician(heinrichSchmidt) & NaziGerman(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -MemberOfNaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstag(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliament(heinrichSchmidt) & NaziReichstag(heinrichSchmidt)\nTEXT: No politicans are part of the Nazi Reichstag.\nFOL: -Politician(x) | -NaziReichstag(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: PrussianStateParliamentMember(heinrichScmidt) & NaziReichstagMember(heinrichScmidt)\nTEXT: No politicans are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -NaziReichstagMember(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 151,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer(colore",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer(colore",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer(colore",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer"
   ],
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer(colore"
   ],
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (Cholangiocarcinoma(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -Cholangiocarcinoma(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer(colorectal",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (Cholangiocarcinoma(colorectalCancer) & LowSurvivalRate(colorectalCancer) -> -Cholangiocarcinoma(colorectalCancer))\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (Cholangiocarcinoma(colorectalCancer) & LowSurvivalRate(colorectalCancer) -> -Cholangiocarcinoma(colorectalCancer))\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer(colore"
   ],
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer(colore",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer(colore",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer"
   ],
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer(colore",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer(colore",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer(colore",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer.\nFOL: SevereCancer(colore",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (Cholangiocarcinoma(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -Cholangiocarcinoma(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer\nFOL: SevereCancer"
   ]
  ]
 },
 {
  "index": 152,
  "responses": [
   [
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is a bile duct cancer",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) | -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcin",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma,",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcin"
   ],
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma,",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) | -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) | -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nAll severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nBile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nAll Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nNo one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma,"
   ],
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcin",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma,",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) | -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma,",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is a bile duct cancer"
   ],
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma,",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma,",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma,",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcin",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma,"
   ],
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcin",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcin",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma,",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcin",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) | -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal"
   ]
  ]
 },
 {
  "index": 153,
  "responses": [
   [
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nAll severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nBile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nAll Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nNo one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma,",
    "<PREMISES>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\n</PREMISES>\n<CONCLUSION>\nTEXT: If colorectal cancer is not a",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nAll severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nBile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nAll Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nNo one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nAll severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nBile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nAll Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nNo one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer"
   ],
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) | -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma,",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma,",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nAll severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nBile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nAll Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nNo one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal"
   ],
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma,",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) | -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma,",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma,",
    "<PREMISES>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\n</PREMISES>\n<CONCLUSION>\nTEXT: If colorectal cancer is not a"
   ],
   [
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) | -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Ch",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma,",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma,",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma,"
   ],
   [
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma,",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: If colorectal cancer is not a mild flu and a Cholangiocarcinoma,",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nAll severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nBile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nAll Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> bileDuctCancer(x))\nNo one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nAll severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nBile duct cancer is a severe cancer.\nFOL: SevereCancer(bileDuctCancer)\nAll Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nNo one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal"
   ]
  ]
 },
 {
  "index": 154,
  "responses": [
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWon(UnitedStates, tokyo)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: OlympicGamesIn(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonInTokyo(unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsWonBy(us, tokyo)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: -LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonBy(us, tokyo)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsInTokyo(unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: OlympicGamesIn(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsInTokyo(unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsWon(us, tokyo)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonBy(us, tokyo)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: OlympicGamesIn(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonIn(tokyo, unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsWonBy(UnitedStates, tokyo)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: OlympicGamesInTokyo(lastOlympicGames)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonBy(UnitedStates, lastOlympicGames)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonInTokyo(unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonInTokyo(unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonIn(usa, tokyo)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWon(inTokyo(2020), unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: OlympicGamesIn(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonBy(unitedStates, tokyo)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsWon(inTokyo, unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonInTokyo(unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonIn(tokyo, unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonInTokyo(unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: OlympicGamesIn(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsWonInTheOlympicGamesIn(us, tokyo)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 155,
  "responses": [
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWon(tokyo, unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsWonIn(usa, tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonIn(tokyo, unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonIn(tokyo, unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGamesIn(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsWonIn(tokyo, unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGamesIn(tokyo)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonIn(tokyo, unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGamesIn(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsWonIn(tokyo, unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGamesIn(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsWon(inTokyo, unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGamesIn(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonBy(usa, tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGamesIn(tokyo)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonIn(tokyo, unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWon(UnitedStates, tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsWon(inTokyo, unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonIn(usa, tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGamesIn(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonByInTheUnitedStates(tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGamesIn(tokyo)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: InTokyo(lastOlympicGames)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsInTokyo(UnitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -InTokyo(lastOlympicGames)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWon(UnitedStates, tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWon(UnitedStates, tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonIn(tokyo, unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGamesIn(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonBy(UnitedStates, tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGamesIn(tokyo)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: InTokyo(lastOlympicGames)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonBy(UnitedStates, Tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -InTokyo(lastOlympicGames)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGamesIn(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonBy(unitedStates, tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGamesIn(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGamesIn(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsInTokyo(unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGamesIn(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(tokyo)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 156,
  "responses": [
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsWonIn(LastOlympicGames, unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(lastOlympicGames, unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(lastOlympicGames, unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonInTheEvent(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsWonInTheEvent(lastOlympicGames, unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(lastOlympicGames, unitedStates)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(lastOlympicGames, unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWon(inTokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsWon(lastOlympicGames, unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsWonIn(LastOlympicGames, unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsInTheCity(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsInTheLastOlympicGames(unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsWonIn(LastOlympicGames, unitedStates)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsWonBy(usa, tokyo)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsWonBy(usa, LastOlympicGames)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsWonIn(LastOlympicGames, unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsInTheEvent(UnitedStates, tokyo)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsInTheEvent(UnitedStates, LastOlympicGames)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWon(inUnitedStates, tokyo)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsWon(inUnitedStates, lastOlympicGames)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(lastOlympicGames, unitedStates)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(lastOlympicGames, unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(LastOlympicGames, unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonBy(us, tokyo)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsWonBy(us, LastOlympicGames)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsInTheEvent(unitedStates, tokyo)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsInTheEvent(unitedStates, lastOlympicGames)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsWonBy(us, tokyo)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsWonBy(us, LastOlympicGames)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(LastOlympicGames, unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event. \nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(LastOlympicGames, unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(LastOlympicGames, unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(LastOlympicGames, unitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(olympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(tokyo, unitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsIn(lastOlympicGames, unitedStates)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 157,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 158,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesTo(x, y) -> -FliesFrom(x, y))\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FliesFrom(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, to, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, to, y) -> -Fly(x, from, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, from, lga)\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, from, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesTo(x, y) -> -FliesFrom(x, y))\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FliesFrom(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyFrom(x, y) & FlyTo(x, y) -> -Eq(y, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FlyFrom(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesFrom(x, y) & FliesTo(x, y) -> -Eq(y, y))\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FliesFrom(susan, lga)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyFrom(x, y) & FlyTo(x, y) -> - (y = x))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FlyFrom(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesFrom(x, y) & FliesTo(x, y) -> - (y = y))\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FliesFrom(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyTo(x, y) -> -FlyFrom(x, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FlyFrom(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesTo(x, y) -> -ArrivesAt(x, y))\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FliesFrom(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesFrom(x, y) & FliesTo(x, y) -> -SameAirport(x, y))\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FliesFrom(susan, lga)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyTo(x, y) & FlyFrom(x, y) -> -SameAirport(y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FlyFrom(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyFrom(x, y) & FlyTo(x, y) -> - (y = x))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FlyFrom(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyTo(x, y) -> -FlyFrom(x, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FlyFrom(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyTo(x, y) -> -FlyFrom(x, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FlyFrom(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesTo(x, y) -> -FliesFrom(x, y))\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FliesFrom(susan, lga)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesFrom(x, y) & FliesTo(x, y) -> -SameAirport(y, y))\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FliesFrom(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, to, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, from, y) & Fly(x, to, y) -> -Fly(x, from, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, from, lga)\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, from, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyTo(x, y) -> -FlyFrom(x, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FlyFrom(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, to, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y z. (Fly(x, z, y) -> - (z = y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, from, lga)\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, from, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesTo(x, y) -> -FliesFrom(x, y))\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FliesFrom(susan, lga)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, to, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, to, y) & Fly(x, from, y) -> -True)\nTEXT: John flies from LGA airport.\nFOL: Fly(john, from, lga)\nTEXT: Susan flies from LGA airport.\nFOL: Fly(susan, from, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyTo(x, y) -> -FlyFrom(x, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FlyFrom(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesFrom(x, y) & FliesTo(x, y) -> - SameAirport(y, y))\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FliesFrom(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesTo(x, y) & FliesFrom(x, y) -> -same(y, y))\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FliesFrom(susan, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyTo(x, y) -> -FlyFrom(x, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: Susan flies from LGA airport.\nFOL: FlyFrom(susan, lga)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 159,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesFrom(x, y) & FliesTo(x, y) -> -SameAirport(y, y))\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FliesTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyFrom(x, y) & FlyTo(x, y) -> - (y = x))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) -> -Arrive(x, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, lga)\nTEXT: John flies to LGA airport.\nFOL: Fly(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesFrom(x, y) & FliesTo(x, y) -> -Eq(y, y))\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FliesTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, to, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y z. (Fly(x, z, y) -> -SameAirport(y, z))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, from, lga)\nTEXT: John flies to LGA airport.\nFOL: Fly(john, to, lga)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesTo(x, y) -> -FliesFrom(x, y))\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FliesTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyFrom(x, y) & FlyTo(x, y) -> -sameAirport(y, y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyFrom(x, y) & FlyTo(x, y) -> - (y = x))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesFrom(x, y) & FliesTo(x, y) -> - (y = x))\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FliesTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, to, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, to, y) -> -Fly(x, from, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, from, lga)\nTEXT: John flies to LGA airport.\nFOL: Fly(john, to, lga)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyFrom(x, y) & FlyTo(x, y) -> - (y = x))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) -> -Arrive(x, y))\nTEXT: John flies from LGA airport.\nFOL: Fly(john, lga)\nTEXT: John flies to LGA airport.\nFOL: Fly(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Flies(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Flies(x, y) -> -Arrives(x, y))\nTEXT: John flies from LGA airport.\nFOL: Flies(john, lga)\nTEXT: John flies to LGA airport.\nFOL: Flies(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyFrom(x, y) & FlyTo(x, y) -> -SameAirport(y))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesFrom(x, y) & FliesTo(x, y) -> - (y = y))\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FliesTo(john, lga)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FlyTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FlyFrom(x, y) & FlyTo(x, y) -> - (y = x))\nTEXT: John flies from LGA airport.\nFOL: FlyFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FlyTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesFrom(x, y) & FliesTo(x, y) -> -same(x, y))\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FliesTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesFrom(x, y) & FliesTo(x, y) -> -y = y)\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FliesTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, y) & Fly(x, y) -> -True)\nTEXT: John flies from LGA airport.\nFOL: Fly(john, LGA)\nTEXT: John flies to LGA airport.\nFOL: Fly(john, LGA)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesFrom(x, y) & FliesTo(x, y) -> - (y = y))\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FliesTo(john, lga)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Fly(susan, to, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (Fly(x, from, y) & Fly(x, to, y) -> -true)\nTEXT: John flies from LGA airport.\nFOL: Fly(john, from, lga)\nTEXT: John flies to LGA airport.\nFOL: Fly(john, to, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesFrom(x, y) & FliesTo(x, y) -> -Equals(y, y))\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FliesTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesFrom(x, y) & FliesTo(x, y) -> -SameAirport(y, y))\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FliesTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesFrom(x, y) & FliesTo(x, y) -> -y(x))\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FliesTo(john, lga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: FliesTo(susan, lga)\nTEXT: The departure and arrival can not be the same airport.\nFOL: all x y. (FliesTo(x, y) & FliesFrom(x, y) -> -True)\nTEXT: John flies from LGA airport.\nFOL: FliesFrom(john, lga)\nTEXT: John flies to LGA airport.\nFOL: FliesTo(john, lga)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 160,
  "responses": [
   [
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nTom is a grumpy person.\nFOL: Grumpy(tom)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalL",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n<CONCLUSION>\nTom is a grumpy person.\nFOL: Grumpy(tom)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nSome grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nAll animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nIf someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nTom is a grumpy person.\nFOL: Grumpy(tom)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nSome grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nAll animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nIf someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nTom is a grumpy person.\nFOL: Grumpy(tom)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nSome grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nAll animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nIf someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nTom is a grumpy person.\nFOL: Grumpy(tom)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nTom is a grumpy person.\nFOL: Grumpy(tom)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalL"
   ],
   [
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nSome grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nAll animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nIf someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nTom is a grumpy person.\nFOL: Grumpy(tom)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nSome grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nAll animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nIf someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n<CONCLUSION>\nTom is a grumpy person.\nFOL: Grumpy(tom)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceTo",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nTom is a grumpy person.\nFOL: Grumpy(tom)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n<CONCLUSION>\nTom is a grumpy person.\nFOL: Grumpy(tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nSome grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nAll animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nIf someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nTom is a grumpy person.\nFOL: Grumpy(tom)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n<CONCLUSION>\nTom is a grumpy person.\nFOL: Grumpy(tom)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nSome grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nAll animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nIf someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nTom is a grumpy person.\nFOL: Grumpy(tom)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nSome grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nAll animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nIf someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nTom is a grumpy person.\nFOL: Grumpy(tom)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 161,
  "responses": [
   [
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nSome grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nAll animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nIf someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL"
   ],
   [
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nSome grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nAll animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nIf someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</EVALUATE>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nSome grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nAll animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nIf someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL"
   ]
  ]
 },
 {
  "index": 162,
  "responses": [
   [
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n<CONCLUSION>\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: ((-Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom)))\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -(Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom)))\n</EVALUATE>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-(Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom)))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -(Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\n</EVALUATE>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: ((-Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom)))\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-Grumpy(tom) & -MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\n</EVALUATE>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-(Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom)))\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: ((-Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom)))\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-(Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom)))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -(Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n<CONCLUSION>\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-(Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom)))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -(Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom))\n</EVALUATE>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-(Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom)))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\n</PREMISES>\n<CONCLUSION>\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-(Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom)))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-(Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (PetOwner(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: PetOwner(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-Grumpy(tom) & -MeanToAnimals(tom) -> (-Grumpy(tom) & -AnimalLover(tom)))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -Grumpy(tom) & MeanToAnimals(tom) -> -Grumpy(tom) & -AnimalLover(tom)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 163,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets) & CreatedBy(daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets) & CreatedBy(daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: [BG] If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: [BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenInYear(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: [BG] Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: [BG] If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: [BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: [BG] Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVAL",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets) & CreatedBy(daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, familySecrets) & Podcast(familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: [BG] If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: [BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: [BG] Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVAL",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: [BG] If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: [BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: [BG] Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVAL",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 164,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(podcastFamilySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(podcastFamilySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets) & CreatedBy(daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: [BG] If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: [BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: [BG] Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: [BG] If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: [BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: [BG] Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALU",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(podcastFamilySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(podcastFamilySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(podcastFamilySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets) & CreatedBy(daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets) & CreatedBy(daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenInYear(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(podcastFamilySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(podcastFamilySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, familySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: [BG] If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: [BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: [BG] Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALU",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Family Secrets is a novel.\nFOL: Novel(podcastFamilySecrets)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 165,
  "responses": [
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornIn(daniShapiro, boston)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets) & CreatedBy(daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornIn(boston, daniShapiro)\n</EVALUATE",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornIn(daniShapiro, boston)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: [BG] If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: [BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: [BG] Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</E",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornIn(daniShapiro, boston)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets) & CreatedBy(daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornIn(daniShapiro, boston)\n</EVALU",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenInYear(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornIn(boston, daniShapiro)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornIn(boston, daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornIn(boston, daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornIn(boston, daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornIn(daniShapiro, boston)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: [BG] If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: [BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenInYear(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, familySecrets, daniShapiro)\nTEXT: [BG] Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n"
   ],
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornIn(daniShapiro, boston)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornIn(daniShapiro, boston)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornIn(daniShapiro, boston)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: [BG] If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: [BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, familySecrets) & Type(familySecrets, podcast)\nTEXT: [BG] Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornIn(dani"
   ],
   [
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: [BG] If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: [BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: [BG] Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</E",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: [BG] If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: [BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenInYear(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedBy(daniShapiro, podcast, familySecrets)\nTEXT: [BG] Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: [BG] If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: [BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcastFamilySecrets, daniShapiro)\nTEXT: [BG] Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</E",
    "<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(y, x) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(daniShapiro) & Writer(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(daniShapiro, familyHistory)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Created(podcast, daniShapiro, familySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\nTEXT: Dani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 166,
  "responses": [
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes,",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes,",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\nTEXT: Yuri is an American.\nFOL: American(yuri)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 167,
  "responses": [
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> Large"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> Large",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> Large"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. ("
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is not an American basketball player.\nFOL: -American(yuri) & -BasketballPlayer(yuri)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 168,
  "responses": [
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x)",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x)"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x)",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT:"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\n",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x)",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x)",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x)",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x)",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\nTEXT: Yuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x)",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x)",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT:",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT:"
   ]
  ]
 },
 {
  "index": 169,
  "responses": [
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</EVALUATE>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</EVALUATE>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> AmericanBasketballPlayer(yuri)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</EVALUATE>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</EVALUATE>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> (American(yuri) & BasketballPlayer(yuri))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 170,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: (-American(yuri) & BasketballPlayer(yuri))\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: (-American(yuri) & BasketballPlayer(yuri))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: (-American(yuri) & BasketballPlayer(yuri))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -LargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\nTEXT: If Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</EVALUATE>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizeClothes(x))\nTEXT: Yuri does not wear large-size clothes.\nFOL: -WearLargeSizeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) -> BasketballPlayer(yuri)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 171,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<PREMISES>\nEvents are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy. \nFOL: exists x. (Event(x) & Happy(x))\n</PREMISES>\n<CONCLUSION>\nAll events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</CONCLUSION>",
    "<PREMISES>\nEvents are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy. \nFOL: exists x. (Event(x) & Happy(x))\n</PREMISES>\n<CONCLUSION>\nAll events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</CONCLUSION>",
    "<PREMISES>\nEvents are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nAt least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\n</PREMISES>\n<CONCLUSION>\nAll events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<PREMISES>\nEvents are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nEvents are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nAt least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\n</PREMISES>\n<CONCLUSION>\nAll events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy. \nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<PREMISES>\nEvents are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nAt least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\n</PREMISES>\n<CONCLUSION>\nAll events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy. \nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy. \nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy. \nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy. \nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<PREMISES>\nEvents are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\n</PREMISES>\n<CONCLUSION>\nAll events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<PREMISES>\nEvents are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy. \nFOL: exists x. (Event(x) & Happy(x))\n</PREMISES>\n<CONCLUSION>\nAll events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy. \nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy. \nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy. \nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 172,
  "responses": [
   [
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: ParticipatedIn(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(1992DuMaurierClassic) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x, 1992DuMaurierClassic) -> ParticipatedIn(x, 1992DuMaurierClassic))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL:",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (FromBelgium(x) & OnLeaderboard(1992DuMaurierClassic, x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> Participated(1992DuMaurierClassic, x))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nF",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (FromBelgium(x) & Leaderboard(1992DuMaurierClassic, x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic, x) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL:",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (FromBelgium(x) & OnLeaderboard(1992DuMaurierClassic, x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> Participated(1992DuMaurierClassic, x))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nF",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, duMaurierClassic1992)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (FromBelgium(x) & OnLeaderboard(duMaurierClassic1992, x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(duMaurierClassic1992, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(duMaurierClassic1992, x) -> Participated(x, duMaurierClassic1992))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL"
   ],
   [
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: ParticipatedIn(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (FromBelgium(x) & Leaderboard(1992DuMaurierClassic, x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic, x) -> ParticipatedIn(1992DuMaurierClassic, x))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (FromBelgium(x) & OnLeaderboard(1992DuMaurierClassic, x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\n",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x, 1992DuMaurierClassic) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> Participated(1992DuMaurierClassic, x))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\n",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(duMaurierClassic1992, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (FromBelgium(x) & InTie(x, duMaurierClassic1992))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(duMaurierClassic1992, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(duMaurierClassic1992, x) -> Participated(duMaurierClassic1992, x))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & FromBelgium(some x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\n</PREMISES>\n<CONCLUSION>\nSteinhauer was not the winner of the 1992 du Maurier Classic"
   ],
   [
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (FromBelgium(x) & Leaderboard(1992DuMaurierClassic, x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic, x) -> Participated(1992DuMaurierClassic, x))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(duMaurierClassic1992, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(duMaurierClassic1992) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(duMaurierClassic1992, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(duMaurierClassic1992, x) -> Participated(duMaurierClassic1992, x))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: ParticipatedIn(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (FromBelgium(x) & InSixWayTieOnLeaderboard(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboardOf(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboardOf(1992DuMaurierClassic, x) -> ParticipatedIn(1992DuMaurierClassic, x))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nF",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (FromBelgium(x) & OnLeaderboard(1992DuMaurierClassic, x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> Participated(1992DuMaurierClassic, x))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nF",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & exists x. (FromBelgium(x) & OnLeaderboard(1992DuMaurierClassic, x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Steinhauer"
   ],
   [
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (FromBelgium(x) & OnLeaderboard(1992DuMaurierClassic, x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> Participated(1992DuMaurierClassic, x))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nF",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (FromBelgium(x) & InSixWayTie(x, 1992DuMaurierClassic))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, 1992DuMaurierClassic) -> Participated(1992DuMaurierClassic, x))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & exists x. (FromBelgium(x) & InSixWayTie(1992DuMaurierClassic, x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic, x) -> Participated(1992DuMaurierClassic, x))\nTEXT: Steinhauer was",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> Participated(1992DuMaurierClassic, x))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(1992Du",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & exists x. (FromBelgium(x) & InSixWayTie(x, 1992DuMaurierClassic))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Steinhauer"
   ],
   [
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & exists x. (OnLeaderboard(1992DuMaurierClassic, x) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Steinhauer",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(duMaurierClassic1992, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (FromBelgium(x) & Leaderboard(duMaurierClassic1992, x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(duMaurierClassic1992, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(duMaurierClassic1992, x) -> Participated(duMaurierClassic1992, x))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (FromBelgium(x) & Leaderboard(1992DuMaurierClassic, x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic, x) -> Participated(1992DuMaurierClassic, x))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: (exists x. (Leaderboard(1992DuMaurierClassic) & -Winner(1992DuMaurierClassic, x)) & exists x. (Belgium(x) & Leaderboard(1992DuMaurierClassic)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Belgium(descampe) & Leaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic, x) -> Participated(1992DuMaurierClassic",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Belgium(x) & OnLeaderboard(1992DuMaurierClassic, x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Belgium(descampe) & OnLeaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL:"
   ]
  ]
 },
 {
  "index": 173,
  "responses": [
   [
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & FromBelgium(SomeoneInTie(x)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> Participated(1992DuMaurierClassic, x))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & exists y. (InTie(x, y) & FromBelgium(y)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> Participated(1992DuMaurierClassic, x))\nTEXT: Descampe is in the six-way tie in the leaderboard of the",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & exists x. (Belgium(x) & InTie(x, 1992DuMaurierClassic))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Belgium(descampe) & Leaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Descampe is in the six-way",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, Steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & exists x. (OnLeaderboard(1992DuMaurierClassic, x) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Descampe",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & exists x. (Belgium(x) & InSixWayTie(x, 1992DuMaurierClassic))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Belgium(descampe) & Leaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Descampe is in the"
   ],
   [
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, duMaurierClassic1992)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & exists y. (Member(x, y) & FromBelgium(y)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(descampe, duMaurierClassic1992)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x, duMaurierClassic1992) -> Participated(x, duMaurierClassic1992))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(LeaderboardOf1992DuMaurierClassic) & exists x. (Belgium(x) & InSixWayTie(x, LeaderboardOf1992DuMaurierClassic))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Belgium(descampe) & OnLeaderboard(descampe, LeaderboardOf1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, LeaderboardOf1992DuMaurierClassic) -> Participated(x, 1992DuMaur",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & exists x. (FromBelgium(x) & InSixWayTie(x, 1992DuMaurierClassic))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic, x) -> Participated(1992DuMaurierClassic, x))\nTEXT: Descampe is",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, Steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(LeaderboardOf1992DuMaurierClassic) & exists x. (Belgium(x) & InSixWayTie(x, LeaderboardOf1992DuMaurierClassic))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Belgium(Descampe) & OnLeaderboard(Descampe, LeaderboardOf1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, LeaderboardOf1992DuMaurierClassic) -> Participated(x, 1992Du",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, Steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & FromBelgium(Some(x)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic, x) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL:"
   ],
   [
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, duMaurierClassic1992)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & FromBelgium(some x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(duMaurierClassic1992, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(duMaurierClassic1992, x) -> Participated(x, duMaurierClassic1992))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: SixWay",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & exists x. (ParticipantInSixWayTie(x, 1992DuMaurierClassic) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT:",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & exists x. (OnLeaderboard(1992DuMaurierClassic, x) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> Participated(1992DuMaurierClassic, x))\nTEXT: Descampe is",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x, 1992DuMaurierClassic) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 199",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(Leaderboard) & FromBelgium(SomeoneInSixWayTie)\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> Participated(1992DuMaurierClassic, x))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\n"
   ],
   [
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, Steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & exists x. (ParticipantInSixWayTie(x, 1992DuMaurierClassic) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT:",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(duMaurierClassic1992, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(duMaurierClassic1992, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & exists y. (Member(x, y) & FromBelgium(y)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(duMaurierClassic1992, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(duMaurierClassic1992, x) -> Participated(duMaurierClassic1992, x))\n</PREMISES>\n<CONCLUSION>\nDescampe is in the six-way tie in the",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & exists y. (Member(x, y) & FromBelgium(y)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic, x) -> Participated(1992DuMaurierClassic, x))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x, 1992DuMaurierClassic) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(descampe, 1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(x, 1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 199",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & FromBelgium(someoneInTie(x)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> Participated(1992DuMaurierClassic, x))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier"
   ],
   [
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & exists x. (ParticipantOfSixWayTie(x, 1992DuMaurierClassic) & From(x, belgium))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: From(descampe, belgium) & Leaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic, x) -> Participated(x, 1992DuMaurierClassic))\nTEXT:",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> Participated(1992DuMaurierClassic, x))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: In",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & exists x. (ParticipantOfTie(x, 1992DuMaurierClassic) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic, x) -> Participated(x, 1992DuMaurierClassic))\nTEXT: Descampe is",
    "<EVALUATE>\nTEXT: The winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & FromBelgium(SomePersonInTie(x)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> Participated(1992DuMaurierClassic, x))\nTEXT: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic, steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: ParticipatedIn(1992DuMaurierClassic, steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (SixWayTie(x) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & OnLeaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> ParticipatedIn(1992DuMaurierClassic, x))\n</PREMISES>\n<CONCLUSION>\nDescampe is in the six-way tie in the leaderboard of the 1992"
   ]
  ]
 },
 {
  "index": 174,
  "responses": [
   [
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Bark(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jump(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiki) & -Legs(kiki) -> (Terricolous(kiki) | Legs(kiki))\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\nFOL: Terricolous(kiki)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiKi) & -HasLegs(kiKi) -> (Terricolous(kiKi) | HasLegs(kiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\nFOL: Terricolous(kiKi)\n</CONCLUSION>",
    "<PREMISES>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jumps(kiKi) & HasLegs(kiKi)) | (-Jumps(kiKi) & -HasLegs(kiKi)) -> (Terricolous(kiKi) | HasLegs(kiKi))\n</PREMISES>\n<CONCLUSION>\nTEXT: Ki",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jumps(kiKi) | HasLegs(kiKi)) -> (Terricolous(kiKi) | HasLegs(kiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\nFOL: Terricolous(kiKi)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks,",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Bark(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jump(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiki) & -HasLegs(kiki) -> Terricolous(kiki) | HasLegs(kiki)\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\nFOL: Terricolous(kiki)"
   ],
   [
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jumps(kiki) & HasLegs(kiki)) | (-Jumps(kiki) & -HasLegs(kiki)) -> (Terricolous(kiki) | HasLegs(kiki))\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\nFOL: Terr",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Legs(kiKi) -> (Terricolous(kiKi) | Legs(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Bark(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jump(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) | HasLegs(kiKi)) -> (Terricolous(kiKi) | HasLegs(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Bark(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jump(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -HasLegs(kiKi) -> (Terricolous(kiKi) | HasLegs(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<PREMISES>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -JaneLike(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> JaneLike(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (-Jumps(kiKi) & -HasLegs(kiKi)) -> (Terricolous(kiKi) | HasLegs(kiKi))\n</PREMISES>\n<CONCLUSION>\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n"
   ],
   [
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Leg(kiKi) -> (Terricolous(kiKi) | Leg(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Bark(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jump(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiki) & -HasLegs(kiki) -> (Terricolous(kiki) | HasLegs(kiki))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiki)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Legs(kiKi) -> (Terricolous(kiKi) | Legs(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiKi) & -HasLegs(kiKi) -> (Terricolous(kiKi) | HasLegs(kiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\nFOL: Terricolous(kiKi)\n</CONCLUSION>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiKi) & -HasLegs(kiKi) -> (Terricolous(kiKi) | HasLegs(kiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\nFOL: Terricolous(kiKi)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Legs(kiKi) -> (Terricolous(kiKi) | Legs(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (-Jumps(kiKi) & -HasLegs(kiKi)) -> (Terricolous(kiKi) | HasLegs(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<PREMISES>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLikes(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLikes(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Legs(kiKi) -> Terricolous(kiKi) | Legs(kiKi)\n</PREMISES>\n<CONCLUSION>\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</CONCLUSION>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLikes(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLikes(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiki) & -HasLegs(kiki) -> (Terricolous(kiki) | HasLegs(kiki))\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\nFOL: Terricolous(kiki)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x.",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) | Legs(kiKi)) -> (Terricolous(kiKi) | Legs(kiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\nFOL: Terricolous(kiKi)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all"
   ],
   [
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLike(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLike(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Leg(kiKi) -> (Terricolous(kiKi) | Leg(kiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) | HasLegs(kiKi)) -> ((Terricolous(kiKi) & -HasLegs(kiKi)) | (-Terricolous(kiKi) & HasLegs(kiKi)))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(kiKi",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLikes(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLikes(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -HasLegs(kiKi) -> (Terricolous(kiKi) | HasLegs(kiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\nFOL: Terricolous(kiKi)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nF",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Legs(kiKi) -> (Terricolous(kiKi) | Legs(kiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\nFOL: Terricolous(kiKi)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Legs(kiKi) -> (Terricolous(kiKi) | Legs(kiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\nFOL: Terricolous(kiKi)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. ("
   ]
  ]
 },
 {
  "index": 175,
  "responses": [
   [
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Legs(kiKi) -> (Terricolous(kiKi) | Legs(kiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</CONCLUSION>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiki) & -Legs(kiki) -> (Terricolous(kiki) | Legs(kiki))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\nFOL: Bark(kiki) & Dog(kiki)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiki) & -Leg(kiki) -> (Terricolous(kiki) | Leg(kiki))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\nFOL: Bark(kiki) & Dog(kiki)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiKi) & -HasLegs(kiKi) -> (Terricolous(kiKi) | HasLegs(kiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\nFOL: Barks(kiKi) & Dog(k",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiki) & -HasLegs(kiki) -> (Terricolous(kiki) | HasLegs(kiki))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\nFOL: Barks(kiki) & Dog(kiki)\n</CONCLUSION"
   ],
   [
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (-Jumps(kiki) & -HasLegs(kiki)) -> (Terricolous(kiki) | HasLegs(kiki))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\nFOL: Barks(kiki) & Dog(kiki)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal b",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiki) & -Legs(kiki) -> (Terricolous(kiki) | Legs(kiki))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiki) & Dog(kiki)\n</EVALUATE>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiKi) & HasLegs(kiKi)) | (-Jump(kiKi) & -HasLegs(kiKi) & (Terricolous(kiKi) | HasLegs(kiKi)))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiki) & -HasLegs(kiki) -> (Terricolous(kiki) | HasLegs(kiki))\nTEXT: KiKi barks and is a dog.\nFOL: Barks(kiki) & Dog(kiki)\n</EVALUATE>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Legs(kiKi) -> (Terricolous(kiKi) | Legs(kiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does"
   ],
   [
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiKi) & -HasLegs(kiKi) -> (Terricolous(kiKi) | HasLegs(kiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\nFOL: Barks(kiKi) & Dog(kiKi)\n</CONCLUSION>\n\n<EVALUATE>\n",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Animal(x) & Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiki) & -HasLegs(kiki) -> (Terricolous(kiki) | HasLegs(kiki))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiki) & Dog(kiki)\n</EVALUATE>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiKi) & -HasLegs(kiKi) -> (Terricolous(kiKi) | HasLegs(kiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\nFOL: Barks(kiKi) & Dog(kiKi)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLikes(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLikes(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Leg(kiKi) -> (Terricolous(kiKi) | Leg(kiKi))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</EVALUATE>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -JaneLike(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> JaneLike(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiKi) & -HasLegs(kiKi) -> (Terricolous(kiKi) | HasLegs(kiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\nFOL: Barks(kiKi) & Dog(k"
   ],
   [
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiki) & -Legs(kiki) -> (Terricolous(kiki) | Legs(kiki))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\nFOL: Bark(kiki) & Dog(kiki)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Legs(kiKi) -> (Terricolous(kiKi) | Legs(kiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Bark(x) -> -JaneLike(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jump(x) -> JaneLike(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (-Jump(kiKi) & -Leg(kiKi)) -> (Terricolous(kiKi) | Leg(kiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</CONCLUSION>",
    "<PREMISES>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiKi) & -HasLegs(kiKi) -> (Terricolous(kiKi) | HasLegs(kiKi))\n</PREMISES>\n<CONCLUSION>\nTEXT: KiKi barks and is a dog.\nFOL: Barks(kiKi",
    "<PREMISES>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Legs(kiKi) -> (Terricolous(kiKi) | Legs(kiKi))\n</PREMISES>\n<CONCLUSION>\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (-Jumps(kiki) & -HasLegs(kiki)) -> (Terricolous(kiki) | HasLegs(kiki))\n</PREMISES>\n<CONCLUSION>\nTEXT: KiKi barks and is a dog.\nFOL: Barks(kiki) & Dog(kiki)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT:",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLikes(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLikes(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Legs(kiKi) -> (Terricolous(kiKi) | Legs(kiKi))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLikes(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLikes(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Legs(kiKi) -> (Terricolous(kiKi) | Legs(kiKi))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</EVALUATE>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiki) & -Legs(kiki) -> (Terricolous(kiki) | Legs(kiki))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\nFOL: Bark(kiki) & Dog(kiki)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLike(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLike(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -HasLegs(kiKi) -> (Terricolous(kiKi) | HasLegs(kiKi))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(kiKi) & Dog(kiKi)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 176,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -JaneLikes(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Animal(x) & Barks(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> JaneLikes(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiKi) & -HasLegs(kiKi) -> Terricolous(kiKi) | HasLegs(kiKi)\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Barks(kiKi) & -Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiki) & -Legs(kiki) -> (Terricolous(kiki) | Legs(kiki))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiki) & -Dog(kiki)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiki) & -Legs(kiki) -> (Terricolous(kiki) | Legs(kiki))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiki) & -Dog(kiki)\n</EVALUATE>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jumps(kiKi) | HasLegs(kiKi)) -> (Terricolous(kiKi) | HasLegs(kiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi neither barks nor is a dog.\nFOL: -Barks(kiKi) & -",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (Jump(kiki) & -HasLegs(kiki)) | (-Jump(kiki) & HasLegs(kiki)) -> (Terricolous(kiki) | HasLegs(kiki))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiki) & -Dog(kiki)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLikes(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLikes(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiki) & -HasLegs(kiki) -> (Terricolous(kiki) | HasLegs(kiki))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiki) & -Dog(kiki)\n</EVALUATE>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Leg(kiKi) -> Terricolous(kiKi) | Leg(kiKi)\n</PREMISES>\n<CONCLUSION>\nKiKi neither barks nor is a dog.\nFOL: -Bark(kiKi) & -Dog(kiKi)\n</CONCLUSION>",
    "<PREMISES>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Barks(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiKi) & -HasLegs(kiKi) -> (Terricolous(kiKi) | HasLegs(kiKi))\n</PREMISES>\n<CONCLUSION>\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Barks(kiKi) & -Dog(kiKi)\n</CONCLUSION>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiki) & -Leg(kiki) -> (Terricolous(kiki) | Leg(kiki))\n</PREMISES>\n<CONCLUSION>\nKiKi neither barks nor is a dog.\nFOL: -Bark(kiki) & -Dog(kiki)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\n",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiKi) & -HasLegs(kiKi) -> (Terricolous(kiKi) | HasLegs(kiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Barks(kiKi) & -Dog(kiKi)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiki) & -Legs(kiki) -> (Terricolous(kiki) | Legs(kiki))\n</PREMISES>\n<CONCLUSION>\nKiKi neither barks nor is a dog.\nFOL: -Bark(kiki) & -Dog(kiki)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -JaneLikes(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> JaneLikes(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiki) & -HasLegs(kiki) -> (Terricolous(kiki) | HasLegs(kiki))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Barks(kiki) & -Dog(kiki)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Legs(kiKi) -> (Terricolous(kiKi) | Legs(kiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiKi) & -Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiki) & -Legs(kiki) -> (Terricolous(kiki) | Legs(kiki))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiki) & -Dog(kiki)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLike(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Animal(x) & Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLike(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Leg(kiKi) -> (Terricolous(kiKi) | Leg(kiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiKi) & -Dog(kiKi)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLikes(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLikes(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiki) & -Legs(kiki) -> (Terricolous(kiki) | Legs(kiki))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiki) & -Dog(kiki)\n</EVALUATE>",
    "<PREMISES>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLikes(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLikes(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Legs(kiKi) -> (Terricolous(kiKi) | Legs(kiKi))\n</PREMISES>\n<CONCLUSION>\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiKi) & -Dog(kiKi)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If",
    "<PREMISES>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Legs(kiKi) -> (Terricolous(kiKi) | Legs(kiKi))\n</PREMISES>\n<CONCLUSION>\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiKi) & -Dog(kiKi)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Legs(kiKi) -> (Terricolous(kiKi) | Legs(kiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiKi) & -Dog(kiKi)\n</EVALUATE>",
    "<PREMISES>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(kiKi) & -HasLegs(kiKi) -> (Terricolous(kiKi) | HasLegs(kiKi))\n</PREMISES>\n<CONCLUSION>\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Barks(kiKi) & -Dog(kiKi)\n</CON"
   ],
   [
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLike(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLike(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Leg(kiKi) -> (Terricolous(kiKi) | Leg(kiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiKi) & -Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiki) & -Legs(kiki) -> (Terricolous(kiki) | Legs(kiki))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiki) & -Dog(kiki)\n</EVALUATE>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Barks(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (-Jumps(kiKi) & -HasLegs(kiKi)) -> (Terricolous(kiKi) | HasLegs(kiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi neither barks nor is a dog.\nFOL: -Barks(kiKi) &",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLikes(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLikes(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Legs(kiKi) -> (Terricolous(kiKi) | Legs(kiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiKi) & -Dog(kiKi)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLike(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLike(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Leg(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs.\nFOL: all x. (Terricolous(x) -> Leg(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(kiKi) & -Leg(kiKi) -> (Terricolous(kiKi) | Leg(kiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(kiKi) & -Dog(kiKi)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 177,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Braga, Ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazilianFootballer(AiltonSilva) & PlaysFor(Nautico, AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & Nautico = Braga\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(Nautico, x) & Brazilian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(1995, ailtonSilva) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameTeam(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, nautico) & Brazillian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Ailton = AiltonSilva & BornIn(1995, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazilianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, Nautico) & Brazilian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Braga, Ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(Nautico, AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & -Equals(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(Nautico, x) & Brazilian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn1995(Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedToBraga(Ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysForNautico(AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & Nautico = Braga\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysForNautico(x) & Brazillian(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) & CommonlyKnownAs(Ailton, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (PlaysFor(x, Nautico) -> -Brazilian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Ailton = AiltonSilva\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: Brazillian(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, Nautico) & Brazillian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Ailton = AiltonSilva\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazilianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, Nautico) & Brazilian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn1995(Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Braga, Ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: Brazillian(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(Nautico, AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(Nautico, x) & Brazillian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailton) & BornIn(ailton, 1995)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, nautico) & Brazilian(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(1995, ailtonSilva) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazilianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameAs(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, nautico) & Brazilian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(1995, AiltonSilva) & CommonlyKnownAs(AiltonSilva, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazilianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, Nautico) & Brazilian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & Ailton(ailtonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, nautico) & Brazillian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Ailton = AiltonSilva\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & FootballPlayer(AiltonSilva) & PlaysFor(AiltonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & - (nautico = braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, nautico) & Brazillian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Ailton = AiltonSilva\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: Brazillian(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, nautico) & Brazillian(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailton) & BornIn(1995, ailton) -> CommonlyKnownAs(ailton, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: AiltonSilva(ailton) & Brazillian(ailton) & Footballer(ailton) & PlaysFor(ailton, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameTeam(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, nautico) & Brazillian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailton) & BornIn(1995, ailton) & CommonlyKnownAs(ailton, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva(ailton)) & PlaysFor(AiltonSilva(ailton), nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, nautico) & Brazillian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(1995, ailtonSilva) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOutTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, nautico) & Brazillian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameTeam(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, Nautico) & Brazillian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazilianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, nautico) & Brazilian(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Ailton = AiltonSilva\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazilianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, Nautico) & Brazilian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Ailton = AiltonSilva\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: Brazilian(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameTeam(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, Nautico) & Brazilian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(1995, AiltonSilva) & CommonlyKnownAs(AiltonSilva, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & (Nautico = Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, Nautico) & Brazillian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailtonSilva) & BornIn(1995, ailtonSilva) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, nautico) & Brazillian(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & Nautico = Braga\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: No one playing for Nautico is Brazilian.\nFOL: -exists x. (PlaysFor(x, Nautico) & Brazillian(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 178,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Ailton = AiltonSilva\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: Brazillian(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club.\nFOL: FootballClub(Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & (Nautico = Braga) | (Nautico \u2260 Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva does not play for a football club.\nFOL: -PlaysFor(AiltonSilva, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailton) & BornIn(ailton, 1995)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva(ailton)) & PlaysFor(AiltonSilva(ailton), nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(AiltonSilva(ailton), FootballClub(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOutTo(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & Nautico = Braga\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(AiltonSilva, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & Ailton(ailtonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva does not play for a football club.\nFOL: -PlaysFor(ailtonSilva, x) | -FootballClub(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(1995, ailtonSilva) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameAs(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(ailtonSilva, FootballClub)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailton) & BornIn(1995, ailton) & CommonlyKnownAs(ailton, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & (nautico = braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(AiltonSilva, fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn1995(Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Braga, Ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(Nautico, AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & -Equals(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(AiltonSilva, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & Ailton(ailtonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & -Equals(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(ailtonSilva, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & Ailton(ailtonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(ailtonSilva, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) & CommonlyKnownAs(Ailton, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & -Equals(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(AiltonSilva, FootballClub)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & FootballPlayer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameFootballClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(ailtonSilva, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailtonSilva) & BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameTeam(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(ailtonSilva, fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & Alias(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(ailtonSilva, fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Ailton = AiltonSilva\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & -Equals(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(AiltonSilva, Fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(ailtonSilva, FootballClub(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & Ailton(ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & Footballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameAs(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(ailtonSilva, footballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(1995, AiltonSilva) & CommonlyKnownAs(AiltonSilva, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & -Equals(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(AiltonSilva, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & Alias(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & (nautico = braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(ailtonSilva, footballClub)\n</EVALUATE>",
    "<PREMISES>\nAilton Silva, born in 1995, is commonly known as Ailton.\nFOL: BirthYear(ailtonSilva, 1995) & CommonName(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: Brazillian(ailtonSilva) & Footballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameType(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(ailtonSilva, footballClub)\n</PREMISES>\n<EVALUATE>\nTEXT: A football club is a football club.\nFOL: footballClub(x) -> footballClub",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & Alias(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameTeam(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(ailtonSilva, footballClub)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailton) & BornIn(1995, ailton) & Ailton(ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailton) & PlaysFor(ailton, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameAs(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(ailton, fluminense) & -PlaysFor(ailton, nautico) & -PlaysFor(ailton, braga)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & Ailton(ailtonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva does not play for a football club.\nFOL: -PlaysFor(ailtonSilva, footballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) & CommonlyKnownAs(Ailton, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & -Equals(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(AiltonSilva, FootballClub)\n</EVALUATE>",
    "<PREMISES>\nAilton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & Alias(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & FootballerFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club.\nFOL: FootballClub(nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -FootballerFor(ailtonSilva, fluminense)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & -Equals(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva foes not play for a football club.\nFOL: -PlaysFor(ailtonSilva, footballClub)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 179,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailton) & BornIn(1995, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailton) & PlaysFor(ailton, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & equals(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedOut(ailton, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(1995, ailtonSilva) & CommonlyKnownAs(ailton, ailtonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & (nautico = braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOut(ailton, footballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailton, 1995) & CommonlyKnownAs(ailton, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & (nautico = braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedOut(ailton, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(1995, ailtonSilva) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOut(ailton, FootballClub(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & Nautico = Braga\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedTo(Ailton, x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailton, 1995) & CommonlyKnownAs(ailton, ailtonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedOut(ailton, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(1995, ailtonSilva) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameTeam(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOut(ailton, footballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Ailton = AiltonSilva\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOutTo(Ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & -Ailton = braga\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutTo(Ailton,?x) | -FootballClub(?x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & SameName(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedOut(ailton, x))\n</EVALUATE>",
    "<PREMISES>\nAilton Silva, born in 1995, is commonly known as Ailton.\nFOL: BirthYear(ailtonSilva, 1995) & Alias(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\n</PREMISES>\n<CONCLUSION>\nAilton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedTo(ailton, x))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Ailton = AiltonSilva\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOut(Ailton, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Ailton = AiltonSilva\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOut(Ailton, footballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOut(Ailton, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Ailton = AiltonSilva\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & Nautico = Braga\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedOut(Ailton, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedOut(ailton, x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(1995, ailtonSilva) & Ailton(ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: Brazillian(ailtonSilva) & Footballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & -SameTeam(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOut(ailton, footballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(1995, AiltonSilva) & CommonlyKnownAs(Ailton, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & (Nautico = Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedOut(Ailton, x))\n</EVALUATE>",
    "<PREMISES>\nAilton Silva, born in 1995, is commonly known as Ailton.\nFOL: BirthYear(ailtonSilva, 1995) & SamePerson(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedTo(ailton, x))\n</PREMISES>\n<CONCLUSION>\nAilton was not loaned out to a football club.\nFOL: -exists x. (Football",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Ailton = AiltonSilva\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club.\nFOL: FootballClub(Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedOut(Ailton, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: Brazillian(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedOut(Ailton, x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) & Alias(Ailton, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & FootballPlayer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -exists x. (FootballClub(x) & LoanedTo(Ailton, x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailton, 1995) & CommonlyKnownAs(ailton, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & -Equals(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOut(ailton, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) & CommonlyKnownAs(Ailton, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & AlongWith(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOut(Ailton, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailton) & BornIn(1995, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & -Equal(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOut(ailton, FootballClub(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(1995, ailtonSilva) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOutTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & -Equals(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton was not loaned out to a football club.\nFOL: -LoanedOutTo(ailton, footballClub)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 180,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(ailtonSilva, fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOutTo(Braga, Ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(Nautico, AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(Fluminense, AiltonSilva)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn1995(Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedToBraga(Ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysForNautico(AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(Fluminense, AiltonSilva)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & -Equals(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(ailtonSilva, fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Ailton = AiltonSilva\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: Brazillian(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(AiltonSilva, Fluminense)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BirthYear(ailtonSilva, 1995) & SameName(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & FootballClub(nautico) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & -Equals(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(ailtonSilva, fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn1995(Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Braga, Ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(Nautico, AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(Fluminense, AiltonSilva)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameTeam(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(ailtonSilva, fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Ailton = AiltonSilva\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & (Nautico = Braga) | (Nautico!= Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(AiltonSilva, Fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & -Equals(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(ailtonSilva, fluminense)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(ailtonSilva, fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(1995, ailtonSilva) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOutTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(ailtonSilva, fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) & SamePerson(Ailton, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: Brazillian(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(AiltonSilva, Fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Ailton = AiltonSilva\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: Brazillian(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & -Equals(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(AiltonSilva, Fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn1995(Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOutTo(Braga, Ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(Nautico, AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(Fluminense, AiltonSilva)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Braga, Ailton)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: Brazillian(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(Nautico, AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & -Equals(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(Fluminense, AiltonSilva)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(Ailton, 1995)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(AiltonSilva, Fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & SameName(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & FootballPlayer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(ailtonSilva, fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & SameName(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameTeam(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(ailtonSilva, fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(AiltonSilva, Fluminense)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) & CommonlyKnownAs(Ailton, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(AiltonSilva, Fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: Brazillian(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & -Equals(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(AiltonSilva, Fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(Ailton, 1995)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(AiltonSilva, Fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Ailton = AiltonSilva\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: Brazillian(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & - (Nautico = Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(AiltonSilva, Fluminense)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(1995, ailtonSilva) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameTeam(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva played for Fluminense.\nFOL: PlayedFor(ailtonSilva, fluminense)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 181,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Ailton = AiltonSilva\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(AiltonSilva, footballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameTeam(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(AiltonSilva,?x) & FootballClub(?x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) & SamePerson(Ailton, AiltonSilva)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & SameClub(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(AiltonSilva, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailtonSilva) & BornIn(ailtonSilva, 1995) & Ailton(ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & FootballPlayer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & -Equals(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(ailtonSilva, footballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Ailton = AiltonSilva\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & - (Nautico = Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(AiltonSilva, FootballClub)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & -Equals(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(AiltonSilva, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(ailtonSilva, FootballClub(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & SamePerson(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & FootballPlayer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameFootballClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(ailtonSilva, FootballClub(X))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Ailton = AiltonSilva\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(AiltonSilva,?x) & FootballClub(?x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(ailtonSilva, footballClub)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(ailtonSilva, FootballClub(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Ailton = AiltonSilva\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(AiltonSilva,?x) & FootballClub(?x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(ailtonSilva, x) & FootballClub(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Ailton = AiltonSilva\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & Nautico = braga\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(AiltonSilva, x) & FootballClub(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(1995, ailtonSilva) & Alias(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & Footballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(ailtonSilva, FootballClub)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(Ailton, 1995)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedTo(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: Brazillian(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & -Equals(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedTo(AiltonSilva, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & Nautico = Braga\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(AiltonSilva,?x) & FootballClub(?x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(ailtonSilva, FootballClub(?))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(ailtonSilva, x) & FootballClub(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Ailton = AiltonSilva & BornIn(1995)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(AiltonSilva, footballClub)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(Ailton) & BornIn(1995, Ailton) & CommonlyKnownAs(Ailton, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & -Equals(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(AiltonSilva, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(1995, ailtonSilva) & SamePerson(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(ailtonSilva, FootballClub(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailton) & BornIn(ailton, 1995)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & -Equals(Nautico, Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(AiltonSilva, FootballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: AiltonSilva(ailtonSilva) & BornIn(1995, ailtonSilva) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOutTo(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & -Equals(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOutTo(ailtonSilva, footballClub)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: BornIn(ailtonSilva, 1995) & CommonlyKnownAs(ailtonSilva, ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailtonSilva) & PlaysFor(ailtonSilva, nautico)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga) & SameClub(nautico, braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\nTEXT: Ailton Silva was loaned out to a football club.\nFOL: LoanedOut(ailtonSilva, footballClub)\n</EVALUATE>"
   ]
  ]
 }
]