[
 {
  "index": 0,
  "responses": [
   [
    "<PREMISES>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(amy) & -Inactive(amy) & -Disinterested(amy)) | (-PerformInTalentShows(amy) & Inactive(amy) & Disinterested(amy))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x) & Attend(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (Inactive(x) & Disinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (Young(x) & AcademicGoals(x) -> Student(x) & Attend(x))\nTEXT: Bonnie either both",
    "<PREMISES>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (OftenPerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (OftenPerformInTalentShows(amy) | -InactiveAndDisinterested(amy))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagers(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged",
    "<PREMISES>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (OftenPerform(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (OftenPerform(x) | -Inactive(x) & -Disinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (-Inactive(x) & -Disinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (Young(x) & WantToFurtherAcademic(x) & Educational(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(amy) | -InactiveAndDisinterested(amy))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagers(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. \n",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(amy) | -InactiveAndDisinterested(amy))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagers(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor"
   ],
   [
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShow(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShow(x) | -Inactive(x) & -Disinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (-Inactive(x) & -Disinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (Young(x) & Teenager(x) & WantToFurther(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(people) | -InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChild(x) & Teenager(x) & AcademicCareer(x) & EducationalOpportunity(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school,",
    "<PREMISES>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(amy) & -InactiveAndDisinterested(amy)) | (-PerformInTalentShows(amy) & InactiveAndDisinterested(amy))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChild(x) & Teenager(x) & WantsToFurtherAcademicCareer(x) & WantsToFurtherEducationalOpportunities(x) -> Student(x))\nTEXT",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(amy) | -InactiveDisinterested(amy))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildTeenager(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. \nFOL",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows( Bonnie) | (InactiveAndDisinterested( Bonnie)))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagers(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. \n"
   ],
   [
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(amy) | -InactiveDisinterested(amy))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildTeenager(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. \nFOL",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(people) | -InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) & WantToFurtherAcademicCareers -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor",
    "<PREMISES>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(amy) | -InactiveAndDisinterested(amy))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenAndTeenagers(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(amy) | -InactiveDisinterested(amy))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildTeenager(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. \nFOL",
    "<PREMISES>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShow(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShow(amy) | -InactiveAndDisinterested(amy))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x) & Attend(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (Student(x) -> YoungChildrenAndTeenagers(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student"
   ],
   [
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(x) | -InactiveCommunityMember(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x) & -Attend(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveCommunityMember(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChild(x) & Teenager(x) & WishToFurtherAcademicCareers(x) -> Student(x) & Attend(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither",
    "<PREMISES>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(amy) | (-InactiveDisinterested(amy)))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildTeenager(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. \n",
    "<PREMISES>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShow(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShow(amy) | (-Inactive(amy) & -Disinterested(amy)))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (Inactive(x) & Disinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChild(x) & Teenager(x) & WantToFurtherAcademicCareers -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she",
    "<PREMISES>\nTEXT: If people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(amy) | -InactiveDisinterestedMember(amy))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x) & Attend(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveDisinterestedMember(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildrenTeenagersWishingToFurtherAcademicCareers(x) -> Student(x) & Attend(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(people) | (-Inactive(x) & -Disinterested(x)))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (-Inactive(x) & -Disinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChild(x) & Teenager(x) & WantsToFurtherAcademicCareers -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is"
   ],
   [
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (OftenPerform(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (OftenPerform(x) | -Inactive(x) & -Disinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (Inactive(x) & Disinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (Young(x) & DesireToLearn(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. \nF",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (OftenPerform(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (OftenPerform(x) | -Inactive(x) & -Disinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (Inactive(x) & Disinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (WantsToAttend(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie((",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(amy) & -InactiveAndDisinterested(amy)) | (-PerformInTalentShows(amy) & InactiveAndDisinterested(amy))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildTeenager(x) & AcademicCareerOpportunity(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(amy) | -InactiveDisinterested(amy))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneDance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveDisinterested(x) -> ChaperoneDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildTeenager(x) & AcademicCareer(x) & EducationalOpportunity(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(x) | -InactiveAndDisinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. \nF"
   ]
  ]
 },
 {
  "index": 1,
  "responses": [
   [
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(x) & -InactiveCommunityMember(x)) | (-PerformInTalentShows(x) & InactiveCommunityMember(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneDance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveCommunityMember(x) -> ChaperoneDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(people) | -InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nF",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(people) | (-InactiveCommunityMember(people) & -DisinterestedCommunityMember(people)))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneDance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveCommunityMember(x) & DisinterestedCommunityMember(x) -> ChaperoneDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildTeenager(x) & EducationalGoals(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(people) | -InactiveCommunityMember(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveCommunityMember(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. \nFOL",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(amy) & -InactiveAndDisinterested(amy)) | (-PerformInTalentShows(amy) & InactiveAndDisinterested(amy))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChild(x) & Teenager(x) & WishToFurther(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a"
   ],
   [
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(people) | -InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChild(x) & Teenager(x) & WishToFurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(x) | -InactiveAndDisinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChild(x) | YoungTeenager(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (OftenPerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (OftenPerformInTalentShows(people) | -InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> ChaperoneHighSchoolDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(amy) & -InactiveAndDisinterested(amy)) | (-PerformInTalentShows(amy) & InactiveAndDisinterested(amy))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChild(x) & Teenager(x) & WishToFurtherAcademicCareer(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShow(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShow(x) | -Inactive(x) & -Disinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (Inactive(x) & Disinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChild(x) & Teenager(x) & WantsToFurtherAcademicCareer(x) & WantsToFurtherEducationalOpportunities(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student"
   ],
   [
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(people) | (-InactiveAndDisinterested(people)))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChild(x) & YoungTeenager(x) & AcademicGoals(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (OftenPerform(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (OftenPerform(x) | -InactiveCommunity(x)) \nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveCommunity(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildTeenager(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. \nFOL: Bonnie((Attend(Bonnie) &",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(people) | -InactiveCommunityMember(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneDance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveCommunityMember(x) -> ChaperoneDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildTeenager(x) & EducationalGoals(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(x) & -Inactive(x) & -Disinterested(x)) | (-PerformInTalentShows(x) & Inactive(x) & Disinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x) & Attend(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (Inactive(x) & Disinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChild(x) & Teenager(x) & AcademicCareer(x) & EducationalOpportunities(x) -> Student(x) & Attend(x",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(amy) & -InactiveDisinterested(amy)) | (-PerformInTalentShows(amy) & InactiveDisinterested(amy))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildTeenager(x) & WishToFurtherAcademic(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the"
   ],
   [
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (OftenPerform(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (OftenPerform(x) | -Inactive(x) & -Disinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x) & Attend(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (Inactive(x) & Disinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChild(x) & Teenager(x) & WishToFurther(x) -> Student(x) & Attend(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(people) | -InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\n",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(people) | -InactiveCommunity(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveCommunity(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: (",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (OftenPerform(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (OftenPerform(x) & -Inactive(x) & -Disinterested(x)) | (-OftenPerform(x) & Inactive(x) & Disinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (Inactive(x) & Disinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChild(x) & Teenager(x) & WishToFurther(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school,",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & Engaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(x) | -Inactive(x) & -Disinterested(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x) & -Attend(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (Inactive(x) & Disinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChild(x) & Teenager(x) & WishToFurtherAcademicCareer(x) & WishToFurtherEducationalOpportunities(x) -> Student(x) & Attend(x))\nTEXT: Bonnie either both attends and is very"
   ],
   [
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (OftenPerformInTalentShows(x) -> Attend(x) & VeryEngaged(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (OftenPerformInTalentShows(people) | -InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x) & Attend(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildOrTeenager(x) -> Student(x) & Attend(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (OftenPerformInTalentShows(x) -> Attend(x) & VeryEngaged(x))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (OftenPerformInTalentShows(people) | -InactiveAndDisinterested(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveAndDisinterested(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChild(x) | Teenager(x) | WishToFurtherAcademicCareers(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShow(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShow(x) | -InactiveCommunityMember(x))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveCommunityMember(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildTeenager(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nFOL: Bonnie((Attend",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShows(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShows(people) | -InactiveDisinterestedCommunity(people))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (Chaperone(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveDisinterestedCommunity(x) -> Chaperone(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChildTeenager(x) -> Student(x))\nTEXT: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nF",
    "<PREMISES>\nIf people perform in school talent shows often, then they attend and are very engaged with school events.\nFOL: all x. (PerformInTalentShow(x) -> (Attend(x) & VeryEngaged(x)))\nTEXT: People either perform in school talent shows often or are inactive and disinterested members of their community.\nFOL: (PerformInTalentShow(people) | (-InactiveCommunityMember(people) & -DisinterestedCommunityMember(people)))\nTEXT: If people chaperone high school dances, then they are not students who attend the school.\nFOL: all x. (ChaperoneHighSchoolDance(x) -> -Student(x))\nTEXT: All people who are inactive and disinterested members of their community chaperone high school dances.\nFOL: all x. (InactiveCommunityMember(x) & DisinterestedCommunityMember(x) -> ChaperoneHighSchoolDance(x))\nTEXT: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\nFOL: all x. (YoungChild(x) & Teenager(x) & AcademicCareerGoals(x) & EducationalGoals(x) -> Student(x))\nTEXT: Bonnie either both attends and"
   ]
  ]
 },
 {
  "index": 2,
  "responses": [
   [
    "<PREMISES>\nall x. (Employee(x) -> MeetingWithCustomers(x) -> AppearsInCompany(x))\nall x. (HasLunch(x) -> MeetingWithCustomers(x))\nall x. (Employee(x) -> (HasLunch(x) | HasLunchAtHome(x)))\nall x. (-Manager(x) -> -WorksRemotelyFromHome(x))\nJames (x & (Manager(x) | -AppearsInCompany(x)))\n</PREMISES>\n<CONCLUSION>\nHasLunch(james)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Employee(x) -> (MeetingWithCustomers(x) -> AppearsInCompany(x)))\nall x. (HasLunch(x) -> MeetingWithCustomers(x))\nall x. ((Employee(x) & -HasLunch(x)) | (-Employee(x) & -HasLunch(x)))\nall x. (-Manager(x) ->!RemoteWorkFromHome(x))\nJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\n</PREMISES>\n<CONCLUSION>\nHasLunch(james)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Employee(x) -> (MeetingWithCustomers(x) -> AppearsToday(x)))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> MeetingWithCustomers(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (LunchInCompany(x) | LunchAtHome(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> RemoteWorkFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (Country(x) & NotInCountry(x) -> RemoteWorkFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -RemoteWorkFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearsToday(james)) | (-Manager(james) & -AppearsToday(james)))\nTEXT:",
    "<PREMISES>\nall x. (Employee(x) -> SchedulesMeeting(x, Customer(x)) -> AppearsInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> SchedulesMeeting(x, Customer(x)))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (LunchInCompany(x) | LunchAtHome(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkingRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (Employee(x) & Country(x) = OtherCountries -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: James((Manager(James) & AppearsInCompany(James)) |",
    "<PREMISES>\nall x. (Employee(x) -> (ScheduleMeeting(x, Customer(x)) -> AppearsInCompany(x)))\nall x. (HasLunch(x) -> ScheduleMeeting(x, Customer(x)))\nall x. (Employee(x) -> (HasLunch(x) | HasLunchAtHome(x)))\nall x. ((Employee(x) & -IsInOtherCountry(x)) -> HasLunchAtHome(x))\nall x. (-Manager(x) -> -HasLunchAtHome(x))\nJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\n</PREMISES>\n<CONCLUSION>\nHasLunch(James)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Employee(x) -> SchedulesMeeting(x, Customer(x)) -> AppearsInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (Lunch(x) -> SchedulesMeeting(x, Customer(x)))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (Lunch(x, Company) | Lunch(x, Home)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (Employee(x) -> (Lunch(x, Home) -> WorkRemotelyFromHome(x)))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (Employee(x) & InCountry(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: James((Manager(james) & AppearsInCompany(james))",
    "<PREMISES>\nall x. (Employee(x) -> (MeetWithCustomer(x) -> AppearsInCompany(x)))\nall x. (HasLunch(x) -> MeetWithCustomer(x))\nall x. (Employee(x) -> (HasLunch(x) | HasLunchAtHome(x)))\nall x. (-Manager(x) -> -WorksRemotelyFromHome(x))\nall x. (Employee(x) -> (CountryOf(x)!= CountryOfAll() -> WorksRemotelyFromHome(x)))\nall x. (-Manager(x) -> -WorksRemotelyFromHome(x))\nJames is either Manager(james) & AppearsInCompany(james) | -Manager(james) & -AppearsInCompany(james)\n</PREMISES>\n<CONCLUSION>\nHasLunch(james)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Employee(x) -> (SchedulesMeeting(x, Customer(x)) -> AppearsInCompany(x)))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> SchedulesMeeting(x, Customer(x)))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (LunchInCompany(x) | -LunchInCompany(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: -LunchInCompany(x) -> WorkFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (Country(x) -> WorkFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: -Manager(x) -> WorkFromHome(x)\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearsInCompany(james)) | (-Manager(james) & -AppearsInCompany(james)))\nTEXT: James has lunch in the",
    "<PREMISES>\nall x. (Employee(x) -> ScheduleMeeting(x, Customer(x)) -> AppearInCompany(x))\nall x. (Lunch(x) -> ScheduleMeeting(x, Customer(x)))\nall x. (Employee(x) -> (Lunch(x) | LunchAtHome(x)))\nall x. (Employee(x) -> (LunchAtHome(x) -> WorkRemotelyFromHome(x)))\nall x. (Employee(x) -> (Country(x)!= CountryOfCompany(x) -> WorkRemotelyFromHome(x)))\nall x. (Employee(x) -> -WorkRemotelyFromHome(x))\nJames (Employee(james) & ((Manager(james) & AppearInCompany(james)) | - (Manager(james) & AppearInCompany(james))))\n</PREMISES>\n<CONCLUSION>\nLunch(james)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Employee(x) -> ScheduleMeeting(x, Customer(x)) -> AppearsInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x, Customer(x)))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (LunchInCompany(x) | LunchAtHome(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> RemoteWorkFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (Employee(x) & Country(x) -> RemoteWorkFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -RemoteWorkFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: (Manager(james) & AppearsInCompany(james)) | (-Manager(james) & -AppearsInCompany(j"
   ],
   [
    "<PREMISES>\nall x. (Employee(x) -> (MeetingWithCustomers(x) -> AppearsInCompany(x)))\nall x. (HasLunch(x) -> MeetingWithCustomers(x))\nall x. (Employee(x) -> (HasLunch(x) | HasLunchAtHome(x)))\nall x. ((Employee(x) &!Manager(x)) -> HasLunchAtHome(x))\nall x. (Employee(x) &!Country(x) -> HasLunchAtHome(x))\nall x. (Manager(x) ->!HasLunchAtHome(x))\nJames ((Manager(james) & AppearsInCompany(james)) | (!Manager(james) &!AppearsInCompany(james)))\n</PREMISES>\n<CONCLUSION>\nJames HasLunch(james)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Employee(x) -> (MeetingWithCustomer(x) -> AppearsInCompany(x)))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> MeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (LunchInCompany(x) | LunchAtHome(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (Country(x) & -InCountry(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: James((Manager(james) & AppearsInCompany(james)) | (-Manager(james) &",
    "<PREMISES>\nall x. (Employee(x) -> ScheduleMeeting(x, Customer(x)) -> AppearsInCompany(x))\nall x. (Employee(x) & HasLunch(x) -> ScheduleMeeting(x, Customer(x)))\nall x. (Employee(x) | HasLunch(x) -> HasLunch(x))\nall x. (Employee(x) & HasLunch(x) -> RemoteWorkFromHome(x))\nall x. (Employee(x) & NotManager(x) -> RemoteWorkFromHome(x))\nJames (Either (Manager(James) & AppearsInCompany(James)) | - (Manager(James) & AppearsInCompany(James)) | - AppearsInCompany(James))\n</PREMISES>\n<CONCLUSION>\nHasLunch(James)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Employee(x) -> MeetingWithCustomer(x) -> AppearsInCompany(x))\nall x. (HasLunch(x) -> MeetingWithCustomer(x))\nall x. (Employee(x) -> (HasLunch(x) | HasLunchAtHome(x)))\nall x. (Employee(x) & NotManager(x) -> HasLunchAtHome(x))\nall x. (NotInOtherCountries(x) -> HasLunchAtHome(x))\nall x. (NotManager(x) ->!HasLunchAtHome(x))\nJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\n</PREMISES>\n<CONCLUSION>\nJames has lunch in the company.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (Employee(x) & MeetingWithCustomer(x) -> AppearsInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HasLunch(x) -> MeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\n",
    "<PREMISES>\nall x. (Employee(x) -> MeetingWithCustomer(x) -> AppearsToday(x))\nall x. (HasLunch(x) -> MeetingWithCustomer(x))\nall x. (Employee(x) -> (HasLunch(x) | HasLunchAtHome(x)))\nall x. (Employee(x) & -Manager(x) -> HasLunchAtHome(x))\nall x. (Employee(x) & Country(x)!= Country(\"other\") -> HasLunchAtHome(x))\nall x. (Manager(x) -> -HasLunchAtHome(x))\nJames is either Manager(james) & AppearsToday(james) | -Manager(james) & -AppearsToday(james)\n</PREMISES>\n<CONCLUSION>\nHasLunch(james)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Employee(x) -> (ScheduleMeeting(x, Customer(x)) -> AppearsInCompany(x)))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> SchedulesMeetings(x, Customer(x)))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (LunchInCompany(x) | LunchAtHome(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkingRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (Employee(x) & NotInCountry(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: James ((Manager(James) & AppearsInCompany(James)) |",
    "<PREMISES>\nall x. (Employee(x) -> ScheduleMeeting(x, Customer(x)) -> Appear(x, Company(x)))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (Lunch(x, Company(x)) -> ScheduleMeeting(x, Customer(x)))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (Lunch(x, Company(x)) | Lunch(x, Home(x))))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (Lunch(x, Home(x)) -> WorkRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (Country(x) -> (Employee(x) -> WorkRemotelyFromHome(x)))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & Appear(james, Company",
    "<PREMISES>\nall x. (Employee(x) -> ScheduleMeeting(x, Customer(x)) -> AppearsInCompany(x))\nall x. (HasLunch(x) -> ScheduleMeeting(x, Customer(x)))\nall x. (Employee(x) -> (HasLunch(x) | HasLunchAtHome(x)))\nall x. (HasLunchAtHome(x) -> WorkRemotelyFromHome(x))\nall x. (Country(x)!= Country('other') -> WorkRemotelyFromHome(x))\nall x. (Manager(x) -> -WorkRemotelyFromHome(x))\nJames : x. (Manager(x) | -Manager(x) & AppearsInCompany(x))\n</PREMISES>\n<CONCLUSION>\nJames : x. (HasLunch(x) | HasLunchAtHome(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Employee(x) -> (MeetWithCustomer(x) -> AppearsToday(x)))\nall x. (Lunch(x) -> MeetWithCustomer(x))\nall x. (Employee(x) -> (Lunch(x) | LunchAtHome(x)))\nall x. (Employee(x) & NotManager(x) -> LunchAtHome(x))\nall x. (Employee(x) & NotInOtherCountry(x) -> LunchAtHome(x))\nall x. (NotManager(x) -> -LunchAtHome(x))\nJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\n</PREMISES>\n<CONCLUSION>\nJames has lunch in the company.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today.\nFOL: all x. (Employee(x) -> (MeetWithCustomer(x) -> AppearsToday(x)))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (Lunch(x) -> MeetWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee",
    "<PREMISES>\nall x. (Employee(x) -> ScheduleMeeting(x, Customer(x)) -> AppearsToday(x))\nall x. (HasLunch(x) -> ScheduleMeeting(x, Customer(x)))\nall x. (Employee(x) -> (HasLunch(x) | HasLunchAtHome(x)))\nall x. (Employee(x) & Country(x)!= 'USA' -> HasLunchAtHome(x))\nall x. (Employee(x) -> -HasLunchAtHome(x) -> WorkFromHome(x))\nall x. (Employee(x) & Country(x)!= 'USA' -> WorkFromHome(x))\nall x. (Employee(x) -> -WorkFromHome(x) -> Manager(x))\nJames is either Manager(james) & AppearsToday(james) | -Manager(james) & -AppearsToday(james)\n</PREMISES>\n<CONCLUSION>\nHasLunch(james)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Employee(x) -> (ScheduleMeeting(x, Customer(x)) -> AppearsToday(x)))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (Lunch(x) -> ScheduleMeeting(x, Customer(x)))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (Lunch(x) | -Lunch(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (Lunch(x) -> RemoteWorkFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (Country(x) -> (Employee(x) -> RemoteWorkFromHome(x)))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -RemoteWorkFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearsToday(james)) | (-Manager(james) & -AppearsToday(james)))\nTEXT: James has lunch",
    "<PREMISES>\nall x. (Employee(x) -> (ScheduleMeeting(x, Customer(x)) -> AppearsInCompany(x)))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> SchedulesMeetings(x, Customer(x)))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (LunchInCompany(x) | LunchAtHome(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> RemoteWorkFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (Employee(x) & Country(x) = OtherCountries -> RemoteWorkFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -RemoteWorkFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: James = (Manager(james) & AppearsInCompany(james) | -Manager(james",
    "<PREMISES>\nall x. (Employee(x) -> (MeetingWithCustomers(x) -> AppearsInCompany(x)))\nall x. (HasLunch(x) -> MeetingWithCustomers(x))\nall x. (Employee(x) -> (HasLunch(x) | HasLunchAtHome(x)))\nall x. (Employee(x) &!Manager(x) -> HasLunchAtHome(x))\nall x. (Country(x)!= \"Other\" -> HasLunchAtHome(x))\nall x. (Manager(x) ->!HasLunchAtHome(x))\nx. (Manager(x) |!AppearsInCompany(x))\n</PREMISES>\n<CONCLUSION>\nx. (Employee(x) & HasLunch(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Employee(x) -> (ScheduleMeeting(x, Customer(x)) -> AppearsInCompany(x)))\nall x. (HasLunch(x) -> ScheduleMeeting(x, Customer(x)))\nall x. (Employee(x) -> (HasLunch(x) | HasLunchAtHome(x)))\nall x. ((Employee(x) &!Manager(x)) -> HasLunchAtHome(x))\nall x. ((Country(x)!= Country(Company)) -> HasLunchAtHome(x))\nall x. (Manager(x) -> -HasLunchAtHome(x))\nJames ((Manager(james) & AppearsInCompany(james)) | (-Manager(james) &!AppearsInCompany(james)))\n</PREMISES>\n<CONCLUSION>\nHasLunch(james)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Employee(x) -> SchedulesMeeting(x, Customer(x)) -> AppearsInCompany(x))\nall x. (HasLunch(x) -> SchedulesMeeting(x, Customer(x)))\nall x. (Employee(x) -> (HasLunch(x) | HasLunchAtHome(x)))\nall x. (HasLunchAtHome(x) -> WorkingRemotelyFromHome(x))\nall x. (InCountry(x) -> WorkingRemotelyFromHome(x))\nall x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nJames ((Manager(james) & AppearsInCompany(james)) | (-Manager(james) & -AppearsInCompany(james)))\n</PREMISES>\n<CONCLUSION>\nHasLunch(james)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 3,
  "responses": [
   [
    "<PREMISES>\nall x. (Employee(x) -> (MeetingWithCustomer(x) -> AppearsInCompany(x)))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> MeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (LunchInCompany(x) | LunchAtHome(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (Employee(x) & NotInCountry(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: James (Manager(james) & AppearsInCompany(james)) | (-Manager(james) &",
    "<PREMISES>\nall x. (Employee(x) -> (MeetCustomer(x) -> AppearInCompany(x)))\nall x. (HasLunch(x) -> MeetCustomer(x))\nall x. ((Employee(x) & -HasLunch(x)) | (-Employee(x) & -HasLunch(x)))\nall x. (-Manager(x) -> -WorkRemotelyFromHome(x))\nJames is either Manager(x) & AppearInCompany(x) | -Manager(x) & -AppearInCompany(x)\n</PREMISES>\n<CONCLUSION>\n-HasLunch(james)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Employee(x) -> (MeetWithCustomer(x) -> AppearsInCompany(x)))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> MeetWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (LunchInCompany(x) | -LunchInCompany(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: -LunchInCompany(x) -> RemoteWorkFromHome(x)\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (Employee(x) & Country(x) -> RemoteWorkFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: -Manager(x) -> -RemoteWorkFromHome(x)\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: (Manager(james) & AppearsInCompany(james)) | (-Manager(james) & -AppearsInCompany(james))\n</PREMISES",
    "<PREMISES>\nall x. (Employee(x) -> MeetingWithCustomers(x) -> AppearsToday(x))\nall x. (Employee(x) & Lunch(x) -> MeetingWithCustomers(x))\nall x. (Employee(x) -> (Lunch(x) | LunchAtHome(x)))\nall x. (-Country(x) -> LunchAtHome(x))\nall x. (-Manager(x) -> -LunchAtHome(x))\nx. (James & (Manager(james) | -Manager(james)) & -AppearsToday(james))\n</PREMISES>\n<CONCLUSION>\n- Employee(james) & Lunch(james)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Employee(x) -> MeetingWithCustomer(x) -> AppearsToday(x))\nall x. (HasLunch(x) -> MeetingWithCustomer(x))\nall x. (Employee(x) -> (HasLunch(x) | HasLunchAtHome(x)))\nall x. (-Manager(x) ->!WorksRemotelyFromHome(x))\nJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\n</PREMISES>\n<CONCLUSION>\n-James HasLunch(x)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Employee(x) -> ScheduleMeeting(x, Customer(x)) -> AppearsInCompany(x))\nall x. (HasLunch(x) -> ScheduleMeeting(x, Customer(x)))\nall x. (Employee(x) -> (HasLunch(x) | HasLunchAtHome(x)))\nall x. (HasLunchAtHome(x) -> WorkRemotelyFromHome(x))\nall x. (Employee(x) & NotManager(x) -> WorkRemotelyFromHome(x))\nJames ((Manager(james) & AppearsInCompany(james)) | (~Manager(james) & ~AppearsInCompany(james)))\n</PREMISES>\n<CONCLUSION>\n~HasLunch(james)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Employee(x) -> (SchedulesMeeting(x, Customer(x)) -> AppearsInCompany(x)))\nall x. (HasLunch(x) -> SchedulesMeeting(x, Customer(x)))\nall x. (Employee(x) -> (HasLunch(x) | HasLunchAtHome(x)))\nall x. (HasLunchAtHome(x) -> RemoteWorkFromHome(x))\nall x. (Employee(x) -> (CountryOf(x)!= OtherCountries() -> RemoteWorkFromHome(x)))\nall x. (Employee(x) -> -RemoteWorkFromHome(x))\nJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\n</PREMISES>\n<CONCLUSION>\n-HasLunch(james)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Employee(x) -> SchedulesMeeting(x, Customer(x)) -> AppearsInCompany(x))\nall x. (HasLunch(x) -> SchedulesMeeting(x, Customer(x)))\nall x. (Employee(x) -> (HasLunch(x) | HasLunchAtHome(x)))\nall x. (Employee(x) -> HasLunchAtHome(x) -> WorkRemotelyFromHome(x))\nall x. (Country(x) -> x!= \"home\" -> WorkRemotelyFromHome(x))\nall x. (Manager(x) -> -WorkRemotelyFromHome(x))\nJames (is either Manager(James) & AppearsInCompany(James) | -Manager(James) & -AppearsInCompany(James))\n</PREMISES>\n<CONCLUSION>\n-HasLunch(James)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Employee(x) -> (MeetingWithCustomer(x) -> AppearsInCompany(x)))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> MeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (LunchInCompany(x) | LunchAtHome(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> RemoteWorkFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (Employee(x) & InOtherCountries(x) -> RemoteWorkFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -RemoteWorkFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearsInCompany(james)) | (-Manager(james) & -AppearsInCompany(james",
    "<PREMISES>\nall x. (Employee(x) -> ScheduleMeeting(x, Customer(x)) -> AppearsInCompany(x))\nall x. (HasLunch(x) -> ScheduleMeeting(x, Customer(x)))\nall x. (Employee(x) -> (HasLunch(x) | HasLunchAtHome(x)))\nall x. ((Employee(x) & HasLunchAtHome(x)) -> RemoteWorkFromHome(x))\nall x. ((Country(x)!= Country(Company)) -> RemoteWorkFromHome(x))\nall x. ((Manager(x) & -RemoteWorkFromHome(x)))\nJames ((Manager(james) & AppearsInCompany(james)) | (-Manager(james) & -AppearsInCompany(james)))\n</PREMISES>\n<CONCLUSION>\n-HasLunch(james)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Employee(x) -> SchedulesMeeting(x, Customer(x)) -> AppearsToday(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> SchedulesMeeting(x, Customer(x)))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (LunchInCompany(x) | LunchAtHome(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkingRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (Employee(x) & InOtherCountries(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: James((Manager(James) & AppearsToday(James)) | (-Manager(J",
    "<PREMISES>\nall x. (Employee(x) -> SchedulesMeeting(x, Customer(x)) -> AppearsToday(x))\nall x. (HasLunch(x) -> SchedulesMeeting(x, Customer(x)))\nall x. (Employee(x) -> (HasLunch(x) | HasLunchAtHome(x)))\nall x. (HasLunchAtHome(x) -> WorkingRemotelyFromHome(x))\nall x. (Employee(x) & Country(x)!= CountryOfCompany(x) -> WorkingRemotelyFromHome(x))\nall x. (Employee(x) & -Manager(x) -> WorkingRemotelyFromHome(x))\nJames : (Manager(james) | -Manager(james) & AppearsToday(james))\n</PREMISES>\n<CONCLUSION>\n-HasLunch(james)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Employee(x) -> (MeetingWithCustomer(x) -> AppearsInCompany(x)))\nall x. (HasLunch(x) -> MeetingWithCustomer(x))\nall x. (HasLunch(x) | HasLunchAtHome(x))\nall x. (-Manager(x) ->!WorksRemotelyFromHome(x))\nall x. (Employee(x) -> (x in Country(x) -> WorksRemotelyFromHome(x)))\nall x. (-Manager(x) ->!WorksRemotelyFromHome(x))\nJames is either Manager(x) & AppearsInCompany(x) | -Manager(x) &!AppearsInCompany(x)\n</PREMISES>\n<CONCLUSION>\nJames does not have lunch in the company.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (Employee(x) -> (MeetingWithCustomer(x) -> AppearsInCompany(x)))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HasLunch(x) -> MeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have",
    "<PREMISES>\nall x. (Employee(x) -> (MeetingWithCustomer(x) -> AppearsInCompany(x)))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> MeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (LunchInCompany(x) | LunchAtHome(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkingRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (Employee(x) & NotInCountry(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: James((Manager(James) & AppearsInCompany(James)) | (-Manager(James) &",
    "<PREMISES>\nall x. (Employee(x) -> (ScheduleMeeting(x, Customer(x)) -> AppearsInCompany(x)))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> ScheduleMeeting(x, Customer(x)))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (LunchInCompany(x) | LunchAtHome(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (Employee(x) & NotInCountry(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: James (Manager(James) & AppearsInCompany(James)) | (-("
   ],
   [
    "<PREMISES>\nall x. (Employee(x) -> (MeetingWithCustomer(x) -> AppearsInCompany(x)))\nall x. (HasLunch(x) -> MeetingWithCustomer(x))\nall x. ((Employee(x) & HasLunch(x)) | (Employee(x) & HasLunchAtHome(x)))\nall x. (-Country(x) -> HasLunchAtHome(x))\nall x. (-Manager(x) -> HasLunchAtHome(x))\nJames ((Manager(james) & AppearsInCompany(james)) | (-Manager(james) & -AppearsInCompany(james)))\n</PREMISES>\n<CONCLUSION>\n-HasLunch(james)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Employee(x) -> (MeetingWithCustomers(x) -> AppearsInCompany(x)))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> MeetingWithCustomers(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (LunchInCompany(x) | LunchAtHome(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (Employee(x) & InOtherCountries(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: James (Manager(James) & AppearsInCompany(James) | -Manager(James) &",
    "<PREMISES>\nall x. (Employee(x) -> (MeetWithCustomers(x) -> AppearsInCompany(x)))\nall x. (HasLunch(x) -> MeetWithCustomers(x))\nall x. (Employee(x) -> (HasLunch(x) | HasLunchAtHome(x)))\nall x. (-Manager(x) -> -WorksRemotelyFromHome(x))\nJames is either Manager(james) & AppearsInCompany(james) | -Manager(james) & -AppearsInCompany(james)\n</PREMISES>\n<CONCLUSION>\n-HasLunch(james)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All employees who schedule a meeting with their customers will appear in the company today. \nFOL: all x. (Employee(x) -> (MeetWithCustomers(x) -> AppearsInCompany(x)))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers. \nFOL: all x. (HasLunch(x) -> MeetWithCustomers(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (HasLunch(x) | HasLunchAtHome(x)))\nTEXT: If an",
    "<PREMISES>\nall x. (Employee(x) -> SchedulesMeeting(x, Customer(x)) -> AppearsInCompany(x))\nall x. (HasLunch(x) -> SchedulesMeeting(x, Customer(x)))\nall x. (Employee(x) -> (HasLunch(x) | HasLunchAtHome(x)))\nall x. (Employee(x) & NotManager(x) -> HasLunchAtHome(x))\nall x. (NotCountry(x) -> HasLunchAtHome(x))\nall x. (NotManager(x) -> -HasLunchAtHome(x))\nJames (is either a manager & AppearsInCompany(james) | neither a manager & -AppearsInCompany(james))\n</PREMISES>\n<CONCLUSION>\n-HasLunch(james)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Employee(x) -> (MeetingWithCustomer(x) -> AppearsInCompany(x)))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> MeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (LunchInCompany(x) | LunchAtHome(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (Employee(x) & Country(x) & -InCountry(x) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: James (Manager(james) & AppearsInCompany(james) | -Manager"
   ],
   [
    "<PREMISES>\nall x. (Employee(x) -> MeetingWithCustomers(x) -> AppearsInCompany(x))\nall x. (HasLunch(x) -> MeetingWithCustomers(x))\nall x. (HasLunch(x) | HasLunchAtHome(x))\nall x. (-Manager(x) ->!WorkRemotelyFromHome(x))\nJames is either Manager(james) & AppearsInCompany(james) | -Manager(james) & -AppearsInCompany(james)\n</PREMISES>\n<CONCLUSION>\n-HasLunch(james)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Employee(x) -> SchedulesMeeting(x, Customer(x)) -> AppearsInCompany(x))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> SchedulesMeeting(x, Customer(x)))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (LunchInCompany(x) | LunchAtHome(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkingRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (Employee(x) & NotInCountry(x) -> WorkingRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkingRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: James (Manager(james) & AppearsInCompany(james) | -",
    "<PREMISES>\nall x. (Employee(x) -> (SchedulesMeeting(x, Customer(x)) -> AppearsInCompany(x)))\nall x. (Employee(x) & HasLunch(x) -> SchedulesMeeting(x, Customer(x)))\nall x. (Employee(x) | HasLunch(x) &!HasLunch(x))\nall x. (HasLunch(x) -> RemoteWork(x))\nall x. (InCountry(x) -> RemoteWork(x))\nall x. (!Manager(x) -> RemoteWork(x))\nJames is either Manager(x) & AppearsInCompany(x) |!Manager(x) &!AppearsInCompany(x)\n</PREMISES>\n<CONCLUSION>\nHasLunch(james) &!Company(james)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Employee(x) -> MeetingWithCustomer(x) -> AppearsToday(x))\nall x. (Lunch(x) -> MeetingWithCustomer(x))\nall x. (Employee(x) -> (Lunch(x) | LunchAtHome(x)))\nall x. (Employee(x) & NotManager(x) -> LunchAtHome(x))\nall x. (NotCountry(x) -> LunchAtHome(x))\nall x. (NotManager(x) -> -LunchAtHome(x))\nJames is either a manager and appears in the company today or neither a manager nor appears in the company today.\n</PREMISES>\n<CONCLUSION>\n-Lunch(james)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Employee(x) -> (MeetingWithCustomer(x) -> AppearsInCompany(x)))\nTEXT: Everyone who has lunch in the company schedules meetings with their customers.\nFOL: all x. (LunchInCompany(x) -> MeetingWithCustomer(x))\nTEXT: Employees will either have lunch in the company or have lunch at home.\nFOL: all x. (Employee(x) -> (LunchInCompany(x) | -LunchAtHome(x)))\nTEXT: If an employee has lunch at home, then he/she is working remotely from home.\nFOL: all x. (LunchAtHome(x) -> WorkRemotelyFromHome(x))\nTEXT: All employees who are in other countries work remotely from home.\nFOL: all x. (Employee(x) & Country(x) & -Country(inCountry) -> WorkRemotelyFromHome(x))\nTEXT: No managers work remotely from home.\nFOL: all x. (Manager(x) -> -WorkRemotelyFromHome(x))\nTEXT: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nFOL: ((Manager(james) & AppearsInCompany(james)) | (-"
   ]
  ]
 },
 {
  "index": 4,
  "responses": [
   [
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: (OccurInAnimals(virus) & Humans)\nHumans are mammals.\nFOL: Humans(mammals)\nMammals are animals.\nFOL: mammals(animals)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsMonkeypox(fever & headache & musclePains & feelingTired &... )\nPeople feel tired when they get a glu.\nFOL: People(glu)\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\nFOL: ExistsAnimal()\n</CONCLUSION>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: (Monkeypox Virus -> Animal)\nTEXT: Humans are mammals.\nFOL: Human -> Mammal\nTEXT: Mammals are animals.\nFOL: Mammal -> Animal\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox\nTEXT: People feel tired when they get a glu.\nFOL: Person -> GetGlu\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\nFOL: exists x. Animal(x)\n</CONCLUSION>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox -> InfectiousDisease\nMonkeypox virus can occur in certain animals, including humans.\nFOL: MonkeypoxVirus -> CertainAnimals(humans)\nHumans are mammals.\nFOL: Human -> Mammal\nMammals are animals.\nFOL: Mammal -> Animal\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Monkeypox -> Symptoms(fever, headache, musclePains, feelingTired)\nPeople feel tired when they get a glu.\nFOL: GetGlu -> feelingTired\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\nFOL: exists x. (Animal(x))\n</CONCLUSION>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus(disease)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox Virus(virus) & (CertainAnimal(virus) & Human(virus))\nHumans are mammals.\nFOL: Human(mammal)\nMammals are animals.\nFOL: Mammal(animal)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms(disease) & (Fever & Headache & MusclePains & FeelingTired &... (Syptoms of Monkeypox))\nPeople feel tired when they get a glu.\nFOL: People(glu)\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\nFOL: exists x. (CertainAnimal(x))\n</EVALUATE>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus(monkeypox)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (Animal(x) & (Monkeypox Virus(x) & x!= Human))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox(monkeypox)\nTEXT: People feel tired when they get a glu.\nFOL: PeopleFeelTired(glue)\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\nFOL: exists x. (Animal(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus(monkeypox)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: (Monkeypox Virus(monkeypox) & Animal(Human))\nHumans are mammals.\nFOL: Human(mammal)\nMammals are animals.\nFOL: mammal Animal(animal)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox(symptoms)\nPeople feel tired when they get a glu.\nFOL: People(glu)\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\nFOL: exists x. Animal(x)\n</CONCLUSION>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox Virus & Human\nTEXT: Humans are mammals.\nFOL: Human & Mammal\nTEXT: Mammals are animals.\nFOL: Mammal & Animal\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox\nTEXT: People feel tired when they get a glu.\nFOL: Person & Glu\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: There is an animal.\nFOL: exists x. (Animal(x))\n</EVALUATE>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus) & InfectiousDisease(Monkeypox) & CausedBy(Monkeypox(virus))\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: (Occur(Monkeypox(virus)) & -Animal(Monkeypox(virus)) & Animal(Human)) \nTEXT: Humans are mammals.\nFOL: Human(Human) & Mammal(Human)\nTEXT: Mammals are animals.\nFOL: Mammal(Mammal) & Animal(Mammal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptons(Monkeypox) & (Fever & Headache & MusclePains & Tired &...)\nTEXT: People feel tired when they get a glu.\nFOL: Human(Human) & GetGlu(Human) & Tired(Human)\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: There is an animal",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: (Monkeypox(virus) & Animal(human))\nHumans are mammals.\nFOL: Animal(human) -> Mammal(human)\nMammals are animals.\nFOL: Mammal(human) -> Animal(human)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox includes (Fever & Headache & MusclePains & FeelingTired)\nPeople feel tired when they get a glu.\nFOL: Person(x) -> (Glu(x) -> FeelingTired(x))\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\nFOL: exists x. Animal(x)\n</EVALUATE>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus(causes Monkeypox)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox Virus(occurInAnimal)\nTEXT: Humans are mammals.\nFOL: Human(mammal)\nTEXT: Mammals are animals.\nFOL: mammal(animal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptonsMonkeypox include(fever & headache & musclePains & feelingTired & etc)\nTEXT: People feel tired when they get a glu.\nFOL: People(feelTired(getGlu))\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\nFOL: exists x. (x(animal))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(Virus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox(Virus) & Animal(Human)\nTEXT: Humans are mammals.\nFOL: Animal(Human) & Mammal(Human)\nTEXT: Mammals are animals.\nFOL: Mammal(Human) & Animal(Animal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms(Monkeypox, [Fever, Headache, MusclePains, FeelingTired,...])\nTEXT: People feel tired when they get a glu.\nFOL: Person(GetGlu, FeelingTired)\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: There is an animal.\nFOL: exists x. (Animal(x))\n</EVALUATE>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox -> InfectiousDisease( Monkeypox)\nFOL: InfectiousDisease( Monkeypox) & MonkeypoxVirus -> InfectiousDiseaseVirus( MonkeypoxVirus)\nFOL: InfectiousDiseaseVirus( MonkeypoxVirus) & Animals -> AnimalsWithMonkeypoxVirus( Animals)\nFOL: AnimalsWithMonkeypoxVirus( Animals) & Humans -> HumansWithMonkeypoxVirus( Humans)\nFOL: Humans -> Mammals( Humans)\nFOL: Mammals -> Animals( Mammals)\nFOL: SymptomsOf( Monkeypox) -> SymptomsOfMonkeypox( SymptomsOfMonkeypox)\nFOL: SymptomsOfMonkeypox -> (Fever & Headache & MusclePains & FeelingTired &... )\nFOL: SymptomsOfMonkeypox -> Glu( SymptomsOfMonkeypox)\nFOL: Glu( SymptomsOfMonkeypox) & People -> PeopleWithGlu( People)\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\n</CONCLUSION>\n\n",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus) & InfectiousDisease(virus)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: InfectiousDisease(virus) & OccurInAnimal(virus, human)\nHumans are mammals.\nFOL: Human(mammal)\nMammals are animals.\nFOL: Mammal(animal)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms(virus, Monkeypox) & Include(fever, headache, musclePains, feelingTired, andSoOn)\nPeople feel tired when they get a glu.\nFOL: Person(glu) & FeelingTired(glu)\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus) & InfectiousDisease(virus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: InfectiousDisease(virus)",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: (Monkeypox(virus) & Animal(human))\nHumans are mammals.\nFOL: Human(mammal)\nMammals are animals.\nFOL: Animal(animal)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptons(monkeypox) -> (Fever & Headache & MusclePains & FeelingTired &... )\nPeople feel tired when they get a glu.\nFOL: People(glu) -> FeelingTired\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\nFOL: exists x. Animal(x)\n</CONCLUSION>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox Virus & Humans\nTEXT: Humans are mammals.\nFOL: Humans & Mammals\nTEXT: Mammals are animals.\nFOL: Mammals & Animals\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox\nTEXT: People feel tired when they get a glu.\nFOL: People & Glu\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: There is an animal.\nFOL: exists x. (Animal(x))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus) & InfectiousDisease(Monkeypox) & CausedBy(Monkeypox(virus))\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Occur(Monkeypox(virus), Animal(x)) & x \u2208 {Human}\nTEXT: Humans are mammals.\nFOL: x \u2208 {Human} -> Mammal(x)\nTEXT: Mammals are animals.\nFOL: x \u2208 {Mammal(x)} -> Animal(x)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms(Monkeypox) -> {Fever, Headache, MusclePains, FeelingTired,...}\nTEXT: People feel tired when they get a glu.\nFOL: Person(x) -> FeelingTired(x) & GetsGlu(x)\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: There is an animal.\nFOL: \u2203x. Animal(x)\n</",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus(causes Monkeypox)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox Virus(occurs in Animal) & Animal includes Humans\nHumans are mammals.\nFOL: Humans is Mammal\nMammals are animals.\nFOL: Mammal is Animal\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms of Monkeypox includes (Fever & Headache & MusclePains & FeelingTired &... )\nPeople feel tired when they get a glu.\nFOL: People feel Tired when they get Glu\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\nFOL: exists x. (Animal(x))\n</CONCLUSION>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox virus is an infectious disease caused by the monkeypox virus.\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox virus can occur in certain animals, including humans.\nTEXT: Humans are mammals.\nFOL: Humans are mammals.\nTEXT: Mammals are animals.\nFOL: Mammals are animals.\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox includes fever, headache, muscle pains, feeling tired, and so on.\nTEXT: People feel tired when they get a glu.\nFOL: People feel tired when they get a glu.\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: There is an animal.\nFOL: exists x. (Animal(x))\n</EVALUATE>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(Virus, InfectiousDisease)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox(Virus, OccurInAnimal) & Monkeypox(Virus, IncludeHumans)\nHumans are mammals.\nFOL: Humans(Mammal)\nMammals are animals.\nFOL: Mammal(Animal)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms(Monkeypox, IncludeFever & IncludeHeadache & IncludeMusclePains & IncludeFeelingTired)\nPeople feel tired when they get a glu.\nFOL: People(FeelingTired, GetGlu)\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\nFOL: ExistsAnimal\n</CONCLUSION>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus(monkeypox)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (Animal(x) & Monkeypox Virus(x))\nTEXT: Humans are mammals.\nFOL: Human(human) -> Mammal(human)\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox(monkeypox) -> Symptoms(monkeypox)\nTEXT: People feel tired when they get a glu.\nFOL: Person(x) -> (GetGlu(x) -> Tired(x))\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\nFOL: exists x. (Animal(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox Virus & Animal & Human\nTEXT: Humans are mammals.\nFOL: Human & Mammal\nTEXT: Mammals are animals.\nFOL: Mammal & Animal\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptons Of Monkeypox\nTEXT: People feel tired when they get a glu.\nFOL: People & Glu\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\nFOL: exists x. (x & Animal)\n</CONCLUSION>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus(monkeypox)\nFOL: InfectiousDisease(monkeypox)\nFOL: Disease(monkeypox)\nFOL: Cause(monkeypox, monkeypoxVirus)\nFOL: Cause(InfectiousDisease(monkeypox), MonkeypoxVirus(monkeypox))\nFOL: Cause(Disease(monkeypox), MonkeypoxVirus(monkeypox))\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: MonkeypoxVirus(monkeypox) & (Animal(x) | Human(x))\nTEXT: Humans are mammals.\nFOL: Human(x) & Mammal(x)\nTEXT: Mammals are animals.\nFOL: Mammal(x) & Animal(x)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptonsOfMonkeypox(x) & (Fever(x) & Headache(x) & MusclePains(x) & Tired(x) &... )\nTEXT: People feel tired when",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: (Virus(monkeypox) & Animals(humans))\nHumans are mammals.\nFOL: Humans(mammals)\nMammals are animals.\nFOL: Mammals(animals)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox(fever & headache & musclePains & feelingTired)\nPeople feel tired when they get a glu.\nFOL: People(getGlu -> feelingTired)\n</PREMISES>\n\n<CONCLUSION>\nThere is an animal.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: (Virus(monkeypox) & Animals(humans))\nTEXT: Humans are mammals.\nFOL: Humans(mammals)\nTEXT: Mammals are animals.\nF",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox(virus) & Animal(human)\nTEXT: Humans are mammals.\nFOL: Animal(human) -> Mammal(human)\nTEXT: Mammals are animals.\nFOL: Mammal(human) -> Animal(human)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox(include(fever & headache & musclePains & tired &...))\nTEXT: People feel tired when they get a glu.\nFOL: Person(getGlu) -> tired\n</PREMISES>\n<CONCLUSION>\nThere is an animal.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: There is an animal.\nFOL: exists x. (Animal(x))\n</EVALUATE>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: -Animal(virus) & Human(virus)\nHumans are mammals.\nFOL: Human(mammal)\nMammals are animals.\nFOL: mammal(animal)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms(virus)\nPeople feel tired when they get a glu.\nFOL: -Animal(glu)\n</PREMISES>\n<CONCLUSION>\nAnimal(animal)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: -Animal(virus) & Human(virus)\nTEXT: Humans are mammals.\nFOL: Human(mammal)\nTEXT: Mammals are animals.\nFOL: mammal(animal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and"
   ]
  ]
 },
 {
  "index": 5,
  "responses": [
   [
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus(monkeypox)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: (Monkeypox Virus(monkeypox) & Animal(Human))\nTEXT: Humans are mammals.\nFOL: Human(Human)\nTEXT: Mammals are animals.\nFOL: Mammal(Human)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox(monkeypox)\nTEXT: People feel tired when they get a flu.\nFOL: (Person(x) & Flu(x))\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\nFOL: -Flu(x)\n</CONCLUSION>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox virus\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: (Monkeypox virus & Human)\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox\nTEXT: People feel tired when they get a flu.\nFOL: (Person(x) & Flu(x) -> FeelingTired(x))\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox virus\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: (Monkeypox virus & Human)\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mamm",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus(Monkeypox)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox Virus(Monkeypox) & Animal(Human)\nTEXT: Humans are mammals.\nFOL: Animal(Human) & Mammal(Human)\nTEXT: Mammals are animals.\nFOL: Mammal(Human) & Animal(Human)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms(Monkeypox) = [Fever, Headache, MusclePains, FeelingTired,...]\nTEXT: People feel tired when they get a flu.\nFOL: Person(P) & Flu(P) -> FeelingTired(P)\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one gets flu.\nFOL: -Flu(x) for all x\n</EVALUATE>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox Virus & Human\nTEXT: Humans are mammals.\nFOL: Human & Mammal\nTEXT: Mammals are animals.\nFOL: Mammal & Animal\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Monkeypox Symptoms\nTEXT: People feel tired when they get a glu.\nFOL: Person & Glu\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one gets flu.\nFOL: -Flu\n</EVALUATE>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox Virus & Humans\nTEXT: Humans are mammals.\nFOL: Humans & Mammals\nTEXT: Mammals are animals.\nFOL: Mammals & Animals\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox\nTEXT: People feel tired when they get a glu.\nFOL: People & Glu\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one gets flu.\nFOL: -Flu\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus) & InfectiousDisease(Monkeypox) & CausedBy(virus, Monkeypox)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: OccursIn(Monkeypox, Animals) & OccursIn(Monkeypox, Humans)\nTEXT: Humans are mammals.\nFOL: Humans & Mammals\nTEXT: Mammals are animals.\nFOL: Mammals & Animals\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms(Monkeypox) & Fever & Headache & MusclePains & FeelingTired\nTEXT: People feel tired when they get a glu.\nFOL: People & Glu & FeelingTired\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one gets flu.\nFOL: -GetsFlu(Any)\n</EVALUATE>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox Virus & Human\nTEXT: Humans are mammals.\nFOL: Human & Mammal\nTEXT: Mammals are animals.\nFOL: Mammal & Animal\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms Of Monkeypox\nTEXT: People feel tired when they get a glu.\nFOL: People & Glu\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one gets flu.\nFOL: -Flu\n</EVALUATE>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (Animal(x) & Occur(virus, x))\nTEXT: Humans are mammals.\nFOL: all x. (Human(x) -> Mammal(x))\nTEXT: Mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: all x. (Monkeypox(x) -> Sympton(x))\nTEXT: People feel tired when they get a glu.\nFOL: all x. (Glu(x) -> Tired(x))\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one gets flu.\nFOL: -Glu(flu)\n</EVALUATE>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus(monkeypox)\nFOL: InfectiousDisease(monkeypox)\nFOL: Disease(monkeypox)\nFOL: CausedBy(Virus(monkeypox), Disease(monkeypox))\nMonkeypox virus can occur in certain animals, including humans.\nFOL: Animal(animals) & Human(humans) & OccurIn(Virus(monkeypox), Animal(humans))\nHumans are mammals.\nFOL: Mammal(humans)\nFOL: Animal(humans)\nMammals are animals.\nFOL: Animal(mammals)\nFOL: Animal(animals)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Fever & Headache & MusclePains & FeelingTired & Symptons(monkeypox)\nPeople feel tired when they get a flu.\nFOL: Flu & FeelingTired & Get(people, Flu)\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\nFOL: -Get(people, Flu)\n</CONCLUSION",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(Virus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox(Virus) & (Animal(h) & Human(h))\nTEXT: Humans are mammals.\nFOL: Human(h) & Mammal(h)\nTEXT: Mammals are animals.\nFOL: Mammal(h) & Animal(h)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms(Monkeypox, (Fever, Headache, MusclePains, FeelingTired, etc.))\nTEXT: People feel tired when they get a glu.\nFOL: People(Glu, FeelingTired)\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one gets flu.\nFOL: -Flu\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus(monkeypox)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: -Animal(monkeypox)\nHumans are mammals.\nFOL: Human(humans)\nMammals are animals.\nFOL: Animal(mammals)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox(symptoms)\nPeople feel tired when they get a flu.\nFOL: GetFlu(people)\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\nFOL: -GetFlu(one)\n</CONCLUSION>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus(Monkeypox)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox Virus(Monkeypox) & Animal(Human)\nTEXT: Humans are mammals.\nFOL: Human(Human) & Mammal(Human)\nTEXT: Mammals are animals.\nFOL: Mammal(Human) & Animal(Animal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptons(Monkeypox) -> (Fever & Headache & MusclePains & FeelingTired)\nTEXT: People feel tired when they get a flu.\nFOL: Person(People) & Get(Flu) -> FeelingTired\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one gets flu.\nFOL: -Get(Flu)\n</EVALUATE>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(isMonkeypoxVirus)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: MonkeypoxVirus(occursInHumans)\nHumans are mammals.\nFOL: Human(isMammal)\nMammals are animals.\nFOL: Mammal(isAnimal)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox includesFever & Headache & MusclePains & FeelingTired\nPeople feel tired when they get a flu.\nFOL: Person(feelsTiredWhenGetsFlu)\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\nFOL: -Person(getsFlu)\n</CONCLUSION>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: (Virus(monkeypox) & -Animal(humans))\nHumans are mammals.\nFOL: Animal(humans)\nMammals are animals.\nFOL: Animal(mammals)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms(virus)\nPeople feel tired when they get a glu.\nFOL: (Person(p) & -Flu(p))\n</PREMISES>\n\n<CONCLUSION>\nNo one gets flu.\nFOL: -Flu(anyone)\n</CONCLUSION>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(Virus)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox(Virus) & (Animals(x) & Humans(x))\nHumans are mammals.\nFOL: Humans(Mammals)\nMammals are animals.\nFOL: Mammals(Animals)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms(Monkeypox, Fever, Headache, MusclePains, Tired)\nPeople feel tired when they get a flu.\nFOL: People(Flu, Tired)\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\nFOL: -People(Flu)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(Virus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: (Virus(Monkeypox) & Animal(Human))\nTEXT: Humans are mammals.\nFOL: Human(Mammal)\nTEXT: Mammals are animals.\nFOL: Mammal(Animal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms(Monkeypox)(Fever & Headache & MusclePains & Tired)\nTEXT: People feel tired when they get a glu.\nFOL: Person(GetGlu)(Tired)\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one gets flu.\nFOL: -Flu\n</EVALUATE>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox(virus) & Human\nTEXT: Humans are mammals.\nFOL: Human & Mammal\nTEXT: Mammals are animals.\nFOL: Mammal & Animal\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms(virus)\nTEXT: People feel tired when they get a glu.\nFOL: Person & Glu\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one gets flu.\nFOL: -Flu\n</EVALUATE>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox Virus & Human\nTEXT: Humans are mammals.\nFOL: Human & Mammal\nTEXT: Mammals are animals.\nFOL: Mammal & Animal\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox\nTEXT: People feel tired when they get a glu.\nFOL: People & Glu\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one gets flu.\nFOL: -Flu\n</EVALUATE>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus(causesMonkeypox)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox Virus(occursInAnimalsIncludingHumans)\nHumans are mammals.\nFOL: HumansAreMammals\nMammals are animals.\nFOL: MammalsAreAnimals\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox includesFever & Headache & MusclePains & FeelingTired\nPeople feel tired when they get a flu.\nFOL: PeopleFeelTiredWhenTheyGetFlu\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\nFOL: -PeopleGetFlu\n</CONCLUSION>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus(monkeypox)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox Virus(monkeypox) & Human(animal)\nTEXT: Humans are mammals.\nFOL: Human(animal)\nTEXT: Mammals are animals.\nFOL: Mammal(animal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox(fever & headache & musclePains & feelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: People(glue)\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one gets flu.\nFOL: -Glue\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox virus -> InfectiousDisease(monkeypox)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: (InfectiousDisease(monkeypox) & Animal(animal) & Human(animal))\nHumans are mammals.\nFOL: Human -> Mammal(human)\nMammals are animals.\nFOL: Mammal -> Animal(animal)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Monkeypox -> (Fever & Headache & MusclePains & FeelingTired)\nPeople feel tired when they get a flu.\nFOL: Flu -> FeelingTired\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\nFOL: -Flu\n</CONCLUSION>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox = VirusMonkeypox\nMonkeypox virus can occur in certain animals, including humans.\nFOL: VirusMonkeypox : AnimalsHumans\nHumans are mammals.\nFOL: Humans : Mammals\nMammals are animals.\nFOL: Mammals : Animals\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsMonkeypox = SymptomsFever & SymptomsHeadache & SymptomsMusclePains & SymptomsFeelingTired\nPeople feel tired when they get a flu.\nFOL: PeopleFeelTired = PeopleGetFlu\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\nFOL: -PeopleGetFlu\n</CONCLUSION>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: exists x. (Animal(x) & (Virus(x) & Animal(x)))\nHumans are mammals.\nFOL: Human(human) & Mammal(human)\nMammals are animals.\nFOL: Mammal(mammal) & Animal(animal)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox(symptoms) & (Fever(symptoms) & Headache(symptoms) & MusclePains(symptoms) & FeelingTired(symptoms))\nPeople feel tired when they get a flu.\nFOL: Person(person) & FeelingTired(person) & Glu(person) & Flu(person)\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\nFOL: -Flu(person)\n</CONCLUSION>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus(monkeypox)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: (Monkeypox Virus(monkeypox) & Animal(humans))\nTEXT: Humans are mammals.\nFOL: Human(humans) & Mammal(humans)\nTEXT: Mammals are animals.\nFOL: Mammal(humans) & Animal(humans)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox(monkeypox)\nTEXT: People feel tired when they get a flu.\nFOL: Person(x) & Flu(x) & Tired(x)\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one gets flu.\nFOL: -Flu(x) for all x.\n</EVALUATE>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox(virus) & Animal(human)\nHumans are mammals.\nFOL: Animal(human) & Mammal(human)\nMammals are animals.\nFOL: Mammal(human) & Animal(human)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptonsMonkeypox(fever & headache & musclePains & feelingTired &... &... &...)\nPeople feel tired when they get a flu.\nFOL: PeopleGetFlu(people) & feelingTired\n</PREMISES>\n<CONCLUSION>\nNo one gets flu.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox(virus) & Animal(human)\nTEXT: Humans are mammals.\nFOL:"
   ]
  ]
 },
 {
  "index": 6,
  "responses": [
   [
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nFOL: (InfectiousDisease(Monkeypox) & Cause(Monkeypox, virus))\nMonkeypox virus can occur in certain animals, including humans.\nFOL: (Virus(Monkeypox) & OccurIn(Monkeypox, Animals) & IncludeHumans(Animals))\nHumans are mammals.\nFOL: Humans(mammals)\nMammals are animals.\nFOL: mammals(animals)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Symptoms(Monkeypox) & Include(Fever, Headache, MusclePains, FeelingTired))\nPeople feel tired when they get a glu.\nFOL: (People(glu) & FeelingTired(glu))\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nTEXT:",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox virus\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox virus -> Human\nTEXT: Humans are mammals.\nFOL: Human -> Mammal\nTEXT: Mammals are animals.\nFOL: Mammal -> Animal\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptonsOfMonkeypox\nTEXT: People feel tired when they get a glu.\nFOL: Person -> Glu\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptonsOfMonkeypox\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptonsOfMonkeypox = Coughing\n</EVALUATE>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(m) -> InfectiousDisease(m)\nFOL: Monkeypox(m) -> CausedBy(monkeypoxVirus(m))\nFOL: monkeypoxVirus(m) & Animal(m)\nFOL: Animal(m) & Mammal(m)\nFOL: Mammal(m) & Animal(m)\nFOL: Symptoms(m) & Fever(m)\nFOL: Symptoms(m) & Headache(m)\nFOL: Symptoms(m) & MusclePains(m)\nFOL: Symptoms(m) & FeelingTired(m)\nFOL: Symptoms(m) & GetGlu(m)\nFOL: GetGlu(m) & FeelingTired(m)\nFOL: -Cough(m)\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\nFOL: Symptoms(m) & Cough(m)\n</CONCLUSION>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox(virus) & Animal(human)\nHumans are mammals.\nFOL: Animal(human) & Mammal(human)\nMammals are animals.\nFOL: Mammal(human) & Animal(human)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox include (Fever & Headache & MusclePains & FeelingTired)\nPeople feel tired when they get a glu.\nFOL: People feelTiredWhenGetGlu\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus) & InfectiousDisease(Monkeypox)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox(virus) & Animal(h",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus(monkeypox)\nFOL: Monkeypox Virus(monkeypox) -> Infectious Disease(monkeypox)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox Virus(monkeypox) -> (CertainAnimal(x) & Human(x))\nTEXT: Humans are mammals.\nFOL: Human -> Mammal\nTEXT: Mammals are animals.\nFOL: Mammal -> Animal\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox -> (Fever(x) & Headache(x) & MusclePains(x) & Tired(x))\nTEXT: People feel tired when they get a glu.\nFOL: People -> (Glu(x) -> Tired(x))\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Symptons of Monkeypox include coughing.\nFOL: SymptomsOfMonkeypox -> C"
   ],
   [
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: (Virus(monkeypox) & Animal(humans))\nHumans are mammals.\nFOL: Animal(humans) & Mammal(humans)\nMammals are animals.\nFOL: Mammal(humans) & Animal(humans)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox includes (Fever, Headache, MusclePains, FeelingTired, etc.)\nPeople feel tired when they get a glu.\nFOL: Person(x) & Glu(x) & FeelingTired(x)\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: (Virus(monkeyp",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(isMonkeypoxVirus)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: MonkeypoxVirus(canOccurInHumans)\nHumans are mammals.\nFOL: Humans(isMammal)\nMammals are animals.\nFOL: Mammals(isAnimal)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox(includeFever & includeHeadache & includeMusclePains & includeFeelingTired &... &... &... )\nPeople feel tired when they get a glu.\nFOL: People(feelTiredWhenGetGlu)\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox(includeFever & includeHeadache & includeMusclePains & includeFeelingTired &... &... &... )\nTEXT",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: (Virus(monkeypox) & -Animal(humans) & -Animal(certainAnimals) | (Virus(monkeypox) & Animal(humans) & Animal(certainAnimals)))\nHumans are mammals.\nFOL: Animal(humans)\nMammals are animals.\nFOL: Animal(mammals)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms(virus, monkeypox)\nPeople feel tired when they get a glu.\nFOL: (Person(p) & Glu(p) -> Tired(p))\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Symptoms(monkeypox, fever) & Symptoms(monkeypox, headache) & Symptoms(monkeypox, musclePains) & Symptoms",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox Virus & Human\nTEXT: Humans are mammals.\nFOL: Human & Mammal\nTEXT: Mammals are animals.\nFOL: Mammal & Animal\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptons Of Monkeypox\nTEXT: People feel tired when they get a glu.\nFOL: People & Glu\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptons Of Monkeypox\nTEXT: People feel tired when they get a glu.\nFOL: People & Glu\nTEXT: Symptons of Monkeypox include coughing.\nFOL: Symptons Of Monkeypox & Coughing\n</EVALU",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(monkeypox) & InfectiousDisease(monkeypox) & Virus(monkeypox)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Virus(monkeypox) & OccurInAnimal(monkeypox) & IncludeHumans(monkeypox)\nTEXT: Humans are mammals.\nFOL: Human(human) & Mammal(human)\nTEXT: Mammals are animals.\nFOL: Mammal(human) & Animal(animal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptons(monkeypox) & Include(Fever, Headache, MusclePains, FeelingTired, etc.)\nTEXT: People feel tired when they get a glu.\nFOL: Person(x) & Glu(x) & FeelingTired(x)\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Symptons"
   ],
   [
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox virus -> InfectiousDisease\nMonkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox virus -> OccurInHumans\nHumans are mammals.\nFOL: Humans -> Mammals\nMammals are animals.\nFOL: Mammals -> Animals\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: MonkeypoxSymptoms -> (Fever & Headache & MusclePains & FeelingTired)\nPeople feel tired when they get a glu.\nFOL: PeopleFeelTired -> GetGlu\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox virus -> InfectiousDisease\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox virus -> OccurInHumans\nTEXT: Humans are mammals.\nFOL: Humans -> Mamm",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox(virus) & (Humans & Animals)\nHumans are mammals.\nFOL: Humans & Mammals\nMammals are animals.\nFOL: Mammals & Animals\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox & (Fever & Headache & MusclePains & FeelingTired &... )\nPeople feel tired when they get a glu.\nFOL: People & Glu & FeelingTired\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox(virus) & (Humans & Animals)\nTEXT: Humans are mammals.\nFOL: Humans & Mammals\n",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nFOL: (InfectiousDisease(Monkeypox) & Cause(Monkeypox, virus))\nMonkeypox virus can occur in certain animals, including humans.\nFOL: (Virus(Monkeypox) & Occur(Monkeypox, animal) & Include(humans, animal))\nHumans are mammals.\nFOL: Humans(mammals)\nMammals are animals.\nFOL: Mammals(animals)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: (Symptons(Monkeypox) & Include(fever, headache, musclePains, feelingTired, andSoOn(Monkeypox)))\nPeople feel tired when they get a glu.\nFOL: (People(glue) & FeelTired(glue))\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\n",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus(monkeypox)\nFOL: InfectiousDisease(monkeypox)\nFOL: Disease(monkeypox)\nFOL: CausedBy(monkeypox Virus(monkeypox))\nFOL: CausedBy(monkeypox Virus(monkeypox))\nFOL: Animal(monkeypox Virus(monkeypox))\nFOL: Human(monkeypox Virus(monkeypox))\nFOL: Mammal(human)\nFOL: Animal(human)\nFOL: Humans(human)\nFOL: Mammal(humans)\nFOL: People(people)\nFOL: Animal(people)\nFOL: CertainAnimals(certainAnimals)\nFOL: Human(certainAnimals)\nFOL: Humans(certainAnimals)\nFOL: Animals(animals)\nFOL: Mammal(animals)\nFOL: Animals(mammal)\nFOL: Mammal(animals)\nFOL: Animals(mammal)\nFOL: Animals(certainAnimals)\nFOL: Mamm",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: (Virus(Monkeypox) & Animal(human))\nTEXT: Humans are mammals.\nFOL: Animal(human) -> Mammal(human)\nTEXT: Mammals are animals.\nFOL: Mammal(human) -> Animal(human)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms(Monkeypox) -> (Fever & Headache & MusclePains & Tired)\nTEXT: People feel tired when they get a glu.\nFOL: Person(x) -> (Glu(x) -> Tired)\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms(Monkeypox) -> (Fever & Headache & MusclePains &"
   ],
   [
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: (Virus(monkeypox) & Animal(human))\nHumans are mammals.\nFOL: Animal(human) -> Mammal(human)\nMammals are animals.\nFOL: Mammal(human) -> Animal(human)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms(Monkeypox) -> [Fever, Headache, MusclePains, FeelingTired,...]\nPeople feel tired when they get a glu.\nFOL: Person(x) -> (Glu(x) -> FeelingTired(x))\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: (Virus(monkeypox)",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(monkeypox) & InfectiousDisease(monkeypox) & Virus(monkeypox)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Virus(monkeypox) & OccurInAnimals(monkeypox) & IncludeHumans(monkeypox)\nTEXT: Humans are mammals.\nFOL: Human(human) & Mammal(human)\nTEXT: Mammals are animals.\nFOL: Mammal(human) & Animal(animal)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox(monkeypox) & IncludeFever(monkeypox) & IncludeHeadache(monkeypox) & IncludeMusclePains(monkeypox) & IncludeFeelingTired(monkeypox)\nTEXT: People feel tired when they get a glu.\nFOL: Person(x) & GetGlu(x) & FeelingTired(x)\n</PREMISES>\n<CONCLUSION>\n",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus) & InfectiousDisease(Monkeypox) & CausedBy(Monkeypox, virus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox(virus) & OccurInAnimals(Monkeypox, humans)\nTEXT: Humans are mammals.\nFOL: Human(x) & Mammal(x)\nTEXT: Mammals are animals.\nFOL: Animal(x) & Mammal(x)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptons(Monkeypox, fever, headache, musclePains, feelingTired)\nTEXT: People feel tired when they get a glu.\nFOL: Person(x) & Glu(x) & feelingTired(x)\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus) & InfectiousDisease(virus) & Disease(virus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: (Monkeypox(virus) & Animal(x) & Human(x)) | (Monkeypox(virus) & Animal(x))\nTEXT: Humans are mammals.\nFOL: Human(x) & Mammal(x)\nTEXT: Mammals are animals.\nFOL: Mammal(x) & Animal(x)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptons(virus) & Fever(virus) & Headache(virus) & MusclePains(virus) & Tired(virus)\nTEXT: People feel tired when they get a glu.\nFOL: Person(x) & Glu(x) & Tired(x)\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains",
    "<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus(x) & InfectiousDisease(x) & CausedBy(x, Monkeypox Virus(x))\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: CausedBy(Monkeypox Virus(x), Animal(x)) & Humans(x) & Certain(x)\nTEXT: Humans are mammals.\nFOL: Humans(x) & Mammals(x)\nTEXT: Mammals are animals.\nFOL: Mammals(x) & Animals(x)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptons(x) & Monkeypox(x) & (Fever(x) & Headache(x) & MusclePains(x) & FeelingTired(x))\nTEXT: People feel tired when they get a glu.\nFOL: People(x) & FeelingTired(x) & Get(x, Glu(x))\n</EVALUATE>\n\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Symptons of"
   ],
   [
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nMonkeypox virus can occur in certain animals, including humans.\nFOL: (Occur(virus, animal) & -Animal(human) & Occur(virus, human))\nHumans are mammals.\nFOL: Animal(human)\nMammals are animals.\nFOL: Animal(animal)\nSymptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptoms(virus) = (Fever & Headache & MusclePains & Tired)\nPeople feel tired when they get a glu.\nFOL: GetGlu(person) -> Tired(person)\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: (Occur(virus, animal) & -Animal(human) & Occur(virus, human))\nTEXT:",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox Virus & Human\nTEXT: Humans are mammals.\nFOL: Human\nTEXT: Mammals are animals.\nFOL: Mammal\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptons Of Monkeypox\nTEXT: People feel tired when they get a glu.\nFOL: People & Glu\n</PREMISES>\n<CONCLUSION>\nSymptons Of Monkeypox include coughing.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Symptons Of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptons Of Monkeypox\nTEXT: Symptons Of Monkeypox include coughing.\nFOL: Coughing\n</EVALUATE>",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox Virus(monkeypox)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox Virus(monkeypox) & Animal(humans)\nTEXT: Humans are mammals.\nFOL: Animal(humans) & Mammal(humans)\nTEXT: Mammals are animals.\nFOL: Mammal(humans) & Animal(humans)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox include Fever, Headache, MusclePains, FeelingTired,...\nTEXT: People feel tired when they get a glu.\nFOL: People getGlu -> FeelingTired\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: SymptomsOfMonkeypox include Fever, Headache, MusclePains, FeelingT",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus)\nFOL: Monkeypox(virus) & Infectious(virus)\nFOL: Infectious(virus) -> Disease(virus)\nFOL: Disease(virus) -> Monkeypox\nFOL: Monkeypox(virus) & Animal(virus) -> Occur(virus)\nFOL: Occur(virus) & Human(virus) -> True\nFOL: Human(virus) & Mammal(virus) -> True\nFOL: Mammal(virus) & Animal(virus) -> True\nFOL: Mammal(virus) & Disease(virus) -> Symptons\nFOL: Symptons(virus) & (Fever & Headache & MusclePains & Tired &...) -> Symptoms\nFOL: Symptoms & Glu -> Tired\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Monkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(virus) & Infect",
    "<PREMISES>\nMonkeypox is an infectious disease caused by the monkeypox virus.\nFOL: Monkeypox(Virus)\nTEXT: Monkeypox virus can occur in certain animals, including humans.\nFOL: Monkeypox(Virus) & (Animal(Human) | Animal(Other))\nTEXT: Humans are mammals.\nFOL: Animal(Human) & Mammal(Human)\nTEXT: Mammals are animals.\nFOL: Mammal(Human) & Animal(Human)\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptons(Monkeypox) -> (Fever & Headache & MusclePains & FeelingTired &...)\nTEXT: People feel tired when they get a glu.\nFOL: Person(x) -> Glu(x) -> FeelingTired(x)\n</PREMISES>\n<CONCLUSION>\nSymptons of Monkeypox include coughing.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nFOL: Symptons(Monkeypox) -> ("
   ]
  ]
 },
 {
  "index": 7,
  "responses": [
   [
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> CreatedTheLegendOfZelda(x))\nall x. (JapaneseGameCompany(x) & Top10(x) -> MadeByJapaneseGameCompany(x))\n[BG] all x. (MoreThanOneMillionCopies(x) -> Top10(x))\nTheLegendOfZelda(soldMoreThanOneMillionCopies)\n</PREMISES>\n<CONCLUSION>\nTop10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedGame(TheLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(CreatedGame(x)))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is in the Top 10 list.\nFOL: InTop10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(LegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is in the Top 10 list.\nFOL: Top10(LegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedGame(TheLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is in the Top 10 list.\nFOL: Top10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> LegendOfZelda(x))\nall x. (Top10(x) -> JapaneseGameCompany(x))\n[BG] all x. (MoreThanOneMillionCopies(x) -> Top10(x))\nTheLegendOfZelda(soldMoreThanOneMillionCopies)\n</PREMISES>\n<CONCLUSION>\nTop10(TheLegendOfZelda)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> LegendOfZelda(x))\nall x. (JapaneseGameCompany(x) & Top10(x) -> Game(x))\n[BG] all x. (Game(x) & MoreThanOneMillionCopies(x) -> Top10(x))\nTheLegendOfZelda(soldMoreThanOneMillionCopies)\n</PREMISES>\n<CONCLUSION>\nTop10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> CreatedTheLegendOfZelda(x))\nall x. (Game(x) & Top10(x) -> JapaneseGameCompany(x))\n[BG]\nall x. (Game(x) & MoreThanOneMillionCopies(x) -> Top10(x))\nTheLegendOfZelda(soldMoreThanOneMillionCopies)\n</PREMISES>\n<CONCLUSION>\nTop10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> CreatedTheLegendOfZelda(x))\nall x. (Top10List(x) -> JapaneseGameCompany(x))\n[BG] all x. (SellsMoreThanOneMillionCopies(x) -> Top10List(x))\nTheLegendOfZelda(soldMoreThanOneMillionCopies)\n</PREMISES>\n<CONCLUSION>\nTop10List(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> TheLegendOfZelda(x))\nall x. (JapaneseGameCompany(x) & Top10(x) -> Game(x))\n[bg] all x. (Game(x) & MoreThanOneMillionCopies(x) -> Top10(x))\nTheLegendOfZelda(soldMoreThanOneMillionCopies)\n</PREMISES>\n<CONCLUSION>\nTop10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedGame(TheLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: (SellMoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is in the Top 10 list.\nFOL: Top10(TheLegendOfZelda)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nAll games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\n[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: (SellMoreThanOneMillion(x) -> Top10(x))\nThe Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is in the Top 10 list.\nFOL: Top10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedGame(TheLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(CreatedGame(x)))\n[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is in the Top 10 list.\nFOL: InTop10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(x) & LegendOfZelda(x)\nall x. (JapaneseGameCompany(x) -> Game(x))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(LegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is in the Top 10 list.\nFOL: InTop10(LegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(x) & LegendOfZelda(x) & x = LegendOfZelda\nall x. (JapaneseGameCompany(x) & LegendOfZelda(x) -> Top10List(x))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10List(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> Top10List(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(LegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is in the Top 10 list.\nFOL: Top10List(LegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> LegendOfZelda(x))\nall x. (JapaneseGameCompany(x) & Game(x) -> InTop10List(x))\n[BG] all x. (Game(x) & MoreThanOneMillionCopies(x) -> InTop10List(x))\nTheLegendOfZelda(soldMoreThanOneMillionCopies)\n</PREMISES>\n<CONCLUSION>\nInTop10List(TheLegendOfZelda)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> CreatedTheLegendOfZelda(x))\nall x. (Top10(x) -> JapaneseGameCompany(x))\n[BG] all x. (Sales(x) > 1000000 -> Top10(x))\nTheLegendOfZelda(soldMoreThanOneMillionCopies)\n</PREMISES>\n<CONCLUSION>\nTop10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(x) -> LegendOfZelda(x)\nall x. (JapaneseGameCompany(x) -> LegendOfZelda(x))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: (MoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(legendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is in the Top 10 list.\nFOL: Top10(legendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> CreatedTheLegendOfZelda(x))\nall x. (GameInTop10(x) -> JapaneseGameCompany(x))\n[bg] all x. (CopiesSold(x) > 1000000 -> GameInTop10(x))\nTheLegendOfZelda: CopiesSold(TheLegendOfZelda) > 1000000\n</PREMISES>\n<CONCLUSION>\nGameInTop10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseCompany(CreatedGame(TheLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: (SellMoreThanOneMillion(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is in the Top 10 list.\nFOL: InTop10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(x))\n[BG]: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is in the Top 10 list.\nFOL: InTop10(TheLegendOfZelda)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(x) -> LegendOfZelda(x)\nall x. (JapaneseGameCompany(x) -> LegendOfZelda(x))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: (MoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(legendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is in the Top 10 list.\nFOL: Top10(legendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> LegendOfZelda(x))\nall x. (JapaneseGameCompany(x) & Game(x) -> InTop10(x))\n[bg] all x. (Game(x) & MoreThanOneMillionCopies(x) -> InTop10(x))\nTheLegendOfZelda(soldMoreThanOneMillionCopies)\n</PREMISES>\n<CONCLUSION>\nInTop10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseCompany(CreatedGame(TheLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is in the Top 10 list.\nFOL: InTop10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> TheLegendOfZelda(x))\nall x. (JapaneseGameCompany(x) & Top10(x) -> Game(x))\n[BG] all x. (Game(x) & MoreThanOneMillionCopies(x) -> Top10(x))\nTheLegendOfZelda(soldMoreThanOneMillionCopies)\n</PREMISES>\n<CONCLUSION>\nTop10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> LegendOfZelda(x))\nall x. (JapaneseGameCompany(x) & Top10(x) -> Game(x))\n[bg] all x. (Game(x) & MoreThanOneMillionCopies(x) -> Top10(x))\nTheLegendOfZelda(soldMoreThanOneMillionCopies)\n</PREMISES>\n<CONCLUSION>\nTop10(TheLegendOfZelda)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 8,
  "responses": [
   [
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(x) -> LegendOfZelda(x)\nall x. (JapaneseGameCompany(x) -> LegendOfZelda(x))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: (MoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseVideoGameCompany(x) -> FIFA22(x)\n</EVALUATE>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be",
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> LegendOfZelda(x))\nall x. (JapaneseGameCompany(x) & Game(x) & Top10(x) -> Top10List(x))\n[BG] all x. (Game(x) & MoreThanOneMillionCopies(x) -> Top10List(x))\nTheLegendOfZelda(soldMoreThanOneMillionCopies)\n</PREMISES>\n<CONCLUSION>\n-[FIFA22(x) & JapaneseVideoGameCompany(x)]\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nAll games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(x))\n[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> InTop10(x))\nThe Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\nFOL: JapaneseVideoGameCompany(FIFA22)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(x) -> LegendOfZelda(x)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillion(LegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\nFOL: JapaneseVideoGameCompany(x) & FIFA22(x) -> JapaneseGameCompany(x)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: (MoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\nFOL: -JapaneseGameCompany(FIFA22) & JapaneseVideoGameCompany(FIFA22)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT:",
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> CreatedTheLegendOfZelda(x))\nall x. (Top10(x) -> JapaneseGameCompany(x))\n[bg] all x. (MoreThanOneMillionCopies(x) -> Top10(x))\nTheLegendOfZelda(soldMoreThanOneMillionCopies)\n</PREMISES>\n<CONCLUSION>\n-Top10(FIFA22)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(LegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseVideoGameCompany(Fifa22)\n</EVALUATE>",
    "<PREMISES>\nall x. (JapaneseCompany(x) -> CreatedTheLegendOfZelda(x))\nall x. (Top10(x) -> JapaneseCompany(x))\n[BG] all x. (SellsMoreThanOneMillion(x) -> Top10(x))\nTheLegendOfZelda(soldMoreThanOneMillion)\n</PREMISES>\n<CONCLUSION>\n-Top10(FIFA22)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nAll games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\n[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> Top10(x))\nThe Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\nFOL: JapaneseVideoGameCompany(FIFA22)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> CreatedTheLegendOfZelda(x))\nall x y. (Top10List(x) & Top10List(y) & MoreThanOneMillionCopies(x) -> SelectedIntoTop10List(x, y))\n[BG]\nall x. (MoreThanOneMillionCopies(x) -> SelectedIntoTop10List(x))\nTheLegendOfZelda(soldMoreThanOneMillionCopies)\n</PREMISES>\n<CONCLUSION>\n-SelectedIntoTop10List(FIFA22, any)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(LegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\nFOL: JapaneseVideoGameCompany(FIFA22)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedGame(TheLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\nFOL: JapaneseVideoGameCompany(FIFA22)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedGame(TheLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nAll games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(x))\n[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> InTop10(x))\nThe Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10",
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> CreatedTheLegendOfZelda(x))\nall x. (Top10(x) -> JapaneseGameCompany(x))\n[BG] all x. (Sells(x, 1,000,000) -> Top10(x))\nTheLegendOfZelda(sold, 1,000,000)\n</PREMISES>\n<CONCLUSION>\n-Top10(FIFA22)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: all x. (JapaneseGameCompany(x) -> CreatedTheLegendOfZelda(x))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (Sells(x, 1,000,000) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: TheLegendOfZelda(sold, 1,000,000)\nTEXT: FIFA "
   ],
   [
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> CreatedTheLegendOfZelda(x))\nall x. (Top10Game(x) -> JapaneseGameCompany(x))\n[bg] all x. (SellsMoreThanOneMillion(x) -> Top10Game(x))\nTheLegendOfZelda(soldMoreThanOneMillion)\n</PREMISES>\n<CONCLUSION>\n-Top10Game(FIFA22)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\nFOL: -JapaneseGameCompany(FIFA22) & VideoGameCompany(FIFA22)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\n",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedLegendOfZelda)\nAll games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\n[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: (SellMoreThanOneMillion(x) -> Top10(x))\nThe Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(LegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: (Sell",
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> CreatedTheLegendOfZelda(x))\nall x. (Game(x) -> JapaneseGameCompany(x))\n[BG] all x. (Game(x) -> MoreThanOneMillionCopies(x) -> SelectedIntoTop10List(x))\nTheLegendOfZelda(soldMoreThanOneMillionCopies)\n</PREMISES>\n<CONCLUSION>\n-Game(FIFA22) & JapaneseGameCompany(x) & -SelectedIntoTop10List(FIFA22)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: (SellsMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillion(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseVideoGameCompany(FIFA22)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> LegendOfZelda(x))\nall x. (JapaneseGameCompany(x) & Top10(x) -> Game(x))\n[bg] all x. (Game(x) -> Top10(x) & MoreThanOneMillionCopies(x))\nTheLegendOfZelda(soldMoreThanOneMillionCopies)\n</PREMISES>\n<CONCLUSION>\n-Top10(Fifa22)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedGame(TheLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: (OneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: OneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\nFOL: JapaneseVideoGameCompany(FIFA22)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedGame(TheLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nAll games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\n[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. ((SellsMoreThanOneMillion(x) -> Top10(x))]\nThe Legend of Zelda sold more than one million copies.\nFOL: SellsMoreThanOneMillion(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedGame(Zelda))\nAll games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\n[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> Top10(x))\nThe Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(Zelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedGame(Zelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (More",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(x) -> LegendOfZelda(x)\nall x. (JapaneseGameCompany(x) -> LegendOfZelda(x))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nall x. (JapaneseGameCompany(x) -> Top10(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: (MoreCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nFIFA 22 is made by a Japanese video game company.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: FIFA 22 is made by a Japanese video game company.\nFOL: JapaneseVideoGameCompany(x) -> FIFA22(x)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 9,
  "responses": [
   [
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedGame(TheLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: (SellMoreThanOneMillion(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: (SellMoreThanOneMillion(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> CreatedTheLegendOfZelda(x))\nall x. (JapaneseGameCompany(x) & InTop10(x) -> MadeByJapaneseGameCompany(x))\n[BG] all x. (SellsMoreThanOneMillionCopies(x) -> InTop10(x))\nTheLegendOfZelda(soldMoreThanOneMillionCopies)\n</PREMISES>\n<CONCLUSION>\n- InTop10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(LegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -Top10(LegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(x))\n[BG]: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: (SellMoreThanOneMillion(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10(TheLegendOfZelda)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedGame)\nAll games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(x))\n[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> InTop10(x))\nThe Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> CreatedTheLegendOfZelda(x))\nall x. (Top10(x) -> JapaneseGameCompany(x))\n[BG] all x. (Sales(x) > 1000000 -> Top10(x))\nTheLegendOfZelda(soldMoreThan1000000)\n</PREMISES>\n<CONCLUSION>\n-Top10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseCompany(x) -> LegendOfZelda(x)\nall x. (JapaneseCompany(x) -> LegendOfZelda(x))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: (MoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(LegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -Top10(LegendOfZelda)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseCompany(x) -> LegendOfZelda(x)\nall x. (JapaneseCompany(x) -> LegendOfZelda(x))\nTEXT: All games in the Top 10 list are made by Japanese game",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: (MoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -Top10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedGame(TheLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(CreatedGame(x)))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -Top10(TheLegendOfZelda)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedGame(TheLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: (OneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: OneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -Top10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseCompany(x) -> LegendOfZelda(x)\nall x. (JapaneseCompany(x) -> LegendOfZelda(x))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: (MillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MillionCopies(legendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -Top10(legendOfZelda)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseCompany(x) -> LegendOfZelda(x)\nTEXT: all x. (JapaneseCompany(x) -> LegendOfZelda(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MillionCopies(",
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> GameTheLegendOfZelda(x))\nall x. (JapaneseGameCompany(x) & Game(x) -> Top10(x))\n[BG]\nall x. (Game(x) & MoreThanOneMillionCopies(x) -> Top10(x))\nTheLegendOfZelda(soldMoreThanOneMillionCopies)\n</PREMISES>\n<CONCLUSION>\n-Top10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -Top10(TheLegendOfZelda)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: (SellMoreThanOneMillion(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: SellMoreThanOneMillion(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -Top10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> CreatedTheLegendOfZelda(x))\nall x. (Top10(x) -> JapaneseGameCompany(x))\n[BG] all x. (MoreThanOneMillionCopies(x) -> Top10(x))\nTheLegendOfZelda(soldMoreThanOneMillionCopies)\n</PREMISES>\n<CONCLUSION>\n-Top10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedGame(TheLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -Top10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedTheLegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(x))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -Top10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> CreatedTheLegendOfZelda(x))\nall x. (Game(x) & Top10List(x) -> JapaneseGameCompany(x))\n[BG]\nall x. (Game(x) & MoreThanOneMillionCopies(x) -> Top10List(x))\nTheLegendOfZelda(soldMoreThanOneMillionCopies)\n</PREMISES>\n<CONCLUSION>\n-Top10List(TheLegendOfZelda)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> CreatedTheLegendOfZelda(x))\nall x. (JapaneseGameCompany(x) & GameInTop10(x) -> Top10(x))\n[BG] all x. (Game(x) & MoreThanOneMillionCopies(x) -> Top10(x))\nTheLegendOfZelda(soldMoreThanOneMillionCopies)\n</PREMISES>\n<CONCLUSION>\n-Top10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseCompany(CreatedGame LegendOfZelda)\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (InTop10(x) -> JapaneseCompany(CreatedGame(x)))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> InTop10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(LegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -InTop10(LegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> CreatedTheLegendOfZelda(x))\nall x. (Game(x) & Top10(x) -> JapaneseGameCompany(x))\n[BG] all x. (Game(x) & MoreThanOneMillionCopies(x) -> Top10(x))\nTheLegendOfZelda(soldMoreThanOneMillionCopies)\n</PREMISES>\n<CONCLUSION>\n-Top10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nA Japanese game company created the game the Legend of Zelda.\nFOL: JapaneseGameCompany(CreatedGame(TheLegendOfZelda))\nTEXT: All games in the Top 10 list are made by Japanese game companies.\nFOL: all x. (Top10(x) -> JapaneseGameCompany(CreatedGame(x)))\nTEXT: [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\nFOL: all x. (MoreThanOneMillionCopies(x) -> Top10(x))\nTEXT: The Legend of Zelda sold more than one million copies.\nFOL: MoreThanOneMillionCopies(TheLegendOfZelda)\n</PREMISES>\n<CONCLUSION>\nThe Legend of Zelda is not in the Top 10 list.\nFOL: -Top10(TheLegendOfZelda)\n</CONCLUSION>",
    "<PREMISES>\nall x. (JapaneseGameCompany(x) -> CreatedTheLegendOfZelda(x))\nall x. (Top10Game(x) -> JapaneseGameCompany(x))\n[BG] all x. (MoreThanOneMillionCopies(x) -> Top10Game(x))\nTheLegendOfZelda(soldMoreThanOneMillionCopies)\n</PREMISES>\n<CONCLUSION>\n-Top10Game(TheLegendOfZelda)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 10,
  "responses": [
   [
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes. \nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes. \nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<PREMISES>\nall x. (Square(x) -> FourSides(x))\nall x. (FourSides(x) -> Shape(x))\n</PREMISES>\n<CONCLUSION>\nall x. (Square(x) -> Shape(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes. \nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<PREMISES>\nall x. (Square(x) -> FourSides(x))\nall x. (FourSides(x) -> Shape(x))\n</PREMISES>\n<CONCLUSION>\nall x. (Square(x) -> Shape(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Square(x) -> FourSides(x))\nall x. (FourSides(x) -> Shape(x))\n</PREMISES>\n<CONCLUSION>\nall x. (Square(x) -> Shape(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Square(x) -> FourSides(x))\nall x. (FourSides(x) -> Shape(x))\n</PREMISES>\n<CONCLUSION>\nall x. (Square(x) -> Shape(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes. \nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<PREMISES>\nall x. (Square(x) -> FourSides(x))\nall x. (FourSides(x) -> Shape(x))\n</PREMISES>\n<CONCLUSION>\nall x. (Square(x) -> Shape(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes. \nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nall x. (Square(x) -> FourSides(x))\nall x. (FourSides(x) -> Shape(x))\n</PREMISES>\n\n<CONCLUSION>\nall x. (Square(x) -> Shape(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Square(x) -> FourSides(x))\nall x. (FourSides(x) -> Shape(x))\n</PREMISES>\n<CONCLUSION>\nall x. (Square(x) -> Shape(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Square(x) -> FourSides(x))\nall x. (FourSides(x) -> Shape(x))\n</PREMISES>\n<CONCLUSION>\nall x. (Square(x) -> Shape(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes. \nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<PREMISES>\nall x. (Square(x) -> FourSides(x))\nall x. (FourSides(x) -> Shape(x))\n</PREMISES>\n\n<CONCLUSION>\nall x. (Square(x) -> Shape(x))\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes. \nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<PREMISES>\nall x. (Square(x) -> FourSides(x))\nall x. (FourSides(x) -> Shape(x))\n</PREMISES>\n<CONCLUSION>\nall x. (Square(x) -> Shape(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes. \nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes. \nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes. \nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes. \nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<PREMISES>\nall x. (Square(x) -> FourSides(x))\nall x. (FourSides(x) -> Shape(x))\n</PREMISES>\n<CONCLUSION>\nall x. (Square(x) -> Shape(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes. \nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>",
    "<PREMISES>\nall x. (Square(x) -> FourSides(x))\nall x. (FourSides(x) -> Shape(x))\n</PREMISES>\n<CONCLUSION>\nall x. (Square(x) -> Shape(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All squares have four sides.\nFOL: all x. (Square(x) -> FourSides(x))\nTEXT: All four-sided things are shapes. \nFOL: all x. (FourSides(x) -> Shape(x))\nTEXT: All squares are shapes.\nFOL: all x. (Square(x) -> Shape(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 11,
  "responses": [
   [
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (x = Rabbit(x) | x = Squirrel(x))\nx. (Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock\n</PREMISES>\n<CONCLUSION>\n- Rock\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: x. (x = Rabbit(x) | x = Squirrel(x))\nTEXT: If something is skittish, then it is not still.\nFOL: x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Rock\nTEXT: Rock is a turtle.\nFOL: - Rock\n</EVALUATE>",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nRock is a turtle.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nRock is a turtle.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Rock is still.\nFOL: -Skittish(Rock)\nTEXT: If something is skittish, then it is not still.\nFOL: Skittish(Rock) -> Still(Rock)\nTEXT: Skittish(Rock) & Still(Rock)\nTEXT: Still(Rock) & Skittish(Rock) -> True\nTEXT: Skittish(Rock)\n",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\n\nSome turtles exist. \nFOL: exists x. (Turtle(x))\n\nAn animal is either a rabbit or a squirrel.\nFOL: (Rabbit(x) & -Squirrel(x)) | (-Rabbit(x) & Squirrel(x))\n\nIf something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\n\nAll squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nRock is still.\nFOL: Still(Rock)\n</PREMISES>\n\n<CONCLUSION>\nRock is a turtle.\nFOL: -Rock(Turtle(x))\n</CONCLUSION>",
    "<PREMISES>\nAll rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nSome turtles exist.\nFOL: exists x. (Turtle(x))\nAn animal is either a rabbit or a squirrel.\nFOL: (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nIf something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nAll squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nRock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nRock is a turtle.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) ->"
   ],
   [
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nRock is a turtle.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Rock is still.\nFOL: Still(Rock)\nTEXT: If something is skittish, then it is not still.\nFOL: -Skittish(Rock) -> Still(Rock)\nTEXT: Rock is still.\nFOL: Still(Rock)\nTEXT: If something is skittish, then it is not still.\nFOL: Skittish(Rock) -> Still",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nRock is a turtle.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nall x. (Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nstill (rock)\n</PREMISES>\n<CONCLUSION>\n- Turtle(rock)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nall x. (x -> (Rabbit(x) | Squirrel(x)))\nall x. ((Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock (Still(Rock))\n</PREMISES>\n<CONCLUSION>\n- Turtles(Rock)\n</CONCLUSION>",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nRock is a turtle.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Rock is still.\nFOL: Still(Rock)\nTEXT: Rock is a turtle.\nFOL: -Turtle(Rock) (negation of an existential quantifier)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx y. (LaLiga(x) & LaLiga(y) & MorePoints(x, y) -> HigherRank(x, y))\nLaLiga(realMadrid) & LaLiga(barcelona)\nMorePoints(realMadrid, barcelona)\n-MorePointsInGameBetween(realMadrid, barcelona) & -MorePointsInGameBetween(barcelona, realMadrid)\nHigherRank(realMadrid, barcelona)\nall x. (Athlete(x) -> GoodAtSports(x))\nall x. (OlympicGoldMedalWinner(x) -> Athlete(x))\nall x. (Scientist(x) -> -GoodAtSports(x))\nall x. (NobelLaureate(x) -> Scientist(x))\nGoodAtSports(amy) | OlympicGoldMedalWinner(amy)\n-NobelLaureate(amy) -> -OlympicGoldMedalWinner(amy)\n-OlympicGoldMedalWinner(amy) -> NobelLaureate(amy)\nall x. (Song(x) -> -Visual(x))\nall x. (FolkSong(x) -> Song(x))\nall x. (Video",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (x -> (Rabbit(x) | Squirrel(x)))\nx. ((Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nStill(Rock)\n</PREMISES>\n<CONCLUSION>\n- Turtles(Rock)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (Rabbit(x) | Squirrel(x))\nx. (Skittish(x) -> NotStill(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock\n</PREMISES>\n<CONCLUSION>\n- Turtles\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: x. (Rabbit(x) | Squirrel(x))\nTEXT: If something is skittish, then it is not still.\nFOL: x. (Skittish(x) -> NotStill(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Rock\nTEXT: Rock is a turtle.\nFOL: -Turtles\n</EVALUATE>",
    "<PREMISES>\nAll rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nSome turtles exist.\nFOL: exists x. (Turtle(x))\nAn animal is either a rabbit or a squirrel.\nFOL: (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nIf something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nAll squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nRock is still.\nFOL: Still(Rock)\n</PREMISES>\n\n<CONCLUSION>\nRock is a turtle.\nFOL: Rock(Turtle)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nall x. (x = Rabbit(x) | x = Squirrel(x))\nall x. ((Skittish(x) -> Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock(rock)\n</PREMISES>\n<CONCLUSION>\n- Turtles(rock)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nall x. ((Skittish(x) -> Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock (Still(Rock))\n</PREMISES>\n<CONCLUSION>\n- Turtles (Turtle(work))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (x & (Rabbit(x) | Squirrel(x)))\nx. (Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nStill(Rock)\n</PREMISES>\n<CONCLUSION>\n- exists x. (Turtle(x))\n</CONCLUSION>",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\n\nSome turtles exist. \nFOL: exists x. (Turtle(x))\n\nAn animal is either a rabbit or a squirrel.\nFOL: (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nIf something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\n\nAll squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nRock is still.\nFOL: Still(Rock)\n</PREMISES>\n\n<CONCLUSION>\nRock is a turtle.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel. \nFOL: (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still. \nFOL: all x. (",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n\n<CONCLUSION>\nRock is a turtle.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Rock is still.\nFOL: Still(Rock)\nTEXT: If something is skittish, then it is not still.\nFOL: -Skittish(Rock)\nTEXT: Rock is not skittish.\nFOL: Skittish(Rock)\nTEXT: All squirrels are skittish.\nFOL: Skittish(Squirrel)\nTEXT: An animal is either a",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nRock is a turtle.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish"
   ],
   [
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nall x. (x = Rabbit(x) | x = Squirrel(x))\nall x. ((Skittish(x) -> NotStill(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock is still.\n</PREMISES>\n<CONCLUSION>\n-Rock is a Turtle.\n</CONCLUSION>",
    "<PREMISES>\nAll rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nSome turtles exist.\nFOL: exists x. (Turtle(x))\nAn animal is either a rabbit or a squirrel.\nFOL: (Rabbit(x) | Squirrel(x))\nIf something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nAll squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nRock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nRock is a turtle.\nFOL: -Turtle(Rock) & Still(Rock)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (x -> (Rabbit(x) | Squirrel(x)))\nx. (Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock\n</PREMISES>\n<CONCLUSION>\n- Rock\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nall x. (x in {Rabbit, Squirrel} -> (Animal(x) -> (Rabbit(x) | Squirrel(x))))\nall x. (Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock\n</PREMISES>\n<CONCLUSION>\n- Turtle(Rock)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nall x. ((Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock (Still(Rock))\n</PREMISES>\n<CONCLUSION>\n- Turtles (Rock)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 12,
  "responses": [
   [
    "<PREMISES>\nAll rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nSome turtles exist.\nFOL: exists x. (Turtle(x))\nAn animal is either a rabbit or a squirrel.\nFOL: (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nIf something is skittish, then it is not still.\nFOL: (Skittish(x) -> -Still(x))\nAll squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nRock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nRock is not a turtle.\nFOL: -Turtle(Rock)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nall x. (x in {Rabbit, Squirrel} -> (Animal(x) -> (Rabbit(x) | Squirrel(x))))\nall x. (Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock\n</PREMISES>\n<CONCLUSION>\n- Turtles\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (x in {Rabbit, Squirrel} -> (Animal(x) -> (Rabbit(x) | Squirrel(x))))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (Rabbit(x) | Squirrel(x))\nx. (-Skittish(x) -> Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock\n</PREMISES>\n<CONCLUSION>\n- Turtles(Rock)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: x. (Rabbit(x) | Squirrel(x))\nTEXT: If something is skittish, then it is not still.\nFOL: x. (-Skittish(x) -> Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtles(Rock)\n</EVALUATE>",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\n\nSome turtles exist. \nFOL: exists x. (Turtle(x))\n\nAn animal is either a rabbit or a squirrel.\nFOL: (Rabbit(x) | Squirrel(x)) for all x\n\nIf something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\n\nAll squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nRock is still.\nFOL: Still(Rock)\n\n</PREMISES>\n<CONCLUSION>\nRock is not a turtle.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: (Rabbit(x) | Squirrel(x)) for all x\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nRock is not a turtle.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Rock is not a turtle.\nFOL: -Turtle(Rock)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nRock is not a turtle.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Rock is not a turtle.\nFOL: -Turtle(Rock)\n</EVALUATE>",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nRock is not a turtle.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Rock is not a turtle.\nFOL: -Turtle(Rock)\n</EVALUATE>",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nRock is not a turtle.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Rock is not a turtle.\nFOL: -Turtle(Rock)\n</EVALUATE>",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nRock is not a turtle.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Rock is not a turtle.\nFOL: -Turtle(Rock)\n</EVALUATE>",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nRock is not a turtle.\nFOL: -Turtle(Rock)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nRock is not a turtle.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Rock is not a turtle.\nFOL: -Turtle(Rock)\n</EVALUATE>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (x & (Rabbit(x) | Squirrel(x)))\nx. (Skittish(x) -> NotStill(x))\nall x. (Squirrel(x) -> Skittish(x))\nstill (Rock)\n</PREMISES>\n<CONCLUSION>\n-not (Turtle(Rock))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (Rabbit(x) | Squirrel(x))\nx. (-Skittish(x) -> Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock (Still(Rock))\n</PREMISES>\n<CONCLUSION>\n- Turtles (Rock)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: x. (Rabbit(x) | Squirrel(x))\nTEXT: If something is skittish, then it is not still.\nFOL: x. (-Skittish(x) -> Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Rock (Still(Rock))\nTEXT: Rock is not a turtle.\nFOL: -Turtles (Rock)\n</EVALU",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\n\nSome turtles exist. \nFOL: exists x. (Turtle(x))\n\nAn animal is either a rabbit or a squirrel.\nFOL: (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nIf something is skittish, then it is not still.\nFOL: (Skittish(x) -> -Still(x))\n\nAll squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nRock is still.\nFOL: Still(Rock)\n</PREMISES>\n\n<CONCLUSION>\nRock is not a turtle.\nFOL: -Turtle(Rock)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (Rabbit(x) | Squirrel(x))\nx. (-Skittish(x) -> Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nstill (rock)\n</PREMISES>\n<CONCLUSION>\n- Turtle(rock)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nall x. (x -> (x = Rabbit(x) | x = Squirrel(x)))\nall x. (Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock\n</PREMISES>\n<CONCLUSION>\n- Turtle(Rock)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (x -> (Rabbit(x) | Squirrel(x)))\nx. ((Skittish(x) -> NotStill(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock\n</PREMISES>\n<CONCLUSION>\n- Turtles(Rock)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: x. (x -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: x. ((Skittish(x) -> NotStill(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Rock\nTEXT: Rock is not a turtle.\nFOL: -Turtles(Rock)\n</EVALU",
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(Rock)\n</EVALUATE>",
    "<PREMISES>\nAll rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nSome turtles exist.\nFOL: exists x. (Turtle(x))\nAn animal is either a rabbit or a squirrel.\nFOL: (Rabbit(x) | Squirrel(x)) \nIf something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nAll squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nRock is still.\nFOL: Still(Rock)\n</PREMISES>\n\n<CONCLUSION>\nRock is not a turtle.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: (Rabbit(x) | Squirrel(x)) \nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All",
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: (Rabbit(x) | Squirrel(x))\nTEXT: If something is skittish, then it is not still.\nFOL: Skittish(x) -> -Still(x)\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(Rock)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\n\nSome turtles exist. \nFOL: exists x. (Turtle(x))\n\nAn animal is either a rabbit or a squirrel. \nFOL: (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nIf something is skittish, then it is not still. \nFOL: all x. (Skittish(x) -> -Still(x))\n\nAll squirrels are skittish. \nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nRock is still. \nFOL: Still(Rock)\n\n</PREMISES>\n\n<CONCLUSION>\nRock is not a turtle. \nFOL: -Turtle(Rock)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: (Rabbit(x) | Squirrel(x))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\nTEXT: Rock is not a turtle.\nFOL: -Turtle(Rock)\n</EVALUATE>",
    "<PREMISES>\nAll rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\n\nSome turtles exist.\nFOL: exists x. (Turtle(x))\n\nAn animal is either a rabbit or a squirrel.\nFOL: (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nIf something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\n\nAll squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nRock is still.\nFOL: Still(Rock)\n</PREMISES>\n\n<CONCLUSION>\nRock is not a turtle.\nFOL: -Turtle(Rock)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nall x. (x = Squirrel(x) | x = Rabbit(x))\nall x. (Skittish(x) -> NotStill(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock (Still(Rock))\n</PREMISES>\n<CONCLUSION>\n- Turtles(Rock)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (Rabbit(x) | Squirrel(x))\nx. (Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock (Still(Rock))\n</PREMISES>\n<CONCLUSION>\n- Turtle(Rock)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 13,
  "responses": [
   [
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx y. (LaLiga(x) & LaLiga(y) & MorePoints(x, y) -> HigherRank(x, y))\nLaLiga(realMadrid) & LaLiga(barcelona)\nMorePoints(realMadrid, barcelona)\n-MorePointsInGameBetween(realMadrid, barcelona) & -MorePointsInGameBetween(barcelona, realMadrid)\nHigherRank(realMadrid, barcelona)\nall x. (Athlete(x) -> GoodAtSports(x))\nall x. (OlympicGoldMedalWinner(x) -> Athlete(x))\nall x. (Scientist(x) -> -GoodAtSports(x))\nall x. (NobelLaureate(x) -> Scientist(x))\nGoodAtSports(amy) | OlympicGoldMedalWinner(amy)\n-NobelLaureate(amy) -> -OlympicGoldMedalWinner(amy)\n-OlympicGoldMedalWinner(amy) -> NobelLaureate(amy)\nall x. (Song(x) -> -Visual(x))\nall x. (FolkSong(x) -> Song(x))\nall x. (Video",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists y. (Turtle(y))\nx : y. (Rabbit(x) & Squirrel(y))\ny : z. (Skittish(z) -> -Still(z))\nall x. (Squirrel(x) -> Skittish(x))\nStill(Rock)\n</PREMISES>\n<CONCLUSION>\nRock : Turtle | Cute(Rock)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: (Rabbit(x) | Squirrel(x))\nTEXT: If something is skittish, then it is not still.\nFOL: Skittish(x) -> -Still(x)\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(Rock) | Cute(Rock))\n</EVALUATE>",
    "<PREMISES>\nAll rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n\n<CONCLUSION>\nRock is a turtle or cute.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nRock is a turtle or cute.\nFOL: (Turtle(Rock) | Cute(Rock))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists y. (Turtle(y))\nx y. (Animal(x) & Animal(y) -> (x = y | x = squirrel(y)))\nx. (Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nStill(Rock)\n</PREMISES>\n<CONCLUSION>\nRock y. (Turtle(y) | Cute(y))\n</CONCLUSION>",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nRock is a turtle or cute.\nFOL: (Turtle(Rock) | Cute(Rock))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: (Rabbit(x) | Squirrel(x))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(Rock) | Cute(Rock))\n</EVALUATE>",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n\n<CONCLUSION>\nRock is a turtle or cute.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Rock is still.\nFOL: Still(Rock)\nTEXT: If something is skittish, then it is not still.\nFOL: -Skittish(Rock)\nTEXT: All squirrels are skittish.\nFOL: -Skittish(rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(Rock) | Cute(Rock",
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\nTEXT: Rock is a turtle or cute.\nFOL: (Turtle(Rock) | Cute(Rock))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nRock is a turtle or cute.\nFOL: Rock(Turtle(x) | Cute(x))\n</CONCLUSION>",
    "<PREMISES>\nAll rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\n\nSome turtles exist.\nFOL: exists x. (Turtle(x))\n\nAn animal is either a rabbit or a squirrel.\nFOL: ((Animal(x) & Rabbit(x)) | (Animal(x) & Squirrel(x)))\n\nIf something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\n\nAll squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nRock is still.\nFOL: Still(Rock)\n</PREMISES>\n\n<CONCLUSION>\nRock is a turtle or cute.\nFOL: ((Turtle(Rock) | -Turtle(Rock)) & (Cute(Rock) | -Cute(Rock)))\n</CONCLUSION>",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nRock is a turtle or cute.\nFOL: Rock(Turtle(x) | Cute(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nall x. (x in {Rabbit, Squirrel} -> Animal(x))\nall x. (Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock\n</PREMISES>\n<CONCLUSION>\n((Turtle(Rock) | Cute(Rock)) & -Animal(Rock))\n</CONCLUSION>",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\n\nSome turtles exist. \nFOL: exists x. (Turtle(x))\n\nAn animal is either a rabbit or a squirrel. \nFOL: (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nIf something is skittish, then it is not still. \nFOL: all x. (Skittish(x) -> -Still(x))\n\nAll squirrels are skittish. \nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nRock is still. \nFOL: Still(Rock)\n</PREMISES>\n\n<CONCLUSION>\nRock is a turtle or cute. \nFOL: (Rock -> (Turtle(Rock) | Cute(Rock)))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (Rabbit(x) | Squirrel(x))\nx. (Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nStill(Rock)\n</PREMISES>\n<CONCLUSION>\nRock. (Turtle(x) | Cute(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (Rabbit(x) | Squirrel(x))\nx. (Skittish(x) -> Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock\n</PREMISES>\n<CONCLUSION>\n((Turtle(Rock) | Cute(Rock)) & exists y. (Turtle(y) | Cute(y)))\n</CONCLUSION>",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nRock is a turtle or cute.\nFOL: (Turtle(Rock) | Cute(Rock))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (x -> (Rabbit(x) | Squirrel(x)))\nx. (Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock\n</PREMISES>\n<CONCLUSION>\n((Turtle(Rock) | Cute(Rock))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nall x. ((Skittish(x) -> Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nstill (rock)\n</PREMISES>\n<CONCLUSION>\n((Turtle(rock) | Cute(rock))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (Rabbit(x) | Squirrel(x))\nx. (Skittish(x) -> NotStill(x))\nall x. (Squirrel(x) -> Skittish(x))\nStill(Rock)\n</PREMISES>\n<CONCLUSION>\n((Turtle(Rock) | Cute(Rock)) | (Rabbit(Rock) | Squirrel(Rock)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx y. (LaLiga(x) & LaLiga(y) & MorePoints(x, y) -> HigherRank(x, y))\nLaLiga(realMadrid) & LaLiga(barcelona)\nMorePoints(realMadrid, barcelona)\n-MorePointsInGameBetween(realMadrid, barcelona) & -MorePointsInGameBetween(barcelona, realMadrid)\nHigherRank(realMadrid, barcelona)\nall x. (Athlete(x) -> GoodAtSports(x))\nall x. (OlympicGoldMedalWinner(x) -> Athlete(x))\nall x. (Scientist(x) -> -GoodAtSports(x))\nall x. (NobelLaureate(x) -> Scientist(x))\nGoodAtSports(amy) | OlympicGoldMedalWinner(amy)\n-NobelLaureate(amy) -> -OlympicGoldMedalWinner(amy)\n-OlympicGoldMedalWinner(amy) -> NobelLaureate(amy)\nall x. (Song(x) -> -Visual(x))\nall x. (FolkSong(x) -> Song(x))\nall x. (Video",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\n\nSome turtles exist. \nFOL: exists x. (Turtle(x))\n\nAn animal is either a rabbit or a squirrel.\nFOL: (Rabbit(x) | Squirrel(x))\n\nIf something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\n\nAll squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nRock is still.\nFOL: Still(Rock)\n</PREMISES>\n\n<CONCLUSION>\nRock is a turtle or cute.\nFOL: (Turtle(Rock) | Cute(Rock))\n</CONCLUSION>",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nRock is a turtle or cute.\nFOL: (Rock -> (Turtle(Rock) | Cute(Rock)))\n</CONCLUSION>",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\n\nSome turtles exist. \nFOL: exists x. (Turtle(x))\n\nAn animal is either a rabbit or a squirrel.\nFOL: (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nIf something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\n\nAll squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nRock is still.\nFOL: Still(Rock)\n</PREMISES>\n\n<CONCLUSION>\nRock is a turtle or cute.\nFOL: (Rock -> (Turtle(Rock) | Cute(Rock)))\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 14,
  "responses": [
   [
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists y. (Turtle(y))\nall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nall x. ((Skittish(x) & Still(x)) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock (Still(Rock))\n</PREMISES>\n<CONCLUSION>\n((-Turtle(Rock) & -Squirrel(Rock)) -> (Cute(Rock) | Skittish(Rock)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists y. (Turtle(y))\nx y. (Animal(x) & Animal(y) & (x = Rabbit(y) | x = Squirrel(y)))\nx. (Skittish(x) -> NotStill(x))\nall x. (Squirrel(x) -> Skittish(x))\nstill Rock\n</PREMISES>\n<CONCLUSION>\nx. (Rock(x) & (NotTurtle(x) & NotSquirrel(x)) -> (Cute(x) | Skittish(x)))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -Turtle(Rock) & -Squirrel(Rock) -> (Cute(Rock) | Skittish(Rock))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: (Rabbit(x) | Squirrel(x))\nTEXT: If something is skittish, then it is not still.\nFOL: Skittish(x) -> -Still(x)\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -Turtle(Rock) & -Squirrel(Rock) -> (Cute(Rock) | Skittish(Rock))\n</EVALUATE>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists y. (Turtle(y))\nall x. (x -> (Rabbit(x) | Squirrel(x)))\nall x. ((Skittish(x) -> -Still(x))\nall x. ((Squirrel(x) -> Skittish(x))\nRock(rock) -> Still(rock)\n</PREMISES>\n<CONCLUSION>\n- (Turtle(rock) & Squirrel(rock)) -> (Cute(rock) | Skittish(rock))\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -Turtle(Rock) & -Squirrel(Rock) -> (Cute(Rock) | Skittish(Rock))\n</EVALUATE>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nall x. (x -> (Rabbit(x) | Squirrel(x)))\nall x. ((Skittish(x) & Still(x)) -> Not(x))\nall x. (Squirrel(x) -> Skittish(x))\nStill(Rock)\n</PREMISES>\n<CONCLUSION>\n((Not(Turtle(Rock)) & Not(Squirrel(Rock))) -> (Cute(Rock) | Skittish(Rock)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (x = Rabbit(x) | x = Squirrel(x))\nx. (Skittish(x) -> NotStill(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock. (Still(Rock))\n</PREMISES>\n\n<CONCLUSION>\nx. (Rock = Turtle(x) & Rock = Squirrel(x)) -> (Cute(Rock) | Skittish(Rock))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (x -> (Rabbit(x) | Squirrel(x)))\nx. (Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock -> Still(Rock)\n</PREMISES>\n\n<CONCLUSION>\nx. (Rock(x) & (Turtle(x) | Squirrel(x))) -> (Cute(x) | Skittish(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nall x. (x -> (Rabbit(x) | Squirrel(x)))\nall x. ((Skittish(x) -> Still(x))\nall x. ((Squirrel(x) -> Skittish(x))\nRock (Still(Rock))\n</PREMISES>\n<CONCLUSION>\nall x. ((-Turtle(x) & -Squirrel(x)) -> (Cute(x) | Skittish(x)))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (Rabbit(x) | Squirrel(x))\nx. (Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nStill(Rock)\n</PREMISES>\n<CONCLUSION>\nx. (Rock(x) & (Turtle(x) | Squirrel(x))) -> (Cute(x) | Skittish(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: (-Turtle(Rock) & -Squirrel(Rock)) -> (Cute(Rock) | Skittish(Rock))\n</EVALUATE>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nall x. (x in {Rabbit, Squirrel} -> (x(x) -> (Rabbit(x) & Squirrel(x))))\nall x. (Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nStill(Rock)\n</PREMISES>\n<CONCLUSION>\n- (Turtle(Rock) & Squirrel(Rock)) -> (Cute(Rock) | Skittish(Rock))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (x -> (Rabbit(x) | Squirrel(x)))\nx. ((Skittish(x) & Still(x)) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock -> Still(Rock)\n</PREMISES>\n<CONCLUSION>\n((Rock -> -Turtle(Rock)) | (Rock -> (Cute(Rock) | Skittish(Rock))))\n</CONCLUSION>",
    "<PREMISES>\nAll rabbits are cute. \nSome turtles exist. \nAn animal is either a rabbit or a squirrel.\nIf something is skittish, then it is not still.\nAll squirrels are skittish.\nRock is still.\n</PREMISES>\n<CONCLUSION>\nIf Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute"
   ],
   [
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -Turtle(Rock) & -Squirrel(Rock) -> (Cute(Rock) | Skittish(Rock))\n</EVALUATE>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nall x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nall x. ((Skittish(x) -> -Still(x))\nall x. ((Squirrel(x) -> Skittish(x))\nRock\n</PREMISES>\n<CONCLUSION>\nall x. ((-Turtle(x) & -Squirrel(x)) -> (Cute(x) | Skittish(x)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nall x. (x in {rabbit, squirrel} -> Animal(x))\nall x. (Skittish(x) -> NotStill(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock\n</PREMISES>\n<CONCLUSION>\nall x. ((-Turtle(x) & -Squirrel(x)) -> (Cute(x) | Skittish(x)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nall x. (x in {Rabbit, Squirrel} -> (Animal(x) -> (Rabbit(x) | Squirrel(x))))\nall x. (Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nStill(Rock)\n</PREMISES>\n<CONCLUSION>\n(-Turtle(Rock) & -Squirrel(Rock)) -> (Cute(Rock) | Skittish(Rock))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (Rabbit(x) | Squirrel(x))\nx. (-Skittish(x) -> Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock. (Still(Rock))\n</PREMISES>\n<CONCLUSION>\nx. (-(Turtle(x) & Squirrel(x)) -> (Cute(x) | Skittish(x)))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (x = Rabbit(y) | x = Squirrel(y))\nx. (Skittish(x) -> Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock. (Still(Rock))\n</PREMISES>\n<CONCLUSION>\nx. (Rock = Turtle(y) | Rock = Squirrel(y)) -> (Cute(y) | Skittish(y))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\nTEXT: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nFOL: -Turtle(Rock) & -Squirrel(Rock) -> (Cute(Rock) | Skittish(Rock))\n</EVALUATE>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx y. (LaLiga(x) & LaLiga(y) & MorePoints(x, y) -> HigherRank(x, y))\nLaLiga(realMadrid) & LaLiga(barcelona)\nMorePoints(realMadrid, barcelona)\n-MorePointsInGameBetween(realMadrid, barcelona) & -MorePointsInGameBetween(barcelona, realMadrid)\nHigherRank(realMadrid, barcelona)\n</PREMISES>\n<CONCLUSION>\nall x. (Turtle(x) -> -Squirrel(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock(x)\n-Still(Rock(x))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel. \nFOL: x y. (Animal(x) & Animal(y) & (Rabbit(x) & -Squirrel(y)) | (-Rabbit(x) & Squirrel",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists y. (Turtle(y))\nx. (x = Rabbit(x) | x = Squirrel(x))\nx. (Skittish(x) -> NotStill(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock\n</PREMISES>\n<CONCLUSION>\nforall x. ((Not(Turtle(x)) & Not(Squirrel(x))) -> (Cute(x) | Skittish(x)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx y. (LaLiga(x) & LaLiga(y) & MorePoints(x, y) -> HigherRank(x, y))\nLaLiga(realMadrid) & LaLiga(barcelona)\nMorePoints(realMadrid, barcelona)\n-MorePointsInGameBetween(realMadrid, barcelona) & -MorePointsInGameBetween(barcelona, realMadrid)\nHigherRank(realMadrid, barcelona)\n</PREMISES>\n<CONCLUSION>\nall x. ((Turtle(x) & Squirrel(x)) -> - (Turtle(x) & Squirrel(x)))\nall x. (Cute(x) | Skittish(x))\nx. (Skittish(x) -> Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nStill(rock)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: x"
   ]
  ]
 },
 {
  "index": 15,
  "responses": [
   [
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\n\nSome turtles exist. \nFOL: exists x. (Turtle(x))\n\nAn animal is either a rabbit or a squirrel.\nFOL: (Rabbit(x) | Squirrel(x))\n\nIf something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\n\nAll squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nRock is still.\nFOL: Still(Rock)\n</PREMISES>\n\n<CONCLUSION>\nIf Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(Rock) & Still(Rock)) -> (Turtle(Rock) & Skittish(Rock))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nall x. (x = rabbit(x) | x = squirrel(x))\nall x. ((Skittish(x) -> -Still(x))\nall x. ((Skittish(x) -> Skittish(x))\nRock(rock) -> Still(rock)\n</PREMISES>\n<CONCLUSION>\nall x. ((Cute(x) & Still(x)) -> (Turtle(x) & Skittish(x)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Cute(x) -> Rabbit(x))\nexists x. (Turtle(x))\nx. (x = Rabbit(x) | x = Squirrel(x))\nx. (Skittish(x) -> -Still(x))\nall x. (Skittish(x) -> Squirrel(x))\nRock. (Still(Rock))\n</PREMISES>\n<CONCLUSION>\n(x & Rock(x)) : (Turtle(x) & Skittish(x))\n</CONCLUSION>",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\n\nSome turtles exist. \nFOL: exists x. (Turtle(x))\n\nAn animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nIf something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\n\nAll squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nRock is still.\nFOL: Still(Rock)\n</PREMISES>\n\n<CONCLUSION>\nIf Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(Rock) & Still(Rock)) -> (Turtle(Rock) & Skittish(Rock))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (x = Rabbit(x) | x = Squirrel(x))\nx. (Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock\n</PREMISES>\n<CONCLUSION>\nx. (Cute(x) & Still(x) -> (Turtle(x) & Skittish(x)))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nIf Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(Rock) & Still(Rock)) -> (Turtle(Rock) & Skittish(Rock))\n</CONCLUSION>",
    "<PREMISES>\nAll rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nSome turtles exist.\nFOL: exists x. (Turtle(x))\nAn animal is either a rabbit or a squirrel.\nFOL: Animal(a) -> (Rabbit(a) | Squirrel(a))\nIf something is skittish, then it is not still.\nFOL: Skittish(a) -> -Still(a)\nAll squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nRock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nIf Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(Rock) & Still(Rock)) -> (Turtle(Rock) & Skittish(Rock))\n</CONCLUSION>",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\n\nSome turtles exist. \nFOL: exists x. (Turtle(x))\n\nAn animal is either a rabbit or a squirrel. \nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\n\nIf something is skittish, then it is not still. \nFOL: all x. (Skittish(x) -> -Still(x))\n\nAll squirrels are skittish. \nFOL: all x. (Squirrel(x) -> Skittish(x))\n\nRock is still. \nFOL: Still(Rock)\n</PREMISES>\n\n<CONCLUSION>\nIf Rock is cute and still, then Rock is a turtle and skittish. \nFOL: (Cute(Rock) & Still(Rock)) -> (Turtle(Rock) & Skittish(Rock))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Cute(x) -> Rabbit(x))\nexists y. (Turtle(y))\nx y. (Animal(x) & Animal(y))\nx. (Skittish(x) -> -Still(x))\nall x. (Skittish(x) -> Squirrel(x))\nRock\n</PREMISES>\n<CONCLUSION>\nall x. (Cute(x) & Still(x) -> (Turtle(x) & Skittish(x)))\n</CONCLUSION>",
    "<PREMISES>\nAll rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nIf Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(Rock) & Still(Rock)) -> (Turtle(Rock) & Skittish(Rock))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (Rabbit(x) | Squirrel(x))\nx. (Skittish(x) -> NotStill(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock\n</PREMISES>\n<CONCLUSION>\nx. ((Cute(x) & Still(x)) -> (Turtle(x) & Skittish(x)))\n</CONCLUSION>",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n\n<CONCLUSION>\nIf Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(Rock) & Still(Rock)) -> (Turtle(Rock) & Skittish(Rock))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists y. (Turtle(y))\nx y. (Animal(x) & Animal(y))\nx y. (Skittish(x) -> NotStill(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock (Still(Rock))\n</PREMISES>\n<CONCLUSION>\nall x. ((Cute(x) & Still(x)) -> (Turtle(x) & Skittish(x)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (x = Rabbit(x) | x = Squirrel(x))\nx. (Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock\n</PREMISES>\n<CONCLUSION>\nx. (Cute(x) & Still(x) -> (Turtle(x) & Skittish(x)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (x = Rabbit(x) | x = Squirrel(x))\nx. (Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock (Still(Rock))\n</PREMISES>\n<CONCLUSION>\nall x. (Cute(x) & Still(x) -> (Turtle(x) & Skittish(x)))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (x = Rabbit(y) | x = Squirrel(y))\nx. (Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock (Still(Rock))\n</PREMISES>\n<CONCLUSION>\nall x. (Cute(x) & Still(x) -> (Turtle(x) & Skittish(x)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nall x. (x in {Rabbit, Squirrel} -> (Animal(x) -> (Rabbit(x) | Squirrel(x))))\nall x. (Skittish(x) -> Not(Still(x)))\nall x. (Squirrel(x) -> Skittish(x))\nRock\n</PREMISES>\n<CONCLUSION>\nall x. (Cute(x) & Still(x) -> (Turtle(x) & Skittish(x)))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All rabbits are cute.\nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist.\nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(Rock) & Still(Rock)) -> (Turtle(Rock) & Skittish(Rock))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (x is Rabbit(x) | x is Squirrel(x))\nx. (Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock is still.\n</PREMISES>\n<CONCLUSION>\n((Cute(Rock) & Still(Rock)) -> (Turtle(Rock) & Skittish(Rock)))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: If Rock is cute and still, then Rock is a turtle and skittish.\nFOL: (Cute(Rock) & Still(Rock)) -> (Turtle(Rock) & Skittish(Rock))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists y. (Turtle(y))\nx : y. (Rabbit(x) & Squirrel(y))\ny : z. (Skittish(y) & -Still(z))\nall x. (Squirrel(x) -> Skittish(x))\nRock : Still\n</PREMISES>\n<CONCLUSION>\nall x. (Cute(x) & Still(x)) -> (Turtle(x) & Skittish(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists x. (Turtle(x))\nx. (x = Rabbit(x) | x = Squirrel(x))\nx. (Skittish(x) -> -Still(x))\nall x. (Squirrel(x) -> Skittish(x))\nRock\n</PREMISES>\n<CONCLUSION>\nx. (Rock & Cute(x) & Still(x) -> (Turtle(x) & Skittish(x)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Rabbit(x) -> Cute(x))\nexists y. (Turtle(y))\nx. (x is Rabbit(x) | x is Squirrel(x))\ny. ((Skittish(y) & -Still(y)))\nall x. (Squirrel(x) -> Skittish(x))\nRock is Still\n</PREMISES>\n<CONCLUSION>\nRock is Cute & Still -> (Turtle(Rock) & Skittish(Rock))\n</CONCLUSION>",
    "<PREMISES>\nAll rabbits are cute. \nFOL: all x. (Rabbit(x) -> Cute(x))\nTEXT: Some turtles exist. \nFOL: exists x. (Turtle(x))\nTEXT: An animal is either a rabbit or a squirrel.\nFOL: all x. (Animal(x) -> (Rabbit(x) | Squirrel(x)))\nTEXT: If something is skittish, then it is not still.\nFOL: all x. (Skittish(x) -> -Still(x))\nTEXT: All squirrels are skittish.\nFOL: all x. (Squirrel(x) -> Skittish(x))\nTEXT: Rock is still.\nFOL: Still(Rock)\n</PREMISES>\n<CONCLUSION>\nIf Rock is cute and still, then Rock is a turtle and skittish.\nFOL: ((Cute(Rock) & Still(Rock)) -> (Turtle(Rock) & Skittish(Rock)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Cute(x) -> Rabbit(x))\nexists x. (Turtle(x))\nx y. (LaLiga(x) & LaLiga(y) & MorePoints(x, y) -> HigherRank(x, y))\nLaLiga(realMadrid) & LaLiga(barcelona)\nMorePoints(realMadrid, barcelona)\n-MorePointsInGameBetween(realMadrid, barcelona) & -MorePointsInGameBetween(barcelona, realMadrid)\nHigherRank(realMadrid, barcelona)\nall x. (GoodAtSports(x) -> Athlete(x))\nall x. (OlympicGoldMedalWinner(x) -> Athlete(x))\nall x. (Scientist(x) -> -GoodAtSports(x))\nall x. (NobelLaureate(x) -> Scientist(x))\nGoodAtSports(amy) | OlympicGoldMedalWinner(amy)\n-NobelLaureate(amy) -> -OlympicGoldMedalWinner(amy)\n-OlympicGoldMedalWinner(amy) -> NobelLaureate(amy)\nall x. (Respected(x) -> ContributeToCountry(x))\nall x. (Respected(x) -> Respected(x))\nall x"
   ]
  ]
 },
 {
  "index": 16,
  "responses": [
   [
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> KarenDownload(x)) & (KarenDownload(x) -> KarenBingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -KarenDownload(\"Black Mirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> KarenShare(x, Lisa))\n</PREMISES>\n<CONCLUSION>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> Download(x)) & (Download(x) -> KarenBingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Stranger Things\" to Lisa.\nFOL: ShareToLisa(\"Stranger Things\")\n</CONCLUSION>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: StrangerThings(StrangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & Popular(x) -> BingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (Netflix(x) & BingeWatch(x) -> Download(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(BlackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(BlackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Stranger Things\" to Lisa.\nFOL: ShareToLisa(StrangerThings)\n</CONCLUSION>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(StrangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> Download(x)) & all x. (Download(x) -> KarenBingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(BlackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(BlackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Stranger Things\" to Lisa.\nFOL: ShareToLisa(StrangerThings)\n</CONCLUSION>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"StrangerThings\") & Popular(\"StrangerThings\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, Karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, Karen) -> Download(x, Karen)) & all x. (Download(x, Karen) -> BingeWatch(x, Karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"BlackMirror\", Karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"BlackMirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, Karen) -> ShareToLisa(x, Karen))\n</PREMISES>\n<CONCLUSION>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"StrangerThings\") & Popular(\"StrangerThings\")\nTEXT: If"
   ],
   [
    "<PREMISES>\n<TEXT>Stranger Things is a popular Netflix show.</TEXT>\n<FOL>NetflixShow(StrangerThings)\n</FOL>\n<TEXT>If a Netflix show is popular, Karen will binge-watch it.</TEXT>\n<FOL>all x. (NetflixShow(x) -> KarenBingeWatch(x))\n</FOL>\n<TEXT>If and only if Karen binge-watches a Netflix show, she will download it.</TEXT>\n<FOL>all x. (KarenBingeWatch(x) -> Download(x))\n</FOL>\n<TEXT>Karen does not download \"Black Mirror\".</TEXT>\n<FOL>-Download(BlackMirror)\n</FOL>\n<TEXT>\"Black Mirror\" is a Netflix show.</TEXT>\n<FOL>NetflixShow(BlackMirror)\n</FOL>\n<TEXT>If Karen binge-watches a Netflix show, she will share it to Lisa.</TEXT>\n<FOL>all x. (KarenBingeWatch(x) -> ShareToLisa(x))\n</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Karen will share \"Stranger Things\" to Lisa.</TEXT>\n<FOL>ShareToLisa(StrangerThings)\n</FOL>\n</CONCLUSION>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(StrangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> KarenDownload(x)) & all x. (KarenDownload(x) -> KarenBingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -KarenDownload(BlackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(BlackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Stranger Things\" to Lisa.\nFOL: KarenBingeWatch(StrangerThings) & ShareToLisa(StrangerThings)\n</CONCLUSION>",
    "<PREMISES>\n<TEXT>Stranger Things is a popular Netflix show.</TEXT>\n<FOL>NetflixShow(StrangerThings)\n</FOL>\n<TEXT>If a Netflix show is popular, Karen will binge-watch it.</TEXT>\n<FOL>all x. (NetflixShow(x) -> KarenBingeWatches(x))\n</FOL>\n<TEXT>If and only if Karen binge-watches a Netflix show, she will download it.</TEXT>\n<FOL>all x. (KarenBingeWatches(x) -> KarenDownloads(x)) & all x. (KarenDownloads(x) -> KarenBingeWatches(x))\n</FOL>\n<TEXT>Karen does not download \"Black Mirror\".</TEXT>\n<FOL>-KarenDownloads(\"BlackMirror\")\n</FOL>\n<TEXT>\"Black Mirror\" is a Netflix show.</TEXT>\n<FOL>NetflixShow(\"BlackMirror\")\n</FOL>\n<TEXT>If Karen binge-watches a Netflix show, she will share it to Lisa.</TEXT>\n<FOL>all x. (KarenBingeWatches(x) -> KarenSharesToLisa(x))\n</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Karen will share \"Stranger Things\" to Lisa.</",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> KarenDownload(x)) & all x. (KarenDownload(x) -> KarenBingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -KarenDownload(\"Black Mirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Stranger Things\" to Lisa.\nFOL: KarenBingeWatch(\"Stranger Things\") & ShareToLisa(\"Stranger Things\")\n</CONCLUSION>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> KarenDownload(x)) & (KarenDownload(x) -> KarenBingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -KarenDownload(blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Stranger Things\" to Lisa.\nFOL: KarenBingeWatch(strangerThings) & ShareToLisa(strangerThings)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> Download(x)) & (Download(x) -> KarenBingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Stranger Things\" to Lisa.\nFOL: ShareToLisa(\"Stranger Things\")\n</CONCLUSION>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"StrangerThings\") & Popular(\"StrangerThings\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> Karen(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (Karen(x) & NetflixShow(x) -> Download(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"BlackMirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"BlackMirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Karen(x) & NetflixShow(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"StrangerThings\" to Lisa.\nFOL: ShareToLisa(\"StrangerThings\")\n</CONCLUSION>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(strangerThings)\nIf a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> KarenDownload(x)) & all x. (KarenDownload(x) -> KarenBingeWatch(x))\nKaren does not download \"Black Mirror\".\nFOL: -KarenDownload(blackMirror)\n\"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> KarenShare(x, lisa))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Stranger Things\" to Lisa.\nFOL: KarenShare(strangerThings, lisa)\n</CONCLUSION>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> KarenDownload(x)) & (KarenDownload(x) -> KarenBingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -KarenDownload(\"Black Mirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Stranger Things\" to Lisa.\nFOL: ShareToLisa(\"Stranger Things\")\n</CONCLUSION>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> KarenDownload(x)) & (KarenDownload(x) -> KarenBingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -KarenDownload(\"Black Mirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> KarenShare(x, Lisa))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Stranger Things\" to Lisa.\nFOL: KarenShare(\"Stranger Things\", Lisa)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(StrangerThings)\nIf a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatches(x))\nIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatches(x) -> KarenDownloads(x)) & all x. (KarenDownloads(x) -> KarenBingeWatches(x))\nKaren does not download \"Black Mirror\".\nFOL: -KarenDownloads(BlackMirror)\n\"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(BlackMirror)\nIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatches(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Stranger Things\" to Lisa.\nFOL: KarenBingeWatches(StrangerThings) & ShareToLisa(StrangerThings)\n</CONCLUSION>",
    "<PREMISES>\n<TEXT>Stranger Things is a popular Netflix show.</TEXT>\n<FOL>NetflixShow(StrangerThings)</FOL>\n<TEXT>If a Netflix show is popular, Karen will binge-watch it.</TEXT>\n<FOL>all x. (NetflixShow(x) -> KarenBingeWatches(x))</FOL>\n<TEXT>If and only if Karen binge-watches a Netflix show, she will download it.</TEXT>\n<FOL>all x. (KarenBingeWatches(x) -> KarenDownloads(x)) & all x. (KarenDownloads(x) -> KarenBingeWatches(x))</FOL>\n<TEXT>Karen does not download \"Black Mirror).</TEXT>\n<FOL>-KarenDownloads(BlackMirror)</FOL>\n<TEXT>\"Black Mirror\" is a Netflix show.</TEXT>\n<FOL>NetflixShow(BlackMirror)</FOL>\n<TEXT>If Karen binge-watches a Netflix show, she will share it to Lisa.</TEXT>\n<FOL>all x. (KarenBingeWatches(x) -> ShareToLisa(x))</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Karen will share \"Stranger Things\" to Lisa.</TEXT>\n<FOL>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> Download(x)) & (Download(x) -> KarenBingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Stranger Things\" to Lisa.\nFOL: ShareToLisa(\"Stranger Things\")\n</CONCLUSION>",
    "<PREMISES>\n<TEXT>Stranger Things is a popular Netflix show.</TEXT>\n<FOL>NetflixShow(StrangerThings)</FOL>\n<TEXT>If a Netflix show is popular, Karen will binge-watch it.</TEXT>\n<FOL>all x. (NetflixShow(x) -> KarenBingeWatches(x))</FOL>\n<TEXT>If and only if Karen binge-watches a Netflix show, she will download it.</TEXT>\n<FOL>all x. (KarenBingeWatches(x) -> KarenDownloads(x)) & (KarenDownloads(x) -> KarenBingeWatches(x))</FOL>\n<TEXT>Karen does not download \"Black Mirror).</TEXT>\n<FOL>-KarenDownloads(BlackMirror)</FOL>\n<TEXT>\"Black Mirror\" is a Netflix show.</TEXT>\n<FOL>NetflixShow(BlackMirror)</FOL>\n<TEXT>If Karen binge-watches a Netflix show, she will share it to Lisa.</TEXT>\n<FOL>all x. (KarenBingeWatches(x) -> ShareToLisa(x))</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Karen will share \"Stranger Things\" to Lisa.</TEXT>\n<FOL>ShareToLisa",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> BingeWatch(Karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(Karen, x) & -Download(Karen, x)) | (-BingeWatch(Karen, x) & Download(Karen, x)))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(Karen, \"Black Mirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) -> ShareToLisa(Karen, x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Stranger Things\" to Lisa.\nFOL: ShareToLisa(Karen, \"Stranger Things\")\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> KarenDownload(x)) & all x. (KarenDownload(x) -> KarenBingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -KarenDownload(\"Black Mirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Stranger Things\" to Lisa.\nFOL: KarenBingeWatch(\"Stranger Things\") & ShareToLisa(\"Stranger Things\")\n</CONCLUSION>",
    "<PREMISES>\n<TEXT>Stranger Things is a popular Netflix show.</TEXT>\n<FOL>NetflixShow(\"StrangerThings\") & Popular(\"StrangerThings\")\n</FOL>\n<TEXT>If a Netflix show is popular, Karen will binge-watch it.</TEXT>\n<FOL>All x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, Karen))\n</FOL>\n<TEXT>If and only if Karen binge-watches a Netflix show, she will download it.</TEXT>\n<FOL>All x. ((BingeWatch(x, Karen) & NetflixShow(x)) -> Download(x, Karen))\n</FOL>\n<TEXT>Karen does not download \"Black Mirror\".</TEXT>\n<FOL>-Download(\"BlackMirror\", Karen)\n</FOL>\n<TEXT>\"Black Mirror\" is a Netflix show.</TEXT>\n<FOL>NetflixShow(\"BlackMirror\")\n</FOL>\n<TEXT>If Karen binge-watches a Netflix show, she will share it to Lisa.</TEXT>\n<FOL>All x. (NetflixShow(x) & BingeWatch(x, Karen) -> Share(x, Lisa, Karen))\n</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Karen will share \"Stranger",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> KarenDownload(x)) & (KarenDownload(x) -> KarenBingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -KarenDownload(\"Black Mirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Stranger Things\" to Lisa.\nFOL: ShareToLisa(\"Stranger Things\")\n</CONCLUSION>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: StrangerThings(isPopular)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & isPopular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, BlackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: Netflix(BlackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & BingeWatch(karen, x) -> ShareToLisa(karen, x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Stranger Things\" to Lisa.\nFOL: ShareToLisa(karen, StrangerThings)\n</CONCLUSION>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"StrangerThings\") & Popular(\"StrangerThings\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> BingeWatch(x, Karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, Karen) -> Download(x, Karen)) & (Download(x, Karen) -> BingeWatch(x, Karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"BlackMirror\", Karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"BlackMirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, Karen) -> ShareToLisa(x, Karen))\n</PREMISES>\n<CONCLUSION>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"StrangerThings\") & Popular(\"StrangerThings\")\nTEXT: If a Netflix show is popular, Karen"
   ]
  ]
 },
 {
  "index": 17,
  "responses": [
   [
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nIf a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> KarenDownload(x)) & (KarenDownload(x) -> KarenBingeWatch(x))\nKaren does not download \"Black Mirror\".\nFOL: -KarenDownload(\"Black Mirror\")\n\"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\n\"Black Mirror\" is popular.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBinge",
    "<PREMISES>\n<TEXT>Stranger Things is a popular Netflix show.\n</TEXT>\n<FOL>NetflixShow(\"StrangerThings\")\n</FOL>\n<TEXT>If a Netflix show is popular, Karen will binge-watch it.\n</TEXT>\n<FOL>all x. (NetflixShow(x) -> KarenBingeWatch(x))\n</FOL>\n<TEXT>If and only if Karen binge-watches a Netflix show, she will download it.\n</TEXT>\n<FOL>all x. (KarenBingeWatch(x) -> Download(x))\n</FOL>\n<TEXT>Karen does not download \"Black Mirror\".\n</TEXT>\n<FOL>-Download(\"BlackMirror\")\n</FOL>\n<TEXT>\"Black Mirror\" is a Netflix show.\n</TEXT>\n<FOL>NetflixShow(\"BlackMirror\")\n</FOL>\n<TEXT>If Karen binge-watches a Netflix show, she will share it to Lisa.\n</TEXT>\n<FOL>all x. (KarenBingeWatch(x) -> ShareToLisa(x))\n</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>\"Black Mirror\" is popular.\n</TEXT>\n<FOL>-Popular(\"BlackMirror\")\n</FOL>\n<EVALUATE>\nTEXT:",
    "<PREMISES>\n<TEXT>Stranger Things is a popular Netflix show.</TEXT>\n<FOL>NetflixShow(strangerThings) & Popular(strangerThings)</FOL>\n<TEXT>If a Netflix show is popular, Karen will binge-watch it.</TEXT>\n<FOL>all x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))</FOL>\n<TEXT>If and only if Karen binge-watches a Netflix show, she will download it.</TEXT>\n<FOL>all x. ((BingeWatch(karen, x) -> Download(karen, x)) & (Download(karen, x) -> BingeWatch(karen, x)))</FOL>\n<TEXT>Karen does not download \"Black Mirror\".</TEXT>\n<FOL>-Download(karen, blackMirror)</FOL>\n<TEXT>\"Black Mirror\" is a Netflix show.</TEXT>\n<FOL>NetflixShow(blackMirror)</FOL>\n<TEXT>If Karen binge-watches a Netflix show, she will share it to Lisa.</TEXT>\n<FOL>all x. (NetflixShow(x) & BingeWatch(karen, x) -> ShareToLisa(karen, x))</FOL>\n</PREMISE",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: KarenBingeWatch(x) iff KarenDownload(x)\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -KarenDownload(\"Black Mirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\n\"Black Mirror\" is popular.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nIf a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> BingeWatch(x))\nIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x) -> Download(x)) & all x. (Download(x) -> BingeWatch(x))\nKaren does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\")\n\"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\n\"Black Mirror\" is popular.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> Binge"
   ],
   [
    "<PREMISES>\n<TEXT>Stranger Things is a popular Netflix show.</TEXT>\n<FOL>NetflixShow(\"Stranger Things\")</FOL>\n<TEXT>If a Netflix show is popular, Karen will binge-watch it.</TEXT>\n<FOL>NetflixShow(x) -> KarenBingeWatch(x)</FOL>\n<TEXT>If and only if Karen binge-watches a Netflix show, she will download it.</TEXT>\n<FOL>KarenBingeWatch(x) <-> Download(x)</FOL>\n<TEXT>Karen does not download \"Black Mirror\".</TEXT>\n<FOL>-Download(\"Black Mirror\")</FOL>\n<TEXT>\"Black Mirror\" is a Netflix show.</TEXT>\n<FOL>NetflixShow(\"Black Mirror\")</FOL>\n<TEXT>If Karen binge-watches a Netflix show, she will share it to Lisa.</TEXT>\n<FOL>KarenBingeWatch(x) -> ShareToLisa(x)</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>\"Black Mirror\" is popular.</TEXT>\n<FOL>NetflixShow(\"Black Mirror\") & KarenBingeWatch(\"Black Mirror\")</FOL>\n</CONCLUSION>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> BingeWatch(x, karen))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x, karen) -> Download(x, karen)) & all x. (Download(x, karen) -> BingeWatch(x, karen))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\", karen)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(x, karen) -> ShareToLisa(x, karen))\n</PREMISES>\n<CONCLUSION>\n\"Black Mirror\" is popular.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow",
    "<PREMISES>\n<TEXT>Stranger Things is a popular Netflix show.</TEXT>\n<FOL>NetflixShow(\"StrangerThings\") & Popular(\"StrangerThings\")\n</FOL>\n\n<TEXT>If a Netflix show is popular, Karen will binge-watch it.</TEXT>\n<FOL>all x. (NetflixShow(x) & Popular(x) -> Karen(x))\n</FOL>\n\n<TEXT>If and only if Karen binge-watches a Netflix show, she will download it.</TEXT>\n<FOL>all x. (Karen(x) & NetflixShow(x) -> Download(x))\n</FOL>\n\n<TEXT>Karen does not download \"Black Mirror\"</TEXT>\n<FOL>-Download(\"BlackMirror\")\n\n<TEXT>\"Black Mirror\" is a Netflix show.</TEXT>\n<FOL>NetflixShow(\"BlackMirror\")\n\n<TEXT>If Karen binge-watches a Netflix show, she will share it to Lisa.</TEXT>\n<FOL>all x. (Karen(x) & NetflixShow(x) -> ShareToLisa(x))\n</FOL>\n</PREMISES>\n\n<CONCLUSION>\n<TEXT>\"Black Mirror\" is popular.</TEXT>\n<FOL>-Popular(\"BlackMirror\")\n</FOL>\n</CONCLUSION>\n\n<EVALUATE>\nTEXT",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: StrangerThings -> PopularNetflixShow\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularNetflixShow(x) -> BingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x) -> Download(x)) & (Download(x) -> BingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"BlackMirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: BlackMirror -> NetflixShow\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\n\"Black Mirror\" is popular.\nFOL: PopularNetflixShow(\"BlackMirror\")\n</CONCLUSION>",
    "<PREMISES>\n<TEXT>Stranger Things is a popular Netflix show.</TEXT>\n<FOL>NetflixShow(\"StrangerThings\") & Popular(\"StrangerThings\")\n</FOL>\n\n<TEXT>If a Netflix show is popular, Karen will binge-watch it.</TEXT>\n<FOL>All x. (NetflixShow(x) -> KarenBingeWatch(x)) & KarenBingeWatch(\"StrangerThings\")\n</FOL>\n\n<TEXT>If and only if Karen binge-watches a Netflix show, she will download it.</TEXT>\n<FOL>(KarenBingeWatch(x) -> Download(x)) & (Download(x) -> KarenBingeWatch(x)) & KarenBingeWatch(\"StrangerThings\") & Download(\"StrangerThings\")\n</FOL>\n\n<TEXT>Karen does not download \"Black Mirror\".</TEXT>\n<FOL>-Download(\"BlackMirror\")\n\n<TEXT>\"Black Mirror\" is a Netflix show.</TEXT>\n<FOL>NetflixShow(\"BlackMirror\")\n\n<TEXT>If Karen binge-watches a Netflix show, she will share it to Lisa.</TEXT>\n<FOL>All x. (KarenBingeWatch(x) -> ShareToLisa(x)) & KarenBingeWatch(\"StrangerThings\") & ShareToLisa(\"StrangerThings"
   ],
   [
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> Download(x)) & all x. (Download(x) -> KarenBingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\n\"Black Mirror\" is popular.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x",
    "<PREMISES>\n<TEXT>Stranger Things is a popular Netflix show.</TEXT>\n<FOL>NetflixShow(strangerThings)\n</FOL>\n<TEXT>If a Netflix show is popular, Karen will binge-watch it.</TEXT>\n<FOL>all x. (NetflixShow(x) -> KarenBingeWatch(x))\n</FOL>\n<TEXT>If and only if Karen binge-watches a Netflix show, she will download it.</TEXT>\n<FOL>all x. (KarenBingeWatch(x) -> Download(x)) & (Download(x) -> KarenBingeWatch(x))\n</FOL>\n<TEXT>Karen does not download \"Black Mirror\".</TEXT>\n<FOL>-Download(\"blackMirror\")\n</FOL>\n<TEXT>\"Black Mirror\" is a Netflix show.</TEXT>\n<FOL>NetflixShow(\"blackMirror\")\n</FOL>\n<TEXT>If Karen binge-watches a Netflix show, she will share it to Lisa.</TEXT>\n<FOL>all x. (KarenBingeWatch(x) -> ShareToLisa(x))\n</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>\"Black Mirror\" is popular.</TEXT>\n<FOL>-NetflixShow(\"blackMirror\")\n</FOL>\n<E",
    "<PREMISES>\n<TEXT> \"Stranger Things\" is a popular Netflix show.\n</TEXT>\n<FOL> StrangerThings(isPopularNetflixShow)\n</FOL>\n\n<TEXT> If a Netflix show is popular, Karen will binge-watch it.\n</TEXT>\n<FOL> all x. (NetflixShow(x) & isPopularNetflixShow(x) -> KarenBingeWatch(x))\n</FOL>\n\n<TEXT> If and only if Karen binge-watches a Netflix show, she will download it.\n</TEXT>\n<FOL> all x. (KarenBingeWatch(x) -> Download(x)) & all x. (Download(x) -> KarenBingeWatch(x))\n</FOL>\n\n<TEXT> Karen does not download \"Black Mirror\".\n</TEXT>\n<FOL> -Download(BlackMirror)\n</FOL>\n\n<TEXT> \"Black Mirror\" is a Netflix show.\n</TEXT>\n<FOL> BlackMirror(isNetflixShow)\n</FOL>\n\n<TEXT> If Karen binge-watches a Netflix show, she will share it to Lisa.\n</TEXT>\n<FOL> all x. (KarenBingeWatch(x) & NetflixShow(x) -> ShareToLisa(x))\n</FOL>\n</PREMISES>\n\n<",
    "<PREMISES>\n<TEXT>Stranger Things is a popular Netflix show.</TEXT>\n<FOL>NetflixShow(strangerThings) & Popular(strangerThings)</FOL>\n<TEXT>If a Netflix show is popular, Karen will binge-watch it.</TEXT>\n<FOL>all x. (NetflixShow(x) & Popular(x) -> Karen(x) & BingeWatch(x))</FOL>\n<TEXT>If and only if Karen binge-watches a Netflix show, she will download it.</TEXT>\n<FOL>all x. (Karen(x) & BingeWatch(x) & NetflixShow(x) -> Download(x)) & all x. (Karen(x) & Download(x) & NetflixShow(x) -> BingeWatch(x))</FOL>\n<TEXT>Karen does not download \"Black Mirror\".</TEXT>\n<FOL>-Download(blackMirror)</FOL>\n<TEXT>\"Black Mirror\" is a Netflix show.</TEXT>\n<FOL>NetflixShow(blackMirror)</FOL>\n<TEXT>If Karen binge-watches a Netflix show, she will share it to Lisa.</TEXT>\n<FOL>all x. (Karen(x) & BingeWatch(x) & NetflixShow(x) -> Share(x, Lisa))</F",
    "<PREMISES>\n<TEXT>Stranger Things is a popular Netflix show.</TEXT>\n<FOL>NetflixShow(\"StrangerThings\") & Popular(\"StrangerThings\")\n</FOL>\n\n<TEXT>If a Netflix show is popular, Karen will binge-watch it.</TEXT>\n<FOL>all x. (NetflixShow(x) & Popular(x) -> KarenBingeWatch(x))\n</FOL>\n\n<TEXT>If and only if Karen binge-watches a Netflix show, she will download it.</TEXT>\n<FOL>all x. (KarenBingeWatch(x) -> Download(x)) & (all x. (Download(x) -> KarenBingeWatch(x)))\n</FOL>\n\n<TEXT>Karen does not download \"Black Mirror\".</TEXT>\n<FOL>-Download(\"BlackMirror\")\n\n<TEXT>\"Black Mirror\" is a Netflix show.</TEXT>\n<FOL>NetflixShow(\"BlackMirror\")\n\n<TEXT>If Karen binge-watches a Netflix show, she will share it to Lisa.</TEXT>\n<FOL>all x. (NetflixShow(x) & KarenBingeWatch(x) -> ShareToLisa(x))\n</FOL>\n</PREMISES>\n\n<CONCLUSION>\n<TEXT>\"Black Mirror\" is popular.</TEXT>\n<F"
   ],
   [
    "<PREMISES>\n<TEXT>Stranger Things is a popular Netflix show.</TEXT>\n<FOL>All NetflixShows(x) -> Popular(x) & BingeWatch(x, Karen)</FOL>\n<TEXT>If a Netflix show is popular, Karen will binge-watch it.</TEXT>\n<FOL>All x. (NetflixShow(x) & Popular(x) -> BingeWatch(x, Karen))</FOL>\n<TEXT>If and only if Karen binge-watches a Netflix show, she will download it.</TEXT>\n<FOL>All x. ((NetflixShow(x) & BingeWatch(x, Karen)) -> Download(x, Karen))</FOL>\n<TEXT>Karen does not download \"Black Mirror\".</TEXT>\n<FOL>-Download(\"BlackMirror\", Karen)</FOL>\n<TEXT>\"Black Mirror\" is a Netflix show.</TEXT>\n<FOL>\"BlackMirror\" : NetflixShow(\"BlackMirror\")</FOL>\n<TEXT>If Karen binge-watches a Netflix show, she will share it to Lisa.</TEXT>\n<FOL>All x. (NetflixShow(x) & BingeWatch(x, Karen) -> Share(x, Lisa))</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>\"Black Mirror\" is",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> BingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(x) -> Download(x)) & all x. (Download(x) -> BingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (BingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\n\"Black Mirror\" is popular.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: StrangerThings -> PopularNetflixShow\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularNetflixShow(x) -> KarenBingeWatches(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: KarenBingeWatches(x) <-> Download(x)\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(BlackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: BlackMirror -> NetflixShow\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatches(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\n\"Black Mirror\" is popular.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: StrangerThings -> PopularNetflixShow\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (PopularNetflixShow(x) -> KarenBingeWatches(x))\n",
    "<PREMISES>\n<TEXT>Stranger Things is a popular Netflix show.</TEXT>\n<FOL>NetflixShow(strangerThings)</FOL>\n<TEXT>If a Netflix show is popular, Karen will binge-watch it.</TEXT>\n<FOL>all x. (NetflixShow(x) -> KarenBingeWatch(x))</FOL>\n<TEXT>If and only if Karen binge-watches a Netflix show, she will download it.</TEXT>\n<FOL>all x. (KarenBingeWatch(x) -> KarenDownload(x)) & (KarenDownload(x) -> KarenBingeWatch(x))</FOL>\n<TEXT>Karen does not download \"Black Mirror\".</TEXT>\n<FOL>-KarenDownload(blackMirror)</FOL>\n<TEXT>\"Black Mirror\" is a Netflix show.</TEXT>\n<FOL>NetflixShow(blackMirror)</FOL>\n<TEXT>If Karen binge-watches a Netflix show, she will share it to Lisa.</TEXT>\n<FOL>all x. (KarenBingeWatch(x) -> ShareToLisa(x))</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>\"Black Mirror\" is popular.</TEXT>\n<FOL>NetflixShow(blackMirror) & all x. (",
    "<PREMISES>\n<TEXT>Stranger Things is a popular Netflix show.</TEXT>\n<FOL>AllNetflixShows(x) -> Popular(x)</FOL>\n<TEXT>If a Netflix show is popular, Karen will binge-watch it.</TEXT>\n<FOL>AllNetflixShows(x) -> KarenBingeWatches(x)</FOL>\n<TEXT>If and only if Karen binge-watches a Netflix show, she will download it.</TEXT>\n<FOL>(KarenBingeWatches(x) -> Download(x)) & (Download(x) -> KarenBingeWatches(x))</FOL>\n<TEXT>Karen does not download \"Black Mirror\".</TEXT>\n<FOL>-Download(BlackMirror)</FOL>\n<TEXT>\"Black Mirror\" is a Netflix show.</TEXT>\n<FOL>BlackMirror & NetflixShow(BlackMirror)</FOL>\n<TEXT>If Karen binge-watches a Netflix show, she will share it to Lisa.</TEXT>\n<FOL>AllNetflixShows(x) -> KarenShares(x)</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>\"Black Mirror\" is popular.</TEXT>\n<FOL>BlackMirror & Popular(BlackMirror)</FOL>\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Stranger"
   ],
   [
    "<PREMISES>\n<TEXT>Stranger Things is a popular Netflix show.</TEXT>\n<FOL>NetflixShow(strangerThings)</FOL>\n<TEXT>If a Netflix show is popular, Karen will binge-watch it.</TEXT>\n<FOL>all x. (NetflixShow(x) -> KarenBingeWatch(x))</FOL>\n<TEXT>If and only if Karen binge-watches a Netflix show, she will download it.</TEXT>\n<FOL>all x. (KarenBingeWatch(x) -> Download(x)) & (Download(x) -> KarenBingeWatch(x))</FOL>\n<TEXT>Karen does not download \"Black Mirror).</TEXT>\n<FOL>-Download(\"blackMirror\")</FOL>\n<TEXT>\"Black Mirror\" is a Netflix show.</TEXT>\n<FOL>NetflixShow(\"blackMirror\")</FOL>\n<TEXT>If Karen binge-watches a Netflix show, she will share it to Lisa.</TEXT>\n<FOL>all x. (NetflixShow(x) & KarenBingeWatch(x) -> ShareToLisa(x))</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>\"Black Mirror\" is popular.</TEXT>\n<FOL>NetflixShow(\"blackMirror\") & all",
    "<PREMISES>\n<TEXT> \"Stranger Things\" is a popular Netflix show. </TEXT>\n<FOL> StrangerThings -> PopularNetflixShow </FOL>\n<TEXT> If a Netflix show is popular, Karen will binge-watch it. </TEXT>\n<FOL> PopularNetflixShow(x) -> KarenBingeWatch(x) </FOL>\n<TEXT> If and only if Karen binge-watches a Netflix show, she will download it. </TEXT>\n<FOL> KarenBingeWatch(x) <-> KarenDownload(x) </FOL>\n<TEXT> Karen does not download \"Black Mirror\". </TEXT>\n<FOL> -KarenDownload(\"BlackMirror\") </FOL>\n<TEXT> \"Black Mirror\" is a Netflix show. </TEXT>\n<FOL> \"BlackMirror\" -> NetflixShow </FOL>\n<TEXT> If Karen binge-watches a Netflix show, she will share it to Lisa. </TEXT>\n<FOL> KarenBingeWatch(x) -> ShareToLisa(x) </FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT> \"Black Mirror\" is popular. </TEXT>\n<FOL> \"BlackMirror\" -> PopularNetflixShow </FOL>\n</CONCLUSION>\n\n<E",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: StrangerThings(strangerThings)\nFOL: all x. (Netflix(x) -> KarenBingeWatch(x))\nFOL: all x. (KarenBingeWatch(x) -> KarenDownload(x))\nFOL: -KarenDownload(blackMirror)\nFOL: BlackMirror(blackMirror)\nFOL: all x. (KarenBingeWatch(x) -> KarenShare(x, Lisa))\n</PREMISES>\n<CONCLUSION>\n\"Black Mirror\" is popular.\nFOL: KarenBingeWatch(blackMirror) & KarenShare(blackMirror, Lisa) & all x. (Netflix(x) -> KarenBingeWatch(x))\nFOL: KarenBingeWatch(blackMirror) & KarenShare(blackMirror, Lisa) & StrangerThings(strangerThings) \nFOL: all x. (Netflix(x) -> KarenBingeWatch(x)) & KarenBingeWatch(blackMirror) & KarenShare(blackMirror, Lisa) & StrangerThings(strangerThings)\nFOL: KarenBingeWatch(blackMirror) & KarenShare(blackMirror, Lisa) & KarenBingeWatch(blackMirror) & KarenShare(black",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(StrangerThings)\nIf a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> KarenDownload(x)) & all x. (KarenDownload(x) -> KarenBingeWatch(x))\nKaren does not download \"Black Mirror\".\nFOL: -KarenDownload(\"BlackMirror\")\n\"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"BlackMirror\")\nIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\n\"Black Mirror\" is popular.\nFOL: KarenBingeWatch(\"BlackMirror\") & KarenBingeWatch(\"BlackMirror\") -> KarenDownload(\"BlackMirror\")\n</EVALUATE>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(strangerThings) & Popular(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) & Popular(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> Download(x)) & (Download(x) -> KarenBingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\n\"Black Mirror\" is popular.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: \"Black Mirror\" is a popular Netflix show.\nFOL: NetflixShow(blackMirror) & Popular(blackMirror)\nTEXT: \"Black Mirror\" is a Netflix show"
   ]
  ]
 },
 {
  "index": 18,
  "responses": [
   [
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: StrangerThings(isPopularNetflixShow)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatches(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatches(x) -> Download(x)) & all x. (Download(x) -> KarenBingeWatches(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(BlackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: BlackMirror(isNetflixShow)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatches(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Black Mirror\" to Lisa.\nFOL: ShareToLisa(BlackMirror)\n</CONCLUSION>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> Download(x)) & (Download(x) -> KarenBingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & KarenBingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Black Mirror\" to Lisa.\nFOL: ShareToLisa(\"Black Mirror\")\n</CONCLUSION>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"StrangerThings\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> KarenDownload(x)) & (KarenDownload(x) -> KarenBingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -KarenDownload(\"BlackMirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"BlackMirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> KarenShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Black Mirror\" to Lisa.\nFOL: KarenShareToLisa(\"BlackMirror\")\n</CONCLUSION>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> Download(x)) & (Download(x) -> KarenBingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Black Mirror\" to Lisa.\nFOL: ShareToLisa(\"Black Mirror\")\n</CONCLUSION>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatches(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatches(x) -> KarenDownloads(x)) & (KarenDownloads(x) -> KarenBingeWatches(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -KarenDownloads(\"Black Mirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatches(x) -> KarenShares(x, Lisa))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Black Mirror\" to Lisa.\nFOL: KarenShares(\"Black Mirror\", Lisa)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(StrangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((NetflixShow(x) & BingeWatch(karen, x)) -> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, BlackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(BlackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(karen, x) -> ShareToLisa(karen, x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Black Mirror\" to Lisa.\nFOL: ShareToLisa(karen, BlackMirror)\n</CONCLUSION>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> KarenDownload(x)) & (KarenDownload(x) -> KarenBingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -KarenDownload(\"Black Mirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> KarenShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Black Mirror\" to Lisa.\nFOL: KarenShareToLisa(\"Black Mirror\")\n</CONCLUSION>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(StrangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> Download(x)) & all x. (Download(x) -> KarenBingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(BlackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(BlackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Black Mirror\" to Lisa.\nFOL: ShareToLisa(BlackMirror)\n</CONCLUSION>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> BingeWatch(Karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (BingeWatch(Karen, x) -> Download(x)) & (Download(x) -> BingeWatch(Karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"Black Mirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (NetflixShow(x) & BingeWatch(Karen, x) -> ShareToLisa(Karen, x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Black Mirror\" to Lisa.\nFOL: ShareToLisa(Karen, \"Black Mirror\")\n</CONCLUSION>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"StrangerThings\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> Download(x)) & (Download(x) -> KarenBingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(\"BlackMirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"BlackMirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Black Mirror\" to Lisa.\nFOL: ShareToLisa(\"BlackMirror\")\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> KarenDownload(x)) & (KarenDownload(x) -> KarenBingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -KarenDownload(\"Black Mirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> KarenShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Black Mirror\" to Lisa.\nFOL: KarenShareToLisa(\"Black Mirror\")\n</CONCLUSION>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(strangerThings)\nFOL: all x. (Popular(x) -> KarenBingeWatch(x))\nFOL: all x. (KarenBingeWatch(x) -> Download(x))\nFOL: KarenBingeWatch(not blackMirror)\nFOL: NetflixShow(blackMirror)\nFOL: all x. (KarenBingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKarenBingeWatch(blackMirror)\nFOL: KarenShareToLisa(blackMirror)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: \"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(strangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Popular(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> Download(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: KarenBingeWatch(not blackMirror)\nTEXT: \"Black Mirror\" is a",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(strangerThings)\nIf a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatches(x))\nIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatches(x) -> KarenDownloads(x)) & (KarenDownloads(x) -> KarenBingeWatches(x))\nKaren does not download \"Black Mirror\".\nFOL: -KarenDownloads(blackMirror)\n\"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\nIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatches(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Black Mirror\" to Lisa.\nFOL: KarenBingeWatches(blackMirror) & ShareToLisa(blackMirror)\n</CONCLUSION>",
    "<PREMISES>\n<TEXT>Stranger Things is a popular Netflix show.</TEXT>\n<FOL>NetflixShow(strangerThings)\n</FOL>\n<TEXT>If a Netflix show is popular, Karen will binge-watch it.</TEXT>\n<FOL>all x. (NetflixShow(x) -> KarenBingeWatch(x))\n</FOL>\n<TEXT>If and only if Karen binge-watches a Netflix show, she will download it.</TEXT>\n<FOL>all x. (KarenBingeWatch(x) -> KarenDownload(x)) & all x. (KarenDownload(x) -> KarenBingeWatch(x))\n</FOL>\n<TEXT>Karen does not download \"Black Mirror\".</TEXT>\n<FOL>-KarenDownload(blackMirror)\n</FOL>\n<TEXT>\"Black Mirror\" is a Netflix show.</TEXT>\n<FOL>NetflixShow(blackMirror)\n</FOL>\n<TEXT>If Karen binge-watches a Netflix show, she will share it to Lisa.</TEXT>\n<FOL>all x. (KarenBingeWatch(x) -> KarenShareToLisa(x))\n</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Karen will share \"Black Mirror\" to Lisa.</TEXT>\n<FOL>K",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(StrangerThings)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> Download(x)) & (Download(x) -> KarenBingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(BlackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(BlackMirror)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Black Mirror\" to Lisa.\nFOL: ShareToLisa(BlackMirror)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(strangerThings)\nFOL: (Popular NetflixShow -> KarenBingeWatch)\n\nIf a Netflix show is popular, Karen will binge-watch it.\nFOL: (Popular NetflixShow -> KarenBingeWatch)\n\nIf and only if Karen binge-watches a Netflix show, she will download it.\nFOL: ((KarenBingeWatch -> Download) & (Download -> KarenBingeWatch))\n\nKaren does not download \"Black Mirror\".\nFOL: -Download(blackMirror)\n\n\"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(blackMirror)\n\nIf Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: (KarenBingeWatch -> ShareToLisa)\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Black Mirror\" to Lisa.\nFOL: ShareToLisa(blackMirror)\n</CONCLUSION>",
    "<PREMISES>\n<TEXT>Stranger Things is a popular Netflix show.</TEXT>\n<FOL>NetflixShow(StrangerThings)</FOL>\n<TEXT>If a Netflix show is popular, Karen will binge-watch it.</TEXT>\n<FOL>all x. (NetflixShow(x) -> KarenBingeWatch(x))</FOL>\n<TEXT>If and only if Karen binge-watches a Netflix show, she will download it.</TEXT>\n<FOL>all x. (KarenBingeWatch(x) -> Download(x)) & all x. (Download(x) -> KarenBingeWatch(x))</FOL>\n<TEXT>Karen does not download \"Black Mirror\".</TEXT>\n<FOL>-Download(BlackMirror)</FOL>\n<TEXT>\"Black Mirror\" is a Netflix show.</TEXT>\n<FOL>NetflixShow(BlackMirror)</FOL>\n<TEXT>If Karen binge-watches a Netflix show, she will share it to Lisa.</TEXT>\n<FOL>all x. (KarenBingeWatch(x) -> ShareToLisa(x))</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Karen will share \"Black Mirror\" to Lisa.</TEXT>\n<FOL>-Download(BlackMirror) & Share",
    "<PREMISES>\n<TEXT>Stranger Things is a popular Netflix show.</TEXT>\n<FOL>NetflixShow(\"StrangerThings\")</FOL>\n<TEXT>If a Netflix show is popular, Karen will binge-watch it.</TEXT>\n<FOL>NetflixShow(x) -> KarenBingeWatches(x)</FOL>\n<TEXT>If and only if Karen binge-watches a Netflix show, she will download it.</TEXT>\n<FOL>KarenBingeWatches(x) -> KarenDownloads(x)</FOL>\n<TEXT>Karen does not download \"Black Mirror\".</TEXT>\n<FOL>-KarenDownloads(\"BlackMirror\")</FOL>\n<TEXT>\"Black Mirror\" is a Netflix show.</TEXT>\n<FOL>NetflixShow(\"BlackMirror\")</FOL>\n<TEXT>If Karen binge-watches a Netflix show, she will share it to Lisa.</TEXT>\n<FOL>KarenBingeWatches(x) -> KarenSharesToLisa(x)</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Karen will share \"Black Mirror\" to Lisa.</TEXT>\n<FOL>KarenSharesToLisa(\"BlackMirror\")</FOL>\n</CONCLUSION>",
    "<PREMISES>\n<TEXT> \"Stranger Things\" is a popular Netflix show.\nFOL: StrangerThings(isPopular)\n</TEXT>\n<TEXT> If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & isPopular(x) -> KarenBingeWatches(x))\n</TEXT>\n<TEXT> If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (Netflix(x) & KarenBingeWatches(x) -> KarenDownloads(x))\n</TEXT>\n<TEXT> Karen does not download \"Black Mirror\".\nFOL: -KarenDownloads(BlackMirror)\n</TEXT>\n<TEXT> \"Black Mirror\" is a Netflix show.\nFOL: BlackMirror(isNetflix)\n</TEXT>\n<TEXT> If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (Netflix(x) & KarenBingeWatches(x) -> KarenSharesToLisa(x))\n</TEXT>\n</PREMISES>\n<CONCLUSION>\n<TEXT> Karen will share \"Black Mirror\" to Lisa.\nFOL: KarenSharesToLisa(BlackMirror)\n</TEXT>\n</CONCLUSION>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: StrangerThings(isPopular)\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (Netflix(x) & isPopular(x) -> BingeWatch(karen, x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. ((BingeWatch(karen, x) & Netflix(x)) -> Download(karen, x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -Download(karen, BlackMirror)\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: BlackMirror(isNetflix)\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. ((BingeWatch(karen, x) & Netflix(x)) -> ShareToLisa(karen, x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Black Mirror\" to Lisa.\nFOL: ShareToLisa(karen, BlackMirror)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> KarenDownload(x)) & all x. (KarenDownload(x) -> KarenBingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -KarenDownload(\"Black Mirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> KarenShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Black Mirror\" to Lisa.\nFOL: KarenShareToLisa(\"Black Mirror\")\n</CONCLUSION>",
    "<PREMISES>\n\"Stranger Things\" is a popular Netflix show.\nFOL: NetflixShow(\"Stranger Things\")\nTEXT: If a Netflix show is popular, Karen will binge-watch it.\nFOL: all x. (NetflixShow(x) -> KarenBingeWatch(x))\nTEXT: If and only if Karen binge-watches a Netflix show, she will download it.\nFOL: all x. (KarenBingeWatch(x) -> KarenDownload(x)) & all x. (KarenDownload(x) -> KarenBingeWatch(x))\nTEXT: Karen does not download \"Black Mirror\".\nFOL: -KarenDownload(\"Black Mirror\")\nTEXT: \"Black Mirror\" is a Netflix show.\nFOL: NetflixShow(\"Black Mirror\")\nTEXT: If Karen binge-watches a Netflix show, she will share it to Lisa.\nFOL: all x. (KarenBingeWatch(x) -> ShareToLisa(x))\n</PREMISES>\n<CONCLUSION>\nKaren will share \"Black Mirror\" to Lisa.\nFOL: KarenDownload(\"Black Mirror\") & ShareToLisa(\"Black Mirror\")\n</CONCLUSION>",
    "<PREMISES>\n<TEXT>Stranger Things is a popular Netflix show.\n</TEXT>\n<FOL>NetflixShow(\"StrangerThings\")\n</FOL>\n<TEXT>If a Netflix show is popular, Karen will binge-watch it.\n</TEXT>\n<FOL>all x. (NetflixShow(x) -> KarenBingeWatches(x))\n</FOL>\n<TEXT>If and only if Karen binge-watches a Netflix show, she will download it.\n</TEXT>\n<FOL>all x. (KarenBingeWatches(x) -> KarenDownloads(x))\n</FOL>\n<TEXT>Karen does not download \"Black Mirror\".\n</TEXT>\n<FOL>-KarenDownloads(\"BlackMirror\")\n</FOL>\n<TEXT>\"Black Mirror\" is a Netflix show.\n</TEXT>\n<FOL>NetflixShow(\"BlackMirror\")\n</FOL>\n<TEXT>If Karen binge-watches a Netflix show, she will share it to Lisa.\n</TEXT>\n<FOL>all x. (KarenBingeWatches(x) -> KarenShares(x,Lisa))\n</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Karen will share \"Black Mirror\" to Lisa.\n</TEXT>\n<FOL>KarenShares(\"BlackMirror\",",
    "<PREMISES>\n<TEXT>Stranger Things is a popular Netflix show.</TEXT>\n<FOL>NetflixShow(strangerThings)\n</FOL>\n<TEXT>If a Netflix show is popular, Karen will binge-watch it.</TEXT>\n<FOL>NetflixShow(x) -> KarenBingeWatches(x)\n</FOL>\n<TEXT>If and only if Karen binge-watches a Netflix show, she will download it.</TEXT>\n<FOL>(KarenBingeWatches(x) -> Download(x)) & (Download(x) -> KarenBingeWatches(x))\n</FOL>\n<TEXT>Karen does not download \"Black Mirror\".</TEXT>\n<FOL>-Download(blackMirror)\n</FOL>\n<TEXT>\"Black Mirror\" is a Netflix show.</TEXT>\n<FOL>NetflixShow(blackMirror)\n</FOL>\n<TEXT>If Karen binge-watches a Netflix show, she will share it to Lisa.</TEXT>\n<FOL>NetflixShow(x) -> ShareToLisa(x)\n</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Karen will share \"Black Mirror\" to Lisa.</TEXT>\n<FOL>-Download(blackMirror) & NetflixShow(blackMirror) & ShareToLisa(black",
    "<PREMISES>\n<TEXT>Stranger Things is a popular Netflix show.</TEXT>\n<FOL>NetflixShow(\"StrangerThings\") & Popular(\"StrangerThings\")\n</FOL>\n\n<TEXT>If a Netflix show is popular, Karen will binge-watch it.</TEXT>\n<FOL>All x. (NetflixShow(x) & Popular(x) -> BingeWatch(karen, x))\n</FOL>\n\n<TEXT>If and only if Karen binge-watches a Netflix show, she will download it.</TEXT>\n<FOL>All x. (BingeWatch(karen, x) -> Download(x)) & (Download(x) -> BingeWatch(karen, x))\n</FOL>\n\n<TEXT>Karen does not download \"Black Mirror\".</TEXT>\n<FOL>-Download(\"BlackMirror\")\n</FOL>\n\n<TEXT>\"Black Mirror\" is a Netflix show.</TEXT>\n<FOL>NetflixShow(\"BlackMirror\")\n</FOL>\n\n<TEXT>If Karen binge-watches a Netflix show, she will share it to Lisa.</TEXT>\n<FOL>All x. (NetflixShow(x) & BingeWatch(karen, x) -> ShareToLisa(karen, x))\n</FOL>\n</PREMISES>\n\n<CONCLUSION>\n"
   ]
  ]
 },
 {
  "index": 19,
  "responses": [
   [
    "<PREMISES>\nBeijing is the capital of the People's Republic of China. \nBeijing is the world's most populous national capital city.\nBeijing is located in Northern China.\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\n</PREMISES>\n<CONCLUSION>\nBeijing has hosted both the 2008 Summer Olympics and a winter olympics.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapitalCity)\nTEXT: Beijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics) & Beijing(Hosted2008SummerParalympics)\nTEXT",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyUniversitiesInBeijing(RankAmongBestAsiaPacificWorld)\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted2008SummerOlymp",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: BeijingCapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: NorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyBestRankedUniversities(beijing)\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted2008SummerOlympicsAndWinterOlympics(beijing)\n</EVALUATE>",
    "<PREMISES>\nBeijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nBeijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNCity)\nBeijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics)\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedSummerAndWinterOlympics)\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) -> Best(x))\n</PREMISES>\n<CONCLUSION>\nBeijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Beijing(Hosted2008SummerOlympics) & Beijing(HostedWinterOlympics)\n</EVALUATE>",
    "<PREMISES>\nBeijing is the capital of the People's Republic of China.\nFOL: BeijingCapitalOfChina(beijing)\nBeijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nBeijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympicsAndParalympics2008(beijing)\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyOfBestUniversitiesInAsiaPacificAndWorld(beijing)\n</PREMISES>\n<CONCLUSION>\nBeijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: HostedBothSummerAndWinterOlympics(beijing)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: BeijingCapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyOfBeijingUniversitiesConsistentlyRankAmongBestInAsiaPacificAndWorld\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: HostedBoth2008SummerOlympicsAndWinterOlympics(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapital)\nTEXT: Beijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics) & Beijing(Hosted2008SummerParalympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedSummerOlympics) & Beijing(HostedWinterOlympics) & Beijing(HostedSummerParalympics) & Beijing(HostedWinterParalympics)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x, Beijing) -> (BestInAsiaPacific(x) & BestInWorld(x)))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL",
    "<PREMISES>\nBeijing is the capital of the People's Republic of China. \nBeijing is the world's most populous national capital city.\nBeijing is located in Northern China.\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\n</PREMISES>\n<CONCLUSION>\nBeijing has hosted both the 2008 Summer Olympics and a winter olympics.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: BeijingCapital(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: NorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted",
    "<PREMISES>\nBeijing is the capital of the People's Republic of China. \nFOL: Beijing(CapitalOfChina)\nBeijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapital)\nBeijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics)\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedBothSummerAndWinterOlympics)\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x, Beijing) & HighlyRanked(x, Asia-Pacific, world))\n</PREMISES>\n<CONCLUSION>\nBeijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Beijing(HostedBoth2008SummerAndWinterOlympics)\n</EVALUATE>",
    "<PREMISES>\nBeijing is the capital of the People's Republic of China. \nBeijing is the world's most populous national capital city.\nBeijing is located in Northern China.\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\n</PREMISES>\n<CONCLUSION>\nBeijing has hosted both the 2008 Summer Olympics and a winter olympics.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapitalCity)\nTEXT: Beijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics) & Beijing(Hosted2008SummerParalympics)\nTEXT:"
   ],
   [
    "<PREMISES>\nBeijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nBeijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapital)\nBeijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics)\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedBothSummerAndWinterOlympics)\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x, Beijing) & RankedAmongBestInAsiaPacificAndWorld(x))\n</PREMISES>\n<CONCLUSION>\nBeijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Beijing(HostedBoth2008SummerAndWinterOlympics)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: BeijingCapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyOfBeijingUniversitiesRankAmongBestInAsiaPacificAndWorld(universities)\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: -Hosted2008SummerOlympicsAndParalympics(beijing) | HostedWinterOlympics(beijing)\n</EVALUATE>",
    "<PREMISES>\nBeijing is the capital of the People's Republic of China.\nFOL: BeijingCapitalOfChina(beijing)\nBeijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nBeijing is located in Northern China.\nFOL: NorthernChina(beijing)\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankedAmongBestUniversities(beijing)\n</PREMISES>\n<CONCLUSION>\nBeijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: (-HostedSummerOlympics(beijing",
    "<PREMISES>\nBeijing is the capital of the People's Republic of China.\nFOL: Beijing(capitalOfChina)\nBeijing is the world's most populous national capital city.\nFOL: Beijing(mostPopulousNationalCapitalCity)\nBeijing is located in Northern China.\nFOL: Beijing(inNorthernChina)\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(hosted2008SummerOlympics) & Beijing(hosted2008SummerParalympics)\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(hostedBothSummerAndWinterOlympics) & Beijing(hostedBothSummerAndWinterParalympics)\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x, Beijing) & Best(x, Asia-Pacific) & Best(x, world))\n</PREMISES>\n<CONCLUSION>\nBeijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: (Beijing(hosted2008SummerOlympics) & Beijing(hostedWinterO",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapitalCity)\nTEXT: Beijing is located in Northern China.\nFOL: Beijing(InNorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedSummerAndWinterOlympics)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) -> (RankAmongBestInAsiaPacific(x) & RankAmongBestInTheWorld(x)))\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: (Hosted2008SummerOlympics & HostedWinterOlympics)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\n<evaluate>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerAndWinterOlympics(beijing) & HostedSummerAndWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: AllUniversitiesInBeijing(RankAmongBestInAsiaPacificAndWorld)\n</evaluate>\n</PREMISES>\n<CONCLUSION>\n<evaluate>\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted200",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympics(beijing) & HostedBothSummerAndWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: MostRankedBestUnivsBeijing\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted2008SummerOlympics(beijing) & HostedWinterOlympics(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: BeijingCapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: NorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerAndWinterOlympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: BestUniversitiesInAsiaPacificAndWorld(beijing)\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Hosted2008SummerOlympicsAndWinterOlympics(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: NorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympics(beijing) & HostedBothSummerAndWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyOfBeijingUniversities(91) & BestUniversitiesInAsiaPacificAndWorld(beijing)\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: (Hosted2008SummerOlympics(beijing) & HostedWinterOlymp",
    "<PREMISES>\nBeijing is the capital of the People's Republic of China. \nBeijing is the world's most populous national capital city.\nBeijing is located in Northern China.\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\n</PREMISES>\n<CONCLUSION>\nBeijing has hosted both the 2008 Summer Olympics and a winter olympics.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapital)\nTEXT: Beijing is located in Northern China.\nFOL: Beijing(InNorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer"
   ],
   [
    "<PREMISES>\nBeijing is the capital of the People's Republic of China. \nBeijing is the world's most populous national capital city.\nBeijing is located in Northern China.\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\n</PREMISES>\n<CONCLUSION>\nBeijing has hosted both the 2008 Summer Olympics and a winter olympics.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: BeijingCapital(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: NorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has",
    "<PREMISES>\n<TEXT>Beijing is the capital of the People's Republic of China.</TEXT>\n<FOL>CapitalOfChina(beijing)\n</FOL>\n<TEXT>Beijing is the world's most populous national capital city.</TEXT>\n<FOL>MostPopulousNationalCapital(beijing)\n</FOL>\n<TEXT>Beijing is located in Northern China.</TEXT>\n<FOL>LocatedInNorthernChina(beijing)\n</FOL>\n<TEXT>Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.</TEXT>\n<FOL>Hosted2008SummerOlympicsAndParalympics(beijing)\n</FOL>\n<TEXT>Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics</TEXT>\n<FOL>HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\n</FOL>\n<TEXT>Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.</TEXT>\n<FOL>ManyUniversitiesInBeijing(RankAmongBestInAsiaPacificAndWorld)\n</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapital)\nTEXT: Beijing is located in Northern China.\nFOL: Beijing(InNorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics) & Beijing(Hosted2008SummerParalympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedBothSummerAndWinterOlympics) & Beijing(HostedBothSummerAndWinterParalympics)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & RanksAmongBestInAsiaPacificAndWorld)\nTEXT: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: Beijing(Hosted2008SummerOlympics) & Beijing(HostedWinterOlympics)\n",
    "<PREMISES>\n<PREMISES>\nBeijing is the capital of the People's Republic of China. \nFOL: Beijing(CapitalOfChina)\nBeijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapitalCity)\nBeijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics) & Beijing(Hosted2008SummerParalympics)\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedBothSummerAndWinterOlympics) & Beijing(HostedBothSummerAndWinterParalympics)\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x, Beijing) & ConsistentlyRanksAmongBest(x))\n</PREMISES>\n<CONCLUSION>\n<CONCLUSION>\nBeijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: -Hosted200",
    "<PREMISES>\nBeijing is the capital of the People's Republic of China. \nFOL: BeijingCapitalOfChina(beijing)\nBeijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nBeijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing)\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympics(beijing)\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyBestUniversitiesInAsiaPacific(beijing)\n</PREMISES>\n<CONCLUSION>\nBeijing has hosted both the 2008 Summer Olympics and a winter olympics.\nFOL: HostedBoth2008SummerAndWinterOlympics(beijing)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 20,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNCity)\nTEXT: Beijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedSummerAndWinterOlympics)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x, Beijing) & TopRanking(x))\nTEXT: Beijing is located in southern China.\nFOL: -NorthernChina(Beijing)\n</EVALUATE>",
    "<PREMISES>\nBeijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nBeijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNCity)\nBeijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008Olympics)\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedBothSummerAndWinterOlympics)\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & (RankAmongBestInAsiaPacific(x) & RankAmongBestInWorld(x)))\n</PREMISES>\n<CONCLUSION>\nBeijing is located in southern China.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(M",
    "<PREMISES>\nBeijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nBeijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapital)\nBeijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics)\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedBothSummerAndWinterOlympics)\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) -> RankAmongBestInAsiaPacificAndWorld)\n</PREMISES>\n<CONCLUSION>\nBeijing is located in southern China.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapital)\nTEXT",
    "<PREMISES>\nBeijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nBeijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNCity)\nBeijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics)\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedBothSummerAndWinterOlympics)\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & TopRank(x))\n</PREMISES>\n<CONCLUSION>\nBeijing is located in southern China.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNCity)\nTEXT: Beijing is located in",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapitalCity)\nTEXT: Beijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedBothSummerAndWinterOlympics)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x, Beijing) -> (BestInAsiaPacific(x) & BestInWorld(x)))\nTEXT: Beijing is located in southern China.\nFOL: -NorthernChina(Beijing)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapital)\nTEXT: Beijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedSummerAndWinterOlympics)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) -> (AsiaPacificRank(x) & WorldRank(x)))\nTEXT: Beijing is located in southern China.\nFOL: -NorthernChina(Beijing)\n</EVALUATE>",
    "<PREMISES>\nBeijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOf(PeoplesRepublicOfChina))\nBeijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapitalCity)\nBeijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympicsAndParalympics)\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedSummerAndWinterOlympicsAndParalympics)\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x, Beijing) -> AmongTheBestInAsiaPacificAndWorld)\n</PREMISES>\n<CONCLUSION>\nBeijing is located in southern China.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOf(PeoplesRepublicOfChina))\nTEXT: Beijing",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapital)\nTEXT: Beijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedBothSummerAndWinterOlympics)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x, Beijing) -> (BestInAsiaPacific(x) & BestInWorld(x)))\nTEXT: Beijing is located in southern China.\nFOL: -NorthernChina(Beijing)\n</EVALUATE>",
    "<PREMISES>\nBeijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nBeijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapital)\nBeijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics)\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedBothSummerAndWinterOlympics)\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) -> RankAmongBestInAsiaPacificAndWorld)\n</PREMISES>\n<CONCLUSION>\nBeijing is located in southern China.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapital)\nTEXT",
    "<PREMISES>\nBeijing is the capital of the People's Republic of China. \nFOL: BeijingCapital(beijing)\nBeijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nBeijing is located in Northern China.\nFOL: NorthernChina(beijing)\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympics(beijing) & HostedSummerParalympics(beijing)\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(beijing) & HostedWinterOlympics(beijing) & HostedSummerParalympics(beijing) & HostedWinterParalympics(beijing)\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: BestUniversitiesInAsiaPacific(beijing)\n</PREMISES>\n<CONCLUSION>\nBeijing is located in southern China.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: BeijingCapital"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapital)\nTEXT: Beijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedBothSummerAndWinterOlympics)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x, Beijing) & (BestInAsiaPacific(x) | BestInTheWorld(x)))\nTEXT: Beijing is located in southern China.\nFOL: -NorthernChina(Beijing)\n</EVALUATE>",
    "<PREMISES>\nBeijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nBeijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapital)\nBeijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics)\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedSummerAndWinterOlympics)\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) -> (BestInAsiaPacific(x) & BestInWorld(x)))\n</PREMISES>\n<CONCLUSION>\nBeijing is located in southern China.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNational",
    "<PREMISES>\n<TEXT>Beijing is the capital of the People's Republic of China.</TEXT>\n<FOL>CapitalOfChina(beijing)\n</FOL>\n<TEXT>Beijing is the world's most populous national capital city.</TEXT>\n<FOL>MostPopulousNationalCapitalCity(beijing)\n</FOL>\n<TEXT>Beijing is located in Northern China.</TEXT>\n<FOL>LocatedInNorthernChina(beijing)\n</FOL>\n<TEXT>Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.</TEXT>\n<FOL>Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\n</FOL>\n<TEXT>Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics</TEXT>\n<FOL>HostedBothSummerAndWinterOlympics(beijing) & HostedBothSummerAndWinterParalympics(beijing)\n</FOL>\n<TEXT>Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.</TEXT>\n<FOL>ManyBestUniversitiesInAsiaPacificAndWorld(beijing)\n</FOL",
    "<PREMISES>\n<evaluate>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: BeijingCapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyBestUniversitiesInAsiaPacificAndWorld(universitiesInBeijing)\n</evaluate>\n</PREMISES>\n<CONCLUSION>\n<evaluate>\nTEXT: Beijing is located in southern China.\nFOL: -LocatedInNorthernChina(beijing)\n</evaluate>\n</CONCLUSION>",
    "<PREMISES>\nBeijing is the capital of the People's Republic of China.\nFOL: BeijingCapitalOfChina(beijing)\nBeijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nBeijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympicsGames(beijing)\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: MostRankedUniversitiesInAsiaPacificAndWorld(beijing)\n</PREMISES>\n<CONCLUSION>\nBeijing is located in southern China.\nFOL: -LocatedInNorthernChina(beijing)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapital)\nTEXT: Beijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedSummerAndWinterOlympics)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) -> (BestInAsiaPacific(x) & BestInWorld(x)))\nTEXT: Beijing is located in southern China.\nFOL: -NorthernChina(Beijing)\n</EVALUATE>",
    "<PREMISES>\nBeijing is the capital of the People's Republic of China. \nFOL: CapitalOfChina(beijing)\nBeijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nBeijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing)\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympics(beijing)\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankBestUniversities(beijing)\n</PREMISES>\n<CONCLUSION>\nBeijing is located in southern China.\nFOL: -LocatedInNorthernChina(beijing)\n</CONCLUSION>",
    "<PREMISES>\nBeijing is the capital of the People's Republic of China. \nFOL: CapitalOfChina(beijing)\nBeijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nBeijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing)\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympics(beijing)\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: MostRankedUniversity(beijing)\n</PREMISES>\n<CONCLUSION>\nBeijing is located in southern China.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL:",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNCity)\nTEXT: Beijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008Olympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedBothSummerAndWinterOlympics)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & BestInAsiaPacific(x))\nTEXT: Beijing is located in southern China.\nFOL: -NorthernChina(Beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNCity)\nTEXT: Beijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedBothSummerAndWinterOlympics)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & RankAmongBestInAsiaPacificAndWorld(x))\nTEXT: Beijing is located in southern China.\nFOL: -NorthernChina(Beijing)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\n<evaluate>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocationInChina(beijing, NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympics(beijing, 2008)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ConsistentlyRankAmongBestUniversities(beijing, Asia-Pacific, world)\n</evaluate>\n</PREMISES>\n<CONCLUSION>\n<evaluate>\nTEXT: Beijing is located in southern China.\nFOL: -LocationInChina(beijing, NorthernChina)\n</evaluate>\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyUniversitiesInBeijing(RankAmongBestInAsiaPacificAndWorld)\nTEXT: Beijing is located in southern China.\nFOL: -LocatedInNorthernChina(beijing)\n</EVALUATE>",
    "<PREMISES>\nBeijing is the capital of the People's Republic of China. \nFOL: BeijingCapital(beijing)\nBeijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nBeijing is located in Northern China.\nFOL: NorthernChina(beijing)\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing)\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympics(beijing)\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: BestUniversitiesInAsiaPacificAndWorld(beijing)\n</PREMISES>\n<CONCLUSION>\nBeijing is located in southern China.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: BeijingCapital(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China",
    "<PREMISES>\nBeijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nBeijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNCity)\nBeijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics)\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedSummerAndWinterOlympics)\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x, Beijing) & BestUniversity(x, Asia-Pacific & World))\n</PREMISES>\n<CONCLUSION>\nBeijing is located in southern China.\nFOL: -NorthernChina(Beijing)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: BeijingCapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: BeijingMostPopulousNationalCapital(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: BeijingLocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: BeijingHosted2008SummerOlympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: BeijingHasHostedBothSummerAndWinterOlympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyOfBeijingUniversitiesConsistentlyRankAmongTheBestInAsiaPacificAndWorld(beijing)\nTEXT: Beijing is located in southern China.\nFOL: -BeijingLocatedInNorthernChina(beijing)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 21,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: BeijingCapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympicsGames(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyOfBeijingUniversitiesConsistentlyRankAmongBestInAsiaPacificAndWorld(beijing)\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<PREMISES>\nBeijing is the capital of the People's Republic of China. \nFOL: BeijingCapitalOfChina\nBeijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity\nBeijing is located in Northern China.\nFOL: LocatedInNorthernChina\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyOfBeijingUniversitiesRankAmongBestInAsiaPacificAndWorld\n</PREMISES>\n<CONCLUSION>\nBeijing is the second largest Chinese city by urban population.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: BeijingCapitalOfChina\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing) & Hosted2008SummerParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympics(beijing) & HostedBothSummerAndWinterParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: MostRankedUniversitiesInAsiaPacificAndWorld(beijing)\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: Beijing is the second largest Chinese city by urban population.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beijing is the second largest Chinese city by urban population.\nF",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyUniversitiesRankAmongBestInAsiaPacificAndWorld(beijing)\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapitalCity)\nTEXT: Beijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedBothSummerAndWinterOlympics)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & (Ranking(x) & AsiaPacific(x) & World(x)))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: -Beijing(LargestChineseCityByUrbanPopulation)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nBeijing is the capital of the People's Republic of China.\nFOL: BeijingCapital(Beijing)\nBeijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(Beijing)\nBeijing is located in Northern China.\nFOL: NorthernChina(Beijing)\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(Beijing) & Hosted2008SummerParalympics(Beijing)\nBeijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(Beijing) & HostedWinterOlympics(Beijing) & HostedSummerParalympics(Beijing) & HostedWinterParalympics(Beijing)\nMany of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: AllUniversities(Beijing) & ConsistentlyRankAmongBestInAsiaPacificAndWorld(Beijing)\n</PREMISES>\n<CONCLUSION>\nBeijing is the second largest Chinese city by urban population.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT:",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: BeijingCapital(Beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(Beijing)\nTEXT: Beijing is located in Northern China.\nFOL: NorthernChina(Beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(Beijing) & Hosted2008SummerParalympics(Beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerOlympics(Beijing) & HostedWinterOlympics(Beijing) & HostedSummerParalympics(Beijing) & HostedWinterParalympics(Beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: BestInAsiaPacific(Beijing) & BestInTheWorld(Beijing)\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(Beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapitalCity)\nTEXT: Beijing is located in Northern China.\nFOL: Beijing(InNorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedBothSummerAndWinterOlympics)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) -> RankAmongBestInAsiaPacificAndWorld)\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: -Beijing(SecondLargestChineseCityByUrbanPopulation)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedOlympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: BestUniversities(beijing)\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: BeijingCapital(Beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(Beijing)\nTEXT: Beijing is located in Northern China.\nFOL: NorthernChina(Beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedOlympicsAndParalympics(2008, Beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedOlympicsAndParalympics(2008, Beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: AllUniversitiesInBeijing(RankAmongBestInAsiaPacificAndWorld)\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(Beijing)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: BeijingCapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyUniversitiesInBeijing(RankAmongBestInAsiaPacificAndWorld)\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<PREMISES>\n<evaluate>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyOfBeijingUniversitiesConsistentlyRankAmongBestInAsiaPacificAndWorld\n</evaluate>\n</PREMISES>\n\n<CONCLUSION>\n<evaluate>\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</evaluate>\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapital)\nTEXT: Beijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008Olympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedBothSummerAndWinterOlympics)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x) -> (RankAmongBestInAsiaPacificAndWorld(x)))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: -CapitalOfChina & -MostPopulousNationalCapital & -NorthernChina & -Hosted2008Olympics & -HostedBothSummerAndWinterOlympics & -University(beijing) & RankAmongBestInAsiaPacificAndWorld(beijing",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyOfBestUniversitiesInAsiaPacificAndWorld(beijing)\n</EVALUATE>\n\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapital)\nTEXT: Beijing is located in Northern China.\nFOL: Beijing(InNorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedBothSummerAndWinterOlympics)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & BestInAsiaPacificAndWorld(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: -LargestChineseCityByUrbanPopulation(Beijing)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nall x. (CapitalOfChina(x) -> Beijing(x))\nall x. (MostPopulousNationalCapital(x) -> Beijing(x))\nBeijing(x) & NorthChina(x)\nBeijing(x) & Hosted2008SummerOlympics(x) & Hosted2008SummerParalympics(x)\nBeijing(x) & HostedBothSummerAndWinterOlympics(x) & HostedBothSummerAndWinterParalympics(x)\nexists y. (University(y) & AsiaPacificRank(y, 1) & WorldRank(y, 1))\n</PREMISES>\n<CONCLUSION>\n-SecondLargestChineseCityByUrbanPopulation(Beijing)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedOlympicsAndParalympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedAllOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyUniversitiesOfBeijingRankHigh\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapital)\nTEXT: Beijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedSummerAndWinterOlympics)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x, Beijing) -> (BestInAsiaPacific(x) & BestInWorld(x)))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: -LargestChineseCityByUrbanPopulation(Beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China. \nFOL: BeijingCapital(Beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(Beijing)\nTEXT: Beijing is located in Northern China.\nFOL: NorthernChina(Beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympics2008(Beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympics(Beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: BestUniversitiesAsiaPacific(Beijing)\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: SecondLargestChineseCityByUrbanPopulation(Beijing)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapital)\nTEXT: Beijing is located in Northern China.\nFOL: Beijing(InNorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedBothSummerAndWinterOlympics)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: exists x. (University(x) & InBeijing(x) & ConsistentlyRankAmongBestInAsiaPacificAndWorld(x))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: -Beijing(FirstLargestChineseCityByUrbanPopulation)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: Beijing(CapitalOfChina)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: Beijing(MostPopulousNationalCapital)\nTEXT: Beijing is located in Northern China.\nFOL: Beijing(NorthernChina)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Beijing(Hosted2008SummerOlympics)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: Beijing(HostedSummerAndWinterOlympics)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: all x. (University(x, Beijing) -> (BestInAsiaPacific(x) & BestInWorld(x)))\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: -CapitalOfChina & SecondLargestChineseCityByUrbanPopulation(beijing)\n</EVALUATE>",
    "<PREMISES>\n<evaluate>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: CapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: LocatedInNorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyUniversitiesInBeijing(RankAmongBestInAsiaPacificAndWorld)\n</evaluate>\n</PREMISES>\n<CONCLUSION>\n<evaluate>\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: -SecondLargestChineseCityByUrbanPopulation(beijing)\n</evaluate>\n</CONCLUSION>",
    "<PREMISES>\n<evaluate>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: BeijingCapitalOfChina(beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapitalCity(beijing)\nTEXT: Beijing is located in Northern China.\nFOL: NorthernChina(beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: Hosted2008SummerOlympics(beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedSummerAndWinterOlympicsAndParalympics(beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyUniversitiesInBeijing(rankAmongBestInAsiaPacificAndWorld)\n</evaluate>\n</PREMISES>\n<CONCLUSION>\n<evaluate>\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: -SecondLargestChineseCityByUrbanPopulation(beijing)\n</evaluate>\n</CONCLUSION>",
    "<PREMISES>\nall x. Beijing(x) -> CapitalOfChina(x)\nall x. Beijing(x) -> MostPopulousNationalCapitalCity(x)\nall x. Beijing(x) -> LocatedInNorthernChina(x)\nall x. Beijing(x) -> Hosted2008SummerOlympics(x) & Hosted2008SummerParalympics(x)\nall x. Beijing(x) -> HostedBothSummerAndWinterOlympics(x) & HostedBothSummerAndWinterParalympics(x)\nexists x. University(x) & University(x) : RankAmongAsiaPacificAndWorld(x)\n</PREMISES>\n<CONCLUSION>\n-SecondLargestChineseCityByUrbanPopulation(beijing)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Beijing is the capital of the People's Republic of China.\nFOL: BeijingCapital(Beijing)\nTEXT: Beijing is the world's most populous national capital city.\nFOL: MostPopulousNationalCapital(Beijing)\nTEXT: Beijing is located in Northern China.\nFOL: NorthernChina(Beijing)\nTEXT: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nFOL: HostedSummerOlympicsAndParalympics(Beijing)\nTEXT: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nFOL: HostedBothSummerAndWinterOlympicsAndParalympics(Beijing)\nTEXT: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nFOL: ManyBestUniversitiesInAsiaPacificAndWorld(Beijing)\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: Beijing is the second largest Chinese city by urban population.\nFOL: -LargestChineseCityByUrbanPopulation(Beijing)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 22,
  "responses": [
   [
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: Mars(x) -> Alien(x)\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Earth(marvin) & -Mars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Alien(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</CONCLUSION>",
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: (Mars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Earth(marvin) & -Mars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</CONCLUSION>",
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (Mars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Earth(marvin) & -Mars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</CONCLUSION>",
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: x. (Mars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Earth(marvin) & -Mars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</CONCLUSION>",
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: Mars(x) -> Alien(x)\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Earth(Marvin) & -Mars(Marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(Marvin) -> Extraterrestrial(Marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(Marvin) & -Mars(Marvin)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (Mars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Earth(marvin) & -Mars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</CONCLUSION>",
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Extraterrestrial(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</CONCLUSION>",
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (Mars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Earth(marvin) & -Mars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</CONCLUSION>",
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (Mars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Earth(marvin) & -Mars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</CONCLUSION>",
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Extraterrestrial(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: Mars(x) -> Alien(x)\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Earth(marvin) & -Mars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</CONCLUSION>",
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (Mars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Earth(Marvin) & -Mars(Marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(Marvin) -> Extraterrestrial(Marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(Marvin) & -Mars(Marvin)\n</CONCLUSION>",
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (Mars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Earth(marvin) & -Mars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</CONCLUSION>",
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (Mars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Earth(marvin) & -Mars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</CONCLUSION>",
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (Mars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Earth(marvin) & -Mars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: Mars(x) -> Alien(x)\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Earth(marvin) & -Mars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</CONCLUSION>",
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Extraterrestrial(marvin)\n</PREMISES>\n\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</CONCLUSION>",
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (FromMars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (FromEarth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -FromEarth(marvin) & -FromMars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -FromEarth(marvin) -> Extraterrestrial(marvin)\n</PREMISES>\n\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -FromMars(marvin)\n</CONCLUSION>",
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (Mars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Earth(marvin) & -Mars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</CONCLUSION>",
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: Mars(x) -> Alien(x)\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Earth(marvin) & -Mars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: Mars(x) -> Alien(x)\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Earth(marvin) & -Mars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</CONCLUSION>",
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: x. (Mars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Earth(marvin) & -Mars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Alien(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</CONCLUSION>",
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (Mars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Earth(marvin) & -Mars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</CONCLUSION>",
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (Mars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Earth(marvin) & -Mars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</CONCLUSION>",
    "<PREMISES>\nAll aliens are extraterrestrial.\nFOL: all x. (Alien(x) -> Extraterrestrial(x))\nTEXT: If someone is from Mars, then they are aliens.\nFOL: all x. (Mars(x) -> Alien(x))\nTEXT: No extraterrestrial is human.\nFOL: all x. (Extraterrestrial(x) -> -Human(x))\nTEXT: Everyone from Earth is a human.\nFOL: all x. (Earth(x) -> Human(x))\nTEXT: Marvin cannot be from Earth and from Mars.\nFOL: -Earth(marvin) & -Mars(marvin)\nTEXT: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nFOL: -Earth(marvin) -> Extraterrestrial(marvin)\n</PREMISES>\n<CONCLUSION>\nMarvin is neither a human nor from Mars.\nFOL: -Human(marvin) & -Mars(marvin)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 23,
  "responses": [
   [
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> Well",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(Djokovic) & Athlete(Djokovic)\nTEXT: If Djokovic is famous and is an athlete",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(djokovic) & Athlete(djokovic)\nTEXT: If Djokovic is famous and is an athlete, then Dj",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(Djokovic) & Athlete(Djokovic)\nTEXT: If Dj"
   ],
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) &",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlam(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djok",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> Well",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlam(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djok"
   ],
   [
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: Celebrity(x) -> WellPaid(x)\nTEXT: If a person is an athlete then they are famous.\nFOL: Athlete(x) -> Famous(x)\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> TaxHaven(djokovic)\nTEXT",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) ->",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlam(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djok",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(d"
   ],
   [
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(Djokovic) & Athlete(Djokovic)) -> TaxH",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(djokovic) & Athlete(djokovic)\nTEXT: If Djok",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlam(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(djokovic) & Athlete(djokovic)\nTEXT: If Djokovic is famous and is",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Ath"
   ],
   [
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlam(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djok",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(djokovic) & Athlete(djokovic)\nTEXT: If Djokovic",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlam(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djok",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) &",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: Celebrity(x) -> WellPaid(x)\nTEXT: If a person is an athlete then they are famous.\nFOL: Athlete(x) -> Famous(x)\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\nTEXT:"
   ]
  ]
 },
 {
  "index": 24,
  "responses": [
   [
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> TennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (TennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(Djokovic) & Athlete(Djokovic)\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(djokovic) & Athlete(djokovic)\nTEXT: Djokovic lives",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(djokovic) & Athlete(djokovic)\nTEXT: If Djokovic",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> TennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (TennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: Celebrity(x) -> WellPaid(x)\nTEXT: If a person is an athlete then they are famous.\nFOL: Athlete(x) -> Famous(x)\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\n</PREMISES>\n<",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(Djokovic) & Athlete(Djokovic)\nTEXT: If Djokovic is famous and is an athlete, then Dj"
   ],
   [
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(djokovic) & Athlete(djokovic)\nTEXT: If Djokovic",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: Celebrity(x) -> WellPaid(x)\nTEXT: If a person is an athlete then they are famous.\nFOL: Athlete(x) -> Famous(x)\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(Djokovic) & Athlete(Djokovic)) -> Well",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlam(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(Djokovic) & Athlete(Djokovic)\nTEXT: If Djokovic is famous and is",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Djokovic & Famous(Djokovic) & Athlete(Djokovic)\nTEXT: If",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: Celebrity(x) -> WellPaid(x)\nTEXT: If a person is an athlete then they are famous.\nFOL: Athlete(x) -> Famous(x)\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\n</PRE"
   ],
   [
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(Djokovic) & Athlete(Djokovic)\nTEXT: If Djokovic is",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Ath",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(Djokovic) & Athlete(Djokovic)\nTEXT: Djokovic lives",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(Djokovic) & Athlete(Djokovic)\nTEXT: If Djokovic is famous and is an athlete,",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: Celebrity(x) -> WellPaid(x)\nTEXT: If a person is an athlete then they are famous.\nFOL: Athlete(x) -> Famous(x)\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic"
   ],
   [
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlam(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(djokovic) & Athlete(djokovic)\nTEXT: Djokovic lives in well paid",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> TennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (TennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(djokovic) & Athlete(djokovic)\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlam(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djok",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: Celebrity(x) -> WellPaid(x)\nTEXT: If a person is an athlete then they are famous.\nFOL: Athlete(x) -> Famous(x)\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(Djokovic) & Athlete(Djokovic)) -> WellPaid(Djokovic)\n</PRE",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(Djokovic) & Athlete(Djokovic)\nTEXT: If Djokovic is famous and is an athlete,"
   ],
   [
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(djokovic) & Athlete(djokovic)\nTEXT: If Djokovic is famous and is an athlete,",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlam(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(djokovic) & Athlete(djokovic)\nTEXT: If Djokovic is famous and is",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Djokovic & Famous(Djokovic) & Athlete(Djokovic)\nTEXT: If",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: Celebrity(x) -> WellPaid(x)\nTEXT: If a person is an athlete then they are famous.\nFOL: Athlete(x) -> Famous(x)\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\n</PREMISE",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(Djokovic) & Athlete(Djokovic)\nTEXT: If Djokovic is famous and is an athlete, then Dj"
   ]
  ]
 },
 {
  "index": 25,
  "responses": [
   [
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> TennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (TennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: Celebrity(x) -> WellPaid(x)\nTEXT: If a person is an athlete then they are famous.\nFOL: Athlete(x) -> Famous(x)\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(djokovic) & Athlete(djokovic)\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (F",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> TennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (TennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: Celebrity(x) -> WellPaid(x)\nTEXT: If a person is an athlete then they are famous.\nFOL: Athlete(x) -> Famous(x)\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\n</PREMISES>\n<",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(djokovic) & Athlete(djokovic)\nTEXT: If Djokovic is famous and is an athlete",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic))",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlam(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(djokovic) & Athlete(djokovic)\nTEXT: If Djokovic is famous and is"
   ],
   [
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> TennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (TennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djok",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(Djokovic) & Athlete(Djokovic)\nTEXT: If Djokovic is",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(djokovic) & Athlete(djokovic)\nTEXT: If Djokovic is famous and",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(djokovic) & Athlete(djokovic)\nTEXT: If Djokovic",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(djokovic) & Athlete(djokovic)\nTEXT: If Djokovic is famous and is an athlete,"
   ],
   [
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(djokovic) & Athlete(djokovic)\nTEXT: If Djok",
    "<EVALUATE>\nTEXT: A person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(djokovic) & Athlete(djokovic)\nTEXT: Djokovic does not live",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(djokovic) & Athlete(djokovic)\nTEXT: If Djokovic",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(Djokovic) &",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(Djokovic) & Ath"
   ],
   [
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlam(x) | OscarNominee(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominee(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic))",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: Celebrity(x) -> WellPaid(x)\nTEXT: If a person is an athlete then they are famous.\nFOL: Athlete(x) -> Famous(x)\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\n</PRE",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> TennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (TennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(djokovic) & Athlete(djokovic)\nTEXT: If Djokovic is famous and is an athlete, then Djokovic",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> TennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (TennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: Celebrity(x) -> WellPaid(x)\nTEXT: If a person is an athlete then they are famous.\nFOL: Athlete(x) -> Famous(x)\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djokovic)\n</PREMISES",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(Djokovic) & Athlete(Djokovic)\nTEXT: If Djokovic is famous and"
   ],
   [
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LivesInTaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Ath",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> TennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (TennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nFOL: (Famous(djokovic) & Athlete(djokovic)) -> WellPaid(djok",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlam(x) | OscarNominated(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominated(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> TaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(Djokovic) & Athlete(Djokovic)\nTEXT: If Djokovic is famous and is an athlete, then",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: x. (GrandSlam(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlam(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: Celebrity(x) -> WellPaid(x)\nTEXT: If a person is an athlete then they are famous.\nFOL: Athlete(x) -> Famous(x)\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(djokovic) & Athlete(djokovic)\nTEXT: If Djokovic is famous and is an athlete, then Djokovic lives in well",
    "<PREMISES>\nA person is either a Grand Slam champion or an Oscar-nominated actor.\nFOL: all x. (GrandSlamChampion(x) | OscarNominatedActor(x))\nTEXT: All people who are Grand Slam champions are professional tennis players.\nFOL: all x. (GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))\nTEXT: All Oscar-nominated actors are celebrities.\nFOL: all x. (OscarNominatedActor(x) -> Celebrity(x))\nTEXT: All professional tennis players are athletes.\nFOL: all x. (ProfessionalTennisPlayer(x) -> Athlete(x))\nTEXT: If a person is a celebrity then they are well paid.\nFOL: all x. (Celebrity(x) -> WellPaid(x))\nTEXT: If a person is an athlete then they are famous.\nFOL: all x. (Athlete(x) -> Famous(x))\nTEXT: All well-paid people live in tax havens.\nFOL: all x. (WellPaid(x) -> LiveInTaxHaven(x))\nTEXT: Djokovic is famous and is an athlete.\nFOL: Famous(djokovic) & Athlete(djokovic)\nTEXT: If Djokovic"
   ]
  ]
 },
 {
  "index": 26,
  "responses": [
   [
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: Leads(ProfessionalWrestlingStable, RoderickStrong)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(DiamondMine, RoderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Roderick strong leads a professional wrestling stable",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: Leads(professionalWrestlingStable, RoderickStrong)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: Leads(ProfessionalWrestlingStable, RoderickStrong)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine DiamondMine(isProfessionalWrestlingStable) & DiamondMine(isInWWE)\nRoderick Strong leads DiamondMine.\nFOL: RoderickStrong leads DiamondMine\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: DiamondMine includes CreedBrothers & IvyNile\nImperium has a feud with DiamondMine.\nFOL: Imperium hasFeud DiamondMine\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: RoderickStrong leads isProfessionalWrestlingStable\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(Mine) & ProfessionalWrestlingStable(Mine) & WWE(Mine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: RoderickStrong(Mine)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: DiamondMine(Mine) & CreedBrothers(Mine) & IvyNile(Mine)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Imperium(Mine)\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: Roderick Strong leads a professional wrestling stable.\nFOL: RoderickStrong & ProfessionalWrestlingStable\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine) & ProfessionalWrestlingStable(DiamondMine) & WWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: DiamondMine(RoderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: DiamondMine(CreedBrothers) & DiamondMine(IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Imperium(DiamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: RoderickStrong(ProfessionalWrestlingStable)\n</EVALUATE>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: Leads(aProfessionalWrestlingStable, RoderickStrong)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leader(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Member(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: Leader(professionalWrestlingStable, RoderickStrong)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine DiamondMine WWE\nRoderick Strong leads Diamond Mine.\nFOL: RoderickStrong leads DiamondMine\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: DiamondMine CreedBrothers IvyNile\nImperium has a feud with Diamond Mine.\nFOL: Imperium hasFeud DiamondMine\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: RoderickStrong leads WWEStable\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\n</PREMISES>\n\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: Leads(aProfessionalWrestlingStable, RoderickStrong)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(isProfessionalStable & isInWWE)\nRoderick Strong leads Diamond Mine.\nFOL: RoderickStrong leads DiamondMine\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: DiamondMine includes CreedBrothers & IvyNile\nImperium has a feud with Diamond Mine.\nFOL: Imperium hasFeud with DiamondMine\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: RoderickStrong leads isProfessionalStable\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(isAStable & WWE(formedAt))\nRoderick Strong leads Diamond Mine.\nFOL: RoderickStrong(leads DiamondMine)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: includes DiamondMine CreedBrothers IvyNile\nImperium has a feud with DiamondMine.\nFOL: Imperium hasFeud DiamondMine\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: RoderickStrong leads isAStable\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(aProfessionalWrestlingStable & WWE(aProfessionalWrestlingStable))\nRoderick Strong leads Diamond Mine.\nFOL: RoderickStrong(aLeader & DiamondMine(aLeader))\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: DiamondMine(aMember & CreedBrothers(aMember) & IvyNile(aMember))\nImperium has a feud with Diamond Mine.\nFOL: Imperium(aFeud & DiamondMine(aFeud))\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: RoderickStrong(aLeader & aProfessionalWrestlingStable(aProfessionalWrestlingStable))\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: Leads(aProfessionalWrestlingStable, RoderickStrong)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(stable) & WWE(stable)\nRoderick Strong leads Diamond Mine.\nFOL: RoderickStrong leads DiamondMine\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: DiamondMine includes CreedBrothers & IvyNile\nImperium has a feud with Diamond Mine.\nFOL: Imperium hasFeud with DiamondMine\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: RoderickStrong leads stable\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(x) & WWE(x)\nRoderick Strong leads Diamond Mine.\nFOL: RoderickStrong(x) & Leads(DiamondMine(x))\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine(x), CreedBrothers(x), IvyNile(x))\nImperium has a feud with Diamond Mine.\nFOL: Imperium(x) & HasFeud(x, DiamondMine(x))\n</PREMISES>\n\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: RoderickStrong(x) & Leads(x, ProfessionalWrestlingStable(x))\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leader(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Member(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: Leader(Stable, RoderickStrong)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(DiamondMine, RoderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Member(DiamondMine, CreedBrothers, IvyNile)\nTEXT: Imperium has a feud with DiamondMine.\nFOL: Feud(Imperium, DiamondMine)\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leader(",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: Leads(professionalWrestlingStable, RoderickStrong)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(aProfessionalWrestlingStable & WWE(aProfessionalWrestlingStable))\nRoderick Strong leads Diamond Mine.\nFOL: RoderickStrong DiamondMine\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: DiamondMine(creedBrothers & IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: Imperium DiamondMine\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: RoderickStrong(aProfessionalWrestlingStable)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: Leads(professionalWrestlingStable, RoderickStrong)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: Leads(aProfessionalWrestlingStable, RoderickStrong)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: HasFeud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: Leads(aProfessionalWrestlingStable, RoderickStrong)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nTEXT: Roderick Strong leads DiamondMine.\nFOL: Leads(DiamondMine, RoderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nTEXT: Imperium has a feud with DiamondMine.\nFOL: HasFeud(Imperium, DiamondMine)\nTEXT: Roderick strong leads a professional wrestling stable",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(stable) & WWE(stable)\nRoderick Strong leads Diamond Mine.\nFOL: RoderickStrong -> DiamondMine\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: DiamondMine -> CreedBrothers & IvyNile\nImperium has a feud with Diamond Mine.\nFOL: Imperium -> feud(DiamondMine)\n</PREMISES>\n\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: RoderickStrong & leads & professionalWrestlingStable\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine) & ProfessionalWrestlingStable(DiamondMine) & WWE(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(DiamondMine) = RoderickStrong\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Member(DiamondMine) = CreedBrothers & IvyNile\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(DiamondMine) = RoderickStrong\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leader(DiamondMine) = RoderickStrong\nTEXT: Roderick strong leads a professional wrestling stable.\nFOL: Leader(ProfessionalWrestlingStable) = RoderickStrong\n</EVALUATE>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Lead(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads a professional wrestling stable.\nFOL: Lead(aProfessionalWrestlingStable, RoderickStrong)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 27,
  "responses": [
   [
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Leads(CreedBrothers, RoderickStrong)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: Leads(DiamondMine, RoderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nTEXT: Imperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\nTEXT: Roderick strong leads the Creed Brothers.\nFOL: Leads(Creed",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(x) & WWE(x)\nRoderick Strong leads Diamond Mine.\nFOL: DiamondMine(x) & Leader(x, strong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: DiamondMine(x) & Includes(x, creedBrothers) & Includes(x, ivyNile)\nImperium has a feud with Diamond Mine.\nFOL: Imperium(x) & Feud(x, diamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Leader(x, strong) & Includes(x, creedBrothers)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leader(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Member(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Leader(CreedBrothers, RoderickStrong)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(x) & WWE(x)\nRoderick Strong leads Diamond Mine.\nFOL: RoderickStrong(x) & Leads(x) & DiamondMine(x)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(x) & DiamondMine(x) & CreedBrothers(x) & IvyNile(x)\nImperium has a feud with Diamond Mine.\nFOL: HasFeud(x) & Imperium(x) & DiamondMine(x)\n</PREMISES>\n\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Leads(x) & RoderickStrong(x) & CreedBrothers(x)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Leads(CreedBrothers, RoderickStrong)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(isDiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: RoderickStrong -> DiamondMine\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: DiamondMine -> (CreedBrothers & IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: Imperium -> feud(DiamondMine)\n</PREMISES>\n\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: RoderickStrong -> CreedBrothers\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leader(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Member(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Leader(CreedBrothers, RoderickStrong)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Leads(CreedBrothers, RoderickStrong)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Leads(CreedBrothers, RoderickStrong)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Leads(CreedBrothers, RoderickStrong)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(x) : x is a professional wrestling stable & WWE(x)\nRoderick Strong leads Diamond Mine.\nFOL: LeadsDiamondMine(RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: IncludesDiamondMine(CreedBrothers & IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium & DiamondMine)\n</PREMISES>\n\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Leads(CreedBrothers & RoderickStrong)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leader(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Member(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Leader(CreedBrothers, RoderickStrong)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Leads(CreedBrothers, RoderickStrong)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(x) & WWE(x)\nRoderick Strong leads Diamond Mine.\nFOL: DiamondMine(x) & Lead(x, x, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: DiamondMine(x) & Includes(x, x, CreedBrothers) & Includes(x, x, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: Imperium(x) & Feud(x, x, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Lead(x, CreedBrothers, RoderickStrong)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(x) & WWE(x)\nTEXT: Roderick Strong leads Diamond Mine.\nFOL: DiamondMine(x) & Lead(x, x, RoderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: DiamondMine(x) & Includes(x, x, CreedBrothers) & Includes(x, x, IvyNile)\n",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Leads(CreedBrothers, RoderickStrong)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Leads(CreedBrothers, RoderickStrong)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Leads(CreedBrothers, RoderickStrong)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(isDiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: LeadDiamondMine(RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: MemberOfDiamondMine(CreedBrothers & IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: HasFeud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: LeadCreedBrothers(RoderickStrong)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Leads(CreedBrothers, RoderickStrong)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Leads(CreedBrothers, RoderickStrong)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Leads(CreedBrothers, RoderickStrong)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Leads(CreedBrothers, RoderickStrong)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leader(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Member(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Leader(CreedBrothers, RoderickStrong)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Lead(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: HasFeud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Lead(CreedBrothers, RoderickStrong)\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads Diamond Mine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with Diamond Mine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n\n<CONCLUSION>\nRoderick strong leads the Creed Brothers.\nFOL: Leads(CreedBrothers, RoderickStrong)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 28,
  "responses": [
   [
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: HasFeud(Imperium, DiamondMine)\n</PREMISES>\n\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, Includes(Stable(x), IvyNile))\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamondMine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -Feud(Imperium, Includes(Imperium, DiamondMine, IvyNile))\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamondMine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: HasFeud(Imperium, DiamondMine)\n</PREMISES>\n\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, Includes(Imperium, IvyNile))\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamondMine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -Feud(Imperium, AnyStable(x) & Includes(x, IvyNile))\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Leader(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Member(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -Feud(Imperium, Member(DiamondMine, IvyNile))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Leader(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Member(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -Feud(Imperium, Member(DiamondMine, IvyNile))\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Lead(DiamondMine, RoderickStrong)\nDiamondMine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: HasFeud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, Includes(DiamondMine, IvyNile))\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamondMine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: HasFeud(Imperium, DiamondMine)\n</PREMISES>\n\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, Includes(DiamondMine, IvyNile))\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(aProfessionalWrestlingStable & WWE(a))\nRoderick Strong leads DiamondMine.\nFOL: LeadsDiamondMine(RoderickStrong)\nDiamondMine includes the Creed Brothers, and Ivy Nile.\nFOL: IncludesDiamondMine(CreedBrothers & IvyNile)\nImperium has a feud with DiamondMine.\nFOL: HasFeud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, DiamondMine) & -All x. (ProfessionalWrestlingStable(x) & Includes(x, IvyNile))\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Leader(DiamondMine, RoderickStrong)\nDiamondMine includes the Creed Brothers, and Ivy Nile.\nFOL: Member(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: HasFeud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, Member(DiamondMine, IvyNile))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Leader(DiamondMine, RoderickStrong)\nDiamondMine includes the Creed Brothers, and Ivy Nile.\nFOL: Member(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -Feud(Imperium, Member(DiamondMine, IvyNile))\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Leader(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Member(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -Feud(Imperium, Member(DiamondMine, IvyNile))\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Lead(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: HasFeud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, Includes(DiamondMine, IvyNile))\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamondMine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -Feud(Imperium, Includes(Imperium, DiamondMine, IvyNile))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nTEXT: Roderick Strong leads DiamondMine.\nFOL: Leads(DiamondMine, RoderickStrong)\nTEXT: DiamondMine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nTEXT: Imperium has a feud with DiamondMine.\nFOL: Feud(Imperium, Diamond",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: HasFeud(Imperium, DiamondMine)\n</PREMISES>\n\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, Includes(DiamondMine, IvyNile))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine = ProfessionalWrestlingStable & WWE\nRoderick Strong leads DiamondMine.\nFOL: RoderickStrong = Leader(DiamondMine)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: DiamondMine = Includes(CreedBrothers & IvyNile)\nImperium has a feud with DiamondMine.\nFOL: Imperium = Feud(DiamondMine)\n</PREMISES>\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -Feud(DiamondMine & Includes(CreedBrothers & IvyNile))\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine = ProfessionalWrestlingStable & WWE\nRoderick Strong leads DiamondMine.\nFOL: RoderickStrong = Lead(DiamondMine)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: DiamondMine = Include(CreedBrothers & IvyNile)\nImperium has a feud with DiamondMine.\nFOL: Imperium = Feud(DiamondMine)\n</PREMISES>\n\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -Imperium & -ProfessionalWrestlingStable & Includes(IvyNile)",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Leader(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Member(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -Feud(Imperium, Member(DiamondMine, IvyNile))\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamondMine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: HasFeud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, Includes(DiamondMine, IvyNile))\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamondMine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: HasFeud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, Includes(DiamondMine, IvyNile))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamondMine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: HasFeud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, Includes(DiamondMine, IvyNile))\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: HasFeud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, Includes(DiamondMine, IvyNile))\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamondMine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -Feud(Imperium, Includes(Imperium, DiamondMine, IvyNile))\n</CONCLUSION>",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Leader(DiamondMine, RoderickStrong)\nDiamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Member(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: Feud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -Feud(Imperium, Member(DiamondMine, IvyNile))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Diamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nTEXT: Roderick Strong leads DiamondMine.\nFOL: Leader(DiamondMine, RoderickStrong)\nTEXT: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nFOL: Member(DiamondMine, CreedBrothers, IvyNile)\nTEXT: Imperium has a feud with DiamondMine.\nFOL: Feud(Imperium, DiamondMine)\nTEXT:",
    "<PREMISES>\nDiamond Mine is a professional wrestling stable, formed in WWE.\nFOL: DiamondMine(DiamondMine)\nRoderick Strong leads DiamondMine.\nFOL: Leads(DiamondMine, RoderickStrong)\nDiamondMine includes the Creed Brothers, and Ivy Nile.\nFOL: Includes(DiamondMine, CreedBrothers, IvyNile)\nImperium has a feud with DiamondMine.\nFOL: HasFeud(Imperium, DiamondMine)\n</PREMISES>\n<CONCLUSION>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\nFOL: -HasFeud(Imperium, Includes(DiamondMine, IvyNile))\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 29,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(ViennaMusicSociety, beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(Symphony No. 9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(Symphony No. 9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(Symphony No. 9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(ViennaMusicSociety, beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor(x)))\n</PREMISES>\n<CONCLUSION>\nBeethoven is a composer.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(ViennaMusicSociety) & Leads(beethoven, ViennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor))\n</PREMISES>\n<CONCLUSION>\nBeethoven is a composer.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(ViennaMusicSociety) & Leads(beethoven, ViennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: Orchestra(x) & Leads(x, y) -> Conductor(x, y)\n</PREMISES>\n<CONCLUSION>\nBeethoven is a composer.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nComposers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nBeethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nVienna Music Society premiered Symphony No. 9.\nFOL: Society(ViennaMusicSociety) & MusicPiece(SymphonyNo9)\nVienna Music Society is an orchestra.\nFOL: Society(ViennaMusicSociety) & Orchestra(ViennaMusicSociety)\nBeethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(ViennaMusicSociety, beethoven)\nOrchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor))\n</PREMISES>\n<CONCLUSION>\nBeethoven is a composer.\nFOL: Composer(beethoven)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(ViennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x,Conductor))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(viennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n</PREMISES>\n<CONCLUSION>\nBeethoven is a composer.\nFOL: Composer(beethoven)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(Symphony No. 9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(Symphony No. 9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(Symphony No. 9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(ViennaMusicSociety, beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor(x)))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(ViennaMusicSociety, beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor))\n</PREMISES>\n<CONCLUSION>\nBeethoven is a composer.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nComposers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nBeethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nVienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nVienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nBeethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(ViennaMusicSociety)\nOrchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n</PREMISES>\n<CONCLUSION>\nBeethoven is a composer.\nFOL: Composer(beethoven)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(ViennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(Symphony No. 9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(Symphony No. 9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety(premiered(Symphony No. 9))\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(isOrchestra)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(ViennaMusicSociety(beethoven))\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor))\n</PREMISES>\n<CONCLUSION>\nBeethoven is a composer.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(Symphony No. 9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Beethoven(Symphony No. 9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety(Symphony No. 9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(Orchestra)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven(Leads(ViennaMusicSociety))\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LeadsConductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(Beethoven)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(ViennaMusicSociety, beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor(x)))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(Symphony No. 9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(Beethoven) & MusicPiece(Symphony No. 9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(Symphony No. 9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(Beethoven) & Leads(ViennaMusicSociety, Beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor))\n</PREMISES>\n<CONCLUSION>\nBeethoven is a composer.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is a composer.\nFOL: Composer(Beethoven)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(ViennaMusicSociety, beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor))\n</PREMISES>\n<CONCLUSION>\nBeethoven is a composer.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nComposers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nBeethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nVienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nVienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nBeethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(ViennaMusicSociety)\nOrchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n</PREMISES>\n<CONCLUSION>\nBeethoven is a composer.\nFOL: Composer(beethoven)\n</CONCLUSION>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo.9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo.9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo.9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(ViennaMusicSociety,beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x,Conductor))\n</PREMISES>\n<CONCLUSION>\nBeethoven is a composer.\nFOL: Composer(beethoven)\n</CONCLUSION>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nComposers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nBeethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nVienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nVienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nBeethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(ViennaMusicSociety, beethoven)\nOrchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor(x)))\n</PREMISES>\n<CONCLUSION>\nBeethoven is a composer.\nFOL: Composer(beethoven)\n</CONCLUSION>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(ViennaMusicSociety) & Leads(beethoven,ViennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x,Conductor))\n</PREMISES>\n<CONCLUSION>\nBeethoven is a composer.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nComposers write music pieces.\nFOL: all x. (Composer(x) -> WriteMusicPiece(x))\nBeethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & WriteMusicPiece(SymphonyNo9)\nVienna Music Society premiered Symphony No. 9.\nFOL: Society(ViennaMusicSociety) & Premiered(SymphonyNo9)\nVienna Music Society is an orchestra.\nFOL: Society(ViennaMusicSociety) & Orchestra(ViennaMusicSociety)\nBeethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(Society(ViennaMusicSociety))\nOrchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LedByConductor(x))\n</PREMISES>\n<CONCLUSION>\nBeethoven is a composer.\nFOL: Composer(beethoven)\n</CONCLUSION>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(ViennaMusicSociety, beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor))\n</PREMISES>\n<CONCLUSION>\nBeethoven is a composer.\nFOL: Composer(beethoven)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicSociety(viennaMusicSociety) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: MusicSociety(viennaMusicSociety) & Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(MusicSociety(viennaMusicSociety), beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LeadsConductor(x))\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicSociety(ViennaMusicSociety) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: MusicSociety(ViennaMusicSociety) & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(ViennaMusicSociety, beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor))\n</PREMISES>\n<CONCLUSION>\nBeethoven is a composer.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is a composer.\nFOL: Composer(beethoven)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nComposers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nBeethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nVienna Music Society premiered Symphony No. 9.\nFOL: MusicSociety(ViennaMusicSociety) & MusicPiece(SymphonyNo9)\nVienna Music Society is an orchestra.\nFOL: MusicSociety(ViennaMusicSociety) & Orchestra(ViennaMusicSociety)\nBeethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(ViennaMusicSociety, beethoven)\nOrchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor))\n</PREMISES>\n<CONCLUSION>\nBeethoven is a composer.\nFOL: Composer(beethoven)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 30,
  "responses": [
   [
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nComposers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nBeethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nVienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety(premiered(symphonyNo9))\nVienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(isOrchestra)\nBeethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & ViennaMusicSociety(leads(beethoven))\nOrchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x) & premiered(x))\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(Symphony No. 9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(Beethoven) & MusicPiece(Symphony No. 9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(Symphony No. 9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(Beethoven) & Orchestra(ViennaMusicSociety) & Leads(Beethoven, ViennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(ViennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</CONCLUSION>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nComposers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nBeethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nVienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(symphonyNo9)\nVienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nBeethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(ViennaMusicSociety)\nOrchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(ViennaMusicSociety) & Leads(beethoven,ViennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x,Conductor))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(ViennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</CONCLUSION>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(ViennaMusicSociety, beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</CONCLUSION>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) -> SymphonyNo9\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety -> Premiered(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety -> Orchestra\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) -> Leads(ViennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LeadsConductor(x))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) -> Premiered(MusicPiece(x)))\n</CONCLUSION>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(Symphony No. 9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(Beethoven) & MusicPiece(Symphony No. 9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(Symphony No. 9, Vienna Music Society)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(Vienna Music Society)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(Vienna Music Society, Beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor(x)))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, MusicPiece))\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nComposers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nBeethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nVienna Music Society premiered Symphony No. 9.\nFOL: Society(viennaMusicSociety) & MusicPiece(symphonyNo9)\nVienna Music Society is an orchestra.\nFOL: Society(viennaMusicSociety) & Orchestra(viennaMusicSociety)\nBeethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leader(beethoven & viennaMusicSociety)\nOrchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x & Conductor(x)))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(Symphony No. 9)\nComposers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nBeethoven wrote Symphony No. 9.\nFOL: Composer(Beethoven) & MusicPiece(Symphony No. 9)\nVienna Music Society premiered Symphony No. 9.\nFOL: MusicPiece(Symphony No. 9) & Premiered(Symphony No. 9, Vienna Music Society)\nVienna Music Society is an orchestra.\nFOL: Orchestra(Vienna Music Society)\nBeethoven leads the Vienna Music Society.\nFOL: Leader(Beethoven, Vienna Music Society)\nOrchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x, Conductor(x)))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, MusicPiece))\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nComposers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nBeethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nVienna Music Society premiered Symphony No. 9.\nFOL: Premiered(SymphonyNo9, ViennaMusicSociety)\nVienna Music Society is an orchestra.\nFOL: Orchestra(ViennaMusicSociety)\nBeethoven leads the Vienna Music Society.\nFOL: Leader(ViennaMusicSociety, beethoven)\nOrchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x,Conductor))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, MusicPiece))\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo.9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo.9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo.9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(ViennaMusicSociety, beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor(x)))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nComposers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nBeethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nVienna Music Society premiered Symphony No. 9.\nFOL: Orchestra(ViennaMusicSociety) & MusicPiece(SymphonyNo9)\nVienna Music Society is an orchestra.\nFOL: Orchestra(ViennaMusicSociety)\nBeethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(ViennaMusicSociety)\nOrchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nComposers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nBeethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nVienna Music Society premiered Symphony No. 9.\nFOL: Society(ViennaMusicSociety) & MusicPiece(SymphonyNo9)\nVienna Music Society is an orchestra.\nFOL: Society(ViennaMusicSociety) & Orchestra(ViennaMusicSociety)\nBeethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leader(beethoven & ViennaMusicSociety)\nOrchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x & Conductor(x)))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nComposers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nBeethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nVienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(symphonyNo9)\nVienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nBeethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(ViennaMusicSociety) & Leads(ViennaMusicSociety, beethoven)\nOrchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicSociety(ViennaMusicSociety) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: MusicSociety(ViennaMusicSociety) & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(MusicSociety(ViennaMusicSociety))\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x,Conductor))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(ViennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</CONCLUSION>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(ViennaMusicSociety, beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nComposers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nBeethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nVienna Music Society premiered Symphony No. 9.\nFOL: Premiered(SymphonyNo9, ViennaMusicSociety)\nVienna Music Society is an orchestra.\nFOL: Orchestra(ViennaMusicSociety)\nBeethoven leads the Vienna Music Society.\nFOL: Leader(beethoven, ViennaMusicSociety)\nOrchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x,Conductor))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, MusicPiece))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & ViennaMusicSociety & Leads\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x,Conductor(x)))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</CONCLUSION>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(ViennaMusicSociety) & Leads(beethoven, ViennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(ViennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</CONCLUSION>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(Symphony No. 9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(Beethoven) & MusicPiece(Symphony No. 9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(Symphony No. 9, Vienna Music Society)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(Vienna Music Society)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(Vienna Music Society, Beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor(x)))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & Premiered(x, MusicPiece))\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(Symphony No. 9)\nComposers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nBeethoven wrote Symphony No. 9.\nFOL: Composer(Beethoven) & MusicPiece(Symphony No. 9)\nVienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(Symphony No. 9)\nVienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nBeethoven leads the Vienna Music Society.\nFOL: Beethoven & Leads(ViennaMusicSociety)\nOrchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LeadsConductor(x))\n</PREMISES>\n<CONCLUSION>\nSome orchestras premiered music pieces.\nFOL: exists x. (Orchestra(x) & MusicPiece(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 31,
  "responses": [
   [
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(SymphonyNo9, ViennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(ViennaMusicSociety, beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor(x)))\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is not a conductor.\nFOL: -Leads(beethoven, Conductor)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Society(ViennaMusicSociety) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Society(ViennaMusicSociety) & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(ViennaMusicSociety, beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor))\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is not a conductor.\nFOL: -Leads(ViennaMusicSociety, beethoven)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven & Leads(ViennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x,Conductor))\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is not a conductor.\nFOL: -Leads(beethoven,Conductor)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(ViennaMusicSociety) & Leads(beethoven, ViennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor(x)))\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is not a conductor.\nFOL: -Leads(beethoven, Conductor)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(Symphony No. 9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(Beethoven) & MusicPiece(Symphony No. 9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(Symphony No. 9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Beethoven & Leads(ViennaMusicSociety, Beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LeadsConductor(x))\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\nFOL: -LeadsConductor(Beethoven)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: MusicSociety(ViennaMusicSociety) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: MusicSociety(ViennaMusicSociety) & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(MusicSociety(ViennaMusicSociety), beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor(x)))\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is not a conductor.\nFOL: -Leads(MusicSociety(ViennaMusic",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(ViennaMusicSociety) & Leader(beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x))\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\nFOL: -Leader(beethoven)\n</CONCLUSION>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Society(ViennaMusicSociety) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Society(ViennaMusicSociety) & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leader(ViennaMusicSociety, beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x, Conductor))\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is not a conductor.\nFOL: -Leader(ViennaMusicSociety, beethoven) & Leader(ViennaMusicSociety",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nComposers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nBeethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nVienna Music Society premiered Symphony No. 9.\nFOL: MusicSociety(viennaMusicSociety) & MusicPiece(symphonyNo9)\nVienna Music Society is an orchestra.\nFOL: MusicSociety(viennaMusicSociety) & Orchestra(viennaMusicSociety)\nBeethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(viennaMusicSociety, beethoven)\nOrchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor))\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\nFOL: -Leads(viennaMusicSociety, beethoven)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(ViennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(ViennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(ViennaMusicSociety, beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor))\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is not a conductor.\nFOL: -Leads(ViennaMusicSociety, beethoven)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(ViennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Society(viennaMusicSociety) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Society(viennaMusicSociety) & Orchestra(viennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(viennaMusicSociety, beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor))\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is not a conductor.\nFOL: -Leads(viennaMusicSociety, beethoven)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(ViennaMusicSociety, beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor))\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is not a conductor.\nFOL: -Leads(ViennaMusicSociety, beethoven)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(ViennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\nFOL: -Conductor(beethoven)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Symphony No. 9 is a music piece.\nFOL: MusicPiece(symphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety(society) & MusicPiece(symphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety(society) & Orchestra(society)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(society) & Leads(society)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> LeadsConductor(x))\nTEXT: Beethoven is not a conductor.\nFOL: -LeadsConductor(beethoven)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(SymphonyNo9, ViennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(ViennaMusicSociety, beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor))\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is not a conductor.\nFOL: -Leads(beethoven, Conductor)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Leads(ViennaMusicSociety, beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor(x)))\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is not a conductor.\nFOL: -Leads(ViennaMusicSociety, beethoven)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(ViennaMusicSociety) & Leads(beethoven, ViennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x,Conductor(x)))\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is not a conductor.\nFOL: -Leads(beethoven, Conductor)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(ViennaMusicSociety) & Leads(beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x))\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is not a conductor.\nFOL: -Leads(beethoven)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(beethoven) & Orchestra(ViennaMusicSociety) & Leads(beethoven, ViennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor(x)))\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is not a conductor.\nFOL: -Leads(beethoven, Conductor)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Premiered(SymphonyNo9, ViennaMusicSociety)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leads(ViennaMusicSociety, beethoven)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leads(x, Conductor))\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\nFOL: -Leads(beethoven, Conductor)\n</CONCLUSION>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(SymphonyNo9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(beethoven) & MusicPiece(SymphonyNo9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: Society(ViennaMusicSociety) & Premiered(SymphonyNo9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: Society(ViennaMusicSociety) & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Leader(beethoven) & Society(ViennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Leader(x))\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is not a conductor.\nFOL: -Leader(beethoven)\n</EVALUATE>",
    "<PREMISES>\nSymphony No. 9 is a music piece.\nFOL: MusicPiece(Symphony No. 9)\nTEXT: Composers write music pieces.\nFOL: all x. (Composer(x) -> MusicPiece(x))\nTEXT: Beethoven wrote Symphony No. 9.\nFOL: Composer(Beethoven) & MusicPiece(Symphony No. 9)\nTEXT: Vienna Music Society premiered Symphony No. 9.\nFOL: ViennaMusicSociety & MusicPiece(Symphony No. 9)\nTEXT: Vienna Music Society is an orchestra.\nFOL: ViennaMusicSociety & Orchestra(ViennaMusicSociety)\nTEXT: Beethoven leads the Vienna Music Society.\nFOL: Composer(Beethoven) & Orchestra(ViennaMusicSociety)\nTEXT: Orchestras are led by conductors.\nFOL: all x. (Orchestra(x) -> Conductor(x))\n</PREMISES>\n<CONCLUSION>\nBeethoven is not a conductor.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Beethoven is not a conductor.\nFOL: -Conductor(Beethoven)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 32,
  "responses": [
   [
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProductDesign(x) -> -Timeless(x))\neither x. (Design(x) -> TimelessDesign(x)) | (Design(x) -> TimelessDesign(kellyWearstler))\nall x. (TimelessDesign(x) -> Evocative(x))\nall x. (TimelessDesign(x) -> Dreamy(x))\nall x y. (Max(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nall x. (Max(x) -> (MassProductDesign(x) & Evocative(x)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProductDesign(x) -> -Timeless(x))\neither ZahaHadid's design style or KellyWearstler's design style\nall x. (TimelessDesign(x) -> Evocative(x))\nall x. (TimelessDesign(x) -> Dreamy(x))\nall x. ((Max(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x))))\n</PREMISES>\n<CONCLUSION>\n-MassProductDesign(Max)\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProductDesign(x) -> -Timeless(x))\neither ZahaHadidDesign(x) or KellyWearstlerDesign(x)\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nMaxDesign(x) & MassProductDesign(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProductDesign(x) -> -Timeless(x))\neither ZahaHadidDesign(x) or KellyWearstlerDesign(x)\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> Timeless(x) & MassProductDesign(x) & Evocative(x))\n</PREMISES>\n<CONCLUSION>\nMaxDesign(x) & MassProductDesign(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither ZahaHadidDesign(x) or KellyWearstlerDesign(x)\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nMaxDesign(x) & MassProductDesign(x)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProduct(x) -> -Timeless(x))\neither ZahaHadidDesign(x) or KellyWearstlerDesign(x)\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProduct(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nMaxDesign(x) & MassProduct(x)\n</CONCLUSION>",
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: -all x. (MassProductDesign(x) -> Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (MaxDesign(x) -> (MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nA design by Max is a mass product design.\nFOL: MaxDesign(x) -> MassProductDesign(x",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProduct(x) -> -Timeless(x))\nx y. (ZahaHadidDesign(x) & ZahaHadidDesign(y) & TimelessDesign(x) -> TimelessDesign(y))\nx y. (KellyWearstlerDesign(x) & KellyWearstlerDesign(y) & TimelessDesign(x) -> TimelessDesign(y))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nx. (MaxDesign(x) -> (Timeless(x) & MassProduct(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nMaxDesign(x) & MassProduct(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nMassProductDesign(MaxDesign)\n</CONCLUSION>",
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (DesignStyle(x, ZahaHadid) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: -Timeless(massProduct)\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: (DesignStyle(ZahaHadid, x) | DesignStyle(KellyWearstler, x))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (DesignStyle(x, KellyWearstler) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (DesignStyle(x, KellyWearstler) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Max(x) -> (MassProduct(x) & Evocative(x))\n</PREMISES>\n<CONCLUSION>\nA design by Max is a mass product design.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A design by"
   ],
   [
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProduct(x) -> -Timeless(x))\neither x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProduct(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nMaxDesign(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nMaxDesign(x) & MassProductDesign(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither ZahaHadidDesign(x) or KellyWearstlerDesign(x)\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nMaxDesign(x) & MassProductDesign(x)\n</CONCLUSION>",
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: MaxDesign(x) -> (MassProductDesign(x) & Evocative(x))\n</PREMISES>\n<CONCLUSION>\nA design by Max is a mass product design.\nFOL: MaxDesign(x) -> MassProductDesign(x)\n</CON",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nMassProductDesign(MaxDesign)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. ((MaxDesign(x) -> Timeless(x)) & (MaxDesign(x) -> MassProductDesign(x)) & (MaxDesign(x) -> Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nMaxDesign(x) & MassProductDesign(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither ZahaHadidDesign(x) or KellyWearstlerDesign(x)\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nMaxDesign(x) & MassProductDesign(x)\n</CONCLUSION>",
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (MaxDesign(x) -> (MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nA design by Max is a mass product design.\nFOL: MaxDesign(x) -> MassProductDesign(x)\n</CON",
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: (ZahaHadid(x) | KellyWearstler(x))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Max(x) -> (MassProduct(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nA design by Max is a mass product design.\nFOL: MassProduct(Max)\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProductDesign(x) -> -Timeless(x))\neither x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nMaxDesign(max) & MassProductDesign(max)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither ZahaHadidDesign(x) or KellyWearstlerDesign(x)\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nMaxDesign(x) & MassProductDesign(x)\n</CONCLUSION>",
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nNo mass product design is timeless.\nFOL: -MassProductDesign(x) -> Timeless(x)\nEither Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nAll of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nAll of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: MaxDesign(x) -> (MassProductDesign(x) & Evocative(x))\n</PREMISES>\n<CONCLUSION>\nA design by Max is a mass product design.\nFOL: MaxDesign(x) -> MassProductDesign(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither ZahaHadidDesign(x) or KellyWearstlerDesign(x)\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nMaxDesign(x) & MassProductDesign(x)\n</CONCLUSION>",
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProductDesign(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (MaxDesign(x) -> (MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nA design by Max is a mass product design.\nFOL: MaxDesign(x) -> MassProductDesign(x)\n</",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nall x. (MaxDesign(x) & MassProductDesign(x))\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 33,
  "responses": [
   [
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nall x. (MaxDesign(x) -> (Evocative(x) & Dreamy(x)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (DesignStyle(x, ZahaHadid) -> Timeless(x))\nall x. (-MassProduct(x) -> -Timeless(x))\neither x. (DesignStyle(x, ZahaHadid) | DesignStyle(x, KellyWearstler))\nall x. (DesignStyle(x, KellyWearstler) -> Evocative(x))\nall x. (DesignStyle(x, KellyWearstler) -> Dreamy(x))\nall x. (Max(x) -> (Timeless(x) & MassProduct(x) & Evocative(x)))\n</PREMISES>\n\n<CONCLUSION>\nall x. (Max(x) -> (Evocative(x) & Dreamy(x)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProductDesign(x) -> -Timeless(x))\neither x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. ((MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nall x. ((MaxDesign(x) -> (Evocative(x) & Dreamy(x)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProductDesign(x) -> -Timeless(x))\neither x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> Timeless(x) & MassProductDesign(x) & Evocative(x))\n</PREMISES>\n\n<CONCLUSION>\nMaxDesign(x) & Evocative(x) & Dreamy(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProductDesign(x) -> -Timeless(x))\neither ZahaHadidDesignStyle(x) | KellyWearstlerDesignStyle(x)\nall x. (KellyWearstlerDesignStyle(x) -> Evocative(x))\nall x. (KellyWearstlerDesignStyle(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nall x. (MaxDesign(x) -> (Evocative(x) & Dreamy(x)))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProductDesign(x) -> -Timeless(x))\neither x. (ZahaHadid(x) | KellyWearstler(x))\nall x. (KellyWearstler(x) -> Evocative(x))\nall x. (KellyWearstler(x) -> Dreamy(x))\nall x. (Max(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nall x. (Max(x) -> (Evocative(x) & Dreamy(x)))\n</CONCLUSION>",
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(x) | KellyWearstler(x))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (Max(x) -> (MassProduct(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nA design by Max is evocative and dreamy.\nFOL: Max(x) -> (Evocative(x) & Dreamy(x))\n</CONCLUSION",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither ZahaHadidDesign(x) or KellyWearstlerDesign(x)\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nMaxDesign(x) & Evocative(x) & Dreamy(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither ZahaHadidDesign(x) or KellyWearstlerDesign(x)\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nMaxDesign(x) & Evocative(x) & Dreamy(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProductDesign(x) -> -Timeless(x))\neither x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nall x. (MaxDesign(x) -> (Evocative(x) & Dreamy(x)))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProduct(x) -> -Timeless(x))\neither ZahaHadid'sDesignStyle(x) or KellyWearstler'sDesignStyle(x)\nall x. (KellyWearstler'sDesignStyle(x) -> Evocative(x))\nall x. (KellyWearstler'sDesignStyle(x) -> Dreamy(x))\nall x. (Max(x) -> (Timeless(x) & MassProduct(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nall x. (Max(x) -> (Evocative(x) & Dreamy(x)))\n</CONCLUSION>",
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nNo mass product design is timeless.\nFOL: -Timeless(x) | -MassProductDesign(x)\nEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadidDesign(x) | ZahaHadidDesign(y))\nAll of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nAll of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (MaxDesign(x) -> (Timeless(x) -> (MassProductDesign(x) & Evocative(x))))\n</PREMISES>\n<CONCLUSION>\nA design by Max is evocative and dreamy.\nFOL: MaxDesign(x) & Evocative(x) & Dreamy(x)\n",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither ZahaHadidDesign(x) or KellyWearstlerDesign(x)\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nMaxDesign(x) & Evocative(x) & Dreamy(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nMaxDesign(x) & Evocative(x) & Dreamy(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither x. (ZahaHadid(x) | KellyWearstler(x))\nall x. (KellyWearstler(x) -> Evocative(x))\nall x. (KellyWearstler(x) -> Dreamy(x))\nall x. (Max(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nall x. (Max(x) -> (Evocative(x) & Dreamy(x)))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither x. (Design(x) -> (TimelessDesign(x) | DesignStyle(x)))\nall x. (DesignStyle(x) -> Evocative(x))\nall x. (DesignStyle(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (TimelessDesign(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nDesign(Max) & Evocative(Max) & Dreamy(Max)\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProductDesign(x) -> -Timeless(x))\neither x. (Design(x) -> TimelessDesign(x) | Design(x) -> TimelessDesign(kellyWearstler))\nall x. (TimelessDesign(x) -> Evocative(x))\nall x. (TimelessDesign(x) -> Dreamy(x))\nall x. (Max(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nall x. (Max(x) -> (Evocative(x) & Dreamy(x)))\n</CONCLUSION>",
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadid(x) | KellyWearstler(x))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Max(x) -> (Timeless(x) -> (MassProduct(x) & Evocative(x))))\n</PREMISES>\n<CONCLUSION>\nA design by Max is evocative and dreamy.\nFOL: Max(x) -> (Evocative(x",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither x. (DesignStyle(x) -> (DesignStyle(x) | DesignStyle(kellyWearstler)))\nall x. (DesignStyle(x) -> Evocative(x))\nall x. (DesignStyle(x) -> Dreamy(x))\nall x y. (Max(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nall x y. (Max(x) -> (Evocative(x) & Dreamy(x)))\n</CONCLUSION>",
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nNo mass product design is timeless.\nFOL: -MassProductDesign(x) -> Timeless(x)\nEither Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nAll of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nAll of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: (MaxDesign(x) -> (MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nA design by Max is evocative and dreamy.\nFOL: MaxDesign(x) -> (Evocative(x) & Dreamy(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProductDesign(x) -> -Timeless(x))\neither x. (Design(x) -> (TimelessDesign(x) | Design(x)))\nall x. (Design(x) -> (Evocative(x) & Dreamy(x)))\nall x. (Design(x) -> (-MassProductDesign(x) -> (Evocative(x) & Dreamy(x))))\n</PREMISES>\n<CONCLUSION>\nall x. (Design(x) -> (Evocative(x) & Dreamy(x)))\n</CONCLUSION>",
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: (ZahaHadid(x) | KellyWearstler(x))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: Max(x) -> (Timeless(x) -> (MassProduct(x) & Evocative(x)))\n</PREMISES>\n\n<CONCLUSION>\nA design by Max is evocative and dreamy.\nFOL: Max(x) -> (Evocative(x) & Dream",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither ZahaHadidDesignStyle(x) or KellyWearstlerDesignStyle(x)\nall x. (KellyWearstlerDesignStyle(x) -> Evocative(x))\nall x. (KellyWearstlerDesignStyle(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nMaxDesign(x) & Evocative(x) & Dreamy(x)\n</CONCLUSION>",
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadidDesign(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: all x. (MassProduct(x) -> -Timeless(x))\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style.\nFOL: (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstlerDesign(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstlerDesign(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (MaxDesign(x) -> (MassProduct(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nA design by Max is evocative and dreamy.\nFOL: MaxDesign(x) -> (Evocative",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProduct(x) -> -Timeless(x))\neither x. (ZahaHadid(x) | KellyWearstler(x))\nall x. (KellyWearstler(x) -> Evocative(x))\nall x. (KellyWearstler(x) -> Dreamy(x))\nall x. (Max(x) -> (Timeless(x) & MassProduct(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nall x. (Max(x) -> (Evocative(x) & Dreamy(x)))\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 34,
  "responses": [
   [
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither x. (Design(x) -> TimelessDesign(x)) | (Design(x) -> Design(x))\nall x. (Design(x) -> Evocative(x))\nall x. (Design(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\neither x. (MaxDesign(x) -> Evocative(x)) | (MaxDesign(x) -> Dreamy(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (DesignStyle(x, zahaHadid) -> Timeless(x))\nall x. (DesignStyle(x, massProduct) -> -Timeless(x))\neither x. (DesignStyle(x, zahaHadid) | DesignStyle(x, kellyWearstler))\nall x. (DesignStyle(x, kellyWearstler) -> Evocative(x))\nall x. (DesignStyle(x, kellyWearstler) -> Dreamy(x))\nall x. (Max(x) -> (Timeless(x) & DesignStyle(x, massProduct) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\neither x. (Max(x) -> Evocative(x) | Dreamy(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProduct(x) -> -Timeless(x))\neither x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. ((MaxDesign(x) & Timeless(x)) -> (MassProduct(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\neither x. (MaxDesign(x) & Evocative(x) | MaxDesign(x) & Dreamy(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n\n<CONCLUSION>\neither x. (MaxDesign(x) & Evocative(x) | MaxDesign(x) & Dreamy(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProductDesign(x) -> -Timeless(x))\neither x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\neither x. (MaxDesign(x) -> Evocative(x) | Dreamy(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProduct(x) -> -Timeless(x))\neither x. (ZahaHadid(x) | KellyWearstler(x))\nall x. (KellyWearstler(x) -> Evocative(x))\nall x. (KellyWearstler(x) -> Dreamy(x))\nall x. (Max(x) -> (Timeless(x) & MassProduct(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\neither x. (Max(x) -> Evocative(x) | Dreamy(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProductDesign(x) -> -Timeless(x))\neither ZahaHadidDesign(x) or KellyWearstlerDesign(x)\nall x. (TimelessDesign(x) -> Evocative(x))\nall x. (TimelessDesign(x) -> Dreamy(x))\nall x. ((MaxDesign(x) -> (MassProductDesign(x) & Evocative(x))))\n</PREMISES>\n<CONCLUSION>\neither Evocative(x) or Dreamy(x)\n</CONCLUSION>",
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nNo mass product design is timeless.\nFOL: -all x. (MassProduct(x) -> Timeless(x))\nEither Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: (ZahaHadid(x) | KellyWearstler(x))\nAll of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nAll of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nIf a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Max(x) -> (Timeless(x) -> (MassProduct(x) & Evocative(x))))\n</PREMISES>\n<CONCLUSION>\nA design by Max is either evocative or dreamy.\nFOL: Max(x) -> (Evocative(x) | Dreamy(x))\n</CON",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProduct(x) -> -Timeless(x))\neither x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProduct(x) & Evocative(x)))\n</PREMISES>\n\n<CONCLUSION>\neither x. (MaxDesign(x) | Evocative(x) | Dreamy(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\neither x. (MaxDesign(x) & Evocative(x) | MaxDesign(x) & Dreamy(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProduct(x) -> -Timeless(x))\neither x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProduct(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\neither x. (MaxDesign(x) | Evocative(x) | Dreamy(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (DesignStyle(x, ZahaHadid) -> Timeless(x))\nall x. (DesignStyle(x, Max) -> MassProductDesign(x))\neither x. (DesignStyle(x, ZahaHadid) | DesignStyle(x, KellyWearstler))\nall x. (DesignStyle(x, KellyWearstler) -> Evocative(x))\nall x. (DesignStyle(x, KellyWearstler) -> Dreamy(x))\nall x. (Max(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n\n<CONCLUSION>\neither x. (Max(x) & Evocative(x) | Max(x) & Dreamy(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProductDesign(x) -> -Timeless(x))\neither ZahaHadidDesignStyle(x) or KellyWearstlerDesignStyle(x)\nall x. (KellyWearstlerDesignStyle(x) -> Evocative(x))\nall x. (KellyWearstlerDesignStyle(x) -> Dreamy(x))\nall x. ((MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x))))\n</PREMISES>\n<CONCLUSION>\neither MaxDesign(x) -> Evocative(x) or MaxDesign(x) -> Dreamy(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProductDesign(x) -> -Timeless(x))\neither ZahaHadidDesign(x) or KellyWearstlerDesign(x)\nall x. (TimelessDesign(x) -> Evocative(x))\nall x. (TimelessDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\neither MaxDesign(x) or MaxDesign(x) -> Dreamy(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProductDesign(x) -> -Timeless(x))\nall x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. ((MaxDesign(x) & Timeless(x)) -> (MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\nall x. (MaxDesign(x) -> (Evocative(x) | Dreamy(x)))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither ZahaHadid's design style or KellyWearstler's design style\nall x. (TimelessDesign(x) -> Evocative(x))\nall x. (TimelessDesign(x) -> Dreamy(x))\nall x y. (MaxDesign(x) & Timeless(x) -> (MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\na design by Max is either evocative or dreamy\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\neither x. (MaxDesign(x) | Evocative(x) | Dreamy(x))\n</CONCLUSION>",
    "<PREMISES>\nAll of Zaha Hadid's design styles are timeless.\nFOL: all x. (ZahaHadid(x) -> Timeless(x))\nTEXT: No mass product design is timeless.\nFOL: -Timeless(x)\nTEXT: Either Zaha Hadid's design style or Kelly Wearstler's design style. \nFOL: (ZahaHadid(x) | KellyWearstler(x))\nTEXT: All of Kelly Wearstler's design styles are evocative.\nFOL: all x. (KellyWearstler(x) -> Evocative(x))\nTEXT: All of Kelly Wearstler's design styles are dreamy.\nFOL: all x. (KellyWearstler(x) -> Dreamy(x))\nTEXT: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nFOL: all x. (Max(x) -> (Timeless(x) -> (MassProduct(x) & Evocative(x))))\n</PREMISES>\n<CONCLUSION>\nA design by Max is either evocative or dreamy.\nFOL: Max(x) -> (Evocative(x) | Dreamy(x))\n</",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProductDesign(x) -> -Timeless(x))\neither x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\neither x. (MaxDesign(x) -> Evocative(x) | Dreamy(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProductDesign(x) -> -Timeless(x))\neither x. (ZahaHadid(x) -> TimelessDesign(x)) or x. (KellyWearstler(x) -> TimelessDesign(x))\nall x. (KellyWearstler(x) -> Evocative(x))\nall x. (KellyWearstler(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n\n<CONCLUSION>\neither x. (MaxDesign(x) -> Evocative(x)) or x. (MaxDesign(x) -> Dreamy(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProductDesign(x) -> -Timeless(x))\neither x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n\n<CONCLUSION>\neither x. (MaxDesign(x) & Evocative(x) | MaxDesign(x) & Dreamy(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (MassProduct(x) -> -Timeless(x))\neither x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProduct(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\neither x. (MaxDesign(x) & Evocative(x) | MaxDesign(x) & Dreamy(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProductDesign(x) -> -Timeless(x))\neither x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\neither x. (MaxDesign(x) | Evocative(x) | Dreamy(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProduct(x) -> -Timeless(x))\neither ZahaHadid'sDesignStyle(x) | KellyWearstler'sDesignStyle(x)\nall x. (KellyWearstler'sDesignStyle(x) -> Evocative(x))\nall x. (KellyWearstler'sDesignStyle(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProduct(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\neither MaxDesign(x) | MaxDesign(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (TimelessDesign(x) -> Timeless(x))\nall x. (-MassProductDesign(x) -> -Timeless(x))\neither x. (ZahaHadidDesign(x) | KellyWearstlerDesign(x))\nall x. (KellyWearstlerDesign(x) -> Evocative(x))\nall x. (KellyWearstlerDesign(x) -> Dreamy(x))\nall x. (MaxDesign(x) -> (Timeless(x) & MassProductDesign(x) & Evocative(x)))\n</PREMISES>\n<CONCLUSION>\neither x. (MaxDesign(x) -> (Evocative(x) | Dreamy(x)))\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 35,
  "responses": [
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(anyone, RolandGarros2022) | MaleTennisPlayer(anyone, RolandGarros2022))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (FemaleTennisPlayer(x) & RolandGarros2022(x)) | (MaleTennisPlayer(x) & RolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafael(x))\nTEXT: If Coco Gauff is a player who",
    "<EVALUATE>\nTEXT: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (FemaleTennisPlayer(anyone, RolandGarros2022) | MaleTennisPlayer(anyone, RolandGarros2022))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafael(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(any) | MaleTennisPlayer(any))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) -> LostToRafael(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHighly(C",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(x) & RolandGarros2022(x)) | (MaleTennisPlayer(x) & RolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who"
   ],
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHigh(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHigh(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (FemaleTennisPlayer(work) & RolandGarros2022(work)) | (MaleTennisPlayer(work) & RolandGarros2022(work))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHighly(x) -> MostActive(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (FemaleTennisPlayer(x) & RolandGarros2022(x)) | (MaleTennisPlayer(x) & RolandGarros2022(x))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafael(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHigh(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHigh(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (exists x. FemaleTennisPlayer(x, RolandGarros2022) | exists x. MaleTennisPlayer(x, RolandGarros2022))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(anyone, RolandGarros2022) | MaleTennisPlayer(anyone, RolandGarros2022))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafael(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal,"
   ],
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros(x) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (FemaleTennisPlayerAtRolandGarros(x) | MaleTennisPlayerAtRolandGarros(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nall x. (RankedHighly(x) -> MostActive(x))\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nall x. (LostToIga(x) -> RankedHighly(x))\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nall x. (FemaleTennisPlayer(x) & RolandGarros2022(x) & LostToIga(x))\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \n(femaleTennisPlayer(x) & RolandGarros2022(x)) | (maleTennisPlayer(x) & RolandGarros2022(x))\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nall x. (maleTennisPlayer(x) & RolandGarros2022(x) & LostToRafael(x))\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHigh(x) -> MostActive(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHigh(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(anyone) | MaleTennisPlayer(anyone))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) -> LostToRafael(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nFOL: (RankedHigh(Coco",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (exists x. (FemaleTennisPlayer(x) & RolandGarros2022(x))) | (exists x. (MaleTennisPlayer(x) & RolandGarros2022(x)))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\n",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the"
   ],
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHighly(x) -> MostActivePlayer(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (exists x. (FemaleTennisPlayer(x) & RolandGarros2022(x))) | (exists x. (MaleTennisPlayer(x) & RolandGarros2022(x)))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafael(x))\n\nIf Coco Gauff is a player who is",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros(x) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayerAtRolandGarros(x) | MaleTennisPlayerAtRolandGarros(x))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros(x) -> LostToRafaelNadal(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (exists x. (FemaleTennisPlayer(x, RolandGarros2022) & -MaleTennisPlayer(x, RolandGarros2022)) | (exists x. (MaleTennisPlayer(x, RolandGarros2022) & -FemaleTennisPlayer(x, RolandGarros2022))))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022)",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActivePlayer(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(x) & RolandGarros2022(x)) | (MaleTennisPlayer(x) & RolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafael(x))\nTEXT: If Coco Gauff is a player who is",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(x) & RolandGarros2022(x)) | (MaleTennisPlayer(x) & RolandGarros2022(x))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) -> LostToRafael(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis"
   ],
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayerAtRolandGarros2022(anyone) | MaleTennisPlayerAtRolandGarros2022(anyone))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHigh(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHigh(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (FemaleTennisPlayer(anyone, RolandGarros2022) | MaleTennisPlayer(anyone, RolandGarros2022))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHigh(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHigh(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (exists x. (FemaleTennisPlayer(x) & RolandGarros2022(x))) | (exists x. (MaleTennisPlayer(x) & RolandGarros2022(x)))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT:",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) & LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (FemaleTennisPlayer(x) & RolandGarros2022(x)) | (MaleTennisPlayer(x) & RolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player"
   ]
  ]
 },
 {
  "index": 36,
  "responses": [
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(anyone, RolandGarros2022) | MaleTennisPlayer(anyone, RolandGarros2022))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafael(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal,",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(anyone, RolandGarros2022) | MaleTennisPlayer(anyone, RolandGarros2022))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafael(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal,",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHigh(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHigh(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: ((FemaleTennisPlayer(x, RolandGarros2022) & -MaleTennisPlayer(x, RolandGarros2022)) | (-FemaleTennisPlayer(x, RolandGarros2022) & MaleTennisPlayer(x, RolandGarros2022)))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) ->",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (FemaleTennisPlayer(x, RolandGarros2022) | MaleTennisPlayer(x, RolandGarros2022))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHigh(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHigh(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (exists x. FemaleTennisPlayer(x, RolandGarros2022)) | (exists x. MaleTennisPlayer(x, RolandGarros2022))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked"
   ],
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(anyone) & RolandGarros2022(anyone)) | (MaleTennisPlayer(anyone) & RolandGarros2022(anyone))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActivePlayer(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (exists x. FemaleTennisPlayer(x, RolandGarros2022)) | (exists x. MaleTennisPlayer(x, RolandGarros2022))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafaelNadal(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(x, RolandGarros2022) | MaleTennisPlayer(x, RolandGarros2022))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) & LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(workshop) & RolandGarros2022(workshop)) | (MaleTennisPlayer(workshop) & RolandGarros2022(workshop))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) & LostToRafael(x))\nTEXT: If Coco Gauff is a",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHigh(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHigh(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (FemaleTennisPlayer(x) & RolandGarros2022(x)) | (MaleTennisPlayer(x) & RolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafael(x))\nTEXT: If Coco Gauff is a player who is ranked"
   ],
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(anyone, RolandGarros2022) | MaleTennisPlayer(anyone, RolandGarros2022))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafaelNadal(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nad",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (-LostTo(x, IgaSwiatek) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostTo(x, IgaSwiatek))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(anyone, RolandGarros2022) | MaleTennisPlayer(anyone, RolandGarros2022))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostTo(x, RafaelNadal))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(x) & RolandGarros2022(x)) | (MaleTennisPlayer(x) & RolandGarros2022(x))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (-LostTo(IgaSwiatek(x)) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostTo(IgaSwiatek(x)))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (exists x. (FemaleTennisPlayer(x) & RolandGarros2022(x))) | (exists x. (MaleTennisPlayer(x) & RolandGarros2022(x)))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostTo(RafaelNadal(x)))\n\nIf Coco Gauff",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (exists x. FemaleTennisPlayer(x, RolandGarros2022)) | (exists x. MaleTennisPlayer(x, RolandGarros2022))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafaelNadal(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player"
   ],
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (exists x. (FemaleTennisPlayer(x, RolandGarros2022))) | (exists x. (MaleTennisPlayer(x, RolandGarros2022)))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafael(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (FemaleTennisPlayer(anyone, RolandGarros2022) | MaleTennisPlayer(anyone, RolandGarros2022))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafael(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women's",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHighly(x) -> MostActivePlayer(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (FemaleTennisPlayer(anyone, RolandGarros2022) | MaleTennisPlayer(anyone, RolandGarros2022))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHighly(x) -> MostActivePlayer(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (exists x. FemaleTennisPlayer(x, RolandGarros2022)) | (exists x. MaleTennisPlayer(x, RolandGarros2022))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActivePlayer(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(x) & RolandGarros2022(x)) | (MaleTennisPlayer(x) & RolandGarros2022(x))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafael(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a"
   ],
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHighly(x) -> MostActivePlayer(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) & LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (FemaleTennisPlayer(x) & RolandGarros2022(x)) | (MaleTennisPlayer(x) & RolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) & LostToRafael(x))\nTEXT: If Coco Gauff is a player",
    "<PREMISES>\n<PREMISE1>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\n</PREMISE1>\n<PREMISE2>\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\n</PREMISE2>\n<PREMISE3>\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\n</PREMISE3>\n<PREMISE4>\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \n</PREMISE4>\n<PREMISE5>\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\n</PREMISE5>\n<PREMISE6>\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\n</PREMISE6>\n</PREMISES>\n<CONCLUSION>\n<CONCLUSION1>\nCoco Gauff has lost to Rafael Nadal.\n</CONCLUSION",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(anyone, RolandGarros2022) | MaleTennisPlayer(anyone, RolandGarros2022))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafael(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal,",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (FemaleTennisPlayer(x) & RolandGarros2022(x)) | (MaleTennisPlayer(x) & RolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(anyone, RolandGarros2022) | MaleTennisPlayer(anyone, RolandGarros2022))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafaelNadal(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nad"
   ]
  ]
 },
 {
  "index": 37,
  "responses": [
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(x) & RolandGarros2022(x)) | (MaleTennisPlayer(x) & RolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (exists x. FemaleTennisPlayer(x, RolandGarros2022)) | (exists x. MaleTennisPlayer(x, RolandGarros2022))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafaelNadal(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (exists x. FemaleTennisPlayer(x, RolandGarros2022)) | (exists x. MaleTennisPlayer(x, RolandGarros2022))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActivePlayer(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(x) & RolandGarros2022(x)) | (MaleTennisPlayer(x) & RolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActivePlayer(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(any) & RolandGarros2022(any)) | (MaleTennisPlayer(any) & RolandGarros2022(any))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association"
   ],
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (FemaleTennisPlayer(anyone, RolandGarros2022) | MaleTennisPlayer(anyone, RolandGarros2022))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActivePlayer(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(anyone) & RolandGarros2022(anyone)) | (MaleTennisPlayer(anyone) & RolandGarros2022(anyone))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafael(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (FemaleTennisPlayer(x) & RolandGarros2022(x)) | (MaleTennisPlayer(x) & RolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (FemaleTennisPlayer(anyone) & RolandGarros2022(anyone)) | (MaleTennisPlayer(anyone) & RolandGarros2022(anyone))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafael(x))\nTEXT: If Coco Gauff",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActivePlayer(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost"
   ],
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHigh(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHigh(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) & LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(x) & RolandGarros2022(x)) | (MaleTennisPlayer(x) & RolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) & LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (FemaleTennisPlayer(x) & RolandGarros2022(x)) | (MaleTennisPlayer(x) & RolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) & LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActivePlayer(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(anyone, RolandGarros2022) | MaleTennisPlayer(anyone, RolandGarros2022))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the Women",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (-LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (exists x. FemaleTennisPlayer(x, RolandGarros2022)) | (exists x. MaleTennisPlayer(x, RolandGarros2022))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafael(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHighly(x) -> MostActivePlayer(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x, RolandGarros2022) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (exists x. FemaleTennisPlayer(x, RolandGarros2022)) | (exists x. MaleTennisPlayer(x, RolandGarros2022))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x, RolandGarros2022) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player"
   ],
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayerAtRolandGarros2022(x) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayerAtRolandGarros2022(x) | MaleTennisPlayerAtRolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayerAtRolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked highly by the",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHigh(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHigh(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(x) & RolandGarros2022(x)) | (MaleTennisPlayer(x) & RolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Gauff is a player who is ranked",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (FemaleTennisPlayer(workshop) & RolandGarros2022(workshop)) | (MaleTennisPlayer(workshop) & RolandGarros2022(workshop))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(anyone) & RolandGarros2022(anyone)) | (MaleTennisPlayer(anyone) & RolandGarros2022(anyone))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafael(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) & LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (FemaleTennisPlayer(anyone) & RolandGarros2022(anyone)) | (MaleTennisPlayer(anyone) & RolandGarros2022(anyone))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafaelNadal(x))\nTEXT: If Coco Ga"
   ],
   [
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\n\nEveryone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\n\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) & LostToIga(x))\n\nEither female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(x) & RolandGarros2022(x)) | (MaleTennisPlayer(x) & RolandGarros2022(x))\n\nAll male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) & LostToRafael(x))\n\nIf Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) & LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (FemaleTennisPlayer(any) & RolandGarros2022(any)) | (MaleTennisPlayer(any) & RolandGarros2022(any))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafael(x))\nTEXT: If Coco Gauff is a player who",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. ((LostTo(IgaSwiatek(x)) & RankedHighly(x)) -> True)\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & LostTo(IgaSwiatek(x)) -> True)\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \nFOL: (FemaleTennisPlayer(any) & RolandGarros2022(any)) | (MaleTennisPlayer(any) & RolandGarros2022(any))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostTo(RafaelNadal(x)))\nTEXT: If Coco",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) & LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(x) & RolandGarros2022(x)) | (MaleTennisPlayer(x) & RolandGarros2022(x))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafael(x))\nTEXT: If Coco Gauff is a player who is ranked",
    "<PREMISES>\nIf a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\nFOL: all x. (RankedHighly(x) -> MostActive(x))\nTEXT: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\nFOL: all x. (LostToIga(x) -> RankedHighly(x))\nTEXT: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nFOL: all x. (FemaleTennisPlayer(x) & RolandGarros2022(x) -> LostToIga(x))\nTEXT: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\nFOL: (FemaleTennisPlayer(workshop) & RolandGarros2022(workshop)) | (MaleTennisPlayer(workshop) & RolandGarros2022(workshop))\nTEXT: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\nFOL: all x. (MaleTennisPlayer(x) & RolandGarros2022(x) -> LostToRafael(x))\nTEXT: If Coco Gauff is a"
   ]
  ]
 },
 {
  "index": 38,
  "responses": [
   [
    "<PREMISES>\nAll cats are mammals.\nSome pets are not mammals.\n</PREMISES>\n<CONCLUSION>\nNo pets are cats.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: -Pet(Cat)\n</EVALUATE>",
    "<PREMISES>\nall x. (Cat(x) -> Mammal(x))\nexists x. (-Mammal(x) & Pet(x))\n</PREMISES>\n\n<CONCLUSION>\n-All x. (Pet(x) & Cat(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Cat(x) -> Mammal(x))\nexists x. (-Mammal(x) & Pet(x))\n</PREMISES>\n<CONCLUSION>\n-All x. (Pet(x) & Cat(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Mammal(x) -> Cat(x))\nexists x. (-Mammal(x) & Pet(x))\n</PREMISES>\n<CONCLUSION>\n-All x. (Pet(x) & Cat(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Cat(x) -> Mammal(x))\nexists x. (-Mammal(x) & Pet(x))\n</PREMISES>\n<CONCLUSION>\n-All x. (Pet(x) & Cat(x))\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (-Mammal(x) & Pet(x))\nTEXT: No pets are cats.\nFOL: -Pet(cat)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: -Pet(cat)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: -Pet(cat)\n</EVALUATE>",
    "<PREMISES>\nall x. (Cat(x) -> Mammal(x))\nexists x. (-Mammal(x) & Pet(x))\n</PREMISES>\n\n<CONCLUSION>\n-All x. (Pet(x) & Cat(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: -Pet(cat)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: -Pet(cat)\n</EVALUATE>",
    "<PREMISES>\nall x. (Cat(x) -> Mammal(x))\nexists x. (-Mammal(x) & Pet(x))\n</PREMISES>\n<CONCLUSION>\n-All x. (Pet(x) & Cat(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Mammal(x) -> Cat(x))\nexists x. (-Mammal(x) & Pet(x))\n</PREMISES>\n<CONCLUSION>\n-All x. (Pet(x) -> Cat(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Cat(x) -> Mammal(x))\nexists x. (-Mammal(x) & Pet(x))\n</PREMISES>\n<CONCLUSION>\n-All x. (Pet(x) & Cat(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: -Pet(cat)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nall x. (Cat(x) -> Mammal(x))\nexists x. (-Mammal(x) & Pet(x))\n</PREMISES>\n<CONCLUSION>\n-All x. (Pet(x) & Cat(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: -Pet(Cat)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: -Pet(cats)\n</EVALUATE>",
    "<PREMISES>\nall x. (Cat(x) -> Mammal(x))\nexists x. (-Mammal(x) & Pet(x))\n</PREMISES>\n\n<CONCLUSION>\n-All x. (Cat(x) & Pet(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Cat(x) -> Mammal(x))\nexists x. (-Mammal(x) & Pet(x))\n</PREMISES>\n<CONCLUSION>\n-All x. (Pet(x) & Cat(x))\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: -Pet(cat)\n</EVALUATE>",
    "<PREMISES>\nall x. (Cat(x) -> Mammal(x))\nexists x. (-Mammal(x) & Pet(x))\n</PREMISES>\n<CONCLUSION>\n-All x. (Pet(x) & Cat(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: -Pet(cat)\n</EVALUATE>",
    "<PREMISES>\nall x. (Cat(x) -> Mammal(x))\nexists x. (-Mammal(x) & Pet(x))\n</PREMISES>\n<CONCLUSION>\n-All x. (Pet(x) & Cat(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All cats are mammals.\nFOL: all x. (Cat(x) -> Mammal(x))\nTEXT: Some pets are not mammals.\nFOL: exists x. (Pet(x) & -Mammal(x))\nTEXT: No pets are cats.\nFOL: -Pet(Cat)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 39,
  "responses": [
   [
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x) & {x: Spring, Summer, Fall, Winter})\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= Summer\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james) = Summer\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: FourSeasons = {Spring, Summer, Fall, Winter}\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(Emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(Mia) = -Summer\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(James)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(James) = Summer\n</EVALUATE>",
    "<PREMISES>\n[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: exists x. (Season(x) & FourSeasons(x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) -> Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia) -> -Summer\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\n</PREMISES>\n<CONCLUSION>\nJames's favorite season is summer.\nFOL: FavoriteSeason(james) -> Summer\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x) & {x: Spring, Summer, Fall, Winter})\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -FavoriteSeason(mia) = FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james) = Summer\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x) = Spring(x) | Season(x) = Summer(x) | Season(x) = Fall(x) | Season(x) = Winter(x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Vacation(x) & WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(Emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(Mia)!= FavoriteSeason(Emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(James)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(James) = Summer\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. Season(x)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james) = Summer\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x) & (x = Spring) | (x = Summer) | (x = Fall) | (x = Winter)))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (VacationLong(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: VacationLong(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james) = Summer\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: fourSeasons(x) = {Spring, Summer, Fall, Winter}\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia) = {s | s!= Summer}\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james) = Summer\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. Season(x)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james) = Summer\n</EVALUATE>",
    "<PREMISES>\n[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x) = Spring & Season(x) = Summer & Season(x) = Fall & Season(x) = Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\n</PREMISES>\n<CONCLUSION>\nJames's favorite season is summer.\nFOL: FavoriteSeason(james) = Summer\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x) = Spring & Season(x) = Summer & Season(x) = Fall & Season(x) = Winter)\nTEXT: All students who want to have a long vacation"
   ],
   [
    "<PREMISES>\n[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x) = Spring(x) | Season(x) = Summer(x) | Season(x) = Fall(x) | Season(x) = Winter(x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\n</PREMISES>\n<CONCLUSION>\nJames's favorite season is summer.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james) = Summer\n</EVALUATE>",
    "<PREMISES>\n[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. Season(x)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\n</PREMISES>\n<CONCLUSION>\nJames's favorite season is summer.\nFOL: FavoriteSeason(james) = Summer\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x) & {x: Spring, Summer, Fall, Winter})\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= Summer\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james) = Summer\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: FourSeasons(spring, summer, fall, winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LovesSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia, -summer)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, summer)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: FourSeasons(x) & (x = Spring | x = Summer | x = Fall | x = Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james) = Summer\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. Season(x)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (VacationLong(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) -> Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia) -> -Summer\nTEXT: James wants to have a long vacation.\nFOL: VacationLong(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james) -> Summer\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. Season(x) & {x: Spring, Summer, Fall, Winter}\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james) = Summer\n</EVALUATE>",
    "<PREMISES>\n[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia, -Summer)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\n</PREMISES>\n<CONCLUSION>\n[BG] James's favorite season is summer.\nFOL: FavoriteSeason(james, Summer)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: exists x. (Season(x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, Summer)\nTEXT: Mia",
    "<PREMISES>\n[BG]\nEVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: Four(x) & Season(x) <-| x \u2208 {Spring, Summer, Fall, Winter}}\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(Emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(Mia) \u2260 FavoriteSeason(Emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(James)\n</EVALUATE>\n\n<CONCLUSION>\nEVALUATE>\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(James) = Summer\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: FourSeasons(x) & (x = Spring | x = Summer | x = Fall | x = Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> (LoveSummer(x) & MostLoveSummer(x)))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(Emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(Mia)!= FavoriteSeason(Emma)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(James)\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(James) = Summer\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> exists y. (y & y!= x & y!= x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> (LoveSummer(x) & -LoveOtherSeason(x)))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james) = Summer\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x) = Spring & x = 1) | (Season(x) = Summer & x = 2) | (Season(x) = Fall & x = 3) | (Season(x) = Winter & x = 4)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james) = Summer\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x) = Spring & Season(x) = Summer & Season(x) = Fall & Season(x) = Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james) = Summer\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x) = Spring(x) | Season(x) = Summer(x) | Season(x) = Fall(x) | Season(x) = Winter(x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james) = Summer\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: FourSeasons(spring) & FourSeasons(summer) & FourSeasons(fall) & FourSeasons(winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (VacationLong(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma, summer)\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -FavoriteSeason(mia, summer)\nTEXT: James wants to have a long vacation.\nFOL: VacationLong(james)\nTEXT: James's favorite season is summer.\nFOL: FavoriteSeason(james, summer)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 40,
  "responses": [
   [
    "<PREMISES>\n[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: exists x. (Season(x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LovesSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\n</PREMISES>\n<CONCLUSION>\nMia's favorite season is spring.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: exists x. (Season(x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LovesSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same",
    "<EVALUATE>\nTEXT: [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x) = Spring(x) | Season(x) = Summer(x) | Season(x) = Fall(x) | Season(x) = Winter(x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(Emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(Mia)!= FavoriteSeason(Emma)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(James)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(Mia) = Spring\n</EVALUATE>",
    "<PREMISES>\n[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: all x. (Season(x) -> 4 = {x})\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= Summer\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\n</PREMISES>\n<CONCLUSION>\nMia's favorite season is spring.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= Summer\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia) = Spring\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. Season(x)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia) = -Summer\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia) = Spring\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x) = Spring(x) | Season(x) = Summer(x) | Season(x) = Fall(x) | Season(x) = Winter(x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia) = Spring\n</EVALUATE>"
   ],
   [
    "<PREMISES>\n[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: fourSeasons(x) := {Spring, Summer, Fall, Winter}\nFOL: all x. (x in fourSeasons(x) -> True)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Student(x) & WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) := Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameFavoriteSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\n</PREMISES>\n<CONCLUSION>\nMia's favorite season is spring.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameFavoriteSeason(mia, emma)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia) := Spring\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. Season(x) & {x: Spring, Summer, Fall, Winter}\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameFavoriteSeason(emma, mia)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia) = Spring\n</EVALUATE>",
    "<PREMISES>\n[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. Season(x)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Vacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= Summer\nTEXT: James wants to have a long vacation.\nFOL: Vacation(james)\n</PREMISES>\n<CONCLUSION>\nMia's favorite season is spring.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Vacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL:",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x) & (x = Spring) | (x = Summer) | (x = Fall) | (x = Winter)))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia) = Spring\n</EVALUATE>",
    "<PREMISES>\n[BG]\n<TEXT>There are four seasons in a year: Spring, Summer, Fall, and Winter.</TEXT>\n<FOL>four x. (Season(x) = Spring(x) | Season(x) = Summer(x) | Season(x) = Fall(x) | Season(x) = Winter(x))\n</FOL>\n<TEXT>All students who want to have a long vacation love summer the most.</TEXT>\n<FOL>all x. (LongVacation(x) -> LoveSummer(x))\n</FOL>\n<TEXT>Emma's favorite season is summer.</TEXT>\n<FOL>FavoriteSeason(Emma) = Summer\n</FOL>\n<TEXT>Mia's favorite season is not the same as Emma's.</TEXT>\n<FOL>Mia's FavoriteSeason!= Emma's FavoriteSeason\n</FOL>\n<TEXT>James wants to have a long vacation.</TEXT>\n<FOL>James LongVacation\n</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Mia's favorite season is spring.</TEXT>\n<FOL>Mia's FavoriteSeason = Spring\n</FOL>\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer"
   ],
   [
    "<PREMISES>\n[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: exists x. (Season(x) & Four(x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia) = ~FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\n</PREMISES>\n<CONCLUSION>\nMia's favorite season is spring.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: exists x. (Season(x) & Four(x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x) & (x = Spring) | (x = Summer) | (x = Fall) | (x = Winter)))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia) = Spring\n</EVALUATE>",
    "<PREMISES>\n[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: exists x. (Season(x) & FourSeasons(x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (WantLongVacation(x) -> LovesSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -FavoriteSeason(emma) = FavoriteSeason(mia)\nTEXT: James wants to have a long vacation.\nFOL: WantLongVacation(james)\n</PREMISES>\n<CONCLUSION>\n[MIA]\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia) = Spring\n</CONCLUSION>",
    "<PREMISES>\n[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x) = Spring(x) | Season(x) = Summer(x) | Season(x) = Fall(x) | Season(x) = Winter(x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (VacationLength(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: VacationLength(james) = Long\n</PREMISES>\n<CONCLUSION>\nMia's favorite season is spring.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x) = Spring(x)",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x) = Spring(x) | Season(x) = Summer(x) | Season(x) = Fall(x) | Season(x) = Winter(x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> (Season(x) = Summer(x) & MostLoved(x, Season(x))))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia) = Spring\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x) = Spring(x) | Season(x) = Summer(x) | Season(x) = Fall(x) | Season(x) = Winter(x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia) = Spring\n</EVALUATE>",
    "<PREMISES>\n[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. Season(x)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (VacationLong(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: VacationLong(james)\n</PREMISES>\n<CONCLUSION>\n[MIA]\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia) = Spring\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x) = Spring(x) | Season(x) = Summer(x) | Season(x) = Fall(x) | Season(x) = Winter(x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia) = Spring\n</EVALUATE>",
    "<PREMISES>\n[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x) = Spring or Season(x) = Summer or Season(x) = Fall or Season(x) = Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\n</PREMISES>\n<CONCLUSION>\nMia's favorite season is spring.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x) = Spring or Season(x) = Summer or Season(x) =",
    "<PREMISES>\n[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. Season(x)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Vacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: Vacation(james)\n</PREMISES>\n<CONCLUSION>\nMia's favorite season is spring.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. Season(x)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (Vacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nF"
   ],
   [
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: fourSeasons = {Spring, Summer, Fall, Winter}\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia) = -Summer\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia) = Spring\n</EVALUATE>",
    "<PREMISES>\n[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: exists x. (Season(x) & FourSeasons(x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LovesSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: -SameFavoriteSeason(mia, emma)\nTEXT: James wants to have a long vacation.\nFOL: WantsLongVacation(james)\n</PREMISES>\n<CONCLUSION>\nMia's favorite season is spring.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: exists x. (Season(x) & FourSeasons(x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x.",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: FourSeasons = {Spring, Summer, Fall, Winter}\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(Emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's. \nFOL: FavoriteSeason(Mia)!= FavoriteSeason(Emma)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(James)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(Mia) = Spring\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x) = Spring & Season(x) = Summer & Season(x) = Fall & Season(x) = Winter)\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia) = Spring\n</EVALUATE>",
    "<EVALUATE>\nTEXT: There are four seasons in a year: Spring, Summer, Fall, and Winter.\nFOL: four x. (Season(x) = Spring(x) | Season(x) = Summer(x) | Season(x) = Fall(x) | Season(x) = Winter(x))\nTEXT: All students who want to have a long vacation love summer the most.\nFOL: all x. (LongVacation(x) -> LoveSummer(x))\nTEXT: Emma's favorite season is summer.\nFOL: FavoriteSeason(emma) = Summer\nTEXT: Mia's favorite season is not the same as Emma's.\nFOL: FavoriteSeason(mia)!= FavoriteSeason(emma)\nTEXT: James wants to have a long vacation.\nFOL: LongVacation(james)\nTEXT: Mia's favorite season is spring.\nFOL: FavoriteSeason(mia) = Spring\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 41,
  "responses": [
   [
    "<PREMISES>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>",
    "<PREMISES>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\nTEXT: 1984 is printed text.\nFOL: HardcoverBook(1984) -> PrintedText(1984)\n</CONCLUSION>",
    "<PREMISES>\nall x. (DigitalMedia(x) -> -Analog(x))\nall x. (PrintedText(x) -> Analog(x))\nall x. (StreamingService(x) -> DigitalMedia(x))\n(x y. (HardcoverBook(x) & PrintedText(y) -> PrintedText(y))\n(x. (1984 StreamingService(x) -> HardcoverBook(1984))\n</PREMISES>\n<CONCLUSION>\nPrintedText(1984)\n</CONCLUSION>",
    "<PREMISES>\nall x. (DigitalMedia(x) -> -Analog(x))\nall x. (PrintedText(x) -> Analog(x))\nall x. (StreamingService(x) -> DigitalMedia(x))\n(x y. (HardcoverBook(x) & PrintedText(y) -> PrintedText(y))\n(x. (1984 & StreamingService(x) -> HardcoverBook(x))\n</PREMISES>\n<CONCLUSION>\nPrintedText(1984)\n</CONCLUSION>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (Analog(x) -> PrintedText(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\nTEXT: 1984 is printed text.\nFOL: HardcoverBook(1984) -> PrintedText(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: 1984 is printed text.\nFOL: HardcoverBook(1984) -> PrintedText(1984)\n</EVALUATE>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (Analog(x) -> PrintedText(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>",
    "<PREMISES>\nall x. (DigitalMedia(x) -> -Analog(x))\nall x. (PrintedText(x) -> Analog(x))\nall x. (StreamingService(x) -> DigitalMedia(x))\n(x y. (HardcoverBook(x) & PrintedText(y) -> PrintedText(y))\n(x. (StreamingService(x) -> HardcoverBook(x)))\n</PREMISES>\n<CONCLUSION>\nPrintedText(1984)\n</CONCLUSION>",
    "<PREMISES>\nall x. (-DigitalMedia(x) -> Analog(x))\nall x. (PrintedText(x) -> Analog(x))\nall x. (DigitalService(x) -> DigitalMedia(x))\n(x:Book & PrintedText(x) -> Analog(x))\n(x:1984 & DigitalService(x) -> HardCoverBook(x))\n</PREMISES>\n<CONCLUSION>\n(x:1984 & DigitalService(x) -> PrintedText(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (DigitalMedia(x) -> -Analog(x))\nall x. (PrintedText(x) -> Analog(x))\nall x. (StreamingService(x) -> DigitalMedia(x))\n(all x. (HardcoverBook(x) -> PrintedText(x)) & (StreamingService(1984) -> HardcoverBook(1984)))\n</PREMISES>\n<CONCLUSION>\nPrintedText(1984)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n\n<CONCLUSION>\n1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>",
    "<PREMISES>\nall x. (DigitalMedia(x) -> -Analog(x))\nall x. (PrintedText(x) -> Analog(x))\nall x. (StreamingService(x) -> DigitalMedia(x))\n(x y. (HardcoverBook(x) & PrintedText(y) -> Analog(y))\n(y. (StreamingService(y) -> HardcoverBook(y)))\n</PREMISES>\n<CONCLUSION>\nPrintedText(1984)\n</CONCLUSION>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (Analog(x) -> PrintedText(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n\n<CONCLUSION>\n1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (DigitalMedia(x) -> -Analog(x))\nall x. (PrintedText(x) -> Analog(x))\nall x. (StreamingService(x) -> DigitalMedia(x))\n(x y. (HardcoverBook(x) & PrintedText(y) -> PrintedText(y))\n(y. (StreamingService(y) -> HardcoverBook(y)))\n</PREMISES>\n<CONCLUSION>\nPrintedText(1984)\n</CONCLUSION>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>",
    "<PREMISES>\nall x. (-DigitalMedia(x) -> Analog(x))\nall x. (PrintedText(x) -> Analog(x))\nall x. (StreamingService(x) -> DigitalMedia(x))\nall x. (HardcoverBook(x) -> PrintedText(x))\nall x. (StreamingService(x) -> HardcoverBook(x))\n</PREMISES>\n<CONCLUSION>\nPrintedText(1984)\n</CONCLUSION>",
    "<PREMISES>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>",
    "<PREMISES>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (Printed(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> Printed(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\nTEXT: 1984 is printed text.\nFOL: Printed(1984)\n</CONCLUSION>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>",
    "<PREMISES>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\nTEXT: 1984 is printed text.\nFOL: PrintedText(1984)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 42,
  "responses": [
   [
    "<PREMISES>\nall x. (-DigitalMedia(x) -> Analog(x))\nall x. (PrintedText(x) -> Analog(x))\nall x. (DigitalService(x) -> DigitalMedia(x))\n(all x. (HardcoverBook(x) -> PrintedText(x))\n(all x. (StreamingService(x) -> HardcoverBook(x)))\n</PREMISES>\n<CONCLUSION>\n-DigitalService(1984)\n</CONCLUSION>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (Analog(x) -> PrintedText(x))\nAll streaming services are digital.\nFOL: all x. (Digital(x) -> StreamingService(x))\nIf an object is a hardcover book then it is printed text.\nFOL: (Hardcover(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> Hardcover(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nall x. (-DigitalMedia(x) -> Analog(x))\nall x. (PrintedText(x) -> Analog(x))\nall x. (DigitalService(x) -> DigitalMedia(x))\n(all x. (HardcoverBook(x) -> PrintedText(x)) & (1984 -> HardcoverBook(1984)))\n(1984 -> DigitalService(1984))\n</PREMISES>\n<CONCLUSION>\nDigitalService(1984)\n</CONCLUSION>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nall x. (DigitalMedia(x) -> -Analog(x))\nall x. (PrintedText(x) -> Analog(x))\nall x. (StreamingService(x) -> DigitalMedia(x))\nall x. (HardcoverBook(x) -> PrintedText(x))\nall x. (StreamingService(x) -> HardcoverBook(x))\n</PREMISES>\n<CONCLUSION>\n-StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nall x. (-DigitalMedia(x) -> Analog(x))\nall x. (PrintedText(x) -> Analog(x))\nall x. (DigitalMedia(x) -> Digital(x))\nall x. (HardcoverBook(x) -> PrintedText(x))\nall x. (StreamingService(x) -> HardcoverBook(x))\n</PREMISES>\n<CONCLUSION>\nStreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (Analog(x) -> PrintedText(x))\nAll streaming services are digital.\nFOL: all x. (Digital(x) -> StreamingService(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (DigitalMedia(x) -> -Analog(x))\nall x. (PrintedText(x) -> Analog(x))\nall x. (StreamingService(x) -> DigitalMedia(x))\nall x. (HardcoverBook(x) -> PrintedText(x))\nall x. (StreamingService(x) -> HardcoverBook(x))\n</PREMISES>\n<CONCLUSION>\nStreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nall x. (DigitalMedia(x) -> -Analog(x))\nall x. (PrintedText(x) -> Analog(x))\nall x. (StreamingService(x) -> DigitalMedia(x))\n(x y. (HardcoverBook(x) & PrintedText(y) -> PrintedText(y))\n(x. (1984 & StreamingService(x) -> HardcoverBook(x))\n</PREMISES>\n<CONCLUSION>\nStreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nall x. (DigitalMedia(x) -> -Analog(x))\nall x. (PrintedText(x) -> Analog(x))\nall x. (StreamingService(x) -> DigitalMedia(x))\n(x:Book & PrintedText(x) -> HardCover(x))\n(x:Book & HardCover(x) -> PrintedText(x))\n(x:Book & PrintedText(x) -> HardCover(x))\n(x:Book & StreamingService(x) -> HardCover(x))\n</PREMISES>\n<CONCLUSION>\n(x:Book & HardCover(x) & StreamingService(x)) \n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (Analog(x) -> PrintedText(x))\nAll streaming services are digital.\nFOL: all x. (Digital(x) -> StreamingService(x))\nIf an object is a hardcover book then it is printed text.\nFOL: (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\nTEXT: 1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nall x. (-DigitalMedia(x) -> Analog(x))\nall x. (Analog(x) -> PrintedText(x))\nall x. (DigitalMedia(x) -> Digital(x))\n(x y. (HardcoverBook(x) & PrintedText(x) -> PrintedText(y))\n(x. (1984 & DigitalMedia(x) -> HardcoverBook(x))\n</PREMISES>\n<CONCLUSION>\n(x. (1984 & DigitalMedia(x) -> StreamingService(x))\n</CONCLUSION>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nIf an object is a hardcover book then it is printed text.\nFOL: (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is a streaming service.\nFOL: StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nall x. (-DigitalMedia(x) -> Analog(x))\nall x. (PrintedText(x) -> Analog(x))\nall x. (DigitalMedia(x) -> Digital(x))\n(x y. (HardcoverBook(x) & x -> PrintedText(x)))\n(x. (1984 -> DigitalMedia(x)) -> (1984 -> HardcoverBook(x)))\n</PREMISES>\n<CONCLUSION>\n(x. (1984 -> StreamingService(x)) -> (1984 -> HardcoverBook(x)))\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 43,
  "responses": [
   [
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nall x. (DigitalMedia(x) -> -Analog(x))\nall x. (PrintedText(x) -> Analog(x))\nall x. (StreamingService(x) -> DigitalMedia(x))\n(x:Book & PrintedText(x) -> HardCoverBook(x))\n(x:Book & HardCoverBook(x) -> PrintedText(x))\n(x:Book & StreamingService(x) -> HardCoverBook(x))\n</PREMISES>\n<CONCLUSION>\n-StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (Analog(x) -> PrintedText(x))\nAll streaming services are digital.\nFOL: all x. (Digital(x) -> StreamingService(x))\nIf an object is a hardcover book then it is printed text.\nFOL: (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (DigitalMedia(x) -> -Analog(x))\nall x. (PrintedText(x) -> Analog(x))\nall x. (DigitalService(x) -> DigitalMedia(x))\nall x. ((Book(x) & PrintedText(x)) -> PrintedText(x))\nall x. (1984(x) -> (StreamingService(x) -> Book(x)))\n</PREMISES>\n<CONCLUSION>\n-StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital",
    "<PREMISES>\nall x. (DigitalMedia(x) -> Analog(x))\nall x. (Analog(x) -> PrintedText(x))\nall x. (StreamingService(x) -> DigitalMedia(x))\nall x. (HardcoverBook(x) -> PrintedText(x))\nall x. (StreamingService(x) -> HardcoverBook(x))\n</PREMISES>\n<CONCLUSION>\n-StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (Printed(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (Digital(x) -> StreamingService(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (Hardcover(x) -> Printed(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> Hardcover(1984)\n</PREMISES>\n<CONCLUSION>\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (Printed(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (Digital(x) -> StreamingService(x))\nTEXT: If",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nTEXT: If an object is a hardcover book"
   ],
   [
    "<PREMISES>\nall x. (DigitalMedia(x) -> -Analog(x))\nall x. (PrintedText(x) -> Analog(x))\nall x. (DigitalService(x) -> DigitalMedia(x))\n(x y. (HardcoverBook(x) & PrintedText(y) -> Analog(y))\n(x. (StreamingService(x) -> HardcoverBook(x)))\n</PREMISES>\n<CONCLUSION>\n(x. (StreamingService(x) -> -HardcoverBook(x)))\n</CONCLUSION>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (Printed(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (Hardcover(x) -> Printed(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> Hardcover(1984)\n</PREMISES>\n<CONCLUSION>\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (Printed(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nTEXT: If"
   ],
   [
    "<PREMISES>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital",
    "<PREMISES>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital",
    "<PREMISES>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital",
    "<PREMISES>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (DigitalMedia(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (Analog(x) -> PrintedText(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> DigitalMedia(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nIf an object is a hardcover book then it is printed text.\nFOL: (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (Printed(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> Printed(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (Printed(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nTEXT",
    "<PREMISES>\nNo digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nEvery printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nAll streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nIf an object is a hardcover book then it is printed text.\nFOL: all x. (HardcoverBook(x) -> PrintedText(x))\nIf 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\n1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>",
    "<PREMISES>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nTEXT: If an object is a hardcover book then it is printed text.\nFOL: (HardcoverBook(x) -> PrintedText(x))\nTEXT: If 1984 is a streaming service, then 1984 is a hardcover book.\nFOL: StreamingService(1984) -> HardcoverBook(1984)\n</PREMISES>\n<CONCLUSION>\nTEXT: 1984 is not a streaming service.\nFOL: -StreamingService(1984)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No digital media are analog.\nFOL: all x. (Digital(x) -> -Analog(x))\nTEXT: Every printed text is analog.\nFOL: all x. (PrintedText(x) -> Analog(x))\nTEXT: All streaming services are digital.\nFOL: all x. (StreamingService(x) -> Digital(x))\nTEXT"
   ]
  ]
 },
 {
  "index": 44,
  "responses": [
   [
    "<PREMISES>\nAll Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) -> Family(x)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (Family(x) & Family(y) & x!= y -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish & RomanceLanguage(x) & RomanceLanguage(y)\nTEXT: German is related to Spanish.\nFOL: German & Spanish & Related(x, y)\nTEXT: Basque is not related to any other language.\nFOL: Basque & x!= y -> -Related(x, y)\n</PREMISES>\n<CONCLUSION>\nBasque is a Romance language.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) -> Family(x)\nTEXT: All languages within a language family are related to each other.\nF",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (Language(x) & LanguageFamily(y) -> Related(x, y)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\n-IndoEuropean(basque)\nLanguageFamily(RomanceLanguages)\nall x. (Language(x) & LanguageFamily(x) -> Related(x, x))\nRomanceLanguage(french) & RomanceLanguage(spanish)\nRelated(german, spanish)\n-Related(basque, x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nall x. (LanguageFamily(x) -> RomanceLanguages(x))\nall x. (x y. (x y) -> Related(x, y))\nFrench(x) & Spanish(x)\nGerman(x) & Spanish(x)\nBasque(x) & -Related(Basque(y), y)\n</PREMISES>\n<CONCLUSION>\nall x. (Basque(x) -> RomanceLanguage(x))\n</CONCLUSION>",
    "<PREMISES>\nAll Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) -> LanguageFamily(x)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & LanguageFamily(y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish & RomanceLanguage(x) & RomanceLanguage(y)\nTEXT: German is related to Spanish.\nFOL: German & Spanish & Related(x, y)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\n</PREMISES>\n<CONCLUSION>\nBasque is a Romance language.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) -> LanguageFamily(x)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (y in x -> Related(y, y)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nBasque is a Romance language.\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (y in x -> related(y, y)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\n-IndoEuropean(basque) & RomanceLanguage(basque)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (y in x -> RelatedToEachOther(y, y)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nBasque is a Romance language.\n</CONCLUSION>",
    "<PREMISES>\nAll Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) -> Family(x)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (Family(x) & Family(y) & x!= y -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish\nTEXT: German is related to Spanish.\nFOL: German & Spanish\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\n</PREMISES>\n<CONCLUSION>\nBasque is a Romance language.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) -> Family(x)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (Family(x) & Family(y) & x!= y ->",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nTheRomanceLanguages(x) = TheLanguageFamily(x)\nall x. (x in TheLanguageFamily(x) -> RelatedToEachOther(x))\nFrench(x) & Spanish(x) = RomanceLanguage(x)\nGerman(x) & Spanish(x) = RelatedToEachOther(x)\nBasque(x) = -RelatedToAnyOtherLanguage(x)\n</PREMISES>\n<CONCLUSION>\nBasque(x) = RomanceLanguage(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (y in x -> related(x, y)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (y in x -> related(x, y)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\nBasque is a Romance language.\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nTheRomanceLanguages(x)\nall x. (RelatedToEachOther(x) -> (x & y))\nFrench & Spanish\nGerman & Spanish\nBasque\n</PREMISES>\n<CONCLUSION>\n-RelatedToAnyLanguage(basque)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nTheRomanceLanguages(x)\nall x. (x in TheRomanceLanguages & x in LanguageFamily(x) -> RelatedToEachOther(x))\nFrench(x) & Spanish(x) in TheRomanceLanguages\nGerman(x) in LanguageFamily(x) & Spanish(x) in LanguageFamily(x)\nBasque(x) in LanguageFamily(x) & -RelatedToAny(x)\n</PREMISES>\n<CONCLUSION>\nBasque(x) in TheRomanceLanguages\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nall x. (RomanceLanguage(x) -> LanguageFamily(x))\nall x. (LanguageFamily(x) -> RelatedToEachOther(x))\nFrench & Spanish\nGerman & Spanish\nBasque\n</PREMISES>\n<CONCLUSION>\n-RelatedToEachOther(basque, French)\n-RelatedToEachOther(basque, Spanish)\n-RelatedToEachOther(basque, German)\n-IndoEuropean(basque)\n-RelatedToEachOther(basque, RomanceLanguage)\n-RelatedToEachOther(RomanceLanguage, RomanceLanguage)\n-RelatedToEachOther(RomanceLanguage, RomanceLanguage)\n-RelatedToEachOther(RomanceLanguage, RomanceLanguage)\n-RelatedToEachOther(RomanceLanguage, RomanceLanguage)\n-RelatedToEachOther(RomanceLanguage, RomanceLanguage)\n-RelatedToEachOther(RomanceLanguage, RomanceLanguage)\n-RelatedToEachOther(RomanceLanguage, RomanceLanguage)\n-RelatedToEachOther(RomanceLanguage, RomanceLanguage)\n-RelatedToEachOther(RomanceLanguage, RomanceLanguage)\n-RelatedToEachOther(RomanceLanguage, RomanceLanguage)\n-RelatedTo",
    "<PREMISES>\nall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (Language(x) & LanguageFamily(y) -> Related(x, y)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nBasque is a Romance language.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (Language(x) & LanguageFamily(y) -> Related(x, y)))\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish & RomanceLanguage(French) & RomanceLanguage(Spanish)\nTEXT: German is related to Spanish.\nFOL: German & Spanish & Related(German, Spanish)\nTEXT: Basque is not related to",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (y in x -> RelatedToEachOther(y, x)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nall x. (Basque in x -> RomanceLanguage(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nall x. (RomanceLanguage(x) -> LanguageFamily(x))\nall x. (LanguageFamily(x) -> RelatedToEachOther(x))\nFrench & Spanish\nGerman & Spanish\nBasque\n</PREMISES>\n<CONCLUSION>\n-RelatedToEachOther(Basque, Spanish) & RelatedToEachOther(Basque, French) & RelatedToEachOther(Basque, German) & RomanceLanguage(Basque)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (y in x -> related(y, x)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nall x. (Basque in x -> RomanceLanguage(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (y in x -> related(y, y)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nBasque is a Romance language.\n</CONCLUSION>",
    "<PREMISES>\nall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (y in x -> RelatedToEachOther(y, y)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\n-IndoEuropeanLanguage(basque)\nall x. (RomanceLanguage(x) -> RelatedToEachOther(x, x))\n-RelatedToEachOther(basque, basque)\nall x. (RomanceLanguage(x) -> RelatedToEachOther(x, basque))\nRelatedToEachOther(basque, french)\nRelatedToEachOther(basque, spanish)\nall x. (RomanceLanguage(x) -> RelatedToEachOther(x, spanish))\nRelatedToEachOther(spanish, german)\nall x. (RomanceLanguage(x) -> Basque)\nBasque\n</CONCLUSION>",
    "<PREMISES>\nAll Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) -> LanguageFamily(x)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & LanguageFamily(y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish & RomanceLanguage(x)\nTEXT: German is related to Spanish.\nFOL: German & Spanish & Related(x, y)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\n</PREMISES>\n<CONCLUSION>\nBasque is a Romance language.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) -> LanguageFamily(x)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x"
   ],
   [
    "<PREMISES>\nall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTheRomanceLanguages(x)\nall x. (LanguageFamily(x) -> all y. (y in x -> RelatedToEachOther(y, x)))\nFrench(x) & Spanish(x)\nGerman(x) & Spanish(x)\nBasque(x) & -RelatedToAnyOtherLanguage(x)\n</PREMISES>\n<CONCLUSION>\nall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTheRomanceLanguages(x)\nall x. (LanguageFamily(x) -> all y. (y in x -> RelatedToEachOther(y, x)))\nFrench(x) & Spanish(x)\nGerman(x) & Spanish(x)\nBasque(x) & -RelatedToAnyOtherLanguage(x)\nBasque(x) is a Romance language.\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nTheRomanceLanguages(x)\nall x. (RelatedToEachOther(x) -> LanguageFamily(x))\nFrench(x) & Spanish(x)\nRelatedToEachOther(Spanish(x), German(x))\nBasque(x) & -RelatedToAnyLanguage(x)\n</PREMISES>\n<CONCLUSION>\n-IndoEuropean(Basque) & RomanceLanguage(Basque)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nTheRomanceLanguages(x)\nall x. (RelatedToEachOther(x) -> (LanguageFamily(x) & LanguageFamily(y) & x = y))\nFrench(x) & Spanish(x)\nGerman(x) & Spanish(x)\nBasque(x) & -RelatedToAnyOtherLanguage(x)\n</PREMISES>\n<CONCLUSION>\nBasque(x) & RomanceLanguage(x)\n</CONCLUSION>",
    "<PREMISES>\nAll Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) -> LanguageFamily(x)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & LanguageFamily(y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish\nTEXT: German is related to Spanish.\nFOL: German & Spanish\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\n</PREMISES>\n<CONCLUSION>\nBasque is a Romance language.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) -> LanguageFamily(x)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & LanguageFamily(y) -> Related(x",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nall x. (LanguageFamily(x) -> RomanceLanguages(x))\nall x y. (LanguageFamily(x) & LanguageFamily(y) & Related(x, y) -> x = y)\nFrench & Spanish\nGerman & Spanish\nBasque & -Related(Basque, Spanish)\n</PREMISES>\n<CONCLUSION>\n-Basque & RomanceLanguage(Basque)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 45,
  "responses": [
   [
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (y in x -> Related(y, y)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nGerman is a Romance language.\n</CONCLUSION>",
    "<PREMISES>\nAll Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) -> LanguageFamily(x)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & LanguageFamily(y) & x!= y -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\n</PREMISES>\n<CONCLUSION>\nGerman is a Romance language.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) -> LanguageFamily(x)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y.",
    "<PREMISES>\nAll Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) | RomanceLanguage(y) -> Related(x, y)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (x -> all y. (y -> x))\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish\nTEXT: German is related to Spanish.\nFOL: German & Spanish\nTEXT: Basque is not related to any other language.\nFOL: -Related(Basque, x)\n</PREMISES>\n<CONCLUSION>\nGerman is a Romance language.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) | RomanceLanguage(y) -> Related(x, y)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (x -> all y. (y ->",
    "<PREMISES>\nAll Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) | RomanceLanguage(y) -> Related(x, y)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (x -> all y. (y -> x))\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish\nTEXT: German is related to Spanish.\nFOL: German & Spanish\nTEXT: Basque is not related to any other language.\nFOL: -Basque & x\n</PREMISES>\n<CONCLUSION>\nGerman is a Romance language.\n</CONCLUSION>\n<FOL: German & RomanceLanguage(x) -> x</FOL>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nall x. (RomanceLanguage(x) -> LanguageFamily(x))\nall x y. (LanguageFamily(x) & LanguageFamily(y) & Related(x, y))\nFrench(x) & Spanish(x)\nGerman(x) & Spanish(x)\nBasque(x) & -Related(x,?)\n</PREMISES>\n<CONCLUSION>\nGerman(x) & RomanceLanguage(x)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (y in x -> RelatedToEachOther(y, x)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nGerman is a Romance language.\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nall x. (RomanceLanguage(x) -> LanguageFamily(x))\nall x. (x & y & LanguageFamily(x) & LanguageFamily(y) -> RelatedToEachOther(x, y))\nFrench & Spanish\nGerman & Spanish\nBasque\n</PREMISES>\n<CONCLUSION>\n-IndoEuropean(german) & RomanceLanguage(german)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (y in x -> RelatedToEachOther(y, x)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nGerman is a Romance language.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropean(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (y in x -> RelatedToEachOther(y, x)))\nTEXT: French and Spanish are both Romance languages.\nFOL: French in RomanceLanguages & Spanish in RomanceLanguages\nTEXT: German is related to Spanish.\nFOL: GermanRelatedToSpanish\nTEXT: Basque is not related to any other language.\nFOL: -RelatedToAnyLanguage(Basque)\nTEXT:",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nall x. (RomanceLanguage(x) -> LanguageFamily(x))\nall x. (x y. (LanguageFamily(x) & LanguageFamily(y) & Related(x, y)) -> Related(x, y))\nFrench(x) & Spanish(x)\nGerman(x) & Related(x, Spanish(x))\nBasque(x) & -Related(x, y)\n</PREMISES>\n<CONCLUSION>\nGerman(x) & RomanceLanguage(x)\n</CONCLUSION>",
    "<PREMISES>\nAll Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) | RomanceLanguage(y) -> RelatedToEachOther(x, y)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (y in x -> RelatedToEachOther(y, x)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: GermanRelatedToSpanish\nTEXT: Basque is not related to any other language.\nFOL: -RelatedToAnyLanguage(basque)\n</PREMISES>\n<CONCLUSION>\nGerman is a Romance language.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: German is a Romance language.\nFOL: German -> RomanceLanguage\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nAll Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) | RomanceLanguage(y) -> RelatedToEachOther(x, y)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (y \u2208 x -> RelatedToEachOther(y, x)))\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish \u2208 RomanceLanguage\nTEXT: German is related to Spanish.\nFOL: RelatedToEachOther(German, Spanish)\nTEXT: Basque is not related to any other language.\nFOL: -RelatedToEachOther(Basque, x)\n</PREMISES>\n<CONCLUSION>\nGerman is a Romance language.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) | RomanceLanguage(y) -> RelatedToEachOther(x, y)\nTEXT",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nTheRomanceLanguages(x)\nall x. (x y. (x y & y x) -> Related(x, y))\nFrench(x) & Spanish(x)\nGerman(x) & Related(x, Spanish(x))\nBasque(x) & -Related(x, y)\n</PREMISES>\n<CONCLUSION>\nGerman(x) & RomanceLanguage(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nTheRomanceLanguages(x)\nall x. (RelatedToEachOther(x) -> (x & y))\nFrench & Spanish\nGerman & Spanish\nBasque\n</PREMISES>\n<CONCLUSION>\nGerman & RomanceLanguage\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropean(x))\nTEXT: The Romance languages are a language family.\nFOL: TheRomanceLanguages(x)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (RelatedToEachOther(x) -> (x & y))\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish\nTEXT: German is related to Spanish.\nFOL: German & Spanish\nTEXT: Basque\nFOL: -RelatedToEachOther(basque)\nTEXT: German is a Romance language.\nFOL: German & RomanceLanguage\n</EVALUATE>",
    "<PREMISES>\nAll Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) -> FamilyLanguage(x)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (FamilyLanguage(x) & FamilyLanguage(y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish & RomanceLanguage(x)\nTEXT: German is related to Spanish.\nFOL: German & Spanish & Related(x, y)\nTEXT: Basque is not related to any other language.\nFOL: -Basque & Related(x, y)\n</PREMISES>\n<CONCLUSION>\nGerman is a Romance language.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) -> FamilyLanguage(x)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (FamilyLanguage(x",
    "<PREMISES>\nAll Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) -> LanguageFamily(x)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & LanguageFamily(y) & x!= y -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish\nTEXT: German is related to Spanish.\nFOL: German & Spanish\nTEXT: Basque is not related to any other language.\nFOL: -Basque & -x & Related(x, Basque)\n</PREMISES>\n<CONCLUSION>\nGerman is a Romance language.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) -> LanguageFamily(x)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x)"
   ],
   [
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (y in x -> Related(y, y)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nGerman is a Romance language.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropean(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (y in x -> Related(y, y)))\nTEXT: French and Spanish are both Romance languages.\nFOL: French in RomanceLanguages & Spanish in RomanceLanguages\nTEXT: German is related to Spanish.\nFOL: Related(German, Spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(Basque, x)\nTEXT: German is a Romance language.\n",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nall x. (RomanceLanguage(x) -> LanguageFamily(x))\nall x. (x y. (LanguageFamily(x) & LanguageFamily(y) & Related(x, y)))\nFrench & Spanish : RomanceLanguage\nGerman & Spanish : Related\nBasque : -Related\n</PREMISES>\n<CONCLUSION>\nGerman & RomanceLanguage\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nTheRomanceLanguages(x)\nall x. (LanguageFamily(x) -> all y. (y in x -> Related(x, y)))\nFrench(x) & Spanish(x)\nRelated(German, Spanish)\nnot Related(Basque, any)\n</PREMISES>\n<CONCLUSION>\nIndoEuropean(German) & RomanceLanguage(German)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (y in x -> Related(y, x)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nGerman is a Romance language.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropean(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (y in x -> Related(y, x)))\nTEXT: French and Spanish are both Romance languages.\nFOL: French in RomanceLanguages & Spanish in RomanceLanguages\nTEXT: German is related to Spanish.\nFOL: Related(German, Spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(Basque, anyLanguage)\nTEXT: German is a Romance language",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (Language(x) & LanguageFamily(y) -> Related(x, y)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nGerman is a Romance language.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropean(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (Language(x) & LanguageFamily(y) -> Related(x, y)))\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish\nTEXT: German is related to Spanish.\nFOL: Related(German, Spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(Basque, x)\nTEXT: German is"
   ],
   [
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (y in x -> Related(y, y)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nGerman is a Romance language.\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nTheRomanceLanguages(x) & TheLanguageFamily(x)\nall x. (x & y. (LanguageFamily(x) & LanguageFamily(y) -> RelatedToEachOther(x, y))\nFrench(x) & Spanish(x)\nGerman(x) & Spanish(x)\nBasque(x) & -RelatedToAnyOtherLanguage(x)\n</PREMISES>\n<CONCLUSION>\nGerman(x) & RomanceLanguage(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (y in x -> RelatedToEachOther(y, x)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nGerman is a Romance language.\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nall x. (LanguageFamily(x) -> RomanceLanguages(x))\nall x. (x y. (LanguageFamily(x) & LanguageFamily(y) & Related(x, y)) -> Related(x, y))\nFrench(x) & Spanish(x)\nRelated(German, Spanish)\nnot Related(Basque, any)\n</PREMISES>\n<CONCLUSION>\nIndoEuropean(German) & RomanceLanguage(German)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nall x. (LanguageFamily(x) -> RomanceLanguage(x))\nall x y. (LanguageFamily(x) & LanguageFamily(y) & Related(x, y) -> x = y)\nFrench & Spanish\nRelated(Spanish, German)\n-not Related(Basque,?)\n</PREMISES>\n<CONCLUSION>\n-IndoEuropean(German) & LanguageFamily(German) & Spanish & Related(German, Spanish) & RomanceLanguage(German)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 46,
  "responses": [
   [
    "<PREMISES>\nall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTheRomanceLanguages(x)\nall x. (x -> RelatedTo(x))\nFrench(x) & Spanish(x)\nGerman(x) & Spanish(x)\nBasque(x) & -RelatedTo(x)\n</PREMISES>\n<CONCLUSION>\nIndoEuropeanLanguage(French)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (y in x -> Related(y, y)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\n-IndoEuropean(french)\n</CONCLUSION>",
    "<PREMISES>\nAll Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) -> FamilyLanguage(x)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (FamilyLanguage(x) & FamilyLanguage(y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\n</PREMISES>\n<CONCLUSION>\nFrench is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (y in x -> Related(y, y)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nFrench is an IndoEuropean language.\n</CONCLUSION>",
    "<PREMISES>\nall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTheRomanceLanguages(x)\nall x. (x y. (LanguageFamily(x) & LanguageFamily(y) -> Related(x, y)))\nFrench(x) & Spanish(x)\nGerman(x) & Spanish(x)\nBasque(x) & -Related(x, y)\n</PREMISES>\n<CONCLUSION>\nIndoEuropeanLanguage(French)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (y in x -> RelatedToEachOther(y, y)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nFrench is an IndoEuropean language.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropean(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(romanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (y in x -> RelatedToEachOther(y, y)))\nTEXT: French and Spanish are both Romance languages.\nFOL: French in romanceLanguages & Spanish in romanceLanguages\nTEXT: German is related to Spanish.\nFOL: RelatedToEachOther(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -RelatedToAnyLanguage(b",
    "<PREMISES>\nAll Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) | RomanceLanguage(y) | -IndoEuropeanLanguage(x) | -IndoEuropeanLanguage(y)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (RomanceLanguage(x) & RomanceLanguage(y) & -IndoEuropeanLanguage(x) & -IndoEuropeanLanguage(y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish\nTEXT: German is related to Spanish.\nFOL: German & Spanish\nTEXT: Basque is not related to any other language.\nFOL: -Basque & -Related(Basque, x)\n</PREMISES>\n<CONCLUSION>\nFrench is an Indo-European language.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) | Romance",
    "<PREMISES>\nAll Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) | RomanceLanguage(y) -> Related(x, y)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (x | y -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\n</PREMISES>\n<CONCLUSION>\nFrench is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (y in x -> related(y)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nIndoEuropean(french)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> relatedToEachOther(x))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nIndoEuropean(french)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) -> Family(x)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (Family(x) & Family(y) & x!= y -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\n</PREMISES>\n<CONCLUSION>\nFrench is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</CONCLUSION>",
    "<PREMISES>\nAll Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) | RomanceLanguage(y) -> Related(x, y)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> all y. (LanguageFamily(x) & LanguageFamily(y) -> Related(x, y)))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\n</PREMISES>\n<CONCLUSION>\nFrench is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</CONCLUSION>",
    "<PREMISES>\nAll Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) | RomanceLanguage(y) -> Related(x, y)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (x | y) -> Related(x, y)\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish\nTEXT: German is related to Spanish.\nFOL: German & Spanish\nTEXT: Basque is not related to any other language.\nFOL: -Related(Basque, x)\n</PREMISES>\n<CONCLUSION>\nFrench is an Indo-European language.\nFOL: French & IndoEuropeanLanguage(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (Language(y) -> Related(x, y)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nIndoEuropeanLanguage(french)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> all y. (Language(y) -> Related(x, y)))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nIndoEuropean(french)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) -> Family(x)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (Family(x) & Family(y) & x!= y -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\n</PREMISES>\n<CONCLUSION>\nFrench is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</CONCLUSION>",
    "<PREMISES>\nAll Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) -> LanguageFamily(x)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & LanguageFamily(y) & x!= y -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\n</PREMISES>\n<CONCLUSION>\nFrench is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nall x. (RomanceLanguage(x) -> LanguageFamily(x))\nall x. (x y. (LanguageFamily(x) & LanguageFamily(y) & Related(x, y)) -> Related(x, y))\nFrench(x) & Spanish(x)\nGerman(x) & Related(German(x), Spanish(x))\n-Related(Basque(x), x)\n</PREMISES>\n<CONCLUSION>\nIndoEuropean(french)\n</CONCLUSION>",
    "<PREMISES>\nAll Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) -> FamilyLanguage(x)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (FamilyLanguage(x) & FamilyLanguage(y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish & RomanceLanguage(x)\nTEXT: German is related to Spanish.\nFOL: German & Spanish & Related(x, y)\nTEXT: Basque is not related to any other language.\nFOL: Basque & -Related(x, y)\n</PREMISES>\n<CONCLUSION>\nFrench is an Indo-European language.\nFOL: French & IndoEuropeanLanguage(x)\n</CONCLUSION>",
    "<PREMISES>\nAll Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) -> LanguageFamily(x)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (LanguageFamily(x) & LanguageFamily(y) & x!= y -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: RomanceLanguage(french) & RomanceLanguage(spanish)\nTEXT: German is related to Spanish.\nFOL: Related(german, spanish)\nTEXT: Basque is not related to any other language.\nFOL: -Related(basque, x)\n</PREMISES>\n<CONCLUSION>\nFrench is an Indo-European language.\nFOL: IndoEuropeanLanguage(french)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTEXT: The Romance languages are a language family.\nFOL: RomanceLanguage(x) -> FamilyLanguage(x)\nTEXT: All languages within a language family are related to each other.\nFOL: all x y. (FamilyLanguage(x) & FamilyLanguage(y) -> Related(x, y))\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish\nTEXT: German is related to Spanish.\nFOL: German & Spanish\nTEXT: Basque is not related to any other language.\nFOL: -Basque & -Related(Basque, x)\n</PREMISES>\n<CONCLUSION>\nFrench is an Indo-European language.\nFOL: French & IndoEuropeanLanguage(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTheRomanceLanguages(x) & -IndoEuropeanLanguage(x)\nall x. (RelatedToEachOther(x) -> x = x)\nFrench(x) & Spanish(x)\nRelatedToEachOther(x) & German(x) & Spanish(x)\n-RelatedToAny(x, y)\n</PREMISES>\n<CONCLUSION>\nIndoEuropeanLanguage(x) & French(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nall x. (RomanceLanguage(x) -> LanguageFamily(x))\nall x y. (LanguageFamily(x) & LanguageFamily(y) & Related(x, y))\nFrench & Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nFrench is an Indo-European language.\n</CONCLUSION>",
    "<PREMISES>\nall x. (RomanceLanguage(x) -> IndoEuropeanLanguage(x))\nTheRomanceLanguages(x)\nall x. (LanguageFamily(x) -> all y. (y in x -> RelatedToEachOther(y, x)))\nFrench(x) & Spanish(x)\nGerman(x) & Spanish(x)\nBasque(x) & -RelatedToAnyLanguage(x)\n</PREMISES>\n<CONCLUSION>\nIndoEuropeanLanguage(French)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IndoEuropean(x) -> RomanceLanguage(x))\nThe Romance languages are a language family.\nall x. (LanguageFamily(x) -> related(x))\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</PREMISES>\n<CONCLUSION>\nFrench is an Indo-European language.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All Romance languages are Indo-European languages.\nFOL: all x. (RomanceLanguage(x) -> IndoEuropean(x))\nTEXT: The Romance languages are a language family.\nFOL: LanguageFamily(RomanceLanguages)\nTEXT: All languages within a language family are related to each other.\nFOL: all x. (LanguageFamily(x) -> related(x))\nTEXT: French and Spanish are both Romance languages.\nFOL: French & Spanish\nTEXT: German is related to Spanish.\nFOL: related(German, Spanish)\nTEXT: Basque is not related to any other language.\nFOL: -related(Basque, x)\nTEXT: French is an Indo-European language.\nFOL: IndoEuropean(French)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 47,
  "responses": [
   [
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lawandowski)\n[BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nRobert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lawandowski)\n[BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a soccer player.\nFOL: Striker(lawandowski) & SoccerPlayer(lawandowski)\n</CONCLUSION>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: -PlayedFor(lewandowski, bayernmunchen)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & -PlayedFor(x, y) & PlayedFor(y, x) -> LeftTeam(x, y))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a soccer player.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(lewandowski)\nTEXT: Robert Lewandowski is a soccer player.\nFOL: True\n</EVALUATE>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\n[BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nRobert Lewandowski left Bayern Munchen.\nFOL: -Left BayernMunchen(lewandowski)\n[BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a soccer player.\nFOL: Striker(lewandowski) & SoccerPlayer(lewandowski)\n</CONCLUSION>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\n[BG]\nFOL: Striker(x) -> SoccerPlayer(x)\nRobert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\n[BG]\nFOL: -Left(x) -> -SoccerPlayer(x)\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a soccer player.\nFOL: SoccerPlayer(lewandowski)\n</CONCLUSION>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\n[BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nRobert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\n[BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> -PlayFor(x))\n</PREMISES>\n\n<CONCLUSION>\nRobert Lewandowski is a soccer player.\nFOL: SoccerPlayer(lewandowski)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\n[BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nRobert Lewandowski left Bayern Munchen.\nFOL: -LeftBayernMunchen(lewandowski)\n[BG] If a player left a team they no longer play for that team.\nFOL: all x y. (Left(x, y) -> -PlayFor(x, y))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a soccer player.\nFOL: Striker(lewandowski) & SoccerPlayer(lewandowski)\n</CONCLUSION>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lawandowski)\n[BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nRobert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lawandowski)\n[BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a soccer player.\nFOL: Striker(lawandowski) & all x. (Striker(x) -> SoccerPlayer(x))\n</CONCLUSION>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\n[BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nRobert Lewandowski left Bayern Munchen.\nFOL: -Team(lewandowski, bayern-munchen)\n[BG] If a player left a team they no longer play for that team.\nFOL: all x y. (Team(x, y) & -Team(x, y) -> -PlayFor(x, y))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a soccer player.\nFOL: Striker(lewandowski) & SoccerPlayer(lewandowski)\n</CONCLUSION>",
    "<PREMISES>\n<ARGUMENT>\nRobert Lewandowski is a striker.\nFOL: Striker(lwandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lwandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\n</ARGUMENT>\n</PREMISES>\n<CONCLUSION>\n<ARGUMENT>\n<ARGUMENT>\nRobert Lewandowski is a striker.\nFOL: Striker(lwandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lwandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(lwand",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lawandowski)\n[BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nRobert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lawandowski)\n[BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a soccer player.\nFOL: SoccerPlayer(lawandowski)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\n[BG] Strikers are soccer players.\nFOL: Striker(x) -> SoccerPlayer(x)\nRobert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\n[BG] If a player left a team they no longer play for that team.\nFOL: LeftTeam(x) -> -PlayFor(x)\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a soccer player.\nFOL: SoccerPlayer(lewandowski)\n</CONCLUSION>",
    "<PREMISES>\n<bg>Robert Lewandowski is a striker.</bg>\n<bg>Strikers are soccer players.</bg>\n<bg>Robert Lewandowski left Bayern Munchen.</bg>\n<bg>If a player left a team they no longer play for that team.</bg>\n</PREMISES>\n<CONCLUSION>\n<bg>Robert Lewandowski is a soccer player.</bg>\n</CONCLUSION>\n\n<EVALUATE>\n<bg>Robert Lewandowski is a striker.</bg>\n<bg>FOL: Striker(Lewandowski)</bg>\n<bg>Strikers are soccer players.</bg>\n<bg>FOL: all x. (Striker(x) -> SoccerPlayer(x))</bg>\n<bg>Robert Lewandowski left Bayern Munchen.</bg>\n<bg>FOL: LeftTeam(Lewandowski, BayernMunchen)</bg>\n<bg>If a player left a team they no longer play for that team.</bg>\n<bg>FOL: all x y. (Player(x) & LeftTeam(x, y) -> -PlayFor(x, y))</bg>\n</PREMISES>\n<bg>Robert Lewandowski is a soccer player.</",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Player(x) & LeftTeam(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a soccer player.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(lewandowski)\n</EVALUATE>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (Player(x) & LeftTeam(x) & -PlayFor(x) -> -Team(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a soccer player.\nFOL: SoccerPlayer(lewandowski)\n</CONCLUSION>",
    "<PREMISES>\n<ARGUMENT>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\n</ARGUMENT>\n<CONCLUSION>\n<ARGUMENT>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\n</ARGUMENT>\n<CONCLUSION>\nFOL: PlayFor(lewandowski)\n</CON"
   ],
   [
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\n[BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nRobert Lewandowski left Bayern Munchen.\nFOL: -LeftBayernMunchen(lewandowski)\n[BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a soccer player.\nFOL: Striker(lewandowski) & SoccerPlayer(lewandowski)\n</CONCLUSION>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\n[BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nRobert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\n[BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a soccer player.\nFOL: SoccerPlayer(lewandowski)\n</CONCLUSION>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lawandowski)\n[BG]\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\nRobert Lewandowski left Bayern Munchen.\nFOL: LeftBayern(lawandowski)\n[BG]\nFOL: all x. (Left(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a soccer player.\nFOL: SoccerPlayer(lawandowski)\n</CONCLUSION>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lawandowski)\n[BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nRobert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lawandowski)\n[BG] If a player left a team they no longer play for that team.\nFOL: all x y. (Left(x, y) -> -PlayFor(x, y))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a soccer player.\nFOL: Striker(lawandowski) & SoccerPlayer(lawandowski)\n</CONCLUSION>",
    "<PREMISES>\n<evaluatemode=\"out\">\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\n</evaluatemode=\"out>\n</PREMISES>\n<CONCLUSION>\n<evaluatemode=\"out\">\nRobert Lewandowski is a soccer player.\nFOL: SoccerPlayer(lewandowski)\n</evaluatemode=\"out>\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\n<BG>\nRobert Lewandowski is a striker.\n</BG>\n<BG>\nStrikers are soccer players.\n</BG>\nRobert Lewandowski left Bayern Munchen.\n<BG>\nIf a player left a team they no longer play for that team.\n</BG>\n</PREMISES>\n<CONCLUSION>\n<BG>\nRobert Lewandowski is a soccer player.\n</BG>\n</CONCLUSION>\n\n<EVALUATE>\n<BG>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: -PlayForBayernMunchen(lewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\n</BG>\n<BG>\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(lewandowski)\n</BG>\n</EVALUATE>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a soccer player.\nFOL: SoccerPlayer(lewandowski)\n</CONCLUSION>",
    "<PREMISES>\n<BG> Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: Lewandowski(leftBayernMunchen)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & Player(y) & Left(x, y) -> -PlayFor(x, y))\n</PREMISES>\n<CONCLUSION>\n<BG> Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(lewandowski)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: Lewandowski(leftBayernMunchen)\nTEXT: Robert Lewandowski is a soccer player.\nFOL: SoccerPlayer(lewandowski)\n</",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\n[BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nRobert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\n[BG] If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & Left(x, y) & -PlayFor(y) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a soccer player.\nFOL: SoccerPlayer(lewandowski)\n</EVALUATE>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: Lewandowski left(bayern-munchen)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & Player(y) & -PlayFor(x, y) & Left(x, y) -> -PlayFor(x, y))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a soccer player.\nFOL: SoccerPlayer(lewandowski)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 48,
  "responses": [
   [
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\n[BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nRobert Lewandowski left Bayern Munchen.\nFOL: -PlayedFor(bayernMunchen)(lewandowski)\n[BG] If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & Player(y) & PlayedFor(x, y) & -PlayedFor(y, x) -> LeftTeam(x, y))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski plays for Bayern Munchen.\nFOL: PlayedFor(bayernMunchen)(lewandowski)\n</EVALUATE>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: Lewandowski(leftBayernMunchen)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski plays for Bayern Munchen.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: Lewandowski(leftBayernMunchen)\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(lewandowski, bayernMunchen)\n</EVALUATE>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x y. (SoccerPlayer(x) & Left(x, y) & -PlayFor(y, x) -> -PlayFor(y, x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(bayernMunchen, lewandowski)\n</CONCLUSION>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\n[BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nRobert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\n[BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(lewandowski, bayernmunchen)\n</EVALUATE>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\n[BG] Strikers are soccer players.\nFOL: Striker(x) -> SoccerPlayer(x)\nRobert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\n[BG] If a player left a team they no longer play for that team.\nFOL: LeftTeam(x) -> -PlayFor(x)\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(lewandowski, bayernmunchen)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(lewandowski, bayernmunchen)\n</EVALUATE>",
    "<PREMISES>\n<BG>\nRobert Lewandowski is a striker.\n</BG>\n<BG>\nStrikers are soccer players.\n</BG>\n<BG>\nRobert Lewandowski left Bayern Munchen.\n</BG>\n<BG>\nIf a player left a team they no longer play for that team.\n</BG>\n</PREMISES>\n<CONCLUSION>\n<BG>\nRobert Lewandowski plays for Bayern Munchen.\n</BG>\n</CONCLUSION>\n\n<EVALUATE>\n<BG>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: -PlayFor(BayernMunchen, lewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x, x))\n</BG>\n<BG>\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(BayernMunchen, lewandowski)\n</BG>\n</",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\n[BG]\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nRobert Lewandowski left Bayern Munchen.\nFOL: Lewandowski left Bayern Munchen\n[BG]\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski plays for Bayern Munchen.\nFOL: -Lewandowski left Bayern Munchen\n</CONCLUSION>",
    "<PREMISES>\n<BG>\nRobert Lewandowski is a striker.\n</BG>\n<BG>\nStrikers are soccer players.\n</BG>\n<BG>\nRobert Lewandowski left Bayern Munchen.\n</BG>\n<BG>\nIf a player left a team they no longer play for that team.\n</BG>\n</PREMISES>\n<CONCLUSION>\n<BG>\nRobert Lewandowski plays for Bayern Munchen.\n</BG>\n</CONCLUSION>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lawandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lawandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & Left(x, y) & -PlayFor(x, y) -> -PlayFor(y, x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski plays for Bayern Munchen.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lawandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lawandowski)\nTEXT: If a player left a team they"
   ],
   [
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\n[BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nRobert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\n[BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(lewandowski, bayernmunchen)\n</CONCLUSION>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: [BG] SoccerPlayer(x) | x = striker(x)\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(lewandowski, bayernmunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & Player(y) & Left(x, y) & -PlayFor(x, y) -> -SoccerPlayer(x))\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(lewandowski, bayernmunchen)\n</EVALUATE>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\n[BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nRobert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\n[BG] If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(lewandowski, bayernmunchen)\n</CONCLUSION>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: Lewandowski(leftBayernMunchen)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & Left(x, y) & -PlayFor(x, y) -> -SoccerPlayer(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(lewandowski, bayernMunchen)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(lewandowski, bayernmunchen)\n</CONCLUSION>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lawandowski)\n[BG]\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\nRobert Lewandowski left Bayern Munchen.\nFOL: -BayernMunchen(lawandowski)\n[BG]\nFOL: all x. (SoccerPlayer(x) & BayernMunchen(x) -> LeftTeam(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski plays for Bayern Munchen.\nFOL: BayernMunchen(lawandowski)\n</CONCLUSION>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x y. (Left(x, y) -> -PlayFor(x, y))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(lewandowski, bayernmunchen)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT:",
    "<PREMISES>\n<evaluate>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: Striker(x) <- SoccerPlayer(x)\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: -PlayForTeam(x) <- LeftTeam(x)\n</evaluate>\n</PREMISES>\n<CONCLUSION>\n<evaluate>\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayForTeam(lewandowski, bayernmunchen)\n</evaluate>\n</CONCLUSION>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: Lewandowski(leftBayernMunchen)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & Player(y) & Left(x, y) & -Play(x, y) -> -Play(x, y))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski plays for Bayern Munchen.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: Lewandowski(leftBayernMunchen)\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: Play(lewandowski, bayernMunchen)\n</E"
   ],
   [
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: leftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (SoccerPlayer(x) & leftTeam(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(lewandowski, bayernmunchen)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: [BG] SoccerPlayer(striker)\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: [BG] PlayerLeftTeamNoLongerPlay(player, team) :- left(player, team).\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayForBayernMunchen(lewandowski)\n</EVALUATE>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & Left(x, y) & -PlayFor(x, y) -> -SoccerPlayer(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski plays for Bayern Munchen.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: Robert Lewandowski plays",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\n[BG]\nFOL: Striker(x) -> SoccerPlayer(x)\nFOL: SoccerPlayer(x) -> Striker(x)\nFOL: SoccerPlayer(x) -> SoccerPlayer(x)\nRobert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\n[BG]\nFOL: SoccerPlayer(x) -> LeftTeam(x)\nFOL: LeftTeam(x) -> LeftTeam(x)\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski plays for Bayern Munchen.\nFOL: -LeftTeam(lewandowski)",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: Lewandowski left bayernmunchen\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: -PlayFor(lewandowski, bayernmunchen)\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski plays for Bayern Munchen.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: Lewandowski left bayernmunchen\nTEXT: Robert Lewandowski plays for Bayern Munchen.\nFOL: PlayFor(lewandowski, bayernmunchen)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 49,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: Striker(x) -> SoccerPlayer(x)\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(lewandowski)\n</EVALUATE>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & Left(x, y) & -PlayFor(x, y) -> -SoccerPlayer(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a star.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: Robert Lewandowski is a star.\nFOL: Striker(lewandowski)\n</EVALUATE>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\n[BG] Strikers are soccer players.\nFOL: Striker(x) -> SoccerPlayer(x)\nRobert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\n[BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a star.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: Striker(x) -> SoccerPlayer(x)\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(lewandowski)\n</EVALUATE>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x y. (Left(x, y) -> -PlayFor(x, y))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a star.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: Robert Lewandowski is a star.\nFOL: Star(lewandowski)\n</EVALUATE>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & Left(x, y) & -PlayFor(x, y) -> -SoccerPlayer(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a star.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: Robert Lewandowski is a star.\nFOL: -Striker(lewandowski)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a star.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: Robert Lewandowski is a star.\nFOL: Striker(lewandowski) & SoccerPlayer(lewandowski)\n</EVALUATE>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\n[BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nRobert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\n[BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a star.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(lewandowski)\n",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(lewandowski)\n</EVALUATE>",
    "<PREMISES>\n<evaluate>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: [BG] SoccerPlayer(striker)\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: [BG] PlayerLeftTeam(player, team) -> -PlayForTeam(player, team)\n</evaluate>\n</PREMISES>\n<CONCLUSION>\n<evaluate>\nTEXT: Robert Lewandowski is a star.\nFOL: Star(lewandowski)\n</evaluate>\n</CONCLUSION>",
    "<PREMISES>\n<evaluatemulti>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nStrikers are soccer players.\nFOL: all x. (SoccerPlayer(x) -> Striker(x))\nRobert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nIf a player left a team they no longer play for that team.\nFOL: all x y. (SoccerPlayer(x) & SoccerPlayer(y) & Left(x, y) -> -PlayFor(x, y))\n</evaluatemulti>\n</PREMISES>\n<CONCLUSION>\n<evaluatemulti>\nRobert Lewandowski is a star.\nFOL: Star(lewandowski)\n</evaluatemulti>\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\n<PRE> Robert Lewandowski is a striker.\n</PRE> <PRE> [BG ] Strikers are soccer players.\n</PRE> <PRE> Robert Lewandowski left Bayern Munchen.\n</PRE> <PRE> [BG ] If a player left a team they no longer play for that team.\n</PRE>\n</PREMISES>\n<CONCLUSION>\n<PRE> Robert Lewandowski is a star.\n</PRE>\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (Left(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(lewandowski)\n</EVALUATE>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\n[BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nRobert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\n[BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a star.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: -SoccerPlayer(lew",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: Striker(x) -> SoccerPlayer(x)\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(lewandowski)\n</EVALUATE>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: -Team(lewandowski, BayernMunchen)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & Team(x, y) & -Team(x, y) -> -Player(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a star.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: -Team(lewandowski, BayernMunchen)\nTEXT: Strikers are soccer players.\nFOL: all x.",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\n[BG] Strikers are soccer players.\nFOL: Striker(x) -> SoccerPlayer(x)\nRobert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\n[BG] If a player left a team they no longer play for that team.\nFOL: LeftTeam(x) -> -PlayFor(x)\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a star.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: -SoccerPlayer(lewandowski)\n</EVALUATE"
   ],
   [
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lawandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: [BG] SoccerPlayer(x) <- Striker(x)\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lawandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: [BG] If x LeftY(x) then -PlayForY(x)\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a star.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lawandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: [BG] SoccerPlayer(lawandowski)\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: Striker(lawandowski) & LeftBayernMunchen(lawandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: [BG] If lawandowski LeftBayernMunchen(law",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: Striker(x) -> SoccerPlayer(x)\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: LeftTeam(x) -> -PlayFor(x)\nTEXT: Robert Lewandowski is a star.\nFOL: Star(lewandowski)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: [BG] Strikers are soccer players.\nFOL: Striker(x) -> SoccerPlayer(x)\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(lewandowski)\n</EVALUATE>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\n[BG] Strikers are soccer players.\nFOL: Striker(x) -> SoccerPlayer(x)\nRobert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\n[BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a star.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: Striker(x) -> SoccerPlayer(x)\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(lewandowski)\n</EVALUATE>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\n[BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nRobert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\n[BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a star.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: Star(lewandowski)\n"
   ],
   [
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\n[BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nRobert Lewandowski left Bayern Munchen.\nFOL: Lewandowski(leftBayernMunchen)\n[BG] If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & Player(y) & LeftTeam(x, y) -> -PlayFor(x, y))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a star.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: Lewandowski(leftBayernMunchen)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x y. (Player(x) & Player(y) & LeftTeam(x, y) -> -Play",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a star.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: Robert Lewandowski is a star.\nFOL: Star(lewandowski)\n</EVALUATE>",
    "<PREMISES>\n<TEXT>Robert Lewandowski is a striker.</TEXT>\n<FOL>Striker(lawandowski)\n</FOL>\n<TEXT>Strikers are soccer players.</TEXT>\n<FOL>all x. (Striker(x) -> SoccerPlayer(x))\n</FOL>\n<TEXT>Robert Lewandowski left Bayern Munchen.</TEXT>\n<FOL>LeftBayernMunchen(lawandowski)\n</FOL>\n<TEXT>Strikers are soccer players.</TEXT>\n<FOL>all x. (Striker(x) -> SoccerPlayer(x))\n</FOL>\n<TEXT>If a player left a team they no longer play for that team.</TEXT>\n<FOL>all x y. (Player(x) & Left(x, y) & -PlayFor(x, y) -> -SoccerPlayer(x))\n</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Robert Lewandowski is a star.</TEXT>\n<FOL>Star(lawandowski)\n</FOL>\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lawandowski)\nTEXT: Strikers are soccer players.\nF",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: [BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a star.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: Robert Lewandowski is a star.\nFOL: Striker(lewandowski)\n</EVALUATE>",
    "<PREMISES>\nRobert Lewandowski is a striker.\nFOL: Striker(lewandowski)\n[BG] Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nRobert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\n[BG] If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\n</PREMISES>\n<CONCLUSION>\nRobert Lewandowski is a star.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Robert Lewandowski is a striker.\nFOL: Striker(lewandowski)\nTEXT: Strikers are soccer players.\nFOL: all x. (Striker(x) -> SoccerPlayer(x))\nTEXT: Robert Lewandowski left Bayern Munchen.\nFOL: LeftBayernMunchen(lewandowski)\nTEXT: If a player left a team they no longer play for that team.\nFOL: all x. (LeftTeam(x) -> -PlayFor(x))\nTEXT: Robert Lewandowski is a star.\nFOL: -Striker(lewand"
   ]
  ]
 },
 {
  "index": 50,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & Montana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana(butte) & Montana(helena) & Montana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State(sameState(whiteSulphurSprings, butte))\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (Butte(x) -> -Pierre(x))\nTEXT: Butte and Pierre are in the same state.\nFOL: Butte(pierre)\n</EVALUATE>",
    "<PREMISES>\n<TEXT>Billings is a city in Montana.</TEXT>\n<TEXT>Montana includes the cities of Butte, Helena, and Missoula.</TEXT>\n<TEXT>White Sulphur Springs and Butte are cities in the same state.</TEXT>\n<TEXT>The city of Pierre is not in Montana.</TEXT>\n<TEXT>Any city in Butte is not in Pierre.</TEXT>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Butte and Pierre are in the same state.</TEXT>\n</CONCLUSION>\n\n<EVALUATE>\n<TEXT>Billings is a city in Montana.</TEXT>\n<TEXT>Montana includes the cities of Butte, Helena, and Missoula.</TEXT>\n<TEXT>White Sulphur Springs and Butte are cities in the same state.</TEXT>\n<TEXT>The city of Pierre is not in Montana.</TEXT>\n<TEXT>Any city in Butte is not in Pierre.</TEXT>\n<TEXT>Butte and Pierre are in the same state.</TEXT>\n</EVALUATE>",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(Billings) & State(Montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: State(Montana) & (City(Butte) & City(Helena) & City(Missoula))\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State SameState(WhiteSulphurSprings, Butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -State(Montana) & City(Pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -City(Pierre) & City(Butte)\n</PREMISES>\n<CONCLUSION>\nButte and Pierre are in the same state.\nFOL: State SameState(Butte, Pierre)\n</CONCLUSION>",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(billings) & State(billings) & Montana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana(butte) & Montana(helena) & Montana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whitesulphrsprings) & State(whitesulphrsprings) & Montana(whitesulphrsprings) & State(whitesulphrsprings) & Montana(whitesulphrsprings) & Montana(butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -State(pierre) & -Montana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (City(x) & Montana(x) & -State(pierre) -> -State(x))\n</PREMISES>\n<CONCLUSION>\nButte and Pierre are in the same state.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Butte and Pierre are in the same state.\n",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(billings) & State(billings) & Montana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana(butte) & Montana(helena) & Montana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whitesulphrsprings) & City(Butte) & State(whitesulphrsprings) & State(Butte) & SameState(whitesulphrsprings, Butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(pierre) & -State(pierre) & -Montana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -City(pierre) & City(Butte) & -SameState(pierre, Butte)\n</PREMISES>\n<CONCLUSION>\nButte and Pierre are in the same state.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(Butte"
   ],
   [
    "<PREMISES>\nBillings is a city in Montana.\nFOL: CityInMontana(billings)\nMontana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana = {Butte, Helena, Missoula}\nWhite Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(WhiteSulphurSprings, Butte)\nThe city of Pierre is not in Montana.\nFOL: -CityInMontana(pierre)\nAny city in Butte is not in Pierre.\nFOL: -CityInPierre(x) for x in Butte\n</PREMISES>\n<CONCLUSION>\nButte and Pierre are in the same state.\nFOL: SameState(Butte, Pierre)\n</CONCLUSION>",
    "<PREMISES>\n<TEXT>Billings is a city in Montana.</TEXT>\n<FOL>CityInMontana(billings)\n</FOL>\n\n<TEXT>Montana includes the cities of Butte, Helena, and Missoula.</TEXT>\n<FOL>CityInMontana(butte) & CityInMontana(helena) & CityInMontana(missoula)\n</FOL>\n\n<TEXT>White Sulphur Springs and Butte are cities in the same state.</TEXT>\n<FOL>SameState(whiteSulphurSprings, butte)\n</FOL>\n\n<TEXT>The city of Pierre is not in Montana.</TEXT>\n<FOL>-CityInMontana(pierre)\n</FOL>\n\n<TEXT>Any city in Butte is not in Pierre.</TEXT>\n<FOL>all x. (-CityInPierre(x) & CityInButte(x))\n</FOL>\n\n</PREMISES>\n<CONCLUSION>\n<TEXT>Butte and Pierre are in the same state.</TEXT>\n<FOL>SameState(butte, pierre)\n</FOL>\n</CONCLUSION>",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(Billings) & Montana\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana & (Butte & Helena & Missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: (WhiteSulphurSprings & Butte) & SameState(WhiteSulphurSprings, Butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana & City(Pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: Butte & -Pierre\n</PREMISES>\n<CONCLUSION>\nButte and Pierre are in the same state.\nFOL: Butte & Pierre & SameState(Butte, Pierre)\n</CONCLUSION>",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(billings) & State(billings, montana)\nMontana includes the cities of Butte, Helena, and Missoula.\nFOL: State(montana) & City(butte) & City(helena) & City(missoula)\nWhite Sulphur Springs and Butte are cities in the same state.\nFOL: State(x) & City(white_sulphur_springs) & City(butte) & (x = State(same_state) & City(same_state) & City(butte))\nThe city of Pierre is not in Montana.\nFOL: -State(pierre) & State(montana)\nAny city in Butte is not in Pierre.\nFOL: City(x) & City(butte) & -State(pierre) & (x = City(butte) -> -State(pierre))\n</PREMISES>\n<CONCLUSION>\nButte and Pierre are in the same state.\nFOL: City(butte) & -State(pierre) & (State(x) & City(butte) & -State(pierre) -> x = State(s",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(billings) & Montana(billings)\nMontana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana(butte) & Montana(helena) & Montana(missoula)\nWhite Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nThe city of Pierre is not in Montana.\nFOL: -Montana(pierre)\nAny city in Butte is not in Pierre.\nFOL: -SameState(butte, pierre)\n</PREMISES>\n<CONCLUSION>\nButte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(billings) & State(billings) & Montana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana(butte) & Montana(helena) & Montana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State(whiteSulphurSprings) & State(butte) & whiteSulphurSprings = butte\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (Butte(x) -> -Pierre(x))\n</PREMISES>\n<CONCLUSION>\nButte and Pierre are in the same state.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Butte and Pierre are in the same state.\nFOL: Butte & Pierre = State\n</EVALUATE>",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(Billings) & State(Montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: State(Montana) & City(Butte) & City(Helena) & City(Missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(WhiteSulphurSprings) & City(Butte) & State Same(Montana, WhiteSulphurSprings)\nTEXT: The city of Pierre is not in Montana.\nFOL: City(Pierre) & -State(Montana, Pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: City(Butte) & -City(Pierre)\n</PREMISES>\n<CONCLUSION>\nButte and Pierre are in the same state.\nFOL: City(Butte) & State Same(Montana, Pierre)\n</CONCLUSION>",
    "<PREMISES>\n<evaluate>\nTEXT: Billings is a city in Montana.\nFOL: City(x, Montana) & Billings(x)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana & Butte & Helena & Missoula\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State(x) & WhiteSulphurSprings(x) & Butte(x) & SameState(x, WhiteSulphurSprings, Butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana & Pierre(x)\nTEXT: Any city in Butte is not in Pierre.\nFOL: Butte(x) & -Pierre(x)\n</evaluate>\n\n</PREMISES>\n<CONCLUSION>\n<evaluate>\nTEXT: Butte and Pierre are in the same state.\nFOL: SameState(x, Butte, Pierre)\n</evaluate>\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & State(billings, Montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: State(Montana) & City(butte) & City(helena) & City(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: (State(x) & City(whiteSulphurSprings) & City(butte) & x = State(Montana)) | (State(x) & City(butte) & City(pierre) & x = State(Montana))\nTEXT: The city of Pierre is not in Montana.\nFOL: -State(Montana, pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (City(x) & City(x) & Butte & -Pierre(x))\nTEXT: Butte and Pierre are in the same state.\nFOL: ((City(butte) & State(x) & x = State(Montana)) & (City(pierre) & State(x) & x = State(Montana",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: Billings(Montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana = {Butte, Helena, Missoula}\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: WhiteSulphurSprings = State & State = {WhiteSulphurSprings, Butte}\nTEXT: The city of Pierre is not in Montana.\nFOL: -Pierre(Montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -Butte(Pierre)\n</PREMISES>\n<CONCLUSION>\nButte and Pierre are in the same state.\nFOL: Butte = State & State = {Butte, Pierre}\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nBillings is a city in Montana.\nFOL: Billings(montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: (Butte(montana) & Helena(montana) & Missoula(montana))\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: (WhiteSulphurSprings(montana) & Butte(montana))\nTEXT: The city of Pierre is not in Montana.\nFOL: -Pierre(montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: (Butte(montana) -> -Pierre(montana))\n</PREMISES>\n<CONCLUSION>\nButte and Pierre are in the same state.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Butte and Pierre are in the same state.\nFOL: Butte(montana) & Pierre(montana)\n</EVALUATE>",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(billings) & State(billings) & Montana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana(butte) & Montana(helena) & Montana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte) & SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -SameState(pierre, butte)\n</PREMISES>\n<CONCLUSION>\nButte and Pierre are in the same state.\nFOL: SameState(butte, pierre)\n</CONCLUSION>",
    "<PREMISES>\n<TEXT>Billings is a city in Montana.</TEXT>\n<FOL>City(billings) & State(montana) & SameState(billings, montana)</FOL>\n<TEXT>Montana includes the cities of Butte, Helena, and Missoula.</TEXT>\n<FOL>State(montana) & City(butte) & City(helena) & City(missoula) & Includes(butte, montana) & Includes(helena, montana) & Includes(missoula, montana)</FOL>\n<TEXT>White Sulphur Springs and Butte are cities in the same state.</TEXT>\n<FOL>City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)</FOL>\n<TEXT>The city of Pierre is not in Montana.</TEXT>\n<FOL>City(pierre) & -State(pierre, montana)</FOL>\n<TEXT>Any city in Butte is not in Pierre.</TEXT>\n<FOL>City(butte) & -City(pierre) & AnyCity(butte, pierre)</FOL>\n",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(x, Montana) : Billings(x)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: City(x, Montana) : Butte(x) & City(x, Montana) : Helena(x) & City(x, Montana) : Missoula(x)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State(x) : WhiteSulphurSprings(x) & State(x) : Butte(x)\nTEXT: The city of Pierre is not in Montana.\nFOL: -City(x, Montana) : Pierre(x)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -City(x, Pierre) : Butte(x)\nTEXT: Butte and Pierre are in the same state.\nFOL: State(x) : Butte(x) & State(x) : Pierre(x)\n</EVALUATE>",
    "<PREMISES>\n<TEXT>Billings is a city in Montana.</TEXT>\n<FOL>CityOfBillings(montana)\n</FOL>\n<TEXT>Montana includes the cities of Butte, Helena, and Missoula.</TEXT>\n<FOL>CityOfButte(montana) & CityOfHelena(montana) & CityOfMissoula(montana)\n</FOL>\n<TEXT>White Sulphur Springs and Butte are cities in the same state.</TEXT>\n<FOL>CityOfWhiteSulphurSprings(state) & CityOfButte(state)\n</FOL>\n<TEXT>The city of Pierre is not in Montana.</TEXT>\n<FOL>-CityOfPierre(montana)\n</FOL>\n<TEXT>Any city in Butte is not in Pierre.</TEXT>\n<FOL>all x. (CityOf(x) & CityOfButte(montana) & -CityOfPierre(montana) -> -CityOf(x))\n</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Butte and Pierre are in the same state.</TEXT>\n<FOL>CityOfButte(state) & -CityOfP"
   ],
   [
    "<PREMISES>\nBillings is a city in Montana.\nFOL: Billings(montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Butte(montana) & Helena(montana) & Missoula(montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: WhiteSulphurSprings(state) & Butte(state)\nTEXT: The city of Pierre is not in Montana.\nFOL: -Pierre(montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (Butte(x) -> -Pierre(x))\n</PREMISES>\n<CONCLUSION>\nButte and Pierre are in the same state.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Butte and Pierre are in the same state.\nFOL: Butte(state) & Pierre(state)\n</EVALUATE>",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: Billings(Montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Butte(Montana) & Helena(Montana) & Missoula(Montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(WhiteSulphurSprings, Butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -Pierre(Montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (Butte(x) -> -Pierre(x))\n</PREMISES>\n<CONCLUSION>\nButte and Pierre are in the same state.\nFOL: SameState(Butte, Pierre)\n</CONCLUSION>",
    "<PREMISES>\n<TEXT>Billings is a city in Montana.</TEXT>\n<FOL>City(x) & State(x) & Montana(x) & Billings(x) & StateOf(x, Billings) & SameState(x, y) & x & y</FOL>\n<TEXT>Montana includes the cities of Butte, Helena, and Missoula.</TEXT>\n<FOL>Montana(x) & City(x) & Butte(x) & Helena(x) & Missoula(x) & Included(x, y, z)</FOL>\n<TEXT>White Sulphur Springs and Butte are cities in the same state.</TEXT>\n<FOL>City(x) & City(y) & SameState(x, y) & WhiteSulphurSprings(x) & Butte(y) & SameState(x, y)</FOL>\n<TEXT>The city of Pierre is not in Montana.</TEXT>\n<FOL>City(x) & Montana(x) & Pierre(x) & -Included(x, y)</FOL>\n<TEXT>Any city in Butte is not in Pierre.</TEXT>\n<FOL>City(x) & City(y) & Butte(x) & Pierre(y) & -Included(x",
    "<PREMISES>\n<TEXT>Billings is a city in Montana.</TEXT>\n<FOL>City(billings) & State(billings) & Montana(billings)</FOL>\n<TEXT>Montana includes the cities of Butte, Helena, and Missoula.</TEXT>\n<FOL>Montana(billings) & City(butte) & Montana(butte) & City(helena) & Montana(helena) & City(missoula) & Montana(missoula)</FOL>\n<TEXT>White Sulphur Springs and Butte are cities in the same state.</TEXT>\n<FOL>SameState(whiteSulphurSprings, butte) & City(whiteSulphurSprings) & City(butte)</FOL>\n<TEXT>The city of Pierre is not in Montana.</TEXT>\n<FOL>NotInMontana(pierre) & State(pierre) & Montana(pierre)</FOL>\n<TEXT>Any city in Butte is not in Pierre.</TEXT>\n<FOL>City(x) & Butte(x) & NotInPierre(x) & x \u2208 Butte & x \u2208 Pierre</FOL>\n</PREMISE",
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & State(billings, montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: State(montana) & City(butte) & City(helena) & City(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whitesulphringsprings) & City(butte) & State(billings, whitesulphringsprings) & State(billings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -State(pierre, montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -City(butte, pierre)\nTEXT: Butte and Pierre are in the same state.\nFOL: (State(butte, x) & -State(pierre, x)) | (-State(butte, x) & State(pierre, x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 51,
  "responses": [
   [
    "<PREMISES>\nBillings is a city in Montana.\nFOL: CityInMontana(billings)\nMontana includes the cities of Butte, Helena, and Missoula.\nFOL: CityInMontana(butte) & CityInMontana(helena) & CityInMontana(missoula)\nWhite Sulphur Springs and Butte are cities in the same state.\nFOL: CityInSameState(whiteSulphurSprings, butte)\nThe city of Pierre is not in Montana.\nFOL: -CityInMontana(pierre)\nAny city in Butte is not in Pierre.\nFOL: -CityInPierre(x) | x = butte\n</PREMISES>\n<CONCLUSION>\nPierre and Bismarck are in the same state.\nFOL: CityInSameState(pierre, bismarck)\n</CONCLUSION>",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: CityInMontana(billings)\nMontana includes the cities of Butte, Helena, and Missoula.\nFOL: CityInMontana(butte) & CityInMontana(helena) & CityInMontana(missoula)\nWhite Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nThe city of Pierre is not in Montana.\nFOL: -CityInMontana(pierre)\nAny city in Butte is not in Pierre.\nFOL: all x. (CityInButte(x) -> -CityInPierre(x))\n</PREMISES>\n<CONCLUSION>\nPierre and Bismarck are in the same state.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(billings) & State(billings) & Montana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana(butte) & Montana(helena) & Montana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whitesulphrsprings) & City(white) & Montana(whitesulphrsprings) & Montana(white)\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -Pierre(butte)\n</PREMISES>\n<CONCLUSION>\nPierre and Bismarck are in the same state.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Pierre and Bismarck are in the same state.\nFOL: State(pierre) & State(bismarck) & SameState(pierre, bismarck)\n</EVALUATE>",
    "<PREMISES>\n<TEXT>Billings is a city in Montana.</TEXT>\n<FOL>City(billings) & State(montana) & sameState(billings, montana)\n</FOL>\n<TEXT>Montana includes the cities of Butte, Helena, and Missoula.</TEXT>\n<FOL>State(montana) & includes(billings) & includes(butte) & includes(helena) & includes(missoula)\n</FOL>\n<TEXT>White Sulphur Springs and Butte are cities in the same state.</TEXT>\n<FOL>City(whitesulphrsprings) & City(butte) & sameState(whitesulphrsprings, butte)\n</FOL>\n<TEXT>The city of Pierre is not in Montana.</TEXT>\n<FOL>City(pierre) & -State(pierre) & -State(montana)\n</FOL>\n<TEXT>Any city in Butte is not in Pierre.</TEXT>\n<FOL>City(butte) & -City(pierre)\n</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Pierre and Bismarck are in the same",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(billings) & Montana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana(butte) & Montana(helena) & Montana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: Montana(whitesulphrsprings) & Montana(butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -Montana(pierre) & Butte(pierre)\n</PREMISES>\n<CONCLUSION>\nPierre and Bismarck are in the same state.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Pierre and Bismarck are in the same state.\nFOL: Montana(pierre) & Montana(bismarck)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(Billings) & Montana\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana & Butte & Helena & Missoula\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(WhiteSulphurSprings, Butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana & City(Pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: Butte & -Pierre\n</PREMISES>\n<CONCLUSION>\nPierre and Bismarck are in the same state.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(Pierre, Bismarck)\n</EVALUATE>",
    "<PREMISES>\n<TEXT>Billings is a city in Montana.</TEXT>\n<FOL>CityInMontana(billings)\n</FOL>\n\n<TEXT>Montana includes the cities of Butte, Helena, and Missoula.</TEXT>\n<FOL>CityInMontana(butte) & CityInMontana(helena) & CityInMontana(missoula) & Montana(billings)\n</FOL>\n\n<TEXT>White Sulphur Springs and Butte are cities in the same state.</TEXT>\n<FOL>CityInSameState(whiteSulphurSprings, butte)\n</FOL>\n\n<TEXT>The city of Pierre is not in Montana.</TEXT>\n<FOL>-CityInMontana(pierre)\n</FOL>\n\n<TEXT>Any city in Butte is not in Pierre.</TEXT>\n<FOL>forall x. (CityInButte(x) -> -CityInPierre(x))\n</FOL>\n\n</PREMISES>\n<CONCLUSION>\n<TEXT>Pierre and Bismarck are in the same state.</TEXT>\n<FOL>-CityInMontana(pierre) & CityInSameState(pierre, bismarck)\n</",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(billings) & StateOf(billings, montana)\nMontana includes the cities of Butte, Helena, and Missoula.\nFOL: StateOf(montana, billings) & StateOf(montana, butte) & StateOf(montana, helena) & StateOf(montana, missoula)\nWhite Sulphur Springs and Butte are cities in the same state.\nFOL: StateOf(_, whiteSulphurSprings) & StateOf(_, butte) & SameState(_, whiteSulphurSprings, butte)\nThe city of Pierre is not in Montana.\nFOL: -StateOf(pierre, montana)\nAny city in Butte is not in Pierre.\nFOL: -StateOf(_, butte) & StateOf(_, pierre)\n</PREMISES>\n<CONCLUSION>\nPierre and Bismarck are in the same state.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & StateOf(billings, montana)\nTEXT: Montana includes the cities",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(billings) & Montana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Butte(Montana) & Helena(Montana) & Missoula(Montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(WhiteSulphurSprings, Butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: ForAll x. (Butte(x) -> -Pierre(x))\n</PREMISES>\n<CONCLUSION>\nPierre and Bismarck are in the same state.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, Bismarck)\n</EVALUATE>",
    "<PREMISES>\n<TEXT>Billings is a city in Montana.</TEXT>\n<FOL>City(billings) & State(billings) & Montana(billings)</FOL>\n<TEXT>Montana includes the cities of Butte, Helena, and Missoula.</TEXT>\n<FOL>Montana(billings) & Montana(butte) & Montana(helena) & Montana(missoula)</FOL>\n<TEXT>White Sulphur Springs and Butte are cities in the same state.</TEXT>\n<FOL>City(whiteSulphurSprings) & City(butte) & State(whiteSulphurSprings) & State(butte) & SameState(whiteSulphurSprings, butte)</FOL>\n<TEXT>The city of Pierre is not in Montana.</TEXT>\n<FOL>City(pierre) & -Montana(pierre)</FOL>\n<TEXT>Any city in Butte is not in Pierre.</TEXT>\n<FOL>City(butte) & -City(pierre) & SameCity(butte, pierre)</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Pierre and B"
   ],
   [
    "<PREMISES>\n<TEXT>Billings is a city in Montana.</TEXT>\n<TEXT>Montana includes the cities of Butte, Helena, and Missoula.</TEXT>\n<TEXT>White Sulphur Springs and Butte are cities in the same state.</TEXT>\n<TEXT>The city of Pierre is not in Montana.</TEXT>\n<TEXT>Any city in Butte is not in Pierre.</TEXT>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Pierre and Bismarck are in the same state.</TEXT>\n</CONCLUSION>\n\n<EVALUATE>\n<TEXT>Billings is a city in Montana.</TEXT>\n<FOL: Montana(billings) & State(billings) & City(billings))\n<TEXT>Montana includes the cities of Butte, Helena, and Missoula.</TEXT>\n<FOL: Montana(x) & State(x) & City(x) & (x = butte | x = Helena | x = missoula))\n<TEXT>White Sulphur Springs and Butte are cities in the same state.</TEXT>\n<FOL: State(x) & State(y) & (x = white_sulphur_springs & y = butte",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(billings) & Montana(billings)\nMontana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana(butte) & Montana(helena) & Montana(missoula)\nWhite Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nThe city of Pierre is not in Montana.\nFOL: -Montana(pierre)\nAny city in Butte is not in Pierre.\nFOL: -SameState(butte, pierre)\n</PREMISES>\n<CONCLUSION>\nPierre and Bismarck are in the same state.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & Montana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana(butte) & Montana(helena) & Montana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(white",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(Billings) & Montana(Billings)\nMontana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana(Butte) & Montana(Helena) & Montana(Missoula)\nWhite Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(WhiteSulphurSprings, Butte)\nThe city of Pierre is not in Montana.\nFOL: -Montana(Pierre)\nAny city in Butte is not in Pierre.\nFOL: -SameState(Butte, Pierre)\n</PREMISES>\n<CONCLUSION>\nPierre and Bismarck are in the same state.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(Billings) & Montana(Billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana(Butte) & Montana(Helena) & Montana(Missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(WhiteS",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: Billings(Montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Butte(Montana) & Helena(Montana) & Missoula(Montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(WhiteSulphurSprings, Butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -Pierre(Montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (Butte(x) -> -Pierre(x))\n</PREMISES>\n<CONCLUSION>\nPierre and Bismarck are in the same state.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(Pierre, Bismarck)\n</EVALUATE>",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: Montana(billings)\nMontana includes the cities of Butte, Helena, and Missoula.\nFOL: Butte in Montana & Helena in Montana & Missoula in Montana\nWhite Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(WhiteSulphurSprings, Butte)\nThe city of Pierre is not in Montana.\nFOL: -Montana(pierre)\nAny city in Butte is not in Pierre.\nFOL: -Butte in Pierre\n</PREMISES>\n<CONCLUSION>\nPierre and Bismarck are in the same state.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(billings) & Montana(billings)\nMontana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana(butte) & Montana(helena) & Montana(missoula)\nWhite Sulphur Springs and Butte are cities in the same state.\nFOL: State(billings) & State(butte)\nThe city of Pierre is not in Montana.\nFOL: -Montana(pierre)\nAny city in Butte is not in Pierre.\nFOL: -Pierre(butte)\n</PREMISES>\n<CONCLUSION>\nPierre and Bismarck are in the same state.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Pierre and Bismarck are in the same state.\nFOL: (Pierre & Bismarck) & State(pierre) & State(bismarck)\n</EVALUATE>",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(billings) & State(billings) & Montana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana(butte) & Montana(helena) & Montana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: City(whitesulphrsprings) & City(whitesulphrsprings) & Montana(whitesulphrsprings) & City(whitesulphrsprings) & City(whitesulphrsprings) & Montana(whitesulphrsprings) & State(whitesulphrsprings) & Montana(whitesulphrsprings) & City(whitesulphrsprings) & City(whitesulphrsprings) & Montana(whitesulphrsprings) & State(whitesulphrsprings) & Montana(whitesulphrsprings) & City(whitesulphrsprings) & City(whitesulphrsprings)",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(billings) & Montana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana(butte) & Montana(helena) & Montana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (City(x) & Butte(x) -> -City(pierre))\n</PREMISES>\n<CONCLUSION>\nPierre and Bismarck are in the same state.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<PREMISES>\n<TEXT>Billings is a city in Montana.</TEXT>\n<FOL>CityInMontana(billings)\n</FOL>\n<TEXT>Montana includes the cities of Butte, Helena, and Missoula.</TEXT>\n<FOL>CityInMontana(butte) & CityInMontana(helena) & CityInMontana(missoula)\n</FOL>\n<TEXT>White Sulphur Springs and Butte are cities in the same state.</TEXT>\n<FOL>SameState(whiteSulphurSprings, butte)\n</FOL>\n<TEXT>The city of Pierre is not in Montana.</TEXT>\n<FOL>-CityInMontana(pierre)\n</FOL>\n<TEXT>Any city in Butte is not in Pierre.</TEXT>\n<FOL>all x. (CityInButte(x) -> -CityInPierre(x))\n</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Pierre and Bismarck are in the same state.</TEXT>\n<FOL>-CityInMontana(pierre) & CityInSameState(pierre, bismarck)\n</FOL>\n</CONCLUSION>\n\n<E",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(billings) & State(billings) & State(montana)\nMontana includes the cities of Butte, Helena, and Missoula.\nFOL: State(montana) & City(butte) & City(helena) & City(missoula)\nWhite Sulphur Springs and Butte are cities in the same state.\nFOL: City(whitesulphrsprings) & City(butte) & State(whitesulphrsprings) & State(butte) & SameState(whitesulphrsprings, butte)\nThe city of Pierre is not in Montana.\nFOL: -City(pierre) & -State(pierre) & -State(montana)\nAny city in Butte is not in Pierre.\nFOL: -City(butte) & -City(pierre) & -SameState(butte, pierre)\n</PREMISES>\n<CONCLUSION>\nPierre and Bismarck are in the same state.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(b"
   ],
   [
    "<PREMISES>\nBillings is a city in Montana.\nFOL: MontanaCity(billings)\nMontana includes the cities of Butte, Helena, and Missoula.\nFOL: MontanaCity(butte) & MontanaCity(helena) & MontanaCity(missoula)\nWhite Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nThe city of Pierre is not in Montana.\nFOL: -MontanaCity(pierre)\nAny city in Butte is not in Pierre.\nFOL: -SameState(butte, pierre)\n</PREMISES>\n<CONCLUSION>\nPierre and Bismarck are in the same state.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: MontanaCity(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: MontanaCity(butte) & MontanaCity(helena) & MontanaCity(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulph",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: Montana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana includes butte & Helena & Missoula\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -SameState(pierre, butte)\n</PREMISES>\n<CONCLUSION>\nPierre and Bismarck are in the same state.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Pierre and Bismarck are in the same state.\nFOL: SameState(pierre, bismarck)\n</EVALUATE>",
    "<PREMISES>\n<TEXT>Billings is a city in Montana.</TEXT>\n<FOL>City(billings) & State(Montana)</FOL>\n<TEXT>Montana includes the cities of Butte, Helena, and Missoula.</TEXT>\n<FOL>State(Montana) & (City(Butte) & City(Helena) & City(Missoula))</FOL>\n<TEXT>White Sulphur Springs and Butte are cities in the same state.</TEXT>\n<FOL>City(whiteSulphurSprings) & City(Butte) & State(x) & (City(whiteSulphurSprings) & City(Butte) & -State(x))</FOL>\n<TEXT>The city of Pierre is not in Montana.</TEXT>\n<FOL>City(pierre) & -State(Montana)</FOL>\n<TEXT>Any city in Butte is not in Pierre.</TEXT>\n<FOL>(City(x) & City(Butte) & -City(pierre))</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Pierre and Bismarck are in the same state.</TEXT>\n<FOL>(",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: Billings(Montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Butte(Montana) & Helena(Montana) & Missoula(Montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: WhiteSulphurSprings(State) & Butte(State)\nTEXT: The city of Pierre is not in Montana.\nFOL: -Pierre(Montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: Butte(x) & -Pierre(x)\n</PREMISES>\n<CONCLUSION>\nPierre and Bismarck are in the same state.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Pierre and Bismarck are in the same state.\nFOL: Pierre(State) & Bismarck(State) & State(Pierre) & State(Bismarck)\n</EVALUATE>",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: CityInMontana(billings)\nMontana includes the cities of Butte, Helena, and Missoula.\nFOL: CityInMontana(butte) & CityInMontana(helena) & CityInMontana(missoula)\nWhite Sulphur Springs and Butte are cities in the same state.\nFOL: CityInSameState(whiteSulphurSprings, butte)\nThe city of Pierre is not in Montana.\nFOL: -CityInMontana(pierre)\nAny city in Butte is not in Pierre.\nFOL: -CityInPierre(butte)\n</PREMISES>\n<CONCLUSION>\nPierre and Bismarck are in the same state.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Pierre and Bismarck are in the same state.\nFOL: CityInSameState(pierre, bismarck)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 52,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & State(billings, Montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: State(montana) & (City(butte) & City(helena) & City(missoula))\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: (City(whiteSulphurSprings) & City(butte) & State(billings, Montana))\nTEXT: The city of Pierre is not in Montana.\nFOL: -State(pierre, Montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: (City(x) & City(butte) & -State(x, Pierre))\nTEXT: Montana is home to the city of Missoula.\nFOL: State(montana) & City(missoula)\n</EVALUATE>",
    "<PREMISES>\n<TEXT>Billings is a city in Montana.</TEXT>\n<FOL>City(x, Montana) -> Billings(x)</FOL>\n<TEXT>Montana includes the cities of Butte, Helena, and Missoula.</TEXT>\n<FOL>City(x, Montana) -> Butte(x) & City(x, Montana) -> Helena(x) & City(x, Montana) -> Missoula(x)</FOL>\n<TEXT>White Sulphur Springs and Butte are cities in the same state.</TEXT>\n<FOL>City(x, WhiteSulphurSprings) & City(x, Butte) & City(x, Montana)</FOL>\n<TEXT>The city of Pierre is not in Montana.</TEXT>\n<FOL>City(x, Pierre) & -City(x, Montana)</FOL>\n<TEXT>Any city in Butte is not in Pierre.</TEXT>\n<FOL>City(x, Butte) & -City(x, Pierre)</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Montana is home to the city of Missoula.</TEXT>\n<FOL>City(x, Montana) & City(x, Missoula)</FOL>\n</",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: Montana(billings)\nMontana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana includes (butte & Helena & Missoula)\nWhite Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings & butte)\nThe city of Pierre is not in Montana.\nFOL: -Montana(pierre)\nAny city in Butte is not in Pierre.\nFOL: -SameState(anyCityButte & pierre)\n</PREMISES>\n<CONCLUSION>\nMontana is home to the city of Missoula.\nFOL: Montana homeTo (Missoula)\n</CONCLUSION>",
    "<PREMISES>\n<TEXT>Billings is a city in Montana.</TEXT>\n<TEXT>Montana includes the cities of Butte, Helena, and Missoula.</TEXT>\n<TEXT>White Sulphur Springs and Butte are cities in the same state.</TEXT>\n<TEXT>The city of Pierre is not in Montana.</TEXT>\n<TEXT>Any city in Butte is not in Pierre.</TEXT>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Montana is home to the city of Missoula.</TEXT>\n</CONCLUSION>\n\n<EVALUATE>\n<TEXT>Billings is a city in Montana.</TEXT>\n<FOL: City(billings) & StateOf(billings, montana))\n<TEXT>Montana includes the cities of Butte, Helena, and Missoula.</TEXT>\n<FOL: StateOf(montana, butte) & StateOf(montana, helena) & StateOf(montana, missoula))\n<TEXT>White Sulphur Springs and Butte are cities in the same state.</TEXT>\n<FOL: StateOf(white_sulphur_springs, butte) & StateOf(white_sulphur",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: Billings(montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Butte(montana) & Helena(montana) & Missoula(montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(WhiteSulphurSprings, Butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -Pierre(montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -Pierre(Butte)\n</PREMISES>\n<CONCLUSION>\nMontana is home to the city of Missoula.\nFOL: HomeTo(Missoula, montana)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: Billings(montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Butte(montana) & Helena(montana) & Missoula(montana)\nTEXT: White Sulphur Springs and Butte are cities in"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & Montana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana(butte) & Montana(helena) & Montana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (Butte(x) -> -Montana(pierre))\nTEXT: Montana is home to the city of Missoula.\nFOL: Montana(missoula)\n</EVALUATE>",
    "<PREMISES>\n<TEXT>Billings is a city in Montana.</TEXT>\n<FOL>City(billings) & State(montana) & SameState(billings, butte) & SameState(billings, helena) & SameState(billings, missoula) & Not(State(pierre))\n</FOL>\n<TEXT>Montana includes the cities of Butte, Helena, and Missoula.</TEXT>\n<FOL>State(montana) & City(butte) & City(helena) & City(missoula) & Subset(montana, butte) & Subset(montana, helena) & Subset(montana, missoula)\n</FOL>\n<TEXT>White Sulphur Springs and Butte are cities in the same state.</TEXT>\n<FOL>City(whiteSulphurSprings) & City(butte) & SameState(whiteSulphurSprings, butte)\n</FOL>\n<TEXT>The city of Pierre is not in Montana.</TEXT>\n<FOL>City(pierre) & Not(State(pierre) & State(montana))\n</FOL>\n<TEXT>Any city in Butte",
    "<PREMISES>\n<TEXT>Billings is a city in Montana.</TEXT>\n<FOL>CityInMontana(billings)\n</FOL>\n\n<TEXT>Montana includes the cities of Butte, Helena, and Missoula.</TEXT>\n<FOL>CityInMontana(butte) & CityInMontana(helena) & CityInMontana(missoula)\n</FOL>\n\n<TEXT>White Sulphur Springs and Butte are cities in the same state.</TEXT>\n<FOL>SameState(whiteSulphurSprings, butte)\n</FOL>\n\n<TEXT>The city of Pierre is not in Montana.</TEXT>\n<FOL>-CityInMontana(pierre)\n</FOL>\n\n<TEXT>Any city in Butte is not in Pierre.</TEXT>\n<FOL>all x. (-CityInPierre(x) & CityInButte(x))\n</FOL>\n\n</PREMISES>\n<CONCLUSION>\n<TEXT>Montana is home to the city of Missoula.</TEXT>\n<FOL>CityInMontana(missoula)\n</FOL>\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Billings is a city in",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: CityInMontana(billings)\nMontana includes the cities of Butte, Helena, and Missoula.\nFOL: CityInMontana(butte) & CityInMontana(helena) & CityInMontana(missoula)\nWhite Sulphur Springs and Butte are cities in the same state.\nFOL: CityInSameState(whiteSulphurSprings, butte)\nThe city of Pierre is not in Montana.\nFOL: -CityInMontana(pierre)\nAny city in Butte is not in Pierre.\nFOL: -CityInPierre(x) | x. CityInButte(x)\n</PREMISES>\n<CONCLUSION>\nMontana is home to the city of Missoula.\nFOL: CityInMontana(missoula)\n</CONCLUSION>",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: Billings(Montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Butte(Montana) & Helena(Montana) & Missoula(Montana)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: WhiteSulphurSprings(Montana) & Butte(Montana)\nTEXT: The city of Pierre is not in Montana.\nFOL: -Pierre(Montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (Butte(x) -> -Pierre(x))\n</PREMISES>\n<CONCLUSION>\nMontana is home to the city of Missoula.\nFOL: Montana(Missoula)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: Billings(Montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Butte(Montana) & Helena(Montana) & Missoula(Montana)\nTEXT: White Sulphur"
   ],
   [
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(Billings) & Montana(Billings)\nMontana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana(Butte) & Montana(Helena) & Montana(Missoula)\nWhite Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(WhiteSulphurSprings, Butte)\nThe city of Pierre is not in Montana.\nFOL: -Montana(Pierre)\nAny city in Butte is not in Pierre.\nFOL: -Butte(Pierre)\n</PREMISES>\n<CONCLUSION>\nMontana is home to the city of Missoula.\nFOL: Montana(Missoula) & Home(Missoula, Montana)\n</CONCLUSION>",
    "<PREMISES>\n<TEXT>Billings is a city in Montana.</TEXT>\n<FOL>City(x, Montana) -> Billings(x)</FOL>\n<TEXT>Montana includes the cities of Butte, Helena, and Missoula.</TEXT>\n<FOL>Montana -> (City(x, Montana) & Butte(x) & Helena(x) & Missoula(x))</FOL>\n<TEXT>White Sulphur Springs and Butte are cities in the same state.</TEXT>\n<FOL>SameState(WhiteSulphurSprings, Butte) -> True</FOL>\n<TEXT>The city of Pierre is not in Montana.</TEXT>\n<FOL>City(x, Montana) -> -Pierre(x)</FOL>\n<TEXT>Any city in Butte is not in Pierre.</TEXT>\n<FOL>Butte(x) -> -Pierre(x)</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Montana is home to the city of Missoula.</TEXT>\n<FOL>Montana -> Missoula(x)</FOL>\n<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings, mont",
    "<PREMISES>\n<TEXT>Billings is a city in Montana.</TEXT>\n<FOL>CityInMontana(billings)\n</FOL>\n\n<TEXT>Montana includes the cities of Butte, Helena, and Missoula.</TEXT>\n<FOL>CityInMontana(butte) & CityInMontana(helena) & CityInMontana(missoula) & IncludesCities(Montana)\n</FOL>\n\n<TEXT>White Sulphur Springs and Butte are cities in the same state.</TEXT>\n<FOL>CityInSameState(whiteSulphurSprings, butte)\n</FOL>\n\n<TEXT>The city of Pierre is not in Montana.</TEXT>\n<FOL>CityInMontana(pierre) & -CityInMontana(pierre)\n</FOL>\n\n<TEXT>Any city in Butte is not in Pierre.</TEXT>\n<FOL>CityInButte(x) & -CityInPierre(x)\n</FOL>\n\n</PREMISES>\n<CONCLUSION>\n<TEXT>Montana is home to the city of Missoula.</TEXT>\n<FOL>CityInMontana(missoula) & HomeToCity(Mont",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: Billings(Montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: (Butte & Helena & Missoula) \u2208 Montana\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: (WhiteSulphurSprings & Butte) \u2208 SameState\nTEXT: The city of Pierre is not in Montana.\nFOL: -Pierre \u2208 Montana\nTEXT: Any city in Butte is not in Pierre.\nFOL: \u2200x. (Butte(x) \u2192 -Pierre(x))\n</PREMISES>\n<CONCLUSION>\nMontana is home to the city of Missoula.\nFOL: Montana \u2208 HomeOf(Missoula)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: Billings(Montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: (Butte & Helena & Missoula) \u2208 Montana\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL:",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(Billings) & Montana\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana & (Butte & Helena & Missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State(WhiteSulphurSprings) & State(Butte) & SameState(WhiteSulphurSprings, Butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana & City(Pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: Butte & -Pierre\n</PREMISES>\n<CONCLUSION>\nMontana is home to the city of Missoula.\nFOL: Montana & HomeTo(Missoula)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(Billings) & Montana\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana & (Butte & Helena & Missoula)\nTEXT: White Sulphur Springs and"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(Billings) & State(Montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: State(Montana) & (City(Butte) & City(Helena) & City(Missoula))\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State(x) & City(WhiteSulphurSprings) & City(Butte) & (x = State(Montana))\nTEXT: The city of Pierre is not in Montana.\nFOL: -State(Montana) & City(Pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: City(x) & City(Butte) & -State(Montana) & -City(Pierre) & (x = Pierre)\nTEXT: Montana is home to the city of Missoula.\nFOL: State(Montana) & City(Missoula)\n</EVALUATE>",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(billings) & State(billings) Montana\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana & City(butte) & City(helena) & City(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: State(billings) & State(whiteSulphurSprings) & State(butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -State(pierre) & State(montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -City(pierre) & City(butte)\n</PREMISES>\n<CONCLUSION>\nMontana is home to the city of Missoula.\nFOL: State(montana) & City(missoula)\n</CONCLUSION>",
    "<PREMISES>\n<TEXT>Billings is a city in Montana.</TEXT>\n<FOL>CityOfBillings(montana)\n</FOL>\n<TEXT>Montana includes the cities of Butte, Helena, and Missoula.</TEXT>\n<FOL>CityOfButte(montana) & CityOfHelena(montana) & CityOfMissoula(montana)\n</FOL>\n<TEXT>White Sulphur Springs and Butte are cities in the same state.</TEXT>\n<FOL>CityOfWhiteSulphurSprings(state) & CityOfButte(state)\n</FOL>\n<TEXT>The city of Pierre is not in Montana.</TEXT>\n<FOL>-CityOfPierre(montana)\n</FOL>\n<TEXT>Any city in Butte is not in Pierre.</TEXT>\n<FOL>all x. (CityOf(x) & CityOfButte(x) & -CityOf(x, pierre))\n</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Montana is home to the city of Missoula.</TEXT>\n<FOL>CityOfMissoula(montana)\n</FOL>\n</CONCLUSION>\n\n<E",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: Billings(Montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana -> Butte & Montana -> Helena & Montana -> Missoula\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(WhiteSulphurSprings, Butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -Pierre(Montana)\nTEXT: Any city in Butte is not in Pierre.\nFOL: Butte(x) -> -Pierre(x)\n</PREMISES>\n<CONCLUSION>\nMontana is home to the city of Missoula.\nFOL: Montana -> Missoula\n</CONCLUSION>",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: Billings(Montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana(x) -> (Butte(x) & Helena(x) & Missoula(x))\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: (WhiteSulphurSprings(x) & Butte(x)) -> (SameState(x, WhiteSulphurSprings, Butte))\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana(Pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -Butte(x) -> -Pierre(x)\n</PREMISES>\n<CONCLUSION>\nMontana is home to the city of Missoula.\nFOL: Montana(Missoula)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: Billings(Montana)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana(x) -> (Butte(x) & Helena(x) & Missoula"
   ],
   [
    "<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: CityInMontana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: CityInMontana(butte) & CityInMontana(helena) & CityInMontana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(whiteSulphurSprings, butte)\nTEXT: The city of Pierre is not in Montana.\nFOL: -CityInMontana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: all x. (CityInButte(x) -> -CityInPierre(x))\nTEXT: Montana is home to the city of Missoula.\nFOL: CityInMontana(missoula)\n</EVALUATE>",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(billings) & State(billings, Montana)\nMontana includes the cities of Butte, Helena, and Missoula.\nFOL: State(montana) & City(butte) & City(helena) & City(missoula)\nWhite Sulphur Springs and Butte are cities in the same state.\nFOL: State(sameState(billings, butte)) & City(whiteSulphurSprings) & City(butte)\nThe city of Pierre is not in Montana.\nFOL: -City(pierre) & State(pierre, not Montana)\nAny city in Butte is not in Pierre.\nFOL: all x. (City(x) & City(butte) & -City(pierre))\n</PREMISES>\n<CONCLUSION>\nMontana is home to the city of Missoula.\nFOL: State(montana) & City(missoula) & -City(pierre)\n</CONCLUSION>",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(billings) & State(billings, Montana)\nMontana includes the cities of Butte, Helena, and Missoula.\nFOL: State(montana) & City(butte) & City(helena) & City(missoula) & (City(butte) & City(helena) & City(missoula) & State(montana))\nWhite Sulphur Springs and Butte are cities in the same state.\nFOL: City(whitesulphrsprings) & City(butte) & State(whitesulphrsprings) & State(butte) & State(whitesulphrsprings) & State(butte)\nThe city of Pierre is not in Montana.\nFOL: City(pierre) & -State(pierre, montana)\nAny city in Butte is not in Pierre.\nFOL: City(butte) & -City(pierre) & City(butte) & -City(pierre)\n</PREMISES>\n<CONCLUSION>\nMontana is home to the city of Missoula.\nFOL: State(mont",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: CityInMontana(billings)\nMontana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana = { Butte, Helena, Missoula }\nWhite Sulphur Springs and Butte are cities in the same state.\nFOL: SameState(WhiteSulphurSprings, Butte)\nThe city of Pierre is not in Montana.\nFOL: -CityInMontana(pierre)\nAny city in Butte is not in Pierre.\nFOL: -CityInPierre(x) | x in Butte\n</PREMISES>\n<CONCLUSION>\nMontana is home to the city of Missoula.\nFOL: Montana = { Missoula }\n</EVALUATE>",
    "<PREMISES>\nBillings is a city in Montana.\nFOL: City(billings) & Montana(billings)\nTEXT: Montana includes the cities of Butte, Helena, and Missoula.\nFOL: Montana(butte) & Montana(helena) & Montana(missoula)\nTEXT: White Sulphur Springs and Butte are cities in the same state.\nFOL: (City(whiteSulphurSprings) & Montana(butte)) | (City(whiteSulphurSprings) & Montana(helena)) | (City(whiteSulphurSprings) & Montana(missoula))\nTEXT: The city of Pierre is not in Montana.\nFOL: -Montana(pierre)\nTEXT: Any city in Butte is not in Pierre.\nFOL: -Butte(pierre)\n</PREMISES>\n<CONCLUSION>\nMontana is home to the city of Missoula.\nFOL: Montana(missoula)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Billings is a city in Montana.\nFOL: City(billings) & Montana(billings)\nTEXT: Montana includes the cities of Butte, Helena"
   ]
  ]
 },
 {
  "index": 53,
  "responses": [
   [
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPT(x) | OPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: InternationalStudent(mike) & (F1Visa(mike) | J1Visa(mike)) & (F1Visa(mike) -> (CPT(mike) | OPT(mike)))\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPT(x) | OPT(x)))\nMike is an international student.\nFOL: InternationalStudent(mike)\nMike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\nFOL: F1Visa(mike)\n</CONCLUSION>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (ApplyCPT(x) | ApplyOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: ApplyCPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) & US(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & InternationalStudent(x) & US(x) -> (CPT(x) | OPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike) -> US(work)\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\nFOL: F1Visa(mike)\n</CONCLUSION>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) & US(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & US(x) & WorkInUS(x) -> (CPT(x) | OPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: Mike & WorkInUS(mike) -> CPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) & US(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for"
   ],
   [
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPT(x) | OPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: ApplyForCPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\nFOL: F1Visa(mike)\n</CONCLUSION>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) & US(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & US(x) & WorkInUS(x) -> (CPT(x) | OPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WorkInUS(mike) -> CPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\nFOL: F1Visa(mike)\n</CONCLUSION>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x, US) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & InternationalStudent(x, US) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike, US)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: ApplyForCPT(mike) -> WorkInUS(mike)\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\nFOL: F1Visa(mike)\n</CONCLUSION>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPT(x) | OPT(x)))\nMike is an international student.\nFOL: InternationalStudent(mike)\nMike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\nFOL: F1Visa(mike)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) & US(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & US(x) & NeedsToApply(x) -> (CPT(x) | OPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: NeedsToApply(mike) & WorkInUS(mike) -> CPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\nFOL: F1Visa(mike)\n</CONCLUSION>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x, US) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & InternationalStudent(x, US) -> (ApplyCPT(x) | ApplyOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike, US)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: ApplyCPT(mike) -> WorkInUS(mike)\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\nFOL: F1Visa(mike)\n</CONCLUSION>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPT(x) | OPT(x)))\nMike is an international student.\nFOL: InternationalStudent(mike)\nMike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\nFOL: F1Visa(mike)\n</CONCLUSION>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x, US) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudent(x, US) & F1Visa(x) -> (CPT(x) | OPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike, US)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x, US) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\n",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) & US(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & US(x) & NeedsCPT(x) -> (CPT(x) | OPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: NeedsCPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) & US(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants"
   ],
   [
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x, US) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x, US) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike, US)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: ApplyForCPT(mike) -> WorkInUS(mike)\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\nFOL: F1Visa(mike)\n</CONCLUSION>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPT(x) | OPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: InternationalStudent(mike) & CPT(mike) & -F1Visa(mike)\n</EVALUATE>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) & US(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & US(x) & WorkInUS(x) -> (CPT(x) | OPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike) & WorkInUS(mike)\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\nFOL: F1Visa(mike)\n</CONCLUSION>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPT(x) | OPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: InternationalStudent(mike) & (F1Visa(mike) | J1Visa(mike)) & (F1Visa(mike) -> (CPT(mike) | OPT(mike))) & CPT(mike)\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x, US) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudent(x, US) & F1Visa(x) -> (ApplyCPT(x) | ApplyOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike, US)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: ApplyCPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\nFOL: F1Visa(mike)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) & US(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & US(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: ApplyForCPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: all x. (InternationalStudent(x) & US(x) -> (F1Visa(x) | J1Visa(x)))\nFOL: all x. (F1Visa(x) & US(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nFOL: InternationalStudent(mike)\nFOL: Apply",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPT(x) | OPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: InternationalStudent(mike) -> (F1Visa(mike) | J1Visa(mike))\nTEXT: Mike has an F1 visa.\nFOL: F1Visa(mike)\n</EVALUATE>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) & US(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & US(x) & NeedsApply(x) -> (CPT(x) | OPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: NeedsApply(mike) & US(mike) & WantsWork(mike) -> CPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) & US(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x, US) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & InternationalStudent(x, US) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike, US)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: ApplyForCPT(mike) & (WorkInUS(mike) -> ApplyForCPT(mike))\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\nFOL: F1Visa(mike)\n</CONCLUSION>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) & US(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & US(x) & WorkInUS(x) -> (ApplyCPT(x) | ApplyOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: WorkInUS(mike) -> ApplyCPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has an F1 visa.\nFOL: F1Visa(mike)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 54,
  "responses": [
   [
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & InternationalStudent(x) -> (CPT(x) | OPT(x)))\nMike is an international student.\nFOL: InternationalStudent(mike)\nMike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has a J1 visa.\nFOL: -F1Visa(mike) & J1Visa(mike)\n</CONCLUSION>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & InternationalStudent(x) -> (CPT(x) | OPT(x)))\nMike is an international student.\nFOL: InternationalStudent(mike)\nMike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has a J1 visa.\nFOL: -F1Visa(mike) & J1Visa(mike)\n</CONCLUSION>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & InternationalStudent(x) -> (CPT(x) | OPT(x)))\nMike is an international student.\nFOL: InternationalStudent(mike)\nMike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has a J1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (ApplyCPT(x) | ApplyOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: ApplyCPT(mike)\n</PREMISES>\n\n<CONCLUSION>\nMike has a J1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Vis",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & InternationalStudent(x) -> (CPT(x) | OPT(x)))\nMike is an international student.\nFOL: InternationalStudent(mike)\nMike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has a J1 visa.\nFOL: -F1Visa(mike) & J1Visa(mike)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & InternationalStudent(x) -> (CPT(x) | OPT(x)))\nMike is an international student.\nFOL: InternationalStudent(mike)\nMike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has a J1 visa.\nFOL: -F1Visa(mike) & J1Visa(mike)\n</CONCLUSION>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & InternationalStudent(x) -> (CPT(x) | OPT(x)))\nMike is an international student.\nFOL: InternationalStudent(mike)\nMike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike)\n</PREMISES>\n\n<CONCLUSION>\nMike has a J1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: F1Visa(mike) | J1Visa(mike)\nTEXT: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (ApplyCPT(x) | ApplyOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: ApplyCPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has a J1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: Mike has a J1 visa.\n</EVALUATE>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x, US) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudent(x, US) & F1Visa(x) -> (CPT(x) | OPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike, US)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: Mike -> CPT\n</PREMISES>\n<CONCLUSION>\nMike has a J1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x, US) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\n",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) & US(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & US(x) & WorkInUS(x) -> (ApplyCPT(x) | ApplyOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: ApplyCPT(mike) & WorkInUS(mike)\n</PREMISES>\n<CONCLUSION>\nMike has a J1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: Mike has a J1 visa.\nFOL: -F1Visa(mike) & J1Visa(mike)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPT(x) | OPT(x)))\nMike is an international student.\nFOL: InternationalStudent(mike)\nMike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has a J1 visa.\nFOL: -F1Visa(mike) & J1Visa(mike)\n</CONCLUSION>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & InternationalStudent(x) -> (CPT(x) | OPT(x)))\nMike is an international student.\nFOL: InternationalStudent(mike)\nMike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has a J1 visa.\nFOL: -F1Visa(mike) & J1Visa(mike)\n</CONCLUSION>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (ApplyCPT(x) | ApplyOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: ApplyCPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has a J1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Vis",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x, US) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (InternationalStudent(x, US) & F1Visa(x) -> (CPT(x) | OPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike, US)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: Mike -> CPT\n</PREMISES>\n<CONCLUSION>\nMike has a J1 visa.\nFOL: -F1Visa(mike) & J1Visa(mike)\n</CONCLUSION>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (ApplyCPT(x) | ApplyOPT(x)))\nMike is an international student.\nFOL: InternationalStudent(mike)\nMike needs to apply for CPT if he wants to work in the US.\nFOL: ApplyCPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has a J1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: InternationalStudent(mike) & ApplyCPT(mike) & (F1Visa(mike) | J1Visa(mike))\nFOL: -F1Visa(mike) | J1Visa(mike)\nFOL: J1Visa(mike)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x, US) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & InternationalStudent(x, US) -> (CPT(x) | OPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike, US)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has a J1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x, US) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\n",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & InternationalStudent(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nMike is an international student.\nFOL: InternationalStudent(mike)\nMike needs to apply for CPT if he wants to work in the US.\nFOL: ApplyForCPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has a J1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: Mike has a J1 visa.\nFOL: J1Visa(mike)\n</EVALUATE>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (ApplyForCPT(x) | ApplyForOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: ApplyForCPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has a J1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) & US(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & InternationalStudent(x) & US(x) -> (CPT(x) | OPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike) -> US(mike)\n</PREMISES>\n<CONCLUSION>\nMike has a J1 visa.\nFOL: -F1Visa(mike) & J1Visa(mike)\n</CONCLUSION>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPT(x) | OPT(x)))\nMike is an international student.\nFOL: InternationalStudent(mike)\nMike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike)\n</PREMISES>\n\n<CONCLUSION>\nMike has a J1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (CPT(x)"
   ],
   [
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) & US(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) & InternationalStudent(x) & US(x) -> (CPT(x) | OPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike) -> WorkInUS(mike)\n</PREMISES>\n<CONCLUSION>\nMike has a J1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: International students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) & US(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x, US) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x, US) & InternationalStudent(x, US) -> (CPT(x) | OPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike, US)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: CPT(mike) & WorkInUS(mike)\n</PREMISES>\n<CONCLUSION>\nMike has a J1 visa.\nFOL: -F1Visa(mike) & J1Visa(mike)\n</CONCLUSION>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nTEXT: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (ApplyCPT(x) | ApplyOPT(x)))\nTEXT: Mike is an international student.\nFOL: InternationalStudent(mike)\nTEXT: Mike needs to apply for CPT if he wants to work in the US.\nFOL: ApplyCPT(mike)\n</PREMISES>\n<CONCLUSION>\nMike has a J1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: (InternationalStudent(mike) & -F1Visa(mike)) | (-InternationalStudent(mike) & F1Visa(mike))\nFOL: ((ApplyCPT(mike) & -J1Visa(mike)) | (-ApplyCPT(mike) & J1Visa(mike)))\nFOL: -F1Visa(mike) & J1Visa",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (ApplyCPT(x) | ApplyOPT(x)))\nMike is an international student.\nFOL: InternationalStudent(mike)\nMike needs to apply for CPT if he wants to work in the US.\nFOL: ApplyCPT(mike)\n</PREMISES>\n\n<CONCLUSION>\nMike has a J1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: Mike has a J1 visa.\nFOL: -F1Visa(mike) & J1Visa(mike)\n</EVALUATE>",
    "<PREMISES>\nInternational students in US have either an F1 visa or a J1 visa.\nFOL: all x. (InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))\nAn international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nFOL: all x. (F1Visa(x) -> (ApplyCPT(x) | ApplyOPT(x)))\nMike is an international student.\nFOL: InternationalStudent(mike)\nMike needs to apply for CPT if he wants to work in the US.\nFOL: ApplyCPT(mike)\n</PREMISES>\n\n<CONCLUSION>\nMike has a J1 visa.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: Mike has a J1 visa.\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 55,
  "responses": [
   [
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If something is a bovine, then it is domesticated.\nFOL: Alligator(ted) -> Domesticated(ted)\nTEXT: Ted is not domesticated.\nFOL: -Domesticated(ted)\nTEXT: Ted is not a cow.\nFOL: -Cow(ted)\nTEXT: Ted is not a pet.\nFOL: -Pet(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n",
    "<PREMISES>\nall x. (Bovine(x) -> Domesticated(x))\nexists x. (Pet(x) & Cows(x))\nall x. (Bovine(x) -> Domesticated(x))\n-Alligator(x)\nTed(x) & Alligator(Ted(x))\n</PREMISES>\n<CONCLUSION>\n-Alligator(Ted) & Pet(Ted)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cows(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cows(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: -Alligator(x) | Domesticated(x)\nTEXT: Ted is an aligator.\nFOL: Ted(x) & Alligator(Ted(x))\nTEXT: Ted is a pet.\nFOL: -Alligator(Ted) & Pet(Ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ted is an alligator.\nFOL: -Domesticated(ted)\nTEXT: Ted is a pet.\nFOL: Domesticated(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(Ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n"
   ],
   [
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(Ted)\n</PREMISES>\n\n<CONCLUSION>\nTed is a pet.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ted is an alligator.\nFOL: -Domesticated(Ted)\nTEXT: Ted is a pet.\nFOL: Domesticated(Ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If something is a bovine, then it is domesticated.\nFOL: -Domesticated(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n\n<CONCLUSION>\nTed is a pet.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n\n<CONCLUSION>\nTed is a pet.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ted is an aligator.\nFOL: -Domesticated(ted)\nTEXT: Ted is a pet.\nFOL: Domesticated(ted)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ted is an alligator.\nFOL: -Domesticated(ted) & Alligator(ted)\nTEXT: Ted is a pet.\nFOL: -Alligator(ted) & Pet(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ted is an aligator.\nFOL: -Pet(ted)\nTEXT: Ted is a pet.\nFOL: -Alligator(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ted is an alligator.\nFOL: -Domesticated(ted)\nTEXT: Ted is a pet.\nFOL: -Alligator(ted)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nall x. (Bovine(x) -> Domesticated(x))\nexists x. (Pet(x) & Cow(x))\nall x. (Bovine(x) -> Domesticated(x))\nall x. (Alligator(x) -> -Domesticated(x))\nTed is an Alligator\n</PREMISES>\n<CONCLUSION>\n-Alligator(Ted) & Pet(Ted)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(Ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ted is an alligator.\nFOL: -Domesticated(Ted)\nTEXT: Ted is a pet.\nFOL: Domesticated(Ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ted is an alligator.\nFOL: -Domesticated(ted)\nTEXT: Ted is a pet.\nFOL: -Alligator(ted) & Pet(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(Ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\n"
   ],
   [
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n\n<CONCLUSION>\nTed is a pet.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ted is an alligator.\nFOL: -Domesticated(ted)\nTEXT: Ted is a pet.\nFOL: Domesticated(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n\n<CONCLUSION>\nTed is a pet.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\nTEXT: If something is a bovine, then it is domesticated.\nFOL: Bovine(ted) -> Domesticated(ted)\nTEXT: No domesticated animals are alligators.\nFOL: -Domesticated(ted) -> -Alligator(ted)\nTEXT: Ted is a pet.\nFOL: Pet(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ted is an alligator.\nFOL: -Domesticated(ted)\nTEXT: Ted is a pet.\nFOL: Domesticated(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ted is an alligator.\nFOL: -Domesticated(ted) & Alligator(ted)\nTEXT: Ted is a pet.\nFOL: -Alligator(ted) & Pet(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ted is an alligator.\nFOL: -Domesticated(ted)\nTEXT: Ted is a pet.\nFOL: Domesticated(ted)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 56,
  "responses": [
   [
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet and a cow.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet and a cow.\nFOL: (Pet(ted) & Cow(ted))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Bovine(x) -> Domesticated(x))\nexists x. (Pet(x) & Cows(x))\nall x. (Bovine(x) -> Domesticated(x))\nall x. (Not Domesticated(x) -> NotAlligator(x))\nTed(x)\n</PREMISES>\n<CONCLUSION>\nexists x. (Pet(x) & Cows(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Bovine(x) -> Domesticated(x))\nexists x. (Pet(x) & Cows(x))\nall x. (Bovine(x) -> Domesticated(x))\n-Alligator(x)\nTed(x) & Alligator(Ted)\n</PREMISES>\n<CONCLUSION>\n-Alligator(Ted) & Pet(Ted) & Bovine(Ted)\n</CONCLUSION>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet and a cow.\nFOL: (Pet(ted) & Cow(ted))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n\n<CONCLUSION>\nTed is a pet and a cow.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</CONCLUSION>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</CONCLUSION>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL:",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n\n<CONCLUSION>\nTed is a pet and a cow.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</CONCLUSION>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n\n<CONCLUSION>\nTed is a pet and a cow.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ted is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n\n<CONCLUSION>\nTed is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Bovine(x) -> Domesticated(x))\nexists x. (Pet(x) & Cow(x))\nall x. (Bovine(x) -> Domesticated(x))\n- Domesticated(Alligator)\nTed (Alligator)\n</PREMISES>\n<CONCLUSION>\nexists x. (Pet(x) & Bovine(x))\n</CONCLUSION>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</CONCLUSION>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</CONCLUSION>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Bovine(x) -> Domesticated(x))\nexists x. (Pet(x) & Cow(x))\nall x. (Bovine(x) -> Domesticated(x))\nall x. (Alligator(x) -> -Domesticated(x))\nTed is Alligator(ted)\n</PREMISES>\n<CONCLUSION>\n-Alligator(ted) & exists x. (Pet(x) & Cow(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Bovine(x) -> Domesticated(x))\nexists x. (Pet(x) & Cow(x))\nall x. (Bovine(x) -> Domesticated(x))\n-Alligator(x)\nTed is an aligator.\n</PREMISES>\n<CONCLUSION>\n-Alligator(Ted)\nexists x. (Pet(x) & Cow(x))\nall x. (Bovine(x) -> Domesticated(x))\n-Alligator(Ted)\nexists x. (Pet(x) & Cow(x))\nall x. (Bovine(x) -> Domesticated(x))\nTed is a pet and a cow.\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</CONCLUSION>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(Ted)\n</PREMISES>\n\n<CONCLUSION>\nTed is a pet and a cow.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ted is a pet and a cow.\nFOL: Pet(Ted) & Cow(Ted)\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n\n<CONCLUSION>\nTed is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</CONCLUSION>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet and a cow.\nFOL: Pet(ted) & Cow(ted)\n</CONCLUSION>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nTed is a pet and a cow.\nFOL: (Pet(ted) & Cow(ted))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL"
   ]
  ]
 },
 {
  "index": 57,
  "responses": [
   [
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nSome pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nIf something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nNo domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTed is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nIf Ted is a cow, then Ted is not a pet.\nFOL: (Cow(ted) -> -Pet(ted))\n</CONCLUSION>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n\n<CONCLUSION>\nIf Ted is a cow, then Ted is not a pet.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: (Ted(Cow) -> -Pet(ted))\n</EVALUATE>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nIf Ted is a cow, then Ted is not a pet.\nFOL: (Cow(ted) -> -Pet(ted))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Bovine(x) -> Domesticated(x))\nexists x. (Pet(x) & Cow(x))\nall x. (Bovine(x) -> Domesticated(x))\nall x. (Animal(x) -> -Alligator(x))\nTed(x)\n</PREMISES>\n<CONCLUSION>\nTed(x) -> -Pet(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Bovine(x) -> Domesticated(x))\nexists x. (Pet(x) & Cows(x))\nall x. (Bovine(x) -> Domesticated(x))\n- Domesticated(Alligator)\nTed(Alligator)\n</PREMISES>\n<CONCLUSION>\n(all x. (Cows(x) -> -Pet(x)))\nTed(Cow) -> -Ted(Pet)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Bovine(x) -> Domesticated(x))\nexists x. (Pet(x) & Cows(x))\nall x. (Bovine(x) -> Domesticated(x))\n- all x. (Domesticated(x) & Alligator(x))\nTed (Alligator)\n</PREMISES>\n<CONCLUSION>\nTed (Bovine) -> -Pet(Ted)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cows(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cows(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) & Alligator(x)) -> False\nTEXT: Ted is an aligator.\nFOL: Ted (Alligator)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Ted (Bovine) -> -Pet(Ted)\n</EVAL",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nIf Ted is a cow, then Ted is not a pet.\nFOL: (Cow(ted) -> -Pet(ted))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Bovine(x) -> Domesticated(x))\nexists x. (Pet(x) & Cow(x))\nall x. (Bovine(x) -> Domesticated(x))\n- all x. (Domesticated(x) & Alligator(x))\nTed (Alligator)\n</PREMISES>\n<CONCLUSION>\nTed (Cow) -> -Pet(Ted)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: - all x. (Domesticated(x) & Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Ted (Alligator)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Ted (Cow) -> -Pet(Ted)\n</EVALUATE>",
    "<PREMISES>\nall x. (Bovine(x) -> Domesticated(x))\nexists x. (Pet(x) & Cows(x))\nall x. (Bovine(x) -> Domesticated(x))\nall x. (Animal(x) -> -Alligator(x))\nTed (Alligator)\n</PREMISES>\n<CONCLUSION>\nTed (Bovine) -> -Pet(Ted)\n</CONCLUSION>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nIf Ted is a cow, then Ted is not a pet.\nFOL: (Cow(ted) -> -Pet(ted))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nIf Ted is a cow, then Ted is not a pet.\nFOL: (Cow(ted) -> -Pet(ted))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals",
    "<PREMISES>\nall x. (Bovine(x) -> Domesticated(x))\nexists x. (Pet(x) & Cow(x))\nall x. (Bovine(x) -> Domesticated(x))\n- Domesticated(Alligator)\nTed (Alligator)\n</PREMISES>\n<CONCLUSION>\nTed (Cow) -> -Pet(Ted)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: - Domesticated(Alligator)\nTEXT: Ted is an aligator.\nFOL: Ted (Alligator)\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: Ted (Cow) -> -Pet(Ted)\n</EVALUATE>",
    "<PREMISES>\nall x. (Bovine(x) -> Domesticated(x))\nexists x. (Pet(x) & Cows(x))\nall x. (Bovine(x) -> Domesticated(x))\nall x. (NonDomesticated(x) -> -Alligator(x))\nTed(Alligator)\n</PREMISES>\n<CONCLUSION>\nall x. (Ted(x) -> -Pet(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Bovine(x) -> Domesticated(x))\nexists x. (Pet(x) & Cow(x))\nall x. (Bovine(x) -> Domesticated(x))\n- all x. (Domesticated(x) & Alligator(x))\nTed (Alligator)\n</PREMISES>\n<CONCLUSION>\nTed (Cow) -> -Pet(Ted)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Bovine(x) -> Domesticated(x))\nexists x. (Pet(x) & Cows(x))\nall x. (Bovine(x) -> Domesticated(x))\n- Domesticated(Alligator)\nTed(Alligator)\n</PREMISES>\n<CONCLUSION>\nTed(Cow) -> -Pet(Ted)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Bovine(x) -> Domesticated(x))\nexists x. (Pet(x) & Cow(x))\nall x. (Bovine(x) -> Domesticated(x))\n- all x. (Domesticated(x) & Alligator(x))\nTed (Alligator)\n</PREMISES>\n<CONCLUSION>\nTed (Cow) -> - Ted (Pet)\n</CONCLUSION>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nIf Ted is a cow, then Ted is not a pet.\nFOL: (Cow(ted) -> -Pet(ted))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If Ted is a cow, then Ted is not a pet.\nFOL: (Cow(ted) -> -Pet(ted))\nTEXT: If Ted is a cow, then",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an alligator.\nFOL: Alligator(Ted)\n</PREMISES>\n<CONCLUSION>\nIf Ted is a cow, then Ted is not a pet.\nFOL: (Ted(Cow) -> -Pet(Ted))\n</CONCLUSION>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nIf Ted is a cow, then Ted is not a pet.\nFOL: (Cow(ted) -> -Pet(ted))\n</CONCLUSION>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(Ted)\n</PREMISES>\n\n<CONCLUSION>\nIf Ted is a cow, then Ted is not a pet.\nFOL: (Cow(Ted) -> -Pet(Ted))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Bovine(x) -> Domesticated(x))\nexists x. (Pet(x) & Cows(x))\nall x. (Bovine(x) -> Domesticated(x))\nall x. (Animal(x) & Domesticated(x) -> -Alligator(x))\nTed (Alligator(ted))\n</PREMISES>\n<CONCLUSION>\nTed (Bovine(ted)) -> -Pet(ted)\n</CONCLUSION>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(Ted)\n</PREMISES>\n<CONCLUSION>\nIf Ted is a cow, then Ted is not a pet.\nFOL: (Cow(Ted) -> -Pet(Ted))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Bovine(x) -> Domesticated(x))\nexists x. (Pet(x) & Cow(x))\nall x. (Bovine(x) -> Domesticated(x))\n-Alligator(x)\nTed(Alligator(ted))\n</PREMISES>\n<CONCLUSION>\n(Ted(Cow(ted)) -> -Pet(ted))\n</CONCLUSION>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(Ted)\n</PREMISES>\n<CONCLUSION>\nIf Ted is a cow, then Ted is not a pet.\nFOL: (Cow(Ted) -> -Pet(Ted))\n</CONCLUSION>",
    "<PREMISES>\nAll cows are bovines.\nFOL: all x. (Cow(x) -> Bovine(x))\nTEXT: Some pets are cows.\nFOL: exists x. (Pet(x) & Cow(x))\nTEXT: If something is a bovine, then it is domesticated.\nFOL: all x. (Bovine(x) -> Domesticated(x))\nTEXT: No domesticated animals are alligators.\nFOL: all x. (Domesticated(x) -> -Alligator(x))\nTEXT: Ted is an aligator.\nFOL: Alligator(ted)\n</PREMISES>\n<CONCLUSION>\nIf Ted is a cow, then Ted is not a pet.\nFOL: (Ted(Cow) -> -Pet(ted))\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 58,
  "responses": [
   [
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven)\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment($42.3billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(hasConstituentCollegesAndSchools(27))\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollegesAtYale(BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment(42.3Billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(has27ConstituentCollegesAndSchools)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollegesAtYale(BenjaminFranklinCollege & BerkeleyCollege & BranfordCollege & DavenportCollege & EzraStilesCollege & GraceHopperCollege & JonathanEdwardsCollege & MorseCollege & PauliMurrayCollege & Pi",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yale)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yale, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAt($42.3 billion, yale)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedIntoConstituentCollegesAndSchools(yale, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yale, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, Morse",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowmentValue($42.3 billion))\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(hasConstituentCollegesAndSchools(27))\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialColleges(atYale: [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege,",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment($42.3Billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(organizedInto27CollegesAndSchools)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollegesAtYale = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, Pi"
   ],
   [
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(YaleUniversity, 1716)\nYale university's endowment was valued at $42.3 billion.\nFOL: ValuedAtEndowment(YaleUniversity, 42.3)\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: ConstituentCollegesAndSchools(YaleUniversity, 27)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(YaleUniversity)\n</PREMISES>\n<CONCLUSION>\nA private Ivy League research university moved to New Haven.\nFOL: MovedToNewHaven(isPrivateIvyLeagueResearchUniversity,",
    "<PREMISES>\nall x. (PrivateIvyLeagueResearchUniversity(x) -> PrivatelyOwned(x))\nall x. (YaleUniversity(x) -> MovedToNewHaven(x))\nall x. (YaleUniversity(x) -> HasEndowment(x) & ValuedAt(x))\nall x. (YaleUniversity(x) -> OrganizedInto CollegesAndSchools(x))\nlist ResidentialCollege(x) of YaleUniversity\nBenjaminFranklinCollege(x) & BerkeleyCollege(x) & BranfordCollege(x) & DavenportCollege(x) & EzraStilesCollege(x) & GraceHopperCollege(x) & JonathanEdwardsCollege(x) & MorseCollege(x) & PauliMurrayCollege(x) & PiersonCollege(x) & SaybrookCollege(x) & SillimanCollege(x) & TimothyDwightCollege(x) & TrumbullCollege(x)\n</PREMISES>\n<CONCLUSION>\nall x. (PrivateIvyLeagueResearchUniversity(x) -> MovedToNewHaven(x))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: YaleUniversity -> PrivatelyOwned\nTEXT: Yale University moved to New Haven in 1716.\n",
    "<PREMISES>\nall x. YaleUniversity(x) -> PrivateIvyLeagueResearchUniversity(x)\nYaleUniversity -> NewHaven\n$42.3 billion -> Endowment(x)\nall x. YaleUniversity(x) -> ConstituentColleges(x)\n[BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege] -> ResidentialColleges(x)\n</PREMISES>\n<CONCLUSION>\nPrivateIvyLeagueResearchUniversity -> NewHaven\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: YaleUniversity(x) & PrivateIvyLeagueResearchUniversity(x)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: YaleUniversity(x) & NewHaven(x) & 1716(x)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(x) & BillionDollarEndowment(x)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(x) & 27(x) & ConstituentColleges(x)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(x) & YaleUniversity(x)\nTEXT: A private Ivy League research university moved to New Haven.\nFOL: (PrivateIvyLeagueResearchUniversity",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment($42.3billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(hasConstituentCollegesAndSchools(27))\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialColleges(atYale) = [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurray"
   ],
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment($42.3billion))\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(has27CollegesAndSchools)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialColleges(atYale) = { BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, Pi",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValuedAt($42.3Billion, yaleUniversity)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: OrganizedInto27ConstituentCollegesAndSchools(yaleUniversity)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollegesAtYale(BenjaminFranklinCollege & BerkeleyCollege & BranfordCollege & DavenportCollege & EzraStilesCollege & GraceHopperCollege & Jonathan",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yaleUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yaleUniversity, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: ValuedAtEndowment(yaleUniversity, 4230000000)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: ConstituentCollegesAndSchools(yaleUniversity, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yaleUniversity, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwards",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven)\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowmentValue($42.3billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(has27ConstituentCollegesAndSchools)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollegesAtYale(BenjaminFranklinCollege & BerkeleyCollege & BranfordCollege & DavenportCollege & EzraStilesCollege & GraceHopperCollege & JonathanEdwardsCollege & MorseCollege & PauliMurrayCollege & PiersonCollege",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yale)\nYale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yale, 1716)\nYale university's endowment was valued at $42.3 billion.\nFOL: ValuedAtEndowment(yale, 42.3)\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: ConstituentCollegesAndSchools(yale, 27)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollegesAtYale(benjaminFranklinCollege & berkeleyCollege & branfordCollege & davenportCollege & ezraStilesCollege & graceHopperCollege & jonathanEdwardsCollege & morseCollege & pauli"
   ],
   [
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven)\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment($42.3 billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(organizedInto27CollegesAndSchools)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollegesAtYale(BenjaminFranklinCollege & BerkeleyCollege & BranfordCollege & DavenportCollege & EzraStilesCollege & GraceHopperCollege & JonathanEdwardsCollege & MorseCollege & PauliMurrayCollege & PiersonCollege & Saybrook",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yale)\nYale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yale, 1716)\nYale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValue(yale, 42.3 billion)\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: ConstituentCollegesAndSchools(yale, 27)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yale, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, Pi",
    "<PREMISES>\nall x. (PrivateIvyLeagueResearchUniversity(x) -> PrivatelyOwned(x))\nall x. (YaleUniversity(x) -> NewHaven(x))\n$42.3 billion = endowment(yaleUniversity)\nall x. (YaleUniversity(x) -> ConstituentCollegesAndSchools(x))\nBenjaminFranklinCollege(yaleUniversity)\nBerkeleyCollege(yaleUniversity)\nBranfordCollege(yaleUniversity)\nDavenportCollege(yaleUniversity)\nEzraStilesCollege(yaleUniversity)\nGraceHopperCollege(yaleUniversity)\nJonathanEdwardsCollege(yaleUniversity)\nMorseCollege(yaleUniversity)\nPauliMurrayCollege(yaleUniversity)\nPiersonCollege(yaleUniversity)\nSaybrookCollege(yaleUniversity)\nSillimanCollege(yaleUniversity)\nTimothyDwightCollege(yaleUniversity)\nTrumbullCollege(yaleUniversity)\n</PREMISES>\n<CONCLUSION>\nall x. (PrivateIvyLeagueResearchUniversity(x) -> NewHaven(x))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (YaleUniversity(x) -> PrivateIvyLeagueResearchUniversity(x))\nTEXT:",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yale)\nYale University moved to New Haven in 1716.\nFOL: NewHaven(yale)\nYale university's endowment was valued at $42.3 billion.\nFOL: Endowment($42.3Billion, yale)\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: ConstituentCollegesAndSchools(27, yale)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(list([BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, S",
    "<PREMISES>\nall x. (PrivateIvyLeagueUniversity(x) -> PrivateUniversity(x))\nall x. (YaleUniversity(x) -> MovedToNewHaven(x))\n$42.3 billion = endowmentValue(YaleUniversity)\nall x. (YaleUniversity(x) -> ConstituentColleges(x))\nBenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege = residentialColleges(YaleUniversity)\n</PREMISES>\n<CONCLUSION>\nall x. (PrivateIvyLeagueUniversity(x) -> PrivateUniversity(x))\nall x. (MovedToNewHaven(x) -> PrivateUniversity(x))\n$42.3 billion = endowmentValue(x) where x is a PrivateUniversity\nall x. (YaleUniversity(x) -> ConstituentColleges(x))\nBenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, Pauli"
   ],
   [
    "<PREMISES>\nall x. (PrivateUniversity(x) -> IvyLeague(x) & ResearchUniversity(x))\nYaleUniversity moved to NewHaven in 1716.\n$42.3 billion = YaleUniversity'sEndowment.\nall x. (YaleUniversity(x) -> Organized(x) & Organized(x) = 27(x))\nlist x of ResidentialCollege(x) at YaleUniversity: \n  - BenjaminFranklinCollege\n  - BerkeleyCollege\n  - BranfordCollege\n  - DavenportCollege\n  - EzraStilesCollege\n  - GraceHopperCollege\n  - JonathanEdwardsCollege\n  - MorseCollege\n  - PauliMurrayCollege\n  - PiersonCollege\n  - SaybrookCollege\n  - SillimanCollege\n  - TimothyDwightCollege\n  - TrumbullCollege\n</PREMISES>\n<CONCLUSION>\nprivate IvyLeagueResearchUniversity moved to NewHaven.\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yale)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yale, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: EndowmentValuedAt(yale, 42.3Billion)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: ConstituentCollegesAndSchools(yale, 27)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yale, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment($42.3billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(hasConstituentCollegesAndSchools(27))\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: YaleUniversity(residentialColleges(list(BenjaminFranklinCollege,BerkeleyCollege,BranfordCollege,DavenportCollege,EzraStilesCollege,GraceHopperCollege,JonathanEdwardsCollege,MorseCollege,PauliMurray",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: PrivateIvyLeagueResearchUniversity(yale)\nYale University moved to New Haven in 1716.\nFOL: MovedToNewHaven(yale, 1716)\nYale university's endowment was valued at $42.3 billion.\nFOL: Endowment(yale, 42.3)\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: ConstituentCollegesAndSchools(yale, 27)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialColleges(yale, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege",
    "<PREMISES>\nall x. YaleUniversity(x) -> PrivateIvyLeagueResearchUniversity(x)\nYaleUniversity -> NewHaven\n$42.3 billion -> Endowment(x)\nall x. YaleUniversity(x) -> ConstituentColleges(x)\nBenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege -> ResidentialColleges(x)\n</PREMISES>\n<CONCLUSION>\nPrivateIvyLeagueResearchUniversity(x) -> NewHaven(x)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 59,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowmentValue(42.3billion))\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(hasConstituentCollegesAndSchools(27))\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialColleges(atYale) = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, Morse",
    "<PREMISES>\nYaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYaleUniversity(movedToNewHaven, 1716)\nYaleUniversity(endowmentValue, $42.3 billion)\nall x. (YaleUniversity(x) -> OrganizedInto27ConstituentCollegesAndSchools(x))\nall x. (ResidentialCollege(x) -> MemberOfYaleUniversity(x))\nBenjaminFranklinCollege(isResidentialCollege)\nBerkeleyCollege(isResidentialCollege)\nBranfordCollege(isResidentialCollege)\nDavenportCollege(isResidentialCollege)\nEzraStilesCollege(isResidentialCollege)\nGraceHopperCollege(isResidentialCollege)\nJonathanEdwardsCollege(isResidentialCollege)\nMorseCollege(isResidentialCollege)\nPauliMurrayCollege(isResidentialCollege)\nPiersonCollege(isResidentialCollege)\nSaybrookCollege(isResidentialCollege)\nSillimanCollege(isResidentialCollege)\nTimothyDwightCollege(isResidentialCollege)\nTrumbullCollege(isResidentialCollege)\n</PREMISES>\n<CONCLUSION>\nall x. (EducationalInstitution(x) -> (EndowmentValue(x) > EndowmentValue(YaleUniversity)))\n</CONCLUSION>",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment($42.3 billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(isOrganizedInto27CollegesAndSchools)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialColleges(atYale) = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege,",
    "<PREMISES>\nYaleUniversity(isPrivateIvyLeagueResearchUniversity).\nYaleUniversity(movedToNewHaven, 1716).\nYaleUniversity(endowmentValuedAt, 42.3BillionDollars).\nYaleUniversity(hasConstituentCollegesAndSchools, 27).\nYaleUniversity(hasResidentialColleges, [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege]).\n</PREMISES>\n<CONCLUSION>\nYaleUniversity(hasLargestUniversityEndowment, AnyEducationalInstitution).\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL:",
    "<PREMISES>\nYaleUniversity(x).-Private(IvyLeagueResearchUniversity(x)).\nYaleUniversity(x).-MovedToNewHaven(1716).\nValuedEndowment(x, $42.3billion).\nConstituentCollegesAndSchools(x, 27).\nResidentialCollege(x).-YaleUniversity(x).\nBenjaminFranklinCollege(x).-ResidentialCollege(x).\nBerkeleyCollege(x).-ResidentialCollege(x).\nBranfordCollege(x).-ResidentialCollege(x).\nDavenportCollege(x).-ResidentialCollege(x).\nEzraStilesCollege(x).-ResidentialCollege(x).\nGraceHopperCollege(x).-ResidentialCollege(x).\nJonathanEdwardsCollege(x).-ResidentialCollege(x).\nMorseCollege(x).-ResidentialCollege(x).\nPauliMurrayCollege(x).-ResidentialCollege(x).\nPiersonCollege(x).-ResidentialCollege(x).\nSaybrookCollege(x).-ResidentialCollege(x).\nSillimanCollege(x).-ResidentialCollege(x).\nTimothyDwightCollege(x).-ResidentialCollege(x).\nTrumbullCollege(x).-ResidentialCollege(x).\n</PREMISES>\n<CONCLUSION>\nValuedEndowment"
   ],
   [
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment($42.3 billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(organizedInto27ConstituentCollegesAndSchools)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollegesAtYale(BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege,",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHavenIn1716)\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowmentValue($42.3 billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(organizedInto27ConstituentCollegesAndSchools)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollegesAtYale(BenjaminFranklinCollege & BerkeleyCollege & BranfordCollege & DavenportCollege & EzraStilesCollege & GraceHopperCollege & JonathanEdwardsCollege & MorseCollege & PauliMurrayCollege",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHavenIn1716)\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowmentValue($42.3billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(hasConstituentCollegesAndSchools(27))\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialColleges(atYale) = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliM",
    "<PREMISES>\nall x. (PrivateIvyLeagueResearchUniversity(x) -> IsPrivate(x))\nYaleUniversity moved to NewHaven in 1716.\n$42.3 billion = endowment(yaleUniversity).\nall x. (ConstituentCollege(x) -> isConstituentOf(yaleUniversity(x)))\nBenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege : residentialCollegesAtYaleUniversity\n</PREMISES>\n<CONCLUSION>\nall x. (University(x) -> largestEndowment(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment($42.3Billion))\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(27CollegesAndSchools)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialColleges(Yale)\nTEXT: Yale University has the largest university endowment of any educational institution.\nFOL: YaleUniversity(largestUniversityEndowment)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowmentValuedAt(42.3Billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(organizedIntoConstituentCollegesAndSchools(27))\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: listOfResidentialCollegesAtYale = [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege,",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment($42.3billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(organizedInto27ConstituentCollegesAndSchools)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollegesAtYale = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurray",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment($42.3billion))\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(27 constituentCollegesAndSchools)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialColleges(yale) = { BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurray",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowmentValue($42.3 billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(organizedInto27ConstituentCollegesAndSchools)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollegesAtYale(BenjaminFranklinCollege & BerkeleyCollege & BranfordCollege & DavenportCollege & EzraStilesCollege & GraceHopperCollege & JonathanEdwardsCollege & MorseCollege & PauliMurrayCollege",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHavenIn1716)\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment($42.3billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(has27constituentcollegesandschools)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollegesAtYale = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege,"
   ],
   [
    "<PREMISES>\nall x. (IvyLeagueUniversity(x) -> PrivateUniversity(x))\nYaleUniversity moved to NewHaven in 1716.\n$42.3 billion = Endowment(x) -> BillionDollar(x)\nall x. (University(x) -> Colleges(x))\nYaleUniversity has 27 constituent colleges and schools.\nall x. (College(x) -> MemberOf(YaleUniversity))\nBenjaminFranklinCollege is a residential college at Yale.\nBerkeleyCollege is a residential college at Yale.\nBranfordCollege is a residential college at Yale.\nDavenportCollege is a residential college at Yale.\nEzraStilesCollege is a residential college at Yale.\nGraceHopperCollege is a residential college at Yale.\nJonathanEdwardsCollege is a residential college at Yale.\nMorseCollege is a residential college at Yale.\nPauliMurrayCollege is a residential college at Yale.\nPiersonCollege is a residential college at Yale.\nSaybrookCollege is a residential college at Yale.\nSillimanCollege is a residential college at Yale.\nTimothyDwightCollege is a residential college at Yale.\nTrumbullCollege is a residential college at Yale.\n</PREMISES>\n<CONCLUSION>\nall x. (University",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment($42.3billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(isOrganizedInto27ConstituentCollegesAndSchools)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: exists residentialCollege(x). YaleUniversity(hasResidentialCollege(x))\n</PREMISES>\n<CONCLUSION>\nYale University has the largest university endowment of any educational institution.\nFOL: YaleUniversity(hasLargestUniversityEnd",
    "<PREMISES>\nYaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYaleUniversity(movedToNewHavenIn1716)\nYaleUniversity(endowmentValueIs42.3BillionDollars)\nall x. (YaleUniversity(x) -> OrganizedInto27ConstituentCollegesAndSchools(x))\nall x. (ResidentialCollege(x) -> MemberOfYaleUniversity(x))\n</PREMISES>\n\n<CONCLUSION>\nall x. (University(x) -> endowmentValueIs42.3BillionDollars(x))\n</CONCLUSION>",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHavenIn1716)\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowmentValue($42.3billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(has27ConstituentCollegesAndSchools)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollegesAtYale(BenjaminFranklinCollege & BerkeleyCollege & BranfordCollege & DavenportCollege & EzraStilesCollege & GraceHopperCollege & JonathanEdwardsCollege & MorseCollege & PauliMurrayCollege &",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment($42.3 billion))\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(hasConstituentCollegesAndSchools(27))\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollegesAtYale(BenjaminFranklinCollege & BerkeleyCollege & BranfordCollege & DavenportCollege & EzraStilesCollege & GraceHopperCollege & JonathanEdwardsCollege & MorseCollege & Pauli"
   ],
   [
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowmentValue($42.3 billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(organizedInto27ConstituentCollegesAndSchools)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollegesAtYale(BenjaminFranklinCollege & BerkeleyCollege & BranfordCollege & DavenportCollege & EzraStilesCollege & GraceHopperCollege & JonathanEdwardsCollege & MorseCollege & PauliMurrayCollege",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment($42.3billion))\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(27 collegesAndSchools)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialColleges(yale) = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege,",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowmentValue($42.3billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(organizedIntoConstituentCollegesAndSchools(27))\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollegesAtYale(BenjaminFranklinCollege & BerkeleyCollege & BranfordCollege & DavenportCollege & EzraStilesCollege & GraceHopperCollege & JonathanEdwardsCollege & MorseCollege & PauliM",
    "<PREMISES>\nall x. Yale(x) -> Privat IvyLeagueResearchUniversity(x)\nYale(university) movedTo(NewHaven(university)) in 1716\nYale(university)'s Endowment(x) was valued at $42.3 billion\nall x. Yale(x) -> OrganizedIntoConstituentCollegesAndSchools(x)\nall x. ResidentialCollege(x) at Yale(x)\n</PREMISES>\n<CONCLUSION>\nall x. University(x) -> LargestUniversityEndowment(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IvyLeague(x) -> PrivateResearchUniversity(x))\nYaleUniversity moved to NewHaven in 1716.\n$42.3 billion = Endowment(YaleUniversity)\nall x. (ConstituentCollege(x) -> (ResidentialCollege(x) | YaleGraduateSchool(x) | ProfessionalSchool(x)))\nResidentialCollege BenjaminsFranklinCollege & ResidentialCollege BerkeleyCollege & ResidentialCollege BranfordCollege & ResidentialCollege DavenportCollege & ResidentialCollege EzraStilesCollege & ResidentialCollege GraceHopperCollege & ResidentialCollege JonathanEdwardsCollege & ResidentialCollege MorseCollege & ResidentialCollege PauliMurrayCollege & ResidentialCollege PiersonCollege & ResidentialCollege SaybrookCollege & ResidentialCollege SillimanCollege & ResidentialCollege TimothyDwightCollege & ResidentialCollege TrumbullCollege)\n</PREMISES>\n<CONCLUSION>\nEndowment(YaleUniversity) > Endowment(anyEducationalInstitution)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 60,
  "responses": [
   [
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHavenIn1716)\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowmentValue($42.3billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(has27ConstituentCollegesAndSchools)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollegesAtYale = { BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege,",
    "<PREMISES>\nall x. (PrivateIvyLeagueResearchUniversity(x) -> YaleUniversity(x))\nYaleUniversity(movedToNewHaven(1716))\nall x. (Endowment(x) -> 423000000000)\nall x. (ConstituentCollege(x) -> YaleUniversity(x))\n[BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, PiersonCollege, SaybrookCollege, SillimanCollege, TimothyDwightCollege, TrumbullCollege]\n</PREMISES>\n<CONCLUSION>\nPiersonCollege\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (PrivateIvyLeagueResearchUniversity(x) -> YaleUniversity(x))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: all x. (Endowment(x) -> 423000000000)\nTEXT: Yale University has been organized",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment(42.3billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(organizedInto27ConstituentCollegesAndSchools)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialColleges(atYale) = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliM",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment($42.3billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(hasConstituentCollegesAndSchools(27))\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollegeAtYale: BenjaminFranklinCollege | BerkeleyCollege | BranfordCollege | DavenportCollege | EzraStilesCollege | GraceHopperCollege | JonathanEdwardsCollege | MorseCollege | PauliMurrayCollege | PiersonCollege",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowmentValue($42.3billion))\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(hasConstituentCollegesAndSchools(27))\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollege(x) <- YaleUniversity(residentialCollege(x))\nTEXT: Pierson College is a residential college at Yale.\nFOL: PiersonCollege(isResidentialCollegeAtYale)\n</EVALUATE"
   ],
   [
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHavenIn1716)\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowmentValueIs$42.3Billion)\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(has27ConstituentCollegesAndSchools)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollegesAtYale = { BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHavenIn1716)\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowmentValueIs$42.3Billion)\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(has27ConstituentCollegesAndSchools)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollegesAtYale = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurray",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowmentValue($42.3billion))\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(hasConstituentCollegesAndSchools(27))\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollege(piersonCollege)\nTEXT: Pierson College is a residential college at Yale.\nFOL: residentialCollege(piersonCollege) & YaleUniversity(hasResidentialCollege(piersonCollege))\n</EVALUATE",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment($42.3 billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(hasConstituentCollegesAndSchools(27))\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollege(x) (x in [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege, Pi",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment($42.3 billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(hasConstituentCollegesAndSchools(27))\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollegesAtYale = [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege,"
   ],
   [
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowmentValue(42.3BillionDollars))\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(hasConstituentCollegesAndSchools(27))\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollege(yale) = { BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHavenIn1716)\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowmentValuedAt4290000000000)\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(has27ConstituentCollegesAndSchools)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollege1(isResidentialCollegeAtYale) & residentialCollege2(isResidentialCollegeAtYale) & residentialCollege3(isResidentialCollegeAtYale) & residentialCollege4(isResidentialCollegeAtYale) &",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment(42.3billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(organizedIntoConstituentCollegesAndSchools(27))\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollege Pierson\n</PREMISES>\n<CONCLUSION>\nPierson College is a residential college at Yale.\nFOL: -YaleUniversity(residentialCollege!= Pierson)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment(42.3Billion))\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(hasConstituentCollegesAndSchools(27))\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialColleges(yale) = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege,",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment(42.3billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(organizedInto27ConstituentCollegesAndSchools)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollegesAtYale: [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurray"
   ],
   [
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment($42.3 billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(organizedIntoConstituentCollegesAndSchools(27))\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollegesAtYale = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurray",
    "<PREMISES>\nall x. Yale(x) -> Private(x)\nYale(newhaven) -> 1716\nYale(endowment) -> 42.3 billion\nall x. Yale(x) -> 27\nsome x. (Yale(x) & ResidentialCollege(x))\nsome x. (Yale(x) & ResidentialCollege(x))\nsome x. (Yale(x) & ResidentialCollege(x))\nsome x. (Yale(x) & ResidentialCollege(x))\nsome x. (Yale(x) & ResidentialCollege(x))\nsome x. (Yale(x) & ResidentialCollege(x))\nsome x. (Yale(x) & ResidentialCollege(x))\nsome x. (Yale(x) & ResidentialCollege(x))\nsome x. (Yale(x) & ResidentialCollege(x))\nsome x. (Yale(x) & ResidentialCollege(x))\nsome x. (Yale(x) & ResidentialCollege(x))\nsome x. (Yale(x) & ResidentialCollege(x))\nsome x. (Yale(x) & ResidentialCollege(x))\nsome x. (Yale(x) & ResidentialCollege(x))\nsome x. (Yale(x) & ResidentialCollege(x))\nsome x. (Yale(x) & ResidentialCollege(x))\n",
    "<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nTEXT: Yale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment($42.3billion))\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(organizedInto27ConstituentCollegesAndSchools)\nTEXT: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollege Pierson\nTEXT: Pierson College is a residential college at Yale.\nFOL: -isPrivateIvyLeagueResearchUniversity\n</EVALUATE>",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment($42.3Billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(hasConstituentCollegesAndSchools(27))\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollegesAtYale(BenjaminFranklinCollege & BerkeleyCollege & BranfordCollege & DavenportCollege & EzraStilesCollege & GraceHopperCollege & JonathanEdwardsCollege & MorseCollege & PauliMurrayCollege &",
    "<PREMISES>\nall x. (University(x) -> Private(x) & IvyLeague(x) & ResearchUniversity(x))\nUniversity(yale) & MovedToNewHaven(yale, 1716)\n$42.3BillionEndowment(yale)\nall x. (University(x) -> OrganizedInto CollegesAndSchools(x))\nResidentialCollege(pierson) & University(yale)\n</PREMISES>\n<CONCLUSION>\nResidentialCollege(pierson) & University(yale)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Yale University is a private Ivy League research university.\nFOL: all x. (University(x) -> (Private(x) & IvyLeague(x) & ResearchUniversity(x)))\nTEXT: Yale University moved to New Haven in 1716.\nFOL: University(yale) & MovedToNewHaven(yale, 1716)\nTEXT: Yale university's endowment was valued at $42.3 billion.\nFOL: $42.3BillionEndowment(yale)\nTEXT: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: all x. (University(x)"
   ],
   [
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHavenIn1716)\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowmentValueIs$42.3Billion)\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(has27ConstituentCollegesAndSchools)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: ResidentialCollegesAtYale = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurray",
    "<PREMISES>\nall x. (PrivateIvyLeagueResearchUniversity(x) -> YaleUniversity(x))\nall x. (YaleUniversity(x) -> MovedToNewHaven(x, 1716))\nall x. (YaleUniversity(x) -> Endowment(x, 42.3)\nall x. (YaleUniversity(x) -> ConstituentCollegesAndSchools(x, 27))\nlist x. (ResidentialCollege(x, YaleUniversity(x)))\n</PREMISES>\n<CONCLUSION>\nResidentialCollege(pierson, YaleUniversity)\n</CONCLUSION>",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowmentValue($42.3billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(organizedInto27ConstituentCollegesAndSchools)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: listOfResidentialCollegesAtYale = [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege,",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHaven(1716))\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment($42.3Billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(organizedInto27ConstituentCollegesAndSchools)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialCollegesAtYale = [BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurray",
    "<PREMISES>\nYale University is a private Ivy League research university.\nFOL: YaleUniversity(isPrivateIvyLeagueResearchUniversity)\nYale University moved to New Haven in 1716.\nFOL: YaleUniversity(movedToNewHavenIn1716)\nYale university's endowment was valued at $42.3 billion.\nFOL: YaleUniversity(endowment($42.3billion))\nYale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nFOL: YaleUniversity(has27ConstituentCollegesAndSchools)\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nFOL: residentialColleges(atYale) = {BenjaminFranklinCollege, BerkeleyCollege, BranfordCollege, DavenportCollege, EzraStilesCollege, GraceHopperCollege, JonathanEdwardsCollege, MorseCollege, PauliMurrayCollege"
   ]
  ]
 },
 {
  "index": 61,
  "responses": [
   [
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nBadults piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults\n</PREMISES>\n<CONCLUSION>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom, StarringMembersOf(Pappy's))\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Badults(PilotedInJuly2013OnBBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: AndrewCollins(ScriptEditorFor(Badults))\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: AndrewCollins(ScriptEditorFor(Series",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nBadults piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults\n</PREMISES>\n<CONCLUSION>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom) & MemberOfPappys(Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Badults(PilotedInJuly2013) & BBCThree(Badults)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(TheSecretDudeSociety) & Badults\nTEXT: Andrew Collins was the script editor for Badults\nFOL: AndrewCollins(ScriptEditor(Badults))\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nBadults piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults\n</PREMISES>\n<CONCLUSION>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom, starringMembersOfPappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Badults(pilotedInJuly2013, onBBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(TheSecretDudeSociety, forBadults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: AndrewCollins(scriptEditor, forBadults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: AndrewCollins(scriptEditor, forSeries",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nBadults piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults\n</PREMISES>\n<CONCLUSION>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcomSeries, starringMembersOfPappy's)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Badults(pilotedInJuly2013, onBBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The SecretDudeSociety\", forBadults)\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: AndrewCollins(scriptEditorForBadults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: AndrewCollins(scriptEditorFor(S",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nBadults piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults\n</PREMISES>\n<CONCLUSION>\nAndrew Collins was the script editor for a British Sitcom series starring members of Pappy's.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(x)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\nTEXT: Andrew Collins was the script editor for a British Sitcom series starring members of Pappy's.\nFOL: ScriptEditor(x, AndrewCollins) &"
   ],
   [
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nBadults piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults\n</PREMISES>\n<CONCLUSION>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(SitcomSeries, British, starring members of Pappy's)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Badults(piloted, July2013, SitcomSeries, British, on BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nBadults piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults\n</PREMISES>\n<CONCLUSION>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults, MembersOfPappy)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(SeriesWithWorkingTitle, AndrewCollins)\n",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom)\nBadults piloted in July 2013 on BBC Three.\nFOL: Badults(pilotedInJuly2013)\nThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nAndrew Collins was the script editor for Badults\nFOL: AndrewCollins(scriptEditorFor(Badults))\n</PREMISES>\n<CONCLUSION>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: AndrewCollins(scriptEditorFor(SeriesWithWorkingTitle(\"The Secret Dude Society\", BritishSitcom)))\n</CONCLUSION>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nBadults piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults\n</PREMISES>\n<CONCLUSION>\nAndrew Collins was the script editor for a British Sitcom series starring members of Pappy's.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom, starringMembersOfPappy's))\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Badults(pilotedInJuly2013, BBCThree))\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The SecretDudeSociety\", Badults))\nTEXT: Andrew Collins was the script editor for Badults\nFOL: AndrewCollins(scriptEditor(Badults)))\n</EVALUATE>\n\n<CONCLUSION>\nFOL: -BritishSitcom(x) & starringMembersOfPappy's(x) & -pilotedIn",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nBadults piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults\n</PREMISES>\n<CONCLUSION>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom, starringMembersOfPappy)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(A seriesWithTheWorkingTitle_The"
   ],
   [
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nBadults piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults\n</PREMISES>\n<CONCLUSION>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(SitcomSeries, British, starring MembersOf(Pappy's))\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Badults(PilotedInJuly2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: Badults(WorkingTitle(\"The SecretDudeSociety\"))\nTEXT: Andrew Collins was the script editor for Badults\nFOL: AndrewCollins(ScriptEditor(Badults))\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(Badults) -> Script",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nBadults piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults\n</PREMISES>\n<CONCLUSION>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(SitcomSeries(British, starring members of Pappy's))\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Badults(PilotedIn(July2013, on BBCThree))\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The SecretDudeSociety\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewColl",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom)\nBadults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July2013, BBCThree)\nThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nAndrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\n</PREMISES>\n<CONCLUSION>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(SeriesWithWorkingTitle, AndrewCollins, TheSecretDudeSociety)\n</CONCLUSION>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcomSeries, starring members of Pappy's)\nBadults piloted in July 2013 on BBC Three.\nFOL: Badults(piloted in July 2013 on BBC Three)\nThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nAndrew Collins was the script editor for Badults\nFOL: AndrewCollins(scriptEditor, Badults)\n</PREMISES>\n\n<CONCLUSION>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: AndrewCollins(scriptEditor, a series with WorkingTitle(\"The Secret Dude Society\"))\n</CONCLUSION>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nBadults piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults\n</PREMISES>\n<CONCLUSION>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom, starring MembersOf(Pappy's))\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, \"The SecretDudeSociety\")\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(SeriesWithWorkingTitle(\""
   ],
   [
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nBadults piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults\n</PREMISES>\n<CONCLUSION>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom, starring members of Pappy's)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, \"The Secret Dude Society\")\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, Andrew Collins)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(series with WorkingTitle(\"The Secret Dude",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nBadults piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults\n</PREMISES>\n<CONCLUSION>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom, starring members of Pappy's))\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBC Three))\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, \"The Secret Dude Society\"))\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, Andrew Collins))\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(series with WorkingTitle(\"The Secret Dude",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcomSeries(starringMembersOfPappy))\nBadults piloted in July 2013 on BBC Three.\nFOL: Badults(PilotedInJuly2013OnBBCThree)\nThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL: TheSecretDudeSociety(Badults)\nAndrew Collins was the script editor for Badults\nFOL: AndrewCollins(ScriptEditorFor(Badults))\n</PREMISES>\n<CONCLUSION>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: AndrewCollins(ScriptEditorFor(SeriesWithWorkingTitle(TheSecretDudeSociety)))\n</CONCLUSION>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nBadults piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults.\n</PREMISES>\n<CONCLUSION>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults) & MemberOfPappys(Badults)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloed(Badults, July2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: ScriptEditor(Badults, AndrewCollins)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(SeriesWithWorking",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nBadults piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults\n</PREMISES>\n<CONCLUSION>\nAndrew Collins was the script editor for a British Sitcom series starring members of Pappy's.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom, starringMembersOfPappy's))\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July2013, BBCThree))\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety))\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins))\nTEXT: Andrew Collins was the script editor for a British Sitcom series starring members of Pappy's.\nFOL: ScriptEditor(aBritishSitcom, starringMembers"
   ],
   [
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcomSeries, starringMembersOfPappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Badults(pilotedInJuly2013onBBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: TheWorkingTitle(\"TheSecretDudeSociety\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: AndrewCollins(scriptEditor,Badults)\n</PREMISES>\n\n<CONCLUSION>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: scriptEditor(Badults, AndrewCollins)\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcomSeries(Badults, starringMembersOfPappys)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"TheSecretDude",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nBadults piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults\n</PREMISES>\n<CONCLUSION>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(Sitcom, British, starring members of Pappy's)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Badults(piloted, July 2013, on BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: AndrewCollins(scriptEditor, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: AndrewCollins(scriptEditor, series with WorkingTitle",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nBadults piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults\n</PREMISES>\n<CONCLUSION>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom, starringMembersOfPappy's)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"TheSecretDudeSociety\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewCollins, WorkingTitle",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: BritishSitcom(Badults, Pappy's)\nBadults piloted in July 2013 on BBC Three.\nFOL: BBCThree(Badults, July2013)\nThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nAndrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\n</PREMISES>\n\n<CONCLUSION>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(seriesWithTitle(Badults, TheSecretDudeSociety), AndrewCollins)\n</CONCLUSION>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom)\nBadults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July2013, BBCThree)\nThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The SecretDudeSociety\", Badults)\nAndrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\n</PREMISES>\n<CONCLUSION>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\nFOL: ScriptEditor(AndrewCollins, WorkingTitle(\"The SecretDudeSociety\",?))\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 62,
  "responses": [
   [
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom, StarringMembersOfPappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The SecretDudeSociety\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\n</PREMISES>\n\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -StarringMembersOfPappys(x) & -Piloted(x, BBCTwo) & -Piloted(x, BBCThree)\n</CONCLUSION>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom)\nBadults piloted in July 2013 on BBC Three.\nFOL: BBCThree(Badults)\nThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nAndrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\n</PREMISES>\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -PappyStarredOnBBCThree(-PappyStarredOnBBCTwo)\n</CONCLUSION>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nBadults piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults\n</PREMISES>\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcomSeries, StarringMembersOf(Pappy's))\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The SecretDudeSociety\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom, starring members of Pappy's)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\n</PREMISES>\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -StarringMember(Pappy's, BBC Two) & -StarringMember(Pappy's, BBC Three)\n</CONCLUSION>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcomSeries, starringMembersOfPappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Badults(pilotedInJuly2013OnBBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"TheSecretDudeSociety\", Badults)\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: AndrewCollins(scriptEditor,Badults)\n</PREMISES>\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (MemberOfPappys(x) & StarredOnBBCTwoOrBBCThree(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcomSeries, starringMembersOfPappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Badults(PilotedInJuly2013OnBBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: Badults(TheWorkingTitleTheSecretDudeSociety)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: Badults(ScriptEditorAndrewCollins)\n</PREMISES>\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -starringMembersOfPappys(BBCTwoOrBBCThree)\n</CONCLUSION>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom, starring MembersOfPappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: Title(TheSecretDudeSociety, Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\n</PREMISES>\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -MembersOfPappysStarredForShowPilotingOnBBCTwoOrBBCThree\n</CONCLUSION>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcomSeries, starring members of Pappy's)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\n</PREMISES>\n\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -StarringMembersOfPappy's(BBCTwo | BBCThree)\n</CONCLUSION>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nBadults piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults\n</PREMISES>\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom, starringMembersOfPappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: BBCThree(Badults, July2013)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: Badults(TheSecretDudeSociety)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: Badults(scriptEditorAndrewCollins)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (MemberOfPappy's(x) & StarredOn",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcomSeries, starring members of Pappy's)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Badults(piloted in July 2013 on BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: Badults(WorkingTitle: The Secret Dude Society)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: Badults(scriptEditor: Andrew Collins)\n</PREMISES>\n\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (MemberOfPappys(x) & PiliotsOnBBCTwoOrBBCThree(x))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nBadults piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults\n</PREMISES>\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom, starring members of Pappy's))\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July2013, BBCThree))\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety))\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins))\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -MemberOfPappy's(x",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom, starring members of Pappy's)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: Title(Badults, \"The Secret Dude Society\")\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, Andrew Collins)\n</PREMISES>\n\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -Member(Pappy's, BBCTwo) & -Member(Pappy's, BBCThree)\n</CONCLUSION>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(SitcomSeries, starring x. Pappy(x))\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Badults(PilotedInJuly2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: Badults(WorkingTitle, TheSecretDudeSociety)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: Badults(ScriptEditor, AndrewCollins)\n</PREMISES>\n\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (Pappy(x) & StarredOnBBCTwoOrBBCThree(x))\n</CONCLUSION>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom, starring members of Pappy's)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Badults(piloted in July 2013 on BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: Badults(TheSecretDudeSociety)\nTEXT: Andrew Collins was the script editor for Badults.\nFOL: Badults(script_editor, AndrewCollins)\n</PREMISES>\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (MemberOfPappy's(x) & StarredOnBBCTwoOrBBCThree(x))\n</CONCLUSION>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom)\nBadults piloted in July 2013 on BBC Three.\nFOL: Badults(pilotedOnBBCThree, 2013)\nThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, TheSecretDudeSociety)\nAndrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, AndrewCollins)\n</PREMISES>\n\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -MemberOfPappys(x) & -(pilotedOnBBCTwo(x) | pilotedOnBBCThree(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcomSeries, starring MembersOfPappys)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July2013, BBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"TheSecretDudeSociety\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(AndrewCollins, Badults)\n</PREMISES>\n\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (MemberOfPappys(x) & BBCTwo(x) & BBCThree(x))\n</EVALUATE>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcomSeries, starring members of Pappy's)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Badults(piloted in July 2013 on BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: Badults(hasWorkingTitle \"The Secret Dude Society\")\nTEXT: Andrew Collins was the script editor for Badults\nFOL: Badults(scriptEditor AndrewCollins)\n</PREMISES>\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (MemberOfPappy's(x) & StarredOnBBCTwoOrBBCThree(x))\n</CONCLUSION>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcomSeries(starringMembersOfPappy's))\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Badults(pilotedInJuly2013OnBBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: Badults(workingTitle\"TheSecretDudeSociety\")\nTEXT: Andrew Collins was the script editor for Badults\nFOL: Badults(scriptEditorAndrewCollins)\n</PREMISES>\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (MemberOfPappy's(x) & StarredForShowPilotingOnBBCTwoOrBBCThree(x))\n</CONCLUSION>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom)\nBadults piloted in July 2013 on BBC Three.\nFOL: Badults(PilotedIn2013OnBBCThree)\nThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"The Secret Dude Society\", Badults)\nAndrew Collins was the script editor for Badults\nFOL: ScriptEditor(AAndrewCollins, Badults)\n</PREMISES>\n\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (MemberOfPappys(x) & StarredOnBBCTwoOrBBCThree(x))\n</CONCLUSION>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcomSeries(starringMembersOfPappy's))\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Badults(pilotedInJuly2013OnBBCThree)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(\"TheSecretDudeSociety\", Badults)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: AndrewCollins(scriptEditorFor(Badults))\n</PREMISES>\n\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (MemberOfPappy's(x) & StarredOnBBCTwoOrBBCThree(x))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom, starring members of Pappy's)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Badults(piloted in July 2013 on BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: Badults(TheWorkingTitle \"The Secret Dude Society\")\nTEXT: Andrew Collins was the script editor for Badults\nFOL: Badults(script editor Andrew Collins)\n</PREMISES>\n\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -starredOnBBCTwo(Pappy's) & -starredOnBBCThree(Pappy's)\n</CONCLUSION>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom)\nBadults piloted in July 2013 on BBC Three.\nFOL: Badults(pilotedInJuly2013OnBBCThree)\nThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL: TheWorkingTitle(\"The SecretDudeSociety\", Badults)\nAndrew Collins was the script editor for Badults\nFOL: AndrewCollins(scriptEditorOf(Badults))\n</PREMISES>\n\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -exists x. (MemberOfPappys(x) & StarredForShowPilotingOnBBCTwoOrBBCThree(x))\n</CONCLUSION>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(Sitcom) & MembersOfPappy(starring)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Badults(piloted) & BBCThree(2013)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: Badults(title) & TheSecretDudeSociety\nTEXT: Andrew Collins was the script editor for Badults\nFOL: AndrewCollins(scriptEditor) & Badults(scriptEditor)\n</PREMISES>\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -MembersOfPappy(starring) & -BBCThree(2013) & -Badults(piloted)\n</CONCLUSION>",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nBadults piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults\n</PREMISES>\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom, starring members of Pappy's)\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: Piloted(Badults, July 2013, BBC Three)\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: WorkingTitle(Badults, The Secret Dude Society)\nTEXT: Andrew Collins was the script editor for Badults\nFOL: ScriptEditor(Badults, Andrew Collins)\nTEXT: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -MemberOfPappy's(x) &",
    "<PREMISES>\nBadults is a British Sitcom series, starring members of Pappy's.\nFOL: Badults(BritishSitcom)\nBadults piloted in July 2013 on BBC Three.\nFOL: Badults -> BBCThree\nThe Working title \"The Secret Dude Society\" was used for Badults.\nFOL: Badults -> TheSecretDudeSociety\nAndrew Collins was the script editor for Badults\nFOL: AndrewCollins -> Badults\n</PREMISES>\n<CONCLUSION>\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\nFOL: -MemberOfPappys & (BBCTwo & BBCThree)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Badults is a British Sitcom series, starring members of Pappy's.\nFOL: <EVALUATE>Badults(BritishSitcom)</EVALUATE>\nTEXT: Badults piloted in July 2013 on BBC Three.\nFOL: <EVALUATE>Badults -> BBCThree</EVALUATE>\nTEXT: The Working title \"The Secret Dude Society\" was used for Badults.\nFOL: <E"
   ]
  ]
 },
 {
  "index": 63,
  "responses": [
   [
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: Volatile(x) -> -SuitableForRetirementFund(x)\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</PREMISES>\n\n<CONCLUSION>\nKO is a company stock.\nFOL: -MatureCompany(KO) | Company(KO)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\nFOL: CompanyStock(ko)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\nAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nKO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</PREMISES>\n\n<CONCLUSION>\nKO is a company stock.\nFOL: -Company(KO) & SuitableForRetirementFund(KO)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth"
   ],
   [
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\nFOL: CompanyStock(KO)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\nFOL: CompanyStock(KO)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\nAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nKO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</PREMISES>\n\n<CONCLUSION>\nKO is a company stock.\nFOL: -MatureCompany(KO) | Company(KO)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are"
   ],
   [
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\nFOL: CompanyStock(KO)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\nFOL: Company(KO)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\nFOL: Company(KO)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\nAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nKO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</PREMISES>\n\n<CONCLUSION>\nKO is a company stock.\nFOL: -Company(KO) & SuitableForRetirementFund(KO)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\nTEXT: KO is a company stock.\nFOL: CompanyStock(KO)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x) & Stock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</EVALUATE>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\nFOL: CompanyStock(KO)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL"
   ],
   [
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\nFOL: CompanyStock(KO)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\nFOL: Company(KO)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\nFOL: CompanyStock(KO)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\nTEXT: KO is a company stock.\nFOL: CompanyStock(KO)\n</EVALUATE>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL"
   ]
  ]
 },
 {
  "index": 64,
  "responses": [
   [
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x) & Stock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: Stock(KO) & GrowthCompany(KO)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(KO) & GrowthCompanyStock(KO)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x) & Stock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</PREMISES>\n\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: Stock(KO) & GrowthCompany(KO)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x) & Stock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: Stock(KO) & GrowthCompany(KO)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(KO) & GrowthCompanyStock(KO)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthCompanyStock(ko)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(KO) & GrowthCompanyStock(KO)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nIf the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nSome companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\nAll mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nKO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock.\nFOL: Company(KO)\nKO is a growth company\u2019s stock.\nFOL: GrowthCompany(KO)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthCompanyStock(ko)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</PREMISES>\n\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: Company(KO) & GrowthCompany(KO)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\n</PREMISES>\n\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthCompanyStock(ko)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(KO) & GrowthCompanyStock(KO)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(KO)\n</PREMISES>\n\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(KO) & GrowthStock(KO)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(KO) & GrowthCompanyStock(KO)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(KO)\n</PREMISES>\n\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(KO) & GrowthStock(KO)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(KO) & GrowthCompanyStock(KO)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(KO) & GrowthCompanyStock(KO)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: Company(KO) & GrowthStock(KO)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</PREMISES>\n\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: Company(KO) & GrowthCompanyStock(KO)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(KO) & GrowthCompanyStock(KO)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: (Company(KO) & GrowthCompany(KO))\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(KO) & GrowthCompanyStock(KO)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(KO) & GrowthCompanyStock(KO)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(ko) & GrowthCompanyStock(ko)\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n<CONCLUSION>\nKO is a company stock and a growth company\u2019s stock.\nFOL: CompanyStock(KO) & GrowthCompanyStock(KO)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 65,
  "responses": [
   [
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: Volatile(x) -> -SuitableForRetirementFund(x)\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</PREMISES>\n\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompany(KO) | Volatile(KO)) -> (-Company(KO) & -Volatile(KO))\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(KO) | Volatile(KO)) -> (-CompanyStock(KO) & -Volatile(KO))\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</PREMISES>\n\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompany(KO) | Volatile(KO)) -> (-Company(KO) & -Volatile(KO))\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\n</PREMISES>\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(KO) | Volatile(KO)) -> (-CompanyStock(KO) & -Volatile(KO))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(KO) | Volatile(KO)) -> (-CompanyStock(KO) & -Volatile(KO))\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</PREMISES>\n\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: ((GrowthCompany(KO) | Volatile(KO)) -> (-Company(KO) & -Volatile(KO)))\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(KO)\n</PREMISES>\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(KO) | Volatile(KO)) -> (-Company(KO) & -Volatile(KO))\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(KO) | Volatile(KO)) -> (-CompanyStock(KO) & -Volatile(KO))\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\n</PREMISES>\n\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(KO) | Volatile(KO)) -> (-CompanyStock(KO) & -Volatile(KO))\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(KO) | Volatile(KO)) -> (-CompanyStock(KO) & -Volatile(KO))\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\n</PREMISES>\n\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(ko)\n</PREMISES>\n\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(ko) | Volatile(ko)) -> (-Company(ko) & -Volatile(ko))\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\n</PREMISES>\n\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</PREMISES>\n\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompany(KO) | Volatile(KO)) -> (-Company(KO) & -Volatile(KO))\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</PREMISES>\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompany(KO) | Volatile(KO)) -> (-Company(KO) & -Volatile(KO))\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\n</PREMISES>\n\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\n</PREMISES>\n\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: ((GrowthCompanyStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko)))\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureStock(KO)\n</PREMISES>\n\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthStock(KO) | Volatile(KO)) -> (-CompanyStock(KO) & -Volatile(KO))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x) & Stock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</PREMISES>\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompany(KO) | Volatile(KO)) -> (-Company(KO) & -Volatile(KO))\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(KO) | Volatile(KO)) -> (-CompanyStock(KO) & -Volatile(KO))\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(KO)\n</PREMISES>\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(KO) | Volatile(KO)) -> (-CompanyStock(KO) & -Volatile(KO))\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompanyStock(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (CompanyStock(x) & GrowthCompanyStock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompanyStock(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompanyStock(ko)\n</PREMISES>\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompanyStock(ko) | Volatile(ko)) -> (-CompanyStock(ko) & -Volatile(ko))\n</CONCLUSION>",
    "<PREMISES>\nAll growth companies\u2019 stocks are volatile.\nFOL: all x. (GrowthCompany(x) -> Volatile(x))\nTEXT: If the stock price is volatile, then it is not suitable for a retirement fund.\nFOL: all x. (Volatile(x) -> -SuitableForRetirementFund(x))\nTEXT: Some companies\u2019 stocks are growth companies\u2019 stocks.\nFOL: exists x. (Company(x) & GrowthCompany(x) & Stock(x))\nTEXT: All mature companies\u2019 stocks are suitable for a retirement fund.\nFOL: all x. (MatureCompany(x) -> SuitableForRetirementFund(x))\nTEXT: KO is a mature company\u2019s stock.\nFOL: MatureCompany(KO)\n</PREMISES>\n<CONCLUSION>\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.\nFOL: (GrowthCompany(KO) | Volatile(KO)) -> (-Company(KO) & -Volatile(KO))\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 66,
  "responses": [
   [
    "<PREMISES>\nall x. (IstanbulPlate(x) -> StartsWith34(x))\nall x. (-IstanbulPlate(x) -> -StartsWith34(x))\nJoe'sPlate is from Istanbul.\nTom'sPlate begins with 35.\n[BG] all x. (StartsWith35(x) -> -StartsWith34(x))\n</PREMISES>\n<CONCLUSION>\n-Joe'sPlate begins with 34.\n</CONCLUSION>",
    "<PREMISES>\nall x. (IstanbulPlate(x) -> startsWith34(x))\nPlates that do not begin with the number 34 are not from Istanbul.\nJoe's vehicle registration plate is from Istanbul.\nTom's license plate begins with the number 35.\nall x. ((LicensePlate(x) & startsWith35(x)) -> -startsWith34(x))\n</PREMISES>\n<CONCLUSION>\n-Joe'sLicensePlate beginsWith34\n</CONCLUSION>",
    "<PREMISES>\nall x. (Plate(x) -> BeginsWith34(x))\nall x. (-BeginsWith34(x) -> -Istanbul(x))\nPlate(joe) & Istanbul(joe)\nPlate(tom) & BeginsWith35(tom)\n[BG] all x. (BeginsWith35(x) -> -BeginsWith34(x))\n</PREMISES>\n<CONCLUSION>\n-BeginsWith34(joe)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Plate(x) -> BeginsWith(34, x))\nall x. (-BeginsWith(34, x) -> -Istanbul(x))\nJoe(x)\nPlate(Joe)\nTom\nPlate(Tom)\nBeginsWith(35, Tom)\n</PREMISES>\n<CONCLUSION>\nall x. (Istanbul(x) -> BeginsWith(34, x))\nJoe(x)\nBeginsWith(34, Joe)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Plate(x) -> StartsWith(34, x))\nall x. (-Plate(x) | -StartsWith(34, x))\nPlate(joe)\nStartsWith(34, joe)\nPlate(tom)\nStartsWith(35, tom)\nStartsWith(34, tom) <- (StartsWith(35, tom) & -StartsWith(34, tom))\n</PREMISES>\n<CONCLUSION>\n-StartsWith(34, tom)\nStartsWith(34, joe)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (IstanbulPlate(x) -> startsWith34(x))\nPlates that do not begin with the number 34 are not from Istanbul.\nJoe's vehicle registration plate is from Istanbul.\nTom's license plate begins with the number 35.\n[BG] If a license plate begins with the number 35, then it does not begin with the number 34.\n</PREMISES>\n<CONCLUSION>\n-Joe'sLicensePlate startsWith34\n</CONCLUSION>",
    "<PREMISES>\nAll vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> StartsWith(34, x))\nPlates that do not begin with the number 34 are not from Istanbul. \nFOL: -34(x) -> -Istanbul(x)\nJoe's vehicle registration plate is from Istanbul. \nFOL: Istanbul(joe)\nTom's license plate begins with the number 35. \nFOL: StartsWith(35, tom)\n[BG] If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: StartsWith(35, x) -> -StartsWith(34, x)\n</PREMISES>\n<CONCLUSION>\nJoe's license plate begins with the number 34.\nFOL: StartsWith(34, joe)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IstanbulPlate(x) -> StartsWith(34, x))\nPlates that do not begin with the number 34 are not from Istanbul.\nJoe's vehicle registration plate is from Istanbul.\nTom's license plate begins with the number 35.\nif (StartsWith(35, x) -> -StartsWith(34, x))\n</PREMISES>\n<CONCLUSION>\n-Joe'sPlate is not from Istanbul\nJoe'sPlate begins with 34\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (IstanbulPlate(x) -> StartsWith(34, x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-StartsWith(34, x) -> -IstanbulPlate(x))\nTEXT: Joe's vehicle registration plate is from Istanbul.\nFOL: IstanbulPlate(joe)\nTEXT: Tom's license plate begins with the number 35.\nFOL: StartsWith(35, tom)\nTEXT: if (StartsWith(35, x) -> -StartsWith(34, x))\nFOL: -StartsWith(34",
    "<PREMISES>\nall x. (IstanbulPlate(x) -> startsWith(34, x))\nPlates that do not begin with the number 34 are not from Istanbul.\nJoe's vehicle registration plate is from Istanbul.\nTom's license plate begins with the number 35.\n(BG) if a license plate begins with the number 35, then it does not begin with the number 34.\n</PREMISES>\n<CONCLUSION>\n-Joe's license plate begins with the number 35.\n</CONCLUSION>",
    "<PREMISES>\nall x. (IstanbulPlate(x) -> startsWith(34, x))\nall x. (-IstanbulPlate(x) -> -startsWith(34, x))\nJoePlate is IstanbulPlate(joe)\nTomPlate startsWith(35, tom)\n[BG] all x. (startsWith(35, x) -> -startsWith(34, x))\n</PREMISES>\n<CONCLUSION>\n-IstanbulPlate(joe) & startsWith(34, joePlate)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (IstanbulPlate(x) -> startsWith(34, x))\nall x. (-IstanbulPlate(x) -> \u00acstartsWith(34, x))\nJoePlate is IstanbulPlate\nTomPlate startsWith(35, TomPlate)\n[BG] all x. (startsWith(35, x) -> \u00acstartsWith(34, x))\n</PREMISES>\n<CONCLUSION>\n\u00acstartsWith(34, JoePlate)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Plate(x) -> BeginsWith(34, x))\nall x. (-BeginsWith(34, x) -> -Istanbul(x))\nJoe(x)\nPlate(Joe) \nBeginsWith(35, Tom)\n[BG] all x. (BeginsWith(35, x) -> -BeginsWith(34, x))\n</PREMISES>\n<CONCLUSION>\nall x. (Istanbul(x) -> BeginsWith(34, x))\nJoe(x)\nBeginsWith(34, Joe)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IstanbulPlate(x) -> StartsWith(34, x))\nPlates that do not begin with the number 34 are not from Istanbul.\nJoe's vehicle registration plate is from Istanbul.\nTom's license plate begins with the number 35.\nall x. ((LicensePlate(x) -> StartsWith(35, x)) -> -StartsWith(34, x))\n</PREMISES>\n<CONCLUSION>\nJoe's vehicle registration plate begins with the number 34.\n</CONCLUSION>",
    "<PREMISES>\nall x. (PlateFromIstanbul(x) -> startsWith(34, x))\nall x. (-startsWith(34, x) -> -PlateFromIstanbul(x))\nJoe'sPlate is from Istanbul.\nTom'sLicensePlate begins with the number 35.\nall x. (LicensePlate(x) -> (startsWith(35, x) -> -startsWith(34, x)))\n</PREMISES>\n<CONCLUSION>\n-Joe'sPlate begins with the number 34.\n</CONCLUSION>",
    "<PREMISES>\nAll vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (IstanbulPlate(x) -> StartsWith(34, x))\nPlates that do not begin with the number 34 are not from Istanbul. \nFOL: -StartsWith(34, x) -> -IstanbulPlate(x)\nJoe's vehicle registration plate is from Istanbul. \nFOL: IstanbulPlate(joe)\nTom's license plate begins with the number 35. \nFOL: StartsWith(35, tom)\n[BG] If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: StartsWith(35, x) -> -StartsWith(34, x)\n</PREMISES>\n<CONCLUSION>\nJoe's license plate begins with the number 34.\nFOL: StartsWith(34, joe)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (IstanbulPlate(x) -> StartsWith34(x))\nPlates that do not begin with the number 34 are not from Istanbul.\nJoe's vehicle registration plate is from Istanbul.\nTom's license plate begins with the number 35.\nall x. ((LicensePlate(x) -> StartsWith35(x)) -> -StartsWith34(x))\n</PREMISES>\n<CONCLUSION>\n-Joe's license plate begins with the number 35.\n</CONCLUSION>",
    "<PREMISES>\nall x. (Plate(x) -> BeginsWith34(x))\nall x. (-BeginsWith34(x) -> -Istanbul(x))\nJoe(x)\nPlate(joe)\nTom(x)\nPlate(tom)\nBeginsWith35(tom)\n</PREMISES>\n<CONCLUSION>\n-BeginsWith34(joe)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IstanbulPlate(x) -> StartsWith34(x))\nall x. (-IstanbulPlate(x) -> -StartsWith34(x))\nJoe'sPlate is IstanbulPlate(joe)\nTom'sPlate startsWith35\n[bg] all x. (StartsWith35(x) -> -StartsWith34(x))\n</PREMISES>\n<CONCLUSION>\n-Joe'sPlate startsWith34\n</CONCLUSION>",
    "<PREMISES>\nall x. (IstanbulPlate(x) -> StartsWith(34, x))\nall x. (-IstanbulPlate(x) -> -StartsWith(34, x))\nJoePlate is IstanbulPlate(joe)\nTomPlate is LicensePlate(tom)\nStartsWith(35, tomPlate)\n</PREMISES>\n<CONCLUSION>\n-StartsWith(34, joePlate)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (IstanbulPlate(x) -> StartsWith(34, x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-IstanbulPlate(x) -> -StartsWith(34, x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: JoePlate is IstanbulPlate(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: TomPlate is LicensePlate(tom) & StartsWith(35, tomPlate)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: -StartsWith(34",
    "<PREMISES>\nall x. (Plate(x) -> BeginsWith34(x))\nall x. (-BeginsWith34(x) -> -Istanbul(x))\nPlate(joe) & Istanbul(joe)\nPlate(tom) & BeginsWith35(tom)\nBG: all x. (BeginsWith35(x) -> -BeginsWith34(x))\n</PREMISES>\n<CONCLUSION>\n-BeginsWith34(joe)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (IstanbulPlate(x) -> startsWith34(x))\nPlates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (-startsWith34(x) -> -IstanbulPlate(x))\nJoe's vehicle registration plate is from Istanbul.\nFOL: IstanbulPlate(joe)\nTom's license plate begins with the number 35.\nFOL: startsWith35(tom)\nIf a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: startsWith35(x) -> -startsWith34(x)\n</PREMISES>\n<CONCLUSION>\nJoe's license plate begins with the number 34.\nFOL: IstanbulPlate(joe) & startsWith34(joe)\n</CONCLUSION>",
    "<PREMISES>\nAll vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> BeginsWith34(x))\nPlates that do not begin with the number 34 are not from Istanbul.\nFOL: -BeginsWith34(x) -> -Istanbul(x)\nJoe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTom's license plate begins with the number 35.\nFOL: BeginsWith35(tom)\n[BG] If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: BeginsWith35(x) -> -BeginsWith34(x)\n</PREMISES>\n<CONCLUSION>\nJoe's license plate begins with the number 34.\nFOL: BeginsWith34(joe)\n</EVALUATE>",
    "<PREMISES>\nAll vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Istanbul(x) -> Plate(x) = 34)\nPlates that do not begin with the number 34 are not from Istanbul.\nFOL: all x. (Plate(x)!= 34 -> -Istanbul(x))\nJoe's vehicle registration plate is from Istanbul.\nFOL: Istanbul(joe)\nTom's license plate begins with the number 35.\nFOL: Plate(tom) = 35\n</PREMISES>\n\n<CONCLUSION>\nIf a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: Plate(x) = 35 -> -Plate(x) = 34\nJoe's license plate begins with the number 34.\nFOL: -Plate(joe) = 35 -> -Plate(joe) = 34\n</CONCLUSION>",
    "<PREMISES>\nall x. (IstanbulPlate(x) -> startsWith34(x))\nall x. (-IstanbulPlate(x) -> -startsWith34(x))\nJoePlate is IstanbulPlate(joe)\nTomPlate startsWith35\n[BG] all x. (startsWith35(x) -> -startsWith34(x))\n</PREMISES>\n<CONCLUSION>\n-startsWith34(joePlate)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Plate(x) -> StartsWith34(x))\nall x. (-Plate(x) & StartsWith34(x) -> -Istanbul(x))\nPlate(joe) & Istanbul(joe)\nPlate(tom) & StartsWith35(tom)\nBG: all x. (StartsWith35(x) -> -StartsWith34(x))\n</PREMISES>\n<CONCLUSION>\n-StartsWith34(joe)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 67,
  "responses": [
   [
    "<PREMISES>\nall x. (Istanbul(x) -> BeginsWith34(x))\nall x. (Istanbul(x) & -BeginsWith34(x) -> -Istanbul(x))\nJoe(x)\nBeginsWith34(Joe)\nTom(x)\nBeginsWith35(Tom)\n[BG] all x. (BeginsWith35(x) -> -BeginsWith34(x))\n</PREMISES>\n\n<CONCLUSION>\nIstanbul(Tom)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IstanbulPlate(x) -> startsWith(34, x))\nall x. (-IstanbulPlate(x) -> \u00acstartsWith(34, x))\nJoe'sPlate is from Istanbul.\nTom'sPlate beginsWith(35, tom)\n\u00ac[BG] if a license plate beginsWith(35, x) then \u00acstartsWith(34, x)\n</PREMISES>\n<CONCLUSION>\n\u00ac[BG] Tom'sPlate is from Istanbul.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (IstanbulPlate(x) -> startsWith(34, x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-IstanbulPlate(x) -> \u00acstartsWith(34, x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Joe'sPlate is from Istanbul.\nTEXT: Tom's license plate begins with the number 35. \nFOL: Tom'sPlate beginsWith(35, tom)\nTEXT: [BG] If a license plate begins with the number 35, then it does not begin with the number",
    "<PREMISES>\nall x. (Plate(x) -> BeginsWith34(x))\nall x. (-BeginsWith34(x) -> -Istanbul(x))\nPlate(joe) & Istanbul(joe)\nPlate(tom) & BeginsWith35(tom)\n-BeginsWith34(tom)\n</PREMISES>\n<CONCLUSION>\n-BeginsWith35(tom) & Istanbul(tom)\n</CONCLUSION>",
    "<PREMISES>\nAll vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (IstanbulPlate(x) -> StartsWith(34, x))\nPlates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-StartsWith(34, x) -> -IstanbulPlate(x))\nJoe's vehicle registration plate is from Istanbul. \nFOL: IstanbulPlate(joe)\nTom's license plate begins with the number 35. \nFOL: StartsWith(35, tom)\n[BG] If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: StartsWith(35, x) -> -StartsWith(34, x)\n</PREMISES>\n<CONCLUSION>\nTom's license plate is from Istanbul.\nFOL: StartsWith(35, tom) & -StartsWith(34, tom) & IstanbulPlate(tom)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IstanbulPlate(x) -> startsWith34(x))\nall x. (-IstanbulPlate(x) -> -startsWith34(x))\nJoe'sPlate is IstanbulPlate(Joe)\nTom'sPlate startsWith35\n[BG] all x. (startsWith35(x) -> -startsWith34(x))\n</PREMISES>\n<CONCLUSION>\nTom'sPlate is IstanbulPlate(Tom)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (IstanbulPlate(x) -> StartsWith(34, x))\nall x. (-IstanbulPlate(x) -> -StartsWith(34, x))\nJoe'sPlate is from Istanbul.\nTom'sPlate begins with the number 35.\n[BG] all x. (StartsWith(35, x) -> -StartsWith(34, x))\n</PREMISES>\n<CONCLUSION>\nTom'sPlate is from Istanbul.\n</CONCLUSION>",
    "<PREMISES>\nall x. (IstanbulPlate(x) -> StartsWith(34, x))\nall x. (-StartsWith(34, x) -> -IstanbulPlate(x))\nJoe'sPlate is from Istanbul.\nTom'sPlate begins with the number 35.\n[bg] all x. (StartsWith(35, x) -> -StartsWith(34, x))\n</PREMISES>\n<CONCLUSION>\nTom'sPlate is from Istanbul.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (IstanbulPlate(x) -> StartsWith(34, x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-StartsWith(34, x) -> -IstanbulPlate(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Joe'sPlate is from Istanbul.\nTEXT: Tom's license plate begins with the number 35.\nFOL: Tom'sPlate begins with the number 35.\nTEXT: [bg] If a license plate begins with the number 35, then it does not begin with the number 34.\n",
    "<PREMISES>\nAll vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (IstanbulPlate(x) -> StartsWith(34, x))\nPlates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-StartsWith(34, x) -> -IstanbulPlate(x))\nJoe's vehicle registration plate is from Istanbul. \nFOL: IstanbulPlate(joe)\nTom's license plate begins with the number 35. \nFOL: StartsWith(35, tom)\n[BG] If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL: StartsWith(35, x) -> -StartsWith(34, x)\n</PREMISES>\n<CONCLUSION>\nTom's license plate is from Istanbul.\nFOL: StartsWith(35, tom) & -StartsWith(34, tom) & IstanbulPlate(tom)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Istanbul(x) -> BeginsWith34(x))\nall x. (-BeginsWith34(x) -> -Istanbul(x))\nJoe(x)\nTom(x)\nBeginsWith35(Tom)\n</PREMISES>\n<CONCLUSION>\nIstanbul(Tom)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IstanbulPlate(x) -> startsWith(34, x))\nall x. (-startsWith(34, x) -> -IstanbulPlate(x))\nJoe's vehicle registration plate is from Istanbul.\nTom's license plate begins with the number 35.\n[BG] if x. (startsWith(35, x) -> -startsWith(34, x))\n</PREMISES>\n<CONCLUSION>\n-Tom's license plate is from Istanbul.\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Plate(x) -> BeginsWith34(x))\nall x. (-Plate(x) | -BeginsWith34(x))\nJoe's vehicle registration plate is from Istanbul.\nTom's license plate begins with the number 35.\nif a license plate begins with the number 35, then it does not begin with the number 34.\n</PREMISES>\n<CONCLUSION>\n-Tom's license plate is from Istanbul\n</CONCLUSION>",
    "<PREMISES>\nall x. (IstanbulPlate(x) -> StartsWith34(x))\nall x. (-IstanbulPlate(x) -> -StartsWith34(x))\nJoe'sVehiclePlate is from Istanbul.\nTom'sLicensePlate startsWith35.\n[BG] if a LicensePlate startsWith35 then it does not startsWith34.\n</PREMISES>\n<CONCLUSION>\nTom'sLicensePlate is from Istanbul.\n</CONCLUSION>",
    "<PREMISES>\nall x. (Plate(x) -> BeginsWith34(x))\nall x. (-BeginsWith34(x) -> -Istanbul(x))\nJoe'sVehiclePlate(Istanbul)\nTom'sLicensePlate(BeginsWith35)\n[BG] all x. (BeginsWith35(x) -> -BeginsWith34(x))\n</PREMISES>\n<CONCLUSION>\nTom'sLicensePlate(Istanbul)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Plate(x) -> (StartsWith(34, x)))\nall x. (-Plate(x) & -StartsWith(34, x) -> -Istanbul(x))\nPlate(joe) & Istanbul(joe)\nPlate(tom) & StartsWith(35, tom)\n-StartsWith(34, tom)\n</PREMISES>\n<CONCLUSION>\n-StartsWith(34, tom) & Istanbul(tom)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (Plate(x) -> StartsWith(34, x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-Plate(x) & -StartsWith(34, x) -> -Istanbul(x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Plate(joe) & Istanbul(joe)\nTEXT: Tom's license plate begins with the number 35. \nFOL: Plate(tom) & StartsWith(35, tom)\nTEXT: If a license plate begins with the number 35, then it does not begin with the number ",
    "<PREMISES>\nall x. (Istanbul(x) -> StartsWith34(x))\nall x. (-Istanbul(x) & StartsWith34(x) -> -Istanbul(x))\nJoe's vehicle registration plate is from Istanbul.\nTom's license plate begins with the number 35.\nBG: all x. (StartsWith35(x) -> -StartsWith34(x))\n</PREMISES>\n<CONCLUSION>\nBG: -StartsWith34(Tom's license plate)\n-StartsWith34(Tom's license plate) -> Tom's license plate is from Istanbul.\nTom's license plate is from Istanbul.\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (IstanbulPlate(x) -> StartsWith34(x))\nPlates that do not begin with the number 34 are not from Istanbul.\nJoe's vehicle registration plate is from Istanbul.\nTom's license plate begins with the number 35.\nall x. ((LicensePlate(x) & StartsWith35(x)) -> -StartsWith34(x))\n</PREMISES>\n<CONCLUSION>\nTom's license plate is from Istanbul.\n</CONCLUSION>",
    "<PREMISES>\nall x. (IstanbulPlate(x) -> startsWith(34, x))\nall x. (-IstanbulPlate(x) -> -startsWith(34, x))\nJoe'sPlate is from Istanbul.\nTom'sPlate startsWith(35, x)\n[BG] all x. (startsWith(35, x) -> -startsWith(34, x))\n</PREMISES>\n\n<CONCLUSION>\nTom'sPlate is from Istanbul.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (IstanbulPlate(x) -> startsWith(34, x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-IstanbulPlate(x) -> -startsWith(34, x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Joe'sPlate is from Istanbul.\nTEXT: Tom's license plate begins with the number 35. \nFOL: Tom'sPlate startsWith(35, x)\nTEXT: [BG] If a license plate begins with the number 35, then it does not begin with the number 34.\nFOL:",
    "<PREMISES>\nall x. (IstanbulPlate(x) -> StartsWith34(x))\nall x. (IstanbulPlate(x) | -IstanbulPlate(x) -> -Istanbul(x))\nJoe's vehicle registration plate is from Istanbul.\nTom's license plate begins with the number 35.\n[BG] all x. (StartsWith35(x) -> -StartsWith34(x))\n</PREMISES>\n<CONCLUSION>\nTom's license plate is from Istanbul.\n</CONCLUSION>",
    "<PREMISES>\nall x. (Plate(x) -> BeginsWith34(x))\nall x. (-BeginsWith34(x) -> -Istanbul(x))\nJoe(x)\nPlate(joe) -> Istanbul(joe)\nPlate(tom) -> BeginsWith35(tom)\nBeginsWith35(tom) -> -BeginsWith34(tom)\n</PREMISES>\n<CONCLUSION>\nIstanbul(tom)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Istanbul(x) -> startsWith(34, x))\nall x. (-Istanbul(x) & startsWith(34, x) -> -Istanbul(x))\nJoe's vehicle registration plate is from Istanbul.\nTom's license plate begins with the number 35.\nall x. (LicensePlate(x) -> (Istanbul(x) & startsWith(34, x)))\nbg. (startsWith(35, x) -> -startsWith(34, x))\n</PREMISES>\n<CONCLUSION>\nTom's license plate is from Istanbul.\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Plate(x) -> BeginsWith34(x))\nPlate(x) & -BeginsWith34(x) -> -Istanbul(x)\nIstanbul(joe) & Plate(joe)\nBeginsWith35(tom)\n[BG] -BeginsWith34(tom) -> -Istanbul(tom)\n</PREMISES>\n<CONCLUSION>\n-Istanbul(tom)\n</CONCLUSION>",
    "<PREMISES>\nall x. (PlateFromIstanbul(x) -> PlateBeginWith34(x))\nPlateNotFromIstanbul(x) -> -PlateBeginWith34(x)\nJoe's vehicle registration plate is from Istanbul.\nPlateFromIstanbul(joe)\nTom's license plate begins with the number 35.\nPlateBeginWith35(tom)\n[BG] if a license plate begins with the number 35, then it does not begin with the number 34.\nPlateBeginWith35(x) -> -PlateBeginWith34(x)\n</PREMISES>\n<CONCLUSION>\nPlateFromIstanbul(tom)\n</CONCLUSION>",
    "<PREMISES>\nall x. (IstanbulPlate(x) -> startsWith(34, x))\nall x. (-IstanbulPlate(x) -> -startsWith(34, x))\nJoe'sPlate is from Istanbul.\nTom'sPlate beginsWith(35, Tom'sPlate)\n[BG] x. (startsWith(35, x) -> -startsWith(34, x))\n</PREMISES>\n\n<CONCLUSION>\nTom'sPlate is from Istanbul.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All vehicle registration plates in Istanbul begin with the number 34.\nFOL: all x. (IstanbulPlate(x) -> startsWith(34, x))\nTEXT: Plates that do not begin with the number 34 are not from Istanbul. \nFOL: all x. (-IstanbulPlate(x) -> -startsWith(34, x))\nTEXT: Joe's vehicle registration plate is from Istanbul. \nFOL: Joe'sPlate is from Istanbul.\nTEXT: Tom's license plate begins with the number 35. \nFOL: Tom'sPlate beginsWith(35, Tom'sPlate)\nTEXT: [BG] If a license plate begins with the number 35, then it does not begin with the number 34.\n",
    "<PREMISES>\nall x. (Plate(x) -> BeginsWith34(x))\nall x. (-Plate(x) & BeginsWith34(x) -> -Istanbul(x))\nJoe(x)\nTom(x)\nPlate(Tom) & BeginsWith35(Tom)\n[BG] all x. (BeginsWith35(x) -> -BeginsWith34(x))\n</PREMISES>\n<CONCLUSION>\nIstanbul(Tom)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Plate(x) -> BeginsWith34(x))\nPlate(x) & -BeginsWith34(x) -> -Istanbul(x)\nIstanbul(joe) & Plate(joe)\nBeginsWith35(tom)\n(BG) Plate(x) & BeginsWith35(x) -> -BeginsWith34(x)\n</PREMISES>\n<CONCLUSION>\nIstanbul(tom)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 68,
  "responses": [
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(mary) | EnjoyDiningHalls(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHalls(x) -> -PickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHalls(x) -> EatAndSocialize(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: StudentJob(m",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (Takeout(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (Takeout(x) | EnjoyDiningHall(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(x) -> -PickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(x) -> SpendTimeEating(x) & CatchUpWithFriends(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary(StudentJob",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(work) | EnjoyDiningHall(work))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(work) -> NotPickyEater(work)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(work) -> SpendTimeEatingAndSocializing(work)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Student",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (CampusJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (Takeout(x) & College(x) -> CampusJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (Takeout(people) & College(people)) | (EnjoyDiningHalls(people) & Recipes(people))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHalls(people) -> -PickyEater(people)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHalls(people) -> (Eat(aLot) & CatchUpWithFriends(people))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (TakeoutFrequent(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (TakeoutFrequent(x) & College(x)) | (DiningHall(x) & Recipes(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: DiningHall(x) & Recipes(x) -> NotPickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: DiningHall(x) & Recipes(x) -> SpendTimeEating(x) & CatchUpWithFriends(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither pick"
   ],
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) | EnjoyDiningHall(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(x) -> -PickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(x) -> SpendTimeEating(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: StudentJob(mary",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (Takeout(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (Takeout(people) | EnjoyDiningHall(people))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(x) -> -PickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(x) -> SpendTimeEating(x) & SpendTimeSocializing(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) & College(x)) | (DiningHall(x) & Recipes(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: DiningHall(x) & Recipes(x) -> NotPickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: DiningHall(x) & Recipes(x) -> SpendTimeEatingAndSocializing(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(x) & College(x)) | (DiningHall(x) & Recipes(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: DiningHall(x) & Recipes(x) -> NotPickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: DiningHall(x) & Recipes(x) -> SpendTimeEating(x) & SpendTimeFriends(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(work) & College(work)) | (EnjoyDiningHalls(work) & Recipes(work))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHalls(work) & Recipes(work) -> NotPickyEater(work)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHalls(work) & Recipes(work) -> SpendTimeEating(work) & CatchUpWithFriends(work)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition"
   ],
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(people) & College(people)) | (EnjoyDiningHalls(people) & Recipes(people))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHalls(people) -> -PickyEater(people)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHalls(people) -> SpendTimeEatingAndSocializing(people)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) | EnjoyDiningHall(x)) & ~ (OrderTakeoutFrequently(x) & ~ EnjoyDiningHall(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) -> NotPickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) -> SpendTimeEatingAndSocializing(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (Takeout(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (Takeout(work) | EnjoyDiningHalls(work))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHalls(x) -> NotPickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHalls(x) -> SpendTimeEating(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJob(mary) &",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) | EnjoyDiningHalls(x)) & -OrderTakeoutFrequently(x) | EnjoyDiningHalls(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHalls(x) -> -PickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHalls(x) -> SpendTimeEating(x) & CatchUpWithFriends(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (CampusJob(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) & College(x) -> CampusJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(people) & College(people)) | (EnjoyDiningHalls(people) & Recipes(people))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHalls(people) -> -PickyEater(people)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHalls(people) -> SpendTimeEatingAndSocializing(people)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition,"
   ],
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (TakeoutFrequent(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (TakeoutFrequent(x) | EnjoyDiningHalls(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHalls(x) -> -PickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHalls(x) -> SpendTimeEating(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: StudentJob(m",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (Takeout(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (Takeout(people) & College(people)) | (DiningHall(people) & Recipes(people))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: (DiningHall(people) & Recipes(people)) -> NotPicky(people)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: (DiningHall(people) & Recipes(people)) -> SpendTimeEatingAndSocializing(people)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(x) & College(x)) | (DiningHall(x) & Recipes(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: DiningHall(x) & Recipes(x) -> NotPicky(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: DiningHall(x) & Recipes(x) -> SpendTimeEating(x) & SpendTimeCatchingUp(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (Takeout(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (Takeout(work) & College(work)) | (DiningHalls(work))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: DiningHalls(work) -> NotPickyEater(work)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: DiningHalls(work) -> SpendTimeEating(work) & SpendTimeSocializing(work)\nTEXT: Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\n",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) | EnjoyDiningHall(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(x) -> -PickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(x) -> SpendTimeEating(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: StudentJob(mary"
   ],
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) | EnjoyDiningHall(x)) & -OrderTakeoutFrequently(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(x) -> -PickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(x) -> SpendTimeEating(x) & CatchUpWithFriends(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(people) & College(people)) | (EnjoyDiningHalls(people) & Recipes(people))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHalls(people) -> -PickyEater(people)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHalls(people) -> TimeEatingAndSocializing(people)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) & -DiningHall(x) & -Recipes(x)) | (-OrderTakeoutFrequently(x) & DiningHall(x) & Recipes(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: DiningHall(x) & Recipes(x) -> NotPickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: DiningHall(x) & Recipes(x) -> SpendTimeEatingAndSocializing(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for",
    "<PREMISES>\n<TEXT>If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.</TEXT>\n<FOL>(StudentJob(x) -> NeedMoney(x))\n<TEXT>If people order takeout frequently in college, then they work in student jobs on campus.</TEXT>\n<FOL>(OrderTakeoutFrequently(x) -> StudentJob(x))\n<TEXT>People either order takeout frequently in college or enjoy the dining hall meals and recipes.</TEXT>\n<FOL>(OrderTakeoutFrequently(x) | EnjoyDiningHall(x))\n<TEXT>If people enjoy the dining hall meals and recipes, then they are not picky eaters.</TEXT>\n<FOL>(EnjoyDiningHall(x) -> NotPickyEater(x))\n<TEXT>If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.</TEXT>\n<FOL>(EnjoyDiningHall(x) -> SpendTimeEating(x))\n<TEXT>If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.</TEXT>\n",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (CampusJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (TakeoutFrequent(x) & College(x) -> CampusJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (TakeoutFrequent(x) & College(x)) | (DiningHalls(x) & Recipes(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: DiningHalls(x) & Recipes(x) -> -PickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: DiningHalls(x) & Recipes(x) -> SpendTimeEating(x) & SpendTimeFriends(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary"
   ]
  ]
 },
 {
  "index": 69,
  "responses": [
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (Takeout(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (Takeout(x) | EnjoyDiningHall(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(x) -> -PickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(x) -> SpendTimeEating(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary(StudentJob(Mary) & EarnMoney(M",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (Takeout(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (Takeout(people) & College(people)) | (DiningHall(people) & Recipes(people))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: (DiningHall(people) & Recipes(people)) -> -PickyEater(people)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: (DiningHall(people) & Recipes(people)) -> EatAndSocialize(people)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (CampusStudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (FrequentTakeout(x) & College(x) -> CampusStudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (FrequentTakeout(x) & College(x)) | (DiningHall(x) & Recipes(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: DiningHall(x) & Recipes(x) -> NotPickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: DiningHall(x) & Recipes(x) -> SpendTimeEating(x) & SpendTimeSocializing(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (TakeoutFrequent(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (TakeoutFrequent(x) & College(x)) | (DiningHall(x) & Recipes(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: DiningHall(x) & Recipes(x) -> NotPickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: DiningHall(x) & Recipes(x) -> EatAndSocialize(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (Takeout(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (Takeout(work) & -EnjoyDiningHalls(work) | (-Takeout(work) & EnjoyDiningHalls(work)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHalls(x) -> NotPickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHalls(x) -> SpendTimeEating(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay"
   ],
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\n\nIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) & College(x) -> StudentJob(x))\n\nPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(work) | EnjoyDiningHalls(work))\n\nIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHalls(work) -> -PickyEater(work)\n\nIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHalls(work) -> SpendTimeEating(work)\n\nIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary(StudentJob(Mary) & NeedMoney(Mary",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) | EnjoyDiningHall(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(x) -> -PickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(x) -> SpendTimeEating(x) & SpendTimeSocializing(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\n",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) & College(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) & College(x)) | (EnjoyDiningHall(x) & EnjoyRecipes(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(x) & EnjoyRecipes(x) -> NotPickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(x) & EnjoyRecipes(x) -> SpendTimeEating(x) & SpendTimeSocializing(x)\nTEXT: If Mary works in student jobs on campus and needs",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) & College(x)) | (EnjoyDiningHall(x) & Recipes(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(x) & Recipes(x) -> -PickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(x) & Recipes(x) -> SpendTimeEating(x) & CatchUpWithFriends(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(mary) & -College(mary)) | (College(mary) & EnjoyDiningHall(mary) & Recipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(mary) & Recipes(mary) -> -PickyEater(mary)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(mary) & Recipes(mary) -> SpendTimeEating(mary) & CatchUpWithFriends(mary)\nTEXT: If Mary works in student jobs"
   ],
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (CampusJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> CampusJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) | EnjoyDiningHalls(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHalls(x) -> -PickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHalls(x) -> SpendTimeEating(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (CampusJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (Takeout(x) -> CampusJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (Takeout(people) | EnjoyDiningHall(people))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(people) -> -PickyEater(people)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(people) -> EatAndSocialize(people)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary(Campus",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) & -EnjoyDiningHall(x)) | (-OrderTakeoutFrequently(x) & EnjoyDiningHall(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(x) -> -PickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(x) -> EatAndCatchUp(x)\nTEXT: Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (Takeout(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (Takeout(people) | EnjoyDiningHall(people))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(people) -> -PickyEater(people)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(people) -> EatAndSocialize(people)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: StudentJob",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) & College(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) & College(x)) | (EnjoyDiningHall(x) & Recipes(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(x) & Recipes(x) -> -PickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(x) & Recipes(x) -> SpendTimeEating(x) & CatchUpWithFriends(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money"
   ],
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (CampusStudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> CampusStudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) & -EnjoyDiningHalls(x)) | (-OrderTakeoutFrequently(x) & EnjoyDiningHalls(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHalls(x) -> NotPickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHalls(x) -> SpendTimeEating(x) & SpendTimeSocializing(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (CampusJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) & College(x) -> CampusJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) & College(x)) | (EnjoyDiningHall(x) & Recipes(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(x) & Recipes(x) -> -PickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(x) & Recipes(x) -> SpendTimeEating(x) & CatchUpFriends(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\n\nIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) -> StudentJob(x))\n\nPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(work) | EnjoyDiningHall(work))\n\nIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(x) -> -PickyEater(x)\n\nIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(x) -> SpendTimeEating(x)\n\nIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: (StudentJob(mary) & NeedMoney(mary)) -> (NotPickyE",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) & -DiningHall(x) | -OrderTakeoutFrequently(x) & DiningHall(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (DiningHall(x) -> -PickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (DiningHall(x) -> SpendTimeEating(x) & SpendTimeSocializing(x))\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (Takeout(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (Takeout(people) | EnjoyDiningHalls(people))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHalls(people) -> -PickyEater(people)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHalls(people) -> EatAndSocialize(people)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary"
   ],
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x)ToPayTuition(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(y) & -College(y)) | (College(y) & EnjoyDiningHall(y & Recipes(y)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(y & Recipes(y)) -> NotPickyEater(y)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(y & Recipes(y)) -> SpendTimeEatingAndSocializing(y)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (CampusJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) & College(x) -> CampusJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(y) & -College(y)) | (College(y) & EnjoyDiningHall(y & Recipes(y)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(y & Recipes(y)) -> -PickyEater(y)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(y & Recipes(y)) -> SpendTimeEating(y & CatchUpWithFriends(y & CampusDiningHalls(y)))\nTEXT: If Mary works in student jobs on campus and needs",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(y) & College(y)) | (EnjoyDiningHalls(y) & Recipes(y))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHalls(y) & Recipes(y) -> NotPickyEater(y)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHalls(y) & Recipes(y) -> SpendTimeEating(y) & CatchUpFriends(y)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition,",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(x) & College(x)) | (EnjoyDiningHall(x) & Recipes(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(x) & Recipes(x) -> NotPickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(x) & Recipes(x) -> SpendTimeEating(x) & CatchUpWithFriends(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) & -EnjoyDiningHall(x)) | (-OrderTakeoutFrequently(x) & EnjoyDiningHall(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(x) -> -PickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(x) -> SpendTimeEatingAndSocializing(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither"
   ]
  ]
 },
 {
  "index": 70,
  "responses": [
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) & -EnjoyDiningHall(x)) | (-OrderTakeoutFrequently(x) & EnjoyDiningHall(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(x) -> -PickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(x) -> SpendTimeEating(x) & SpendTimeSocializing(x)\nTEXT: Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\n\nIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) & College(x) -> StudentJob(x))\n\nPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(mary) & College(mary)) | (EnjoyDiningHall(mary) & Recipes(mary))\n\nIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(mary) -> -PickyEater(mary)\n\nIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(mary) -> SpendTimeEatingAndSocializing(mary)\n\nIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) | EnjoyDiningHall(x)) \nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(x) -> NotPickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(x) -> SpendTimeEating(x) & CatchUpWithFriends(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(work) | EnjoyDiningHalls(work))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHalls(x) -> -PickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHalls(x) -> EatAndSocialize(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (Takeout(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (Takeout(people) & College(people)) | (DiningHallMealsAndRecipes(people))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: DiningHallMealsAndRecipes(people) -> -PickyEater(people)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: DiningHallMealsAndRecipes(people) -> TimeEatingAndCatchingUp(people)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky"
   ],
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\n\nIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) -> StudentJob(x))\n\nPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(mary) | EnjoyDiningHall(mary) & Recipes(mary))\n\nIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(mary) -> -PickyEater(mary)\n\nIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(mary) -> SpendTimeEating(mary) & CatchUpFriends(mary)\n\nIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL:",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) & College(x) -> StudentJob(x))\nPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(x) & College(x)) | (DiningHall(x) & Recipes(x))\nIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: DiningHall(x) & Recipes(x) -> NotPickyEater(x)\nIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: DiningHall(x) & Recipes(x) -> SpendTimeEating(x) & CatchUpFriends(x)\nIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (Takeout(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (Takeout(people) & College(people)) | (DiningHall(people) & Recipes(people))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: (DiningHall(people) & Recipes(people)) -> NotPickyEater(people)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: (DiningHall(people) & Recipes(people)) -> EatAndSocialize(people)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (CampusJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) & College(x) -> CampusJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(mary) & College(mary)) | (EnjoyDiningHalls(mary) & Recipes(mary))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHalls(mary) -> NotPickyEater(mary)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHalls(mary) -> SpendTimeEating(mary) & SpendTimeSocializing(mary)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\n\nIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\n\nPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) | EnjoyDiningHall(x))\n\nIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(x) -> -PickyEater(x)\n\nIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(x) -> SpendTimeEating(x)\n\nIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Mary is StudentJob(Mary) & Mary is NeedMoney(Mary"
   ],
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\n\nIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\n\nPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) & -EnjoyDiningHall(x)) | (-OrderTakeoutFrequently(x) & EnjoyDiningHall(x))\n\nIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(x) -> -PickyEater(x)\n\nIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(x) -> SpendTimeEatingAndSocializing(x)\n\nIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(work) | EnjoyDiningHalls(work))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHalls(x) -> -PickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHalls(x) -> EatAndSocialize(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: Student",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) & College(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) & College(x)) | (EnjoyDiningHall(x) & Recipes(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(x) & Recipes(x) -> -PickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(x) & Recipes(x) -> SpendTimeEating(x) & CatchUpFriends(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(x) & College(x)) | (EnjoyDiningHall(x) & Recipes(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: (EnjoyDiningHall(x) & Recipes(x)) -> NotPickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: (EnjoyDiningHall(x) & Recipes(x)) -> SpendTimeEating(x) & CatchUpWithFriends(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition,",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(x) & College(x)) | (DiningHall(x) & Recipes(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: (DiningHall(x) & Recipes(x)) -> NotPickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: (DiningHall(x) & Recipes(x)) -> SpendTimeEating(x) & SpendTimeSocializing(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is"
   ],
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (TakeoutFrequent(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (TakeoutFrequent(x) & -DiningHall(x) & -Recipes(x)) | (-TakeoutFrequent(x) & DiningHall(x) & Recipes(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: DiningHall(x) & Recipes(x) -> NotPickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: DiningHall(x) & Recipes(x) -> SpendTimeEating(x) & SpendTimeFriends(x)\nTEXT: Mary works in student jobs on campus and needs to earn money to help pay",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (CampusStudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (FrequentTakeout(x) & College(x) -> CampusStudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (FrequentTakeout(x) & College(x)) | (DiningHall(x) & Recipes(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: DiningHall(x) & Recipes(x) -> -PickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: DiningHall(x) & Recipes(x) -> TimeEating(x) & TimeSocializing(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedToEarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(y) & College(y)) | (EnjoyDiningHalls(y) & Recipes(y))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHalls(y) & Recipes(y) -> -PickyEater(y)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHalls(y) & Recipes(y) -> SpendTimeEating(y) & CatchUpWithFriends(y)\nTEXT: Mary works in student jobs on campus and needs to earn money to help pay for her college",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) & -EnjoyDiningHall(x) | (-OrderTakeoutFrequently(x) & EnjoyDiningHall(x)))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(x) -> NotPickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(x) -> SpendTimeEating(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(x) & College(x)) | (EnjoyDining(x) & EnjoyRecipes(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDining(x) & EnjoyRecipes(x) -> NotPickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDining(x) & EnjoyRecipes(x) -> SpendTimeEating(x) & SpendTimeSocializing(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary"
   ],
   [
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\n\nIf people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) -> StudentJob(x))\n\nPeople either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(people) | EnjoyDiningHall(people))\n\nIf people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(x) -> -PickyEater(x)\n\nIf people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(x) -> EatAndSocialize(x)\n\nIf Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nFOL: StudentJob(mary) & EarnMoney(mary) & -PickyE",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> NeedMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(work) & College(work)) | (EnjoyDiningHalls(work) & Recipes(work))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHalls(work) & Recipes(work) -> NotPickyEater(work)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHalls(work) & Recipes(work) -> SpendTimeEating(work) & SpendTimeSocializing(work)\nTEXT: Mary works in student jobs on campus and needs to earn money to help pay for her college tuition,",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeout(x) & College(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeout(x) & College(x)) | (EnjoyDiningHalls(x) & Recipes(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHalls(x) & Recipes(x) -> NotPickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHalls(x) & Recipes(x) -> SpendTimeEating(x) & CatchUpWithFriends(x)\nTEXT: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJob(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) -> StudentJob(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) & -EnjoyDiningHall(x)) | (-OrderTakeoutFrequently(x) & EnjoyDiningHall(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: EnjoyDiningHall(x) -> -PickyEater(x)\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: EnjoyDiningHall(x) -> SpendTimeEatingAndSocializing(x)\nTEXT: Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor",
    "<PREMISES>\nIf people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nFOL: all x. (StudentJobOnCampus(x) -> EarnMoney(x))\nTEXT: If people order takeout frequently in college, then they work in student jobs on campus.\nFOL: all x. (OrderTakeoutFrequently(x) & College(x) -> StudentJobOnCampus(x))\nTEXT: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\nFOL: (OrderTakeoutFrequently(x) & College(x)) | (EnjoyDiningHall(x) & Recipes(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\nFOL: all x. (EnjoyDiningHall(x) & Recipes(x) -> NotPickyEater(x))\nTEXT: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nFOL: all x. (EnjoyDiningHall(x) & Recipes(x) -> SpendTimeEating(x) & SpendTimeSocializing(x))\nTEXT: If Mary works in student"
   ]
  ]
 },
 {
  "index": 71,
  "responses": [
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (DriedThaiChili(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChili) \n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (DriedThaiChili(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChili)",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((DriedThaiChili(x) & Spicy(x)) | (Bakery(x) & (Hotpot(x) | Spicy(x))))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChili) \n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((DriedThaiChili(x) & Spicy(x)) | (Bakery(x) & (Hotpot(x) | Spicy(x)))) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChili) \n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChili) \n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili)))\nTEXT: Dried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChili)\n</PREMISES>\n\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChili)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChili) \n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(x) -> Cupcake(x)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Dried Thai chilies are spicy or a bakery.\nFOL: Spicy(x) | Bakery(x)\nTEXT: Dried Thai chilies are a hotpot or are spicy.\nFOL: Hotpot(x) | Spicy(x",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((DriedThaiChili(x) & Spicy(x)) | (Bakery(x) & (Hotpot(x) | Spicy(x)))) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChili)",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: Product(driedThaiChilies, BakedByMelissa)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChili) \n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: Product(driedThaiChilies, BakedByMelissa)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChili) \n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: BakedByMelissa(driedThaiChilies)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies) \n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChilies)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: ProductOfBakedByMelissa(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a product of Baked by Melissa.\nFOL: Product(driedThaiChili, BakedByMelissa)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 72,
  "responses": [
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -Product(driedThaiChili, BakedByMelissa)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -Product(driedThaiChili, BakedByMelissa)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChili)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(driedThaiChili) & -Bakery(driedThaiChili)) | (-Spicy(driedThaiChili) & Bakery(driedThaiChili))) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -Product(driedThaiChili, BakedByMelissa)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -Product(driedThaiChili, BakedByMelissa)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -Product(driedThaiChilies, BakedByMelissa)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -Product(bakedByMelissa(driedThaiChili))",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChili)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili)))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -Product(driedThaiChili, BakedByMelissa)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -Product(driedThaiChili, BakedByMelissa)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (DriedThaiChili(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(DriedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -Product(driedThaiChili, BakedByMelissa)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChili)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (DriedThaiChili(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -Product(driedThaiChili, BakedByMelissa)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili)))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -ProductOfBakedByMelissa(driedThaiChili)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\nTEXT: Dried Thai chilies are not a product of Baked by Melissa.\nFOL: -BakedByMelissa(driedThaiChili)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are not a product of Baked by Melissa.\nFOL: -Product(driedThaiChili, BakedByMelissa)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 73,
  "responses": [
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(x) -> driedThaiChilies(x)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (DriedThaiChili(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: DriedThaiChili(x) -> Hotpot(x)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChili)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChili)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((DriedThaiChili(x) & Spicy(x)) | (Bakery(x) & (Hotpot(x) | Spicy(x)))) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: DriedThaiChili(x) -> Hotpot(x)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChili)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChilies)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChili)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x) -> Bakery(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(x) -> DriedThaiChilies(x)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(x) -> DriedThaiChili(x)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((DriedThaiChili(x) & Spicy(x)) | (Bakery(x) & DriedThaiChili(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: DriedThaiChili(x) -> Hotpot(x)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are a hotpot.\nFOL: Hotpot(x) | Spicy(x)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 74,
  "responses": [
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -Product(driedThaiChilies, BakedByMelissa) & -Bakery(driedThaiChilies)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChili) & -Bakery(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili)))\nTEXT: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -Product(driedThaiChili, BakedByMelissa) & -Bakery(driedThaiChili)\n</PREMISES>\n\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChili) & -Bakery(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (DriedThaiChili(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChili) & -Bakery(driedThaiChili)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -Product(driedThaiChilies, BakedByMelissa) & -Bakery(driedThaiChilies)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x) -> Cupcake(x) & (x -> BakedByMelissa(x)))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -Product(driedThaiChili) & -Bakery(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -Product(driedThaiChili, BakedByMelissa) & -Bakery(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChili) & -Bakery(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChili) & -Bakery(driedThaiChili)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChili) & -Bakery(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChili) & -Bakery(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (DriedThaiChili(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChili) & -Bakery(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -Product(driedThaiChili, BakedByMelissa) & -Bakery(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -Product(driedThaiChili, BakedByMelissa) & -Bakery(driedThaiChili)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChili) & -Bakery(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChili) & -Bakery(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -Product(driedThaiChili, BakedByMelissa) & -Bakery(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((DriedThaiChili(x) & Spicy(x)) | (Bakery(x) & (Hotpot(x) | Spicy(x)))) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -Product(driedThaiChili, BakedByMelissa) & -Bakery(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -ProductOfBakedByMelissa(driedThaiChili) & -Bakery(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(driedThaiChili) & -Bakery(driedThaiChili)) | (-Spicy(driedThaiChili) & Bakery(driedThaiChili))) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChili) & -Bakery(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChili) & -Bakery(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(x) & -Bakery(x)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery.\nFOL: -BakedByMelissa(driedThaiChilies) & -Bakery(driedThaiChilies)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 75,
  "responses": [
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((DriedThaiChili(x) & Spicy(x)) | (Bakery(x) & (Hotpot(x) | Spicy(x))))\n</PREMISES>\n\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: (Cupcake(driedThaiChili) & Product(driedThaiChili, BakedByMelissa))\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: (Spicy(x) | Bakery(x)) -> (Cupcake(x) & Product(x, BakedByMelissa))\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((DriedThaiChili(x) & Spicy(x)) | (Bakery(x) & (Hotpot(x) | Spicy(x))))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: ((DriedThaiChili(x) & Cupcake(x)) & (ProductOfBakedByMelissa(x) & Cupcake(x)))\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: (Cupcake(driedThaiChili) & ProductOfBakedByMelissa(driedThaiChili))\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: (Cupcake(driedThaiChilies) & ProductOfBakedByMelissa(driedThaiChilies))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((DriedThaiChili(x) & Spicy(x)) | (Bakery(x) & (Hotpot(x) | Spicy(x)))) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: (Cupcake(driedThaiChili) & Product(driedThaiChili, BakedByMelissa))\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: (Cupcake(x) & ProductOfBakedByMelissa(x)) & (DriedThaiChili(x))\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (DriedThaiChili(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: (DriedThaiChili(x) & Product(x, BakedByMelissa)) & Cupcake(x)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (DriedThaiChili(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: (DriedThaiChili(x) & Cupcake(x) & ProductOfBakedByMelissa(x))\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: (Cupcake(x) & Product(x, BakedByMelissa)) & x = driedThaiChilies\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: Cupcake(driedThaiChili) & ProductOfBakedByMelissa(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: (Cupcake(x) & Product(x, BakedByMelissa)) & x = driedThaiChilies\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((ThaiChili(x) & Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: (Cupcake(ThaiChili) & BakedByMelissa(ThaiChili))\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: (Spicy(x) | Bakery(x)) -> (Cupcake(x) & Product(x, BakedByMelissa))\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (DriedThaiChili(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: (DriedThaiChili(x) & ProductOfBakedByMelissa(x)) & Cupcake(x)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: (Cupcake(driedThaiChili) & BakedByMelissa(driedThaiChili))\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (BakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: (Cupcake(driedThaiChili) & BakedByMelissa(driedThaiChili))\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) & Product(driedThaiChili, BakedByMelissa) & Cupcake(driedThaiChili)\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((ThaiChili(x) & Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: (ThaiChili(driedThaiChili) & Cupcake(driedThaiChili) & Product(driedThaiChili, BakedByMelissa))\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (DriedThaiChili(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: (DriedThaiChili(x) & Cupcake(x) & ProductOfBakedByMelissa(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: (Cupcake(x) & ProductOfBakedByMelissa(x)) & (Spicy(x) | Bakery(x))\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((DriedThaiChili(x) & Spicy(x)) | (Bakery(x) & DriedThaiChili(x))) -> ((Hotpot(x) & DriedThaiChili(x)) | Spicy(x))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: (DriedThaiChili(x) & Cupcake(x) & Product(x, BakedByMelissa)) & (DriedThaiChili(x) & Cupcake(x))\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nTEXT: All cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nTEXT: All hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nTEXT: All products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nTEXT: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: (Cupcake(driedThaiChili) & ProductOfBakedByMelissa(driedThaiChili))\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (ProductOfBakedByMelissa(x) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: (Spicy(driedThaiChili) | Bakery(driedThaiChili)) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: (Cupcake(driedThaiChili) & ProductOfBakedByMelissa(driedThaiChili))\n</CONCLUSION>",
    "<PREMISES>\nNo bakery is spicy.\nFOL: all x. (Bakery(x) -> -Spicy(x))\nAll cupcakes are bakeries.\nFOL: all x. (Cupcake(x) -> Bakery(x))\nAll hotpots are spicy.\nFOL: all x. (Hotpot(x) -> Spicy(x))\nAll products of Baked by Melissa are cupcakes.\nFOL: all x. (Product(x, BakedByMelissa) -> Cupcake(x))\nIf dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nFOL: ((Spicy(driedThaiChili) & -Bakery(driedThaiChili)) | (-Spicy(driedThaiChili) & Bakery(driedThaiChili))) -> (Hotpot(driedThaiChili) | Spicy(driedThaiChili))\n</PREMISES>\n<CONCLUSION>\nDried Thai chilies are cupcakes and a product of Baked by Melissa.\nFOL: (Cupcake(driedThaiChili) & Product(driedThaiChili, BakedByMelissa)) & (Bakery(driedThaiChili) & Product(d"
   ]
  ]
 },
 {
  "index": 76,
  "responses": [
   [
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendations(r) -> -ManyNegativeReviews(r))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongResidents(subway))\n</PREMISES>\n<CONCLUSION>\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOut(subway) & ManyNegativeReviews(subway)) -> (Rating(subway) > 9 & -Provide",
    "<PREMISES>\n<evaluate>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: YelpRecommended(x) -> -ManyNegativeReviews(x)\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommended(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9 | Popular(subway))\n</evaluate>\n\n</PREMISES>\n<CONCLUSION>\n<evaluate>\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOut(subway) & ManyNegativeReviews(subway)) -> (Rating(subway) > 9 & -",
    "<PREMISES>\n<evaluate>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: YelpListing(x) -> -ManyNegativeReviews(x)\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpListing(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9 | Popular(subway))\n</evaluate>\n</PREMISES>\n<CONCLUSION>\n<evaluate>\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOut(subway) & ManyNegativeReviews(subway) & Rating(subway) > 9 &",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongResidents(subway))\n</PREMISES>\n<CONCLUSION>\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOut(subway) & ManyNegativeReviews(subway)) -> (Rating(subway) > 9 & -Provide",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendations(r) -> -ManyNegativeReviews(r))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (Popular(subway))\n</PREMISES>\n<CONCLUSION>\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOut(subway) & ManyNegativeReviews(subway)) -> (Rating(subway) > 9 & -ProvideTakeOut(subway"
   ],
   [
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpListed(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpListed(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (Popular(subway))\n</PREMISES>\n<CONCLUSION>\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOut(subway) & ManyNegativeReviews(subway)) -> ((Rating(subway) > 9) & -ProvideTakeOut(sub",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: YelpRecommendation(x) -> -ManyNegativeReviews(x)\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (HighRating(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> HighRating(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (HighRating(subway) | Popular(subway))\n</PREMISES>\n\n<CONCLUSION>\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: YelpRecommendation(x) -> -ManyNegativeReviews(x",
    "<PREMISES>\n<CONCLUSION>\n</PREMISES>\n<CONCLUSION>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: YelpRecommendations(x) -> -ManyNegativeReviews(x)\nAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendations(x))\nSome restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nAll restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nSubway has a rating greater than 9 or is popular among local residents.\nFOL: Subway -> (Rating(Subway) > 9 | PopularAmongResidents(Subway))\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOut(Subway) & ManyNegativeReviews(Subway)) -> (Rating(Subway) > 9 & -ProvideTakeOut(Subway))\n",
    "<PREMISES>\n<evaluatemultiline>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: Restaurant(r) -> -NegativeReviews(r)\nAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> Restaurant(x))\nSome restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & -Restaurant(x) & NegativeReviews(x))\nAll restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> Rating(x) > 9)\nSubway has a rating greater than 9 or is popular among local residents.\nFOL: Rating(subway) > 9 | Popular(subway)\n</evaluatemultiline>\n</PREMISES>\n<CONCLUSION>\n<evaluatemultiline>\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: ProvideTakeOut(subway) & NegativeReviews(subway) & Rating(subway) > 9 & -",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendation(r) -> -ManyNegativeReviews(r))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongResidents(subway))\n</PREMISES>\n<CONCLUSION>\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOut(subway) & ManyNegativeReviews(subway)) -> (Rating(subway) > 9 & -Provide"
   ],
   [
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: Restaurant(r) -> -NegativeReviews(r)\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> Restaurant(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOut(x) & NegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (Popular(subway))\n</PREMISES>\n<CONCLUSION>\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOut(subway) & NegativeReviews(subway)) -> (Rating(subway) > 9 & -TakeOut(subway))\n</CONCLUSION>",
    "<PREMISES>\n<CONCLUSION>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nall x. (YelpRecommended(x) -> -ManyNegativeReviews(x))\nall x. (YelpRecommended(x) & Rating(x) > 9)\nsome x. (-TakeOut(x) & ManyNegativeReviews(x))\nall x. (Popular(x) & Rating(x) > 9)\nSubway has a rating greater than 9 or is popular among local residents.\n(YelpRecommended(subway) | (Rating(subway) > 9 | Popular(subway)))\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\n(-TakeOut(subway) & ManyNegativeReviews(subway) -> (Rating(subway) > 9 & -TakeOut(subway)))\n</PREMISES>\n<CONCLUSION>\nall x. (-TakeOut(x) & ManyNegativeReviews(x) -> (Rating(x) > 9 & -TakeOut(x)))\n</CONCLUSION>",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: -ManyNegativeReviews(r) -> ListedInYelpsRecommendations(r)\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> ListedInYelpsRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongLocalResidents(subway))\n</PREMISES>\n<CONCLUSION>\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOut(subway) & ManyNegativeReviews(subway)) -> (Rating(subway)",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendations(r) -> -ManyNegativeReviews(r))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongResidents(subway))\n</PREMISES>\n<CONCLUSION>\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOut(subway) & ManyNegativeReviews(subway) -> (Rating(subway) > 9) & -",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: Restaurant(x) -> -ManyNegativeReviews(x)\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> Restaurant(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & Restaurant(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongResidents(subway))\n</PREMISES>\n<CONCLUSION>\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOut(subway) & ManyNegativeReviews(subway)) -> (Rating(subway) > 9 & -ProvideTakeOut"
   ],
   [
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: YelpRecommendation(r) -> -ManyNegativeReviews(r)\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway(Rating(Subway) > 9 | PopularAmongResidents(Subway))\n</PREMISES>\n<CONCLUSION>\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOut(Subway) & ManyNegativeReviews(Subway)) -> (Rating(Subway) > 9 & -TakeOut(Subway))\n</",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: YelpRecommendation(x) -> -ManyNegativeReviews(x)\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9 | Popular(subway))\n</PREMISES>\n<CONCLUSION>\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOutService(subway) & ManyNegativeReviews(subway)) -> (Rating(subway) > 9 & -TakeOutService(subway))\n</CONCLUSION",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (ListedInYelpsRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> ListedInYelpsRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongLocalResidents(subway))\n</PREMISES>\n<CONCLUSION>\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOut(subway) & ManyNegativeReviews(subway)) -> (Rating(sub",
    "<PREMISES>\n<CONCLUSION>\n</PREMISES>\n<CONCLUSION>\n\n<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongResidents(subway))\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOut(subway) & ManyNegativeReviews(subway",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: -ManyNegativeReviews(x) -> ListedInYelps(x)\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> ListedInYelps(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongResidents(subway))\n</PREMISES>\n<CONCLUSION>\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOut(subway) & ManyNegativeReviews(subway)) -> (Rating(subway) > 9 & -Provide"
   ],
   [
    "<PREMISES>\n<evaluate>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongResidents(subway))\n</evaluate>\n<CONCLUSION>\n<evaluate>\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOut(subway) & ManyNegativeReviews(subway",
    "<PREMISES>\n<CONCLUSION>\n<_EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: YelpListed(x) -> -ManyNegativeReviews(x)\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpListed(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9 | Popular(subway))\n</PREMISES>\n<CONCLUSION>\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOut(subway) & ManyNegativeReviews(subway) -> (Rating(subway) >",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocals(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongLocals(subway))\n</PREMISES>\n<CONCLUSION>\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (ProvideTakeOut(subway) & ManyNegativeReviews(subway)) -> (Rating(subway) > 9 &",
    "<PREMISES>\n<evaluate>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: Restaurant(r) -> -ManyNegativeReviews(r)\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Restaurant(x) & Rating(x) > 9 -> Restaurant(r) & Rating(r) > 9)\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & Restaurant(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Restaurant(r) & Rating(r) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(Subway) > 9 | PopularAmongResidents(Subway))\n</evaluate>\n</PREMISES>\n<CONCLUSION>\n<evaluate>\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (",
    "<PREMISES>\n<evaluate>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendation(x) -> -NegativeReview(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOut(x) & NegativeReview(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (Popular(subway))\n</evaluate>\n\n</PREMISES>\n<CONCLUSION>\n<evaluate>\nTEXT: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\nFOL: (TakeOut(subway) & NegativeReview(subway) & (Rating(subway) > "
   ]
  ]
 },
 {
  "index": 77,
  "responses": [
   [
    "<PREMISES>\n<_EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (HighRating(x) -> YelpRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> HighRating(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: SubwayRating > 9 | Popular(Subway)\n</EVALUATE>\n\n</PREMISES>\n<CONCLUSION>\n<_EVALUATE>\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: TakeOut(Subway) & -ManyNegativeReviews(Subway)\n</EVALUATE>\n</CONCLUSION>",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: Restaurant(x) -> -ManyNegativeReviews(x)\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> Restaurant(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (Popular(subway))\n</PREMISES>\n<CONCLUSION>\nSubway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOut(subway) & -ManyNegativeReviews(subway)\n</CONCLUSION>",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (ListedInYelp(r) -> -ManyNegativeReviews(r))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> ListedInYelp(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocals(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongLocals(subway))\n</PREMISES>\n<CONCLUSION>\nSubway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOut(subway) & -ManyNegativeReviews(subway)\n</CONCLUSION>",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvidesTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Subway & Rating(Subway) > 9) | (Subway & PopularAmongResidents(Subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvidesTakeOut(Subway) & -ManyNegativeReviews(Subway)\n</PREMISES>\n\n<CONCLUSION>\nSubway provides take-out service and does not receive many negative reviews.\nFOL: ProvidesTakeOut",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: Restaurant(r) -> -ManyNegativeReviews(r)\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> Restaurant(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & Restaurant(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(Subway) > 9) | (PopularAmongResidents(Subway))\n</PREMISES>\n<CONCLUSION>\nSubway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOut(Subway) & -ManyNegativeReviews(Subway)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: Restaurant(r) -> -ManyNegativeReviews(r)\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> Restaurant(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & Restaurant(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(Subway) > 9) | (Popular(Subway))\n</PREMISES>\n<CONCLUSION>\nSubway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOut(Subway) & -ManyNegativeReviews(Subway)\n</CONCLUSION>",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendation(r) -> -ManyNegativeReviews(r))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongResidents(subway))\n</PREMISES>\n<CONCLUSION>\nSubway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOut(subway) & -ManyNegativeReviews(subway)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: TakeOutService(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (HighRating(x) -> YelpRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> HighRating(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (HighRating(subway) | Popular(subway))\n</PREMISES>\n<CONCLUSION>\nSubway provides take-out service and does not receive many negative reviews.\nFOL: TakeOut(subway) & -ManyNegativeReviews(subway)\n</CONCLUSION>",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: ListInYelps(restaurant) -> -ManyNegativeReviews(restaurant)\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> ListInYelps(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongResidents(subway))\n</PREMISES>\n<CONCLUSION>\nSubway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOut(subway) & -ManyNegativeReviews(subway)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (GoodRating(x) & GoodRating(x) > 9 -> YelpRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOut(x) & -TakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> GoodRating(x) & GoodRating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway (GoodRating(Subway) | Popular(Subway))\n</PREMISES>\n<CONCLUSION>\nSubway provides take-out service and does not receive many negative reviews.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL:",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (HighRating(x) -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOut(x) & -ManyNegativeReviews(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> HighRating(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Subway & HighRating(Subway)) | (Subway & Popular(Subway))\n</PREMISES>\n<CONCLUSION>\nSubway provides take-out service and does not receive many negative reviews.\nFOL: TakeOut(Subway) & -ManyNegativeReviews(Subway)\n</CONCLUSION>",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendations(r) -> -ManyNegativeReviews(r))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongResidents(subway))\n</PREMISES>\n<CONCLUSION>\nSubway provides take-out service and does not receive many negative reviews.\nFOL: TakeOutService(subway) & -ManyNegativeReviews(subway)\n</CONCLUSION>",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: YelpListed(x) -> -ManyNegativeReviews(x)\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpListed(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9 | Popular(subway))\n</PREMISES>\n<CONCLUSION>\nSubway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOut(subway) & -ManyNegativeReviews(subway)\n</CONCLUSION>",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (HighRating(x) -> YelpRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> HighRating(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Subway & HighRating(Subway)) | (Subway & Popular(Subway))\n</PREMISES>\n<CONCLUSION>\nSubway provides take-out service and does not receive many negative reviews.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT: All"
   ],
   [
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: ListedinYelp(restaurant) -> -ManyNegativeReviews(restaurant)\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> ListedinYelp(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocals(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongLocals(subway))\n</PREMISES>\n<CONCLUSION>\nSubway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOut(subway) & -ManyNegativeReviews(subway)\n</CONCLUSION>",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (ListedInYelp(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> ListedInYelp(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocalResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongLocalResidents(subway))\n</PREMISES>\n<CONCLUSION>\nSubway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOut(subway) & -ManyNegativeReviews(subway)\n</CONCLUSION>",
    "<PREMISES>\n<TEXT>If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.</TEXT>\n<FOL>If ListedInYelp(x) then -ManyNegativeReviews(x)</FOL>\n<TEXT>All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.</TEXT>\n<FOL>all x. (Rating(x) > 9 -> ListedInYelp(x))</FOL>\n<TEXT>Some restaurants that do not provide take-out service receive many negative reviews.</TEXT>\n<FOL>exists x. (-ProvidesTakeOut(x) & ManyNegativeReviews(x))</FOL>\n<TEXT>All restaurants that are popular among local residents have ratings greater than 9.</TEXT>\n<FOL>all x. (PopularAmongLocalResidents(x) -> Rating(x) > 9)</FOL>\n<TEXT>Subway has a rating greater than 9 or is popular among local residents.</TEXT>\n<FOL>Subway (Rating(Subway) > 9 | PopularAmongLocalResidents(Subway))</FOL>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Subway provides take-out service and does not receive many negative reviews.</TEXT>\n<FOL>-Provides",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: Restaurant(r) -> -ManyNegativeReviews(r)\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> Restaurant(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & -Restaurant(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(Subway) > 9) | (Popular(Subway))\n</PREMISES>\n<CONCLUSION>\nSubway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOut(Subway) & -ManyNegativeReviews(Subway)\n</CONCLUSION>",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvidesTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongResidents(subway))\n</PREMISES>\n<CONCLUSION>\nSubway provides take-out service and does not receive many negative reviews.\nFOL: ProvidesTakeOut(subway) & -ManyNegativeReviews(subway)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpListed(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpListed(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOut(x) & -YelpListed(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (Popular(subway))\n</PREMISES>\n<CONCLUSION>\nSubway provides take-out service and does not receive many negative reviews.\nFOL: TakeOut(subway) & -ManyNegativeReviews(subway)\n</CONCLUSION>",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendation(r) -> -ManyNegativeReviews(r))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & -ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongResidents(subway))\n</PREMISES>\n<CONCLUSION>\nSubway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOut(subway) & -ManyNegativeReviews(subway)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongResidents(subway))\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOut(subway) & -ManyNegativeReviews(subway)\n</EVALUATE>",
    "<PREMISES>\n<evaluate>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Subway & (Rating(Subway) > 9) | (-Subway & PopularAmongResidents(Subway)))\n</evaluate>\n</PREMISES>\n\n<CONCLUSION>\n<evaluate>\nTEXT: Subway provides take-out service and does not receive many negative reviews.\nFOL: ProvideTakeOut(Subway) & -ManyNegativeReviews(Subway)\n</evaluate>\n</CONCLUSION>",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommended(r) -> -ManyNegativeReviews(r))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommended(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvidesTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongResidents(subway))\n</PREMISES>\n<CONCLUSION>\nSubway provides take-out service and does not receive many negative reviews.\nFOL: ProvidesTakeOut(subway) & -ManyNegativeReviews(subway)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 78,
  "responses": [
   [
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpListed(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpListed(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9 | Popular(subway))\n</PREMISES>\n<CONCLUSION>\nSubway does not provide take-out service.\nFOL: -ProvideTakeOut(subway)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOut(x) & -ManyNegativeReviews(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (Popular(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -TakeOut(subway)\n</EVALUATE>",
    "<PREMISES>\n<evaluate>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendations(x) -> -NegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & NegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (Popular(subway))\n</evaluate>\n</PREMISES>\n<CONCLUSION>\n<evaluate>\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOut(subway)\n</evaluate>\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (ListedInYelp(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> ListedInYelp(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocals(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongLocals(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOut(subway)\n</EVALUATE>",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: YelpRecommendations(x) -> -ManyNegativeReviews(x)\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (HighRating(x) -> YelpRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOutService(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> HighRating(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (HighRating(subway) | Popular(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -TakeOutService(subway)\n</PREMISES>\n\n<CONCLUSION>\nSubway does not provide take-out service.\nFOL: -TakeOutService(subway)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (ListedInYelp(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (HighRating(x) -> ListedInYelp(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> HighRating(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Subway & HighRating(Subway)) | (Subway & Popular(Subway))\n</PREMISES>\n<CONCLUSION>\nSubway does not provide take-out service.\nFOL: -ProvideTakeOut(Subway)\n</CONCLUSION>",
    "<PREMISES>\n<PREMISE>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\n</PREMISE>\n<FOL>\nall x. (YelpRecommended(x) -> -ManyNegativeReviews(x))\n</FOL>\n\n<PREMISE>\nAll restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\n</PREMISE>\n<FOL>\nall x. (Rating(x) > 9 -> YelpRecommended(x))\n</FOL>\n\n<PREMISE>\nSome restaurants that do not provide take-out service receive many negative reviews.\n</PREMISE>\n<FOL>\nexists x. (-TakeOut(x) & ManyNegativeReviews(x))\n</FOL>\n\n<PREMISE>\nAll restaurants that are popular among local residents have ratings greater than 9.\n</PREMISE>\n<FOL>\nall x. (PopularAmongResidents(x) -> Rating(x) > 9)\n</FOL>\n\n<PREMISE>\nSubway has a rating greater than 9 or is popular among local residents.\n</PREMISE>\n<FOL>\nSubway(Rating(Subway) > 9 | PopularAmongResidents(Subway))\n</FOL>\n\n</PREMISES",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendation(r) -> -ManyNegativeReviews(r))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway(rating(r) > 9) | PopularAmongResidents(r)\n</PREMISES>\n<CONCLUSION>\nSubway does not provide take-out service.\nFOL: -ProvideTakeOut(Subway)\n</CONCLUSION>",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: Restaurant(r) -> -ManyNegativeReviews(r)\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> Restaurant(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway(Rating(Subway) > 9) | (PopularAmongResidents(Subway))\n</PREMISES>\n<CONCLUSION>\nSubway does not provide take-out service.\nFOL: -ProvideTakeOut(Subway)\n</CONCLUSION>",
    "<PREMISES>\n<TEXT>If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.</TEXT>\n<FOL>(YelpRecommendations(x) -> -ManyNegativeReviews(x))\n<TEXT>All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.</TEXT>\n<FOL>all x. (Rating(x) > 9 -> YelpRecommendations(x))\n<TEXT>Some restaurants that do not provide take-out service receive many negative reviews.</TEXT>\n<FOL>exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\n<TEXT>All restaurants that are popular among local residents have ratings greater than 9.</TEXT>\n<FOL>all x. (PopularAmongResidents(x) -> Rating(x) > 9)\n<TEXT>Subway has a rating greater than 9 or is popular among local residents.</TEXT>\n<FOL>Subway(Rating(Subway) > 9) | PopularAmongResidents(Subway)\n</PREMISES>\n<CONCLUSION>\n<TEXT>Subway does not provide take-out service.</TEXT>\n<FOL>-ProvideTakeOut(Subway)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommended(r) -> -ManyNegativeReviews(r))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommended(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongResidents(subway))\n</PREMISES>\n<CONCLUSION>\nSubway does not provide take-out service.\nFOL: -ProvideTakeOut(subway)\n</CONCLUSION>",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpListed(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpListed(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Subway & (Rating(Subway) > 9) | (PopularAmongResidents(Subway)))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOut(Subway)\n</PREMISES>\n<CONCLUSION>\n< EVALUATE>\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOut(Subway)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendations(x) -> -NegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOut(x) & NegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -TakeOut(subway)\n</EVALUATE>",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: Restaurant(r) -> -ManyNegativeReviews(r)\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> Restaurant(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9 | PopularAmongResidents(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOut(subway)\n</PREMISES>\n<CONCLUSION>\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: Restaurant(r) -> -ManyNegativeReviews(r)\nTEXT:",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendation(r) -> -ManyNegativeReviews(r))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongResidents(subway))\n</PREMISES>\n<CONCLUSION>\nSubway does not provide take-out service.\nFOL: -ProvideTakeOut(subway)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: Restaurant(r) -> -NegativeReviews(r)\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> Restaurant(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-TakeOut(x) & Restaurant(x) & NegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9 | Popular(subway))\n</PREMISES>\n<CONCLUSION>\nSubway does not provide take-out service.\nFOL: -TakeOut(subway)\n</CONCLUSION>",
    "<PREMISES>\n<TEXT>If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.</TEXT>\n<FOL>(YelpRecommendations(x) -> -ManyNegativeReviews(x))\n<TEXT>All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.</TEXT>\n<FOL>all x. (Rating(x) > 9 -> YelpRecommendations(x))\n<TEXT>Some restaurants that do not provide take-out service receive many negative reviews.</TEXT>\n<FOL>exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\n<TEXT>All restaurants that are popular among local residents have ratings greater than 9.</TEXT>\n<FOL>all x. (PopularAmongResidents(x) -> Rating(x) > 9)\n<TEXT>Subway has a rating greater than 9 or is popular among local residents.</TEXT>\n<FOL>Subway OR PopularAmongResidents(Subway)\n</PREMISES>\n<CONCLUSION>\n<TEXT>Subway does not provide take-out service.</TEXT>\n<FOL>-ProvideTakeOut(Subway)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpListed(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpListed(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9 | Popular(subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOut(subway)\n</EVALUATE>",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: Restaurant(x) -> -ManyNegativeReviews(x)\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> ListedInYelps(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocals(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Subway(Rating(Subway) > 9 | PopularAmongLocals(Subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOut(Subway)\n</PREMISES>\n<CONCLUSION>\nFOL: -ProvideTakeOut(Subway)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpRecommendations(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendations(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9 | Popular(subway))\n</PREMISES>\n<CONCLUSION>\nSubway does not provide take-out service.\nFOL: -ProvideTakeOut(subway)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (ListedInYelps(restaurant) -> -ManyNegativeReviews(restaurant))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> ListedInYelps(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongResidents(subway))\n</PREMISES>\n<CONCLUSION>\nSubway does not provide take-out service.\nFOL: -ProvideTakeOut(subway)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpListed(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (HighRating(x) -> YelpListed(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> HighRating(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Subway & HighRating(Subway)) | (Subway & Popular(Subway))\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOut(Subway)\n</EVALUATE>",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: YelpRecommended(r) -> -ManyNegativeReviews(r)\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommended(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongLocals(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: Rating(subway) > 9 | PopularAmongLocals(subway)\n</PREMISES>\n<CONCLUSION>\nSubway does not provide take-out service.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: YelpRecommended(r) -> -ManyNegativeReviews(r)\nTEXT: All restaurants with a rating greater than",
    "<PREMISES>\nIf the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: all x. (YelpRecommendation(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (Rating(x) > 9 -> YelpRecommendation(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (PopularAmongResidents(x) -> Rating(x) > 9)\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Rating(subway) > 9) | (PopularAmongResidents(subway))\n</PREMISES>\n<CONCLUSION>\nSubway does not provide take-out service.\nFOL: -ProvideTakeOut(subway)\n</CONCLUSION>",
    "<PREMISES>\n<_EVALUATE>\nTEXT: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\nFOL: (YelpListed(x) -> -ManyNegativeReviews(x))\nTEXT: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\nFOL: all x. (HighRating(x) -> YelpListed(x))\nTEXT: Some restaurants that do not provide take-out service receive many negative reviews.\nFOL: exists x. (-ProvideTakeOut(x) & ManyNegativeReviews(x))\nTEXT: All restaurants that are popular among local residents have ratings greater than 9.\nFOL: all x. (Popular(x) -> HighRating(x))\nTEXT: Subway has a rating greater than 9 or is popular among local residents.\nFOL: (Subway & HighRating(Subway)) | (Subway & Popular(Subway))\n</EVALUATE>\n<CONCLUSION>\n<_EVALUATE>\nTEXT: Subway does not provide take-out service.\nFOL: -ProvideTakeOut(Subway)\n</EVALUATE>\n</PREMISES>\n<CONCLUSION>\n<_EVALUATE>\nTEXT: Subway does not provide take-out service.\nF"
   ]
  ]
 },
 {
  "index": 79,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, Walden)\nTEXT: Walden contains knowledge.\nFOL: TonsOfKnowledge(Walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, 'Walden')\nTEXT: Walden contains knowledge.\nFOL: TonsOfKnowledge('Walden')\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> Knowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry, Walden)\nTEXT: Walden contains knowledge.\nFOL: Knowledge(Walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Walden contains knowledge.\nFOL: TonsOfKnowledge(walden)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, Walden)\nTEXT: Walden contains knowledge.\nFOL: TonsOfKnowledge(Walden)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(Harry, Walden)\n</PREMISES>\n<CONCLUSION>\nWalden contains knowledge.\nFOL: TonsOfKnowledge(Walden)\n</CONCLUSION>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge.\nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\n</PREMISES>\n<CONCLUSION>\nWalden contains knowledge.\nFOL: TonsOfKnowledge(walden)\n</CONCLUSION>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\n</PREMISES>\n<CONCLUSION>\nWalden contains knowledge.\nFOL: TonsOfKnowledge(walden)\n</CONCLUSION>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x) -> Knowledge(x))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(Harry, \"Walden\")\n</PREMISES>\n<CONCLUSION>\nWalden contains knowledge.\nFOL: Book(\"Walden\") & Knowledge(\"Walden\")\n</CONCLUSION>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, Walden)\n</PREMISES>\n<CONCLUSION>\nWalden contains knowledge.\nFOL: TonsOfKnowledge(Walden)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, Walden)\nTEXT: Walden contains knowledge.\nFOL: TonsOfKnowledge(Walden)\n</EVALUATE>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Person(x) & Read(x, y) -> Knowledge(x))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Person(harry) & Read(harry, walden)\n</PREMISES>\n<CONCLUSION>\nWalden contains knowledge.\nFOL: Knowledge(walden)\n</CONCLUSION>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge.\nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\n</PREMISES>\n<CONCLUSION>\nWalden contains knowledge.\nFOL: TonsOfKnowledge(walden)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, 'Walden')\nTEXT: Walden contains knowledge.\nFOL: TonsOfKnowledge('Walden')\n</EVALUATE>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge.\nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\n[PERSONAL]\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, Walden)\n</PREMISES>\n<CONCLUSION>\nWalden contains knowledge.\nFOL: TonsOfKnowledge(Walden)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, Walden)\n</PREMISES>\n<CONCLUSION>\nWalden contains knowledge.\nFOL: TonsOfKnowledge(Walden)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, Walden)\nTEXT: Walden contains knowledge.\nFOL: TonsOfKnowledge(Walden)\n</EVALUATE>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\n</PREMISES>\n<CONCLUSION>\nWalden contains knowledge.\nFOL: TonsOfKnowledge(walden)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, 'Walden', 'Henry Thoreau')\nTEXT: Walden contains knowledge.\nFOL: TonsOfKnowledge('Walden')\n</EVALUATE>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, Walden)\n</PREMISES>\n<CONCLUSION>\nWalden contains knowledge.\nFOL: TonsOfKnowledge(Walden)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\n</PREMISES>\n<CONCLUSION>\nWalden contains knowledge.\nFOL: TonsOfKnowledge(walden)\n</CONCLUSION>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Person(x) & Book(x) -> GainsKnowledge(x))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Person(harry) & Book(walden) & Person(henryThoreau) & Book(walden)\n</PREMISES>\n<CONCLUSION>\nWalden contains knowledge.\nFOL: Book(walden) & TonsOfKnowledge(walden)\n</CONCLUSION>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\n</PREMISES>\n<CONCLUSION>\nWalden contains knowledge.\nFOL: TonsOfKnowledge(walden)\n</CONCLUSION>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\n</PREMISES>\n<CONCLUSION>\nWalden contains knowledge.\nFOL: TonsOfKnowledge(walden)\n</CONCLUSION>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\n</PREMISES>\n<CONCLUSION>\nWalden contains knowledge.\nFOL: TonsOfKnowledge(walden)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 80,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\n</PREMISES>\n<CONCLUSION>\nHarry is smarter than before.\nFOL: Smarter(harry)\n</CONCLUSION>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x, y))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, \"Walden\" \"Henry Thoreau\")\n</PREMISES>\n<CONCLUSION>\nHarry is smarter than before.\nFOL: Smarter(harry, before)\n</CONCLUSION>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x, y))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, 'Walden'('Henry Thoreau'))\n</PREMISES>\n<CONCLUSION>\nHarry is smarter than before.\nFOL: Smarter(harry, Before(harry))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x, y))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, 'Walden' 'Henry Thoreau')\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, before)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x, y))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, 'Walden')\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, before)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x) & Book(x) -> GainsKnowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, \"Walden\")\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, 'Walden')\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, \"Walden\" \"Henry Thoreau\")\n</PREMISES>\n<CONCLUSION>\nHarry is smarter than before.\nFOL: Smarter(harry)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x, y))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, 'Walden' 'by' 'Henry Thoreau')\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, Before(harry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, 'Walden')\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, 'Walden')\n</PREMISES>\n<CONCLUSION>\nHarry is smarter than before.\nFOL: Smarter(harry)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, \"Walden\" \"Henry Thoreau\")\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x, y))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry, before)\n</EVALUATE>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\n</PREMISES>\n<CONCLUSION>\nHarry is smarter than before.\nFOL: Smarter(harry)\n</CONCLUSION>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x, y))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, 'Walden')\n</PREMISES>\n<CONCLUSION>\nHarry is smarter than before.\nFOL: Smarter(harry, before)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, Walden)\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\n</PREMISES>\n<CONCLUSION>\nHarry is smarter than before.\nFOL: Smarter(harry)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, \"Walden\")\nTEXT: Harry is smarter than before.\nFOL: Smarter(harry)\n</EVALUATE>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\n</PREMISES>\n<CONCLUSION>\nHarry is smarter than before.\nFOL: Smarter(harry)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 81,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainsKnowledge(x, x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> Knowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, Book(walden))\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> Knowledge(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, Walden)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainsKnowledge(x, x)\n</EVALUATE>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Person(x) & ReadBook(x) -> Knowledge(x))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\n[PERSONAL]\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: ReadBook(harry, Book(\"Walden\", \"Henry Thoreau\"))\n</PREMISES>\n<CONCLUSION>\nA person who is smarter has gained knowledge.\nFOL: Smarter(x) -> Knowledge(x)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainsKnowledge(x, x)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, 'Walden')\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainsKnowledge(x, y)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainsKnowledge(x, x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge.\nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainsKnowledge(x, y)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, 'Walden')\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainsKnowledge(x, x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainsKnowledge(x, y)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, Book(\"Walden\", \"Henry Thoreau\"))\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainsKnowledge(x, y)\n</EVALUATE>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge.\nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, Book(\"Walden\", \"Henry Thoreau\"))\n</PREMISES>\n<CONCLUSION>\nA person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainsKnowledge(x, y)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, 'Walden'('Henry Thoreau'))\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainsKnowledge(x, x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, 'Walden' 'by' 'Henry Thoreau')\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainsKnowledge(x, y)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Read(x) -> Knowledge(x))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Read(harry, Book(walden))\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> Knowledge(x)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, Book(\"Walden\", \"Henry Thoreau\"))\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainsKnowledge(x, y)\n</EVALUATE>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Person(x) & Book(x) -> GainsKnowledge(x))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Person(harry) & Book(walden)\n</PREMISES>\n<CONCLUSION>\nA person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainsKnowledge(x)\n</CONCLUSION>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> Knowledge(x))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\n[INDUCTIVE] Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\n</PREMISES>\n<CONCLUSION>\n[Abs]\nA person who is smarter has gained knowledge.\nFOL: Smarter(x) -> Knowledge(x)\n</CONCLUSION>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge.\nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\n[IND]\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, \"Walden\"(\"Henry Thoreau\"))\n</PREMISES>\n<CONCLUSION>\n[A] A person who is smarter has gained knowledge.\nFOL: all x. (Smarter(x) -> GainsKnowledge(x, y))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, 'Walden', 'Henry Thoreau')\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainsKnowledge(x, y)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(Harry, \"Walden\" by Henry Thoreau)\n</PREMISES>\n<CONCLUSION>\nA person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainsKnowledge(x, y)\n</CONCLUSION>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Person(x) & Book(x) -> GainsKnowledge(x))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Person(harry) & Book(walden) & Person(henryThoreau)\n</PREMISES>\n<CONCLUSION>\nA person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainsKnowledge(x)\n</CONCLUSION>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> Knowledge(x))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\n[PERSONAL]\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\n</PREMISES>\n<CONCLUSION>\nA person who is smarter has gained knowledge.\nFOL: Smarter(x) -> Knowledge(x)\n</CONCLUSION>",
    "<PREMISES>\n[BG] Books contain tons of knowledge.\nFOL: all x. (Book(x) -> Knowledge(x))\n[BG] When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> Knowledge(x))\n[BG] If a person gains knowledge, they become smarter.\nFOL: all x. (Knowledge(x) -> Smarter(x))\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\n</PREMISES>\n<CONCLUSION>\nA person who is smarter has gained knowledge.\nFOL: Smarter(x) -> Knowledge(x)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Books contain tons of knowledge.\nFOL: all x. (Book(x) -> TonsOfKnowledge(x))\nTEXT: When a person reads a book, that person gains knowledge. \nFOL: all x. (Reads(x, y) -> GainsKnowledge(x, y))\nTEXT: If a person gains knowledge, they become smarter.\nFOL: all x. (GainsKnowledge(x, y) -> Smarter(x))\nTEXT: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nFOL: Reads(harry, walden)\nTEXT: A person who is smarter has gained knowledge.\nFOL: Smarter(x) -> GainsKnowledge(x, y)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 82,
  "responses": [
   [
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLPTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLPTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation -> NLPTask(MachineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(MachineTranslationOutput)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: MachineTranslation -> LanguageGenerationTask(MachineTranslation)\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation -> NLP(MachineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(MachineTranslationOutput)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: MachineTranslation -> LanguageGenerationTask(MachineTranslation)\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</PREMISES>\n\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLPTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLPTask(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation -> NLPTask\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence -> OutputOf(MachineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: MachineTranslation -> LanguageGenerationTask\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (OutputOf(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(MachineTranslation) & NaturalLanguageProcessingTask(MachineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: OutputOf(MachineTranslation) -> TextSequence\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: MachineTranslation(MachineTranslation) & LanguageGenerationTask(MachineTranslation)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLPTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLPTask(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLPTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslationOutput)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: machineTranslation -> LanguageGenerationTask(machineTranslation)\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation -> NLP(MachineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(MachineTranslationOutput)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: MachineTranslation -> LanguageGenerationTask(MachineTranslation)\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation -> NaturalLanguageProcessingTask\nTEXT: The output of machine translation is a text sequence.\nFOL: OutputOf(MachineTranslation) -> TextSequence\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: MachineTranslation -> LanguageGenerationTask\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLPTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLPTask(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation -> NLPTask(MachineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(MachineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(MachineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: LanguageGenerationTask(MachineTranslation)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (OutputOf(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation -> NaturalLanguageProcessingTask\nTEXT: The output of machine translation is a text sequence.\nFOL: OutputOf(MachineTranslation) -> LanguageGenerationTask(MachineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: MachineTranslation -> LanguageGenerationTask\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLPTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLPTask(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLPTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLPTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (OutputOfNLPTask(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation -> NLPTask(MachineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: OutputOfMachineTranslation -> TextSequence\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: MachineTranslation -> LanguageGenerationTask(MachineTranslation)\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (OutputOfTask(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(MachineTranslation) -> NaturalLanguageProcessingTask(MachineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: OutputOfTask(MachineTranslation) -> LanguageGenerationTask(MachineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: MachineTranslation(MachineTranslation) -> LanguageGenerationTask(MachineTranslation)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (OutputOfNaturalLanguageProcessingTask(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(MachineTranslation) & NaturalLanguageProcessingTask(MachineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: OutputOfMachineTranslation(MachineTranslation) -> TextSequence\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: MachineTranslation(MachineTranslation) & LanguageGenerationTask(MachineTranslation)\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLPTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLPTask(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(MachineTranslation) & NLPTask(MachineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(MachineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(MachineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: LanguageGenerationTask(MachineTranslation)\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLPTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLPTask(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation -> NLPTask\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence -> OutputOf(MachineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: MachineTranslation -> LanguageGenerationTask\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLPTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation -> NLPTask(MachineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: Output(MachineTranslation) -> TextSequence\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: MachineTranslation -> LanguageGenerationTask(MachineTranslation)\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (OutputOfNLP(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation -> NLP(MachineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: OutputOfMachineTranslation -> TextSequence\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: MachineTranslation -> LanguageGenerationTask\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLPTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLPTask(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLPTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLPTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (OutputOfNLPTask(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLPTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: OutputOfNLPTask(machineTranslation)\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</PREMISES>\n\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: LanguageGenerationTask(machineTranslation)\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLPTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (OutputOfTask(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation -> NLPTask\nTEXT: The output of machine translation is a text sequence.\nFOL: OutputOfTask(MachineTranslation) -> TextSequence\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: MachineTranslation -> LanguageGenerationTask\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation -> NaturalLanguageProcessingTask\nTEXT: The output of machine translation is a text sequence.\nFOL: OutputOfMachineTranslation -> TextSequence\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: MachineTranslation -> LanguageGenerationTask\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(MachineTranslation) -> NaturalLanguageProcessing(MachineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: OutputOf(MachineTranslation) -> TextSequence(OutputOf(MachineTranslation))\nTEXT: Machine translation is a language generation task.\nFOL: LanguageGenerationTask(MachineTranslation)\n</PREMISES>\n\n<CONCLUSION>\nMachine translation is a language generation task.\nFOL: MachineTranslation(MachineTranslation) & LanguageGenerationTask(MachineTranslation)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 83,
  "responses": [
   [
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation -> NLP(MachineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(MachineTranslationOutput)\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation -> LanguageUnderstandingTask(MachineTranslation)\n</PREMISES>\n\n<EVALUATE>\n</EVALUATE>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) -> TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</PREMISES>\n\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: -LanguageGenerationTask(machineTranslation)\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation -> NaturalLanguageProcessingTask\nTEXT: The output of machine translation is a text sequence.\nFOL: OutputOf(MachineTranslation) -> TextSequence\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: MachineTranslation -> LanguageUnderstandingTask\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLPTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLPTask(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLPTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</PREMISES>\n\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: MachineTranslation\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) & TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation -> NLP(MachineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(MachineTranslationTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: -LanguageGenerationTask(MachineTranslationTranslation) | LanguageUnderstandingTask(MachineTranslationTranslation)\n</PREMISES>\n\n<EVALUATE>\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation -> NaturalLanguageProcessingTask\nTEXT: The output of machine translation is a text sequence.\nFOL: OutputOf(MachineTranslation) -> TextSequence\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: MachineTranslation -> LanguageUnderstandingTask\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLPTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLPTask(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLPTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</PREMISES>\n\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: MachineTranslation\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLPTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLPTask(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLPTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: LanguageUnderstandingTask(machineTranslation)\n</PREMISES>\n<CONCLUSION>\n< EVALUATE>\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation\n</EVALUATE>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLPTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLPTask(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLPTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(machineTranslation) -> LanguageUnderstandingTask(machineTranslation)\n</PREMISES>\n\n<EVALUATE>\n</EVALUATE>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (OutputOf(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(MachineTranslation) & NaturalLanguageProcessingTask(MachineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: OutputOf(MachineTranslation) -> TextSequence\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: MachineTranslation(MachineTranslation) & -LanguageGenerationTask(MachineTranslation) & LanguageUnderstandingTask(MachineTranslation)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLPTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLPTask(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation -> NLPTask(MachineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence -> Output(MachineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: MachineTranslation -> LanguageUnderstandingTask(MachineTranslation)\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLPTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLPTask(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: Output(machineTranslation) -> TextSequence(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: MachineTranslation -> LanguageUnderstandingTask(machineTranslation)\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(MachineTranslation) -> NLP(MachineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(MachineTranslationOutput) -> TextSequence(MachineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: MachineTranslation(MachineTranslation) -> LanguageUnderstandingTask(MachineTranslation)\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation -> NLP(MachineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence -> OutputOf(MachineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: MachineTranslation -> LanguageUnderstandingTask(MachineTranslation)\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nMachine translation is a natural language processing task.\nThe output of machine translation is a text sequence.\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(MachineTranslation) & NaturalLanguageProcessingTask(MachineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: Output(MachineTranslation) -> TextSequence(MachineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: -LanguageGenerationTask(M"
   ],
   [
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation -> NaturalLanguageProcessingTask\nTEXT: The output of machine translation is a text sequence.\nFOL: OutputOf(MachineTranslation) -> TextSequence\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: MachineTranslation -> LanguageUnderstandingTask\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (Output(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(MachineTranslation) -> NLP(MachineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: Output(MachineTranslation) -> TextSequence(MachineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation(MachineTranslation) -> LanguageUnderstandingTask(MachineTranslation)\n</PREMISES>\n\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: MachineTranslation(worksheet) -> LanguageUnderstandingTask(worksheet)\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessing(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(MachineTranslation) -> NaturalLanguageProcessing(MachineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: OutputOf(MachineTranslation) -> TextSequence(OutputOf(MachineTranslation))\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: MachineTranslation(MachineTranslation) -> LanguageUnderstandingTask(MachineTranslation)\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: NLP(machineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(machineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nFOL: all x. (NLP(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nFOL: NLP(machineTranslation)\nFOL: TextSequence(machineTranslation)\nFOL: -LanguageGenerationTask(machineTranslation)\nFOL: LanguageUnderstandingTask(machineTranslation)\n</EVALUATE>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation -> NaturalLanguageProcessingTask\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence -> OutputOf(MachineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: MachineTranslation -> LanguageUnderstandingTask\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nMachine translation is a natural language processing task.\nThe output of machine translation is a text sequence.\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (x -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (TextSequence(x) -> LanguageGenerationTask(x))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation -> NaturalLanguageProcessingTask\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence -> OutputOf(MachineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: MachineTranslation -> LanguageUnderstandingTask\n</EVALUATE>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation -> NaturalLanguageProcessingTask\nTEXT: The output of machine translation is a text sequence.\nFOL: OutputOf(MachineTranslation) -> TextSequence\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: MachineTranslation -> LanguageUnderstandingTask\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(MachineTranslation) -> NaturalLanguageProcessingTask(MachineTranslation)\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(MachineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: MachineTranslation(MachineTranslation) -> LanguageUnderstandingTask(MachineTranslation)\n</CONCLUSION>",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nMachine translation is a natural language processing task.\nThe output of machine translation is a text sequence.\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Natural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NLP(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NLP(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation(MachineTranslation) \nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence(MachineTranslation)\nTEXT: Machine translation is a language understanding task.\nFOL: -LanguageGenerationTask(MachineTranslation) & LanguageUnderstandingTask(MachineTranslation)\n</EVALU",
    "<PREMISES>\nNatural language processing tasks can be categorized as either language generation task or language understanding task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))\nTEXT: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nFOL: all x. (NaturalLanguageProcessingTask(x) -> (TextSequence(x) -> LanguageGenerationTask(x)))\nTEXT: Machine translation is a natural language processing task.\nFOL: MachineTranslation -> NaturalLanguageProcessingTask\nTEXT: The output of machine translation is a text sequence.\nFOL: TextSequence -> OutputOf(MachineTranslation)\n</PREMISES>\n<CONCLUSION>\nMachine translation is a language understanding task.\nFOL: MachineTranslation -> LanguageUnderstandingTask\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 84,
  "responses": [
   [
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: some x. (ManagedBuilding(x) -> PetsAllowed(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) = 1 * Month(x)))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Parent(Tom, Fluffy)\nCats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (TomRent(x) -> (PetsAllowed(x) & Deposit(x) <= 1500))\n2000$ is more than $1500.\nFOL: 200",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (ManagedBuilding(x) -> PetsAllowed(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (DepositRequired(x) -> (Deposit(x) = Rent(x) | Deposit(x) > Rent(x)))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Parent(Tom, fluffy)\nCats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\nThe Olive Garden is a managed building.\nFOL: OliveGarden = ManagedBuilding(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (Tom(Tom) & AllowedToMoveIn(Tom, fluffy) & Deposit(OliveGarden) <= 1500) ->",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) = 1))\nFluffy is Tom's cat.\nFOL: Pet(fluffy) & Cat(fluffy) & Tom(fluffy)\nCats are pets.\nFOL: Cat(x) -> Pet(x)\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (Tom(Rent(theOliveGarden)) -> (Pet(fluffy) & Deposit(theOliveGarden) <= 1500))\n2000$ is more than $1500.\nFOL:",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (ManagedBuilding(x) -> PetsAllowed(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) = Rent(x) | Deposit(x) > Rent(x))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Parent(Tom, fluffy)\nCats are pets.\nFOL: Pet(fluffy)\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(oliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & Tom(x, fluffy) & Deposit(x) <= 1500) -> Rent(x)\n2000$ is more than $1500.\nFOL: 2000 > 150",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG] A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) >= 1))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Parent(Tom, Fluffy)\nCats are pets.\nFOL: Cat(x) -> Pet(x)\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (MoveInWith(Fluffy, x) & Deposit(x) <= 1500)) \n2000$ is more than $1500.\nFOL: 2000 > 1500\n"
   ],
   [
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) >= 1))\nFluffy is Tom's cat.\nFOL: Pet(fluffy) & Owner(Tom, fluffy)\nCats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden, 2000)\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (Tom(Rent(theOliveGarden)) -> (Pet(fluffy) & Deposit(theOliveGarden) <= 1500))\n2000$ is more than $1500.\nFOL:",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: some x. (ManagedBuilding(x) -> Pets(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: Deposit(x) = (Rent(x) * 1) | (Rent(x) * more)\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Parent(Tom, Fluffy)\nCats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(The Olive Garden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(The Olive Garden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: Tom(Rent) = (Pets(Tom, Fluffy) & Deposit(Rent, 1500))\n2000$ is more than $1500.\nFOL: 200",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (ManagedBuilding(x) -> PetsAllowed(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) = 1 * Rent(x) | Rent(x) > 1 * Rent(x)))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Tom(Fluffy)\nCats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(oLiveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(oLiveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (Tom(x) -> (ManagedBuilding(y) -> (PetsAllowed(x) & Deposit(x) <= 1500)))\n2000$ is",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (ManagedBuilding(x) -> Pets(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) >= 1))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Parent(Tom, Fluffy)\nCats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\nThe Olive Garden is a managed building.\nFOL: OliveGarden(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden, 2000)\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (Tom(Rent(x)) -> (Pets(x) & Deposit(x) <= 1500))\n2000$ is more than $1500.\nFOL: 2000 > 1500\n</",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (ManagedBuilding(x) -> PetsAllowed(x))\n[BG] A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) = Rent(x) | Deposit(x) > Rent(x))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Parent(Tom, Fluffy)\nCats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden, $2000)\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (Tom Rent(x) theOliveGarden) iff (PetsAllowed(x) & Deposit(x) <= $1500)\n2000$ is more than $1500.\n"
   ],
   [
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: some x. (ManagedBuilding(x) & Pets(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) <= x)) | (Deposit(x) -> (Rent(x) > x))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Parent(Tom, Fluffy)\nCats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (Pet(x) & Deposit(x) <= 1500)) & (Tom(x) -> (Parent(T",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: some x. (ManagedBuilding(x) & Pets(x))\n[BG] A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) <= 1))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Owner(Tom, Fluffy)\nCats are pets.\nFOL: all x. (Cat(x) -> Pets(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(TheOliveGarden)\nThe monthly rent at The Olive Garden is $2000.\nFOL: Rent(TheOliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (Allowed(x, Fluffy) & Deposit(x) <= 1500)) -> (Rent(x) = 2000)\n2000$ is more than $150",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: some x. (ManagedBuilding(x) & Pets(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: Deposit(x) = (Rent(x) * 1) | (Rent(x) > 1)\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Tom(Fluffy)\nCats are pets.\nFOL: Pet(Cat(x)) = x\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: Tom(Rent(x)) = (Pets(x) & Cat(Fluffy) & Deposit(x) = (Rent(x) * 1) & Deposit(x) = 1500)\n2000$",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) <= x))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Tom(fluffy)\nCats are pets.\nFOL: Pet(fluffy)\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden, 2000)\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (Tom(Tom) -> (ManagedBuilding(Tom) -> (Pet(Tom) & Pet(fluffy) & DepositRequired(theOliveGarden) -> (Rent(theOliveGarden, 2000) <= 1500))))\n200",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (ManagedBuilding(x) -> PetsAllowed(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: DepositRequired(x) -> (SecurityDeposit(x) = Rent(x) | SecurityDeposit(x) > Rent(x))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Parent(Tom, Fluffy)\nCats are pets.\nFOL: Pet(Cat(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (AllowedToMoveIn(x, Fluffy) & SecurityDeposit(x) <= 1500)) <-> (AllowedToMoveIn(Tom"
   ],
   [
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (ManagedBuilding(x) -> Pets(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) = 1 * Month(x)) | (Deposit(x) -> Rent(x) > 1 * Month(x)))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Person(tom) & Parent(tom, fluffy)\nCats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (Person(tom) & Pet(fluffy) &",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) >= 1))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Parent(Tom, fluffy)\nCats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden, 2000)\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (MoveIn(x, fluffy) & Deposit(x) <= 1500)) \n& (MoveIn(x, fluffy) & Deposit(x) <= 1500) -> Rent",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: some x. (Pet(x) & ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) >= 1 * Month))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Tom(fluffy)\nCats are pets.\nFOL: Cat(x) -> Pet(x)\nThe Olive Garden is a managed building.\nFOL: OliveGarden -> ManagedBuilding\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: Tom(OliveGarden) -> (ManagedBuilding(x) -> (Pet(x & Tom(x)) & Deposit(x) <= 1500))\n2000$ is more than $1500.\nFOL: 2000 > ",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: DepositRequired(x) -> (SecurityDeposit(x) >= Rent(x))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Parent(Tom, fluffy)\nCats are pets.\nFOL: Cat(x) -> Pet(x)\nThe Olive Garden is a managed building.\nFOL: OliveGarden -> ManagedBuilding(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = $2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: Tom(Rent(OliveGarden)) -> (AllowedToMoveIn(Tom, fluffy) & SecurityDeposit <= $1500)\n2000$ is more than $1500.\nFOL: $",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (ManagedBuilding(x) -> Pets(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) <= 1 * Month))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Parent(Tom, fluffy)\nCats are pets.\nFOL: Pet(fluffy)\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(oLiveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(oLiveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (MoveInWith(x, fluffy) & Deposit(x) <= 1500)) <-> (Tom(x) & Pets(fluffy) & Deposit(oLiveGarden) <= 1500)\n2000$"
   ],
   [
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) = 1 * Month))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Parent(Tom, fluffy)\nCats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(oliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (AllowedToMoveIn(x, fluffy) & Deposit(x) <= 1500)) & (AllowedToMoveIn(x, fluffy) & Deposit(x) <=",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: some x. (ManagedBuilding(x) -> Pets(x))\n[BG] A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (EqualToOneMonthRent(x) | MoreThanOneMonthRent(x)))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy)\nCats are pets.\nFOL: Cat(x) -> Pet(x)\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: TomRents(x) <- (Pets(Tom) & Cat(Fluffy) & Deposit(x) <= 1500)\n2000$ is more than $1500.\nFOL: 2000 > 1500\n",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG] A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) = 1))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Tom(fluffy)\nCats are pets.\nFOL: Pet(fluffy)\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(oliveGarden, $2000)\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (Tom(x, fluffy) & Deposit(x) <= $1500))\n2000$ is more than $1500.\nFOL: $2000 > $1500\n</PREMISES>\n<CONCLUSION>\nTom",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: some x. (ManagedBuilding(x) & Pets(x))\n[BG] A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: Deposit(x) = (Rent(x) * 1) | (Rent(x) * 1)\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(Tom, fluffy)\nCats are pets.\nFOL: all x. (Cat(x) -> Pets(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(oliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (Pets(x) & Owner(Tom, x) & Deposit(x) <= 1500)) & (Owner(Tom, fluffy",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (ManagedBuilding(x) -> PetsAllowed(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> RentDeposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (RentDeposit(x) -> (RentDeposit(x) = Rent(x) | RentDeposit(x) > Rent(x)))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Parent(Tom, fluffy)\nCats are pets.\nFOL: Pet(fluffy)\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(oliveGarden, 2000)\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (AllowedToMoveIn(x, fluffy) & RentDeposit(x) <= 1500)) \n2000$ is more than $1500.\n"
   ]
  ]
 },
 {
  "index": 85,
  "responses": [
   [
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: some x. (ManagedBuilding(x) -> Pets(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) = 1))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Parent(Tom, Fluffy)\nCats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (Allowed(x, Fluffy) & Deposit(x) <= 1500)) = (x = OliveGarden)\n2000$ is more than $1500.\nFOL",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (ManagedBuilding(x) -> PetsAllowed(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) = (Rent(x) * 1) | (Deposit(x) > Rent(x)))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Parent(Tom, fluffy)\nCats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\nThe Olive Garden is a managed building.\nFOL: OliveGarden = ManagedBuilding(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (Tom(Rent(OliveGarden)) = (PetsAllowed(OliveGarden) & Deposit(OliveGarden) <= 150",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (DepositRequired(x) -> (Rent(x) = 1 * MonthlyRent(x) | Rent(x) > MonthlyRent(x)))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Parent(Tom, Fluffy)\nCats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(theOliveGarden) = 2000$\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (MoveIn(x, Fluffy) & DepositRequired(x) <= 1500$",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) >= 1))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Parent(Tom, fluffy)\nCats are pets.\nFOL: Cat(x) -> Pet(x)\nThe Olive Garden is a managed building.\nFOL: OliveGarden -> ManagedBuilding(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden, 2000)\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (Tom(Rent(x)) -> (Pet(x, fluffy) & Deposit(x) <= 1500))\n2000$ is more than $1500.\nFOL: 2000 > 1500\n",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (ManagedBuilding(x) -> PetsAllowed(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) >= 1))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Tom(fluffy)\nCats are pets.\nFOL: Cat(x) -> Pet(x)\nThe Olive Garden is a managed building.\nFOL: OliveGarden -> ManagedBuilding(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (Tom(x) & Cat(x) & Deposit(x) <= 1500))\n2000$ is more than $1500.\nFOL: 2000 > 1500"
   ],
   [
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (DepositRequired(x) -> (Deposit(x) = Rent(x) | Deposit(x) > Rent(x)))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Parent(Tom, fluffy)\nCats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nThe Olive Garden is a managed building.\nFOL: OliveGarden\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (Allowed(x, fluffy) & Deposit(x) <= 1500)) <-> (Allowed(Tom, fluffy) & Deposit <= 1500)\n",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (EqualToOneMonthRent(x) | MoreThanOneMonthRent(x)))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Parent(Tom, Fluffy)\nCats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden, $2000)\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (AllowedToMoveInWithPet(x) & Deposit(x) <= $1500)) <-> (AllowedToMoveInWithPet(x",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: DepositRequired(x) -> (Rent(x) >= 1)\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Parent(Tom, fluffy)\nCats are pets.\nFOL: Cat(x) -> Pet(x)\nThe Olive Garden is a managed building.\nFOL: OliveGarden -> ManagedBuilding(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (Tom Rent(OliveGarden) if and only if (AllowedToMoveIn(Tom, fluffy) & Deposit <= 1500))\n2000$ is more than $1500.\nFOL:",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: Deposit(x) = (Rent(x) * 1) | (Rent(x) * more)\nFluffy is Tom's cat.\nFOL: Pet(fluffy) & Owner(Tom, fluffy)\nCats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(oliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: Tom(Rent(oliveGarden)) = (Pet(fluffy) & Owner(Tom, fluffy)) & (Deposit(oliveGarden) <= 1500)\n2000",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: some x. (Pets(x) & ManagedBuilding(x))\nTEXT: [BG] A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) >= 1))\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(Fluffy) & Tom(Fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pets(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(OliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: Tom(Rent(OliveGarden)) <-> (Pets(Tom(Fluffy)) & Deposit(OliveGarden) <= 1500)\nTEXT: 200"
   ],
   [
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) >= 1))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Parent(Tom, Fluffy)\nCats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (MoveInWith(x, Fluffy) & Deposit(x) <= 1500)) = (Tom(x) -> (MoveInWith(Tom, Fluffy) & Deposit",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: some x. (ManagedBuilding(x) -> PetsAllowed(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: ManagedBuilding(x) -> DepositRequired(x)\nThe security deposit can be either equal to one month's rent or more.\nFOL: DepositRequired(x) -> (SecurityDeposit(x) = (1 * Rent(x)))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Parent(Tom, Fluffy)\nCats are pets.\nFOL: Cat(x) -> Pet(x)\nThe Olive Garden is a managed building.\nFOL: OliveGarden = ManagedBuilding(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: Tom(Rent(x)) -> (PetsAllowed(x) & SecurityDeposit(x) <= 1500)\n2000$ is more than $1500.\nFOL: 2000 > 150",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) >= 1))\nFluffy is Tom's cat.\nFOL: Pet(fluffy) & Owner(tom, fluffy)\nCats are pets.\nFOL: Pet(cats) & cats = fluffy\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(olivegarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(olivegarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (TomRent(x) -> (ManagedBuilding(x) & (Pet(x) & Pet(fluffy) & Deposit(x) <= 1500)))\n2000$ is more than $1500.\nFOL:",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: Deposit(x) -> (MoreThanOneMonthRent(x))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Parent(Tom, Fluffy)\nCats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden, $2000)\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (MoveInWithPet(x) & Deposit(x) <= $1500)) <-> (Tom(x) -> (MoveInWithPet(Tom, Fluffy) & Deposit(Tom,",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) >= 1))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Owner(Tom, fluffy)\nCats are pets.\nFOL: Cat(x) -> Pet(x)\nThe Olive Garden is a managed building.\nFOL: OliveGarden(managedBuilding)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (Tom Rent(managedBuilding) -> (AllowedToMoveIn(Tom, fluffy) & Deposit(OliveGarden) <= 1500))\n2000$ is more than $1500.\nFOL: 2000 >"
   ],
   [
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: DepositRequired(x) -> (Rent(x) >= 1)\nFluffy is Tom's cat.\nFOL: Pet(fluffy) & Cat(fluffy) & Parent(Tom, fluffy)\nCats are pets.\nFOL: Cat(x) -> Pet(x)\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (Tom Rent(theOliveGarden) & Pet(fluffy) & Parent(Tom, fluffy) & DepositRequired(theOliveGarden) & Rent(theOliveGarden) <=",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: Deposit(x) -> (MoreThanOneMonthRent(x))\nFluffy is Tom's cat.\nFOL: Pet(fluffy) & Cat(fluffy) & Tom(fluffy)\nCats are pets.\nFOL: Cat(x) -> Pet(x)\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: ManagedBuilding(theOliveGarden) -> MoreThanOneMonthRent(2000)\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (MoveInWithPet(x) & Deposit(x) <= 1500)) -> (Rent(x, 2000))\n2000$ is more than",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: some x. (Pets(x) & ManagedBuilding(x))\n[BG] A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) >= 1))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Parent(Tom, Fluffy)\nCats are pets.\nFOL: all x. (Cat(x) -> Pets(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden, 2000)\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (Pets(x) & Fluffy(x) & Deposit(x) <= 1500))\n2000$ is more than $1500.\nFOL: 2000 >",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) = 1 * Month(x) | Rent(x) > 1 * Month(x)))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Tom(fluffy)\nCats are pets.\nFOL: Pet(fluffy)\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (Tom(x) -> (ManagedBuilding(x) & Pet(x, fluffy) & Deposit(x) <= 1500)) <-> (Tom(x) -> (ManagedBuilding(x)",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (ManagedBuilding(x) -> PetsAllowed(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) = 1 * MonthlyRent(x) | Rent(x) > MonthlyRent(x)))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Parent(Tom, Fluffy)\nCats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\nThe Olive Garden is a managed building.\nFOL: OliveGarden = ManagedBuilding(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(OliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (TomRent(x) -> (PetsAllowed(x) & Deposit(x) <= 1500))\n2000"
   ],
   [
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (ManagedBuilding(x) -> PetsAllowed(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: Deposit(x) = (Rent(x) * 1 | Rent(x) > 1)\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Tom(fluffy)\nCats are pets.\nFOL: Cat(x) -> Pet(x)\nThe Olive Garden is a managed building.\nFOL: OliveGarden = ManagedBuilding(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (Pet(x, fluffy) & Deposit(x) <= 1500)) \n2000$ is more than $1500.\nFOL: 200",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: Deposit(x) = (Rent(x) * 1 | Rent(x) > 1)\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Parent(Tom, Fluffy)\nCats are pets.\nFOL: Pet(Fluffy)\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: Tom(Rent(OliveGarden)) = (AllowedToMoveIn(Tom, Fluffy) & Deposit(OliveGarden) <= 1500)\n2000$ is more than $1500.\nF",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (ManagedBuilding(x) -> Pets(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: Deposit(x) -> (MoreThanOneMonthsRent(x))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Parent(Tom, fluffy)\nCats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden, 2000)\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: Tom(Rent, x) <-> (Pets(fluffy, Tom) & Deposit(x) & LessThan1500(x))\n2000$ is more than $1500.\nFOL: 2000 > ",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (ManagedBuilding(x) -> PetsAllowed(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) = Rent(x) | Deposit(x) > Rent(x))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Parent(Tom, Fluffy)\nCats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\nThe Olive Garden is a managed building.\nFOL: OliveGarden(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden, $2000)\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (Tom(OliveGarden) -> (PetsAllowed(OliveGarden, Fluffy) & Deposit(OliveGarden) <= $1500)) | (Tom(OliveG",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) >= 1))\nFluffy is Tom's cat.\nFOL: Pet(fluffy) & Cat(fluffy) & Pet(tom) & Cat(tom)\nCats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden, 2000)\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> ((Pet(fluffy) & Pet(tom) & Deposit(x) <= 1500)))\n2000$ is more than $1500"
   ]
  ]
 },
 {
  "index": 86,
  "responses": [
   [
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pets(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) = 1 | Rent(x) > 1))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Parent(Tom, fluffy)\nCats are pets.\nFOL: Pet(fluffy)\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (Allowed(x, fluffy) & Deposit(x) <= 1500)) = (Tom(x) -> (Allowed(x, fluffy) & Deposit(x) <= 1500",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: some x. (ManagedBuilding(x) & Pets(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) = Rent(x) | Deposit(x) > Rent(x))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Tom(fluffy)\nCats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (Pet(fluffy) & Pet(Tom) & Deposit(x) <= 1500)) = (ManagedBuilding(x) -> (DepositRequired(x) & Deposit",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (ManagedBuilding(x) -> Pets(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) = 1))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Tom(fluffy)\nCats are pets.\nFOL: all x. (Cat(x) -> Pets(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden, 2000)\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (Pets(x) & Deposit(x) & (Rent(x) <= 1500))) \n2000$ is more than $1500.\nFOL: 2000 > 150",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pets(x) -> ManagedBuilding(x))\nTEXT: [BG] A deposit is required to rent an apartment in a managed building.\nFOL: ManagedBuilding(x) -> Deposit(x)\nTEXT: The security deposit can be either equal to one month's rent or more.\nFOL: Deposit(x) <- (Rent(x) = 1) | (Rent(x) > 1)\nTEXT: Fluffy is Tom's cat.\nFOL: Cat(fluffy) & Parent(Tom, fluffy)\nTEXT: Cats are pets.\nFOL: all x. (Cat(x) -> Pets(x))\nTEXT: The Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nTEXT: The monthly rent at the Olive Garden is $2000.\nFOL: Rent(oliveGarden) = 2000\nTEXT: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (Pets(x) & Parent(Tom, x) & Deposit(x) = 150",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pets(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Eq(x, MonthRent(x)) | More(x)))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Tom(Fluffy)\nCats are pets.\nFOL: Cat(x) -> Pet(x)\nThe Olive Garden is a managed building.\nFOL: OliveGarden(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: MonthRent(OliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (Allowed(x, Fluffy, Deposit(x)) & Deposit(x) <= 1500)) \n& (Tom(x) & Allowed(x, Fluffy, Deposit(x)) & Deposit"
   ],
   [
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (ManagedBuilding(x) -> PetsAllowed(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (DepositRequired(x) -> (SecurityDeposit(x) = Rent(x) | SecurityDeposit(x) > Rent(x)))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Parent(Tom, fluffy)\nCats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\nThe Olive Garden is a managed building.\nFOL: OliveGarden = ManagedBuilding(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (AllowedToMoveIn(x, fluffy) & SecurityDeposit(x) <= 1500)) =",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pets(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: Deposit(x) = Rent(x) | -Rent(x)\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Parent(Tom, fluffy)\nCats are pets.\nFOL: Cat(x) -> Pets(x)\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & Pets(x, fluffy) & Deposit(x) = 1500) -> (Parent(Tom, x) & ManagedBuilding(x))\n2000$ is more than $1500.\nFOL:",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) = 1))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Tom(fluffy)\nCats are pets.\nFOL: Cat(x) -> Pet(x)\nThe Olive Garden is a managed building.\nFOL: OliveGarden(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: Tom(fluffy) & (Tom(OliveGarden) -> (Deposit(OliveGarden) = 1500))\n2000$ is more than $1500.\nFOL: 2000 > 1500\n</",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: some x. (ManagedBuilding(x) -> PetsAllowed(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) = Rent(x) | Deposit(x) > Rent(x))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Parent(Tom, Fluffy)\nCats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(oLiveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(oLiveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & Tom(x, Fluffy, Deposit(x) <= 1500) <-> PetAllowed(x) & Deposit(x) <= 1500)\n2000$",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pets(x) -> ManagedBuilding(x))\n[BG] A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) = 1))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy)\nCats are pets.\nFOL: all x. (Cat(x) -> Pets(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (Pets(x) & Deposit(x) = 1500))\n2000$ is more than $1500.\nFOL: 2000 > 1500\n</PREMISES>\n<CON"
   ],
   [
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (ManagedBuilding(x) -> Pets(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: Deposit(x) -> (Rent(x) >= 1)\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Parent(Tom, fluffy)\nCats are pets.\nFOL: Pet(cats)\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(oliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (AllowedPets(x) & Deposit(x) <= 1500)) \n         & (AllowedPets(oliveGarden) & Deposit(oliveGarden) <= 1500)\n2000$ is",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pets(x) -> ManagedBuilding(x))\n[BG] A deposit is required to rent an apartment in a managed building.\nFOL: ManagedBuilding(x) -> Deposit(x)\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) == 1)) | (Deposit(x) -> (Rent(x) > 1))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Parent(Tom, Fluffy)\nCats are pets.\nFOL: Cat(x) -> Pets(x)\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & (Pets(Tom) & Pets(Fluffy) & Deposit(x) <= 1500)) -> (Rent(x) == 2000)\n200",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (DepositRequired(x) -> (Deposit(x) = Rent(x) | Deposit(x) > Rent(x)))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Tom(fluffy)\nCats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(oliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (Tom(x) & Fluffy(x) & Deposit(x) <= 1500))\n2000$ is more than $1500.\nF",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) = 1 * MonthlyRent(x))) | (Deposit(x) -> Rent(x) > MonthlyRent(x))\nFluffy is Tom's cat.\nFOL: Pet(fluffy) & Owner(fluffy, Tom)\nCats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: MonthlyRent(oliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & (Pet(fluffy) & Owner(fluffy, Tom) & Deposit(x) <= ",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (EqualToOneMonthRent(x) | MoreThanOneMonthRent(x)))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Parent(Tom, fluffy)\nCats are pets.\nFOL: Pet(fluffy)\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(oliveGarden, 2000)\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (AllowedPet(x, fluffy) & Deposit(x) <= 1500)) <-> (AllowedPet(Tom, fluffy) & Deposit(x) <= 1500)\n2000$"
   ],
   [
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG] A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: Deposit(x) = (Rent(x) * 1 | Rent(x) > 1)\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Person(Tom) & Parent(Tom, fluffy)\nCats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & (Pet(fluffy) & Pet(Tom) & Parent(Tom, fluffy) & Deposit(x) <= 150",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (EqualToOneMonthRent(x) | MoreThanOneMonthRent(x)))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Parent(Tom, fluffy)\nCats are pets.\nFOL: Cat(x) -> Pet(x)\nThe Olive Garden is a managed building.\nFOL: OliveGarden -> ManagedBuilding(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = $2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: Rent(x) -> (AllowedToMoveIn(x, fluffy) & Deposit(x) <= $1500) iff (ManagedBuilding(x) -> (AllowedToMoveIn(T",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (EqToOneMonthRent(x) | MoreThanOneMonthRent(x)))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Parent(Tom, fluffy)\nCats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(oliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (AllowedToMoveIn(x, fluffy) & Deposit(x) <= 1500)) <-> (Tom, fluffy)\n2000$",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) = 1))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Tom(fluffy)\nCats are pets.\nFOL: Pet(fluffy)\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(oliveGarden, 2000)\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (Tom(Rent) -> (ManagedBuilding(x) & Pet(y) & Deposit(z) & (z <= 1500) & (x & y)))\n2000$ is more than $1500.\nFOL: 2000 > ",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: some x. (Pets(x) & ManagedBuilding(x))\n[BG] A deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: Deposit(x) = (Rent(x) | MoreThanRent(x))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Parent(Tom, Fluffy)\nCats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (Pets(x) & Parent(Tom, x) & Deposit(x) <= 1500)) = (ManagedBuilding(x) -> (Pets(x) & Parent(Tom"
   ],
   [
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pets(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) = 1)) | (Deposit(x) -> (Rent(x) > 1))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Parent(Tom, Fluffy)\nCats are pets.\nFOL: Cat(x) -> Pets(x)\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(theOliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(theOliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (Pets(x) & Fluffy & Deposit(x) = 1500)) | -(ManagedBuilding(x) -> (",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pets(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> Deposit(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) >= 1)) & (Deposit(x) -> Rent(x) > 1500)\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Parent(Tom, Fluffy)\nCats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(oliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (Pet(Fluffy) & Deposit(x) <= 1500)) & (ManagedBuilding(x) -> Pet",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (ManagedBuilding(x) -> PetsAllowed(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Deposit(x) >= Rent(x)))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Parent(Tom, fluffy)\nCats are pets.\nFOL: all x. (Pet(x) -> Cat(x))\nThe Olive Garden is a managed building.\nFOL: OliveGarden\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (Tom Rent(OliveGarden) ManagedBuilding(OliveGarden) (PetsAllowed(OliveGarden) & Deposit(OliveGarden) <= 1500) & (PetsAllowed(OliveGarden)",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pet(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: all x. (ManagedBuilding(x) -> DepositRequired(x))\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) = (Rent(x) * 1) | (Deposit(x) > Rent(x)))\nFluffy is Tom's cat.\nFOL: Cat(Fluffy) & Tom(Fluffy)\nCats are pets.\nFOL: all x. (Cat(x) -> Pet(x))\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(OliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(OliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) & (Pet(Tom) & Pet(Fluffy) & Deposit(x) <= 1500) -> DepositRequired(x))\n2000$ is more",
    "<PREMISES>\nPets are allowed in some managed buildings.\nFOL: all x. (Pets(x) -> ManagedBuilding(x))\n[BG]\nA deposit is required to rent an apartment in a managed building.\nFOL: ManagedBuilding(x) -> Deposit(x)\nThe security deposit can be either equal to one month's rent or more.\nFOL: (Deposit(x) -> (Rent(x) == 1)) | (Deposit(x) -> (Rent(x) > 1))\nFluffy is Tom's cat.\nFOL: Cat(fluffy) & Parent(Tom, fluffy)\nCats are pets.\nFOL: Pet(fluffy)\nThe Olive Garden is a managed building.\nFOL: ManagedBuilding(oliveGarden)\nThe monthly rent at the Olive Garden is $2000.\nFOL: Rent(oliveGarden) = 2000\nTom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nFOL: (ManagedBuilding(x) -> (AllowedPets(x) & Deposit(x) <= 1500)) | (ManagedBuilding(x) -> (AllowedPets(x) & Deposit(x) > 1500"
   ]
  ]
 },
 {
  "index": 87,
  "responses": [
   [
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: (VeryFluffy(koala) -> -Quokka(koala))\nTEXT: Koalas love to sleep.\nFOL: LoveToSleep(koala)\n</EVALUATE>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (Loved",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimal(x, Max))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimal(x, Max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (FavoriteAnimal(x, Max) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\nFOL: Quokka(koala) & LoveToSleep(koala)\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (FavoriteAnimals(x, Max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimals(x, Max) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: (VeryFluffy(koala) -> -Quokka(koala))\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \n",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (Loved"
   ],
   [
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> FromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (FavoriteAnimals(max, x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimals(max, x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nF",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\nFOL: Quokka(koala) & LoveToSleep(koala)\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (Australian(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> Australian(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (FavoriteAnimals(x, max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimals(x, max) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL:",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n\n<CONCLUSION>\nKoalas love to sleep.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Koalas are animals from Australia.\nFOL: Quokka(koala)\nTEXT: Koalas are not"
   ],
   [
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) & LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) & FromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x)",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimal(x, max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimal(x, max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimal(x, max) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\nFOL: LovesToSleep(koala)\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> FromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedBy",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (Loved",
    "<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: (LovedByTourists(x) -> FavoriteAnimals(x, max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (Australian(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> Australian(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimals(x, max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimals(x, max) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: (VeryFluffy(x) -> -Quokka(x))\nTEXT: Koalas are animals from Australia. \nFOL: Australian(koala)\nTEXT: Koalas are Max's favorite animals. \nFOL: FavoriteAnimals(koala, max)\nTEXT: Koalas are very fluffy. \nFOL"
   ],
   [
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> FromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (Australian(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> Australian(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (FavoriteAnimals(x, max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimals(x, max) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\nFOL: Quokka(koala) -> LoveToSleep(koala)\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: (VeryFluffy(Koala) -> -Quokka(Koala))\n</PREMISES>\n\n<CONCLUSION>\nKoalas love to sleep.\nFOL: LoveToSleep(Koala)\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (Australian(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> Australian(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimals(x, Max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimals(x, Max) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(Koala) -> -Quokka(Koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> FromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimals(x, Max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimals(x, Max) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals. \nFOL:"
   ],
   [
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimal(x, Max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (Australian(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> Australian(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (FavoriteAnimal(x, Max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimal(x, Max) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(Koala(x)) -> -Quokka(x)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\nFOL: LovesToSleep(Koala(x))\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (Australian(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> Australian(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimals(x, Max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimals(x, Max) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\nFOL: Quokka(koala) & LoveToSleep(koala)\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimal(x, max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (Australian(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> Australian(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimal(x, max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimal(x, max) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Koalas are animals.\nFOL: Animal(koala)\nTEXT: Koalas are loved by tourists.\n",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> FromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\nFOL: Quokka(koala) & LoveToSleep(koala)\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (MaxFavoriteAnimal(x) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep.\nFOL: Quokka(koala) -> LovesToSleep(koala)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 88,
  "responses": [
   [
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimal(x, max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimal(x, max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimal(x, max) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> FromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (Australian(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> Australian(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimals(x, max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimals(x, max) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimal(x, max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> FromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (FavoriteAnimal(x, max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimal(x, max) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals.",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimal(x, Max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (FavoriteAnimal(x, Max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimal(x, Max) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals."
   ],
   [
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(Koala) -> -Quokka(Koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\nFOL: LovesToSleep(Koala) & Quokka(Koala)\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimal(x, Max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (Australian(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> Australian(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (FavoriteAnimal(x, Max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimal(x, Max) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\nFOL: LovesToSleep(koala) & Quokka(koala)\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (FavoriteAnimals(x, max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimals(x, max) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\nFOL: LovesToSleep(koala) & Quokka(koala)\n</CONCLUSION",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimal(x, Max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (FavoriteAnimal(x, Max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimal(x, Max) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> FromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> FromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> FromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: (VeryFluffy(koala) -> -Quokka(koala))\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\nFOL: LovesToSleep(koala) & Quokka(koala)\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (Australian(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> Australian(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (FavoriteAnimals(x, max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimals(x, max) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: (VeryFluffy(koala) -> -Quokka(koala))\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\nFOL: LovesToSleep(koala) & Quokka(koala)\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> FromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: (VeryFluffy(koala) -> -Quokka(koala))\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Koalas love to sleep and are quokka.\nFOL: LovesToSleep(koala)",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimal(x, max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimal(x, max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimal(x, max) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimals(x, Max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (FavoriteAnimals(x, Max) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: (VeryFluffy(koala) -> -Quokka(koala))\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\nFOL: (LoveToSleep(koala) & Quokka(koala))\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimal(x, Max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimal(x, Max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimal(x, Max) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\nFOL: LovesToSleep(koala) & Quokka(koala)\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (FavoriteAnimals(x, max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimals(x, max) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</CONCLUSION>",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (Australian(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> Australian(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nKoalas love to sleep and are quokka.\nFOL: LoveToSleep(koala) & Quokka(koala)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 89,
  "responses": [
   [
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (FavoriteAnimals(x, max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimals(x, max) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: Quokka(koala) -> (L",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: Quokka(koala) -> (LoveToSleep(koala) | Very",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: Quokka(koala) -> (LovesToSleep(koala",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimal(x, max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (FavoriteAnimal(x, max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimal(x, max) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: Quokka(koala) -> (Loves",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If animals are loved by tourists, then"
   ],
   [
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (FavoriteAnimals(x, max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimals(x, max) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: Quokka(koala) ->",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimal(x, max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (Australian(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> Australian(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (FavoriteAnimal(x, max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimal(x, max) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: Quokka(koala) -> (LovesToSleep(ko",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: Quokka(koala) -> (LovesToSleep(koala",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: Quokka(koala) -> (LovesToSleep(koala) |",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If animals are loved by tourists, then they are"
   ],
   [
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimals(x, Max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (FavoriteAnimals(x, Max) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(Koala(x)) -> -Quokka(x)\n</PREMISES>\n\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If animals are loved by tourists, then they",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: Quokka(koala) -> (LoveToSleep(koala)",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, max))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> FromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimals(x, max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (FavoriteAnimals(x, max) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: Quokka(koala) -> (LoveToSleep(koala)",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: Quokka(koala) -> (LoveToSleep(koala)",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (Australian(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> Australian(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If animals are loved by tourists, then they are Max's favorite animals."
   ],
   [
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> FromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimals(x, Max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteAnimals(x, Max) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: Quokka(koala) -> (LoveToSleep",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AnimalFromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AnimalFromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: Quokka(koala) -> (LoveToSleep(ko",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimals(x, Max))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimals(x, Max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (FavoriteAnimals(x, Max) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(x) -> -Quokka(x)\n</PREMISES>\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: Quokka(x) -> (LovesToSleep(x) | VeryFluffy(x))\n</",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (Australian(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> Australian(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: Quokka(koala) -> (LoveToSleep(koala) | VeryFluffy",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals.\nFOL: all x. (LovedByTourists(x) -> FavoriteAnimal(x, Max))\nTEXT: All animals from Australia are loved by tourists.\nFOL: all x. (Australian(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia.\nFOL: all x. (Quokka(x) -> Australian(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (FavoriteAnimal(x, Max) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep.\nFOL: all x. (FavoriteAnimal(x, Max) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: Quokka(koala) -> (LovesToSleep(koala) | VeryFluffy"
   ],
   [
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (Australian(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> Australian(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: (VeryFluffy(koala) -> -Quokka(koala))\n</PREMISES>\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: Quokka(koala) -> (LovesToSleep(koala)",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavorite(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (Australian(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> Australian(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (MaxFavorite(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavorite(x) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: (VeryFluffy(koala) -> -Quokka(koala))\n</PREMISES>\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: (Quokka(koala) -> (LovesToSleep(koala) | Very",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> FavoriteMax(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (AustralianAnimal(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> AustralianAnimal(x))\nTEXT: All of Max's favorite animals are very fluffy. \nFOL: all x. (FavoriteMax(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (FavoriteMax(x) -> LovesToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka. \nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: Quokka(koala) -> (LovesToSleep(koala) | Very",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (FromAustralia(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> FromAustralia(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: Quokka(koala) -> (LoveToSleep(koala) | Very",
    "<PREMISES>\nIf animals are loved by tourists, then they are Max's favorite animals. \nFOL: all x. (LovedByTourists(x) -> MaxFavoriteAnimal(x))\nTEXT: All animals from Australia are loved by tourists. \nFOL: all x. (Australian(x) -> LovedByTourists(x))\nTEXT: All quokka are animals from Australia. \nFOL: all x. (Quokka(x) -> Australian(x))\nTEXT: All of Max's favorite animals are very fluffy.\nFOL: all x. (MaxFavoriteAnimal(x) -> VeryFluffy(x))\nTEXT: All of Max's favorite animals love to sleep. \nFOL: all x. (MaxFavoriteAnimal(x) -> LoveToSleep(x))\nTEXT: If a koala is very fluffy, then the koala is not a quokka.\nFOL: VeryFluffy(koala) -> -Quokka(koala)\n</PREMISES>\n\n<CONCLUSION>\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy.\nFOL: Quokka(koala) -> (LoveToSleep(koala) | VeryFluffy"
   ]
  ]
 },
 {
  "index": 90,
  "responses": [
   [
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n-CEO(harry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> Kind(x) | Evil(x))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n-CEO(harry) | Gentleman(harry)\n</CONCLUSION>",
    "<PREMISES>\nA man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: -CEO(harry)\n</PREMISES>\n\n<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nF",
    "<PREMISES>\nA man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handyman(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handy(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nA man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handyman(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n-CEO(harry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n-CEO(harry)\n</CONCLUSION>",
    "<PREMISES>\nA man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nA man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</PREMISES>\n\n<CONCLUSION>\nHarry is a CEO.\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n-CEO(harry)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<PREMISES>\nA man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handyman(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</PREMISES>\n<CONCLUSION>\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handy(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n-CEO(harry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n-CEO(harry)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<PREMISES>\nA man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: -CEO(harry)\n</PREMISES>\n\n<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nF",
    "<PREMISES>\nall x. (Man(x) -> Kind(x) | Evil(x))\nall x. (Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n-CEO(harry)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Man(x) -> Kind(x) | Evil(x))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n-CEO(harry) & Gentleman(harry) \n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n-CEO(harry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n-CEO(harry)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is a CEO.\nFOL: CEO(harry)\n</EVALUATE>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n-CEO(harry)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 91,
  "responses": [
   [
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nMan(harry)\n</PREMISES>\n<CONCLUSION>\n(-Evil(harry) | CEO(harry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\nHarry is kind | CEO(harry)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handyman(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\nHarry is kind or a CEO.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (-Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\n",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\nHarry is kind | CEO(harry)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n</EVALUATE>",
    "<PREMISES>\nA man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n</PREMISES>\n\n<CONCLUSION>\nHarry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> Kind(x) | Evil(x))\nall x. (-Handsome(x) & Ugly(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\nHarry is kind or a CEO.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> Kind(x) | Evil(x))\nTEXT: No ugly person is handsome.\nFOL: all x. (-Handsome(x) & Ugly(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Evil(Harry) & Kind(Harry)) | (CEO(Harry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nMan(harry)\n</PREMISES>\n<CONCLUSION>\n(all x. (Man(x) -> (Kind(x) | Evil(x)))) & (Man(harry) -> Kind(harry) | CEO(harry))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Evil(Harry) & Harry is a gentleman) | (CEO(Harry))\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handyman(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Handsome(x) | -Ugly(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\nHarry is Kind(x) | CEO(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Evil(Harry) & Kind(Harry)) | (CEO(Harry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> Kind(x) | Evil(x))\nall x. (-Handsome(x) | -Ugly(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\nHarry is kind | CEO(harry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Handsome(x) & Ugly(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Handsome(x) -> Gentleman(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\nHarry is kind | CEO(harry)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Man(x) -> Kind(x) | Evil(x))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n-Kind(harry) | CEO(harry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Harry is evil) | (Harry is CEO)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\nHarry is kind or a CEO.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (-Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\n",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handyman(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: (Kind(harry) | CEO(harry))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A man is either kind or evil.\nFOL: all x. (Man(x) -> (Kind(x) | Evil(x)))\nTEXT: No ugly person is handsome.\nFOL: all x. (Ugly(x) -> -Handsome(x))\nTEXT: All evil people are ugly.\nFOL: all x. (Evil(x) -> Ugly(x))\nTEXT: All gentlemen are handsome.\nFOL: all x. (Gentleman(x) -> Handsome(x))\nTEXT: All CEOs are gentlemen.\nFOL: all x. (CEO(x) -> Gentleman(x))\nTEXT: Harry is a gentleman.\nFOL: Gentleman(harry)\nTEXT: Harry is kind or a CEO.\nFOL: Kind(harry) | CEO(harry)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 92,
  "responses": [
   [
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Evil(harry) & -Ugly(harry)) | (-Evil(harry) | -Ugly(harry)) -> (-Kind(harry) & -CEO(harry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Evil(harry) & -Ugly(harry)) | ((-Evil(harry) & -Ugly(harry)) | (Kind(harry) & -CEO(harry)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Handsome(x) & Ugly(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Evil(harry) & -Ugly(harry)) | (Evil(harry) & Ugly(harry)) -> (-Kind(harry) & -CEO(harry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Handsome(x) -> -Ugly(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Evil(harry) & -Ugly(harry)) | (-Evil(harry) | -Ugly(harry)) -> (-Kind(harry) & -CEO(harry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> Kind(x) | Evil(x))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Evil(harry) & -Ugly(harry)) | (Evil(harry) & Ugly(harry)) -> (-Kind(harry) & -CEO(harry))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Handsome(x) -> -Ugly(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Evil(harry) & -Ugly(harry)) | (-Evil(harry) | -Ugly(harry)) -> (-Kind(harry) & -CEO(harry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Evil(harry) & -Ugly(harry)) | (-Evil(harry) | -Ugly(harry)) -> (-Kind(harry) & -CEO(harry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n- (Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> - (Kind(harry) | CEO(harry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Handsome(x) -> -Ugly(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry))) -> ((Kind(harry) | -CEO(harry)) | (-Kind(harry) & -CEO(harry)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> Kind(x) | Evil(x))\nall x. (-Handsome(x) -> -Ugly(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Evil(harry) & -Ugly(harry)) | (-Evil(harry) | -Ugly(harry)) -> (-Kind(harry) & -CEO(harry))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Evil(harry) & -Ugly(harry)) | (-Evil(harry) | -Ugly(harry)) -> -Kind(harry) & -CEO(harry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Handsome(x) -> -Ugly(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Evil(harry) & -Ugly(harry)) | (-Evil(harry) | -Ugly(harry)) -> (-Kind(harry) & -CEO(harry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Evil(harry) & -Ugly(harry)) | (-Evil(harry) | -Ugly(harry)) -> (-Kind(harry) & -CEO(harry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry)) -> -Kind(harry) & -CEO(harry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Evil(harry) & Ugly(harry)) | (-Evil(harry) | -Ugly(harry)) -> (-Kind(harry) & -CEO(harry))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Handsome(x) & Ugly(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Evil(harry) & -Ugly(harry)) | (-Evil(harry) & -Kind(harry) & -CEO(harry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n((Evil(harry) & Ugly(harry)) | (-Evil(harry) & -Ugly(harry))) -> (-Kind(harry) & -CEO(harry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Evil(harry) & -Ugly(harry)) | (-Evil(harry) | -Ugly(harry)) -> (-Kind(harry) & -CEO(harry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Handsome(x) & Ugly(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Evil(harry) & -Ugly(harry)) | (-Kind(harry) & -CEO(harry)) -> (-Kind(harry) & -CEO(harry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Handsome(x) | Ugly(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n((Harry is Evil) & (Harry is Ugly)) | ((-Harry is Evil) & (-Harry is Ugly)) -> (-Harry is Kind) & (-Harry is CEO)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Handsome(x) & Ugly(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Evil(harry) & -Ugly(harry)) | (-Kind(harry) & -CEO(harry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Evil(harry) & -Ugly(harry)) | (-Evil(harry) | -Ugly(harry)) -> (-Kind(harry) & -CEO(harry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Evil(harry) & -Ugly(harry)) | (-Evil(harry) | -Ugly(harry)) -> -Kind(harry) & -CEO(harry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Handsome(x) & Ugly(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Evil(harry) & -Ugly(harry)) | (-Evil(harry) | -Ugly(harry)) -> (-Kind(harry) & -CEO(harry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Man(x) -> (Kind(x) | Evil(x)))\nall x. (-Ugly(x) -> -Handsome(x))\nall x. (Evil(x) -> Ugly(x))\nall x. (Gentleman(x) -> Handsome(x))\nall x. (CEO(x) -> Gentleman(x))\nHarry is a gentleman.\n</PREMISES>\n<CONCLUSION>\n(-Evil(harry) & -Ugly(harry)) | (Evil(harry) & Ugly(harry)) -> - (Kind(harry) | CEO(harry))\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 93,
  "responses": [
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (x = y -> (Twins(x, y) -> HangOutWithSiblings(x, y)))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (SameAge(x, y) -> (x = y -> Twins(x, y)) | (x = y -> Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSiblings(x, y) -> SameAge(x, y))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHome(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (HangOutWithSiblings(x) -> -NotLiveAt",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (SameAge(x, y) -> HangOutWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (SameAge(x, y) & -Twins(x, y) & -Triplets(x, y) -> Twins(x, y) | Triplets(x, y))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (AnnoyingSiblings(x, y) -> SameAge(x, y))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBond(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutWithSiblings(x, y) -> -LiveAtHomeRegularly",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutAnnoyingSiblings(x) -> Siblings(x, y))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutWithSiblings(x, y) -> -LiveAtHome",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (Twins(x, y) | Triplets(x, y) -> HangOut(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (HasSibling(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (Complain(x) & AnnoyingSibling(x) -> HasSibling(x, x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHome(x) -> -StrongBond(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOut(x, y) -> NotLiveAtHome(x))\nTEXT: Luke is either both",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (ComplainAboutSiblings(x, y) -> Siblings(x, y) & SameAge(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutWithSiblings(x, y) -> -LiveAtHomeRegular"
   ],
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSiblings(x, y) -> Siblings(x, y) & SameAge(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHome(x) -> -DevelopStrongBonds(x))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutWithSiblings(x, y) -> -Live",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & Age(x, y) -> (Twins(x, y) | Triplets(x, y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSiblings(x, y) -> Siblings(x, y) & Age(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutWithSiblings(x, y) -> -Live",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x, y) & AnnoyingSiblings(x, y) -> Siblings(x, y) & SameAge(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHome(x) -> -StrongBonds(x))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutSiblings(x, y) -> -LiveAt",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (Twins(x) & Twins(y) | Triplets(x) & Triplets(y) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Sibling(x, y) & SameAge(x, y) -> (Twins(x) & Twins(y) | Triplets(x) & Triplets(y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSibling(x, y) -> Sibling(x, y) & SameAge(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x y. (-LiveAtHome(x) & LiveAtHome(y) -> -StrongBond(x, y))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (TwinsOrTriplets(x, y) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (SameAgeSiblings(x, y) -> TwinsOrTriplets(x, y))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutAnnoyingSiblings(x) -> SameAgeSiblings(x, x))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (HangOutWithSiblings(x) -> NotLiveAtHomeRegularly(x))\nLuke is either both a twin or triplet and develops strong bonds with his family members, or he"
   ],
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x) & Twins(y) | Triplets(x) & Triplets(y)) -> SpendTimeWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x) & Twins(y) | Triplets(x) & Triplets(y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSiblings(x, y) -> Siblings(x, y) & SameAge(x, y))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\n",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSiblings(x, y) -> Siblings(x, y) & SameAge(x, y))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x, Family(x)))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y.",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (Twins(x, y) | Triplets(x, y) -> SpendTimeWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> Twins(x, y) | Triplets(x, y))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSiblings(x, y) -> Siblings(x, y) & SameAge(x, y))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x y. (-LiveAtHome(x) & -DevelopBond(x, y) -> -DevelopBond(x, y))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x, y) & AnnoyingSiblings(x, y) -> Siblings(x, y) & SameAge(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x y. (-LiveAtHomeRegularly(x, y) -> -DevelopStrongBonds(x, y))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutWith",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (Sibling(x, y) -> SpendTimeWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Sibling(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutAnnoyingSiblings(x) -> Sibling(x, x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a"
   ],
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (ComplainAboutSiblings(x, y) -> Siblings(x, y) & SameAge(x, y))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHome(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutWithSiblings(x, y",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> SpendTimeWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (Complain(x) & AnnoyingSiblings(x) -> Siblings(x, y) & SameAge(x, y))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHome(x) -> -DevelopStrongBonds(x, FamilyMembers(x)))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (SpendTime",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & Age(x, y) & -Age(x, y) & -Age(y, x) -> (Twins(x, y) | Triplets(x, y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSiblings(x, y) -> Siblings(x, y) & Age(x, y) & -Age(x, y) & -Age(y, x))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHome(x) -> -StrongBond(x))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x, y) & AnnoyingSiblings(x, y) -> Siblings(x, y) & SameAge(x, y))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (Hang",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (ComplainAboutAnnoyingSiblings(x, y) -> Siblings(x, y) & SameAge(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x y. (-LiveAtHomeRegularly(x, y) -> -DevelopStrongBonds(x, y))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutWithSiblings(x,"
   ],
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (Twins(x, y) | Triplets(x, y) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (ComplainAboutAnnoyingSiblings(x, y) -> SameAge(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x y. (-LiveAtHomeRegularly(x, y) -> -DevelopStrongBonds(x, y))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutWithSiblings(x, y) -> -LiveAtHomeRegularly(x, y))\nLuke",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> SpendTimeWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x, y) & AnnoyingSiblings(x, y) -> Siblings(x, y) & SameAge(x, y))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x y. (NotLiveAtHome(x, y) -> -DevelopStrongBonds(x, y))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (Sibling(x, y) -> TimeSpentWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Sibling(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Sibling(x, y) & AnnoyingSibling(x, y) -> SameAge(x, y))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NoHomeRegularly(x) -> -StrongBond(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (TimeSpentWithSiblings(x, y) -> NoHomeRegularly(x))\nTEXT: Luke",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (Twins(x, y) | Triplets(x, y) -> SpendTimeWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (SameAge(x, y) -> Twins(x, y) | Triplets(x, y))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutAnnoyingSiblings(x) -> SameAge(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (TwinsOrTriplets(x, y) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (SameAgeSiblings(x, y) -> TwinsOrTriplets(x, y))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (ComplainAboutAnnoyingSiblings(x, y) -> SameAgeSiblings(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutWithSiblings(x, y) -> -LiveAtHomeRegularly(x))\nLuke is either both a twin or triplet and develops strong bonds with his"
   ]
  ]
 },
 {
  "index": 94,
  "responses": [
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (TwinsOrTriplets(x, y) -> HangOutWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (SameAge(x, y) -> TwinsOrTriplets(x, y))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (ComplainAboutAnnoyingSiblings(x, y) -> SameAge(x, y))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHome(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (HangOutWithSiblings(x) -> NotLiveAtHome(x))\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his",
    "<PREMISES>\n<evaluate>\nTEXT: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> SpendTimeWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSiblings(x, y) -> Siblings(x, y) & SameAge(x, y))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x, FamilyMembers(x)))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nF",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (TwinsOrTriplets(x, y) -> HangOutWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (SameAgeSiblings(x, y) -> TwinsOrTriplets(x, y))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (ComplainAboutAnnoyingSiblings(x, y) -> SameAgeSiblings(x, y))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (HangOutWithSiblings(x) -> -LiveAtHomeRegularly(x))\nTEXT: Luke is either both a twin or",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x) & Twins(y) & Siblings(x, y)) | (Triplets(x) & Triplets(y) & Siblings(x, y)) -> SpendTimeWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x) & Twins(y) | Triplets(x) & Triplets(y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutAnnoyingSiblings(x) -> Siblings(x, sibling))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (Sibling(x, y) -> SpendTimeWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Sibling(x, y) & Age(x, y) & Age(x, y) & -Age(x, y) & -Age(y, x) -> (Sibling(x, y) | Sibling(y, x)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSibling(x, y) -> Sibling(x, y) & Age(x, y) & Age(x, y) & -Age(x, y) & -Age(y, x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHome(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and"
   ],
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & Age(x, y) & Age(y, x) -> (Twins(x, y) | Triplets(x, y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: ComplainAboutAnnoyingSiblings(x) -> Siblings(x, y) & Age(x, y) & Age(y, x)\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL:!LiveAtHome(x) ->!DevelopStrongBonds(x)\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: HangOutWithSiblings(x, y) ->!LiveAtHome(x)\nLuke is either",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (x = y or x = z or x = w & SpendTimeWithSiblings(x, y) & PlayWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (x hasSibling(y) & Age(x, y) = Age(x, z) or x hasSibling(z) & Age(x, y) = Age(x, z) or x = y or x = z)\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (Complain(x) & AnnoyingSibling(x) -> HasSibling(x, y) & Age(x, y) = Age(x, z))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHome(x) -> -DevelopBond(x))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: ComplainAboutAnnoyingSiblings(x) -> Siblings(x, y) & SameAge(x, y)\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: -LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x)\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: HangOutWithSiblings(x) -> -LiveAtHomeRegularly(x)\nLuke is either both a twin or triplet and develops strong",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> SpendTimeWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutAnnoyingSiblings(x) -> Siblings(x,...))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (SpendTimeWithSiblings(x, y) -> NotLive",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (Twins(x, y) | Triplets(x, y) -> SpendTimeWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutAnnoyingSiblings(x) -> SameAge(x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHome(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (SpendTimeWithSiblings(x, y) -> NotLiveAtHome(x))\nTEXT: Luke is either both a"
   ],
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> SpendTimeWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: ComplainAboutAnnoyingSiblings(x) -> Siblings(x, y) & SameAge(x, y)\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: -LiveAtHomeRegularly(x) -> NoStrongBonds(x)\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: SpendTimeWithSiblings(x, y) -> -LiveAtHomeRegularly(x)\nTEXT:",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (ComplainAboutAnnoyingSiblings(x) -> Siblings(x,?y) & SameAge(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutWithSiblings(x, y) -> -LiveAtHome",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (Sibling(x, y) -> HangOutWithSiblings(x, y) & PlayWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Sibling(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Sibling(x, y) & AnnoyingSibling(x, y) -> SameAge(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBond(x))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (HangOutWithSiblings(x) & PlayWithSiblings(x) -> -LiveAtHomeRegular",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x) & Twins(y) & x=y) | (Triplets(x) & Triplets(y) & x=y) | (x=y) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & Age(x, y) = Age(x, y) & -x=y & -y=x -> Twins(x, y) | Triplets(x, y))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSiblings(x, y) & Siblings(x, y) & Age(x, y) = Age(x, y) -> Twins(x, y) | Triplets(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHome(x) -> -DevelopStrongBonds",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSiblings(x, y) -> Siblings(x, y) & SameAge(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBond(x))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutSiblings(x, y) -> -LiveAtHome"
   ],
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> SpendTimeWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: ComplainAboutAnnoyingSiblings(x) -> Siblings(x, y) & SameAge(x, y)\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: -LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x)\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x)\nLuke is either both a twin or triplet and develops strong",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> SpendTimeWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: ComplainAboutAnnoyingSiblings(x) -> Siblings(x, x)\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: -LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x)\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x)\nTEXT: Luke is either both a twin or triplet",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (Twins(x) & Twins(y) | Triplets(x) & Triplets(y) -> SpendTimeWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Sibling(x, y) & SameAge(x, y) -> (Twins(x) & Twins(y) | Triplets(x) & Triplets(y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSibling(x, y) -> Sibling(x, y) & SameAge(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHome(x) -> -DevelopStrongBonds(x))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (SpendTime",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (Twins(x, y) | Triplets(x, y) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (HasSibling(x, y) & SameAge(x, y) -> Twins(x, y) | Triplets(x, y))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (ComplainAboutSiblings(x, y) -> HasSibling(x, y) & SameAge(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x y. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x, y))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutWithSiblings(x, y) -> -LiveAtHome",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> SiblingsHangOut(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & Age(x, y) -> (Twins(x, y) | Triplets(x, y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSiblings(x, y) -> Siblings(x, y) & Age(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHome(x) -> -StrongBond(x))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (SiblingsHangOut(x, y) -> -LiveAtHome(x))\nLuke is"
   ],
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: ComplainAboutAnnoyingSiblings(x) -> Siblings(x, y) & SameAge(x, y)\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: -LiveAtHomeRegularly(x) -> NoStrongBonds(x)\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: HangOutWithSiblings(x) -> -LiveAtHomeRegularly(x)\nLuke is either both a twin or triplet and develops strong bonds",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (Twins(x, y) | Triplets(x, y) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (HasSibling(x, y) & SameAge(x, y) -> Twins(x, y) | Triplets(x, y))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (ComplainAboutAnnoyingSiblings(x) -> HasSibling(x, y) & SameAge(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x y. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x, y))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutWithSiblings(x, y) -> -LiveAt",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x) & Twins(y) | Triplets(x) & Triplets(y)) -> SpendTimeWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x) & Twins(y) | Triplets(x) & Triplets(y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSiblings(x, y) -> Siblings(x, y) & SameAge(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (Complain(x) -> Siblings(x, y) & SameAge(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHome(x) -> -StrongBond(x))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutWithSiblings(x, y) -> -LiveAtHome(x))\nLuke is either both a twin or triplet and",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: ComplainAboutAnnoyingSiblings(x) -> Siblings(x, x)\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: NotLiveAtHomeRegularly(x) -> -DevelopStrongBonds(x)\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: HangOutWithSiblings(x) -> NotLiveAtHomeRegularly(x)\nLuke is either both a twin or triplet and develops strong bonds with his family members, or"
   ]
  ]
 },
 {
  "index": 95,
  "responses": [
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (Twins(x) & Twins(y) & x!= y -> SpendTimeWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Sibling(x) & Sibling(y) & Age(x) = Age(y) & x!= y -> Twins(x) | Twins(y))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (Complain(x) & AnnoyingSibling(x) -> Sibling(x) & Sibling(y) & Age(x) = Age(y))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (LiveAtHome(x) ->!DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (SpendTimeWithS",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x) & Twins(y) | Triplets(x) & Triplets(y)) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & Age(x, y) -> (Twins(x) & Twins(y) | Triplets(x) & Triplets(y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x, y) & AnnoyingSiblings(x, y) -> Siblings(x, y) & Age(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (Twins(x, y) | Triplets(x, y) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> Twins(x, y) | Triplets(x, y))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSiblings(x, y) -> Siblings(x, y) & SameAge(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHome(x) -> -DevelopStrongBonds(x))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutWithSiblings(x, y) -> NotLiveAt",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> SpendTimeWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSiblings(x, y) -> Siblings(x, y) & SameAge(x, y))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x y. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x, y))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y.",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> SiblingsHangOut(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSiblings(x, y) -> Siblings(x, y) & SameAge(x, y))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x y. (-LiveAtHomeRegularly(x) -> -StrongBond(x, y))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (Siblings"
   ],
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & Age(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSiblings(x, y) -> Siblings(x, y) & Age(x, y))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x y. (-LiveAtHome(x, y) -> -DevelopBond(x, y))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutWith",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (Twins(x, y) | Triplets(x, y) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & Age(x, y) -> Twins(x, y) | Triplets(x, y))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSiblings(x, y) -> Siblings(x, y) & Age(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHome(x) -> -DevelopStrongBonds(x))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (HangOutWithSiblings(x) -> -LiveAtHome(x))\nLuke is either",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (Twins(x, y) | Triplets(x, y) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (ComplainAboutAnnoyingSiblings(x, y) -> SameAge(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x y. (-LiveAtHomeRegularly(x, y) -> -DevelopStrongBonds(x, y))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutWithSiblings(x, y) -> -LiveAtHomeRegularly(x, y))\nLuke",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x) & Twins(y) | Triplets(x) & Triplets(y)) -> SpendTimeWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & Age(x, y) -> (Twins(x) & Twins(y) | Triplets(x) & Triplets(y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSiblings(x, y) -> Siblings(x, y) & Age(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (Spend",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (ComplainAboutAnnoyingSiblings(x, y) -> Siblings(x, y) & SameAge(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x, FamilyMembers(x)))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutWithSiblings(x, y"
   ],
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x) & Twins(y) & Siblings(x, y)) | (Triplets(x) & Triplets(y) & Siblings(x, y)) -> SpendTimeWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x) & Twins(y) | Triplets(x) & Triplets(y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x, y) & AnnoyingSiblings(x, y) -> Siblings(x, y) & SameAge(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHome(x) -> -DevelopStrongBonds(x, Family))\nIf people spend a lot of time hanging out with and playing with their siblings, then",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (Twins(x, y) | Triplets(x, y) -> SpendTimeWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (HasSibling(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (ComplainAboutSiblings(x, y) -> HasSibling(x, y) & SameAge(x, y))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHome(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) ->",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (Twins(x, y) | Triplets(x, y) -> SpendTimeWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> Twins(x, y) | Triplets(x, y))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: ComplainAboutAnnoyingSiblings(x) -> Siblings(x, x)\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: -LiveAtHome(x) -> -DevelopStrongBonds(x)\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: SpendTimeWithSiblings(x) -> -LiveAtHome(x)\nTEXT: Luke is either both a twin or triplet and develops strong bonds with his",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (Twins(x, y) | Triplets(x, y) -> Siblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & Age(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x. (Complain(x) & -AnnoyingSiblings(x) -> Siblings(x, x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHome(x) -> -StrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (Siblings(x, y) -> NotLiveAtHome(x) | NotLiveAt",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x, y) & AnnoyingSibling(x, y) -> Siblings(x, y) & SameAge(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHome(x) -> -DevelopStrongBonds(x))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutWithSiblings(x, y) -> -"
   ],
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x, y) -> Siblings(x, y) & SameAge(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x y. (-LiveAtHomeRegularly(x) -> -StrongBond(x, y))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutWithSiblings(x, y) -> -LiveAtHomeRegularly(x",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (Twins(x, y) | Triplets(x, y) -> SpendTimeWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (HasSibling(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSibling(x, y) -> HasSibling(x, y) & SameAge(x, y))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHome(x) -> -DevelopStrongBond(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (SpendTimeWithS",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSiblings(x, y) -> Siblings(x, y) & SameAge(x, y))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x y. (-LiveAtHome(x, y) -> -DevelopBond(x, y))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOut",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> Siblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & Age(x, y) & -Age(x, z) & -Age(y, z) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & Siblings(x, y) -> Age(x, y) & Age(y, x))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x, Family(x)))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (Sibling(x, y) -> SpendTimeWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Sibling(x, y) & Age(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (ComplainAboutSiblings(x, y) -> Sibling(x, y) & Age(x, y))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHome(x) -> -DevelopBond(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (SpendTimeWithSiblings(x) -> -LiveAtHome(x))\nTEXT: Luke is either both a twin"
   ],
   [
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (Twins(x, y) | Triplets(x, y) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (ComplainAboutAnnoyingSiblings(x, y) -> SameAge(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x. (HangOutWithSiblings(x) -> -LiveAtHomeRegularly(x))\nLuke is either both a twin or triplet and develops strong",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. (Twins(x, y) | Triplets(x, y) -> SpendTimeWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (HaveSameAgeSiblings(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: ComplainAboutAnnoyingSiblings(x) -> HaveSameAgeSiblings(x, x)\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: -LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x)\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: SpendTimeWithSiblings(x) -> -LiveAtHomeRegularly(x)\nTEXT: Luke is either both a twin or triplet and",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (ComplainAboutAnnoyingSiblings(x, y) -> Siblings(x, y) & SameAge(x, y))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (NotLiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutWith",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutWithSiblings(x, y))\nTEXT: If people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nTEXT: If people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSiblings(x, y) -> Siblings(x, y) & SameAge(x, y))\nTEXT: If people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -StrongBond(x))\nTEXT: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutWithS",
    "<PREMISES>\nIf people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\nFOL: all x y. ((Twins(x, y) | Triplets(x, y)) -> HangOutWithSiblings(x, y))\nIf people have siblings who are the same age, then they are twins or triplets.\nFOL: all x y. (Siblings(x, y) & SameAge(x, y) -> (Twins(x, y) | Triplets(x, y)))\nIf people complain often about annoying siblings, then they have siblings who are the same age.\nFOL: all x y. (Complain(x) & AnnoyingSiblings(x, y) -> Siblings(x, y) & SameAge(x, y))\nIf people do not live at home regularly, then they do not develop strong bonds with their family members.\nFOL: all x. (-LiveAtHomeRegularly(x) -> -DevelopStrongBonds(x))\nIf people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\nFOL: all x y. (HangOutWithSiblings(x, y) ->"
   ]
  ]
 },
 {
  "index": 96,
  "responses": [
   [
    "<PREMISES>\nAll fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\n</PREMISES>\n<CONCLUSION>\nSome evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (Fir(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & Fir(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<PREMISES>\nAll fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\n</PREMISES>\n\n<CONCLUSION>\nSome evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</CONCLUSION>",
    "<PREMISES>\nAll fir trees are evergreens.\nFOL: all x. (Fir(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & Fir(x))\n</PREMISES>\n<CONCLUSION>\nSome evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</CONCLUSION>",
    "<PREMISES>\nAll fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\n</PREMISES>\n<CONCLUSION>\nSome evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (Fir(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & Fir(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (Fir(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & Fir(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<PREMISES>\nAll fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\n</PREMISES>\n<CONCLUSION>\nSome evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (Fir(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & Fir(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<PREMISES>\nAll fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\n</PREMISES>\n<CONCLUSION>\nSome evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Fir(x) -> Evergreen(x))\nexists x. (ObjectOfWorship(x) & Fir(x))\n</PREMISES>\n\n<CONCLUSION>\nexists x. (Evergreen(x) & -ObjectOfWorship(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (Fir(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & Fir(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (Fir(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & Fir(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<PREMISES>\nall x. (Fir(x) -> Evergreen(x))\nexists x. (ObjectOfWorship(x) & Fir(x))\n</PREMISES>\n\n<CONCLUSION>\nexists x. (Evergreen(x) & -ObjectOfWorship(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (Fir(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & Fir(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (Fir(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & Fir(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<PREMISES>\nAll fir trees are evergreens.\nFOL: all x. (Fir(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & Fir(x))\n</PREMISES>\n<CONCLUSION>\nSome evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (Fir(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & Fir(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (Fir(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & Fir(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All fir trees are evergreens.\nFOL: all x. (Fir(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & Fir(x))\nTEXT: Some evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</EVALUATE>",
    "<PREMISES>\nAll fir trees are evergreens.\nFOL: all x. (FirTree(x) -> Evergreen(x))\nTEXT: Some objects of worship are fir trees.\nFOL: exists x. (ObjectOfWorship(x) & FirTree(x))\n</PREMISES>\n<CONCLUSION>\nSome evergreens are not objects of worship.\nFOL: exists x. (Evergreen(x) & -ObjectOfWorship(x))\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 97,
  "responses": [
   [
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(x) -> (NewMexico(x) | Texas(x))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate visited PicurisMountains\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: HardingPegmatiteMine(x) -> Donated(x)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -Texas(x) & -Mine(x) & -Donated(x)\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate visited Texas(x) & Texas(x) -> MountainRange(x)\n</EVALUATE>",
    "<PREMISES>\nThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(NM) | PicurisMountains(TX)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate(visited(PicurisMountains))\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: HardingPegmatiteMine(donated)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -PicurisMountains(TX) & -donated(HardingPegmatiteMine)\n</PREMISES>\n<CONCLUSION>\nJuan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate(visited(TX))\n</CONCLUSION>",
    "<PREMISES>\nThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(NM) | PicurisMountains(TX)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate -> PicurisMountains(JuanDeOnate)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: HardingPegmatiteMine(PicurisMountains(JuanDeOnate))\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -PicurisMountains(TX) & -HardingPegmatiteMine(TX)\n</PREMISES>\n<CONCLUSION>\nJuan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate & PicurisMountains(TX)\n</CONCLUSION>",
    "<PREMISES>\nThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(x) -> (NewMexico(x) | Texas(x))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate -> PicurisMountains(juanDeOnate)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: HardingPegmatiteMine(x) -> PicurisMountains(x) & Donated(x)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -Texas(x) & PicurisMountains(x) & Donated(x)\n</PREMISES>\n<CONCLUSION>\nJuan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate -> Texas(x) & PicurisMountains(x)\n</CONCLUSION>",
    "<PREMISES>\nThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(x) -> (NewMexico(x) | Texas(x))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate -> PicurisMountains(juanDeOnate)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: HardingPegmatiteMine -> PicurisMountains(hardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -Texas(x) -> -DonatedMine(x)\n</PREMISES>\n<CONCLUSION>\nJuan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate -> Texas(x) & PicurisMountains(x)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(NewMexico) | PicurisMountains(Texas)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate visited PicurisMountains\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(HardingPegmatiteMine, PicurisMountains)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -PicurisMountains(Texas) & -Donated(anyMine, PicurisMountains)\n</PREMISES>\n<CONCLUSION>\nJuan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate visited PicurisMountains(Texas)\n</CONCLUSION>",
    "<PREMISES>\nThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(NM) | PicurisMountains(TX)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate(visited(PicurisMountains))\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: HardingPegmatiteMine(donated)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -PicurisMountains(TX) & -donated(HardingPegmatiteMine)\n</PREMISES>\n<CONCLUSION>\nJuan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate(visited(TX))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(x) -> (NewMexico(x) | Texas(x))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate visited PicurisMountains\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: HardingPegmatiteMine(x) -> Donated(x)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -Texas(x) & -Mine(x) & Donated(x)\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate visited Texas(x) & (NewMexico(x) | Texas(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: (PicurisMountains(NM) | PicurisMountains(TX))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(PicurisMountains, JuanDeOnate)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(HardingPegmatiteMine, PicurisMountains)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -Exists(x. (MountainRange(x) & Texas(x) & Donated(x)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: -Exists(x. (MountainRange(x) & Texas(x) & Visited(x))) | Visited(TX, JuanDeOnate)\n</EVALUATE>",
    "<PREMISES>\nThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(x) = (NewMexico(x) | Texas(x))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visit(PicurisMountains, JuanDeOnate)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: DonatedMine(PicurisMountains, HardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -DonatedMine(Texas, x)\n</PREMISES>\n<CONCLUSION>\nJuan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate(x) & Texas(x) & Visit(x, JuanDeOnate)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(x) = NewMexico or Texas(x)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate(visited(PicurisMountains))\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: HardingPegmatiteMine(donated(PicurisMountains))\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -Texas(mountainRange) & -Texas(mine) & -donated(mountainRange) & -donated(mine)\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate(visited(Texas(mountainRange)))\n</EVALUATE>",
    "<PREMISES>\nThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains NM or PicurisMountains TX\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate visited PicurisMountains\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: HardingPegmatiteMine donated\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -exists x. (MountainRange(x) & Texas(x) & Mine(x) & Donated(x))\n</PREMISES>\n<CONCLUSION>\nJuan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate visited Texas & -NM & -TX\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains NM or PicurisMountains TX\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate visited PicurisMountains\nTEXT: The Harding Pegmatite Mine, located in",
    "<PREMISES>\nThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(x) <-|-> (NewMexico or Texas)\nJuan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate visited PicurisMountains\nThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: HardingPegmatiteMine(x) <-|-> PicurisMountains(x)\nThere are no mountain ranges in texas that have mines which have been donated.\nFOL: -exists x. (Texas & MountainRange(x) & DonatedMine(x))\n</PREMISES>\n<CONCLUSION>\nJuan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate visited Texas & MountainRange(x) & -NewMexico\n</EVALUATE>",
    "<PREMISES>\nThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(x) = (NewMexico & Texas) -> MountainRange(x)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate -> PicurisMountains(JuanDeOnate)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: HardingPegmatiteMine -> PicurisMountains(HardingPegmatiteMine)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -Texas & MountainRange(x) -> HardingPegmatiteMine\n</PREMISES>\n<CONCLUSION>\nJuan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate & Texas & -NewMexico & MountainRange(x) -> PicurisMountains(x)\n</CONCLUSION>",
    "<PREMISES>\nThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(x) -> (NewMexico(x) | Texas(x))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate -> PicurisMountains(juanDeOnate)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: HardingPegmatiteMine(x) -> PicurisMountains(x)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -Texas(x) -> -HardingPegmatiteMine(x)\n</PREMISES>\n<CONCLUSION>\nJuan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate -> Texas(x) & PicurisMountains(x)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(x) -> (NewMexico(x) | Texas(x))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate -> Picur"
   ],
   [
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(x) -> (NewMexico(x) | Texas(x))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Onate(x) -> PicurisMountains(x)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: HardingPegmatiteMine(x) -> PicurisMountains(x)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -Texas(x) & -Mine(x) & -Donated(x) & (PicurisMountains(x) -> (Mine(x) & Donated(x)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: Texas(x) -> PicurisMountains(x) & Onate(x) -> PicurisMountains(x)\n</EVALUATE>",
    "<PREMISES>\nThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(x) = (NewMexico(x) | Texas(x))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate(x) & PicurisMountains(x)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: HardingPegmatiteMine(x) & PicurisMountains(x) & Donated(x)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -Texas(x) & MountainRange(x) & PicurisMountains(x) & HardingPegmatiteMine(x) & Donated(x)\n</PREMISES>\n<CONCLUSION>\nJuan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate(x) & Texas(x) & MountainRange(x) & PicurisMountains(x)\n</CONCLUSION>",
    "<PREMISES>\nThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(x) -> (NewMexico(x) | Texas(x))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate -> PicurisMountains(juanDeOnate)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: HardingPegmatiteMine -> PicurisMountains\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -Texas(x) -> -HardingPegmatiteMine(x)\n</PREMISES>\n<CONCLUSION>\nJuan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate -> Texas(x) & PicurisMountains(x)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(x) -> (NewMexico(x) | Texas(x))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate Visited(PicurisMountains)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: HardingPegmatiteMine(Donated)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -Texas(x) & PicurisMountains(x) & -Mine(x) & -Donated(x)\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate(Visited(x)) & -NewMexico(x) & -PicurisMountains(x) & Texas(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(x) <-> (NewMexico(x) | Texas(x))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Onate(x) & PicurisMountains(x)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: HardingPegmatiteMine(x) & PicurisMountains(x) & Donated(x)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -Texas(x) & PicurisMountains(x) & HardingPegmatiteMine(x) & Donated(x)\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: Texas(x) & PicurisMountains(x) & Onate(x) & -NewMexico(x)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(x) <- NewMexico(x) | Texas(x)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate(x) -> PicurisMountains(x)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: HardingPegmatiteMine(x) <- PicurisMountains(x)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -Texas(x) -> NoMineDonated(x)\n</PREMISES>\n<CONCLUSION>\nJuan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate(x) -> Texas(x) & PicurisMountains(x)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(x) <-> (NewMexico(x) | Texas(x))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate(x) -> PicurisMountains(x)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: HardingPegmatiteMine(x) -> PicurisMountains(x)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -Texas(x) & -MountainRange(x) & -Mine(x) & Donated(x) & all y. (x & y -> (MountainRange(x) & Mine(y) & Donated(y)))\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate(x) -> MountainRange(x) & Texas(x)\n</EVALUATE>",
    "<PREMISES>\nThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(NewMexico) | PicurisMountains(Texas)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: JuanDeOnate(visited(PicurisMountains))\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: HardingPegmatiteMine(donated(PicurisMountains))\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -PicurisMountains(Texas) & -donated(PicurisMountains(Texas))\n</PREMISES>\n<CONCLUSION>\nJuan de Onate visited a mountain range in Texas.\nFOL: JuanDeOnate(visited(PicurisMountains(Texas)))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: The Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(x) -> (NewMexico(x) | Texas(x))\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Onate(x) -> PicurisMountains(x)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: HardingPegmatiteMine(x) -> PicurisMountains(x)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -Texas(x) & -MountainRange(x) & HardingPegmatiteMine(x) -> -Donated(x)\nTEXT: Juan de Onate visited a mountain range in Texas.\nFOL: Texas(x) & PicurisMountains(x) & Onate(x) -> MountainRange(x)\n</EVALUATE>",
    "<PREMISES>\nThe Picuris Mountains are a mountain range in New Mexico or Texas.\nFOL: PicurisMountains(NeWmExico) | PicurisMountains(TexAs)\nTEXT: Juan de Onate visited the Picuris Mountains.\nFOL: Visited(PicurisMountains, JuanDeOnate)\nTEXT: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nFOL: Donated(HardingPegmatiteMine, PicurisMountains)\nTEXT: There are no mountain ranges in texas that have mines which have been donated.\nFOL: -TexAsMountainRange(Mine)\n</PREMISES>\n<CONCLUSION>\nJuan de Onate visited a mountain range in Texas.\nFOL: TexAsMountainRange(MountainRange) & Visited(MountainRange, JuanDeOnate)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 98,
  "responses": [
   [
    "<PREMISES>\n<TEXT>If a man is taller than another man, the taller one can block the other's shooting.</TEXT>\n<FOL>all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\n<TEXT>Michael is a man who is taller than everyone else in his class.</TEXT>\n<FOL>Man(michael) & all x. (Man(x) -> Taller(x, michael))\n<TEXT>If person x is taller than person y, and person y is taller than person z, then x is taller than z</TEXT>\n<FOL>all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\n<TEXT>Peter is a man who is taller than Michael.</TEXT>\n<FOL>Man(peter) & Man(michael) & Taller(peter, michael)\n<TEXT>Michael can block any shooting from a person as long as the person does not jump when shooting.</TEXT>\n<FOL>Man(michael) & all x. (Man(x) & -Jump(x) -> CanBlockShooting",
    "<PREMISES>\n<evaluate>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) & -Jump(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(y, z) & Taller(x, y) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x y. (Man(x) & Man(y) & -Jump(x, y) & CanBlockShooting(x, y))\nTEXT: Michael cannot block Windy's shooting",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, all x. Man(x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (x y & y z -> x z)\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) -> CanBlockShooting(michael, all x. Man(x) & NoJump(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, Windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (Sh",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) -> (Jump(x) -> -CanBlockShooting(michael, x)))\nTEXT: Michael cannot block Windy's shooting"
   ],
   [
    "<PREMISES>\n<TEXT>If a man is taller than another man, the taller one can block the other's shooting.</TEXT>\n<FOL>all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\n<TEXT>Michael is a man who is taller than everyone else in his class.</TEXT>\n<FOL>Man(michael) & all x. (Man(x) -> Taller(x, michael))\n<TEXT>If person x is taller than person y, and person y is taller than person z, then x is taller than z.</TEXT>\n<FOL>all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\n<TEXT>Peter is a man who is taller than Michael.</TEXT>\n<FOL>Man(peter) & Man(michael) & Taller(peter, michael)\n<TEXT>Michael can block any shooting from a person as long as the person does not jump when shooting.</TEXT>\n<FOL>Man(michael) & all x. (Man(x) -> CanBlockShooting(michael, x",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) -> -JumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, all x. Man(x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) -> CanBlockShooting(michael, all x. Man(x) & -Jump(x, shooting))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael,",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, all x. Man(x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) -> CanBlockShooting(michael, all x. Man(x) & -Jump(x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, Windy",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) -> (Jump(x) & Shooting(x) -> -CanBlockShooting(michael, x)))\nTEXT: Michael cannot block"
   ],
   [
    "<PREMISES>\n<evaluate>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(y, x) & Taller(x, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) & -Jump(x, shooting) -> CanBlockShooting(michael, x))\nTEXT: Michael",
    "<PREMISES>\n<_EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, _)\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & -Jump(michael) -> CanBlockShooting(michael, _)\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\n",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, everyone)\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (x tallerThan(y) & y tallerThan(z) -> x tallerThan(z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & -CanJump(michael) & CanBlockShooting(michael, x)\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT: Every shooter who can jump when shooting is a great shooter.\nFOL: all x. (",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, x) for all x\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (x taller than y & y taller than z -> x taller than z)\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & -CanJump(michael, shooting) -> CanBlockShooting(michael, shooting)\nTEXT: Michael cannot block Windy's shooting.\nFOL: Man(michael) & Man(windy) & CanBlockShooting(michael, windy) & -CanJump(michael,",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, all x. Man(x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) -> CanBlockShooting(michael, x) -> -Jump(x, shooting)\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT:"
   ],
   [
    "<PREMISES>\n<TEXT>If a man is taller than another man, the taller one can block the other's shooting.</TEXT>\n<FOL>All x y. (Man(x) & Man(y) & Taller(x, y) -> BlockShooting(x, y))\n<TEXT>Michael is a man who is taller than everyone else in his class.</TEXT>\n<FOL>Man(michael) & Taller(michael, all x. Man(x) & x inClass(michael))\n<TEXT>If person x is taller than person y, and person y is taller than person z, then x is taller than z</TEXT>\n<FOL>all x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\n<TEXT>Peter is a man who is taller than Michael.</TEXT>\n<FOL>Man(peter) & Taller(peter, michael)\n<TEXT>Michael can block any shooting from a person as long as the person does not jump when shooting.</TEXT>\n<FOL>Man(michael) & BlockShooting(michael, x) & -JumpWhenShooting(x) & x is Shooter(x)\n<TEXT>Michael cannot block Windy's shooting.</",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(x, michael))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (x tallerThan(y) & y tallerThan(z) -> x tallerThan(z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) -> -JumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, Windy",
    "<PREMISES>\n<PREMISE>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\n</PREMISE>\n\n<PREMISE>\nMichael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, everything)\n</PREMISE>\n\n<PREMISE>\nIf person x is taller than person y, and person y is taller than person z, then x is taller than z.\nFOL: all x y z. (x tallerThan(y) & y tallerThan(z) -> x tallerThan(z))\n</PREMISE>\n\n<PREMISE>\nPeter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\n</PREMISE>\n\n<PREMISE>\nMichael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: CanBlockShooting(michael, x) -> -Jump(x, shooting)\n</PREMISE>\n\n<PREMISE>\nMichael cannot",
    "<PREMISES>\n<TEXT>If a man is taller than another man, the taller one can block the other's shooting.</TEXT>\n<FOL>(Taller(x, y) -> CanBlockShooting(x, y))\n<TEXT>Michael is a man who is taller than everyone else in his class.</TEXT>\n<FOL>Michael(Taller(x, michael) -> x = everyoneElse(x, michael))\n<TEXT>If person x is taller than person y, and person y is taller than person z, then x is taller than z.</TEXT>\n<FOL>All x y z. (Taller(x, y) & Taller(y, z) -> Taller(x, z))\n<TEXT>Peter is a man who is taller than Michael.</TEXT>\n<FOL>Peter(Taller(x, michael) -> x = peter)\n<TEXT>Michael can block any shooting from a person as long as the person does not jump when shooting.</TEXT>\n<FOL>Michael(CanBlockShooting(x, y) -> -Jumping(x, y))\n<TEXT>Michael cannot block Windy's shooting.</TEXT>\n<FOL>-Michael(CanBlockShooting(windy, x))\n<TEXT>Every shooter who can jump when shooting is",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(y, z) & Taller(x, y) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) -> (Jumping(x) -> -CanBlockShooting(michael, x)))\nTEXT: Michael cannot block Windy's"
   ],
   [
    "<PREMISES>\n<TEXT>If a man is taller than another man, the taller one can block the other's shooting.</TEXT>\n<FOL>all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\n<TEXT>Michael is a man who is taller than everyone else in his class.</TEXT>\n<FOL>Man(michael) & all x. (Man(x) -> Taller(michael, x))\n<TEXT>If person x is taller than person y, and person y is taller than person z, then x is taller than z.</TEXT>\n<FOL>all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\n<TEXT>Peter is a man who is taller than Michael.</TEXT>\n<FOL>Man(peter) & Man(michael) & Taller(peter, michael)\n<TEXT>Michael can block any shooting from a person as long as the person does not jump when shooting.</TEXT>\n<FOL>all x. (Man(x) -> CanBlockShooting(x, x, false))\n<TEXT>",
    "<PREMISES>\n<TEXT>If a man is taller than another man, the taller one can block the other's shooting.</TEXT>\n<FOL>all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\n<TEXT>Michael is a man who is taller than everyone else in his class.</TEXT>\n<FOL>Man(michael) & all x. (Man(x) -> Taller(michael, x))\n<TEXT>If person x is taller than person y, and person y is taller than person z, then x is taller than z</TEXT>\n<FOL>all x y z. (x y z & Taller(x, y) & Taller(y, z) -> Taller(x, z))\n<TEXT>Peter is a man who is taller than Michael.</TEXT>\n<FOL>Man(peter) & Man(michael) & Taller(peter, michael)\n<TEXT>Michael can block any shooting from a person as long as the person does not jump when shooting.</TEXT>\n<FOL>Man(michael) & all x. (Man(x) & Jump(x, shooting) -> -CanBlockShooting(michael, x",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x y. (Man(x) & Man(y) & -Jump(x, y) & CanBlockShooting(x, y) -> CanBlockShooting(x, y))\n",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Height(x, y) -> BlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Height(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & (Height(x, y) & Height(y, z)) -> Height(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Height(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) & Jump(x, shooting) -> -BlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Block",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(y, z) & Taller(x, y) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) -> (CanJump(x) -> -CanBlockShooting(michael, x)))\nTEXT: Michael cannot block Windy's"
   ]
  ]
 },
 {
  "index": 99,
  "responses": [
   [
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) -> CanBlockShooting(x, y) -> NoJump(y))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(y, z) & Taller(x, y) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) -> CanBlockShooting(x, -Jumping(x)))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x y. (Man(x) & Man(y) & -Jump(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael cannot block Windy's shooting",
    "<PREMISES>\n<TEXT>If a man is taller than another man, the taller one can block the other's shooting.</TEXT>\n<FOL>all x y. (Man(x) & Man(y) & Height(x, y) -> CanBlockShooting(x, y))</FOL>\n<TEXT>Michael is a man who is taller than everyone else in his class.</TEXT>\n<FOL>Man(michael) & all x. (Man(x) -> Height(michael, x))</FOL>\n<TEXT>If person x is taller than person y, and person y is taller than person z, then x is taller than z</TEXT>\n<FOL>all x y z. (Man(x) & Man(y) & Man(z) & Height(x, y) & Height(y, z) -> Height(x, z))</FOL>\n<TEXT>Peter is a man who is taller than Michael.</TEXT>\n<FOL>Man(peter) & Man(michael) & Height(peter, michael)</FOL>\n<TEXT>Michael can block any shooting from a person as long as the person does not jump when shooting.</TEXT>\n<FOL>all x y. (Man(x) & Man(y",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(y, x) & Taller(x, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) -> CanBlockShooting(x, y) -> NoJump(y))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlock"
   ],
   [
    "<PREMISES>\n<TEXT>If a man is taller than another man, the taller one can block the other's shooting.</TEXT>\n<FOL>(Taller(x, y) -> CanBlockShooting(x, y))\n<TEXT>Michael is a man who is taller than everyone else in his class.</TEXT>\n<FOL>Michael(Taller(x, y)) -> x = everyoneElseInClass\n<TEXT>If person x is taller than person y, and person y is taller than person z, then x is taller than z</TEXT>\n<FOL>All x y z. (x Taller(y, z) -> x Taller(z, y))\n<TEXT>Peter is a man who is taller than Michael.</TEXT>\n<FOL>Peter(Taller(x, y)) -> x = Michael\n<TEXT>Michael can block any shooting from a person as long as the person does not jump when shooting.</TEXT>\n<FOL>Michael(x) -> CanBlockShooting(x, y) -> y = NotJumping\n<TEXT>Michael cannot block Windy's shooting.</TEXT>\n<FOL>Michael(x) -> -CanBlockShooting(x, Windy)\n<TEXT>Every shooter who can jump when shooting is a great",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) & -JumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy",
    "<PREMISES>\n<EMAIL>If a man is taller than another man, the taller one can block the other's shooting.</EMAIL>\n<EMAIL>Michael is a man who is taller than everyone else in his class.</EMAIL>\n<EMAIL>If person x is taller than person y, and person y is taller than person z, then x is taller than z</EMAIL>\n<EMAIL>Peter is a man who is taller than Michael.</EMAIL>\n<EMAIL>Michael can block any shooting from a person as long as the person does not jump when shooting.</EMAIL>\n<EMAIL>Michael cannot block Windy's shooting.</EMAIL>\n<EMAIL>Every shooter who can jump when shooting is a great shooter.</EMAIL>\n</PREMISES>\n<CONCLUSION>\n<EMAIL>Windy is a great shooter.</EMAIL>\n</CONCLUSION>\n\n<EVALUATE>\n<EMAIL>If a man is taller than another man, the taller one can block the other's shooting.</EMAIL>\n<EMAIL>FOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))</EMAIL>\n<EMAIL>Michael is a man who is taller than everyone else in his class.</EMAIL",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, everything)\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(y, z) & Taller(x, y) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x y. (Man(x) & Man(y) & NotJumping(y, x) -> CanBlockShooting(x, y))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael,",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x y. (Man(x) & Man(y) & -JumpWhenShooting(y) & CanBlockShooting(x, y))\nTEXT: Michael cannot block Windy's"
   ],
   [
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(y, z) & Taller(x, y) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) & -Jump(x) & CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\n",
    "<PREMISES>\n<TEXT>If a man is taller than another man, the taller one can block the other's shooting.</TEXT>\n<FOL>all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\n<TEXT>Michael is a man who is taller than everyone else in his class.</TEXT>\n<FOL>Man(michael) & all x. (Man(x) -> Taller(michael, x))\n<TEXT>If person x is taller than person y, and person y is taller than person z, then x is taller than z</TEXT>\n<FOL>all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\n<TEXT>Peter is a man who is taller than Michael.</TEXT>\n<FOL>Man(peter) & Man(michael) & Taller(peter, michael))\n<TEXT>Michael can block any shooting from a person as long as the person does not jump when shooting.</TEXT>\n<FOL>Man(michael) & all x. (Man(x) -> CanBlockShooting(michael, x",
    "<PREMISES>\n<TEXT>If a man is taller than another man, the taller one can block the other's shooting.</TEXT>\n<FOL>all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\n<TEXT>Michael is a man who is taller than everyone else in his class.</TEXT>\n<FOL>Man(michael) & all x. (Man(x) -> Taller(michael, x))\n<TEXT>If person x is taller than person y, and person y is taller than person z, then x is taller than z</TEXT>\n<FOL>all x y z. (x y z & Taller(x, y) & Taller(y, z) -> Taller(x, z))\n<TEXT>Peter is a man who is taller than Michael.</TEXT>\n<FOL>Man(peter) & Man(michael) & Taller(peter, michael)\n<TEXT>Michael can block any shooting from a person as long as the person does not jump when shooting.</TEXT>\n<FOL>all x. (Man(x) -> CanBlockShooting(x, -Jumping(x)))\n<TEXT>Michael cannot block Windy's",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, all x. Man(x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x y. (Man(x) & Man(y) & -Jump(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, all x. Man(x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) & -Jump(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(m"
   ],
   [
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(y, z) & Taller(x, y) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) -> (Jump(x) -> -CanBlockShooting(michael, x)))\nTEXT: Michael cannot block Windy's shooting",
    "<PREMISES>\n<TEXT>If a man is taller than another man, the taller one can block the other's shooting.</TEXT>\n<FOL>all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\n<TEXT>Michael is a man who is taller than everyone else in his class.</TEXT>\n<FOL>Man(michael) & all x. (Man(x) -> Taller(michael, x))\n<TEXT>If person x is taller than person y, and person y is taller than person z, then x is taller than z</TEXT>\n<FOL>all x y z. (x y z & Taller(x, y) & Taller(y, z) -> Taller(x, z))\n<TEXT>Peter is a man who is taller than Michael.</TEXT>\n<FOL>Man(peter) & Man(michael) & Taller(peter, michael)\n<TEXT>Michael can block any shooting from a person as long as the person does not jump when shooting.</TEXT>\n<FOL>all x y. (x y & Jump(x, y) -> -CanBlockShooting(x, y)) & CanBlockShooting",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Height(x, y) -> BlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Height(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Height(y, x) & Height(x, z) -> Height(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Height(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) -> BlockShooting(x, any))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting(michael, Windy)\nTEXT: Every shooter who can",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(y, z) & Taller(x, y) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (CanBlockShooting(michael, x) -> -Jump(x, michael))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockSh",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(y, z) & Taller(x, y) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) -> (-Jumping(x) -> CanBlockShooting(michael, x)))\nTEXT: Michael cannot block Windy's shooting"
   ],
   [
    "<PREMISES>\n<TEXT>If a man is taller than another man, the taller one can block the other's shooting.</TEXT>\n<FOL>all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\n<TEXT>Michael is a man who is taller than everyone else in his class.</TEXT>\n<FOL>Man(michael) & Taller(michael, x) -> x!= michael &forall x. (Man(x) & Taller(x, michael) -> x!= michael)\n<TEXT>If person x is taller than person y, and person y is taller than person z, then x is taller than z</TEXT>\n<FOL>all x y z. (x!= y & x!= z & Taller(y, z) & Taller(x, y) -> Taller(x, z))\n<TEXT>Peter is a man who is taller than Michael.</TEXT>\n<FOL>Man(peter) & Taller(peter, michael)\n<TEXT>Michael can block any shooting from a person as long as the person does not jump when shooting.</TEXT>\n<FOL>all x y. (x!= y & CanBlockShooting",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) -> CanBlockShooting(michael, x) & -Jump(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, all x. Man(x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & -Jump(michael) -> CanBlockShooting(michael, x)\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, Windy)\nTEXT:",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, all x. Man(x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (x y & y z & x > y & x > z)\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) -> CanBlockShooting(michael, x) & -Jump(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, Windy)\nTEXT: Every",
    "<PREMISES>\n<TEXT>If a man is taller than another man, the taller one can block the other's shooting.</TEXT>\n<FOL>all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\n<TEXT>Michael is a man who is taller than everyone else in his class.</TEXT>\n<FOL>Man(michael) & Taller(michael, all x. Man(x))\n<TEXT>If person x is taller than person y, and person y is taller than person z, then x is taller than z</TEXT>\n<FOL>all x y z. (x y z & Taller(x, y) & Taller(y, z) -> Taller(x, z))\n<TEXT>Peter is a man who is taller than Michael.</TEXT>\n<FOL>Man(peter) & Taller(peter, michael)\n<TEXT>Michael can block any shooting from a person as long as the person does not jump when shooting.</TEXT>\n<FOL>Man(michael) & all x. (Man(x) -> -JumpWhenShooting(x) -> CanBlockShooting(michael, x))\n<TEXT>Michael cannot block Windy"
   ]
  ]
 },
 {
  "index": 100,
  "responses": [
   [
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, everything)\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) -> CanBlockShooting(michael, everything, -Jumping)\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, Windy)\nTEXT: Every shooter who can jump when",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(y, z) & Taller(x, y) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) -> (-Jumping(x) -> CanBlockShooting(michael, x)))\nTEXT: Michael cannot block Windy's shooting",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, all x. (Man(x) -> -Taller(x, michael)))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & CanBlockShooting(michael, all x. (Man(x) & -Jump(x) -> Shooting(x)))\nTEXT: Michael cannot",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(y, x) & Taller(x, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) -> (-Jump(x) -> CanBlockShooting(michael, x)))\nTEXT: Michael cannot block Windy's shooting.\n",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x y. (Man(x) & Man(y) & -Jump(x, y) & CanBlockShooting(x, y) -> CanBlockShooting(x, y,"
   ],
   [
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Height(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Height(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Height(x, y) & Height(y, z) -> Height(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Height(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) -> (Jump(x) & -Shooting(x) -> -BlockShooting(michael, x)))\nTEXT: Michael cannot block Windy's shooting.\n",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) -> (Jump(x, shooting) -> -CanBlockShooting(michael, x)))\nTEXT: Michael cannot block Windy",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, x) for all x\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (x y & y z & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & -Jump(michael) & CanBlockShooting(michael, x) -> NoJump(x)\nTEXT: Michael cannot block Windy's shooting.\nFOL: Man(michael) & -Jump(michael) & CanBlockShooting(michael, windy)\nTEXT",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) & -Jump(x) & Shooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Wind",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x y. (Man(x) & Man(y) & CanBlockShooting(x, y) -> CanBlockShooting(x, y) & NoJump(y))\nTEXT:"
   ],
   [
    "<PREMISES>\n<CONCLUSION>\n</PREMISES>\n<CONCLUSION>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) & NotJumping(x, y) -> CanBlock",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) -> (CanJump(x) -> -CanBlockShooting(michael, x)))\nTEXT: Michael cannot block Windy's",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Height(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Height(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & (Height(x, y) & Height(y, z)) -> Height(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Height(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) -> (Jump(x) -> -CanBlockShooting(michael, x)))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(y, z) & Taller(x, y) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) -> CanBlockShooting(michael, x) & -Jump(x, michael))\nTEXT: Michael cannot block Windy's",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Height(x, y) -> BlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Height(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & (Height(x, y) & Height(y, z)) -> Height(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Height(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) & -Jump(x) -> BlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -BlockShooting"
   ],
   [
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(y, z) & Taller(x, y) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) & -JumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy",
    "<PREMISES>\n<TEXT>If a man is taller than another man, the taller one can block the other's shooting.</TEXT>\n<FOL>all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\n<TEXT>Michael is a man who is taller than everyone else in his class.</TEXT>\n<FOL>Man(michael) & Man(x). (x!= michael & Taller(michael, x))\n<TEXT>If person x is taller than person y, and person y is taller than person z, then x is taller than z</TEXT>\n<FOL>all x y z. (x!= y & x!= z & Taller(y, z) & Taller(x, y) -> Taller(x, z))\n<TEXT>Peter is a man who is taller than Michael.</TEXT>\n<FOL>Man(peter) & Man(michael) & Taller(peter, michael)\n<TEXT>Michael can block any shooting from a person as long as the person does not jump when shooting.</TEXT>\n<FOL>Man(michael) & CanBlockShooting(michael, x). (x!= michael & -Jump(x, michael))\n",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(y, z) & Taller(x, y) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) -> (Jump(x) -> -CanBlockShooting(michael, x)))\nTEXT: Michael cannot block Windy's shooting",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, all x. Man(x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) -> CanBlockShooting(michael, x) | -JumpWhenShooting(x)\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting(michael, windy)\nTEXT",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, all x. Man(x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & -Jump(michael) & all x. (Man(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting"
   ],
   [
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, all x. Man(x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & -Jump(michael) & all x. (Man(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -CanBlockShooting",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Height(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Height(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. ((Man(x) & Man(y) & Man(z) & Height(x, y) & Height(y, z)) -> Height(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Height(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) -> (Jump(x) -> -CanBlockShooting(michael, x)))\nTEXT: Michael cannot block Windy's shooting.\nFOL: -Can",
    "<PREMISES>\n<_EVALUATE>\nTEXT: If a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & Taller(michael, everyoneInClass(michael))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x. (Man(x) & -CanJumpWhenShooting(x) -> CanBlockShooting(michael, x))\nTEXT: Michael cannot block Windy's shooting.\nFOL:",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: all x y. (Man(x) & Man(y) & -Jump(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael cannot block Windy's shooting",
    "<PREMISES>\nIf a man is taller than another man, the taller one can block the other's shooting.\nFOL: all x y. (Man(x) & Man(y) & Taller(x, y) -> CanBlockShooting(x, y))\nTEXT: Michael is a man who is taller than everyone else in his class.\nFOL: Man(michael) & all x. (Man(x) -> Taller(michael, x))\nTEXT: If person x is taller than person y, and person y is taller than person z, then x is taller than z\nFOL: all x y z. (Man(x) & Man(y) & Man(z) & Taller(x, y) & Taller(y, z) -> Taller(x, z))\nTEXT: Peter is a man who is taller than Michael.\nFOL: Man(peter) & Man(michael) & Taller(peter, michael)\nTEXT: Michael can block any shooting from a person as long as the person does not jump when shooting.\nFOL: Man(michael) & all x. (Man(x) -> (CanBlockShooting(michael, x) -> -Jump(x, michael)))\nTEXT: Michael cannot block Windy"
   ]
  ]
 },
 {
  "index": 101,
  "responses": [
   [
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) :- Barutin(x).\nBarutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) :- SnowIsland(x).\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(x) :- Member(x, [SnowIsland, GreenwichIsland, DeceptionIsland]).\nThe South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland(x) :- Antarctica(x).\nIf A is located in B and B is located in C, then A is located in C.\nFOL: (LocatedIn(A, B) & LocatedIn(B, C)) :- LocatedIn(A, C).\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\nFOL: Barutin(x) :- Member(x, SouthShetland).\n</CONCLUSION>",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(NamedAfter(Barutin))\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(SnowIsland & GreenwichIsland & DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) <- Barutin(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) <- Location(x, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SnowIsland(x) <- SouthShetlandIsland(x)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIsland(x) <- Antarctica\nTEXT: If A is located in B and B is located in C, then A is located in C",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) :- BulgarianSettlement(x), x = Barutin.\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) :- Coast(x, southwest), x = SnowIsland.\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) :- Member(x, [SnowIsland, GreenwichIsland, DeceptionIsland]).\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(x) :- Part",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove namedAfterBarutin\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove onSouthwestCoastOfSnowIsland\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands includeSnowIsland & GreenwichIsland & DeceptionIsland\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands partOfAntarctica\nTEXT: If A is located in B and B is located in C, then"
   ],
   [
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) <- Barutin(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) <- Location(x, SouthwestCoast, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Location(x, SouthShetlandIslands, SnowIsland) | Location(x, SouthShetlandIslands, GreenwichIsland) | Location(x, SouthShetlandIslands, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\n",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedBarutinCove(Barutin)\nBarutin Cove is on the southwest coast of Snow Island.\nFOL: OnCoastBarutinCove(SnowIsland)\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: IncludedInSouthShetland(SnowIsland, GreenwichIsland, DeceptionIsland)\nThe South Shetland Islands are considered part of Antarctica.\nFOL: PartOfAntarctica(SouthShetland)\nIf A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\nFOL: all x. (LocatedIn(x, SouthShetland) -> NamedBarutin(x))\n</CONCLUSION>",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove -> NamedAfter(Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove -> OnCoast(SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland -> Includes(SnowIsland & GreenwichIsland & DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland -> PartOfAntarctica\nTEXT: If A is located in B and B is located in C, then",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedBarutinCove(Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: OnCoast(SnowIsland, BarutinCove)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Inclusion(SouthShetlandIslands, [SnowIsland, GreenwichIsland, DeceptionIsland])\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOfAntarctica(SouthShetlandIslands)\nTEXT: If A is located in B and B is located",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove namedAfter Barutin\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove on Coast(SnowIsland) & on Southwest\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland Islands include SnowIsland & GreenwichIsland & DeceptionIsland\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands partOf Antarctica\nTEXT: If A is located in B and B is located in C, then A is"
   ],
   [
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(Cove, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: OnCoast(Cove, SnowIsland, Southwest)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Member(SouthShetlandIslands, SnowIsland) & Member(SouthShetlandIslands, GreenwichIsland) & Member(SouthShetlandIslands, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(Antarctica, SouthSh",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) <-Barutin(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) <-SouthwestCoast(x) & SnowIsland(x)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(x) <- (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland(x) <- Antarctica(x)\nTEXT: If A is",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove namedAfter Barutin\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove locatedOn SnowIsland\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands includes SnowIsland & GreenwichIsland & DeceptionIsland\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands partOf Antarctica\nTEXT: If A is located in B and B is located in C, then A is located in C.\n",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) <-NamedAfter(x, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) <-Coast(x, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(x) <-Includes(x, SnowIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland(x) <-PartOf(x, Antarctica)\nTEXT: If A is located in B and B is located in C,",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedBarutinCove(Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: CoastOf(SnowIsland, BarutinCove)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: InclusionOf(SouthShetlandIslands, {SnowIsland, GreenwichIsland, DeceptionIsland})\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(Antarctica, SouthShetlandIslands)\nTEXT: If A is located in B and B is"
   ],
   [
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) :- Barutin(x).\nBarutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) :- SnowIsland(x).\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) :- SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x).\nThe South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(x) :- Antarctica(x).\nIf A is located in B and B is located in C, then A is located in C.\nFOL: (Located(A, B) & Located(B, C) -> Located(A, C)).\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\nFOL: Barutin(x) :- SouthShetlandIslands(x) & Antarctica(x).\n</CONCLUSION>",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) <- NamedAfter(x, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) <- LocatedOn(x, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(x) <- Includes(x, SnowIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland(x) <- PartOfAntarctica(x)\nTEXT: If A is located in B and B is located in C",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedBarutinCove(Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedInCoast(Cove, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: MemberOfIslands(SnowIsland, GreenwichIsland, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: MemberOfAntarctica(SouthShetlandIslands)\nTEXT: If A is located in B and B is located in C, then A is located in",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) <- Barutin(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) <- Location(x, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(x) <- (Location(x, SnowIsland) & Location(x, GreenwichIsland) & Location(x, DeceptionIsland))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland(x) <- Antarctica(x)\nTEXT: If A",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedBarutinCove(Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocationOfBarutinCove(SnowIsland, southwest)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: MemberOfSouthShetland(SnowIsland, GreenwichIsland, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: PartOfAntarctica(SouthShetland)\nTEXT: If A is located in B and B is located in C, then A is"
   ],
   [
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) <-Barutin(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) <-OnCoast(x, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(x) <- Includes(x, SnowIsland, GreenwichIsland, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland(x) <- PartOfAntarctica(x)\nTEXT: If A is located in",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) <- NamedAfter(x, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) <- Coast(x, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(x) <- Includes(x, SnowIsland) & Includes(x, GreenwichIsland) & Includes(x, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland(x) <- PartOf(x, Antarctica",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) <- NamedAfter(x, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) <- OnCoast(x, Southwest, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(x) <- Includes(x, SnowIsland, GreenwichIsland, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland(x) <- PartOfAntarctica(x)\nTEXT:",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedBarutinCove(Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: LocationBarutinCove(SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: MemberOfSouthShetland(SnowIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: MemberOfAntarctica(SouthShetland)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(Cove, Barutin)\nBarutin Cove is on the southwest coast of Snow Island.\nFOL: CoastOf(Cove, SnowIsland, southwest)\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Inclusion(SouthShetlandIslands, SnowIsland, GreenwichIsland, DeceptionIsland)\nThe South Shetland Islands are considered part of Antarctica.\nFOL: PartOf(SouthShetlandIslands, Antarctica)\nIf A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\n</PREMISES>\n<CONCLUSION>\nBarutin is named after all islands in Antarctica.\nFOL: NamedAfter(Barutin, SouthShetlandIslands)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 102,
  "responses": [
   [
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> BulgarianSettlement(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> OnSouthwestCoast(x) & OnCoast(x) & IsIsland(x) & IsSnowIsland(x)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) -> (IsIsland(x) & IsSnowIsland(x)) | (IsIsland(x) & IsGreenwichIsland(x))",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> BulgarianSettlement(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> Coast(x, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) -> In(x, SnowIsland & GreenwichIsland & DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(x) -> PartOfAntarctica",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> Barutin(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> Location(x, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: Location(x, SouthShetlandIslands) -> (Location(x, SnowIsland) | Location(x, GreenwichIsland) | Location(x, DeceptionIsland))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: Location(x, South",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> BulgarianSettlement(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> OnCoast(x) & Coast(x) -> SnowIsland\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) -> Includes(x) & Includes(x) -> SnowIsland & Includes(x) -> GreenwichIsland & Includes(x) -> DeceptionIsland\nTEXT: The South Shetland Islands are considered part",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> Barutin(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> LocationOnCoast(x, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(x) -> Inclusion(x, SnowIsland, GreenwichIsland, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland(x) -> PartOfAntarctica(x)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocationIn(x, y) & LocationIn(y, z) -> LocationIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (Antarctica(x) & Barutin(x) & BarutinCove(x))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> BulgarianSettlement(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> Location(x, SnowIsland, southwest)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(x) -> (Location(x, SnowIsland) | Location(x, GreenwichIsland) | Location(x, DeceptionIsland))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland(x",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) <-BulgarianSettlement(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) <-Coast(x) & SnowIsland(x)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) <-Includes(x) & (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthSh",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> BulgarianSettlement(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> OnCoast(x) & Coast(x) = SnowIsland\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) -> Include(x, SnowIsland) & Include(x, GreenwichIsland) & Include(x, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) :- namedAfter(x, Barutin).\nBarutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) :- location(x, southwestCoastOf(SnowIsland)).\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) :- includes(x, SnowIsland), includes(x, GreenwichIsland), includes(x, DeceptionIsland).\nThe South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(x) :- partOf(x, Antarctica).\nIf A is located in B and B is located in C, then A is located in C.\nFOL: locatedIn(x, y, z) :- locationIn(x, y, z).\n</PREMISES>\n<CONCLUSION>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (namedAfter(x, Barutin) & location(x, Antarctica))\n</CONCLUSION>",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> Barutin(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> Location(x, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(x) -> (Location(x, SnowIsland) | Location(x, GreenwichIsland) | Location(x, DeceptionIsland))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland(x) -> Antarctica"
   ],
   [
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> NamedAfter(Barutin(x))\nBarutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> OnCoast(x, SnowIsland)\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(x) -> Includes(x, SnowIsland) & Includes(x, GreenwichIsland) & Includes(x, DeceptionIsland)\nThe South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland(x) -> PartOfAntarctica(x)\nIf A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. ((LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z))\n</PREMISES>\n<CONCLUSION>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (PartOfAntarctica(x) & NamedAfter(Barutin(x)))\n</EVALUATE>",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> Bulgaria(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> Coast(x) & Coast(x) & SouthWest(x)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(x) -> (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland(x) -> Antarctica(x)\n",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(namedAfter(Barutin))\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(coastOf(SnowIsland, southwest))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(include(SnowIsland, GreenwichIsland, DeceptionIsland))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(partOf(Antarctica))\nTEXT: If A is located",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) :- BulgarianSettlement(x) & Barutin(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) :- Coast(x) & SnowIsland(x) & Southwest(x)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) :- Island(x) & (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x))\nTEXT: The South Shetland Islands are considered part of Antarctica",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(X) :- BulgarianSettlement(X, Barutin).\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(X) :- Coast(X, SnowIsland, Southwest).\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(X) :- Member(X, [SnowIsland, GreenwichIsland, DeceptionIsland]).\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland(X) :- PartOf(X"
   ],
   [
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) <- BulgarianSettlement(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) <- SouthwestCoast(x) & SnowIsland(x)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) <- (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(x",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfterBarutinCove(Bulgaria)\nBarutin Cove is on the southwest coast of Snow Island.\nFOL: LocatedOnCoastOfBarutinCove(SnowIsland, southwest)\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: IncludedInSouthShetlandIslands(SnowIsland & GreenwichIsland & DeceptionIsland)\nThe South Shetland Islands are considered part of Antarctica.\nFOL: PartOfAntarctica(SouthShetlandIslands)\nIf A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\n</PREMISES>\n<CONCLUSION>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (LocatedIn(x, Antarctica) & NamedAfter(x, Bulgaria))\n</CONCLUSION>",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) <- BulgarianSettlement(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) <- SouthwestCoast(x) & SnowIsland(y) & x = y\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(z) <- SnowIsland(y) & GreenwichIsland(w) & DeceptionIsland(v) & z = y & z = w & z = v\nTEXT: The South Shetland",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) <- NamedAfter(BulgarianSettlement(x), x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) <- OnCoast(SnowIsland, x)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) <- Includes(SnowIsland, GreenwichIsland, DeceptionIsland, x)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> BulgarianSettlement(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> OnCoast(x) & OnCoast(x) & CoastSouthwest(x)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) -> Includes(x) & Includes(x) & Includes(x)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(x) ->"
   ],
   [
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(X) :- BulgarianSettlement(X), Barutin(X).\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(X) :- SnowIsland(X), SouthwestCoast(X).\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(X) :- Include(X, SnowIsland), Include(X, GreenwichIsland), Include(X, DeceptionIsland).\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShet",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> BulgarianSettlement(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> OnCoast(x) & OnCoast(x) = SnowIsland\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(x) -> In(x, SnowIsland) & In(x, GreenwichIsland) & In(x, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(namedAfter(Barutin))\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(coastOf(SnowIsland, southwest))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIncludes(SnowIsland, GreenwichIsland, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIsAntarctica\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (Antarctica(x) & NamedAfter(x, Bulgaria) & x cove)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(namedAfter(Barutin))\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(locationSouthwestCoast(SnowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(include(SnowIsland & GreenwichIsland & DeceptionIsland))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(partOfAntarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (Located(x, y) & Located(y, z) -> Located(x, z))\nTEXT: There is at least one cove in Antarctica named after a place in Bulgaria.\nFOL: exists x. (Location(x, Antarctica) & NamedAfter(x, Bulgaria))\n</EVALUATE>",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nThe South Shetland Islands are considered part of Antarctica.\nIf A is located in B and B is located in C, then A is located in C.\n</PREMISES>\n<CONCLUSION>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(X) :- BulgarianSettlement(X, Barutin).\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(X) :- Coast(X, SnowIsland).\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: ShetlandIslands(X) :- Include(X, SnowIsland, GreenwichIsland, DeceptionIsland).\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: ShetlandIslands(X) :- PartOf(X,"
   ]
  ]
 },
 {
  "index": 103,
  "responses": [
   [
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) <-NamedAfter(Barutin, x)\nBarutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) <-LocatedOn(SnowIsland, x)\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(x) <-Includes(SnowIsland, GreenwichIsland, DeceptionIsland, x)\nThe South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland(x) <-PartOfAntarctica(x)\nIf A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\n</PREMISES>\n<CONCLUSION>\nBarutin is not located in Antarctica.\nFOL: Barutin <-LocatedIn(Barutin, Antarctica)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) <- NamedAfter(Barutin, x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) <- LocatedOn(SnowIsland, x)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(x) <- Includes(SnowIsland, GreenwichIsland, DeceptionIsland, x)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland(x) <- PartOfAntarctica(x)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -PartOfAntarctica(Barutin)\n</EVALUATE>",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) <-NamedAfter(BulgarianSettlement(x), Barutin)\nBarutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) <-LocatedOn(SnowIsland(x), SouthwestCoast(x))\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) <-Includes(SnowIsland(x), GreenwichIsland(x), DeceptionIsland(x))\nThe South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(x) <-PartOf(Antarctica(x))\nIf A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\n</PREMISES>\n<CONCLUSION>\nBarutin is not located in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x)",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> Barutin(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> Location(x, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(x) -> (Location(x, SnowIsland) | Location(x, GreenwichIsland) | Location(x, DeceptionIsland))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland(x) -> PartOfAntarctica(x)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (Location(x, y) & Location(y, z) -> Location(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -PartOfAntarctica(Barutin)\n</EVALUATE>",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(isNamedAfter(Barutin))\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(isLocatedOn(SnowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands includes(SnowIsland & GreenwichIsland & DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands isPartOfAntarctica\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. ((LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z))\n</PREMISES>\n<CONCLUSION>\nBarutin is not located in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(isNamedAfter(Barutin))\nTEXT: Barutin Cove is on the southwest coast of Snow Island"
   ],
   [
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) :- Barutin(x).\nBarutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) :- SnowIsland(x).\nBarutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) :- SnowIsland(x).\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(x) :- Member(x, [SnowIsland, GreenwichIsland, DeceptionIsland]).\nThe South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland(x) :- Antarctica(x).\nIf A is located in B and B is located in C, then A is located in C.\nFOL: (Member(A, B) & Member(B, C)) :- Member(A, C).\n</PREMISES>\n<CONCLUSION>\nBarutin is not located in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) :- Barutin(x).\nTEXT:",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) <- NamedAfter(BulgarianSettlement(x), Barutin)\nBarutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) <- LocatedOn(Coast(x), SnowIsland)\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) <- Includes(SnowIsland, GreenwichIsland, DeceptionIsland)\nThe South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(x) <- PartOf(Antarctica(x))\nIf A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\n</PREMISES>\n<CONCLUSION>\nBarutin is not located in Antarctica.\nFOL: ~LocatedIn(Barutin, Antarctica)\n</CONCLUSION>",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) <-NamedAfter(Bulgaria(x), Barutin(x))\nBarutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) <-OnCoast(SnowIsland(x), Southwest(x))\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) <-Includes(SnowIsland(x), GreenwichIsland(x), DeceptionIsland(x))\nThe South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(x) <-PartOfAntarctica(x)\nIf A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. ((Located(x, y) & Located(y, z)) -> Located(x, z))\n</PREMISES>\n<CONCLUSION>\nBarutin is not located in Antarctica.\nFOL: -Located(Barutin, Antarctica)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> Barutin(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> CoastOf(x, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(x) -> (Includes(x, SnowIsland) & Includes(x, GreenwichIsland) & Includes(x, DeceptionIsland))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland(x) -> PartOf(x, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: (LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z)\nTEXT: Barutin is not located in Antarctica.\nFOL: -PartOf(Barutin, Antarctica)\n</EVALUATE>",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> Barutin(x)\nBarutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> SnowIslandCoast(x)\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) -> (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x))\nThe South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(x) -> Antarctica(x)\nIf A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\n</PREMISES>\n<CONCLUSION>\nBarutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Antarctica)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove namedAfter Barutin.\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove locatedOn southwestCoastOf SnowIsland.\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands includes SnowIsland, GreenwichIsland, and DeceptionIsland.\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands consideredPartOf Antarctica.\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (locatedIn(x, y) & locatedIn(y, z) -> locatedIn(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -locatedIn Barutin Antarctica\n</PREMISES>\n\n<CONCLUSION>\nBarutin is not located in Antarctica.\nFOL: -locatedIn Barutin Antarctica\n</CONCLUSION>",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: NamedAfter(BarutinCove, Barutin)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: OnCoast(BarutinCove, southwestCoastOf(SnowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: IncludedIn(SouthShetlandIslands, SnowIsland, GreenwichIsland, DeceptionIsland)\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: ConsideredPartOf(SouthShetlandIslands, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\n</PREMISES>\n<CONCLUSION>\nBarutin is not located in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin is named after the Bulgarian settlement of Barutin.\nFOL: Barutin = BulgarianSettlement(Barutin)\nTEXT: Barutin Cove is",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> Barutin(x)\nBarutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> Location(x, SnowIsland)\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(x) -> (Location(x, SnowIsland) & Location(x, GreenwichIsland) & Location(x, DeceptionIsland))\nThe South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland(x) -> Antarctica(x)\nIf A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (Location(x, y) & Location(y, z) -> Location(x, z))\n</PREMISES>\n<CONCLUSION>\nBarutin is not located in Antarctica.\nFOL: -Antarctica(Barutin)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> Barutin(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> Location(x, SnowIsland)\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) -> (Location(x, SnowIsland) & Location(x, GreenwichIsland) & Location(x, DeceptionIsland))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(x) -> Location(x, Antarctica)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (Location(x, y) & Location(y, z) -> Location(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -Location(Barutin, Antarctica)\n</EVALUATE>",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove namedAfter Barutin.\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove locatedOn SnowIsland.\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands includes SnowIsland & GreenwichIsland & DeceptionIsland.\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands consideredPartOf Antarctica.\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\n</PREMISES>\n<CONCLUSION>\nBarutin is not located in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove namedAfter Barutin.\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove locatedOn"
   ],
   [
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) :- namedAfter(x, Barutin, BulgarianSettlement).\nBarutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) :- onCoast(x, southwest, SnowIsland).\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) :- includes(x, SnowIsland, GreenwichIsland, DeceptionIsland).\nThe South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(x) :- partOf(x, Antarctica).\nIf A is located in B and B is located in C, then A is located in C.\nFOL: locatedIn(x, A, B) :- locatedIn(B, C) :- locatedIn(A, C).\n</PREMISES>\n<CONCLUSION>\nBarutin is not located in Antarctica.\nFOL: -locatedIn(Barutin, Antarctica).\n</CONCLUSION>",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove namedAfter Barutin\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove on SouthwestCoastOfSnowIsland\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands includes SnowIsland & GreenwichIsland & DeceptionIsland\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands partOf Antarctica\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. ((LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z))\n</PREMISES>\n<CONCLUSION>\nBarutin is not located in Antarctica.\nFOL: -LocatedIn(barutin, Antarctica)\n</CONCLUSION>",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) <-NamedAfter(Barutin, x)\nBarutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) <-LocatedOn(SnowIsland, x)\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(x) <-Includes(SnowIsland, GreenwichIsland, DeceptionIsland, x)\nThe South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland(x) <-PartOfAntarctica(x)\nIf A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\n</PREMISES>\n<CONCLUSION>\nBarutin is not located in Antarctica.\nFOL: -LocatedIn(Barutin, Antarctica)\n</CONCLUSION>",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove namedAfter Barutin\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove locatedOn SouthwestCoastOf SnowIsland\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands includes SnowIsland GreenwichIsland DeceptionIsland\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands partOf Antarctica\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\n</PREMISES>\n<CONCLUSION>\nBarutin is not located in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove namedAfter Barutin\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) <-NamedAfter(BulgarianSettlement(x), Barutin)\nBarutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) <-LocatedOn(SouthwestCoast(x), SnowIsland(x))\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) <-Includes(SnowIsland(x), GreenwichIsland(x), DeceptionIsland(x))\nThe South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(x) <-PartOfAntarctica(x)\nIf A is located in B and B is located in C, then A is located in C.\nFOL: all x y. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\n</PREMISES>\n<CONCLUSION>\nBarutin is not located in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) <-"
   ],
   [
    "<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> Barutin(x)\nTEXT: Barutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> Location(x, southwestCoastOf(SnowIsland))\nTEXT: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) -> (Location(x, SnowIsland) | Location(x, GreenwichIsland) | Location(x, DeceptionIsland))\nTEXT: The South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(x) -> PartOfAntarctica(x)\nTEXT: If A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (Location(x, y) & Location(y, z) -> Location(x, z))\nTEXT: Barutin is not located in Antarctica.\nFOL: -PartOfAntarctica(Barutin)\n</EVALUATE>",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) <-namedAfter(x, Barutin)\nBarutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) <-locatedOn(x, SouthwestCoastOf(SnowIsland))\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(x) <-includes(x, SnowIsland)\nThe South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland(x) <-partOf(x, Antarctica)\nIf A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. ((locatedIn(x, y) & locatedIn(y, z)) -> locatedIn(x, z))\n</PREMISES>\n<CONCLUSION>\nBarutin is not located in Antarctica.\nFOL: -locatedIn(Barutin, Antarctica)\n</CONCLUSION>",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> Barutin(x)\nBarutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> OnSouthwestCoastOf(x)\nBarutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> OnSouthwestCoastOf(SnowIsland)\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) -> (Includes(SnowIsland) & Includes(GreenwichIsland) & Includes(DeceptionIsland))\nThe South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(x) -> PartOfAntarctica(x)\nIf A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. ((LocatedIn(x, y) & LocatedIn(y, z)) -> LocatedIn(x, z))\n</PREMISES>\n<CONCLUSION>\nBarutin is not located in Antarctica.\nFOL: -PartOfAntarctica",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> Barutin(x)\nBarutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) -> OnSouthwestCoast(x) & SnowIsland(x)\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetlandIslands(x) -> (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x))\nThe South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetlandIslands(x) -> PartOfAntarctica(x)\nIf A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. (LocatedIn(x, y) & LocatedIn(y, z) -> LocatedIn(x, z))\n</PREMISES>\n<CONCLUSION>\nBarutin is not located in Antarctica.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Barutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) -> Barutin(x)\nTEXT: Bar",
    "<PREMISES>\nBarutin Cove is named after the Bulgarian settlement of Barutin.\nFOL: BarutinCove(x) <- NamedAfter(x, Barutin)\nBarutin Cove is on the southwest coast of Snow Island.\nFOL: BarutinCove(x) <- OnCoast(x, SnowIsland)\nThe South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nFOL: SouthShetland(x) <- Includes(x, SnowIsland)\nThe South Shetland Islands are considered part of Antarctica.\nFOL: SouthShetland(x) <- PartOf(x, Antarctica)\nIf A is located in B and B is located in C, then A is located in C.\nFOL: all x y z. ((Located(x, y) & Located(y, z)) -> Located(x, z))\n</PREMISES>\n<CONCLUSION>\nBarutin is not located in Antarctica.\nFOL: -Located(Barutin, Antarctica)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 104,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<PREMISES>\n<TEXT>Some affection is love.</TEXT>\n<TEXT>Some love is positive.</TEXT>\n</PREMISES>\n<CONCLUSION>\n<TEXT>Some affection is positive.</TEXT>\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<PREMISES>\nSome x. Love(x) & Positive(x)\n</PREMISES>\n<CONCLUSION>\nSome x. Affection(x) & Positive(x)\n</CONCLUSION>",
    "<PREMISES>\nSome affection is love.\nSome love is positive.\n</PREMISES>\n<CONCLUSION>\nSome affection is positive.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) -> Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<PREMISES>\nSome affection is love.\nSome love is positive.\n</PREMISES>\n<CONCLUSION>\nSome affection is positive.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nSome x. (Affection(x) & Love(x))\nSome x. (Love(x) & Positive(x))\n</PREMISES>\n<CONCLUSION>\nSome x. (Affection(x) & Positive(x))\n</CONCLUSION>",
    "<PREMISES>\n<TEXT>Some affection is love.</TEXT>\n<FOL>exists x. (Affection(x) & Love(x))\n<TEXT>Some love is positive.</TEXT>\n<FOL>exists x. (Love(x) & Positive(x))\n</PREMISES>\n<CONCLUSION>\n<TEXT>Some affection is positive.</TEXT>\n<FOL>exists x. (Affection(x) & Positive(x))\n</CONCLUSION>",
    "<PREMISES>\nSome x. Love(x) & Positive(x)\n</PREMISES>\n\n<CONCLUSION>\nSome x. Love(x) & Positive(x)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nSome affection is love.\nSome love is positive.\n</PREMISES>\n<CONCLUSION>\nSome affection is positive.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<PREMISES>\nSome affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nSome love is positive.\nFOL: exists x. (Love(x) & Positive(x))\n</PREMISES>\n<CONCLUSION>\nSome affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</CONCLUSION>",
    "<PREMISES>\nSome x. Affection(x) & Love(x)\nSome x. Love(x) & Positive(x)\n</PREMISES>\n<CONCLUSION>\nSome x. Affection(x) & Positive(x)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nSome affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nSome love is positive.\nFOL: exists x. (Love(x) & Positive(x))\n</PREMISES>\n\n<CONCLUSION>\nSome affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</CONCLUSION>",
    "<PREMISES>\nSome affection is love.\nSome love is positive.\n</PREMISES>\n<CONCLUSION>\nSome affection is positive.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) -> Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) -> Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<PREMISES>\nSome x. Love(x) & Positive(x)\n</PREMISES>\n<CONCLUSION>\nSome x. Affection(x) & Positive(x)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<PREMISES>\nSome x. Affection(x) & Love(x)\nSome x. Love(x) & Positive(x)\n</PREMISES>\n<CONCLUSION>\nSome x. Affection(x) & Positive(x)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some affection is love.\nFOL: exists x. (Affection(x) & Love(x))\nTEXT: Some love is positive.\nFOL: exists x. (Love(x) & Positive(x))\nTEXT: Some affection is positive.\nFOL: exists x. (Affection(x) & Positive(x))\n</EVALUATE>",
    "<PREMISES>\nSome x. (Affection(x) & Love(x))\nSome x. (Love(x) & Positive(x))\n</PREMISES>\n<CONCLUSION>\nSome x. (Affection(x) & Positive(x))\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 105,
  "responses": [
   [
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiple(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiple(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Boeing707(greyhound)\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\n\nAll airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nAll planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nAll Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\n\nAll airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nAll planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nAll Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Boeing707(greyhound)\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(greyhound)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\n\nAll airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nAll planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nAll Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\n\nAll airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nAll planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nAll Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(Greyhound)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\n\nAll airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nAll planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nAll Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Boeing707(greyhound)\n\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\n\nAll airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nAll planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nAll Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\n\nAll airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nAll planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nAll Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(Greyhound)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> NoGreyhoundPlanes\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Boeing707(greyhound)\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\n\nAll airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nAll planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nAll Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: Greyhound is an airline.\nFOL: Airline(Greyhound)\nTEXT: Greyhound is an airline.\nFOL: Airline(Greyhound)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\n\nAll airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nAll planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nAll Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Boeing707(greyhound)\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiple(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiple(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiple(x) -> NotEmpty(x))\n\nAll airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiple(x))\n\nAll planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nAll Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Boeing707(greyhound)\n</PREMISES>\n<CONCLUSION>\nGreyhound is an airline.\nFOL: Airline(greyhound)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 106,
  "responses": [
   [
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\n\nAll airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nAll planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nAll Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -GreyhoundPlane(greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Greyhound(greyhound) & Boeing707(greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(Greyhound)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\n\nAll airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nAll planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nAll Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nAll airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nAll planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nAll Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Boeing707(greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\n\nAll airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nAll planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nAll Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Boeing707(greyhound)\n</PREMISES>\n\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\n\nAll airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nAll planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nAll Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(Greyhound)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -GreyhoundPlane(greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Greyhound(greyhound) & Boeing707(greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Boeing707(greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\n\nAll airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nAll planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nAll Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(Greyhound)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\n\nAll airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nAll planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nAll Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -GreyhoundPlane(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Greyhound(Boeing707)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\n\nAll airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nAll planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nAll Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(Greyhound)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\n\nAll airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nAll planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nAll Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiple(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiple(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Boeing707(greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is a Boeing 707.\nFOL: Boeing707(Greyhound)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 107,
  "responses": [
   [
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiple(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiple(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Boeing707(greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> NoGreyhoundPlanes\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -GreyhoundPlane(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\n\nAll airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nAll planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nAll Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\n\nAll airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\n\nAll planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nAll Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> NoGreyhoundPlane\n</PREMISES>\n\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Boeing707(greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -GreyhoundPlane\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Greyhound(Boeing707)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Boeing707(greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\n\nAll airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nAll planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nAll Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Boeing707(greyhound)\n</PREMISES>\n\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -GreyhoundPlane(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -GreyhoundPlane\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> NotEmpty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -Boeing707(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(Greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (TransportMultiplePassengers(x) -> -Empty(x))\nTEXT: All airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> TransportMultiplePassengers(x))\nTEXT: All planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\nTEXT: All Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\nTEXT: If Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(Greyhound) -> -GreyhoundPlane(Greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -GreyhoundPlane(greyhound) & -Boeing707(greyhound)\n</CONCLUSION>",
    "<PREMISES>\nIf something can transport multiple passengers, then they are not empty.\nFOL: all x. (CanTransportMultiplePassengers(x) -> NotEmpty(x))\n\nAll airlines can transport multiple passengers.\nFOL: all x. (Airline(x) -> CanTransportMultiplePassengers(x))\n\nAll planes are empty.\nFOL: all x. (Plane(x) -> Empty(x))\n\nAll Boeing 707s are planes.\nFOL: all x. (Boeing707(x) -> Plane(x))\n\nIf Greyhound is not an airline, then there are no Greyhound planes.\nFOL: -Airline(greyhound) -> -Boeing707(greyhound)\n</PREMISES>\n<CONCLUSION>\nA Greyhound is not a Boeing 707.\nFOL: -Boeing707(greyhound)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 108,
  "responses": [
   [
    "<PREMISES>\nall x. (Animal(x) -> Mammal(x))\nall x. (Mammal(x) -> Mammal(x))\nx. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nx. ((Fly(x) -> HasWings(x)))\nx. (-Fly(x) & -Bird(x) -> (-Fly(x) & -Breathe(x)))\n</PREMISES>\n<CONCLUSION>\nRock is a monkey.\n</CONCLUSION>",
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nAll monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nAn animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nAll birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nAll animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nIf something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\n</PREMISES>\n<CONCLUSION>\nRock is a monkey.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & -Animal(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. ((Fly(x) -> Winged(x)) & (Winged(x) -> Fly(x)))\nRock neither Fly(Rock) & Rock neither Bird(Rock) -> -Fly(Rock) & -Breathe(Rock)\n</PREMISES>\n<CONCLUSION>\nRock Monkey\n</CONCLUSION>",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & Animal(x) -> Monkey(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. (Fly(x) -> Wings(x))\nall x. (-Fly(x) & -Bird(x) -> -Fly(x) & -Breathe(x))\n</PREMISES>\n<CONCLUSION>\n-Rock\n</CONCLUSION>",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & Animal(x) -> Mammal(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. (Fly(x) -> HasWings(x))\nall x. (-Fly(x) & -Bird(x) -> (-Fly(x) & -Breathe(x)))\n</PREMISES>\n<CONCLUSION>\n-Rock is a bird.\nRock is a mammal.\nRock is a monkey.\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & -Animal(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. ((Fly(x) -> Wings(x)))\nall x. (-Fly(x) & -Bird(x) -> -Breathe(x))\n</PREMISES>\n<CONCLUSION>\n-Rock(x) & Mammal(Rock) & Animal(Rock)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & Animal(x) -> Monkey(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. ((Fly(x) -> Wings(x))\nall x. ((-Fly(x) & -Bird(x)) -> (-Fly(x) & -Breathe(x)))\n</PREMISES>\n<CONCLUSION>\n-Rock\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(Rock)\n</EVALUATE>",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & Animal(x) -> Mammal(x))\nany x. (Animal(x) & -Bird(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nany x. (Fly(x) -> HasWings(x))\nany x. (-Fly(x) & -Bird(x) -> (-Fly(x) & -Breathe(x)))\n</PREMISES>\n<CONCLUSION>\n-Rock(Monkey)\n</CONCLUSION>",
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\n</PREMISES>\n<CONCLUSION>\nRock is a monkey.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL:"
   ],
   [
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\n</PREMISES>\n<CONCLUSION>\nRock is a monkey.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nF",
    "<PREMISES>\nall x. (Animal(x) -> Mammal(x))\nall x. (Mammal(x) -> Mammal(x))\nx. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nx. (Fly(x) -> HasWings(x))\nx. ((-Fly(x) & -Bird(x)) -> (-Fly(x) & -Breathe(x)))\n</PREMISES>\n<CONCLUSION>\n-Rock. (Mammal(Rock))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock is a monkey.\nFOL: -Bird(Rock) & -Fly(Rock) & Mammal(Rock) & Monkey(Rock)\n</EVALUATE>",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & Animal(x) -> Monkey(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. (Fly(x) -> Winged(x))\nall x. (-Fly(x) & -Bird(x) -> (-Fly(x) & -Breathe(x)))\n</PREMISES>\n<CONCLUSION>\n-Rock\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock is a monkey.\nFOL: Monkey(Rock)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nall x. (Animal(x) -> Mammal(x))\nall x. (Mammal(x) -> Mammal(x))\nx. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nx. (Fly(x) -> Wings(x))\nx. (Rock(x) & -Fly(x) & -Bird(x) -> -Breathe(x))\n</PREMISES>\n<CONCLUSION>\n-Rock(x) & Mammal(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & Animal(x) -> Mammal(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. ((Fly(x) -> Wings(x))\nall x. (-Fly(x) & -Bird(x) -> (-Fly(x) & -Breathe(x)))\n</PREMISES>\n<CONCLUSION>\n-Rock\n</CONCLUSION>",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & -Animal(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. (Fly(x) -> HasWings(x))\nall x. (-Fly(x) & -Bird(x) -> -Breathe(x))\n</PREMISES>\n<CONCLUSION>\n-Rock(Mammal(r) & -Animal(r))\n</CONCLUSION>",
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nAll monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nAn animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nAll birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nAll animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nIf something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\n</PREMISES>\n<CONCLUSION>\nRock is a monkey.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & Animal(x) -> Monkey(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. ((Fly(x) -> Wings(x)))\nall x. (-Fly(x) & -Bird(x) -> -Fly(x) & -Breathe(x))\n</PREMISES>\n<CONCLUSION>\n-Rock\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nAll monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nAn animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nAll birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nAll animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nIf something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\n</PREMISES>\n<CONCLUSION>\nRock is a monkey.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & Animal(x) -> Monkey(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. ((Fly(x) -> Winged(x)))\nall x. ((-Fly(x) & -Bird(x) -> (-Fly(x) & -Breathe(x))))\n</PREMISES>\n<CONCLUSION>\n-Rock is a monkey.\n</CONCLUSION>",
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nAll monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nAn animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nAll birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nAll animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nIf something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\n</PREMISES>\n<CONCLUSION>\nRock is a monkey.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT",
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nAll monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nAn animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nAll birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nAll animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nIf something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\n</PREMISES>\n<CONCLUSION>\nRock is a monkey.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & -Animal(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. ((Fly(x) -> Wings(x))\nall x. (-Fly(x) & -Bird(x) -> -Breathe(x))\n</PREMISES>\n<CONCLUSION>\n-Rock is a monkey.\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 109,
  "responses": [
   [
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & -Animal(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. (Fly(x) -> Wings(x))\nall x. (-Fly(x) & -Bird(x) -> -Wings(x))\n</PREMISES>\n<CONCLUSION>\nWings(Rock)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Animal(x) -> Mammal(x))\nall x. (Mammal(x) -> Mammal(x))\nx. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nx. (Fly(x) -> Winged(x))\nx. (-Fly(x) & -Bird(x) -> -Breathe(x))\n</PREMISES>\n<CONCLUSION>\nWinged(Rock)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & -Animal(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. (Fly(x) -> HasWings(x))\nall x. (-Fly(x) & -Bird(x) -> -Breathe(x))\n</PREMISES>\n<CONCLUSION>\n-HasWings(Rock)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> -Fly(Rock) & -Breathe(Rock)\nTEXT: Rock has wings.\nFOL: HasWings(Rock)\n</EVALUATE>",
    "<PREMISES>\nall x. (Animal(x) -> Mammal(x))\nall x. (Mammal(x) -> Mammal(x))\nx. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nx. ((Fly(x) -> Wings(x)) | (Bird(x) -> Wings(x)))\nRock. ((Fly(Rock) & Bird(Rock)) | (Fly(Rock) & Breathe(Rock)) | (-Fly(Rock) & Bird(Rock)) | (-Fly(Rock) & Breathe(Rock)))\n</PREMISES>\n<CONCLUSION>\nWings(Rock)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nAll monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nAn animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nAll birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nAll animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nIf something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\n</PREMISES>\n<CONCLUSION>\nRock has wings.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\n",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & Animal(x) -> Monkey(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. (Fly(x) -> Wings(x))\nall x. (-Fly(x) & -Bird(x) -> (-Fly(x) & -Breathe(x)))\n</PREMISES>\n<CONCLUSION>\nWings(Rock)\n</CONCLUSION>",
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\n</PREMISES>\n<CONCLUSION>\nRock has wings.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL",
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nAll monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nAn animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nAll birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nAll animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nIf something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\n</PREMISES>\n<CONCLUSION>\nRock has wings.\nFOL: Fly(Rock)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Animal(x) -> Mammal(x))\nall x. (Mammal(x) -> Mammal(x))\nx y. (Animal(x) & Animal(y) & (x = y) -> (Monkey(x) & Monkey(y)))\nx. (Animal(x) -> (Monkey(x) | Bird(x)))\nx. (Bird(x) -> Fly(x))\nx. (Animal(x) -> Breathe(x))\nx. (Fly(x) -> Wings(x))\nx. (Rock(x) & -Fly(x) & -Bird(x) -> -Fly(x) & -Breathe(x))\n</PREMISES>\n<CONCLUSION>\nWings(Rock)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Animal(x) -> Mammal(x))\nall x. (Mammal(x) -> Mammal(x))\nx. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nx. (Fly(x) -> Wings(x))\nx. (-Fly(x) & -Bird(x) -> (-Fly(x) & -Breathe(x)))\n</PREMISES>\n<CONCLUSION>\nWings(Rock)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Animal(x) -> Mammal(x))\nall x. (Mammal(x) -> Mammal(x))\nx. (Animal(x) -> (Mammal(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nx. ((Fly(x) -> Wings(x)) & -Fly(x) -> -Breathe(x))\n</PREMISES>\n<CONCLUSION>\nWings(Rock)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & Animal(x) -> Monkey(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. (Fly(x) -> HasWings(x))\nall x. (-Fly(x) & -Bird(x) -> -Fly(x) & -Breathe(x))\n</PREMISES>\n<CONCLUSION>\n-HasWings(Rock)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock has wings.\nFOL: Fly(Rock) & Wings(Rock)\n</EVALUATE>",
    "<PREMISES>\nall x. (Animal(x) -> Mammal(x))\nall x. (Mammal(x) -> Mammal(x))\nx y. (Animal(x) & Animal(y) & (Monkey(x) & Monkey(y)) -> HigherRank(x, y))\nx y. (Animal(x) & Animal(y) & (Bird(x) & Bird(y)) -> HigherRank(x, y))\nx. (Bird(x) -> Fly(x))\nx. (Animal(x) -> Breathe(x))\nx. (Fly(x) -> Wings(x))\nx y. (-Fly(x) & -Bird(x) -> (-Fly(x) & -Breathe(x)))\nx. (-Fly(x) & -Bird(x) -> Rock(x))\n</PREMISES>\n<CONCLUSION>\nWings(Rock)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock has wings.\nFOL: HasWings(Rock)\n</EVALUATE>",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & Animal(x) -> Monkey(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. ((Fly(x) -> Wings(x))\nall x. (-Fly(x) & -Bird(x) -> (-Fly(x) & -Breathe(x)))\n</PREMISES>\n<CONCLUSION>\nWings(Rock)\n</CONCLUSION>",
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\n</PREMISES>\n<CONCLUSION>\nRock has wings.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & Animal(x) -> Monkey(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. ((Fly(x) -> Winged(x))\nall x. ((-Fly(x) & -Bird(x) -> -Breathe(x))\n</PREMISES>\n<CONCLUSION>\nWinged(Rock)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock has wings.\nFOL: HasWings(Rock)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock has wings.\nFOL: Fly(Rock) & Wings(Rock)\n</EVALUATE>",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & -Animal(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. (Fly(x) -> Wings(x))\nall x. (-Fly(x) & -Bird(x) -> -Breathe(x))\n</PREMISES>\n<CONCLUSION>\nWings(Rock)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock has wings.\nFOL: Fly(Rock)\n</EVALUATE>",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & -Animal(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. (Fly(x) -> Winged(x))\nall x. (-Fly(x) & -Bird(x) -> (-Fly(x) & -Breathe(x)))\n</PREMISES>\n<CONCLUSION>\n-Winged(Rock)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & Animal(x) -> Monkey(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. (Fly(x) -> Wings(x))\nall x. ((-Fly(x) & -Bird(x)) -> (-Fly(x) & -Breathe(x)))\n</PREMISES>\n<CONCLUSION>\nWings(Rock)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 110,
  "responses": [
   [
    "<PREMISES>\nall x. (Animal(x) -> Mammal(x))\nall x. (Mammal(x) -> Mammal(x))\nany x. (Animal(x) & -Mammal(x) -> Bird(x))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nany x. (Fly(x) -> Wing(x))\nany x. (Rock(x) & -Fly(x) & -Bird(x) -> -Wing(x) & -Breathe(x))\n</PREMISES>\n<CONCLUSION>\n-Rock(x) & -Wing(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & Animal(x) -> Monkey(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. (Fly(x) -> Winged(x))\nall x. (-Fly(x) & -Bird(x) -> -Winged(x))\n</PREMISES>\n<CONCLUSION>\n-Rocked(x)\n</CONCLUSION>",
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nAll monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nAn animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nAll birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nAll animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nIf something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\n</PREMISES>\n<CONCLUSION>\nRock does not have wings.\nFOL: -HasWings(Rock)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & Animal(x) -> Monkey(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. (Fly(x) -> Winged(x))\nall x. (-Fly(x) & -Bird(x) -> -Winged(x))\n</PREMISES>\n<CONCLUSION>\n-Rocked(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Animal(x) -> Mammal(x))\nall x. (Mammal(x) -> Mammal(x))\nx y. (Animal(x) & Animal(y) & x = y -> (Monkey(x) & Monkey(y)))\nx. (Animal(x) -> (Monkey(x) | Bird(x)))\nx. (Bird(x) -> Fly(x))\nx. (Animal(x) -> Breathe(x))\nx. (Fly(x) -> Wings(x))\nx. (Rock(x) & -Fly(x) & -Bird(x) -> -Fly(x) & -Breathe(x))\n</PREMISES>\n<CONCLUSION>\nRock(x) & Wings(x)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nAll monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nAn animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nAll birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nAll animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nIf something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\n</PREMISES>\n<CONCLUSION>\nRock does not have wings.\nFOL: -Wings(Rock)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> -Fly(Rock) & -Breathe(Rock)\nTEXT: Rock does not have wings.\nFOL: -HasWings(Rock)\n</EVALUATE>",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & -Animal(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. (Fly(x) -> HasWings(x))\nall x. (-Fly(x) & -Bird(x) -> -Breathe(x))\n</PREMISES>\n<CONCLUSION>\n-Rock(x)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock does not have wings.\nFOL: -Wings(Rock)\n</EVALUATE>",
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nAll monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nAn animal is either a monkey or a bird.\nFOL: Animal(x) -> (Monkey(x) | Bird(x))\nAll birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nAll animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nIf something can fly, then it has wings.\nFOL: Fly(x) -> HasWings(x)\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> -Fly(Rock) & -Breathe(Rock)\n</PREMISES>\n<CONCLUSION>\nRock does not have wings.\nFOL: -HasWings(Rock)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Animal(x) -> Mammal(x))\nall x. (Mammal(x) -> Mammal(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. (Fly(x) -> HasWings(x))\nall x. (-Fly(x) & -Bird(x) -> -HasWings(x) & -Breathe(x))\n</PREMISES>\n<CONCLUSION>\n-Rock HasWings\n</CONCLUSION>",
    "<PREMISES>\nall x. (Animal(x) -> Mammal(x))\nall x. (Mammal(x) -> Mammal(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. (Fly(x) -> Wing(x))\nall x. (-Fly(x) & -Bird(x) -> -Fly(x) & -Breathe(x))\n</PREMISES>\n<CONCLUSION>\n-Rock(Wing(r rock))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock does not have wings.\nFOL: -HasWings(Rock)\n</EVALUATE>",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & Animal(x) -> Monkey(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. (Fly(x) -> HasWings(x))\nall x. ((-Fly(x) & -Bird(x)) -> (-Fly(x) & -Breathe(x)))\n</PREMISES>\n<CONCLUSION>\n-Rock HasWings\n</CONCLUSION>",
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nAll monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nAn animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nAll birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nAll animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nIf something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\n</PREMISES>\n<CONCLUSION>\nRock does not have wings.\nFOL: -Wings(Rock)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Animal(x) -> Mammal(x))\nall x. (Mammal(x) -> Mammal(x))\nany x, y. (Animal(x) & Animal(y) & x!= y -> (x is Monkey(x) | y is Monkey(y)))\nany x, y. (Animal(x) & Animal(y) & x!= y -> (x is Bird(x) | y is Bird(y)))\nany x. (Bird(x) -> Fly(x))\nany x. (Animal(x) -> Breathe(x))\nany x. (Fly(x) -> HasWings(x))\nany x, y. (x is neither Bird(x) nor Bird(y) -> x is neither Fly(x) nor Fly(y))\n</PREMISES>\n<CONCLUSION>\nRock is neither Bird(Rock) nor Bird(Rock)\nRock is neither Fly(Rock) nor Fly(Rock)\nRock is neither Mammal(Rock) nor Mammal(Rock)\nRock is neither Animal(Rock) nor Animal(Rock)\nRock has Wings(Rock)\nRock does not have wings.\n</EVALUATE>",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & Animal(x) -> Monkey(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. (Fly(x) -> HasWings(x))\nall x. (-Fly(x) & -Bird(x) -> -Fly(x) & -Breathe(x))\n</PREMISES>\n<CONCLUSION>\n-RockHasWings\n</CONCLUSION>",
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nAll monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nAn animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nAll birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nAll animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nIf something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\n</PREMISES>\n<CONCLUSION>\nRock does not have wings.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n",
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nAll monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nAn animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nAll birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nAll animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nIf something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\n</PREMISES>\n<CONCLUSION>\nRock does not have wings.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & Animal(x) -> Monkey(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. ((Fly(x) -> Wings(x))\nall x. ((-Fly(x) & -Bird(x)) -> (-Fly(x) & -Breathe(x)))\n</PREMISES>\n<CONCLUSION>\n-Rock(Wings)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & Animal(x) -> Mammal(x))\nany x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nany x. (Fly(x) -> Wings(x))\nany x. (-Fly(x) & -Bird(x) -> -Wings(x) & -Breathe(x))\n</PREMISES>\n<CONCLUSION>\n-Wings(Rock)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & Animal(x) -> Monkey(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. (Fly(x) -> HasWings(x))\nall x. (-Fly(x) & -Bird(x) -> -Fly(x) & -Breathe(x))\n</PREMISES>\n<CONCLUSION>\n-RockHasWings\n</CONCLUSION>",
    "<PREMISES>\nAll mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nAll monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\nAn animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nAll birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nAll animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nIf something can fly, then it has wings.\nFOL: all x. (Fly(x) -> Wings(x))\nIf Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\n</PREMISES>\n<CONCLUSION>\nRock does not have wings.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals.\nFOL: all x. (Monkey(x) -> Mammal(x))\n",
    "<EVALUATE>\nTEXT: All mammals are animals.\nFOL: all x. (Mammal(x) -> Animal(x))\nTEXT: All monkeys are mammals. \nFOL: all x. (Monkey(x) -> Mammal(x))\nTEXT: An animal is either a monkey or a bird.\nFOL: all x. (Animal(x) -> (Monkey(x) | Bird(x)))\nTEXT: All birds fly.\nFOL: all x. (Bird(x) -> Fly(x))\nTEXT: All animals breathe.\nFOL: all x. (Animal(x) -> Breathe(x))\nTEXT: If something can fly, then it has wings.\nFOL: all x. (Fly(x) -> HasWings(x))\nTEXT: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nFOL: -Fly(Rock) & -Bird(Rock) -> (-Fly(Rock) & -Breathe(Rock))\nTEXT: Rock does not have wings.\nFOL: -HasWings(Rock)\n</EVALUATE>",
    "<PREMISES>\nall x. (Mammal(x) -> Animal(x))\nall x. (Mammal(x) & Animal(x) -> Mammal(x))\nall x. (Animal(x) -> (Monkey(x) | Bird(x)))\nall x. (Bird(x) -> Fly(x))\nall x. (Animal(x) -> Breathe(x))\nall x. (Fly(x) -> HasWings(x))\nall x. (-Fly(x) & -Bird(x) -> -Fly(x) & -Breathe(x))\n</PREMISES>\n<CONCLUSION>\n-Rock HasWings\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 111,
  "responses": [
   [
    "<PREMISES>\nall x. (Person(x) & Child(x) -> Wedding(x))\nall x. (Person(x) & Wedding(x) -> TravelToParis(x) & Honeymoon(x))\nall x. (Wedding(x) & Location(x) = Paris & Honeymoon(x) -> Person(x) & Wedding(x))\nsome x. (Wedding(x) & Attendance(x) = WellAttended(x))\njohn & -Child(john) -> (-Wedding(john) & -TravelToParis(john) & -Wedding(john))\n-Wedding(x) & WellAttended(x) -> (Wedding(x) & Location(x) = July & Wedding(x)) | (-Wedding(x) & TravelToParis(x) & Honeymoon(x))\n</PREMISES>\n<CONCLUSION>\n-Wedding(john) & WellAttended(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> AtLeastOneChild(x))\nall x. (Person(x) & Honeymoon(x, Paris) -> Wedding(x))\nall x. (Wedding(x) & Month(x) = July -> Honeymoon(x, Paris))\nsome x. (Wedding(x) & AtWellAttended(x))\n- John hasAtLeastOneChild\n- John doesNotTravelToParis\n- John doesNotHaveWedding\n- (John hasWedding & AtWellAttended) | (-John hasWedding & JohnTravelToParis)\n</PREMISES>\n<CONCLUSION>\nJohn hasWedding & AtWellAttended\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WeddingInJuly(x) & WellAttended(x))\n-HasWedding(john) & HasAtLeastOneChild(john) -> -TravelToParisForHoneymoon(john) & -HasWedding(john)\n-HasWedding(john) & HasAtLeastOneChild(john) & HasWedding(x) & WellAttended(x) -> (WeddingInJuly(x) & TravelToParisForHoneymoon(john)) | (-WeddingInJuly(x) & TravelToParisForHoneymoon(john))\n</PREMISES>\n<CONCLUSION>\n-HasWedding(john) & HasAtLeastOneChild(john) & HasWedding(x) & WellAttended(x) -> (WeddingInJuly(x) & TravelToParisForHoneymoon(john)) | (-WeddingInJuly(x) & TravelToParisForHoneymoon(john))\n",
    "<PREMISES>\nall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nall x. (HasHoneymoonInParis(x) -> HasWedding(x))\nall x. (HasWeddingInJuly(x) -> HasHoneymoonInParis(x))\nsome x. (HasWellAttendedWedding(x))\nx. (HasAtLeastOneChild(x) -> -HasHoneymoonInParis(x) & -HasWedding(x))\nx. (HasWedding(x) & HasWellAttendedWedding(x) -> (HasWeddingInJuly(x) | -HasWeddingInJuly(x)) | (-HasHoneymoonInParis(x) | -HasHoneymoonInParis(x)))\n</PREMISES>\n<CONCLUSION>\nx. (HasWedding(x) & HasWellAttendedWedding(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nall x. (HasHoneymoonInParis(x) -> HasWedding(x))\nall x. (HasWeddingInJuly(x) -> HasHoneymoonInParis(x))\nsome x. (HasWeddingInJuly(x))\njohn :- hasAtLeastOneChild(john) -> -hasHoneymoonInParis(john) -> -hasWedding(john)\njohn :- hasWedding(john) -> hasWeddingInJuly(john) -> -hasHoneymoonInParis(john)\njohn :- hasWedding(john) -> hasWeddingInJuly(john) -> hasHoneymoonInParis(john)\njohn :- hasWedding(john) -> hasWeddingInJuly(john) -> hasHoneymoonInParis(john) -> hasWedding(john)\njohn :- hasWedding(john) -> (hasWeddingInJuly(john) & -hasHoneymoonInParis(john)) -> hasWedding(john)\njohn :- hasWedding(john) -> (hasWeddingInJuly(john) & hasHoneymoonInParis(john)) -> has"
   ],
   [
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WellAttended(x) & WeddingInJuly(x))\njohn has at least one child -> (-TravelToParisForHoneymoon(john) & -HasWedding(john))\njohn has wedding that is well-attended -> (HasWedding(john) & (WeddingInJuly(john) | -WeddingInJuly(john)) | (TravelToParisForHoneymoon(john) & -WeddingInJuly(john)))\n</PREMISES>\n<CONCLUSION>\njohn has wedding that is well-attended\n</CONCLUSION>",
    "<PREMISES>\nall x. (Child(x) -> Wedding(x))\nall x. (Wedding(x) -> AtLeastOneChild(x))\nall x. (ParisHoneymoon(x) -> Wedding(x))\nall x. (ParisHoneymoon(x) -> Wedding(x)InJuly(x))\nsome x. (Wedding(x)InJuly(x))\n-Child(john) -> -ParisHoneymoon(john) & -Wedding(john)\n-WellAttended(x) -> (Wedding(x)InJuly(x) | -Wedding(x)InJuly(x) & ParisHoneymoon(x))\n-Child(john) -> -ParisHoneymoon(john) & -Wedding(john)\n-WellAttended(x) -> (Wedding(x)InJuly(x) | -Wedding(x)InJuly(x) & ParisHoneymoon(x))\n-WellAttended(john) -> (Wedding(john)InJuly(x) | -Wedding(john)InJuly(x) & ParisHoneymoon(john))\n</PREMISES>\n<CONCLUSION>\n-WellAttended(john) -> (Wedding(john)InJuly(x) | -Wedding(john)",
    "<PREMISES>\nall x. (Child(x) -> Wedding(x))\nall x. (Wedding(x) -> HasWedding(x))\nall x. (Wedding(x) -> ParisHoneymoon(x))\nsome x. (Wedding(x) -> WellAttended(x))\nall x. (HasWedding(x) -> (WeddingInJuly(x) | -ParisHoneymoon(x)))\nall x. ((HasWedding(x) & WellAttended(x)) -> (WeddingInJuly(x) | -ParisHoneymoon(x)))\nall x. (HasWedding(x) -> -ParisHoneymoon(x) & -Wedding(x) | ParisHoneymoon(x))\nall x. (HasWedding(x) & WellAttended(x) -> (WeddingInJuly(x) | -ParisHoneymoon(x)))\n</PREMISES>\n\n<CONCLUSION>\nall x. (HasWedding(x) & WellAttended(x) -> WeddingInJuly(x) | -ParisHoneymoon(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> AtLeastOneChild(x))\nall x. (Person(x) & HoneymoonInParis(x) -> Wedding(x))\nall x. (Wedding(x) & Month(x) = July -> HoneymoonInParis(x))\nsome x. (Wedding(x) & WellAttended(x))\njohn : Person, AtLeastOneChild(john) & -HoneymoonInParis(john) & -Wedding(john)\njohn : Person, -Wedding(john) -> -HoneymoonInParis(john)\nall x. (Wedding(x) & WellAttended(x) -> (Wedding(x) & Month(x) = July) | (-Wedding(x) & HoneymoonInParis(x)))\njohn : Person, MakeWeddingWellAttended(john) & -Wedding(john) -> (john : Person, Month(john) = July | john : Person, HoneymoonInParis(john))\n</PREMISES>\n<CONCLUSION>\njohn : Person, MakeWeddingWellAttended(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WeddingInJuly(x))\njohn :- has_one_child(john) -> ~TravelToParisForHoneymoon(john) & ~HasWedding(john)\njohn :- has_wedding(john) & well_attended(john) -> (WeddingInJuly(john) | ~WeddingInJuly(john)) & (~TravelToParisForHoneymoon(john) | ~TravelToParisForHoneymoon(john))\n</PREMISES>\n<CONCLUSION>\nhas_wedding(john) & well_attended(john)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WeddingInJuly(x))\nx. (John & HasAtLeastOneChild(x)) -> (-TravelToParisForHoneymoon(x) & -HasWedding(x))\nx. (John & HasWedding(x)) -> (HasWeddingInJuly(x) | -TravelToParisForHoneymoon(x))\n</PREMISES>\n<CONCLUSION>\nx. (John & HasWedding(x)) & HasWeddingInJuly(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelsToParisForHoneymoon(x) -> HasWedding(x))\nall x. (Wedding(x) -> TravelsToParisForHoneymoon(x))\nsome x. (Wedding(x) -> WellAttended(x))\njohn :~ AtLeastOneChild(john) -> ~TravelsToParisForHoneymoon(john) & ~HasWedding(john)\njohn :~ HasWedding(john) -> (HasWedding(john) & WellAttended(john)) | (~HasWedding(john) & TravelsToParisForHoneymoon(john))\n</PREMISES>\n<CONCLUSION>\njohn :~ HasWedding(john) & WellAttended(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WeddingInJuly(x))\n-HasWedding(john) & AtLeastOneChild(john) -> -TravelToParisForHoneymoon(john) & -HasWedding(john)\n-HasWedding(john) & HasWedding(x) & WellAttended(x) -> (HasWeddingInJuly(john) | -HasWeddingInJuly(john)) & (-TravelToParisForHoneymoon(john) | TravelToParisForHoneymoon(x))\n</PREMISES>\n\n<CONCLUSION>\n-HasWedding(john) & HasWedding(x) & WellAttended(x) -> HasWeddingInJuly(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (HasHoneymoonInParis(x) -> HasWedding(x))\nall x. (HasWeddingInJuly(x) -> HasHoneymoonInParis(x))\nsome x. (HasWeddingInJuly(x))\njohn :- (AtLeastOneChild(john) -> (HasHoneymoonInParis(john) & -HasWedding(john)))\njohn :- (HasWedding(john) & HasWeddingInJuly(john)) -> (HasHoneymoonInParis(john) | ( -HasWeddingInJuly(john) & -HasHoneymoonInParis(john)))\n</PREMISES>\n<CONCLUSION>\njohn :- (HasWedding(john) & HasWeddingInJuly(john)) -> (HasHoneymoonInParis(john) | ( -HasWeddingInJuly(john) & -HasHoneymoonInParis(john)))\njohn :- (HasWedding(john) & HasWeddingInJuly(john)) -> HasWedding(john)\njohn :- (HasWedding(john) & HasWeddingInJuly(john)) ->",
    "<PREMISES>\nall x. (Person(x) -> (HasChild(x) -> Wedding(x)))\nall x. (Person(x) -> (TravelToParis(x) -> Wedding(x)))\nall x. (Wedding(x) -> (TravelToParis(x) -> ParisWedding(x)))\nsome x. (Wedding(x) -> WellAttended(x))\nall x. ((Person(x) -> Wedding(x)) & Wedding(x) -> WellAttended(x) -> (HasChild(x) -> -TravelToParis(x) -> -Wedding(x)))\nall x. ((Person(x) -> Wedding(x)) & Wedding(x) -> WellAttended(x) -> (-Wedding(x) -> (HasChild(x) -> (Wedding(x) -> (ParisWedding(x) -> -TravelToParis(x))))))\n</PREMISES>\n\n<CONCLUSION>\nall x. ((Person(x) -> Wedding(x)) & Wedding(x) -> WellAttended(x) -> WellAttended(worksheet))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Person(x) & Child(x) -> Wedding(x))\nall x. (Person(x) & HoneymoonInParis(x) -> Wedding(x))\nall x. (Wedding(x) & Month(x) = July -> HoneymoonInParis(x))\nsome x. (Wedding(x) & WellAttended(x))\nall x. (Person(x) & Child(x) -> -HoneymoonInParis(x) & -Wedding(x))\nall x. (Person(x) & Wedding(x) & WellAttended(x) -> (Wedding(x) & Month(x) = July) | (-Wedding(x) & HoneymoonInParis(x)))\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) & Child(x) -> -HoneymoonInParis(x) & -Wedding(x))\nsome x. (Person(x) & Child(x) -> -HoneymoonInParis(x) & -Wedding(x))\nall x. ((Person(x) & Child(x) & Wedding(x) & WellAttended(x)) -> (Wedding(x) & Month(x) = July) | (-Wedding(x) & HoneymoonInParis(x)))\n",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WeddingInJuly(x))\nif john has at least one child, then -TravelToParisForHoneymoon(john) & -HasWedding(john)\nif john has a wedding that is well-attended, then (HasWeddingInJuly(john) | -HasWeddingInJuly(john)) & (-TravelToParisForHoneymoon(john) | TravelToParisForHoneymoon(john))\n</PREMISES>\n<CONCLUSION>\njohn has a wedding that is well-attended\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WeddingInJuly(x))\njohn hasAtLeastOneChild -> -TravelToParisForHoneymoon(john) & -HasWedding(john)\njohn hasWedding -> ((WeddingInJuly(john) & -WellAttended(john)) | ((-WeddingInJuly(john) & TravelToParisForHoneymoon(john)))\n</PREMISES>\n<CONCLUSION>\njohn hasWedding & WellAttended(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WellAttendedWedding(x))\njohn -> -TravelToParisForHoneymoon(john) & -HasWedding(john)\njohn -> (HasWeddingWellAttended(john) & (HasWeddingInJuly(john) | -HasWeddingInJuly(john))) | (TravelToParisForHoneymoon(john) & -HasWeddingInJuly(john))\n</PREMISES>\n<CONCLUSION>\njohn -> HasWeddingWellAttended(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasChild(x) -> HasWedding(x))\nall x. (HasWedding(x) -> HasHoneymoonInParis(x))\nall x. (HasWedding(x) & HasHoneymoonInParis(x) -> HasWeddingInJuly(x))\nsome x. (HasWeddingInJuly(x))\njohn -> (-HasChild(john) & -HasHoneymoonInParis(john) & -HasWedding(john))\njohn -> ((HasWedding(john) & HasWeddingInJuly(john)) | ((-HasWedding(john) & HasHoneymoonInParis(john)))\n</PREMISES>\n<CONCLUSION>\njohn & HasWedding(john) & HasWeddingInJuly(john)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (HasChild(x) -> Wedding(x))\nall x. (Wedding(x) -> TravelToParis(x))\nall x. (Wedding(x) -> ParisInJuly(x))\nsome x. (WellAttended(x))\nall x. ((Wedding(x) -> HasChild(x)) & -TravelToParis(x) & -Wedding(x) -> -TravelToParis(x) & (Wedding(x) -> HasChild(x)) | -Wedding(x) & TravelToParis(x))\nall x. ((Wedding(x) -> HasChild(x)) & WellAttended(x) -> (ParisInJuly(x) & -Wedding(x) | -ParisInJuly(x) & TravelToParis(x)))\n</PREMISES>\n<CONCLUSION>\n-Wedding(john) & WellAttended(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WellAttendedWedding(x))\n-HasChild(john) -> (-TravelToParisForHoneymoon(john) & -HasWedding(john))\n-HasWedding(john) -> ((HasWedding(john) & WellAttendedWedding(john)) | ((-HasWedding(john) & TravelToParisForHoneymoon(john))))\n</PREMISES>\n<CONCLUSION>\n-HasWedding(john) & WellAttendedWedding(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Child(x) -> Wedding(x))\nall x. (Wedding(x) -> AtLeastOneChild(x))\nall x. (HoneymoonInParis(x) -> Wedding(x))\nall x. (Wedding(x) -> WeddingInJuly(x))\nsome x. (WellAttended(x) -> Wedding(x))\nx. (Child(x) -> -HoneymoonInParis(x) & -Wedding(x))\nx. (Wedding(x) -> (WellAttended(x) -> (WeddingInJuly(x) | -HoneymoonInParis(x))) | (-Wedding(x) -> HoneymoonInParis(x)))\n</PREMISES>\n<CONCLUSION>\nx. (Child(x) -> -HoneymoonInParis(x) & -Wedding(x))\nx. (Wedding(x) -> (WellAttended(x) -> (WeddingInJuly(x) | -HoneymoonInParis(x))) | (-Wedding(x) -> HoneymoonInParis(x)))\nx. (Child(john) -> -HoneymoonInParis(john) & -Wedding(john))\nx. (Wedding(x) -> (WellAttended(x) -> (",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelsToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelsToParisForHoneymoon(x))\nsome x. (WeddingInJuly(x))\njohn. (AtLeastOneChild(john) -> (\u00acTravelsToParisForHoneymoon(john) & \u00acHasWedding(john)))\njohn. (HasWedding(john) & WellAttended(john) -> (HasWeddingInJuly(john) | \u00acHasWeddingInJuly(john)) & \u00acTravelsToParisForHoneymoon(john))\n</PREMISES>\n\n<CONCLUSION>\njohn. (HasWedding(john) & WellAttended(john))\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (HasHoneymoonInParis(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> HasHoneymoonInParis(x))\nsome x. (WellAttended(x) & WeddingInJuly(x))\njohn :- atLeastOneChild(john) & -HasHoneymoonInParis(john) & -HasWedding(john)\njohn :- HasWedding(john) & WellAttended(john) & ( -WeddingInJuly(john) | -HasHoneymoonInParis(john))\n</PREMISES>\n<CONCLUSION>\njohn :- HasWedding(john) & WellAttended(john)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 112,
  "responses": [
   [
    "<PREMISES>\nall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WellAttended(x) & WeddingInJuly(x))\nall x. (HasWedding(x) -> (WellAttended(x) | (-WeddingInJuly(x) & TravelToParisForHoneymoon(x))))\n</PREMISES>\n<CONCLUSION>\n-HasWedding(john) & -WellAttended(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & HasChild(x) -> HasWedding(x))\nall x. (Person(x) & HasWedding(x) -> HasTravelledToParisForHoneymoon(x))\nall x. (HasWedding(x) & HasTravelledToParisForHoneymoon(x) -> HasWeddingInJuly(x))\nsome x. (HasWedding(x) & HasWeddingInJuly(x))\njohn & HasChild(john) -> (-HasWedding(john) & -HasTravelledToParisForHoneymoon(john))\njohn & HasWedding(john) -> (-HasWeddingWellAttended(john) & ((HasWeddingInJuly(john) & -HasWeddingWellAttended(john)) | (-HasWeddingInJuly(john) & HasTravelledToParisForHoneymoon(john))))\n</PREMISES>\n<CONCLUSION>\n-HasWeddingWellAttended(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasChild(x) -> HasWedding(x))\nall x. (HasHoneymoonInParis(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> HasHoneymoonInParis(x))\nsome x. (WeddingInJuly(x))\njohn :- hasChild(john) :- -hasWedding(john) & -hasHoneymoonInParis(john)\njohn :- hasWedding(john) :- hasHoneymoonInParis(john) & hasWeddingAttended(john) :- hasWedding(john) :- hasWeddingAttended(john) :- hasHoneymoonInParis(john) & -hasWeddingAttended(john)\n</PREMISES>\n<CONCLUSION>\n-john :- hasWeddingAttended(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WeddingInJuly(x))\njohn :~ (AtLeastOneChild(john))\njohn :~ (HasWedding(john) & -TravelToParisForHoneymoon(john))\njohn :~ (HasWedding(john) & -WeddingInJuly(john) | (HasWedding(john) & TravelToParisForHoneymoon(john)))\n</PREMISES>\n<CONCLUSION>\njohn :~ (HasWedding(john) & -WellAttended(john))\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasChild(x) -> HasWedding(x))\nall x. (TravelsToParisForHoneymoon(x) -> HasWedding(x))\nall x. (HasWedding(x) & IsInJuly(x) -> TravelsToParisForHoneymoon(x))\nsome x. (IsInJuly(x) & IsWellAttended(x))\njohn :- hasChild(john) -> ~TravelsToParisForHoneymoon(john) & ~HasWedding(john)\njohn :- HasWedding(john) & IsWellAttended(john) -> (IsInJuly(john) | ~IsInJuly(john)) & (~TravelsToParisForHoneymoon(john) | ~TravelsToParisForHoneymoon(john))\n</PREMISES>\n<CONCLUSION>\n~IsWellAttended(john)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WeddingInJuly(x) & WellAttended(x))\njohn -> (AtLeastOneChild(john) & -TravelToParisForHoneymoon(john) & -HasWedding(john))\njohn -> (HasWedding(john) & (WellAttended(john) -> (WeddingInJuly(john) | -WeddingInJuly(john))) & (-WellAttended(john) -> TravelToParisForHoneymoon(john)))\n</PREMISES>\n<CONCLUSION>\n-john -> HasWedding(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WeddingInJuly(x))\nif john hasAtLeastOneChild, then -TravelToParisForHoneymoon(john) & -HasWedding(john)\nif john hasWedding(x), then (WeddingInJuly(x) | -WeddingInJuly(x)) & (-TravelToParisForHoneymoon(john) | TravelToParisForHoneymoon(john))\n</PREMISES>\n\n<CONCLUSION>\n-HasWedding(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasChild(x) -> HasWedding(x))\nall x. (HasHoneymoonInParis(x) -> HasWedding(x))\nall x. (HasWedding(x) & Month(x) = July -> HasHoneymoonInParis(x))\nsome x. (HasWedding(x) & -Attendees(x) > 1)\njohn : x. (HasChild(x) -> -HasHoneymoonInParis(x) & -HasWedding(x))\njohn : x. (HasWedding(x) & -Attendees(x) > 1 -> (HasWedding(x) & Month(x) = July | -HasHoneymoonInParis(x)))\n</PREMISES>\n<CONCLUSION>\n-john : x. (HasWedding(x) & Attendees(x) > 1)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WeddingInJuly(x) & WellAttended(x))\njohn :- AtLeastOneChild(john) -> ~TravelToParisForHoneymoon(john) & ~HasWedding(john)\njohn :- HasWedding(john) & WellAttended(john) -> (WeddingInJuly(john) | ~WeddingInJuly(john)) & (~TravelToParisForHoneymoon(john) | TravelToParisForHoneymoon(john))\n</PREMISES>\n<CONCLUSION>\n~HasWedding(john) & WellAttended(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasChild(x) -> Wedding(x))\nall x. (ParisHoneymoon(x) -> Wedding(x))\nall x. (JulyWedding(x) -> ParisHoneymoon(x))\nsome x. (JulyWedding(x) & WellAttended(x))\n(-HasChild(john) & -ParisHoneymoon(john) & -Wedding(john)) -> (Wedding(john) & WellAttended(john))\n(Wedding(john) & -JulyWedding(john)) | ((-Wedding(john) & -JulyWedding(john)) -> ParisHoneymoon(john))\n</PREMISES>\n<CONCLUSION>\n-Wedding(john) & -WellAttended(john)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Child(x) -> Wedding(x))\nall x. (Wedding(x) -> AtLeastOneChild(x))\nall x. (HoneymoonInParis(x) -> Wedding(x))\nall x. (Wedding(x) -> Paris(x))\nsome x. (WellAttended(x) -> Wedding(x))\nx. (Child(x) -> -Paris(x) & -Wedding(x) | -Wedding(x))\nx. ((Wedding(x) & WellAttended(x)) | (-Wedding(x) & HoneymoonInParis(x)))\n</PREMISES>\n<CONCLUSION>\nx. (Wedding(x) & WellAttended(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasChild(x) -> HasWedding(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WellAttendedWedding(x))\njohn -> -HasWedding(x) & -TravelToParisForHoneymoon(x) & HasChild(x)\njohn -> -WellAttendedWedding(x) & (HasWeddingInJuly(x) | -HasWeddingInJuly(x) & TravelToParisForHoneymoon(x))\n</PREMISES>\n<CONCLUSION>\n-john -> -WellAttendedWedding(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Child(x) -> Wedding(x))\nall x. (Wedding(x) -> AtLeastOneChild(x))\nall x. (ParisHoneymoon(x) -> Wedding(x))\nall x. (ParisHoneymoon(x) -> AtLeastOneChild(x))\nall x. (ParisHoneymoon(x) & Wedding(x) & Month(x) = July -> Wedding(x))\nsome x. (WellAttended(x) & Wedding(x))\nall x. (Child(x) -> -ParisHoneymoon(x) & -Wedding(x))\nall x. (Wedding(x) & WellAttended(x) -> (Wedding(x) & Month(x) = July) | (-Wedding(x) & ParisHoneymoon(x)))\nJohn has at least one child.\n</PREMISES>\n<CONCLUSION>\n-Wedding(John) & -WellAttended(John)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WeddingInJuly(x))\njohn -> -HasWedding(x) & -HasAtLeastOneChild(x) & -TravelToParisForHoneymoon(x)\njohn -> (HasWedding(x) & WellAttended(x) -> (WeddingInJuly(x) | -WeddingInJuly(x))) & (-HasWedding(x) & TravelToParisForHoneymoon(x))\n</PREMISES>\n<CONCLUSION>\n-HasWedding(x) & WellAttended(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nall x. (HasHoneymoonInParis(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> HasHoneymoonInParis(x))\nsome x. (WeddingInJuly(x) & WellAttended(x))\njohn :~ (HasAtLeastOneChild(john) -> (~HasHoneymoonInParis(john) & ~HasWedding(john)))\njohn :~ (HasWedding(x) & WellAttended(x) -> (HasWeddingInJuly(x) | ~HasWeddingInJuly(x)) | (~HasWeddingInJuly(x) & HasHoneymoonInParis(x)))\n</PREMISES>\n<CONCLUSION>\n~HasWedding(john & WellAttended(john))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Person(x) -> AtLeastOneChild(x))\nall x. (Person(x) & HasHoneymoonInParis(x) -> Wedding(x))\nall x. (Wedding(x) & Month(x) = July -> HasHoneymoonInParis(x))\nsome x. (Wedding(x) & WellAttended(x))\njohn : Person\njohn : HasAtLeastOneChild\njohn : -HasHoneymoonInParis\njohn : -Wedding\njohn : -Wedding(x) & WellAttended(x) -> -HasHoneymoonInParis\njohn : -Wedding(x) & WellAttended(x) -> (Wedding(x) & Month(x) = July) | (-Wedding(x) & -Month(x) = July) -> HasHoneymoonInParis\n</PREMISES>\n<CONCLUSION>\njohn : -Wedding(x) & WellAttended(x) -> -HasHoneymoonInParis\njohn : -Wedding(x) & WellAttended(x) -> (Wedding(x) & Month(x) = July) | (-Wedding(x) & -Month(x) = July) -> HasHoneymoonInParis\n</",
    "<PREMISES>\nall x. (Person(x) -> AtLeastOneChild(x) -> HasWedding(x))\nall x. (Person(x) -> HasHoneymoonInParis(x) -> HasWedding(x))\nall x. (Wedding(x) -> HasHoneymoonInParis(x))\nsome x. (Wedding(x) -> WellAttended(x))\njohn : Person\njohn : AtLeastOneChild\njohn : -HasHoneymoonInParis\njohn : -HasWedding\njohn : HasWedding(x) -> WellAttended(x)\njohn : HasWedding(x) -> (HasHoneymoonInParis(x) or -HasHoneymoonInParis(x))\n</PREMISES>\n<CONCLUSION>\n-john : HasWedding(x) -> WellAttended(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasChild(x) -> HasWedding(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (Wedding(x) -> TravelToParisForHoneymoon(x))\nsome x. (Wedding(x) -> WellAttended(x))\njohn -> -HasChild(john) -> -HasWedding(john) & -TravelToParisForHoneymoon(john)\njohn -> HasWedding(john) -> ((HasWedding(john) & WellAttended(john)) | (-HasWedding(john) & TravelToParisForHoneymoon(john)))\n</PREMISES>\n<CONCLUSION>\njohn -> -HasWedding(john) & -WellAttended(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasChild(x) -> HasWedding(x))\nall x. (HasHoneymoonInParis(x) -> HasWedding(x))\nall x. (HasWeddingInJuly(x) -> HasHoneymoonInParis(x))\nsome x. (HasWeddingInJuly(x))\njohn -> (-HasChild(john) & -HasHoneymoonInParis(john) & -HasWedding(john))\njohn -> (-HasWeddingInJuly(john) | (HasWeddingInJuly(john) & HasHoneymoonInParis(john)))\n</PREMISES>\n<CONCLUSION>\n-john.HasWedding(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WellAttendedWedding(x))\nall x. (HasWedding(x) -> (WeddingInJuly(x) | -TravelToParisForHoneymoon(x)))\nall x. (HasWedding(x) & WellAttendedWedding(x) -> WeddingInJuly(x))\nall x. (HasWedding(x) & -WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nall x. ((HasWedding(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | -TravelToParisForHoneymoon(x)))\n</PREMISES>\n<CONCLUSION>\n-HasWedding(john) & -WellAttendedWedding(john)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (HasHoneymoonInParis(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> HasHoneymoonInParis(x))\nsome x. (WellAttended(x) & WeddingInJuly(x))\njohn :x. (AtLeastOneChild(x) -> (~HasHoneymoonInParis(x) & ~HasWedding(x)))\njohn :x. (HasWedding(x) & WellAttended(x) -> (WeddingInJuly(x) | ~WeddingInJuly(x) & HasHoneymoonInParis(x)))\n</PREMISES>\n<CONCLUSION>\n~HasWedding(john) & WellAttended(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (HasWedding(x) & TravelToParis(x) -> HasChild(x))\nall x. (Wedding(x) & Month(x) = July -> TravelToParis(x))\nsome x. (Wedding(x) & AtWellAttended(x))\nall x. (HasWedding(x) & AtWellAttended(x) -> Wedding(x) & Month(x) = July)\nall x. (HasWedding(x) -> (AtWellAttended(x) -> (Wedding(x) & Month(x) = July) | (-AtWellAttended(x) -> TravelToParis(x))))\n</PREMISES>\n\n<CONCLUSION>\n-HasWedding(john) & AtWellAttended(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> AtLeastOneChild(x) & Wedding(x))\nall x. (Person(x) & HoneymoonInParis(x) -> Wedding(x))\nall x. (Wedding(x) & Month(x) = July -> HoneymoonInParis(x))\nsome x. (Wedding(x) & AtWellAttended(x))\nall x. (AtLeastOneChild(x) & -HoneymoonInParis(x) & -Wedding(x))\nall x. (Wedding(x) & AtWellAttended(x) -> (Wedding(x) & Month(x) = July | -HoneymoonInParis(x)))\n</PREMISES>\n<CONCLUSION>\n-AtWellAttended(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WellAttendedWedding(x))\njohn hasAtLeastOneChild\n-TravelToParisForHoneymoon(john)\n-HasWedding(john)\nif john hasWedding(x) then WellAttendedWedding(x) | ( -WeddingInJuly(x) & TravelToParisForHoneymoon(john))\n</PREMISES>\n<CONCLUSION>\n-HasWedding(john)\nWellAttendedWedding(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelsToParisForHoneymoon(x) -> HasWedding(x))\nall x. (Wedding(x) -> TravelsToParisForHoneymoon(x))\nsome x. (Wedding(x) -> WellAttended(x))\njohn -> -HasWedding(john) & -TravelsToParisForHoneymoon(john)\njohn -> -HasWedding(john) | -TravelsToParisForHoneymoon(john)\njohn -> -TravelsToParisForHoneymoon(john) | (HasWedding(john) & -WellAttended(john)) | (HasWedding(john) & WellAttended(john) & -TravelsToParisForHoneymoon(john))\n</PREMISES>\n<CONCLUSION>\n-HasWedding(john) & -WellAttended(john)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 113,
  "responses": [
   [
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (HasHoneymoonInParis(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> HasHoneymoonInParis(x))\nsome x. (WellAttendedWedding(x))\njohn :~> -HasWedding(john) & -HasHoneymoonInParis(john)\njohn :~> (HasWedding(john) & WellAttendedWedding(john)) | ((-HasWedding(john) & HasHoneymoonInParis(john)) & (WellAttendedWedding(john) -> HasWeddingInJuly(john)))\n</PREMISES>\n<CONCLUSION>\njohn :~> AtLeastOneChild(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Wedding(x) -> AtLeastOneChild(x))\nall x. (ParisHoneymoon(x) -> Wedding(x))\nall x. (JulyWedding(x) -> ParisHoneymoon(x))\nsome x. (JulyWedding(x) & WellAttended(x))\n(-AtLeastOneChild(john) -> (-ParisHoneymoon(john) & -Wedding(john)))\n(-Wedding(x) & WellAttended(x)) -> (JulyWedding(x) | -ParisHoneymoon(x))\n</PREMISES>\n<CONCLUSION>\natLeastOneChild(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & Child(x) -> Wedding(x))\nall x. (Person(x) & HoneymoonInParis(x) -> Wedding(x))\nall x. (Wedding(x) & Month(x) = July -> HoneymoonInParis(x))\nsome x. (Wedding(x) & WellAttended(x))\n- John has a wedding -> (- Child(John) & - HoneymoonInParis(John) & - Wedding(John))\n- Wedding(x) & WellAttended(x) -> (Wedding(x) & (Month(x) = July) | - HoneymoonInParis(x))\n</PREMISES>\n<CONCLUSION>\n- John has a child\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nall x. (HasHoneymoonInParis(x) -> HasWedding(x))\nall x. (Wedding(x) belongsToParisHoneymoon(x) -> HasWedding(x))\nsome x. (Wedding(x) belongsToJuly(x))\njohn -> -HasWedding(john) & -HasHoneymoonInParis(john)\njohn HasWedding(x) -> (Wedding(x) belongsToJuly(x) | -Wedding(x) belongsToJuly(x) & HasHoneymoonInParis(x))\n</PREMISES>\n<CONCLUSION>\njohn HasAtLeastOneChild(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WeddingInJuly(x))\n-HasWedding(john) & HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HasWedding(john))\n-HasWedding(john) & HasAtLeastOneChild(john) & HasWeddingInJuly(x) -> (HasWeddingInJuly(john) | -TravelToParisForHoneymoon(john))\n</PREMISES>\n<CONCLUSION>\nHasAtLeastOneChild(john)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WellAttendedWedding(x))\n(-HasChild(john) -> -TravelToParisForHoneymoon(john) & -HasWedding(john))\n(-HasWedding(john) & WellAttendedWedding(john)) -> (HasWedding(john) & WeddingInJuly(john)) | (-HasWedding(john) & TravelToParisForHoneymoon(john))\n</PREMISES>\n<CONCLUSION>\nhasChild(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WeddingInJuly(x))\n-HasWedding(john) & AtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HasWedding(john))\n-HasWedding(john) & (HasWedding(john) & -WeddingInJuly(john)) -> TravelToParisForHoneymoon(john)\n</PREMISES>\n<CONCLUSION>\nAtLeastOneChild(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nall x. (HasHoneymoonInParis(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> HasHoneymoonInParis(x))\nsome x. (WeddingInJuly(x))\nx. (John & HasAtLeastOneChild(x))\nx. (John & -HasHoneymoonInParis(x) & -HasWedding(x))\nx. (John & HasWedding(x) & WeddingInJuly(x))\n</PREMISES>\n<CONCLUSION>\nx. (John & HasAtLeastOneChild(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (Wedding(x) -> TravelToParisForHoneymoon(x))\nsome x. (Wedding(x) -> WellAttended(x))\njohn :- (HasAtLeastOneChild(john) -> (-TravelToParisForHoneymoon(john) & -HasWedding(john)))\njohn :- (HasWedding(john) -> (WellAttended(john) | (-Wedding(john) & TravelToParisForHoneymoon(john)))\n</PREMISES>\n<CONCLUSION>\njohn :- HasAtLeastOneChild(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> HasChild(x))\nall x. (TravelToParis(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParis(x))\nsome x. (WeddingInJuly(x))\njohn -> -TravelToParis(john) & -HasWedding(john)\njohn -> (HasWedding(john) & HasGoodWedding(john)) | (HasWedding(john) & -WeddingInJuly(john) & TravelToParis(john))\n</PREMISES>\n<CONCLUSION>\njohn -> HasChild(john)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WeddingInJuly(x))\nif x. (AtLeastOneChild(x) -> -TravelToParisForHoneymoon(x) & -HasWedding(x))\nif x. (HasWedding(x) & -WeddingInJuly(x) & (some y. (WeddingInJuly(y) & -HasWedding(x)))) -> -TravelToParisForHoneymoon(x)\n</PREMISES>\n<CONCLUSION>\natLeastOneChild(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WeddingInJuly(x))\n(-JohnHasWedding & JohnHasAtLeastOneChild) | (-JohnHasWedding & -JohnTravelToParisForHoneymoon & -JohnHasWedding)\n(-JohnHasWedding & (WeddingInJuly & -JohnHasAtLeastOneChild)) | (-JohnHasWedding & JohnTravelToParisForHoneymoon)\n</PREMISES>\n<CONCLUSION>\nJohnHasAtLeastOneChild\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (HasHoneymoonInParis(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> HasHoneymoonInParis(x))\nsome x. (WeddingInJuly(x))\n-HasWedding(john) & AtLeastOneChild(john) -> -HasHoneymoonInParis(john) & -HasWedding(john)\n-HasWedding(john) & HasWedding(x) -> HasHoneymoonInParis(john) | (HasWedding(x) & -HasHoneymoonInParis(john))\n</PREMISES>\n<CONCLUSION>\nAtLeastOneChild(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WeddingInJuly(x) & WellAttended(x))\njohn :- (HasWedding(john) -> (AtLeastOneChild(john) & -TravelToParisForHoneymoon(john) & -HasWedding(john)))\njohn :- (HasWedding(john) & WellAttended(john) -> (HasWedding(john) & -WeddingInJuly(john) | -TravelToParisForHoneymoon(john)))\n</PREMISES>\n<CONCLUSION>\nhasAtLeastOneChild(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (ParisHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> ParisHoneymoon(x))\nsome x. (WellAttended(x) -> WeddingInJuly(x))\njohn -> -ParisHoneymoon(john) & -HasWedding(john)\njohn (HasWedding(john) & WellAttended(john)) -> (WeddingInJuly(john) | -ParisHoneymoon(john))\n</PREMISES>\n<CONCLUSION>\njohn (AtLeastOneChild(john))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Person(x) -> Child(x) -> Wedding(x))\nall x. (Person(x) -> Wedding(x) -> Paris(x))\nall x. (Paris(x) -> Wedding(x))\nsome x. (Wedding(x) -> WellAttended(x))\njohn -> (-Child(john) -> (-Paris(john) & -Wedding(john)))\njohn -> (Wedding(john) -> (Wedding(john) -> July(x) | -Paris(john)))\n</PREMISES>\n<CONCLUSION>\njohn -> Child(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Wedding(x) -> AtLeastOneChild(x))\nall x. (TravelToParis(x) -> Wedding(x))\nall x. (Wedding(x) -> TravelToParis(x) & Month(x) = July)\nsome x. (Wedding(x) & WellAttended(x))\nx. (John & AtLeastOneChild(x) -> -TravelToParis(x) & -Wedding(x))\nx. (Wedding(x) & WellAttended(x) -> (Wedding(x) & Month(x) = July) | (-Wedding(x) & TravelToParis(x)))\n</PREMISES>\n<CONCLUSION>\nx. (John & AtLeastOneChild(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelsToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelsToParisForHoneymoon(x))\nsome x. (WeddingInJuly(x) & WellAttended(x))\n-HasWedding(john) & AtLeastOneChild(john) -> -TravelsToParisForHoneymoon(john) & -HasWedding(john)\n-HasWedding(john) & WellAttended(john) -> (WeddingInJuly(john) | -TravelsToParisForHoneymoon(john))\n</PREMISES>\n<CONCLUSION>\nAtLeastOneChild(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (HasHoneymoonInParis(x) -> HasWedding(x))\nall x. (HasWeddingInJuly(x) -> HasHoneymoonInParis(x))\nsome x. (HasWeddingInJuly(x))\n-HasWedding(John) & HasAtLeastOneChild(John) & HasHoneymoonInParis(John) & HasWeddingInJuly(John)\n-HasWedding(John) & HasAtLeastOneChild(John) & HasHoneymoonInParis(John) & HasWeddingInJuly(John)\nHasWedding(John) & HasAtLeastOneChild(John) & HasHoneymoonInParis(John) & HasWeddingInJuly(John) -> HasWeddingInJuly(John) | (HasWeddingInJuly(John) & -HasHoneymoonInParis(John))\n</PREMISES>\n<CONCLUSION>\nHasAtLeastOneChild(John)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WellAttendedWedding(x))\n-HasWedding(john) & HasAtLeastOneChild(john) -> -TravelToParisForHoneymoon(john) & -HasWedding(john)\n-HasWedding(john) & HasAtLeastOneChild(john) -> WellAttendedWedding(john) | (HasWedding(john) & -WellAttendedWedding(john) -> TravelToParisForHoneymoon(john))\n</PREMISES>\n<CONCLUSION>\nHasAtLeastOneChild(john)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (Wedding(x) -> TravelToParisForHoneymoon(x))\nsome x. (Wedding(x) -> WellAttended(x))\njohn -> (AtLeastOneChild(john) & -TravelToParisForHoneymoon(john) & -HasWedding(john))\njohn -> ((HasWedding(john) -> (Wedding(john) -> (WellAttended(john) | -TravelToParisForHoneymoon(john))))\n</PREMISES>\n<CONCLUSION>\nAtLeastOneChild(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WellAttended(x) & WeddingInJuly(x))\n-HasWedding(john) & AtLeastOneChild(john) -> -TravelToParisForHoneymoon(john) & -HasWedding(john)\n-HasWedding(john) & WellAttended(john) -> (WeddingInJuly(john) | -TravelToParisForHoneymoon(john))\n</PREMISES>\n<CONCLUSION>\nAtLeastOneChild(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> HasChild(x))\nall x. (HasWedding(x) & TravelToParis(x) & Honeymoon(x) -> HasChild(x))\nall x. (Wedding(x) & Month(x) = July & HasWedding(x) -> TravelToParis(x) & Honeymoon(x))\nsome x. (Wedding(x) & Month(x) = July & Attended(x))\njohn & HasChild(john) -> (-TravelToParis(john) & -HasWedding(john))\njohn & HasWedding(x) & Attended(x) -> ((HasWedding(x) & Month(x) = July) | (-HasWedding(x) & TravelToParis(john) & Honeymoon(john)))\n</PREMISES>\n<CONCLUSION>\njohn & HasChild(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (HasHoneymoonInParis(x) -> HasWedding(x))\nall x. (Wedding(x) & HasHoneymoonInParis(x) -> HasHoneymoonInJuly(x))\nsome x. (Wedding(x) & HasHoneymoonInJuly(x))\nall x. (HasWedding(x) & HasHoneymoonInJuly(x) -> WellAttended(x))\nall x. (HasWedding(x) -> (-HasHoneymoonInParis(x) & -HasHoneymoonInJuly(x)))\nall x. (HasWedding(x) & HasHoneymoonInJuly(x) -> HasAtLeastOneChild(x))\nall x. (HasWedding(x) & HasHoneymoonInJuly(x) & HasHoneymoonInParis(x) -> HasAtLeastOneChild(x))\nsome x. (HasHoneymoonInParis(x) & HasHoneymoonInJuly(x))\nall x. ((HasWedding(x) & HasHoneymoonInJuly(x)) -> HasHoneymoonInParis(x))\nall x. ((HasWedding(x)) -> Has",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelsToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelsToParisForHoneymoon(x))\nsome x. (WeddingInJuly(x))\n-HasWedding(john) & AtLeastOneChild(john) -> -TravelsToParisForHoneymoon(john) & -HasWedding(john)\n-HasWedding(john) & HasWedding(x) & WeddingInJuly(x) -> TravelsToParisForHoneymoon(john) | ( -WeddingInJuly(x) & TravelsToParisForHoneymoon(john))\nAtLeastOneChild(john) -> -HasWedding(john) & -TravelsToParisForHoneymoon(john) & HasWedding(x) | ( -TravelsToParisForHoneymoon(john) & WeddingInJuly(x))\n</PREMISES>\n<CONCLUSION>\nAtLeastOneChild(john)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 114,
  "responses": [
   [
    "<PREMISES>\nall x. (Child(x) -> Wedding(x))\nall x. (Wedding(x) -> AtLeastOneChild(x))\nall x. (HoneymoonInParis(x) -> Wedding(x))\nall x. (Wedding(x) -> ParisForHoneymoon(x))\nsome x. (Wedding(x) -> WellAttended(x))\nx. (Child(x) -> -ParisForHoneymoon(x) & -Wedding(x))\nx. (Wedding(x) -> (ParisForHoneymoon(x) & -WellAttended(x)) | (-ParisForHoneymoon(x) & Wedding(x)))\n</PREMISES>\n<CONCLUSION>\n-Child(john) & -ParisForHoneymoon(john) & -Wedding(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Child(x) -> Wedding(x))\nall x. (Wedding(x) -> AtLeastOneChild(x))\nall x. (ParisTrip(x) -> Wedding(x))\nall x. (Wedding(x) -> ParisTrip(x))\nsome x. (WellAttended(x) & Wedding(x))\nall x. (John(x) -> -ParisTrip(x) & -Wedding(x))\nall x. ((John(x) & Wedding(x)) -> (WellAttended(x) & July(x)) | ((-John(x) & Wedding(x)) -> ParisTrip(x)))\n</PREMISES>\n<CONCLUSION>\n-John(x) & -ParisTrip(x) & -Wedding(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasChild(x) -> HasWedding(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (HasWedding(x) & Month(x) = July -> TravelToParisForHoneymoon(x))\nsome x. (HasWedding(x) & WellAttended(x) -> HasWedding(x))\nall x. (HasWedding(x) -> (HasWedding(x) & July(x) | -TravelToParisForHoneymoon(x)))\n</PREMISES>\n<CONCLUSION>\n-HasWedding(john) & -TravelToParisForHoneymoon(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & HasChild(x) -> HasWedding(x))\nall x. (Person(x) & HasHoneymoonInParis(x) -> HasWedding(x))\nall x. (Wedding(x) & HasDateInJuly(x) -> HasHoneymoonInParis(x))\nsome x. (Wedding(x) & HasDateInJuly(x) & HasAttendees(x))\nx. (John & HasChild(x)) -> -HasHoneymoonInParis(x) & -HasWedding(x)\nx. (Person(x) & HasWedding(x) & HasAttendees(x)) -> (HasDateInJuly(x) | -HasHoneymoonInParis(x))\n</PREMISES>\n<CONCLUSION>\n-HasHoneymoonInParis(john) & -HasWedding(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nall x. (HasHoneymoonInParis(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> HasHoneymoonInParis(x))\nsome x. (WellAttended(x) -> WeddingInJuly(x))\nx. (HasAtLeastOneChild(x) -> -HasHoneymoonInParis(x) & -HasWedding(x))\nx. (HasWedding(x) & WellAttended(x) -> (WeddingInJuly(x) | -WeddingInJuly(x)) & x. (-HasHoneymoonInParis(x) | -HasHoneymoonInParis(x)))\n</PREMISES>\n\n<CONCLUSION>\n-HasWedding(john) & -HasHoneymoonInParis(john)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WeddingInJuly(x) & WellAttended(x))\njohn HasAtLeastOneChild -> ( -TravelToParisForHoneymoon(john) & -HasWedding(john))\njohn HasWedding -> ( (WellAttended(john) & -WeddingInJuly(john)) | (-WellAttended(john) & TravelToParisForHoneymoon(john)))\n</PREMISES>\n\n<CONCLUSION>\n-HasWedding(john) & -TravelToParisForHoneymoon(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasChild(x) -> Wedding(x))\nall x. (ParisForHoneymoon(x) -> Wedding(x))\nall x. (JulyWedding(x) -> ParisForHoneymoon(x))\nsome x. (WellAttended(x) -> JulyWedding(x))\n(-HasChild(john) -> (-ParisForHoneymoon(john) & -Wedding(john)))\n(-Wedding(john), -ParisForHoneymoon(john)) -> HasChild(john)\n(-WellAttended(john), -JulyWedding(john)) -> ParisForHoneymoon(john)\n</PREMISES>\n<CONCLUSION>\n-Wedding(john) & -ParisForHoneymoon(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasChild(x) -> HasWedding(x))\nall x. (HasHoneymoonInParis(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> HasHoneymoonInParis(x))\nsome x. (WellAttended(x) & WeddingInJuly(x))\nall x. ((HasChild(x) -> -HasHoneymoonInParis(x)) & -HasWedding(x))\nall x. ((HasWedding(x) & WellAttended(x)) -> (HasWeddingInJuly(x) | -HasHoneymoonInParis(x)))\n</PREMISES>\n<CONCLUSION>\n-HasChild(john) & -HasHoneymoonInParis(john) & -HasWedding(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> HasChild(x) & HasAtLeastOneChild(x))\nall x. (Person(x) & HasWedding(x) -> HasChild(x))\nall x. (Wedding(x) & HasDate(x) = July -> Person(x) & HasWedding(x))\nsome x. (Wedding(x) & HasAttendees(x) > 0)\nall x. (HasChild(x) -> -HasWedding(x) & -TravelsToParis(x))\nall x. (HasWedding(x) & HasAttendees(x) > 0 -> (HasWedding(x) & HasDate(x) = July) | (-HasWedding(x) & TravelsToParis(x)))\n</PREMISES>\n<CONCLUSION>\n-HasWedding(john) & -TravelsToParis(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & HasChild(x) -> HasWedding(x))\nall x. (Person(x) & HasWedding(x) -> HasHoneymoonInParis(x))\nall x. (HasWedding(x) & HasHoneymoonInParis(x) -> HasWeddingInJuly(x))\nsome x. (HasWedding(x) & HasAttendees(x))\nx. (HasChild(x) -> -HasHoneymoonInParis(x) & -HasWedding(x))\nx. (HasWedding(x) & HasAttendees(x) -> (HasWeddingInJuly(x) | -HasWeddingInJuly(x)) & (-HasHoneymoonInParis(x) | -HasWeddingInJuly(x)))\n</PREMISES>\n<CONCLUSION>\n-HasChild(john) & -HasWedding(john) & -HasHoneymoonInParis(john)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nall x. (HasHoneymoonInParis(x) -> HasWedding(x))\nall x. (Wedding(x) & HasHoneymoonInParis(x) -> HasWeddingInJuly(x))\nsome x. (Wedding(x) & HasWeddingInJuly(x))\njohn & hasAtLeastOneChild(john) -> (-HasHoneymoonInParis(john) & -HasWedding(john))\njohn & HasWedding(x) & HasWedding(x) & HasWeddingInJuly(x) -> (-HasHoneymoonInParis(john) & HasWeddingInJuly(x))\njohn & HasWedding(x) & HasWeddingInJuly(x) -> (-HasHoneymoonInParis(john) & HasHoneymoonInParis(x))\n</PREMISES>\n<CONCLUSION>\njohn & -HasWedding(john) & -HasHoneymoonInParis(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & HasChild(x) -> HasWedding(x))\nall x. (Person(x) & HasWedding(x) -> HasHoneymoonInParis(x))\nall x. (Wedding(x) & HasDate(x) = July -> HasHoneymoonInParis(x))\nsome x. (Wedding(x) & HasDate(x) = July & HasAttendees(x) -> HasAttendees(x))\nx. (John & HasChild(x) -> -HasHoneymoonInParis(x) & -HasWedding(x))\nx. (HasWedding(x) & HasAttendees(x) -> (HasWedding(x) & HasDate(x) = July) | (-HasWedding(x) & HasHoneymoonInParis(x)))\n</PREMISES>\n<CONCLUSION>\n-HasWedding(john) & -HasHoneymoonInParis(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasChild(x) -> HasWedding(x))\nall x. (TravelToParis(x) -> HasWedding(x))\nall x. (Wedding(x) -> TravelToParis(x))\nsome x. (Wedding(x) -> WellAttended(x))\nx. (HasChild(john) -> -TravelToParis(john) & -HasWedding(john))\nx. (HasWedding(x) -> WellAttended(x) | (not x. (HasWedding(x) & -TravelToParis(x))))\n</PREMISES>\n\n<CONCLUSION>\n-HasWedding(john) & -TravelToParis(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasChild(x) -> HasWedding(x))\nall x. (HasHoneymoonInParis(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> HasHoneymoonInParis(x))\nsome x. (WeddingInJuly(x) & WellAttended(x))\njohn -> -HasHoneymoonInParis(john) & -HasWedding(john)\njohn (HasWedding(john) & WellAttended(john)) -> (HasWedding(john) & WeddingInJuly(john)) | (-HasWedding(john) & HasHoneymoonInParis(john))\n</PREMISES>\n<CONCLUSION>\n-john (HasHoneymoonInParis(john) & WellAttended(john)) & -john (HasWedding(john) & WellAttended(john))\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasChild(x) -> HasWedding(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WeddingInJuly(x) & WellAttended(x))\njohn. hasChild(john) -> (-TravelToParisForHoneymoon(john) & -HasWedding(john))\njohn. hasWedding(john) & WellAttended(john) -> (HasWeddingInJuly(john) | -TravelToParisForHoneymoon(john))\n</PREMISES>\n\n<CONCLUSION>\n-HasChild(john) & -HasWedding(john) & -TravelToParisForHoneymoon(john)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WeddingInJuly(x) & WellAttended(x))\njohn :- not HasAtLeastOneChild(john) & not TravelToParisForHoneymoon(john) & not HasWedding(john)\njohn :- HasWedding(john) & (HasWeddingInJuly(john) | -HasWeddingInJuly(john)) & (TravelToParisForHoneymoon(john) | -TravelToParisForHoneymoon(john))\n</PREMISES>\n<CONCLUSION>\njohn :- not HasWedding(john) & not TravelToParisForHoneymoon(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WeddingInJuly(x) & WellAttended(x))\njohn :~ (HasAtLeastOneChild(john) -> (~TravelToParisForHoneymoon(john) & ~HasWedding(john)))\njohn :~ (HasWedding(john) & WellAttended(john) -> (HasWedding(john) & WeddingInJuly(john)) | (~HasWedding(john) & TravelToParisForHoneymoon(john)))\n</PREMISES>\n<CONCLUSION>\n~HasWedding(john) & ~TravelToParisForHoneymoon(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasChild(x) -> Wedding(x))\nall x. (ParisHoneymoon(x) -> Wedding(x))\nall x. (Wedding(x) -> ParisHoneymoon(x))\nsome x. (Wedding(x) & WellAttended(x))\njohn -> (-HasChild(john) & -ParisHoneymoon(john) & -Wedding(john))\njohn -> ((Wedding(john) & WellAttended(john)) | ((-Wedding(john)) & ParisHoneymoon(john)))\n</PREMISES>\n\n<CONCLUSION>\njohn -> (-HasChild(john) & -ParisHoneymoon(john) & -Wedding(john))\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasChild(x) -> HasWedding(x))\nall x. (HasWedding(x) -> HasParisHoneymoon(x))\nall x. (HasWedding(x) & HasParisHoneymoon(x) -> HasParisWedding(x))\nsome x. (HasWedding(x) & HasParisWedding(x))\njohn. (HasChild(john) -> -HasParisHoneymoon(john) & -HasWedding(john))\njohn. (HasWedding(x) & HasParisWedding(x) -> (HasParisWedding(x) -> HasParisWedding(x)) | (-HasParisWedding(x) -> HasParisHoneymoon(x)))\n</PREMISES>\n<CONCLUSION>\njohn. (-HasParisHoneymoon(john) & -HasWedding(john))\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (HasHoneymoonInParis(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> HasHoneymoonInParis(x))\nsome x. (WellAttended(x) & WeddingInJuly(x))\njohn hasAtLeastOneChild -> (-HasHoneymoonInParis(john) & -HasWedding(john))\njohn HasWedding(x) & WellAttended(x) -> (HasWeddingInJuly(x) | -HasWeddingInJuly(x)) & (-HasHoneymoonInParis(john) | HasWeddingInJuly(x))\n</PREMISES>\n<CONCLUSION>\n-HasWedding(john) & -HasHoneymoonInParis(john)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelToParis(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParis(x))\nsome x. (WellAttendedWedding(x))\njohn :~> AtLeastOneChild(john)\njohn :~> ~TravelToParis(john) & ~HasWedding(john)\njohn :~> ~WellAttendedWedding(john) | (john :~> HasWedding(john) & ~WeddingInJuly(john)) & (john :~> WeddingInJuly(john) | ~WellAttendedWedding(john))\n</PREMISES>\n<CONCLUSION>\n~HasWedding(john) & ~TravelToParis(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> HasAtLeastOneChild(x))\nall x. (TravelsToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelsToParisForHoneymoon(x))\nsome x. (WeddingInJuly(x) & WellAttended(x))\njohn hasAtLeastOneChild -> (not TravelsToParisForHoneymoon(john) & not HasWedding(john))\njohn HasWedding(x) & WellAttended(x) -> (HasWeddingInJuly(x) | -TravelsToParisForHoneymoon(john))\n</PREMISES>\n<CONCLUSION>\n-HasWedding(john) & -TravelsToParisForHoneymoon(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Child(x) -> Wedding(x))\nall x. (Wedding(x) -> x. (Child(x)))\nall x. (Wedding(x) -> Paris(x))\nsome x. (Wedding(x) & July(x))\n(x. (Child(x)) -> -Paris(x) & -Wedding(x))\n(x. (Wedding(x)) -> (July(x) | -Paris(x)))\n</PREMISES>\n<CONCLUSION>\n-Child(john) & -Paris(john) & -Wedding(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & HasChild(x) -> HasWedding(x))\nall x. (Person(x) & HasHoneymoonInParis(x) -> HasWedding(x))\nall x. (Wedding(x) & HasMonth(x) = July -> HasHoneymoonInParis(x))\nsome x. (Wedding(x) & HasAttendance(x) > 0)\njohn & HasChild(john) -> -HasHoneymoonInParis(john) & -HasWedding(john)\njohn & HasWedding(john) & HasAttendance(john) > 0 -> (HasMonth(john) = July or -HasHoneymoonInParis(john))\n</PREMISES>\n<CONCLUSION>\n-HasChild(john) & -HasHoneymoonInParis(john) & -HasWedding(john)\n</CONCLUSION>",
    "<PREMISES>\nall x. (HasWedding(x) -> AtLeastOneChild(x))\nall x. (TravelToParisForHoneymoon(x) -> HasWedding(x))\nall x. (WeddingInJuly(x) -> TravelToParisForHoneymoon(x))\nsome x. (WellAttended(x) & WeddingInJuly(x))\n(-HasChild(john) -> -TravelToParisForHoneymoon(john) & -HasWedding(john))\n(-HasWedding(john) & WellAttended(john)) | ((-HasWedding(john) & -WellAttended(john)) -> TravelToParisForHoneymoon(john))\n</PREMISES>\n<CONCLUSION>\n-HasWedding(john) & -TravelToParisForHoneymoon(john)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 115,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -HasTeeth(Platypus)\nTEXT: Platypus are mammals.\nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> HasTeeth(Human)\n</EVALUATE>\n\n<PREMISES>\n[BG] \n</PREMISES>\n<CONCLUSION>\nPlatypus are mammals with no teeth.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Platypus are mammals.\nFOL: Platypus -> Mammal(Platypus)\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(Platypus)\nTEXT: Platypus are mammals with no teeth.\nFOL: Platypus -> (Mammal(Platypus) & -HasTeeth(Platypus))\n</EVALUATE>",
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> NoTeeth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> HasTeeth(Human)\n</PREMISES>\n<CONCLUSION>\nPlatypus are mammals with no teeth.\nFOL: Mammal(Platypus) & -HasTeeth(Platypus)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Platypus are mammals with no teeth.\nFOL: Mammal(Platypus) & -HasTeeth(Platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -Tooth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> Tooth(Human)\n</EVALUATE>\n\n<PREMISES>\n[BG]\n</PREMISES>\n\n<CONCLUSION>\nTEXT: Platypus are mammals with no teeth.\nFOL: Platypus & Mammal(Platypus) & -Tooth(Platypus)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Platypus are mammals with no teeth.\nFOL: Platypus & Mammal(Platypus) & -Tooth(Platypus)\n</EVALUATE>",
    "<PREMISES>\n[BG]\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals.\nFOL: Platypus(Mammal)\nTEXT: Humans have teeth.\nFOL: Human(Tooth)\n</PREMISES>\n<CONCLUSION>\n[BG]\nTEXT: Platypus are mammals with no teeth.\nFOL: Platypus(Mammal & -Tooth)\n</CONCLUSION>",
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(Mammal(platypus))\nTEXT: Humans have teeth.\nFOL: Human(Tooth(human))\n</PREMISES>\n<CONCLUSION>\nPlatypus are mammals with no teeth.\nFOL: (Platypus(Mammal(platypus)) & -Tooth(platypus))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> NoTeeth\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal\nTEXT: Humans have teeth.\nFOL: Human -> HasTeeth\n</PREMISES>\n<CONCLUSION>\nPlatypus are mammals with no teeth.\nFOL: Platypus & Mammal & NoTeeth\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Platypus are mammals with no teeth.\nFOL: (Platypus & Mammal & NoTeeth)\n</EVALUATE>",
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> NoTeeth\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal\nTEXT: Humans have teeth.\nFOL: Humans -> HasTeeth\n</PREMISES>\n<CONCLUSION>\nPlatypus are mammals with no teeth.\nFOL: Platypus & Mammal & NoTeeth\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Platypus are mammals with no teeth.\nFOL: Platypus & Mammal & NoTeeth\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -Tooth(Platypus)\nTEXT: Platypus are mammals.\nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> Tooth(Human)\n</EVALUATE>\n\n<PREMISES>\n[BG]\n</PREMISES>\n\n<EVALUATE>\nTEXT: Platypus are mammals with no teeth.\nFOL: Platypus & Mammal(Platypus) & -Tooth(Platypus)\n</EVALUATE>",
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nPlatypus have no teeth.\nFOL: Platypus -> NoTeeth\nPlatypus are mammals. \nFOL: Platypus -> Mammal\nHumans have teeth.\nFOL: Humans -> HasTeeth\n</PREMISES>\n<CONCLUSION>\nPlatypus are mammals with no teeth.\nFOL: Platypus & Mammal & NoTeeth\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -HasTeeth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Humans -> HasTeeth(Humans)\n</EVALUATE>\n\n<PREMISES>\n[BG]\nTEXT: Platypus are mammals with no teeth.\nFOL: Platypus -> Mammal(Platypus) & -HasTeeth(Platypus)\n</PREMISES>\n\n<EVALUATE>\nTEXT: Platypus are mammals with no teeth.\nFOL: Platypus -> Mammal(Platypus) & -HasTeeth(Platypus)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -Tooth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> Tooth(Human)\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: Platypus are mammals with no teeth.\nFOL: Platypus & Mammal(Platypus) & -Tooth(Platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> Tooth(-1)\nTEXT: Platypus are mammals. \nFOL: Platypus & Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> Tooth(1)\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: Platypus are mammals with no teeth.\nFOL: Platypus & Mammal(Platypus) & -Tooth(Platypus)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(mammal)\nTEXT: Humans have teeth.\nFOL: Human(tooth)\nTEXT: Platypus are mammals with no teeth.\nFOL: Platypus(mammal) & -Tooth(platypus)\n</EVALUATE>",
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(mammal)\nTEXT: Humans have teeth.\nFOL: Human(tooth)\n</PREMISES>\n<CONCLUSION>\nPlatypus are mammals with no teeth.\nFOL: Platypus(mammal) & -Tooth(platypus)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Platypus are mammals with no teeth.\nFOL: Platypus(mammal) & -Tooth(platypus)\n</EVALUATE>",
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> NoTeeth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> HasTeeth(Human)\n</PREMISES>\n<CONCLUSION>\nPlatypus are mammals with no teeth.\nFOL: Platypus & Mammal(Platypus) & NoTeeth(Platypus)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\n[BG]\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> NoTeeth(Platypus)\nTEXT: Platypus are mammals.\nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> HasTeeth(Human)\n</PREMISES>\n<CONCLUSION>\n[BG]\nTEXT: Platypus are mammals with no teeth.\nFOL: Platypus -> (Mammal(Platypus) & NoTeeth(Platypus))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(Mammal(platypus))\nTEXT: Humans have teeth.\nFOL: Human(Tooth(human))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Platypus are mammals with no teeth.\nFOL: Platypus(Mammal(platypus) & -Tooth(platypus))\n</EVALUATE>",
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> NoTeeth\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal\nTEXT: Humans have teeth.\nFOL: Humans -> HasTeeth\n</PREMISES>\n<CONCLUSION>\nPlatypus are mammals with no teeth.\nFOL: Platypus -> Mammal & Platypus -> NoTeeth\n</CONCLUSION>",
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(mammal)\nTEXT: Humans have teeth.\nFOL: Humans(teeth)\n</PREMISES>\n<CONCLUSION>\nPlatypus are mammals with no teeth.\nFOL: Platypus(mammal) & -HasTeeth(platypus)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Platypus are mammals with no teeth.\nFOL: Platypus(mammal) & -HasTeeth(platypus)\n</EVALUATE>",
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nPlatypus have no teeth.\nFOL: Platypus -> NoTeeth(Platypus)\nPlatypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nHumans have teeth.\nFOL: Human -> HasTeeth(Human)\n</PREMISES>\n<CONCLUSION>\nPlatypus are mammals with no teeth.\nFOL: Platypus & Mammal(Platypus) & NoTeeth(Platypus)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\n[BG]\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> NoTeeth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Humans -> HasTeeth(Humans)\n</PREMISES>\n<CONCLUSION>\nTEXT: Platypus are mammals with no teeth.\nFOL: Platypus -> (Mammal(Platypus) & NoTeeth(Platypus))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Platypus are mammals with no teeth.\nFOL: Platypus -> (Mammal(Platypus) & NoTeeth(Platypus))\n</EVALUATE>",
    "<PREMISES>\n[BG]\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(mammal)\nTEXT: Humans have teeth.\nFOL: Human(HasTeeth)\n</PREMISES>\n<CONCLUSION>\n[BG]\nTEXT: Platypus are mammals with no teeth.\nFOL: Platypus(mammal) & -HasTeeth(platypus)\n</CONCLUSION>",
    "<PREMISES>\n[BG]\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(Mammal(platypus))\nTEXT: Humans have teeth.\nFOL: Human(Tooth(human))\n</PREMISES>\n<CONCLUSION>\n[BG]\nTEXT: Platypus are mammals with no teeth.\nFOL: Platypus(Mammal(platypus) & -Tooth(platypus))\n</CONCLUSION>",
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(Mammal(platypus))\nTEXT: Humans have teeth.\nFOL: Human(HasTeeth(human))\n</PREMISES>\n<CONCLUSION>\nPlatypus are mammals with no teeth.\nFOL: Platypus(Mammal(platypus) & -HasTeeth(platypus))\n</CONCLUSION>",
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(mammal)\nTEXT: Humans have teeth.\nFOL: Human(tooth)\n</PREMISES>\n<CONCLUSION>\nPlatypus are mammals with no teeth.\nFOL: Platypus(mammal) & -Tooth(platypus)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 116,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(mammal)\nTEXT: Humans have teeth.\nFOL: Human(tooth)\nTEXT: Platypus are reptiles.\nFOL: -Mammal(platypus) | Mammal(reptile)\n</EVALUATE>",
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(mammal)\nTEXT: Humans have teeth.\nFOL: Human(hasTeeth)\n</PREMISES>\n<CONCLUSION>\nPlatypus are reptiles.\nFOL: -Mammal(platypus) & Reptile(platypus)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(mammal)\nTEXT: Humans have teeth.\nFOL: Human(tooth)\nTEXT: Platypus are reptiles.\nFOL: -Mammal(platypus) | Mammal(reptile)\n</EVALUATE>",
    "<PREMISES>\n[BG]\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(Mammal(platypus))\nTEXT: Humans have teeth.\nFOL: Human(Tooth(human))\n</PREMISES>\n<CONCLUSION>\nTEXT: Platypus are reptiles.\nFOL: -Mammal(platypus) & Reptile(platypus)\n</CONCLUSION>\n\n<EVALUATE>\nFOL: exists x. (Mammal(x) & Tooth(x)) \nFOL: -Tooth(platypus)\nFOL: Platypus(Mammal(platypus))\nFOL: Human(Tooth(human))\nFOL: -Mammal(platypus) & Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals.\nFOL: Platypus(Mammal(platypus))\nTEXT: Humans have teeth.\nFOL: Human(Tooth(human))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(Mammal)\nTEXT: Humans have teeth.\nFOL: Human(Tooth)\nTEXT: Platypus are reptiles.\nFOL: -Mammal(platypus) | Mammal(platypus)\n</EVALUATE>",
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -Tooth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> Tooth(Human)\n</PREMISES>\n<CONCLUSION>\nPlatypus are reptiles.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Platypus are reptiles.\nFOL: -Mammal(Platypus) & Reptile(Platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(mammal)\nTEXT: Humans have teeth.\nFOL: Human(tooth)\nTEXT: Platypus are reptiles.\nFOL: -Mammal(platypus) & Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(mammal)\nTEXT: Humans have teeth.\nFOL: Human(tooth)\nTEXT: Platypus are reptiles.\nFOL: -Mammal(platypus) & Platypus(reptile)\n</EVALUATE>",
    "<PREMISES>\n[BG]\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -HasTeeth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Humans -> HasTeeth(Humans)\n</PREMISES>\n<CONCLUSION>\nTEXT: Platypus are reptiles.\nFOL: -Mammal(Platypus) | Mammal(Platypus) & Reptile(Platypus)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Platypus are reptiles.\nFOL: -Mammal(Platypus) | Mammal(Platypus) & Reptile(Platypus)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(mammal)\nTEXT: Humans have teeth.\nFOL: Humans(hasTeeth)\n</PREMISES>\n<CONCLUSION>\nPlatypus are reptiles.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Platypus are mammals. \nFOL: Platypus(mammal)\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are reptiles.\nFOL: -Mammal(platypus) | Reptile(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(mammal)\nTEXT: Humans have teeth.\nFOL: Human(tooth)\nTEXT: Platypus are reptiles.\nFOL: -Mammal(platypus)\n</EVALUATE>",
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -Tooth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> Tooth(Human)\n</PREMISES>\n<CONCLUSION>\nPlatypus are reptiles.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Platypus are reptiles.\nFOL: -Mammal(Platypus) & Reptile(Platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(Mammal)\nTEXT: Humans have teeth.\nFOL: Human(Tooth)\nTEXT: Platypus are reptiles.\nFOL: -Mammal(platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus(x) & -Tooth(x)\nTEXT: Platypus are mammals. \nFOL: Platypus(x) & Mammal(x)\nTEXT: Humans have teeth.\nFOL: Human(x) & Tooth(x)\n</EVALUATE>\n\n<CONCLUSION>\nFOL: Platypus(x) & Reptile(x)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -Tooth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> Tooth(Human)\n</EVALUATE>\n\n<CONCLUSION>\nFOL: -Reptile(Platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(Mammal(platypus))\nTEXT: Humans have teeth.\nFOL: Human(Tooth(human))\nTEXT: Platypus are reptiles.\nFOL: -Mammal(platypus) | Mammal(Reptile(platypus))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -Tooth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> Tooth(Human)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Platypus are reptiles.\nFOL: -Mammal(Platypus)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -Tooth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> Tooth(Human)\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: Platypus are reptiles.\nFOL: -Mammal(Platypus)\n</EVALUATE>",
    "<PREMISES>\n[BG]\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals.\nFOL: Platypus(Mammal(platypus))\nTEXT: Humans have teeth.\nFOL: HasTeeth(humans)\n</BG>\n<CONCLUSION>\nTEXT: Platypus are reptiles.\nFOL: -Mammal(platypus) & Reptile(platypus)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Platypus are reptiles.\nFOL: -Mammal(platypus) & Reptile(platypus)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\n[BG]\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(Mammal(platypus))\nTEXT: Humans have teeth.\nFOL: Human(HasTeeth(human))\n</PREMISES>\n<CONCLUSION>\nTEXT: Platypus are reptiles.\nFOL: -Mammal(platypus) | Mammal(Reptile(platypus))\n</CONCLUSION>",
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nPlatypus have no teeth.\nFOL: -HasTeeth(platypus)\nPlatypus are mammals. \nFOL: Platypus(mammal)\nHumans have teeth.\nFOL: Human(hasTeeth)\n</PREMISES>\n<CONCLUSION>\nPlatypus are reptiles.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(mammal)\nTEXT: Humans have teeth.\nFOL: Human(hasTeeth)\nTEXT: Platypus are reptiles.\nFOL: -Mammal(platypus) & Reptile(platypus)\n</EVALUATE>",
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(Mammal(platypus))\nTEXT: Humans have teeth.\nFOL: Human(Tooth(human))\n</PREMISES>\n<CONCLUSION>\nPlatypus are reptiles.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Platypus are mammals. \nFOL: Platypus(Mammal(platypus))\nTEXT: Platypus are not mammals.\nFOL: -Mammal(platypus)\nTEXT: Platypus are not mammals.\nFOL: Platypus(Reptile(platypus))\n</EVALUATE>",
    "<PREMISES>\n[BG]\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(Mammal(platypus))\nTEXT: Humans have teeth.\nFOL: Human(Tooth(human))\n</PREMISES>\n<CONCLUSION>\nTEXT: Platypus are reptiles.\nFOL: -Mammal(platypus) | Mammal(platypus) & Reptile(platypus)\n</CONCLUSION>",
    "<PREMISES>\n[BG]\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals.\nFOL: Platypus(mammal)\nTEXT: Humans have teeth.\nFOL: Human(tooth)\n</PREMISES>\n<CONCLUSION>\nTEXT: Platypus are reptiles.\nFOL: -Mammal(platypus)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Platypus are reptiles.\nFOL: -Mammal(platypus)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 117,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -Tooth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> Tooth(Human)\n</EVALUATE>\n\n<PREMISES>\n[BG] Some mammals have teeth.\nPlatypus have no teeth.\nPlatypus are mammals. \nHumans have teeth.\n</PREMISES>\n<CONCLUSION>\nTEXT: Humans are mammals.\nFOL: Human -> Mammal(Human)\n</EVALUATE>",
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(mammal)\nTEXT: Humans have teeth.\nFOL: Humans(teeth)\n</PREMISES>\n<CONCLUSION>\nHumans are mammals.\nFOL: Humans(mammal)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(mammal)\nTEXT: Humans have teeth.\nFOL: Humans(teeth)\nTEXT: Humans are mammals.\nFOL: Humans(mammal)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus(x) -> -HasTeeth(x)\nTEXT: Platypus are mammals. \nFOL: Platypus(x) & Mammal(x)\nTEXT: Humans have teeth.\nFOL: Human(x) -> HasTeeth(x)\n</EVALUATE>\n\n<PREMISES>\n[BG]\n</PREMISES>\n\n<CONCLUSION>\nTEXT: Humans are mammals.\nFOL: Human(x) & Mammal(x)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Humans are mammals.\nFOL: Human(x) & Mammal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -Tooth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Humans -> Tooth(Humans)\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: Humans are mammals.\nFOL: Humans -> Mammal(Humans)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -Tooth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> Tooth(Human)\n</EVALUATE>\n\n<PREMISES>\n[BG] \n</PREMISES>\n\n<CONCLUSION>\nTEXT: Humans are mammals.\nFOL: Human -> Mammal(Human)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Humans are mammals.\nFOL: Human -> Mammal(Human)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(mammal)\nTEXT: Humans have teeth.\nFOL: Human(tooth)\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: Humans are mammals.\nFOL: Human(mammal)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Humans are mammals.\nFOL: Human(mammal)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> NoTeeth\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal\nTEXT: Humans have teeth.\nFOL: Humans -> HasTeeth\n</EVALUATE>\n\n<PREMISES>\n[BG]\n</PREMISES>\n\n<CONCLUSION>\nTEXT: Humans are mammals.\nFOL: Humans -> Mammal\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Humans are mammals.\nFOL: Humans -> Mammal\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -Tooth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> Tooth(Human)\n</EVALUATE>\n\n<PREMISES>\n[BG]\n</PREMISES>\n\n<CONCLUSION>\nTEXT: Humans are mammals.\nFOL: Human -> Mammal(Human)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Humans are mammals.\nFOL: Human -> Mammal(Human)\n</EVALUATE>",
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: -HasTeeth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(Mammal(platypus))\nTEXT: Humans have teeth.\nFOL: Human(HasTeeth(human))\n</PREMISES>\n<CONCLUSION>\nHumans are mammals.\nFOL: Human(Mammal(human))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -HasTeeth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Humans -> HasTeeth(Humans)\n</EVALUATE>\n\n<PREMISES>\n[BG]\n</PREMISES>\n\n<CONCLUSION>\nTEXT: Humans are mammals.\nFOL: Humans -> Mammal(Humans)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Humans are mammals.\nFOL: Humans -> Mammal(Humans)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -Tooth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> Tooth(Human)\n</PREMISES>\n<CONCLUSION>\nHumans are mammals.\nFOL: Human -> Mammal(Human)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> Tooth(Human)\nTEXT: Humans are mammals.\nFOL: Human -> Mammal(Human)\n</EVALUATE>",
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(Mammal(platypus))\nTEXT: Humans have teeth.\nFOL: Human(Tooth(human))\n</PREMISES>\n<CONCLUSION>\n[BG] Humans are mammals.\nFOL: Human(Mammal(human))\n</CONCLUSION>",
    "<PREMISES>\n[BG]\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals.\nFOL: Platypus(Mammal)\nTEXT: Humans have teeth.\nFOL: Human(Tooth)\n</PREMISES>\n<CONCLUSION>\nTEXT: Humans are mammals.\nFOL: Human(Mammal)\n</CONCLUSION>\n\n<EVALUATE>\nFOL: exists x. (Mammal(x) & Tooth(x))\nFOL: -Tooth(platypus)\nFOL: Platypus(Mammal)\nFOL: Human(Tooth)\nFOL: Human(Mammal)\n</EVALUATE>",
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -Tooth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> Tooth(Human)\n</PREMISES>\n<CONCLUSION>\nHumans are mammals.\nFOL: Human -> Mammal(Human)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> Tooth(Human)\nTEXT: Humans are mammals.\nFOL: Human -> Mammal(Human)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -Tooth(Platypus)\nTEXT: Platypus are mammals.\nFOL: Platypus & Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> Tooth(Human)\n</EVALUATE>\n\n<PREMISES>\n[BG] Some mammals have teeth.\nPlatypus have no teeth.\nPlatypus are mammals. \nHumans have teeth.\n</PREMISES>\n<CONCLUSION>\nTEXT: Humans are mammals.\nFOL: Human & Mammal(Human)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(Mammal(platypus))\nTEXT: Humans have teeth.\nFOL: Human(Tooth(human))\n</PREMISES>\n<CONCLUSION>\n[BG] Humans are mammals.\nFOL: Human(Mammal(human))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & HasTeeth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -HasTeeth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Humans -> HasTeeth(Humans)\n</EVALUATE>\n\n<PREMISES>\n[BG]\nTEXT: Humans are mammals.\nFOL: Humans -> Mammal(Humans)\n</PREMISES>\n\n<CONCLUSION>\nTEXT: Humans are mammals.\nFOL: Humans -> Mammal(Humans)\n</CONCLUSION>",
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -Tooth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> Tooth(Human)\n</PREMISES>\n<CONCLUSION>\nHumans are mammals.\nFOL: Human -> Mammal(Human)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -Tooth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> Tooth(Human)\nTEXT: Humans are mammals.\nFOL: Human -> Mammal(Human)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -Tooth(Platypus)\nTEXT: Platypus are mammals.\nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> Tooth(Human)\n</EVALUATE>\n\n<PREMISES>\n[BG] Some mammals have teeth.\nPlatypus have no teeth.\nPlatypus are mammals. \nHumans have teeth.\n</PREMISES>\n<CONCLUSION>\nTEXT: Humans are mammals.\nFOL: Human -> Mammal(Human)\n</EVALUATE>",
    "<PREMISES>\n[BG]\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus\nTEXT: Platypus are mammals.\nFOL: Platypus\nTEXT: Humans have teeth.\nFOL: Humans\n</PREMISES>\n<CONCLUSION>\nTEXT: Humans are mammals.\nFOL: Humans\n</CONCLUSION>\n\n<EVALUATE>\nFOL: exists x. (Mammal(x) & Tooth(x))\nFOL: Platypus\nFOL: Platypus\nFOL: Humans\nFOL: Humans\n</EVALUATE>"
   ],
   [
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus(Mammal(platypus))\nTEXT: Humans have teeth.\nFOL: Human(Tooth(human))\n</PREMISES>\n<CONCLUSION>\n[BG] Humans are mammals.\nFOL: Human(Mammal(human))\n</CONCLUSION>",
    "<PREMISES>\n[BG] Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -Tooth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> Tooth(Human)\n</PREMISES>\n<CONCLUSION>\nHumans are mammals.\nFOL: Human -> Mammal(Human)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: -Tooth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> Tooth(Human)\nTEXT: Humans are mammals.\nFOL: Human -> Mammal(Human)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus(x) & -Tooth(x)\nTEXT: Platypus are mammals. \nFOL: Platypus(x) & Mammal(x)\nTEXT: Humans have teeth.\nFOL: Human(x) & Tooth(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Humans are mammals.\nFOL: Human(x) & Mammal(x)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -Tooth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus & Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> Tooth(Human)\n</EVALUATE>\n\n<PREMISES>\n[BG]\n</PREMISES>\n\n<EVALUATE>\nTEXT: Humans are mammals.\nFOL: Human & Mammal(Human)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Some mammals have teeth.\nFOL: exists x. (Mammal(x) & Tooth(x))\nTEXT: Platypus have no teeth.\nFOL: Platypus -> -Tooth(Platypus)\nTEXT: Platypus are mammals. \nFOL: Platypus -> Mammal(Platypus)\nTEXT: Humans have teeth.\nFOL: Human -> Tooth(Human)\n</EVALUATE>\n\n<PREMISES>\n[BG]\nTEXT: Humans are mammals.\nFOL: Human -> Mammal(Human)\n</PREMISES>\n\n<CONCLUSION>\nFOL: Mammal(Human)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 118,
  "responses": [
   [
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> -Suck(s)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> -Suck(s)\n</EVALUATE>\n\n<PREMISES>\n</PREMISES>\n\n<CONCLUSION>\nTEXT: Space sucks.\nFOL: Space -> Suck\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Space sucks.\nFOL: Space -> Suck\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(x) -> Suck(x)\nTEXT: Vacuums suck.\nFOL: Vacuum(x) -> Suck(x)\nTEXT: Vampires suck.\nFOL: Vampire(x) -> Suck(x)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(x) -> -Suck(x)\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: Space sucks.\nFOL: -Vacuum(Space) -> Suck(Space)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(x) -> Suck(x)\nTEXT: Vacuums suck.\nFOL: Vacuum(x) -> Suck(x)\nTEXT: Vampires suck.\nFOL: Vampire(x) -> Suck(x)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(x) -> -Suck(x)\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: Space sucks.\nFOL: Space -> Suck\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(x) -> Suck(x)\nTEXT: Vacuums suck.\nFOL: Vacuum(x) -> Suck(x)\nTEXT: Vampires suck.\nFOL: Vampire(x) -> Suck(x)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(x) -> -Suck(x)\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: Space sucks.\nFOL: Space -> Suck\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(x) -> Suck(x)\nTEXT: Vacuums suck.\nFOL: Vacuum(x) -> Suck(x)\nTEXT: Vampires suck.\nFOL: Vampire(x) -> Suck(x)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(x) -> -Suck(x)\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: Space sucks.\nFOL: Space -> Suck\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> -Suck(s)\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: Space sucks.\nFOL: -Vacuum(space) -> Suck(space)\n</CONCLUSION>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> -Suck(s)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(x) -> Suck(x)\nTEXT: Vacuums suck.\nFOL: Vacuum(x) -> Suck(x)\nTEXT: Vampires suck.\nFOL: Vampire(x) -> Suck(x)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(x) -> -Suck(x)\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: Space sucks.\nFOL: -Vacuum(space) -> Suck(space)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum(s)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> -Suck(s)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> -Suck(s)\n</EVALUATE>\n\nTo determine if the conclusion follows from the premises, we need to evaluate the conclusion using the premises.\n\nSince Space is a vacuum, and vacuums suck, we can conclude that Space sucks.\n\nTherefore, the conclusion \"Space sucks\" follows from the premises.",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> -Suck(s)\n</EVALUATE>\n\n<CONCLUSION>\nSpace sucks.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: Space -> Vacuum\nFOL: Vacuum -> Suck\nFOL: Space -> Suck\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> -Suck(s)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> -Suck(s)\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: Space sucks.\nFOL: -Vacuum(space) -> Suck(space)\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> -Suck(s)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) ->!Suck(s)\n</EVALUATE>\n\n<PREMISES>\n</PREMISES>\n\n<CONCLUSION>\nTEXT: Space sucks.\nFOL: Space -> Suck\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Space sucks.\nFOL: Space -> Suck\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(x) -> Suck(x)\nTEXT: Vacuums suck.\nFOL: Vacuum(x) -> Suck(x)\nTEXT: Vampires suck.\nFOL: Vampire(x) -> Suck(x)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(x) -> -Suck(x)\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: Space sucks.\nFOL: Space -> Suck\n</CONCLUSION>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> -Suck(s)\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> -Suck(s)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(x) -> Suck(x)\nTEXT: Vacuums suck.\nFOL: Vacuum(x) -> Suck(x)\nTEXT: Vampires suck.\nFOL: Vampire(x) -> Suck(x)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(x) -> -Suck(x)\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: Space sucks.\nFOL: Space -> Suck\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> -Suck(s)\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: Space sucks.\nFOL: -Vacuum(Space) -> Suck(Space)\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> -Suck(s)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(x) -> Suck(x)\nTEXT: Vacuums suck.\nFOL: Vacuum(x) -> Suck(x)\nTEXT: Vampires suck.\nFOL: Vampire(x) -> Suck(x)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(x) -> -Suck(x)\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: Space sucks.\nFOL: -Vacuum(Space) -> Suck(Space)\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> -Suck(s)\n</EVALUATE>\n\nSince Vacuum(s) -> Suck(s) and Space -> Vacuum, we can conclude that Space -> Suck(s) using the transitive property.",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(S), Suck(S)\nTEXT: Vacuums suck.\nFOL: Vacuum(V), Suck(S)\nTEXT: Vampires suck.\nFOL: Vampire(V), Suck(S)\nTEXT: Space is a vacuum.\nFOL: Space(S), Vacuum(S)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(D), HouseholdAppliance(D), NotSuck(D)\n</EVALUATE>\n\n<CONCLUSION>\nSpace sucks.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: Space(S), Vacuum(S), Suck(S)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 119,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> HouseAppliance(s) & -Suck(s)\n</EVALUATE>\n\n<PREMISES>\n</PREMISES>\n\n<CONCLUSION>\nTEXT: Space is a vampire.\nFOL: Space -> Vampire\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Space is a vampire.\nFOL: Space -> Vampire\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace is a vampire.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> -Suck(s)\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace is a vampire.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> -Suck(s)\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace is a vampire.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(x) -> Suck(x)\nTEXT: Vacuums suck.\nFOL: Vacuum(x) -> Suck(x)\nTEXT: Vampires suck.\nFOL: Vampire(x) -> Suck(x)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(x) -> -Suck(x)\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace is a vampire.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(S), Suck(S)\nTEXT: Vacuums suck.\nFOL: Vacuum(S), Suck(S)\nTEXT: Vampires suck.\nFOL: Vampire(S), Suck(S)\nTEXT: Space is a vacuum.\nFOL: Space(S), Vacuum(S)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(S), Not(Suck(S))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace is a vampire.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> -Suck(s)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(x) -> Suck(x)\nTEXT: Vacuums suck.\nFOL: Vacuum(x) -> Suck(x)\nTEXT: Vampires suck.\nFOL: Vampire(x) -> Suck(x)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(x) -> ~Suck(x)\n</EVALUATE>\n\n<PREMISES>\n</PREMISES>\n\n<CONCLUSION>\nTEXT: Space is a vampire.\nFOL: Space -> Vampire\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Space is a vampire.\nFOL: Space -> Vampire\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace is a vampire.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(S).\nTEXT: Vacuums suck.\nFOL: Vacuum(S).\nTEXT: Vampires suck.\nFOL: Vampire(S).\nTEXT: Space is a vacuum.\nFOL: Space(S) & Vacuum(S).\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(HA) & -Suck(Duster(S)).\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace is a vampire.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) ->!Suck(s)\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace is a vampire.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> -Suck(s)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace is a vampire.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> -Suck(s)\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace is a vampire.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(S).\nTEXT: Vacuums suck.\nFOL: Vacuum(S).\nTEXT: Vampires suck.\nFOL: Vampire(S).\nTEXT: Space is a vacuum.\nFOL: Space(V).\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(HA) & -Suck(D).\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace is a vampire.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> -Suck(s)\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace is a vampire.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> -Suck(s)\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace is a vampire.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(x) -> Suck(x)\nTEXT: Vacuums suck.\nFOL: Vacuum(x) -> Suck(x)\nTEXT: Vampires suck.\nFOL: Vampire(x) -> Suck(x)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(x) -> -Suck(x)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace is a vampire.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(x) -> Suck(x)\nTEXT: Vacuums suck.\nFOL: Vacuum(x) -> Suck(x)\nTEXT: Vampires suck.\nFOL: Vampire(x) -> Suck(x)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(x) -> -Suck(x)\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace is a vampire.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(S) -> Suck(S)\nTEXT: Vacuums suck.\nFOL: Vacuum(S) -> Suck(S)\nTEXT: Vampires suck.\nFOL: Vampire(S) -> Suck(S)\nTEXT: Space is a vacuum.\nFOL: Space(S) & Vacuum(S)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(S) & -Suck(S)\n</EVALUATE>\n\nSince there is no direct relationship between Space and Vampire in the premises, and no premises imply that Space is a Vampire, the conclusion does not logically follow from the premises.",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace is a vampire.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> -Suck(s)\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace is a vampire.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) ->!Suck(s)\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace is a vampire.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(x) -> Suck(x)\nTEXT: Vacuums suck.\nFOL: Vacuum(x) -> Suck(x)\nTEXT: Vampires suck.\nFOL: Vampire(x) -> Suck(x)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(x) -> -Suck(x)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace is a vampire.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> NotSuck(s)\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace is a vampire.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) ->!Suck(s)\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace is a vampire.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(S) -> Suck(S)\nTEXT: Vacuums suck.\nFOL: Vacuum(S) -> Suck(S)\nTEXT: Vampires suck.\nFOL: Vampire(S) -> Suck(S)\nTEXT: Space is a vacuum.\nFOL: Space(S) & Vacuum(S)\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(S) & -Suck(S)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> HouseAppliance(s) & -Suck(s)\n</EVALUATE>\n\n<PREMISES>\n</PREMISES>\n\n<CONCLUSION>\nTEXT: Space is a vampire.\nFOL: Space -> Vampire\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Space is a vampire.\nFOL: Space -> Vampire\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nSpace is a vampire.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(S) -> Suck(S)\nTEXT: Vacuums suck.\nFOL: Vacuum(S) -> Suck(S)\nTEXT: Vampires suck.\nFOL: Vampire(S) -> Suck(S)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(S) -> -Suck(S)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 120,
  "responses": [
   [
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> HouseholdAppliance(s) & -Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> HouseholdAppliance(s) & -Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> HouseholdAppliance(s) & -Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) ->!Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (Appliance(x) -> Suck(x))\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> HouseholdAppliance(s) & -Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> HouseholdAppliance(s) & -Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> HouseholdAppliance(s) & -Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> HouseAppliance(s) & -Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: HouseAppliance(s) -> Suck(s)\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> HouseholdAppliance(s) & -Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) ->!Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> HouseAppliance(s) & -Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: HouseAppliance(s) -> Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: HouseAppliance(s) -> Suck(s)\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> HouseAppliance(s) & -Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: HouseAppliance(s) -> Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: HouseAppliance(s) -> Suck(s)\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> HouseAppliance(s) & -Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: HouseAppliance(s) -> Suck(s)\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> HouseholdAppliance(s) & -Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> HouseAppliance(s) & -Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: HouseAppliance(s) -> Suck(s)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) ->!Suck(s) & HouseholdAppliance(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> HouseAppliance(s) & -Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: HouseAppliance(s) -> Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: Suck(s)\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> HouseAppliance(s) & -Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: HouseAppliance(s) -> Suck(s)\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> HouseholdAppliance(s) & -Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> HouseholdAppliance(s) & -Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> HouseholdAppliance(s) & -Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> HouseholdAppliance(s) & -Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> HouseAppliance(s) & -Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: HouseAppliance(s) -> Suck(s)\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> HouseAppliance(s) & -Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseAppliance(x) -> Suck(x))\n</EVALUATE>",
    "<PREMISES>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</PREMISES>\n<CONCLUSION>\nIf something is a household appliance, it sucks.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Plungers suck.\nFOL: Plunger(s) -> Suck(s)\nTEXT: Vacuums suck.\nFOL: Vacuum(s) -> Suck(s)\nTEXT: Vampires suck.\nFOL: Vampire(s) -> Suck(s)\nTEXT: Space is a vacuum.\nFOL: Space -> Vacuum\nTEXT: A duster is a household appliance that doesn't suck.\nFOL: Duster(s) -> HouseholdAppliance(s) & -Suck(s)\nTEXT: If something is a household appliance, it sucks.\nFOL: all x. (HouseholdAppliance(x) -> Suck(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 121,
  "responses": [
   [
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (Simpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> Simpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (Simpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Yellow(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Yellow(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</PREMISES>\n\n<CONCLUSION>\n<evaluate>\nTEXT: Ben is loved by children.\nFOL: Loved",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) | Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: -LovedByChildren(ben)\n</PREMISES>\n\n<CONCLUSION>\n<evaluate>\nTEXT: Ben is loved by children.\nFOL: -LovedByChildren(ben)\n</EVALUATE>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</PREMISES>\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</PREMISES>\n\n<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a"
   ],
   [
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Yellow(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</PREMISES>\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) | Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</PREMISES>\n<CONCLUSION>\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (Simpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> Simpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (Simpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</PREMISES>\n\n<CONCLUSION>\nBen is loved by children.\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Yellow(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</PREMISES>\n\n<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Yellow(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</PREMISES>\n\n<CONCLUSION>\nBen is loved by children.\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</PREMISES>\n\n<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a"
   ],
   [
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</PREMISES>\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</PREMISES>\n\n<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Yellow(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</PREMISES>\n\n<EVALUATE>\n</EVALUATE>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is loved by children.\nFOL: LovedByChildren(ben)\n</PREMISES>\n\n<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a"
   ]
  ]
 },
 {
  "index": 122,
  "responses": [
   [
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (Simpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> Simpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (Simpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</PREMISES>\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) & -Yellow(ben)) | (-FromTheSimpsons(ben) & Funny(ben)))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</PREMISES>\n\n<CONCLUSION>\nBen is ugly or yellow.\nFOL: -Popular(b",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: ((FromTheSimpsons(ben) | Funny(ben)))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</PREMISES>\n\n<CONCLUSION>\n<_EVALUATE>\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</PREMISES>\n\n<CONCLUSION>\n< EVALUATE>\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</PREMISES>\n\n<CONCLUSION>\n< EVALUATE >\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</"
   ],
   [
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (Simpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> Simpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (Simpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</PREMISES>\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</PREMISES>\n\n<CONCLUSION>\nBen is ugly or yellow.\nFOL: -Popular(ben) | Yellow(ben)\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</PREMISES>\n\n<CONCLUSION>\n< EVALUATE>\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</PREMISES>\n\n<CONCLUSION>\n< EVALUATE>\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (Simpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> Simpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (Simpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: (Ugly(ben) | Yellow(ben))\n</PREMISES>\n\n<CONCLUSION>\nBen is ugly or yellow.\nFOL: -Popular(ben) | Yellow(ben)\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is ugly or yellow.\nFOL: Ugly(ben) | Yellow(ben)\n</PREMISES>\n<CONCLUSION>\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 123,
  "responses": [
   [
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\n</PREMISES>\n<CONCLUSION>\nBen is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</PREMISES>\n\n<EVALUATE>\nTEXT: If a cartoon character is funny",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\n</PREMISES>\n<CONCLUSION>\nBen is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</PREMISES>\n\n<EVALUATE>\nTEXT: If a cartoon character is funny",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (Simpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> Simpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (Simpsons(ben) | Funny(ben))\n</PREMISES>\n<CONCLUSION>\nBen is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</PREMISES>\n\n<EVALUATE>\nTEXT: If a cartoon character is funny",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\n</PREMISES>\n<CONCLUSION>\nBen is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (Simpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> Simpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (Simpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (Simpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> Simpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (Simpsons(ben) | Funny(ben))\n</PREMISES>\n<CONCLUSION>\nBen is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\n</PREMISES>\n<CONCLUSION>\nBen is either yellow and ugly or neither yellow nor ugly.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT"
   ],
   [
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (Simpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> Simpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (Simpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\n</PREMISES>\n\n<CONCLUSION>\nBen is either yellow and ugly or neither yellow nor ugly.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (Simpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> Simpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (Simpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\n</PREMISES>\n<CONCLUSION>\nBen is either yellow and ugly or neither yellow nor ugly.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\n</PREMISES>\n\n<CONCLUSION>\nBen is either yellow and ugly or neither yellow nor ugly.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (Simpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> Simpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (Simpsons(ben) | Funny(ben))\n</PREMISES>\n\n<CONCLUSION>\nBen is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (Simpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> Simpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (Simpsons(ben) | Funny(ben))\n</PREMISES>\n<CONCLUSION>\nBen is either yellow and ugly or neither yellow nor ugly.\nFOL: (Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben))\n</CONCLUSION>",
    "<PREMISES>\nIf a cartoon character is funny, then it is popular.\nFOL: all x. (Funny(x) -> Popular(x))\nTEXT: If a cartoon character is ugly, then it is not popular.\nFOL: all x. (Ugly(x) -> -Popular(x))\nTEXT: If a cartoon character is loved by children, then it is funny.\nFOL: all x. (LovedByChildren(x) -> Funny(x))\nTEXT: If a cartoon character is from The Simpsons, then it is loved by children.\nFOL: all x. (FromTheSimpsons(x) -> LovedByChildren(x))\nTEXT: If a cartoon character is yellow, then it is from The Simpsons.\nFOL: all x. (Yellow(x) -> FromTheSimpsons(x))\nTEXT: Ben is either from The Simpsons or funny.\nFOL: (FromTheSimpsons(ben) | Funny(ben))\nTEXT: Ben is either yellow and ugly or neither yellow nor ugly.\nFOL: ((Yellow(ben) & Ugly(ben)) | (-Yellow(ben) & -Ugly(ben)))\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 124,
  "responses": [
   [
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelection(x) := BreedBack(x) & DeliberateSelection(x, DomesticAnimal(x))\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle(bredBackHeckCattle, 1920s, aurochs)\n[BG] Heck cattle are animals.\nFOL: HeckCattle(animals)\n[BG] Aurochs are animals.\nFOL: aurochs(animals)\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BreedBack(x) & Extinct(x))\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelection(x))\n</CONCLUSION>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByBreedingBack -> DomesticAnimal\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle -> BredBack\nAurochs are animals.\nFOL: Aurochs -> Animal\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resemble(x))\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelectionByBreedingBack(x))\n</CONCLUSION>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelection(BreedingBack) & DeliberateSelectiveBreeding(DomesticAnimals)\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(HeckCattle, 1920s) & Resemble(Aurochs, HeckCattle)\n[BG] Heck cattle are animals.\nFOL: [BG]: Animal(HeckCattle)\n[BG] Aurochs are animals.\nFOL: [BG]: Animal(Aurochs)\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, y) & Resemble(x, ExtinctAnimal(y)))\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelection(x))\n</CONCLUSION>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\n[BG] Heck cattle are animals.\n[BG] Aurochs are animals.\nSome animals to be bred-back resemble animals that are extinct.\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedBack -> ArtificialSelection\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedBack(HeckCattle, aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: BreedBack(HeckCattle, Animal)\nTEXT: [BG] Aurochs are animals.\nFOL: aurochs -> Animal\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BreedBack(x, Animal) & Extinct(x))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (Heck",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelection(x) := BreedBack(x) & DeliberateSelectiveBreeding(x)\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle := BredBack(HeckCattle, 1920s) & Resemble(Aurochs, HeckCattle)\n[BG] Heck cattle are animals.\nFOL: HeckCattle := Animal(HeckCattle)\n[BG] Aurochs are animals.\nFOL: Aurochs := Animal(Aurochs)\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BreedBack(x) & Resemble(x, ExtinctAnimal(x)))\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelection(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedBack -> ArtificialSelection\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedBack(heckCattle) & Resemble(aurochs)\n[BG] Heck cattle are animals.\nFOL: BreedBack(heckCattle) -> Animal(heckCattle)\n[BG] Aurochs are animals.\nFOL: Aurochs -> Animal(aurochs)\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BreedBack(x) & Resemble(x))\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\nFOL: exists x. (Animal(x) & BreedBack(x) & ArtificialSelection(x))\n</CONCLUSION>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByDeliberateSelectiveBreeding(DomesticAnimal) <- BreedingBack\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedingBack(HeckCattle) <- 1920s & Aurochs\n[BG] Heck cattle are animals.\nFOL: Animal(HeckCattle)\n[BG] Aurochs are animals.\nFOL: Animal(Aurochs)\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resemble(x, ExtinctAnimal(x)))\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelectionByDeliberateSelectiveBreeding(DomesticAnimal(x)))\n</CONCLUSION>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByBreedingBack(x) <- DeliberateSelectiveBreedingOfDomesticAnimals(x)\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle(x) & BredBack(x, 1920s) & ResembleAurochs(x)\n[BG] Heck cattle are animals.\nFOL: HeckCattle(x) & Animal(x)\n[BG] Aurochs are animals.\nFOL: Aurochs(x) & Animal(x)\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resemble(x) & Extinct(x))\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelectionByBreedingBack(x))\n</CONCLUSION>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByBreedingBack -> DomesticAnimal\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle -> BredBack(HeckCattle, aurochs)\n[BG] Heck cattle are animals.\nFOL: HeckCattle -> Animal(HeckCattle)\n[BG] Aurochs are animals.\nFOL: Aurochs -> Animal(Aurochs)\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, y) & Extinct(y))\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelectionByBreedingBack(x))\n</CONCLUSION>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\n[BG] Heck cattle are animals.\n[BG] Aurochs are animals.\nSome animals to be bred-back resemble animals that are extinct.\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelection(HeckCattle) \nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(HeckCattle, 1920s, aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(HeckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(Aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, _, _) & Extinct(x))\nTEXT: Some Heck cattle are artificially selected.\n"
   ],
   [
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\n[BG] Heck cattle are animals.\n[BG] Aurochs are animals.\nSome animals to be bred-back resemble animals that are extinct.\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedingBack -> ArtificialSelection(DomesticAnimal)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle -> BredBack(Aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle -> Animal\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs -> Animal\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resemble(x, ExtinctAnimal))\nTEXT: Some Heck cattle are artificially selected.\nFOL: exists x. (",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelection(x) :- DomesticAnimal(x), BreedBack(x).\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedBack(heckCattle), 1920s, Aurochs.\n[BG] Heck cattle are animals.\nFOL: HeckCattle :- Animal(heckCattle).\n[BG] Aurochs are animals.\nFOL: Aurochs :- Animal(aurochs).\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BreedBack(x) -> Extinct(x))\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) -> ArtificialSelection(x))\n</CONCLUSION>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByDeliberateSelectiveBreeding domesticAnimals BreedingBack\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle bredBack 1920s Aurochs\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle BG Animals\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs BG Animals\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resembles(x) & -Extinct(x))\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByDeliberateSelectiveBreeding domesticAnimals BreedingBack\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle bredBack 1920s Aurochs",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedBack -> ArtificialSelection(DomesticAnimal)\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle -> BreedBack & Aurochs\n[BG] Heck cattle are animals.\nFOL: HeckCattle -> Animal\n[BG] Aurochs are animals.\nFOL: Aurochs -> Animal\nSome animals to be bred-back resemble animals that are extinct.\nFOL: some x. (BreedBack(x) -> ExtinctAnimal(x))\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\nFOL: some x. (HeckCattle(x) & ArtificialSelection(x))\n</CONCLUSION>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedBack -> ArtificialSelection(DomesticAnimal)\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle -> BreedBack & Aurochs\n[BG] Heck cattle are animals.\nFOL: HeckCattle : Animal\n[BG] Aurochs are animals.\nFOL: Aurochs : Animal\nSome animals to be bred-back resemble animals that are extinct.\nFOL: some x. (BreedBack(x) & ResembleExtinct(x))\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\nFOL: some x. (HeckCattle(x) & ArtificialSelection(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelection(BreedingBack) & DeliberateSelectiveBreeding(DomesticAnimals)\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(HeckCattle, 1920s) & Resemble(Aurochs)\n[BG] Heck cattle are animals.\nFOL: HeckCattle : Animals\n[BG] Aurochs are animals.\nFOL: Aurochs : Animals\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resemble(x) & Extinct(x))\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelection(x))\n</CONCLUSION>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelection(x) := DomesticAnimal(x)\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle := BredBack(HeckCattle, Aurochs, 1920s)\n[BG] Heck cattle are animals.\nFOL: HeckCattle := Animal(HeckCattle)\n[BG] Aurochs are animals.\nFOL: Aurochs := Animal(Aurochs)\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, Aurochs,?) & Extinct(x))\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelection(x))\n</CONCLUSION>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedingBack -> ArtificialSelection\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle -> BreedingBack & Aurochs\n[BG] Heck cattle are animals.\nFOL: HeckCattle -> Animal\n[BG] Aurochs are animals.\nFOL: Aurochs -> Animal\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Extinct(x))\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelection(x))\n</CONCLUSION>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByBreedingBack -> DomesticAnimal\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(HeckCattle, 1920s) & Resemble(Aurochs, HeckCattle)\n[BG] Heck cattle are animals.\nFOL: HeckCattle -> Animal\n[BG] Aurochs are animals.\nFOL: Aurochs -> Animal\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, y) & Resemble(x, ExtinctAnimal(y)))\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelectionByBreedingBack(x))\n</CONCLUSION>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\n[BG] Heck cattle are animals.\n[BG] Aurochs are animals.\nSome animals to be bred-back resemble animals that are extinct.\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelection(BreedingBack) & DomesticAnimal(x) -> DeliberateSelectiveBreeding(x)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(HeckCattle, 1920s) & Aurochs(x) -> Resemble(x)\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(BG)\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(BG)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) &"
   ],
   [
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedingBack -> ArtificialSelection(DomesticAnimal)\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle -> BredBack(Aurochs)\n[BG] Heck cattle are animals.\nFOL: HeckCattle -> Animal\n[BG] Aurochs are animals.\nFOL: Aurochs -> Animal\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Extinct(x))\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelection(x))\n</CONCLUSION>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedingBack(x) == ArtificialSelection(x, DomesticAnimal(x))\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle(bred-back) == Resemble(Aurochs, bred-back)\n[BG] Heck cattle are animals.\nFOL: HeckCattle(x) == Animal(x)\n[BG] Aurochs are animals.\nFOL: Aurochs(x) == Animal(x)\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resemble(x, ExtinctAnimal(x)))\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelection(x, DomesticAnimal(x)))\n</CONCLUSION>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedBack -> ArtificialSelectionByDeliberateSelectiveBreedingOfDomesticAnimals\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle -> BreedBack & ResembleAurochs\n[BG] Heck cattle are animals.\nFOL: HeckCattle : Animals\n[BG] Aurochs are animals.\nFOL: Aurochs : Animals\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BreedBack(x) & Resemble(x) & Extinct(x))\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelectionByDeliberateSelectiveBreedingOfDomesticAnimals(x))\n</CONCLUSION>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelection(BreedingBack) & DeliberateSelectiveBreeding(DomesticAnimal)\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(HeckCattle, 1920s) & Resemble(Aurochs, HeckCattle)\n[BG] Heck cattle are animals.\nFOL: HeckCattle : Animal\n[BG] Aurochs are animals.\nFOL: Aurochs : Animal\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, y) & Resemble(x, Extinct(y)))\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelection(x))\n</CONCLUSION>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedingBack(x) <-> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x, DomesticAnimal(x)))\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle <-> (BredBack(HeckCattle, 1920s) & Resemble(Aurochs))\n[BG] Heck cattle are animals.\nFOL: HeckCattle <-> Animal(HeckCattle)\n[BG] Aurochs are animals.\nFOL: Aurochs <-> Animal(Aurochs)\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resemble(x) & -Extinct(x))\n</PREMISES>\n<CONCLUSION>\nSome Heck cattle are artificially selected.\nFOL: exists x. (HeckCattle(x) & ArtificialSelection(x))\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 125,
  "responses": [
   [
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\n[BG] Heck cattle are animals.\n[BG] Aurochs are animals.\nSome animals to be bred-back resemble animals that are extinct.\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedingBack -> ArtificialSelectionDomesticAnimals\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle -> BredBack(aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle -> Animal\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs -> Animal\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & ResembleExtinct(x))\nTEXT: Aurochs are extinct.\nFOL: Aurochs -> Extinct\n</",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedingBack -> ArtificialSelectionByDeliberateSelectiveBreedingOfDomesticAnimals\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle -> BreedingBack(aurochs)\n[BG] Heck cattle are animals.\nFOL: HeckCattle -> Animal\n[BG] Aurochs are animals.\nFOL: Aurochs -> Animal\nSome animals to be bred-back resemble animals that are extinct.\nFOL: some x. (BredBack(x) -> Extinct(x))\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\nFOL: Aurochs -> Extinct\n</CONCLUSION>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\n[BG] Heck cattle are animals.\n[BG] Aurochs are animals.\nSome animals to be bred-back resemble animals that are extinct.\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedBack -> ArtificialSelectionDomesticAnimals\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedBack(HeckCattle) & Aurochs\nTEXT: [BG] Heck cattle are animals.\nFOL: BreedBack(HeckCattle) & Animal(HeckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs & Animal(Aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BreedBack(x) & ResembleExtinct(x))\nTEXT: Aurochs",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\n[BG] Heck cattle are animals.\n[BG] Aurochs are animals.\nSome animals to be bred-back resemble animals that are extinct.\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionBySelectiveBreeding domesticAnimal\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BredBack(HeckCattle, 1920s, aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle : Animal\nTEXT: [BG] Aurochs are animals.\nFOL: aurochs : Animal\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & (Resemble(x, ExtinctAnimal)))\nTEXT: Aurochs are extinct.\nFOL:",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\n[BG] Heck cattle are animals.\n[BG] Aurochs are animals.\nSome animals to be bred-back resemble animals that are extinct.\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedBack -> ArtificialSelection(BreedDomesticAnimals)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedBack(HeckCattle, aurochs)\nTEXT: Heck cattle are animals.\nFOL: BreedHeckCattle -> Animal(HeckCattle)\nTEXT: Aurochs are animals.\nFOL: Aurochs -> Animal(Aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BreedBack(x) & ResembleExtinct(x))\nTEXT: Aurochs are extinct.\nFOL: Auro"
   ],
   [
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedingBack -> DeliberateSelectiveBreeding(DomesticAnimal)\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle -> BredBack(Aurochs)\n[BG] Heck cattle are animals.\nFOL: HeckCattle -> Animal\n[BG] Aurochs are animals.\nFOL: Aurochs -> Animal\nSome animals to be bred-back resemble animals that are extinct.\nFOL: BredBack(Animal) -> Extinct\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\nFOL: Aurochs -> Extinct\n</CONCLUSION>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedBack -> ArtificialSelection(DomesticAnimal)\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedBack(HeckCattle, 1920s) & Aurochs\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BreedBack(x) & Extinct(x))\n</PREMISES>\n<CONCLUSION>\nAurochs are animals.\nFOL: Aurochs\nAurochs are extinct.\nFOL: Extinct(Aurochs)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedBack -> ArtificialSelection(DomesticAnimal)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedBack(HeckCattle, 1920s) & Aurochs\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BreedBack(x) & Extinct",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\n[BG] Heck cattle are animals.\n[BG] Aurochs are animals.\nSome animals to be bred-back resemble animals that are extinct.\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedingBack(x) == ArtificialSelection(x, DomesticAnimal(x))\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle(bredBackHeckCattle, 1920s, Aurochs(aurochs))\nTEXT: Heck cattle are animals.\nFOL: HeckCattle(x) == Animal(x)\nTEXT: Aurochs are animals.\nFOL: Aurochs(x) == Animal(x)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resembles(x) & Extinct(x))\n",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\n[BG] Heck cattle are animals.\n[BG] Aurochs are animals.\nSome animals to be bred-back resemble animals that are extinct.\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedingBack(x) == ArtificialSelectionByDeliberateSelectiveBreedingOfDomesticAnimals(x)\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedingBack(heckCattle) & Aurochs(aurochs) & 1920s(aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\n[BG] Heck cattle are animals.\n[BG] Aurochs are animals.\nSome animals to be bred-back resemble animals that are extinct.\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedBack -> DomesticAnimal\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedBack(HeckCattle) & -DomesticAnimal(aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(HeckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BreedBack(x) & ResembleExtinct(x))\nTEXT: Aurochs are extinct.\nFOL: -Resemble"
   ],
   [
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedingBack -> ArtificialSelectionDomesticAnimals\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle -> BredBack & ResembleAurochs\n[BG] Heck cattle are animals.\nFOL: HeckCattle -> Animal\n[BG] Aurochs are animals.\nFOL: Aurochs -> Animal\nSome animals to be bred-back resemble animals that are extinct.\nFOL: some x. (BredBack(x) & ResembleExtinct(x))\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\nFOL: Aurochs -> Extinct\n</CONCLUSION>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\n[BG] Heck cattle are animals.\n[BG] Aurochs are animals.\nSome animals to be bred-back resemble animals that are extinct.\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedBack -> ArtificialSelection DomesticAnimal\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedBack(HeckCattle) -> ResembleAurochs\nTEXT: [BG] Heck cattle are animals.\nFOL: BreedBack(HeckCattle) & Animal(HeckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: ResembleAurochs & Animal(Aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BreedBack(x) & Resemble(x) & Extinct(x))\n",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedingBack(x) = (ArtificialSelection(x) & DeliberateSelectiveBreeding(x, DomesticAnimal(x)))\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle(x) = BreedingBack(x) & (x = 1920 & Resemble(x, aurochs))\n[BG] Heck cattle are animals.\nFOL: HeckCattle(x) = Animal(x)\n[BG] Aurochs are animals.\nFOL: aurochs = Animal(aurochs)\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BreedingBack(x) & Resemble(x, extinct))\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\nFOL: aurochs = Extinct(aurochs)\n</EVALUATE>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedingBack(x) -> ArtificialSelection(x)\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle -> BredBack(HeckCattle) & Aurochs -> BredBack(Aurochs)\n[BG] Heck cattle are animals.\nFOL: HeckCattle -> Animal(HeckCattle)\n[BG] Aurochs are animals.\nFOL: Aurochs -> Animal(Aurochs)\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Extinct(x))\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\nFOL: Aurochs -> Extinct(Aurochs)\n</CONCLUSION>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\n[BG] Heck cattle are animals.\n[BG] Aurochs are animals.\nSome animals to be bred-back resemble animals that are extinct.\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedBack -> DomesticAnimal\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedBack(HeckCattle) & Resemble(aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: BreedBack(HeckCattle) & Animal(HeckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BreedBack(x) & Resemble(x) & Extinct(x))\nTEXT: Aurochs are extinct.\n"
   ],
   [
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\n[BG] Heck cattle are animals.\n[BG] Aurochs are animals.\nSome animals to be bred-back resemble animals that are extinct.\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: ArtificialSelectionByBreedingBack(x) \nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle(x) & BredBack(x, aurochs) & Year(x, 1920s)\nTEXT: [BG] Heck cattle are animals.\nFOL: HeckCattle(x) & Animal(x)\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs(x) & Animal(x)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x, y) & Animal(x) & Extinct",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\n[BG] Heck cattle are animals.\n[BG] Aurochs are animals.\nSome animals to be bred-back resemble animals that are extinct.\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedBack -> ArtificialSelection DomesticAnimals\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedBack(heckCattle, 1920s) -> Resemble(aurochs)\nTEXT: [BG] Heck cattle are animals.\nFOL: BreedBack(heckCattle, 1920s) -> Animal(heckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs -> Animal(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BreedBack(x) &",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedingBack(x) = (ArtificialSelection(x) & DeliberateSelectiveBreeding(x) & DomesticAnimal(x))\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle = (BredBack(HeckCattle) & Resemble(Aurochs))\n[BG] Heck cattle are animals.\nFOL: HeckCattle = Animal(HeckCattle)\n[BG] Aurochs are animals.\nFOL: Aurochs = Animal(Aurochs)\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resemble(x) & Extinct(x))\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\nFOL: Aurochs = Extinct(Aurochs)\n</EVALUATE>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedingBack -> ArtificialSelectionByDomesticAnimalBreeding\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle -> BredBack(Aurochs)\n[BG] Heck cattle are animals.\nFOL: HeckCattle -> Animal\n[BG] Aurochs are animals.\nFOL: Aurochs -> Animal\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & ResembleExtinct(x))\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\nFOL: Aurochs -> Extinct\n</CONCLUSION>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\n[BG] Heck cattle are animals.\n[BG] Aurochs are animals.\nSome animals to be bred-back resemble animals that are extinct.\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedBack -> ArtificialSelectionDomesticAnimals\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedBack(heck) & (Aurochs -> Resemble)\nTEXT: [BG] Heck cattle are animals.\nFOL: BreedBack(heck) & Animal(heck)\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs -> Animal\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BreedBack(x) & Resemble(x) & -Extinct(x))\nTEXT: Aurochs are"
   ],
   [
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedingBack(x) == ArtificialSelection(x)\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle == BredBack(1920s, aurochs)\n[BG] Heck cattle are animals.\nFOL: HeckCattle == Animal(x)\n[BG] Aurochs are animals.\nFOL: aurochs == Animal(x)\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & ResembleExtinct(x))\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\nFOL: aurochs == Extinct\n</CONCLUSION>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\n[BG] Heck cattle are animals.\n[BG] Aurochs are animals.\nSome animals to be bred-back resemble animals that are extinct.\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedBack -> ArtificialSelection DomesticAnimals\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: BreedBack(HeckCattle, 1920s) -> ResembleAurochs\nTEXT: [BG] Heck cattle are animals.\nFOL: BreedBack(HeckCattle, 1920s) -> Animal(HeckCattle)\nTEXT: [BG] Aurochs are animals.\nFOL: Aurochs -> Animal(Aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BreedBack(x) &",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nSome animals to be bred-back resemble animals that are extinct.\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedBack -> ArtificialSelectionDomesticAnimals\nTEXT: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle -> BreedBack(aurochs)\nTEXT: Some animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BreedBack(x) & ResemblesExtinct(x))\nTEXT: Aurochs are animals.\nFOL: Aurochs -> Animals\nTEXT: Aurochs are extinct.\nFOL: Aurochs -> Extinct\nTEXT: Aurochs are extinct.\nFOL: Aurochs\n</EVALUATE>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedingBack -> ArtificialSelectionByDeliberateSelectiveBreedingOfDomesticAnimals\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle -> BredBack & Aurochs\n[BG] Heck cattle are animals.\nFOL: HeckCattle -> Animal\n[BG] Aurochs are animals.\nFOL: Aurochs -> Animal\nSome animals to be bred-back resemble animals that are extinct.\nFOL: Some x. (BredBack(x) & Extinct(x))\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\nFOL: Aurochs -> Extinct\n</CONCLUSION>",
    "<PREMISES>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nFOL: BreedingBack(x) <-> ArtificialSelection(x) & DomesticAnimal(x)\nHeck cattle were bred-back in the 1920s to resemble the aurochs.\nFOL: HeckCattle <-> BreedingBack(x) & Resemble(x) & aurochs(x) & 1920s(x)\n[BG] Heck cattle are animals.\nFOL: HeckCattle <-> Animal(x)\n[BG] Aurochs are animals.\nFOL: aurochs <-> Animal(x)\nSome animals to be bred-back resemble animals that are extinct.\nFOL: exists x. (BredBack(x) & Resemble(x) & Extinct(x))\n</PREMISES>\n<CONCLUSION>\nAurochs are extinct.\nFOL: aurochs <-> Extinct(x)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 126,
  "responses": [
   [
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studying(x) -> Student(x))\nx. (Studying(x) | Teaching(x))\n-Young(x) -> Teaching(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-Young(jerry)\n</CONCLUSION>",
    "<PREMISES>\nAll students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studys(person) | Teaches(person))\nTEXT: No young person teaches.\nFOL: -Young(person) & Teaches(person)\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: (Young(Rose) | Student(Rose))\n</PREMISES>\n<CONCLUSION>\nJerry is young.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: No young person teaches.\nFOL: -Young(jerry) & Teaches(jerry)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Student(x) -> Studies(x))\nx. (Studies(x) | Teaches(x))\n\u00acall x. (Young(x) & Teaches(x))\nJerry \u00ac(Teaches(jerry) & Manager(jerry))\nRose Young(Rose) | Student(Rose)\n</PREMISES>\n<CONCLUSION>\n\u00acYoung(Jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studying(x) -> Student(x))\nx. (Studying(x) | Teaching(x))\n-Young(x) & Teaching(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-Young(jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Student(x) -> Studies(x))\nx. (Studies(x) | Teaches(x))\nx. (Young(x) -> -Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-Young(Jerry)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\nnot x. (Young(x) & Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nJerry is young.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All students are humans. \nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: not x. (Young(x) & Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(Rose) | Student(Rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\n\u00ac x. (Young(x) & Teaches(x))\n\u00ac x. (Teaches(x) & Manager(x))\nx. (Young(x) | Student(x))\n</PREMISES>\n<CONCLUSION>\n\u00ac x. (Young(x) & Jerry(x))\n\u00ac x. (Jerry(x) & Manager(x))\n\u00ac x. (Young(jerry) & Jerry(x))\n\u00ac x. (Jerry(x) & Manager(x))\n\u00ac x. (Young(jerry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studying(x) -> Student(x))\nx. (Studying(x) | Teaching(x))\n\u00acx. (Young(x) & Teaching(x))\n\u00acx. (Jerry(x) & (Teaching(x) \u2228 Manager(x)))\n\u00acx. (Rose(x) \u2228 Student(x))\n</PREMISES>\n<CONCLUSION>\n\u00acx. (Jerry(x) & Young(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\nx. (-Young(x) & Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-Young(jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studying(x) -> Student(x))\nx. (Studying(x) | Teaching(x))\nnot x. (Young(x) & Teaching(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nJerry is young.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studying(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: x. (Studying(x) | Teaching(x))\nTEXT: No young person teaches.\nFOL: not x. (Young(x) & Teaching(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaching(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(Rose) | Student(Rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Student(x) -> Study(x))\nx. (Study(x) | Teach(x))\nx. (-Young(x) & Teach(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nx. (Young(x) | Student(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studying(x) -> Student(x))\nx. (Studying(x) | Teaching(x))\n-Young(x) & Teaching(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-Young(jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\nx. (-Young(x) & Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-Young(jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\n-Young(x) -> -Teaches(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-Young(jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studys(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\n\u00acx. (Young(x) & Teaches(x))\n\u00acx. (Teaches(x) & Manager(x))\n\u00acx. (Young(x) \u2228 Student(x))\n</PREMISES>\n<CONCLUSION>\n\u00acx. (Young(x) & Jerry(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Student(x) -> Studies(x))\nx. (Studies(x) | Teaches(x))\n- x. (Young(x) & Teaches(x))\n- x. (Teaches(x) & Manager(x))\nx. (Young(x) | Student(x))\n</PREMISES>\n<CONCLUSION>\n- x. (Young(x) & Jerry(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All students are humans. \nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studies or teaches.\nFOL: (Studies(person) | Teaches(person))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) & Teaches(x) -> False)\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(rose) | Student(rose)\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\n-Young(x) & Teaches(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-Young(Jerry)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All students are humans. \nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: -Young(x) & Teaches(x) | x. (x)\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: (Young(Rose) | Student(Rose))\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\nnot x. (Young(x) & Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nnot x. (Young(x) & Jerry(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studying(x) -> Student(x))\nx. (Studying(x) | Teaching(x))\nnot x. (Young(x) & Teaching(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nJerry Young.\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\nnot x. (Young(x) & Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nnot Jerry. (Young(jerry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studying(x) -> Student(x))\nx. (Studying(x) | Teaching(x))\nnot x. (Young(x) & Teaching(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nYoung(Jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studying(x) -> Student(x))\nx. (Studying(x) | Teaching(x))\nnot exists x. (Young(x) & Teaching(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nJerry is young.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studying(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studying(x) | Teaching(x))\nTEXT: No young person teaches.\nFOL: not exists x. (Young(x) & Teaching(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaching(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: (Young(Rose) | Student(Rose))\nTEXT: Jerry is young.\nFOL: Young(jerry)\n</EVALUATE>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studys(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\nall x. (Young(x) -> -Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-Young(jerry) | Jerry is young.\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 127,
  "responses": [
   [
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\nx. (Young(x) -> -Teaches(x))\nJerry. (-Teaches(jerry) & -Manager(jerry))\nRose. (Young(Rose) | Student(Rose))\n</PREMISES>\n<CONCLUSION>\n-Young(jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studying(x) -> Student(x))\nx. (Studying(x) | Teaching(x))\n-Young(x) -> -Teaching(x)\nJerry: -Teaching(jerry) & -Manager(jerry)\nRose: Young(Rose) | Student(Rose)\n</PREMISES>\n<CONCLUSION>\n-Young(jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\nnot x. (Young(x) & Teaches(x))\nJerry neither teaches nor is a manager.\nx. (Young(x) | Student(x))\n</PREMISES>\n<CONCLUSION>\nnot Young(Jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\n\u00acx. (Young(x) & Teaches(x))\n\u00acx. (Teaches(x) & Manager(x))\n\u00acx. (Young(x) \u2228 Student(x))\n</PREMISES>\n<CONCLUSION>\n\u00acx. (Young(x) & Jerry(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\n\u00acall x. (Young(x) & Teaches(x))\n\u00acTeaches(jerry) & \u00acManager(jerry)\nx. (Young(x) | Student(x))\n</PREMISES>\n<CONCLUSION>\n\u00acYoung(jerry)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\nx. (Young(x) -> -Teaches(x))\nJerry. (neither Teaches(jerry) & neither Manager(jerry))\nRose. (Young(Rose) | Student(Rose))\n</PREMISES>\n<CONCLUSION>\n-Young(jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studys(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\nall x. (-Young(x) -> -Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-Jerry (Young(jerry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\n\u00acx. (Young(x) & Teaches(x))\n\u00acJerry. (Teaches(jerry) | Manager(jerry))\n\u00acRose. (Young(rose) | Student(rose))\n</PREMISES>\n<CONCLUSION>\n\u00acJerry. (Young(jerry) | Student(jerry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studying(x) -> Student(x))\nx. (Studying(x) | Teaching(x))\n-Young(x) & Teaching(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-Young(jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\n\u00acx. (Young(x) & Teaches(x))\n\u00acx. (Manager(x) & Jerry(x))\nx. (Young(x) | Student(x))\n</PREMISES>\n<CONCLUSION>\n\u00acYoung(Jerry)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studys(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\n\u00ac x. (Young(x) & Teaches(x))\n\u00ac x. (Teaches(x) & Manager(x))\nx. (Young(x) | Student(x))\n</PREMISES>\n<CONCLUSION>\n\u00ac x. (Young(x) & Jerry(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studying(x) -> Student(x))\nx. (Studying(x) | Teaching(x))\n\u00ac x. (Young(x) & Teaching(x))\n\u00ac x. (Teaching(x) | Manager(x))\n\u00ac x. (Young(x) | Student(x))\n</PREMISES>\n<CONCLUSION>\n\u00ac Young(jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\nnot x. (Young(x) & Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nnot Jerry. (Young(jerry) | Student(jerry))\n</CONCLUSION>",
    "<PREMISES>\nAll students are humans. \nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studys(y) & -Teach(y)) | (-Studys(y) & Teach(y))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) & Teach(x) -> -True)\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teach(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: (Young(rose) & -Student(rose)) | (Student(rose) & -Young(rose))\n</PREMISES>\n<CONCLUSION>\nJerry is not young.\nFOL: -Young(jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studying(x) -> Student(x))\nx. (Studying(x) | Teaching(x))\nx. (Young(x) & Teaching(x))\nJerry. (Teaching(jerry) | Manager(jerry))\nRose. (Young(Rose) | Student(Rose))\n</PREMISES>\n<CONCLUSION>\n-Young(jerry)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Student(x) -> Study(x))\nx. (Study(x) | Teach(x))\n-Young(x) & Teach(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-Young(jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studying(x) -> Student(x))\nx. (Studying(x) | Teaching(x))\n-not Teaching(YoungPerson)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-not Young(Jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Student(x) -> Studies(x))\nx. (Studys(x) | Teaches(x))\nall x. (Young(x) -> -Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-Jerry (Young(jerry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\nx. (Young(x) & Teaches(x))\nJerry. (Teaches(jerry) | Manager(jerry))\nx. (Young(x) | Student(x))\n</PREMISES>\n<CONCLUSION>\n-Young(jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studys(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\nx. (Young(x) -> -Teaches(x))\nJerry neither teaches nor is a manager.\nx. (Young(x) | Student(x))\n</PREMISES>\n<CONCLUSION>\n-Young(jerry)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\n\u00ac x. (Young(x) & Teaches(x))\n\u00ac x. (Teaches(x) & Manager(x))\nx. (Young(x) | Student(x))\n</PREMISES>\n<CONCLUSION>\n\u00ac Young(jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studys(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\n-Young(x) & Teaches(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-Young(jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studying(x) -> Student(x))\nx. (Studying(x) | Teaching(x))\n-Young(x) -> -Teaching(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-Jerry(Young(jerry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studys(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\n-Young(x) & Teaches(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-Young(jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studying(x) -> Student(x))\nx. (Studying(x) | Teaching(x))\n-Young(x) & Teaching(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-Young(Jerry)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 128,
  "responses": [
   [
    "<PREMISES>\nAll students are humans. \nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(person) | Teaches(person))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) & Teaches(x) -> -True)\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: (Young(Rose) | Student(Rose))\n</PREMISES>\n\n<CONCLUSION>\nRose is a human or a manager.\nFOL: (Human(Rose) | Manager(Rose))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> Human(x))\nall x. (Studies(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\nx. (Young(x) -> -Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nRose is human or manager.\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studys(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\nx. (-Young(x) & Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nRose is a human or a manager.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All students are humans. \nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: x. (-Young(x) & Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(Rose) | Student(Rose)\nTEXT: Rose is a human or a manager.\nFOL: Human(Rose)",
    "<PREMISES>\nAll students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) & Teaches(x) -> False)\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(Rose) | Student(Rose)\n</PREMISES>\n<CONCLUSION>\nRose is a human or a manager.\nFOL: Human(Rose) | Manager(Rose)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> Human(x))\nall x. (Studies(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\n-Young(x) -> -Teaches(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nx. (Human(x) | Manager(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Student(x) -> Studies(x))\nx. (Studies(x) -> Student(x))\nx. ((Teaches(x) & Young(x)) -> False)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nRose is human or manager.\n</CONCLUSION>",
    "<PREMISES>\nAll students are humans. \nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: -Young(x) & Teaches(x) -> False\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(Rose) | Student(Rose)\n</PREMISES>\n<CONCLUSION>\nRose is a human or a manager.\nFOL: Human(Rose) | Manager(Rose)\n</CONCLUSION>",
    "<PREMISES>\nAll students are humans.\nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(person) | Teaches(person))\nTEXT: No young person teaches.\nFOL: -Young(person) -> -Teaches(person)\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(Rose) | Student(Rose)\n</PREMISES>\n<CONCLUSION>\nRose is a human or a manager.\nFOL: Human(Rose) | Manager(Rose)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\n\u00acx. (Young(x) & Teaches(x))\n\u00acx. (Jerry(x) & (Teaches(x) | Manager(x)))\nx. (Young(x) | Student(x))\n</PREMISES>\n\n<CONCLUSION>\n\u00acx. (Rose(x) & \u00acHuman(x))\n\u00acx. (Rose(x) & Manager(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Student(x) -> Study(x))\nx. (Study(x) | Teach(x))\nx. (-Young(x) -> -Teach(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nRose is human | Manager(Rose)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nAll students are humans. \nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: all x. (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) & Teaches(x) -> -1)\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(Rose) | Student(Rose)\n</PREMISES>\n<CONCLUSION>\nRose is a human or a manager.\nFOL: Human(Rose) | Manager(Rose)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> Human(x))\nall x. (Studying(x) -> Student(x))\nx. (Studying(x) | Teaching(x))\n-Young(x) -> -Teaching(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nHuman(x) | Manager(x)\n</CONCLUSION>",
    "<PREMISES>\nAll students are humans. \nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) & Teaches(x) -> False)\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: (Young(rose) | Student(rose))\n</PREMISES>\n\n<CONCLUSION>\nRose is a human or a manager.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All students are humans. \nFOL: all x. (Student(x) -> Human(x))\nTEXT: Rose is a human or a manager.\nFOL: Human(rose) | Manager(rose)\n</EVALUATE>",
    "<PREMISES>\nall x. (Student(x) -> Human(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\nall x. (Young(x) -> -Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nRose is a human or a manager.\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\n-Young(x) -> -Teaches(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nRose is human or manager.\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Student(x) -> Study(x))\nx. (Study(x) | Teach(x))\nnot x. (Young(x) & Teach(x))\nJerry neither teaches nor is a manager.\nx. (Young(x) | Student(x))\n</PREMISES>\n<CONCLUSION>\nx. (Human(x) | Manager(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> Human(x))\nall x. (Studys(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\nx. (Young(x) & -Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nRose is human or a manager.\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studys(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\n-Young(x) -> -Teaches(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nRose is human or manager.\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> Human(x))\nall x. (Studys(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\nall x. (Young(x) -> -Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nRose is human or manager.\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\nx. (-Young(x) -> -Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nRose is human or manager.\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Student(x) -> Studies(x))\nx. (Studies(x) | Teaches(x))\nnot x. (Young(x) & Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nRose is a human or a manager.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All students are humans. \nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: x. (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: not x. (Young(x) & Teaches(x))\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Rose is Young(Rose) | Rose is Student(Rose)\nTEXT: Rose is a human or a manager.\nFOL: Rose is Human(Rose)",
    "<PREMISES>\nAll students are humans. \nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(person) | Teaches(person))\nTEXT: No young person teaches.\nFOL: -Young(person) & Teaches(person)\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: Young(Rose) | Student(Rose)\n</PREMISES>\n<CONCLUSION>\nRose is a human or a manager.\nFOL: Human(Rose) | Manager(Rose)\n</CONCLUSION>",
    "<PREMISES>\nAll students are humans. \nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studies(person) | Teaches(person))\nTEXT: No young person teaches.\nFOL: -Young(person) & Teaches(person)\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: (Young(Rose) | Student(Rose))\n</PREMISES>\n<CONCLUSION>\nRose is a human or a manager.\nFOL: Human(Rose) | Manager(Rose)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Student(x) -> Studies(x))\nx. (Studys(x) | Teaches(x))\nall x. (Young(x) -> -Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nRose is human or manager.\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\n-Young(x) -> -Teaches(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nHuman(Rose) | Manager(Rose)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 129,
  "responses": [
   [
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studying(x) -> Student(x))\nx. (Studying(x) | Teaching(x))\n-Young(x) -> -Teaching(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nHuman(Rose) | Manager(Jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\nx. (-Young(x) -> -Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n(Rose is young | Rose is a student) | (Jerry is a manager)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studying(x) -> Student(x))\nx. (Studying(x) | Teaching(x))\n-Young(x) & Teaching(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nHuman(Rose) | Manager(Jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studys(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\nall x. (Young(x) -> -Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nHuman(Rose) | JerryManager\n</CONCLUSION>",
    "<PREMISES>\nAll students are humans. \nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) & Teaches(x) -> False)\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: (Young(Rose) | Student(Rose))\n</PREMISES>\n\n<CONCLUSION>\nRose is a human or Jerry is a manager.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: All students are humans. \nFOL: all x. (Student(x) -> Human(x))\nTEXT: Rose is a human or Jerry is a manager.\nFOL: (Human(Rose) | Manager(jerry))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studying(x) -> Student(x))\nx. (Studying(x) | Teaching(x))\nnot x. (Young(x) & Teaching(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nHuman(Rose) | JerryManager\n</CONCLUSION>",
    "<PREMISES>\nAll students are humans. \nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studys(x) -> Student(x))\nTEXT: A person either studys or teaches.\nFOL: (Studys(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: -Young(x) & Teaches(x) | Young(x)\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: (Young(rose) | Student(rose))\n</PREMISES>\n<CONCLUSION>\nRose is a human or Jerry is a manager.\nFOL: (Human(rose) | Jerry(isManager))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> Human(x))\nall x. (Studies(x) -> Student(x))\nx y. (Studys(x) & Studys(y) -> Student(x) & Student(y))\n\u00acyoung(x) x Teach(x)\n\u00acTeach(jerry) \u00acManager(jerry)\nx y. (Young(x) & Young(y) -> Student(x) & Student(y))\nRose young \u2228 Student(Rose)\n</PREMISES>\n<CONCLUSION>\n\u00acHuman(Rose) \u2228 Manager(jerry)\n\u00acHuman(Rose) \u2228 \u00acManager(jerry)\n\u00acHuman(Rose) \u2228 Jerry Manager\nHuman(jerry) \u2228 Jerry Manager\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studying(x) -> Student(x))\nx. (Studying(x) | Teaching(x))\n\u00acx. (Young(x) & Teaching(x))\n\u00acx. (Teaching(x) & Manager(x))\nx. (Young(x) | Student(x))\n</PREMISES>\n<CONCLUSION>\n\u00acx. (Young(x) & \u00acStudent(x)) | \u00acx. (Student(x) & Manager(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Student(x) -> Studies(x))\nx. (Studys(x) | Teaches(x))\nnot x. (Young(x) & Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nRose is a human or Jerry is a manager.\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\nx. (Young(x) -> -Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n(Rose is young | Rose is a student) | (Jerry is a manager)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studys(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\nx. (Young(x) -> -Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n( Human(Rose) | JerryManager(Rose) )\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> Human(x))\nall x. (Studys(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\n-Young(x) -> -Teaches(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nRose is a human or Jerry is a manager.\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> Human(x))\nall x. (Studying(x) -> Student(x))\nx. (Studying(x) | Teaching(x))\n-Young(x) & Teaching(x)\nJerry neither Teaching(jerry) & Manager(jerry)\nRose Young(Rose) | Student(Rose)\n</PREMISES>\n<CONCLUSION>\nHuman(Rose) | Manager(jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Student(x) -> Studies(x))\nx. (Studies(x) | Teaches(x))\n-Young(x) -> -Teaches(x)\nJerry (neither Teaches(jerry) & Manager(jerry))\nRose (Young(Rose) | Student(Rose))\n</PREMISES>\n<CONCLUSION>\nHuman(Rose) | Manager(jerry) | Student(Rose)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Student(x) -> Human(x))\nall x. (Studys(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\n\u00acx. (Young(x) & Teaches(x))\n\u00acx. (Teaches(x) | Manager(x))\nx. (Young(x) | Student(x))\n</PREMISES>\n<CONCLUSION>\n\u00acx. (Human(x) | \u00acManager(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> Human(x))\nall x. (Studies(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\n-Young(x) -> -Teaches(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nRose is a human or Jerry is a manager.\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Student(x) -> Studies(x))\nx. (Studies(x) -> Student(x))\nx. ((Teaches(x) | Teaches(y)) -> False)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nHuman(Rose) | JerryIsManager\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Student(x) -> Studies(x))\nx. (Studys(x) | Teaches(x))\n-Young(x) -> -Teaches(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nHuman(x) | Manager(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studys(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\n-Young(x) -> -Teaches(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nHuman(Rose) | Jerry(Manager)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\n\u00ac x. (Young(x) & Teaches(x))\n\u00ac x. (Teaches(x) & Manager(x))\nx. (Young(x) | Student(x))\n</PREMISES>\n<CONCLUSION>\n\u00ac x. (Human(x) & \u00acManager(x)) | \u00ac x. (Human(x) & Manager(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studying(x) -> Student(x))\nx. (Studying(x) | Teaching(x))\n-Young(x) -> -Teaching(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n(Human(Rose) | Jerry is a manager)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studys(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\n-Young(x) & Teaches(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nRose is a human or Jerry is a manager.\n</CONCLUSION>",
    "<PREMISES>\nAll students are humans. \nFOL: all x. (Student(x) -> Human(x))\nTEXT: If someone studies, then they are a student.\nFOL: all x. (Studies(x) -> Student(x))\nTEXT: A person either studies or teaches.\nFOL: (Studies(x) | Teaches(x))\nTEXT: No young person teaches.\nFOL: all x. (Young(x) & Teaches(x) -> False)\nTEXT: Jerry neither teaches nor is a manager.\nFOL: -Teaches(jerry) & -Manager(jerry)\nTEXT: Rose is young or a student.\nFOL: (Young(Rose) | Student(Rose))\n</PREMISES>\n<CONCLUSION>\nRose is a human or Jerry is a manager.\nFOL: (Human(Rose) | Jerry(Manager))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> Human(x))\nall x. (Studys(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\n-Young(x) -> -Teaches(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nRose is a human or Jerry is a manager.\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 130,
  "responses": [
   [
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studys(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\n-Young(x) -> -Teaches(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-Student(Rose) & -Human(Jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Student(x) -> Studies(x))\nx. (Studies(x) -> Student(x))\nx. ((Studies(x) | Teaches(x)) & -Teaches(x))\nx. (Young(x) -> -Teaches(x))\nJerry. (neither Teaches(jerry) & neither Manager(jerry))\nRose. (Young(Rose) | Student(Rose))\n</PREMISES>\n<CONCLUSION>\n-Student(Rose) & -Human(jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\n-Young(x) -> -Teaches(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-Student(Rose) & -Human(Jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\n- x. (Young(x) & Teaches(x))\n- x. (Teaches(x) | Manager(x))\nx. (Young(x) | Student(x))\n</PREMISES>\n<CONCLUSION>\n- (Rose & Student(Rose)) & - (Human(Jerry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\nnot x. (Young(x) & Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-Student(Rose) & -Human(jerry)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Student(x) -> Studies(x))\nx. (Studys(x) | Teaches(x))\nnot x. (Young(x) & Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n- Rose is a student & Jerry is Human\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\n\u00acx. (Young(x) & Teaches(x))\n\u00acx. (Manager(x) & Jerry(x))\n\u00acx. (Young(x) \u2228 Student(x))\n</PREMISES>\n<CONCLUSION>\n\u00acx. (Student(x) \u2227 Human(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\nnot x. (Young(x) & Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n- Rose is Student & Human\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\nnot x. (Young(x) & Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n- Rose(x) & Rose(x) -> Student(x)\n- Jerry(x) & -Teaches(jerry) & -Manager(jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Student(x) -> Studies(x))\nx. (Studies(x) -> Student(x))\nx. ((Studies(x) | Teaches(x)) & -Young(x) -> -Teaches(x))\nJerry neither teaches nor is a manager.\nx. (Young(x) | Student(x))\n</PREMISES>\n<CONCLUSION>\n-Student(Rose) & -Human(Jerry)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Student(x) -> Studies(x))\nall x. (x = y | Teaches(x) | Teaches(y))\nnot exists x. (Young(x) & Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nnot (Rose Student & Jerry Human)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\nall x. (Young(x) -> -Teaches(x))\nJerry. (neither Teaches(jerry) nor Manager(jerry))\nRose. (Young(Rose) | Student(Rose))\n</PREMISES>\n<CONCLUSION>\n-Student(Rose) & Human(jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\nnot x. (Young(x) & Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\nnot (Rose & Student(Rose)) & not (Jerry & Human(Jerry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Student(x) -> Study(x))\nx. (Study(x) | Teach(x))\n-Young(x) -> -Teach(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n- (Rose is Student & Jerry is Human)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\nnot x. (Young(x) & Teaches(x))\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n- Rose is a student & Jerry is Human\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studying(x) -> Student(x))\nx. (Studying(x) | Teaching(x))\n-Young(x) -> -Teaching(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-Student(Rose) & -Human(Jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Student(x) -> Studies(x))\nx. (Studys(x) | Teaches(x))\n-Young(x) -> -Teaches(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-Student(Rose) & -Human(Jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\nx. (Young(x) -> -Teaches(x))\nJerry. (-Teaches(jerry) & -Manager(jerry))\nRose. (Young(Rose) | Student(Rose))\n</PREMISES>\n<CONCLUSION>\n-Student(Rose) & -Human(jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Student(x) -> Study(x))\nx. (Study(x) | Teach(x))\n-Young(x) -> -Teach(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-Student(Rose) & -Human(Jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Student(x) -> Studies(x))\nall x. (x -> (Studys(x) | Teaches(x)))\n-Young(x) -> -Teaches(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-(Rose -> Student(Rose)) & -(Jerry -> Human(Jerry))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\n-Young(x) -> -Teaches(x)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-Student(Rose) & -Human(Jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studying(x) -> Student(x))\nx. (Studying(x) | Teaching(x))\n-not Teaching(YoungPerson)\nJerry neither teaches nor is a manager.\nRose is young or a student.\n</PREMISES>\n<CONCLUSION>\n-not (Rose is a student) & -Jerry is a human\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studies(x) -> Student(x))\nx. (Studies(x) | Teaches(x))\n\u00ac x. (Young(x) & Teaches(x))\n\u00ac x. (Teaches(x) & Manager(x))\n\u00ac x. (Young(x) | Student(x))\n</PREMISES>\n<CONCLUSION>\n\u00ac (Student(Rose) & Human(Jerry))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Studys(x) -> Student(x))\nx. (Studys(x) | Teaches(x))\n-Young(x) -> -Teaches(x)\nJerry (neither Teaches(jerry) & Manager(jerry))\nRose (Young(Rose) | Student(Rose))\n</PREMISES>\n<CONCLUSION>\n-Student(Rose) & Human(jerry)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Student(x))\nall x. (Student(x) -> Studies(x))\nx. (Studies(x) -> Student(x))\nx. ((Studies(x) | Teaches(x)) & -Teaches(x))\nx. (-Young(x) -> -Teaches(x))\nx. (Jerry & -Teaches(jerry) & -Manager(jerry))\nx. (Rose & (Young(rose) | Student(rose)))\n</PREMISES>\n<CONCLUSION>\n- (Student(rose) & Human(jerry))\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 131,
  "responses": [
   [
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(isPublishingHouse(x)) & TranslatesIntoEnglish(x)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(x) -> TranslatesIntoEnglish(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(isBook(x)) & PublishedBy(x) & NewVesselPress(isPublishingHouse(x))\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(x) & NeapolitanChronicles(isBook(x))\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(isBook(x)) & PublishedBy(x) & NewVesselPress(isPublishingHouse(x))\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: TranslatesIntoEnglish(x) & NeapolitanChronicles(isBook(x))\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(x) & ForeignLiterature(x) -> English(x)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(x) & NewVesselPress(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(neapolitanChronicles) & NewVesselPress(neapolitanChronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(palaceOfFlies) & NewVesselPress(palaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: English(neapolitanChronicles)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializesIn(English, foreignLiterature)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: Book(neapolitanChronicles) & PublishedBook(neapolitanChronicles) & PublishingHouse(neapolitanChronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, neapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: Book(palaceOfFlies) & PublishedBook(palaceOfFlies) & PublishingHouse(palaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: English(neapolitanChronicles)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress, EnglishLiterature)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBook(NeapolitanChronicles) & PublishingHouse(NeapolitanChronicles, NewVesselPress)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PublishedBook(PalaceOfFlies) & PublishingHouse(PalaceOfFlies, NewVesselPress)\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: English(NeapolitanChronicles)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse) & TranslatesForeign(publishingHouse, English)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(x) & NewVesselPress(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: Book(NeapolitanChronicles) & PublishedBy(NeapolitanChronicles) & NewVesselPress(NeapolitanChronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian) & Book(NeapolitanChronicles) & TranslatedTo(English)(NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: Book(PalaceOfFlies) & PublishedBy(PalaceOfFlies) & NewVesselPress(PalaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: English(NeapolitanChronicles)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress, EnglishLiterature)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> EnglishBook(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBook(neapolitanChronicles) & PublishingHouse(neapolitanChronicles, newVesselPress)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, neapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PublishedBook(palaceOfFlies) & PublishingHouse(palaceOfFlies, newVesselPress)\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: EnglishBook(neapolitanChronicles)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (Book(x) & PublishedBy(NewVesselPress(x)) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: Book(neapolitanChronicles) & PublishedBy(newVesselPress(neapolitanChronicles))\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian(neapolitanChronicles))\nPalace of Flies is a book published by New Vessel Press.\nFOL: Book(palaceOfFlies) & PublishedBy(newVesselPress(palaceOfFlies))\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: English(neapolitanChronicles)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(publishedBy(publishingHouse))\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(publishedBy(publishingHouse))\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: English(NeapolitanChronicles)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse(x) & TranslatesForeignIntoEnglish(x))\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(publishingHouse(x)) & Book(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: Book(neapolitanChronics) & PublishedBy(newVesselPress) & PublishedBy(publishingHouse(x) & Book(x))\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronics)\nPalace of Flies is a book published by New Vessel Press.\nFOL: Book(palaceOfFlies) & PublishedBy(newVesselPress) & PublishedBy(publishingHouse(x) & Book(x))\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: English(neapolitanChronics)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(x) -> InEnglish(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(publishedBook) & NewVesselPress(publishingHouse)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(publishedBook) & NewVesselPress(publishingHouse)\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: English(NeapolitanChronicles)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(p)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(x) & NewVesselPress(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(neapolitanChronicles, newVesselPress)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(palaceOfFlies, newVesselPress)\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: English(neapolitanChronicles)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(publishedBook) & NewVesselPress(publishingHouse)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(publishedBook) & NewVesselPress(publishingHouse)\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: English(NeapolitanChronicles)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse(x) & TranslatesIntoEnglish(x))\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(publishingHouse(x)) -> InEnglish(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(publishedBook(x) & PublishedBy(publishingHouse(x)))\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(publishedBook(x) & PublishedBy(publishingHouse(x)))\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: InEnglish(NeapolitanChronicles)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (Book(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: Book(neapolitanChronicles) & NewVesselPress(publishingHouse)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: Book(palaceOfFlies) & NewVesselPress(publishingHouse)\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: English(neapolitanChronicles)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializesIn(EnglishLiterature, newVesselPress)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: Book(neapolitanChronicles) & PublishedBook(neapolitanChronicles) & PublishingHouse(newVesselPress, neapolitanChronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, neapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: Book(palaceOfFlies) & PublishedBook(palaceOfFlies) & PublishingHouse(newVesselPress, palaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: English(neapolitanChronicles)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress, EnglishLiterature)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> InEnglish(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBook(NeapolitanChronicles) & PublishingHouse(NewVesselPress, Book(NeapolitanChronicles))\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PublishedBook(PalaceOfFlies) & PublishingHouse(NewVesselPress, Book(PalaceOfFlies))\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: InEnglish(NeapolitanChronicles)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(isPublishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(isBook) & NewVesselPress(publishedBy(NeapolitanChronicles))\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(isBook) & NewVesselPress(publishedBy(PalaceOfFlies))\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: English(NeapolitanChronicles)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse) & TranslatesIntoEnglish(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> InEnglish(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBook(neapolitanChronicles) & PublishedBy(publishingHouse, neapolitanChronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PublishedBook(palaceOfFlies) & PublishedBy(publishingHouse, palaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: InEnglish(neapolitanChronicles)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (NewVesselPress(x) -> EnglishBook(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NewVesselPress(chronicles) & Book(chronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(chronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: NewVesselPress(flies) & Book(flies)\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: EnglishBook(chronicles)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(x) & TranslatesForeignIntoEnglish(x)\nAll of New Vessel Press's published books are in English.\nFOL: all y. (PublishedBook(y) -> English(y))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(x) & PublishedBy(x, NewVesselPress)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(x) & NeapolitanChronicles(x)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(x) & PublishedBy(x, NewVesselPress)\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: English(NeapolitanChronicles)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse(x) & TranslatesForeignIntoEnglish(x))\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(publishedBy(x) & NewVesselPress(x))\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(Chronicles) & TranslatedFromItalian(Italian)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(publishedBy(x) & NewVesselPress(x))\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: English(Chronicles) & PublishedBy(Chronicles)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress, TranslateIntoEnglish)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBook(neapolitanChronicles) & PublishingHouse(neapolitanChronicles, newVesselPress)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslateFromItalian(neapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PublishedBook(palaceOfFlies) & PublishingHouse(palaceOfFlies, newVesselPress)\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: English(neapolitanChronicles)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(x) & English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(book) & PublishedBy(NewVesselPress, NeapolitanChronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(book) & PublishedBy(NewVesselPress, PalaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: English(NeapolitanChronicles)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse(x) & SpecializesIn(x, ForeignLiterature))\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> InEnglish(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(publishedBy(publishingHouse(NewVesselPress), book(x)))\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(publishedBy(publishingHouse(NewVesselPress), book(x)))\n</PREMISES>\n<CONCLUSION>\nNeapolitan Chronicles is an English book.\nFOL: InEnglish(NeapolitanChronicles)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 132,
  "responses": [
   [
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(x) & TranslatesForeignIntoEnglish(x)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(x) -> InEnglish(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(x) & PublishedBy(NewVesselPress(x), x)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(x) & Translated(x, Italian, x)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(x) & PublishedBy(NewVesselPress(x), x)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(x) & TranslatesForeignIntoEnglish(x)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(x",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, neapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress, English)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> InEnglish(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBook(NeapolitanChronicles) & PublishedBy(NewVesselPress, NeapolitanChronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nPalace of Flies is a book published by New VesselPress.\nFOL: PublishedBook(PalaceOfFlies) & PublishedBy(NewVesselPress, PalaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress, English)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> InEnglish",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress, English)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NeapolitanChronicles, NewVesselPress)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nPalace of Flies is a book published by New VesselPress.\nFOL: PublishedBy(PalaceOfFlies, NewVesselPress)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\nFOL: PublishedBy(HarryPotter, NewVesselPress)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(isPublishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(isBook) & PublishedBy(NewVesselPress, NeapolitanChronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(isBook) & PublishedBy(NewVesselPress, PalaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\nFOL: HarryPotter(isBook) & PublishedBy(NewVesselPress, HarryPotter)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(isPublishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(isBook) & PublishedBy(NewVesselPress, NeapolitanChronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(isBook) & PublishedBy(NewVesselPress, PalaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(isPublishingHouse)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(x) -> English(x))\nTEXT:",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(isPublishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> InEnglish(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(isBook) & NewVesselPress(publishedBook)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\nPalace of Flies is a book published by New VesselPress.\nFOL: PalaceOfFlies(isBook) & NewVesselPress(publishedBook)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(isPublishingHouse)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (Book(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: Book(chronicles) & NewVesselPress(publishingHouse)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(chronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: Book(palaceOfFlies) & NewVesselPress(publishingHouse)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse) & SpecializesIn(English)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (Book(x) -> English(x))\nTEXT: Neapolitan Chronicles is a book published by",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse(x) & TranslatesForeignIntoEnglish(x))\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(x) & NewVesselPress(publishingHouse(x)) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(publishedBook(x) & PublishedBy(x) & NewVesselPress(publishingHouse(x)))\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(Chronicles(x))\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(publishedBook(x) & PublishedBy(x) & NewVesselPress(publishingHouse(x)))\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse(x) & TranslatesForeignInto",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress, EnglishTranslation)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBook(NeapolitanChronicles) & PublishingHouse(NewVesselPress, EnglishTranslation)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nPalace of Flies is a book published by New VesselPress.\nFOL: PublishedBook(PalaceOfFlies) & PublishingHouse(NewVesselPress, EnglishTranslation)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\nFOL: PublishedBook(HarryPotter) & PublishingHouse(NewVesselPress, EnglishTranslation)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(book) & PublishedBook(NeapolitanChronicles) & NewVesselPress(publishingHouse)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(book) & PublishedBook(PalaceOfFlies) & NewVesselPress(publishingHouse)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (Published",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (NewVesselPress(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(x) & NewVesselPress(x)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(x) & NewVesselPress(x)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\nFOL: HarryPotter(x) & NewVesselPress(x)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(English)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(x) -> InEnglish(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: Book(neapolitanChronicles) & PublishedBy(newVesselPress, neapolitanChronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, neapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: Book(palaceOfFlies) & PublishedBy(newVesselPress, palaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress) & SpecializeIn(English)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (NewVesselPress(x) -> PublishedBook(x) & English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NewVesselPress(publishedBy(Chronicles)) & PublishedBook(Chronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(Chronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: NewVesselPress(publishedBy(flies)) & PublishedBook(flies)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\nFOL: NewVesselPress(publishedBy(harryPotter)) & PublishedBook(harryPotter)\n</EVALUATE>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBook(neapolitanChronicles) & NewVesselPress(publishingHouse)\nNeapolitan Chronicles was translated from Italian.\nFOL: -Italian(neapolitanChronicles) & TranslatedFrom(Italian)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PublishedBook(palaceOfFlies) & NewVesselPress(publishingHouse)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\nFOL: -HarryPotter(publishedBy) & NewVesselPress(publishingHouse)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (Book(x) & Published(x, NewVesselPress) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: Book(Chronicles) & Published(Chronicles, NewVesselPress)\nNeapolitan Chronicles was translated from Italian.\nFOL: Translated(Chronicles, Italian)\nPalace of Flies is a book published by New Vessel Press.\nFOL: Book(Flies) & Published(Flies, NewVesselPress)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\nFOL: Book(HarryPotter) & Published(HarryPotter, NewVesselPress)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (Book(x) -> InEnglish(x) & PublishedBy(NewVesselPress, x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: Book(neapolitanChronicles) & PublishedBy(newVesselPress, neapolitanChronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, neapolitanChronicles)\nPalace of Flies is a book published by New VesselPress.\nFOL: Book(palaceOfFlies) & PublishedBy(newVesselPress, palaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (Book",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(press) -> InEnglish(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, NeapolitanChronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nPalace of Flies is a book published by New VesselPress.\nFOL: PublishedBy(newVesselPress, PalaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, HarryPotter)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (Book(x) -> NewVesselPress(x) & English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: Book(Chronicles) & NewVesselPress(Chronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(Chronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: Book(Flies) & NewVesselPress(Flies)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (Book(x) -> NewVesselPress(x) & English(x))\nTEXT: Neapolitan Chronicles is a book published",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(x) & TranslatesForeignIntoEnglish(x)\nAll of New Vessel Press's published books are in English.\nFOL: all y. (PublishedBook(y) -> InEnglish(y))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(x) & PublishedBook(x) & NewVesselPress(x)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(x) & NeapolitanChronicles(x)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(x) & PublishedBook(x) & NewVesselPress(x)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(x) & TranslatesForeignIntoEnglish(x)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all y. (PublishedBook"
   ],
   [
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(publishedBook) & NewVesselPress(publishingHouse)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(Chronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(publishedBook) & NewVesselPress(publishingHouse)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\nTEXT: Neapolitan Chronicles is a book published by",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, neapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, harryPotter)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (Book(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: Book(neapolitanChronicles) & NewVesselPress(publishingHouse)\nNeapolitan Chronicles was translated from Italian.\nFOL: Translate(Translate(neapolitanChronicles), Italian)\nPalace of Flies is a book published by New Vessel Press.\nFOL: Book(palaceOfFlies) & NewVesselPress(publishingHouse)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (Book(x) -> English(x))\nTEXT: Neapolitan Chronicles is a book published by New V",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(press) & SpecializesIn(English, press)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(press, x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(book) & PublishedBy(press, book)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, book)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(book) & PublishedBy(press, book)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(press) & SpecializesIn(English, press)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(press, x) -> English(x",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (NewVesselPress(x) -> PublishedBook(x) & Language(x) = English)\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NewVesselPress(publishingHouse) & Book(publishingHouse) & PublishedBook(publishingHouse)\nNeapolitan Chronicles was translated from Italian.\nFOL: PublishedBook(publishingHouse) & Language(publishingHouse) = Italian & Translation(publishingHouse) = Italian\nPalace of Flies is a book published by New Vessel Press.\nFOL: NewVesselPress(publishingHouse) & Book(publishingHouse) & PublishedBook(publishingHouse)\n</PREMISES>\n<CONCLUSION>\nHarry Potter was published by New Vessel Press.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nTEXT:"
   ]
  ]
 },
 {
  "index": 133,
  "responses": [
   [
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (Book(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: Book(neapolitanChronicles) & NewVesselPress(publishingHouse)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: Book(palaceOfFlies) & NewVesselPress(publishingHouse)\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress, TranslationIntoEnglish)\nTEXT: All of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(newVesselPress, x) -> InEnglish(x))\nTEXT: Neapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, NeapolitanChronicles)\nTEXT: Neapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\nTEXT: Palace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, PalaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(PalaceOfFlies)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(isPublishingHouse) & SpecializeIn(EnglishLiterature, NewVesselPress)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> InEnglish(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(isBook) & PublishedBook(NeapolitanChronicles) & PublishedBy(NeapolitanChronicles, NewVesselPress)\nNeapolitan Chronicles was translated from Italian.\nFOL: NeapolitanChronicles(isTranslatedFromItalian)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(isBook) & PublishedBook(PalaceOfFlies) & PublishedBy(PalaceOfFlies, NewVesselPress)\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: PalaceOfFlies(isTranslatedFromItalian)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(x) & SpecializesIn(x, ForeignLiterature)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(x) & PublishedBy(NewVesselPress, x)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, x) & Translated(x, x)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(x) & PublishedBy(NewVesselPress, x)\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: PalaceOfFlies(x) & TranslatedFrom(Italian, x)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(x) -> InEnglish(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, neapolitanChronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, palaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse(x) & SpecializesIn(English, x))\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x, y) -> InEnglish(y))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(publishedBook(x, y) & NewVesselPress(publishingHouse(x) & PublishedBy(x, y)))\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(publishedBook(x, y) & NewVesselPress(publishingHouse(x) & PublishedBy(x, y)))\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFrom(Italian, PalaceOfFlies)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(publishedBook) & NewVesselPress(publishingHouse)\nNeapolitan Chronicles was translated from Italian.\nFOL: NeapolitanChronicles(TranslatedFromItalian)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(publishedBook) & NewVesselPress(publishingHouse)\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: PalaceOfFlies(TranslatedFromItalian)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (Book(x) -> InEnglish(x) & PublishedBy(x, NewVesselPress))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: Book(neapolitanChronicles) & PublishedBy(neapolitanChronicles, NewVesselPress)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: Book(palaceOfFlies) & PublishedBy(palaceOfFlies, NewVesselPress)\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(x) & NewVesselPress(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(NeapolitanChronicles, NewVesselPress)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nPalace of Flies is a book published by New VesselPress.\nFOL: PublishedBy(PalaceOfFlies, NewVesselPress)\n</PREMISES>\n\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFrom(Italian, PalaceOfFlies)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (Book(x) -> InEnglish(x) & PublishedBy(NewVesselPress(x)))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: Book(neapolitanChronics) & PublishedBy(NewVesselPress(neapolitanChronics))\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian(neapolitanChronics))\nPalace of Flies is a book published by New Vessel Press.\nFOL: Book(palaceOfFlies) & PublishedBy(NewVesselPress(palaceOfFlies))\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFrom(Italian(palaceOfFlies))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress, EnglishTranslation)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (Book(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: Book(NeapolitanChronicles) & PublishingHouse(NewVesselPress, Book(NeapolitanChronicles))\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: Book(PalaceOfFlies) & PublishingHouse(NewVesselPress, Book(PalaceOfFlies))\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(PalaceOfFlies)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(press) -> InEnglish(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, NeapolitanChronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(newVesselPress, PalaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(PalaceOfFlies)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(isPublishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(isBook) & NewVesselPress(publishedBy)\nNeapolitan Chronicles was translated from Italian.\nFOL: NeapolitanChronicles(translatedFrom)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(isBook) & NewVesselPress(publishedBy)\n</PREMISES>\n\n<CONCLUSION>\nPalace of Flies was translated from Italian.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: NewVesselPress(isPublishingHouse)\nFOL: all x. (PublishedBook(x) -> English(x))\nFOL: NeapolitanChronicles(isBook) & NewVesselPress(publishedBy)\nFOL: NeapolitanChronicles(translatedFrom)\nFOL: PalaceOfFlies(isBook) & NewVesselPress(p",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse) & SpecializesIn(English)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(press) & Published(press, book) -> InEnglish(book))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(book) & Published(NewVesselPress, book)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(book) & Published(NewVesselPress, book)\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(PalaceOfFlies)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse(x) & TranslatesForeign(x))\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(x) & NewVesselPress(x) -> InEnglish(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(publishedBook(x) & PublishedBy(x) & NewVesselPress(x))\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian(x) & NeapolitanChronicles(x))\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(publishedBook(x) & PublishedBy(x) & NewVesselPress(x))\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFrom(Italian(x) & PalaceOfFlies(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(isPublishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(isBook) & NewVesselPress(publishedBook)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(isBook) & NewVesselPress(publishedBook)\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(PalaceOfFlies)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse) & specializesIn(English)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(x) -> InEnglish(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(book) & PublishedBy(NewVesselPress, NeapolitanChronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(book) & PublishedBy(NewVesselPress, PalaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFrom(Italian, PalaceOfFlies)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress, EnglishTranslation)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBook(NeapolitanChronicles) & PublishingHouse(NewVesselPress, Book)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PublishedBook(PalaceOfFlies) & PublishingHouse(NewVesselPress, Book)\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFrom(Italian, PalaceOfFlies)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(x) & TranslatesForeignIntoEnglish(x)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(x) & NewVesselPress(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBy(neapolitanChronicles, NewVesselPress(neapolitanChronicles))\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PublishedBy(palaceOfFlies, NewVesselPress(palaceOfFlies))\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (Book(x) & PublishedBy(NewVesselPress(x)) -> Language(x) = English)\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: Book(neapolitanChronicles) & PublishedBy(NewVesselPress(neapolitanChronicles))\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian(neapolitanChronicles))\nPalace of Flies is a book published by New Vessel Press.\nFOL: Book(palaceOfFlies) & PublishedBy(NewVesselPress(palaceOfFlies))\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFrom(Italian(palaceOfFlies))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(publishedBy(publishingHouse))\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(publishedBy(publishingHouse))\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(PalaceOfFlies)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress) & SpecializeIn(TranslateForeignIntoEnglish)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) & NewVesselPress(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: Book(NeapolitanChronicles) & PublishedBook(NeapolitanChronicles) & NewVesselPress(NeapolitanChronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: Translate(NeapolitanChronicles, Italian)\nPalace of Flies is a book published by New Vessel Press.\nFOL: Book(PalaceOfFlies) & PublishedBook(PalaceOfFlies) & NewVesselPress(PalaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: Translate(PalaceOfFlies, Italian)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: NewVesselPress(publishingHouse(x) & SpecializesIn(English(x)))\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBy(x, y) -> English(y))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: NeapolitanChronicles(publishedBy(NewVesselPress, x))\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PalaceOfFlies(publishedBy(NewVesselPress, x))\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(PalaceOfFlies)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(newVesselPress, TranslatesForeignIntoEnglish)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBook(neapolitanChronicles) & PublishingHouse(neapolitanChronicles, newVesselPress)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFromItalian(neapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PublishedBook(palaceOfFlies) & PublishingHouse(palaceOfFlies, newVesselPress)\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFromItalian(palaceOfFlies)\n</CONCLUSION>",
    "<PREMISES>\nNew Vessel Press is a publishing house which specializes in translating foreign literature into English.\nFOL: PublishingHouse(NewVesselPress, EnglishTranslation)\nAll of New Vessel Press's published books are in English.\nFOL: all x. (PublishedBook(x) -> English(x))\nNeapolitan Chronicles is a book published by New Vessel Press.\nFOL: PublishedBook(NeapolitanChronicles) & PublishingHouse(NewVesselPress, NeapolitanChronicles)\nNeapolitan Chronicles was translated from Italian.\nFOL: TranslatedFrom(Italian, NeapolitanChronicles)\nPalace of Flies is a book published by New Vessel Press.\nFOL: PublishedBook(PalaceOfFlies) & PublishingHouse(NewVesselPress, PalaceOfFlies)\n</PREMISES>\n<CONCLUSION>\nPalace of Flies was translated from Italian.\nFOL: TranslatedFrom(Italian, PalaceOfFlies)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 134,
  "responses": [
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularly(x) & OftenAtHome(x))\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nAll people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> VisitOfficeSupplyStore(x))\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidyingAndOrganizing(x) -> NotBedLate(x) & WakeUpEveryDayAfterNoon(x",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularly(x) & OftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidyingAndOrganizing(x) -> NotBedLate(x) &",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> RegularlyWorks(x) & OftenWorks(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (RegularlyWorks(x) & OftenWorks(x) -> TidiesAndOrganizes(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (RegularlyWorks(x) & OftenWorks(x) -> VisitsOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (TidiesAndOrganizes(x) -> -LateBedtime(x) & WakeUpAfterNoon(x",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularly(x) & OftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> SpendFreeTimeTidying(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidying(x) -> -Late(x) & -WakeUpAfterNoon(x)\nTEXT:",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidyingAndOrganizing(x) -> NotGoTo"
   ],
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> OwnsDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> TidyAndOrganizeHomeSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganizeHomeSpaces(x) -> -BedLateAndWakeUpAfterNoon(x)\nTEXT: Remy either both goes to bed late",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAtHome(x) -> SpendFreeTimeTidying(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidying(x) -> NotLateToBed(x) & WakeUpAfterNoon(x))\nTEXT: Remy either both goes to bed late and",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> TidyAndOrganize(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganize(x) -> -LateBedtime(x) & -WakeUpAfterNoon",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedOffice(x) -> DesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> SpendFreeTimeTidying(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidying(x) -> -LateBed(x) & -WakeUpAfterNoon(x))\n",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularly(x) & OftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> SpendFreeTimeTidying(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidying(x) -> -LateToBed(x) & -WakeUpAfterNoon(x"
   ],
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidyingAndOrganizing(x) -> -BedLateAndWakeUpAfterNoon(x)\nTEXT",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularly(x) & OftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> SpendFreeTimeTidying(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidying(x) -> NotGoToBedLate(x) & WakeUp",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidyingAndOrganizing(x) -> NotGoToBedLateAndWakeUpAfterNo",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBedLate(x) & -Wake",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularly(x) & OftenAtHome(x))\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> SpendFreeTimeTidying(x))\nAll people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> VisitOfficeSupplyStore(x))\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidying(x) -> NotLateToBed(x) & WakeUpAfterNoon(x))\nR"
   ],
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsDesktopMonitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> OwnsDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> SpendFreeTimeTidying(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidying(x) -> -BedLate(x) & WakeUpEvery",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularly(x) & OftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> TidyAndOrganize(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (TidyAndOrganize(x) -> -LateToBed(x) & WakeUpAfterNoon(x))\n",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularly(x) & OftenAtHome(x))\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nAll people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidyingAndOrganizing(x) -> NoLateBedtime(x) & WakeUpAfterNoon",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsDesktopMonitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> OwnsDesktopMonitor(x))\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> TidyAndOrganizeHome(x))\nAll people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganizeHome(x) -> NotLateToBed(x) & WakeUpAfterNoon(x)\nRemy either both goes to bed late",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> RegularWork(x) & OftenWorkAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (RegularWork(x) & OftenWorkAtHome(x) -> SpendFreeTimeTidying(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (RegularWork(x) & OftenWorkAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidying(x) -> -LateBed(x) & -WakeUpAfterNoon(x)\nTEXT"
   ],
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularly(x) & OftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> SpendFreeTimeTidying(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidying(x) -> -Late(x) & -WakeUpAfterNo",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularly(x) & OftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> TidyAndOrganize(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (TidyAndOrganize(x) -> -LateToBed(x) & -WakeUp",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsDesktopMonitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> OwnsDesktopMonitor(x))\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> TidyAndOrganize(x))\nAll people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganize(x) -> -LateToBed(x) & -WakeUpAfterNoon(x)\nRemy either both goes to bed late and",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> TidyAndOrganize(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganize(x) -> NotGoToBedLate(x) & WakeUp",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsDesktopMonitor(x) -> WorkRegularly(x) & OftenAtHome(x))\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedOffice(x) -> OwnsDesktopMonitor(x))\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> SpendFreeTimeTidying(x))\nAll people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> VisitOfficeSupplyStore(x))\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidying(x) -> NotBedLate(x) & WakeUpAfterNoon(x))\nRemy either both goes to bed late"
   ]
  ]
 },
 {
  "index": 135,
  "responses": [
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularly(x) & OftenAtHome(x))\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HasFullyStockedHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> SpendFreeTimeTidying(x))\nAll people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> VisitOfficeSupplyStore(x))\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidying(x) -> NotGoToBedLate(x) & NotWakeUpAfterNoon(x)\nRemy either both goes to",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularly(x) & OftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidyingAndOrganizing(x) -> -LateToBed",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedOffice(x) -> OwnsLargeDesktopMonitor(x))\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> TidyAndOrganizeHome(x))\nAll people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganizeHome(x) -> NotLateAndNotEarly(x)\nRemy either both goes to bed late and wakes up every day after",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsDesktopMonitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HasFullyStockedHomeOffice(x) -> OwnsDesktopMonitor(x))\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> TidyAndOrganize(x))\nAll people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganize(x) -> -LateToBed(x) & -WakeUpAfterNoon(x)\nRemy either both goes to bed late",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularly(x) & OftenAtHome(x))\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> SpendFreeTimeTidying(x))\nAll people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> VisitOfficeSupplyStore(x))\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidying(x) -> -LateToBed(x) & -WakeUpAfterNoon(x)\nRemy either both goes"
   ],
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktop(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HasFullyStockedOffice(x) -> OwnsLargeDesktop(x))\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> TidyAndOrganize(x))\nAll people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (TidyAndOrganize(x) -> -LateToBed(x) & WakeUpAfterNoon(x))\nRemy either both goes to",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nAll people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidyingAndOrganizing(x) -> -LateToBed(x) & -Wake",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsDesktopMonitor(x) -> RegularWork(x) & OftenWork(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedOffice(x) -> OwnsDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (RegularWork(x) & OftenWork(x) -> TidyAndOrganize(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (RegularWork(x) & OftenWork(x) -> OfficeSupplyStoreVisit(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (TidyAndOrganize(x) -> -LateBedtime(x) & WakeUpAfterNoon(x))\nTEXT: Remy either both goes to",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedOffice(x) -> DesktopMonitor(x))\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> TidyAndOrganize(x))\nAll people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganize(x) -> NotGoToBedLate(x) & NotWakeUpAfterNoon(x)\nRemy either both goes to bed late and wakes up every day",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> RegularlyWorksAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (RegularlyWorksAtHome(x) -> TidyAndOrganize(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (RegularlyWorksAtHome(x) -> VisitsOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganize(x) -> NotBedLate(x) & NotWakeUpAfterNoon(x)\nTEXT: Remy either both goes to bed late and wakes up every"
   ],
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HasFullyStockedHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidyingAndOrganizing(x) -> -LateAndWakeUpAfterNoon(x)\nTEXT:",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsDesktopMonitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HasFullyStockedHomeOffice(x) -> OwnsDesktopMonitor(x))\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> TidyAndOrganizeHome(x))\nAll people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganizeHome(x) -> NotBedLate(x) & WakeUpAfterNoon(x)\nRemy either both goes to bed late",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nAll people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidyingAndOrganizing(x) -> NotGoToBedLate(x) & NotWakeUp",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nAll people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidyingAndOrganizing(x) -> -LateToBedAndWakeUpAfterNoon(x)\nRemy either both goes to",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> (WorkRegularly(x) & WorkOftenAtHome(x)))\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> DesktopMonitor(x))\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> TidyAndOrganize(x))\nAll people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganize(x) -> -LateToBed(x) & -WakeUpAfterNoon(x)\nRemy either both goes to bed late and wakes up every day after noon"
   ],
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nAll people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidyingAndOrganizing(x) -> NotGoToBedLateAndWakeUpAfterNoon(x)\nRemy either both goes",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HasFullyStockedOffice(x) -> OwnsLargeMonitor(x))\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> TidyAndOrganizeHome(x))\nAll people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganizeHome(x) -> NotGoToBedLateAndWakeUpAfterNoon(x)\nRemy either both goes to bed late and wakes up every day after noon and spends their",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HasFullyStockedAndImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -GoToBed",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> DesktopMonitor(x))\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> TidyAndOrganize(x))\nAll people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganize(x) -> NotGoToBedLate(x) & NotWakeUpAfterNoon(x)\nRemy either both goes to bed late and wakes up every day after noon",
    "<EVALUATE>\nTEXT: If people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> (RegularlyWork(x) & OftenWorkAtHome(x)))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedOffice(x) -> DesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (RegularlyWork(x) & OftenWorkAtHome(x) -> TidyAndOrganize(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (RegularlyWork(x) & OftenWorkAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganize(x) -> NotBedLate(x) & NotWakeUpAfterNoon(x)\nTEXT: Remy either"
   ],
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidyingAndOrganizing(x) -> -LateToBedAndWakeUpAfterNoon",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularly(x) & OftenAtHome(x))\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedOffice(x) -> OwnsLargeDesktopMonitor(x))\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> TidyAndOrganize(x))\nAll people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> VisitOfficeSupplyStore(x))\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganize(x) -> NotGoToBedLate(x) & NotWakeUpAfterNoon(x)\nRemy either both goes to bed late and wakes",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularly(x) & OftenAtHome(x))\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HasFullyStockedOffice(x) -> OwnsLargeDesktopMonitor(x))\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> SpendFreeTimeTidying(x))\nAll people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> VisitOfficeSupplyStore(x))\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidying(x) -> -Late(x) & -WakeUpAfterNoon(x)\nRemy either both goes to bed late and wakes",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsDesktopMonitor(x) -> RegularWork(x) & OftenWork(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedOffice(x) -> OwnsDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (RegularWork(x) & OftenWork(x) -> TidyAndOrganize(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (RegularWork(x) & OftenWork(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganize(x) -> NotLateToBed(x) & WakeUpAfterNoon(x)\nTEXT: Remy either both goes to bed late and wakes",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidyingAndOrganizing(x) -> -Late(x) &"
   ]
  ]
 },
 {
  "index": 136,
  "responses": [
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsDesktopMonitor(x) -> RegularWork(x) & OftenWork(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedOffice(x) -> OwnsDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (RegularWork(x) & OftenWork(x) -> TidyAndOrganize(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (RegularWork(x) & OftenWork(x) -> OfficeSupplyStoreVisit(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganize(x) -> -LateBedTime(x) & -WakeUpAfterNoon(x)\nTEXT: Remy either both goes to bed late and",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidyingAndOrganizing(x) -> -LateToBedAndWakeUpAfterNoon",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> TidyAndOrganizeHome(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganizeHome(x) -> -LateAndWakeUpAfterNoon(x)\nTEXT: Remy either both",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> WorkRegularly(x) & WorkOften(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HomeOffice(x) -> DesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOften(x) -> Tidy(x) & Organize(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOften(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: Tidy(x) & Organize(x) -> NotBedLate(x) & WakeUpAfterNoon(x)\nTEXT: Remy either both goes to bed late and wakes",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> -LateAndWakeUp"
   ],
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsDesktopMonitor(x) -> WorkRegularly(x) & OftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedOffice(x) -> OwnsDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> TidyAndOrganize(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganize(x) -> NotGoToBedLate(x) & WakeUpAfterNoon(x)\nTEXT: Remy either",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularly(x) & OftenWorkFromHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & OftenWorkFromHome(x) -> SpendFreeTimeTidying(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & OftenWorkFromHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidying(x) -> -LateToBed(x) & -WakeUpAfterNoon(x)\n",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> RegularWork(x) & OftenWorkAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (RegularWork(x) & OftenWorkAtHome(x) -> TidyAndOrganize(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (RegularWork(x) & OftenWorkAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganize(x) -> -LateBedtime(x) & -WakeUpAfterNoon(x)\nTEXT:",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularly(x) & OftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> TidyAndOrganize(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & OftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganize(x) -> NotLate(x) & NotWakeUpAfterNoon(x)\nTEXT: Remy either both",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStoreRegularly(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidyingAndOrganizing(x) -> -LateToBedAndWakeUpAfterNoon"
   ],
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HasFullyStockedHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> TidyAndOrganizeHomeSpaces(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganizeHomeSpaces(x) -> NotLateAndWakeUpAfterNoon(x)\nTEXT: Remy either both goes to",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> SpendFreeTimeTidying(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidying(x) -> -Late(x) & -WakeUpAfterNoon(x)\nTEXT",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> RegularlyWorkAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (RegularlyWorkAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (RegularlyWorkAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidyingAndOrganizing(x) -> NotGoToBedLate(x) & NotWakeUpEveryDayAfterNoon(x)\nTEXT: Remy either",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> (WorkRegularly(x) & WorkOftenAtHome(x)))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> DesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> TidyAndOrganize(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (TidyAndOrganize(x) -> -LateToBed(x) & -WakeUpAfterNoon(x))\n",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> DesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> TidyAndOrganize(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganize(x) -> -LateBedTime(x) & -WakeUpAfterNoon(x)\nTEXT: Remy either"
   ],
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsDesktopMonitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedOffice(x) -> OwnsDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> SpendFreeTimeTidying(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidying(x) -> -LateToBed(x) & WakeUpAfterNoon(x)\nTEXT",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> SpendFreeTimeTidying(x))\nAll people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidying(x) -> NotGoToBedLate(x) & NotWakeUpAfterNoon(x)\nRemy either both goes to",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> RegularWorkAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (RegularWorkAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (RegularWorkAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) -> NotLateBedAndWakeAfterNoon(x))\nTEXT: Remy either both goes to bed",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> (WorkRegularly(x) & WorkOftenAtHome(x)))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedOffice(x) -> DesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> TidyAndOrganize(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (TidyAndOrganize(x) -> -LateBedtime(x) & WakeUpAfterNoon(x))\nTEXT:",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (DesktopMonitor(x) -> RegularlyWork(x) & OftenWorkAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedOffice(x) -> DesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (RegularlyWork(x) & OftenWorkAtHome(x) -> TidyAndOrganize(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (RegularlyWork(x) & OftenWorkAtHome(x) -> OfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (TidyAndOrganize(x) -> NotBedLate(x) & WakeUpAfterNoon(x))\nTEXT: Remy either"
   ],
   [
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\nAll people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nAll people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nAll people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nIf people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidyingAndOrganizing(x) -> -LateToBed(x) & -WakeUpAfter",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularlyAndOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HasFullyStockedAndImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> TidyAndOrganizeHome(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularlyAndOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganizeHome(x) -> -LateBedtime(x) & -WakeUpAfterNoon(x)\nTEXT:",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsDesktopMonitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HasFullyStockedHomeOffice(x) -> OwnsDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> SpendFreeTimeTidying(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: SpendFreeTimeTidying(x) -> NotGoToBedLate(x) & NotWakeUpAfterNo",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnLargeDesktopMonitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (FullyStockedAndImpressiveHomeOffice(x) -> OwnLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> SpendFreeTimeTidyingAndOrganizing(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: all x. (SpendFreeTimeTidyingAndOrganizing(x) ->",
    "<PREMISES>\nIf people own a large desktop monitor at their home, then they work regularly and often at home.\nFOL: all x. (OwnsLargeDesktopMonitor(x) -> WorkRegularly(x) & WorkOftenAtHome(x))\nTEXT: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\nFOL: all x. (HasFullyStockedOffice(x) -> OwnsLargeDesktopMonitor(x))\nTEXT: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> TidyAndOrganize(x))\nTEXT: All people who work regularly and often at home visit the office supply store regularly.\nFOL: all x. (WorkRegularly(x) & WorkOftenAtHome(x) -> VisitOfficeSupplyStore(x))\nTEXT: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \nFOL: TidyAndOrganize(x) -> NoLateBedtime(x) & WakeUpAfterNoon(x)\n"
   ]
  ]
 },
 {
  "index": 137,
  "responses": [
   [
    "<PREMISES>\nall x. (Human(x) -> Mortal(x))\nall x. (Greek(x) -> Human(x))\n</PREMISES>\n<CONCLUSION>\nexists x. (Greek(x) & Mortal(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Mortal(x))\nall x. (Greek(x) -> Human(x))\n</PREMISES>\n<CONCLUSION>\nsome x. (Greek(x) & Mortal(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nall x. (Human(x) -> Mortal(x))\nall x. (Greek(x) -> Human(x))\n</PREMISES>\n<CONCLUSION>\nsome x. (Greek(x) & Mortal(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nall x. (Human(x) -> Mortal(x))\nall x. (Greek(x) -> Human(x))\n</PREMISES>\n<CONCLUSION>\nexists x. (Greek(x) & Mortal(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nall x. (Human(x) -> Mortal(x))\nall x. (Greek(x) -> Human(x))\n</PREMISES>\n<CONCLUSION>\nsome x. (Greek(x) & Mortal(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Human(x) -> Mortal(x))\nall x. (Greek(x) -> Human(x))\n</PREMISES>\n<CONCLUSION>\nexists x. (Greek(x) & Mortal(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All humans are mortal.\nFOL: all x. (Human(x) -> Mortal(x))\nTEXT: All Greeks are humans.\nFOL: all x. (Greek(x) -> Human(x))\nTEXT: Some Greeks are mortal.\nFOL: exists x. (Greek(x) & Mortal(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 138,
  "responses": [
   [
    "<PREMISES>\nall x. (Student(x) & LibraryJob(x) -> -CS(x))\nall x. (Student(x) & PartTimeJob(x) -> LibraryJob(x))\nall x. (Student(x) & DatabaseCourse(x) -> CS(x))\nall x. (Student(x) & DavidInstructs(x) -> DatabaseCourse(x))\nall x. (Student(x) & LabJob(x) -> DavidInstructs(x))\nJames is a student working in the lab.\nJack neither has a part-time job offered by the university nor works in the lab.\n</PREMISES>\n<CONCLUSION>\n-Jack & PartTimeJob(james) & -LibraryJob(james)\n</CONCLUSION>",
    "<PREMISES>\nall x. (-LibraryWorker(x) & ComputerScience(x))\nall x. (PartTimeJob(x, University) -> LibraryWorker(x))\nall x. (DatabaseCourse(x) -> ComputerScience(x))\nall x. (DatabaseCourse(x) -> David(x, x))\nall x. (LabWorker(x) -> David(x, x))\nJames: LibraryWorker(james)\nJack: -PartTimeJob(jack, University) & -LabWorker(jack)\n</PREMISES>\n<CONCLUSION>\n-PartTimeJob(james, University)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (-LibraryWorker(x) & ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJob(x, University) -> LibraryWorker(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x",
    "<PREMISES>\nNo students who work in the library are from the computer science department.\nFOL: all x. (Student(x) & Library(x) -> -CS(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (Student(x) & UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Student(x) & Database(x) -> CS(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (Student(x) & David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Student(x) & Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Student(james) & Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Library(jack)\n</PREMISES>\n<CONCLUSION>\nJames has a part-time job offered by the university.\n</",
    "<PREMISES>\nNo students who work in the library are from the computer science department.\nFOL: all x. (Student(x) & Library(x) & ComputerScience(x) -> -True)\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (Student(x) & PartTimeJob(x) & University(x) -> (Student(x) & Library(x)))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Student(x) & DatabaseCourse(x) & ComputerScience(x) -> True)\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (Student(x) & ProfessorDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Student(x) & Lab(x) & ProfessorDavid(x) -> True)\nTEXT: James is a student working in the lab.\nFOL: Student(james) & Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJob(jack) & -",
    "<PREMISES>\nNo students who work in the library are from the computer science department.\nFOL: all x. (Student(x) & Library(x) -> -CS(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (Student(x) & UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Student(x) & Database(x) -> CS(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (Student(x) & ProfessorDavid(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Student(x) & Lab(x) -> ProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: Student(james) & Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Library(jack)\n</PREMISES>\n\n<CONCLUSION>\nJames has a part-time job offered by the university"
   ],
   [
    "<PREMISES>\nall x. (-Student(x) & LibraryJob(x) & ComputerScience(x)) -> False\nall x. (Student(x) & PartTimeJob(x, university) -> LibraryJob(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScience(x))\nall x. (Student(x) & TakesCourse(x, database) & InstructedBy(x, david) -> ComputerScience(x))\nall x. (Student(x) & LabJob(x) & InstructedBy(x, david) -> TakesCourse(x, database))\nStudent(james) & LabJob(james)\nStudent(jack) & -PartTimeJob(jack, university) & -LabJob(jack)\n</PREMISES>\n<CONCLUSION>\nStudent(james) & PartTimeJob(james, university)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (-Student(x) & LibraryJob(x) & ComputerScience(x)) -> False\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (Student(x) & PartTimeJob",
    "<PREMISES>\nall x. (-Student(x) & LibraryWorker(x) & ComputerScience(x)) -> False\nall x. (Student(x) & PartTimeJob(x, University) -> LibraryWorker(x))\nall x. (Student(x) & Database(x) -> ComputerScience(x))\nall x. (Student(x) & Database(x) -> David(x))\nall x. (Student(x) & Lab(x) -> David(x))\nJames(x)\n-Student(x) & Lab(x)\nJack(x)\n-PartTimeJob(x, University)\n-Student(x) & Lab(x)\n</PREMISES>\n<CONCLUSION>\nStudent(x) & PartTimeJob(x, University)\n</CONCLUSION>",
    "<PREMISES>\nNo students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScience(x) -> -Student(x))\n\nAll students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) & Library(x) -> Student(x))\n\nAll students who take the database course are from the computer science department.\nFOL: all x. (Database(x) & ComputerScience(x) -> Student(x))\n\nAll students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> Database(x))\n\nAll students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) & ProfessorDavid(x) -> Student(x))\n\nJames is a student working in the lab.\nFOL: Lab(james) & Student(james)\n\nJack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Library(jack) & -Lab(jack)\n\n</PREMISES>\n<CONCLUSION>\nJames has a part-time job offered by the university.\nFOL: UniversityJob(james",
    "<PREMISES>\nall x. (-Student(x) & Library(x) & ComputerScience(x))\nall x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nall x. (Student(x) & Database(x) -> ComputerScience(x))\nall x. (Student(x) & David(x) & Database(x))\nall x. (Student(x) & Lab(x) & David(x))\nJames: Student(james) & Lab(james)\nJack: -Student(jack) & -PartTimeJob(jack) & -Lab(jack)\n</PREMISES>\n<CONCLUSION>\nexists x. (Student(x) & PartTimeJob(x) & University(x) & Library(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (-Student(x) & LibraryWorker(x) -> -CS(x))\nall x. (Student(x) & PartTimeJob(x, u) -> LibraryWorker(x))\nall x. (Student(x) & DatabaseCourse(x) -> CS(x))\nall x. (Student(x) & InstructedBy(x, David) -> DatabaseCourse(x))\nall x. (Student(x) & LabWorker(x) -> InstructedBy(x, David))\nJames is a student working in the lab.\nJack neither has a part-time job offered by the university nor works in the lab.\n</PREMISES>\n<CONCLUSION>\nJames has a part-time job offered by the university.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (-Student(x) & LibraryWorker(x) -> -CS(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (Student(x) & PartTimeJob(x, u) -> LibraryWorker(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL:"
   ],
   [
    "<PREMISES>\nall x. (-Student(x) & Library(x) & ComputerScience(x))\nall x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nall x. (Student(x) & Database(x) -> ComputerScience(x))\nall x. (Student(x) & Database(x) -> David(x))\nall x. (Student(x) & Lab(x) -> David(x))\nJames(x)\nJack(x)\n-Student(Jack) & -Library(Jack) & -PartTimeJob(Jack) & -Lab(Jack)\n</PREMISES>\n<CONCLUSION>\nStudent(James) & Library(James) & PartTimeJob(James) & University(James)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (-Student(x) & Library(x) & ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science",
    "<PREMISES>\nall x. (Student(x) & LibraryJob(x) -> -CSDepartment(x))\nall x. (Student(x) & PartTimeJob(x, University) -> LibraryJob(x))\nall x. (Student(x) & DatabaseCourse(x) -> CSDepartment(x))\nall x. (Student(x) & InstructedBy(x, David) -> DatabaseCourse(x))\nall x. (Student(x) & LabJob(x) -> InstructedBy(x, David))\nJames is a Student working in the Lab.\nJack neither has a PartTimeJob offered by the University nor works in the Lab.\n</PREMISES>\n<CONCLUSION>\n-Jack\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> -LibraryWorker(x) & -ComputerScience(x))\nall x. (Student(x) & PartTimeJob(x) & University(x) -> LibraryWorker(x))\nall x. (Student(x) & Database(x) -> ComputerScience(x))\nall x. (Student(x) & David(x) -> Database(x))\nall x. (Student(x) & Lab(x) -> David(x))\nJames(x) & Student(x) & Lab(x)\nJack(x) & -PartTimeJob(x) & -Lab(x)\n</PREMISES>\n<CONCLUSION>\n-PartTimeJob(James) & Student(James) & University(James)\n</CONCLUSION>",
    "<PREMISES>\nall x. (-Student(x) & LibraryWorker(x) & ComputerScience(x) -> False)\nall x. (Student(x) & PartTimeJob(x) & UniversityJob(x) -> LibraryWorker(x))\nall x. (Student(x) & DatabaseCourse(x) & ComputerScience(x) -> True)\nall x. (Student(x) & David(x) & DatabaseCourse(x) -> True)\nall x. (Student(x) & LabWorker(x) & David(x) -> True)\nJames(x) & Student(x) & LabWorker(x)\nJack(x) & -Student(x) & -LibraryWorker(x) & -LabWorker(x)\n</PREMISES>\n<CONCLUSION>\nJames(x) & Student(x) & PartTimeJob(x) & UniversityJob(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (-Student(x) & LibraryWorker(x) & ComputerScience(x) -> False)\nall x. (Student(x) & PartTimeJob(x) & UniversityJob(x) -> LibraryWorker(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScience(x))\nall x. (Student(x) & InstructedBy(David, x) -> DatabaseCourse(x))\nall x. (Student(x) & LabWorker(x) & InstructedBy(David, x) -> True)\nJames(x)\nall x. (-Student(x) & PartTimeJob(x) & UniversityJob(x) -> False)\nall x. (-Student(x) & LibraryWorker(x) -> False)\nJack(x)\n</PREMISES>\n<CONCLUSION>\nall x. (Student(x) & PartTimeJob(x) & UniversityJob(x) -> LibraryWorker(x))\nJames(x)\n-Student(James)\n-UniversityJob(James)\n-PartTimeJob(James)\n-LibraryWorker(James)\n-ComputerScience(James)\n-DatabaseCourse(James)\nInstructedBy(David, James)\n-Student(James)\n-Student(James)\n-DatabaseCourse(James)\n-ComputerScience(J"
   ],
   [
    "<PREMISES>\nNo students who work in the library are from the computer science department. \nFOL: all x. (LibraryWorker(x) -> -CSDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> LibraryWorker(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseStudent(x) -> CSDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (DavidInstructs(x) -> DatabaseStudent(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (LabWorker(x) -> DavidInstructs(x))\nTEXT: James is a student working in the lab. \nFOL: LabWorker(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -LabWorker(jack)\n</PREMISES>\n<CONCLUSION>\nJames has a part-time job offered by the university.\n</CONCLUSION>\n\n",
    "<PREMISES>\nall x. (-Student(x) & LibraryWorker(x) & ComputerScience(x)) -> False\nall x. (Student(x) & PartTimeJob(x, University) -> LibraryWorker(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScience(x))\nall x. (Student(x) & InstructedBy(David, x) -> DatabaseCourse(x))\nall x. (Student(x) & LabWorker(x) -> InstructedBy(David, x))\nStudent(james) & LabWorker(james)\n-Student(jack) & -LibraryWorker(jack) & -PartTimeJob(jack, University) & -LabWorker(jack)\n</PREMISES>\n<CONCLUSION>\nStudent(james) & PartTimeJob(james, University)\n</CONCLUSION>",
    "<PREMISES>\nall x. (-Student(x) & Library(x) & ComputerScience(x))\nall x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nall x. (Student(x) & Database(x) -> ComputerScience(x))\nall x. (Student(x) & Database(x) & Professor(x) -> David(x))\nall x. (Student(x) & Lab(x) & Professor(x) -> David(x))\nStudent(james) & Lab(james)\n-PartTimeJob(jack) & -Lab(jack)\n</PREMISES>\n<CONCLUSION>\nStudent(james) & PartTimeJob(james) & University(james)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (-Student(x) & Library(x) & ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL:",
    "<PREMISES>\nall x. (Student(x) & LibraryWorker(x) -> -CS(x))\nall x. (Student(x) & PartTimeJob(x) -> LibraryWorker(x))\nall x. (Student(x) & DatabaseCourse(x) -> CS(x))\nall x. (Student(x) & InstructedBy(David(x)) -> DatabaseCourse(x))\nall x. (Student(x) & LabWorker(x) -> InstructedBy(David(x)))\nJames, x. (Student(x) & LabWorker(x))\nJack, x. (-PartTimeJob(x) & -LibraryWorker(x))\n</PREMISES>\n<CONCLUSION>\nJames, x. (Student(x) & PartTimeJob(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> -LibraryWorker(x) & -ComputerScience(x))\nall x. (Student(x) & PartTimeJobOfferedByUniversity(x) -> LibraryWorker(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScience(x))\nall x. (Student(x) & Professor(x) = David & DatabaseCourse(x) -> LabWorker(x))\nStudent(james) & LabWorker(james)\nJack & -PartTimeJobOfferedByUniversity(jack) & -LibraryWorker(jack)\n</PREMISES>\n\n<CONCLUSION>\n-Student(james) & PartTimeJobOfferedByUniversity(james)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Student(x) & NotLibraryWorker(x) -> NotCSStudent(x))\nall x. (Student(x) & PartTimeJob(x) -> LibraryWorker(x))\nall x. (Student(x) & TakesDatabase(x) -> CSStudent(x))\nall x. (Student(x) & InstructedBy(David, x) -> TakesDatabase(x))\nall x. (Student(x) & InLab(x) -> InstructedBy(David, x))\nJames is a Student working in the lab.\nJack neither has a PartTimeJob nor InLab.\n</PREMISES>\n<CONCLUSION>\n-Student(James) & PartTimeJob(James)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> -LibraryWorker(x) & -ComputerScience(x))\nall x. (Student(x) & PartTimeJob(x) & UniversityJob(x) -> LibraryWorker(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScience(x))\nall x. (Student(x) & David(x) -> DatabaseCourse(x))\nall x. (Student(x) & LabWorker(x) -> David(x))\nJames: Student(James) & LabWorker(James)\nJack: -Student(Jack) & -LibraryWorker(Jack) & -LabWorker(Jack) & -PartTimeJob(Jack) & -UniversityJob(Jack)\n</PREMISES>\n<CONCLUSION>\nJames: Student(James) & PartTimeJob(James) & UniversityJob(James)\nFOL: -Student(james) | (Student(james) & PartTimeJob(james) & UniversityJob(james))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> -LibraryWorker(x) & -ComputerScience(x))\nall x. (Student(x) & PartTimeJobOfferedByUniversity(x) -> LibraryWorker(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScience(x))\nall x. (Student(x) & DatabaseCourse(x) -> David(x))\nall x. (Student(x) & LabWorker(x) -> David(x))\nStudent(james) & LabWorker(james)\nStudent(jack) & -PartTimeJobOfferedByUniversity(jack) & -LabWorker(jack)\n</PREMISES>\n<CONCLUSION>\nStudent(james) & PartTimeJobOfferedByUniversity(james)\n</CONCLUSION>",
    "<PREMISES>\nall x. (-Student(x) & Library(x) & ComputerScience(x))\nall x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nall x. (Student(x) & Database(x) -> ComputerScience(x))\nall x. (Student(x) & David(x) -> Database(x))\nall x. (Student(x) & Lab(x) & David(x))\nJames(x)\n-Student(James) & Lab(James)\n-Jack & -PartTimeJob(Jack) & -Lab(Jack)\n</PREMISES>\n<CONCLUSION>\nStudent(James) & PartTimeJob(James) & University(James)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (-Student(x) & Library(x) & ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all",
    "<PREMISES>\nall x. (Student(x) -> -LibraryWorker(x) & -CSStudent(x))\nall x. (Student(x) & PartTimeJob(x) -> LibraryWorker(x))\nall x. (Student(x) & DatabaseCourse(x) -> CSStudent(x))\nall x. (Student(x) & InstructedBy(x) -> DatabaseCourse(x))\nall x. (Student(x) & LabWorker(x) -> InstructedBy(x))\nJames is a student working in the lab.\nJack neither has a part-time job offered by the university nor works in the lab.\n</PREMISES>\n<CONCLUSION>\nJames has a part-time job offered by the university.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Student(x) -> (-LibraryWorker(x) & -CSStudent(x)))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (Student(x) & PartTimeJob(x) -> LibraryWorker(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL:"
   ]
  ]
 },
 {
  "index": 139,
  "responses": [
   [
    "<PREMISES>\nall x. (Student(x) & Lab(x) -> InstructedBy(David, x))\nall x. (Student(x) & PartTimeJob(x, University) -> Library(x))\nall x. (Student(x) & Department(x) = 'ComputerScience' -> TakesDatabaseCourse(x))\nall x. (Student(x) & InstructedBy(David, x) -> TakesDatabaseCourse(x))\nall x. (Student(x) & Lab(x) -> InstructedBy(David, x))\nStudent(james) & Lab(james)\nStudent(jack) & -PartTimeJob(jack, University) & -Lab(jack)\n</PREMISES>\n<CONCLUSION>\n-PartTimeJob(james, University)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> -LibraryWorker(x) & -ComputerScience(x))\nall x. (Student(x) & PartTimeJob(x) & UniversityJob(x) -> LibraryWorker(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScience(x))\nall x. (Student(x) & David(x) -> DatabaseCourse(x))\nall x. (Student(x) & Lab(x) -> David(x))\nJames(x) & Student(x) & Lab(x)\nJack(x) & -Student(x) & -PartTimeJob(x) & -LibraryWorker(x) & -Lab(x)\n</PREMISES>\n<CONCLUSION>\n-Jack(x) & Student(x) & PartTimeJob(x) & UniversityJob(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> -LibraryWorker(x) & -ComputerScience(x))\nall x. (Student(x) & PartTimeJob(x) & UniversityJob(x) -> LibraryWorker(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScience(x))\nall x. (Student(x) & DavidInstructs(x) -> DatabaseCourse(x))\nall x. (Student(x) & LabWorker(x) -> DavidInstructs(x))\nJames is a Student & LabWorker(James)\nJack neither has a PartTimeJob nor LabWorker(Jack)\n</PREMISES>\n<CONCLUSION>\n-Jack has a PartTimeJob & -Jack has a PartTimeJob\nFOL: -Jack has a PartTimeJob\n</CONCLUSION>",
    "<PREMISES>\nall x. (-LibraryWorker(x) & ComputerScienceDepartment(x))\nall x. (PartTimeJob(x) & LibraryWorker(x) -> Student(x))\nall x. (DatabaseCourse(x) & ComputerScienceDepartment(x))\nall x. (DavidInstructs(x) -> DatabaseCourse(x))\nall x. (LabWorker(x) & DavidInstructs(x))\nJames is a student working in the lab.\nJack neither has a part-time job offered by the university nor works in the lab.\n</PREMISES>\n<CONCLUSION>\n-Jack has a part-time job offered by the university\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> -LibraryWorker(x) & -ComputerScience(x))\nall x. (Student(x) & PartTimeJob(x) & UniversityJob(x) -> LibraryWorker(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScience(x))\nall x. (Student(x) & Professor(x) -> DatabaseCourse(x))\nall x. (Student(x) & LabWorker(x) -> Professor(x))\nStudent(james) & LabWorker(james)\nStudent(jack) & -PartTimeJob(jack) & -LabWorker(jack)\n</PREMISES>\n<CONCLUSION>\n-PartTimeJob(james)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo students who work in the library are from the computer science department. \nFOL: all x. (Student(x) & Library(x) -> -CS(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (Student(x) & PartTimeJob(x, University) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Student(x) & Database(x) -> CS(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (Student(x) & David(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Student(x) & Lab(x) -> David(x))\nTEXT: James is a student working in the lab. \nFOL: Student(james) & Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -PartTimeJob(jack, University) & -Lab(jack)\n</PREMISES>\n<CONCLUSION",
    "<PREMISES>\nall x. (Student(x) & -LibraryJob(x) -> -CSDepartment(x))\nall x. (Student(x) & UniversityJob(x) -> LibraryJob(x))\nall x. (Student(x) & TakesDatabaseCourse(x) -> CSDepartment(x))\nall x. (Student(x) & InstructedBy(David, x) -> TakesDatabaseCourse(x))\nall x. (Student(x) & LabJob(x) -> InstructedBy(David, x))\nJames is a Student working in the Lab.\nJack neither has a UniversityJob nor a LabJob.\n</PREMISES>\n<CONCLUSION>\n-UniversityJob(James) & -LabJob(James)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) & -LibraryWorker(x) -> -ComputerScience(x))\nall x. (Student(x) & PartTimeJob(x) & University(x) -> LibraryWorker(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScience(x))\nall x. (Student(x) & David(x) -> DatabaseCourse(x))\nall x. (Student(x) & LabWorker(x) -> David(x))\nJames(x) & Student(x) & LabWorker(x)\nJack(x) & -PartTimeJob(x) & -LibraryWorker(x)\n</PREMISES>\n<CONCLUSION>\n-Jack(x) & PartTimeJob(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> -LibraryWorker(x) & -CS(x))\nall x. (Student(x) & PartTimeJob(x) -> LibraryWorker(x))\nall x. (Student(x) & DatabaseCourse(x) -> CS(x))\nall x. (Student(x) & David(x) -> DatabaseCourse(x))\nall x. (Student(x) & LabWorker(x) -> David(x))\nStudent(james) & LabWorker(james)\nStudent(jack) & -PartTimeJob(jack) & -LabWorker(jack)\n</PREMISES>\n<CONCLUSION>\n-PartTimeJob(james)\n</CONCLUSION>",
    "<PREMISES>\nall x. (-Student(x) & LibraryWorker(x) & ComputerScience(x)) -> False\nall x. (Student(x) & PartTimeJob(x, University) -> LibraryWorker(x))\nall x. (Student(x) & Database(x) -> ComputerScience(x))\nall x. (Student(x) & Database(x) & Professor(x) = David(x) -> TakesDatabase(x))\nall x. (Student(x) & Lab(x) & Professor(x) = David(x) -> LabWorker(x))\nJames is a Student(x) & Lab(x)\nJack neither has PartTimeJob(x, University) nor Lab(x)\n</PREMISES>\n<CONCLUSION>\n-Jack has PartTimeJob(x, University)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Student(x) & -LibraryWorker(x) -> -CSDepartment(x))\nall x. (Student(x) & PartTimeJob(x) & UniversityJob(x) -> LibraryWorker(x))\nall x. (Student(x) & DatabaseCourse(x) -> CSDepartment(x))\nall x. (Student(x) & David(x) -> DatabaseCourse(x))\nall x. (Student(x) & LabWorker(x) -> David(x))\nStudent(james) & LabWorker(james)\nStudent(jack) & -PartTimeJob(jack) & -LabWorker(jack)\n</PREMISES>\n<CONCLUSION>\n-PartTimeJob(james)\n</CONCLUSION>",
    "<PREMISES>\nall x. (-Student(x) & Library(x) & ComputerScience(x))\nall x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nall x. (Student(x) & Database(x) -> ComputerScience(x))\nall x. (Student(x) & Database(x) -> David(x))\nall x. (Student(x) & Lab(x) & David(x))\nJames(x)\nJack(x)\n-Student(Jack) & -Library(Jack) & -PartTimeJob(Jack) & -Lab(Jack)\n</PREMISES>\n<CONCLUSION>\n-Student(James) & Library(James) & PartTimeJob(James) & University(James)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (-Student(x) & Library(x) & ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department",
    "<PREMISES>\nall x. (-Student(x) & Library(x) & ComputerScience(x) -> False)\nall x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nall x. (Student(x) & Database(x) -> ComputerScience(x))\nall x. (Student(x) & David(x) & Database(x) -> True)\nall x. (Student(x) & Lab(x) & David(x) -> True)\nJames(x) & Student(x) & Lab(x)\nJack(x) & -PartTimeJob(x) & -Lab(x)\n</PREMISES>\n\n<CONCLUSION>\n-PartTimeJob(James)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) & -Library(x) & -CS(x) -> -CSDepartment(x))\nall x. (Student(x) & PartTimeJob(x) & UniversityJob(x) -> Library(x))\nall x. (Student(x) & Database(x) -> CS(x))\nall x. (Student(x) & David(x) & Database(x) -> CS(x))\nall x. (Student(x) & Lab(x) & David(x) -> Database(x))\nJames: Student(James) & Lab(James)\nJack: -PartTimeJob(Jack) & -Lab(Jack)\n</PREMISES>\n<CONCLUSION>\n-PartTimeJob(James)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Student(x) & Library(x) & CS(x) -> -CSDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (Student(x) & PartTimeJob(x) & UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the",
    "<PREMISES>\nall x. (-Student(x) & Library(x) & ComputerScience(x) -> False)\nall x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nall x. (Student(x) & Database(x) -> ComputerScience(x))\nall x. (Student(x) & David(x) & Database(x) -> True)\nall x. (Student(x) & Lab(x) & David(x) -> True)\nStudent(james) & Lab(james)\nStudent(jack) & -PartTimeJob(jack) & -Lab(jack)\n</PREMISES>\n<CONCLUSION>\n-PartTimeJob(james)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (-Student(x) & Library(x) & ComputerScience(x)) -> False\nall x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nall x. (Student(x) & Database(x) -> ComputerScience(x))\nall x. (Student(x) & Database(x) & David(x) -> TakesDatabase(x))\nall x. (Student(x) & Lab(x) & David(x) -> TakesDatabase(x))\nStudent(james) & Lab(james)\nStudent(jack) & -PartTimeJob(jack) & -Lab(jack)\n</PREMISES>\n<CONCLUSION>\n-PartTimeJob(james)\n</CONCLUSION>",
    "<PREMISES>\nall x. (-Student(x) & Library(x) & ComputerScience(x))\nall x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScience(x))\nall x. (Student(x) & David(x) -> DatabaseCourse(x))\nall x. (Student(x) & Lab(x) & David(x) -> Library(x))\nStudent(james) & Lab(james)\nStudent(jack) & -PartTimeJob(jack) & -Lab(jack)\n</PREMISES>\n\n<CONCLUSION>\n-PartTimeJob(james)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) & LibraryJob(x) -> -CSDepartment(x))\nall x. (Student(x) & PartTimeJob(x, u) -> LibraryJob(x))\nall x. (Student(x) & TakesDatabaseCourse(x) -> CSDepartment(x))\nall x. (Student(x) & InstructedBy(David, x) -> TakesDatabaseCourse(x))\nall x. (Student(x) & LabJob(x) -> InstructedBy(David, x))\nJames: Student(James) & LabJob(James)\nJack: Student(Jack) & -PartTimeJob(Jack, u) & -LabJob(Jack)\n</PREMISES>\n<CONCLUSION>\n-PartTimeJob(James, u)\n</CONCLUSION>",
    "<PREMISES>\nall x. (-Student(x) & Library(x) & ComputerScience(x) -> False)\nall x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nall x. (Student(x) & Database(x) -> ComputerScience(x))\nall x. (Student(x) & David(x) -> Database(x))\nall x. (Student(x) & Lab(x) & David(x) -> Database(x))\nStudent(james) & Lab(james)\n-Student(jack) & -PartTimeJob(jack) & -Lab(jack)\n</PREMISES>\n<CONCLUSION>\n-Student(james) & PartTimeJob(james) & University(james)\nFOL: -Student(james) & PartTimeJob(james) & University(james)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> -LibraryWorker(x) & -CSDepartment(x))\nall x. (Student(x) & PartTimeJob(x) -> LibraryWorker(x))\nall x. (Student(x) & DatabaseCourse(x) -> CSDepartment(x))\nall x. (Student(x) & InstructedBy(David, x) -> DatabaseCourse(x))\nall x. (Student(x) & LabWorker(x) -> InstructedBy(David, x))\nJames is a Student & LabWorker(James)\nJack neither PartTimeJob(Jack) nor LabWorker(Jack)\n</PREMISES>\n<CONCLUSION>\n-PartTimeJob(James)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & Student(x) & ComputerScience(x) -> -Department(x))\nAll students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) & Student(x) -> Library(x))\nAll students who take the database course are from the computer science department.\nFOL: all x. (Database(x) & Student(x) -> ComputerScience(x))\nAll students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) & Student(x) -> Database(x))\nAll students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) & Student(x) -> ProfessorDavid(x))\nJames is a student working in the lab.\nFOL: Lab(james) & Student(james)\nJack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Library(jack)\n</PREMISES>\n<CONCLUSION>\nJames does not have a part-time job offered by the university.\nFOL:",
    "<PREMISES>\nNo students who work in the library are from the computer science department.\nFOL: all x. (Student(x) & Library(x) -> -CS(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (Student(x) & UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Student(x) & Database(x) -> CS(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (Student(x) & ProfessorDavid(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Student(x) & Lab(x) -> ProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: Student(james) & Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\nTEXT: James does not have a part-time job offered by the university.\nFOL: -University",
    "<PREMISES>\nall x. (-Student(x) & LibraryWorker(x) & ComputerScienceDepartment(x)) -> False\nall x. (Student(x) & PartTimeJob(x) & UniversityJob(x) -> LibraryWorker(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScienceDepartment(x))\nall x. (Student(x) & ProfessorDavid(x) -> DatabaseCourse(x))\nall x. (Student(x) & LabWorker(x) -> ProfessorDavid(x))\nJames: Student(James) & LabWorker(James)\nJack: -Student(Jack) & -LibraryWorker(Jack) & -PartTimeJob(Jack) & -LabWorker(Jack)\n</PREMISES>\n<CONCLUSION>\n-James: Student(James) & PartTimeJob(James) & UniversityJob(James)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> -LibraryWorker(x) & -CSDepartment(x))\nall x. (PartTimeJob(x) -> LibraryWorker(x) & Student(x))\nall x. (DBCourse(x) -> CSDepartment(x))\nall x. (InstructedBy(x, David) -> DBCourse(x))\nall x. (LabWorker(x) -> InstructedBy(x, David))\nJames, a student, works in the lab.\nJack, a student, neither has a part-time job offered by the university nor works in the lab.\n</PREMISES>\n<CONCLUSION>\n-Jack, a student, has a part-time job offered by the university.\n</CONCLUSION>",
    "<PREMISES>\nNo students who work in the library are from the computer science department.\nFOL: all x. (Student(x) & Library(x) -> -CS(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (Student(x) & UniversityJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Student(x) & DatabaseCourse(x) -> CS(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (Student(x) & David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Student(x) & Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Student(james) & Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Library(jack)\n</PREMISES>\n<CONCLUSION>\nJames does not have a part-time job offered by"
   ]
  ]
 },
 {
  "index": 140,
  "responses": [
   [
    "<PREMISES>\nall x. (Student(x) -> -LibraryWorker(x) & -ComputerScience(x))\nall x. (Student(x) & PartTimeJob(x) & UniversityJob(x) -> LibraryWorker(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScience(x))\nall x. (Student(x) & InstructedBy(x) -> DatabaseCourse(x))\nall x. (Student(x) & LabWorker(x) -> InstructedBy(x))\nStudent(james) & LabWorker(james)\nStudent(jack) & -PartTimeJob(jack) & -LabWorker(jack)\n</PREMISES>\n<CONCLUSION>\n( (Student(james) & DatabaseCourse(james)) | (Student(james) & PartTimeJob(james)) )\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) & LibraryJob(x) -> -CS(x))\nall x. (Student(x) & PartTimeJob(x) & UniversityJob(x) -> LibraryJob(x))\nall x. (Student(x) & DatabaseCourse(x) -> CS(x))\nall x. (Student(x) & InstructedBy(David, x) -> DatabaseCourse(x))\nall x. (Student(x) & LabJob(x) & InstructedBy(David, x) -> DatabaseCourse(x))\nStudent(james) & LabJob(james)\nStudent(jack) & -PartTimeJob(jack) & -LabJob(jack)\n</PREMISES>\n<CONCLUSION>\n((Student(james) & DatabaseCourse(james)) | (Student(james) & PartTimeJob(james)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> -Library(x) / ComputerScience(x))\nall x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScience(x))\nall x. (Student(x) & David(x) -> DatabaseCourse(x))\nall x. (Student(x) & Lab(x) & David(x) -> Library(x))\nJames is a student working in the lab.\nJack neither has a part-time job offered by the university nor works in the lab.\n</PREMISES>\n<CONCLUSION>\nJames either takes the database course or has a part-time job offered by the university.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Student(x) -> -Library(x) / ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department",
    "<PREMISES>\nNo students who work in the library are from the computer science department.\nFOL: all x. (Student(x) & Library(x) & ComputerScience(x) -> -True)\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (Student(x) & UniversityJob(x) & Library(x) -> Student(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Student(x) & DatabaseCourse(x) & ComputerScience(x) -> True)\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (Student(x) & ProfessorDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Student(x) & Lab(x) & ProfessorDavid(x) -> True)\nTEXT: James is a student working in the lab.\nFOL: Student(james) & Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Library(jack) & -Lab",
    "<PREMISES>\nall x. (-Student(x) & LibraryWorker(x) & ComputerScience(x) -> False)\nall x. (Student(x) & PartTimeJob(x, University) -> LibraryWorker(x))\nall x. (Student(x) & Database(x) -> ComputerScience(x))\nall x. (Student(x) & David(x) -> Database(x))\nall x. (Student(x) & Lab(x) & David(x) -> Database(x))\nJames(x)\n(-Student(James) & Lab(James))\n(-Student(James) & PartTimeJob(James, University))\nJack(x)\n</PREMISES>\n<CONCLUSION>\n(James(x) & Database(x)) | (Student(x) & PartTimeJob(x, University))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (-Student(x) & Library(x) & ComputerScience(x)) -> False\nall x. (Student(x) & PartTimeJob(x) & UniversityJob(x) -> Library(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScience(x))\nall x. (Student(x) & David(x) -> DatabaseCourse(x))\nall x. (Student(x) & Lab(x) & David(x) -> DatabaseCourse(x))\nStudent(james) & Lab(james)\nStudent(jack) & -PartTimeJob(jack) & -Lab(jack)\n</PREMISES>\n<CONCLUSION>\n((Student(james) & DatabaseCourse(james)) | (Student(james) & PartTimeJob(james)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) & Library(x) -> -CS(x))\nall x. (Student(x) & PartTimeJob(x, U) -> Library(x))\nall x. (Student(x) & Database(x) -> CS(x))\nall x. (Student(x) & David(x) -> Database(x))\nall x. (Student(x) & Lab(x) -> David(x))\nJames(x) & Lab(James)\n-PartTimeJob(James, U)\nJack(x) & -Library(x) & -Lab(x)\n</PREMISES>\n<CONCLUSION>\nJames(x) & (Database(James) | PartTimeJob(James, U))\n</CONCLUSION>",
    "<PREMISES>\nall x. (-Student(x) & LibraryWorker(x) & ComputerScience(x) -> False)\nall x. (Student(x) & PartTimeJob(x) & UniversityJob(x) -> LibraryWorker(x))\nall x. (Student(x) & Database(x) -> ComputerScience(x))\nall x. (Student(x) & David(x) -> Database(x))\nall x. (Student(x) & LabWorker(x) & David(x) -> Database(x))\nJames: Student(James) & LabWorker(James)\nJack: -Student(Jack) & -LibraryWorker(Jack) & -PartTimeJob(Jack) & -LabWorker(Jack)\n</PREMISES>\n<CONCLUSION>\nJames: Database(James) | PartTimeJob(James)\n</CONCLUSION>",
    "<PREMISES>\nNo students who work in the library are from the computer science department.\nFOL: all x. (Student(x) & LibraryWorker(x) & -CS(x) -> True)\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (Student(x) & UniversityJob(x) -> LibraryWorker(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Student(x) & DatabaseCourse(x) -> CS(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (Student(x) & David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Student(x) & LabWorker(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Student(james) & LabWorker(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -LabWorker(jack)\n</PREMISES>\n<CONCLUSION>\nJames either",
    "<PREMISES>\nall x. (-Student(x) & Library(x) & ComputerScience(x))\nall x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nall x. (Student(x) & Database(x) -> ComputerScience(x))\nall x. (Student(x) & Database(x) & David(x) -> TakeDatabase(x))\nall x. (Student(x) & Lab(x) & David(x) -> WorkInLab(x))\nJames is a student working in the lab.\nJack neither has a part-time job offered by the university nor works in the lab.\n</PREMISES>\n<CONCLUSION>\nJames either takes the database course or has a part-time job offered by the university.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Student(x) & Library(x) & ComputerScience(x) -> False)\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nTEXT: All students who take the database course are from"
   ],
   [
    "<PREMISES>\nall x. (Student(x) & Library(x) -> -CS(x))\nall x. (Student(x) & PartTimeJob(x) -> Library(x))\nall x. (Student(x) & DatabaseCourse(x) -> CS(x))\nall x. (Student(x) & InstructedBy(x) -> DatabaseCourse(x))\nall x. (Student(x) & Lab(x) -> InstructedBy(x))\nJames is a student working in the lab.\nJack neither has a part-time job offered by the university nor works in the lab.\n</PREMISES>\n<CONCLUSION>\nJames either takes the database course or has a part-time job offered by the university.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Student(x) & Library(x) & CS(x) -> -True)\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (Student(x) & PartTimeJob(x) & University(x) -> Student(x) & Library(x))\nTEXT: All students who take the database course are from the computer",
    "<PREMISES>\nall x. (-Student(x) & LibraryJob(x) -> NotFromComputerScience(x))\nall x. (Student(x) & PartTimeJob(x) -> LibraryJob(x))\nall x. (Student(x) & TakesDatabase(x) -> FromComputerScience(x))\nall x. (Student(x) & InstructedByDavid(x) -> TakesDatabase(x))\nall x. (Student(x) & LabJob(x) -> InstructedByDavid(x))\nJames is a student working in the lab.\nJack neither has a part-time job offered by the university nor works in the lab.\n</PREMISES>\n<CONCLUSION>\nJames either takes the database course or has a part-time job offered by the university.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (Student(x) & LibraryJob(x) -> -FromComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (Student(x) & PartTimeJob(x) -> LibraryJob(x))\nTEXT: All students who take the database course are from the computer",
    "<PREMISES>\nall x. (Student(x) & Library(x) & -CS(x) -> -CSDepartment(x))\nall x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nall x. (Student(x) & Database(x) -> CS(x))\nall x. (Student(x) & David(x) & Database(x) -> DatabaseCourse(x))\nall x. (Student(x) & Lab(x) & David(x) -> DatabaseCourse(x))\nJames: Student(James) & Lab(James)\nJack: Student(Jack) & -PartTimeJob(Jack) & -Lab(Jack)\n</PREMISES>\n\n<CONCLUSION>\nJames: Database(James) | PartTimeJob(James) & University(James)\n</CONCLUSION>",
    "<PREMISES>\nall x. (-Student(x) & Library(x) & ComputerScience(x)) -> False\nall x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nall x. (Student(x) & Database(x) -> ComputerScience(x))\nall x. (Student(x) & Database(x) & David(x) -> TakesDatabase(x))\nall x. (Student(x) & Lab(x) & David(x) -> TakesDatabase(x))\nJames(x) & Lab(x) & Student(x)\n-Jack(x) & -PartTimeJob(x) & -Lab(x)\n</PREMISES>\n<CONCLUSION>\nJames(x) & (Database(x) | PartTimeJob(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (-Student(x) & LibraryJob(x) & ComputerScience(x) -> False)\nall x. (Student(x) & PartTimeJob(x) & UniversityJob(x) -> LibraryJob(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScience(x))\nall x. (Student(x) & InstructedBy(x, David) & DatabaseCourse(x) -> True)\nall x. (Student(x) & LabJob(x) & InstructedBy(x, David) -> True)\nJames is a student working in the lab.\nJack neither has a part-time job offered by the university nor works in the lab.\n</PREMISES>\n<CONCLUSION>\nJames either takes the database course or has a part-time job offered by the university.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (-Student(x) & LibraryJob(x) & ComputerScience(x) -> False)\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (Student(x) & PartTimeJob(x) & University"
   ],
   [
    "<PREMISES>\nall x. (-Student(x) & Library(x) & ComputerScience(x) -> False)\nall x. (Student(x) & PartTimeJob(x, y) & University(y) -> Library(x))\nall x. (Student(x) & Database(x) -> ComputerScience(x))\nall x. (Student(x) & Database(x) & Professor(x) = David -> Database(x))\nall x. (Student(x) & Lab(x) & Professor(x) = David -> Database(x))\nStudent(james) & Lab(james)\n-PartTimeJob(james, y) & -University(y)\nStudent(jack) & -Library(jack) & -Lab(jack)\n</PREMISES>\n\n<CONCLUSION>\n(Student(james) & Database(james) | Student(james) & PartTimeJob(james, y) & University(y))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) & -Lab(x) -> -CS(x))\nall x. (Student(x) & HasPartTimeJob(x) & UniversityJob(x) -> Library(x))\nall x. (Student(x) & TakesDatabase(x) -> CS(x))\nall x. (Student(x) & TakesDatabase(x) -> David(x))\nall x. (Student(x) & Lab(x) -> David(x))\nJames: Student(james) & Lab(james)\nJack: Student(jack) & -Lab(jack) & -HasPartTimeJob(jack) & -UniversityJob(jack)\n</PREMISES>\n\n<CONCLUSION>\n((James: Student(james) & TakesDatabase(james)) | (James: Student(james) & HasPartTimeJob(james) & UniversityJob(james)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (-Student(x) & LibraryJob(x) -> NotFromCS(x))\nall x. (Student(x) & PartTimeJob(x, university) -> LibraryJob(x))\nall x. (Student(x) & DatabaseCourse(x) -> FromCS(x))\nall x. (Student(x) & InstructedBy(David, x) -> DatabaseCourse(x))\nall x. (Student(x) & LabJob(x) -> InstructedBy(David, x))\nJames is a Student working in the Lab.\nJack neither has a PartTimeJob offered by the university nor works in the Lab.\n</PREMISES>\n<CONCLUSION>\nJames either takes the DatabaseCourse or has a PartTimeJob offered by the university.\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> -LibraryWorker(x) & -CSDepartment(x))\nall x. (Student(x) & PartTimeJob(x) & UniversityJob(x) -> LibraryWorker(x))\nall x. (Student(x) & DatabaseCourse(x) -> CSDepartment(x))\nall x. (Student(x) & Professor(x) = David & DatabaseCourse(x) -> LabWorker(x))\nStudent(james) & LabWorker(james)\nStudent(jack) & -PartTimeJob(jack) & -LabWorker(jack)\n</PREMISES>\n<CONCLUSION>\n((Student(james) & DatabaseCourse(james)) | (Student(james) & PartTimeJob(james)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (-Student(x) & LibraryWorker(x) & ComputerScience(x) -> False)\nall x. (Student(x) & PartTimeJob(x) & UniversityJob(x) -> LibraryWorker(x))\nall x. (Student(x) & Database(x) -> ComputerScience(x))\nall x. (Student(x) & David(x) -> Database(x))\nall x. (Student(x) & LabWorker(x) & David(x) -> Database(x))\nStudent(james) & LabWorker(james)\nJack & -PartTimeJob(Jack) & -LabWorker(Jack)\n</PREMISES>\n\n<CONCLUSION>\n((Student(james) & Database(james)) | (Student(james) & PartTimeJob(james)))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (-Student(x) & LibraryJob(x) -> -CS(x))\nall x. (Student(x) & PartTimeJob(x) -> LibraryJob(x))\nall x. (Student(x) & DatabaseCourse(x) -> CS(x))\nall x. (Student(x) & DavidInstructs(x) -> DatabaseCourse(x))\nall x. (Student(x) & LabWork(x) -> DavidInstructs(x))\nJames: Student(James) & LabWork(James)\nJack: -Student(Jack) & -PartTimeJob(Jack) & -LabWork(Jack)\n</PREMISES>\n<CONCLUSION>\n((James: DatabaseCourse(James)) | (James: PartTimeJob(James)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (-Student(x) & LibraryJob(x) & ComputerScience(x))\nall x. (Student(x) & PartTimeJob(x) & UniversityJob(x) -> LibraryJob(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScience(x))\nall x. (Student(x) & InstructedBy(x, David) -> DatabaseCourse(x))\nall x. (Student(x) & LabJob(x) & InstructedBy(x, David))\nJames, a student, labJob(james)\nJack, a student, -PartTimeJob(jack) & -LabJob(jack)\n</PREMISES>\n<CONCLUSION>\nJames, a student, (DatabaseCourse(james) | PartTimeJob(james))\n</CONCLUSION>",
    "<PREMISES>\nall x. (-Student(x) & Library(x) & ComputerScience(x) -> False)\nall x. (Student(x) & PartTimeJob(x, University) -> Library(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScience(x))\nall x. (Student(x) & David(x) -> DatabaseCourse(x))\nall x. (Student(x) & Lab(x) & David(x) -> DatabaseCourse(x))\nJames: Student(James) & Lab(James)\nJack: -Student(Jack) & -Library(Jack) & -PartTimeJob(Jack, University) & -Lab(Jack)\n</PREMISES>\n<CONCLUSION>\n((James: DatabaseCourse(James)) | (James: PartTimeJob(James, University)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (-Student(x) & Library(x) & ComputerScience(x)) -> False\nall x. (Student(x) & PartTimeJob(x, University) -> Library(x))\nall x. (Student(x) & Database(x) -> ComputerScience(x))\nall x. (Student(x) & Database(x) -> David(x))\nall x. (Student(x) & Lab(x) -> David(x))\nStudent(james) & Lab(james)\nStudent(jack) & -PartTimeJob(jack, University) & -Lab(jack)\n</PREMISES>\n\n<CONCLUSION>\n(Student(james) & Database(james)) | (Student(james) & PartTimeJob(james, University))\n</CONCLUSION>",
    "<PREMISES>\nNo students who work in the library are from the computer science department. \nFOL: all x. (Library(x) -> -ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityPartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (ProfessorDavid(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (Lab(x) -> ProfessorDavid(x))\nTEXT: James is a student working in the lab. \nFOL: Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityPartTimeJob(jack) & -Lab(jack)\n</PREMISES>\n<CONCLUSION>\nJames either takes the database course or has a part-time job offered by the university.\nFOL: (Database"
   ]
  ]
 },
 {
  "index": 141,
  "responses": [
   [
    "<PREMISES>\nall x. (-Student(x) & LibraryWorker(x) & ComputerScience(x) -> False)\nall x. (Student(x) & PartTimeJob(x) & UniversityJob(x) -> LibraryWorker(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScience(x))\nall x. (Student(x) & DavidInstructs(x) -> DatabaseCourse(x))\nall x. (Student(x) & LabWorker(x) -> DavidInstructs(x))\nJames is a student working in the lab.\nFOL: Student(james) & LabWorker(james)\nJack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJob(jack) & -UniversityJob(jack) & -LabWorker(jack)\n</PREMISES>\n\n<CONCLUSION>\nJack takes the database course.\nFOL: -DatabaseCourse(jack)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> -LibraryWorker(x) & -ComputerScience(x))\nall x. (Student(x) & PartTimeJob(x, University) -> LibraryWorker(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScience(x))\nall x. (Student(x) & DatabaseCourse(x) -> David(x))\nall x. (Student(x) & LabWorker(x) -> David(x))\nJames is a student working in the lab.\nJack neither has a part-time job offered by the university nor works in the lab.\n</PREMISES>\n<CONCLUSION>\nJack takes the database course.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Student(x) -> (-LibraryWorker(x) & -ComputerScience(x)))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (Student(x) & PartTimeJob(x, University) -> LibraryWorker(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Student(x)",
    "<PREMISES>\nall x. (-Student(x) & Library(x) & ComputerScience(x))\nall x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScience(x))\nall x. (Student(x) & InstructedBy(x) & DatabaseCourse(x) -> David(x))\nall x. (Student(x) & Lab(x) & InstructedBy(x) -> David(x))\nStudent(james) & Lab(james)\nStudent(jack) & -PartTimeJob(jack) & -Lab(jack)\n</PREMISES>\n<CONCLUSION>\nStudent(jack) & DatabaseCourse(jack)\n</CONCLUSION>",
    "<PREMISES>\nall x. (-LibraryWorker(x) -> -CSDepartment(x))\nall x. (PartTimeJob(x) -> LibraryWorker(x))\nall x. (Database(x) -> CSDepartment(x))\nall x. (David(x) -> Database(x))\nall x. (LabWorker(x) -> David(x))\nJames is a student working in the lab.\nJack neither has a part-time job offered by the university nor works in the lab.\n</PREMISES>\n<CONCLUSION>\nJack takes the database course.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (-LibraryWorker(x) -> -CSDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJob(x) -> LibraryWorker(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Database(x) -> CSDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (David(x) -> Database(x))\nTEXT:",
    "<PREMISES>\nNo students who work in the library are from the computer science department. \nFOL: all x. (LibraryWorker(x) -> -CSDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (UniversityJob(x) -> LibraryWorker(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseStudent(x) -> CSDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nFOL: all x. (ProfessorDavid(x) -> DatabaseStudent(x))\nTEXT: All students working in the lab are instructed by professor David. \nFOL: all x. (LabWorker(x) -> ProfessorDavid(x))\nTEXT: James is a student working in the lab. \nFOL: LabWorker(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab. \nFOL: -UniversityJob(jack) & -LabWorker(jack)\n</PREMISES>\n<CONCLUSION>\nJack takes the database course.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students"
   ],
   [
    "<PREMISES>\nNo students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScience(x) -> -Student(x))\n\nAll students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> (Library(x) & Student(x)))\n\nAll students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\n\nAll students instructed by professor David are taking the database course.\nFOL: all x. (David(x) -> DatabaseCourse(x))\n\nAll students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) -> David(x))\n\nJames is a student working in the lab.\nFOL: Lab(james) & Student(james)\n\nJack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Library(jack)\n\n</PREMISES>\n<CONCLUSION>\nJack takes the database course.\nFOL: DatabaseCourse(jack)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) & LibraryJob(x) -> -CSDepartment(x))\nall x. (Student(x) & PartTimeJob(x) -> LibraryJob(x))\nall x. (Student(x) & DatabaseCourse(x) -> CSDepartment(x))\nall x. (Student(x) & InstructedBy(x, David) -> DatabaseCourse(x))\nall x. (Student(x) & LabJob(x) -> InstructedBy(x, David))\nJames is a student working in the lab.\nFOL: Student(james) & LabJob(james)\nJack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJob(jack) & -LabJob(jack)\n</PREMISES>\n\n<CONCLUSION>\nJack takes the database course.\nFOL: DatabaseCourse(jack)\n</CONCLUSION>",
    "<PREMISES>\nall x. (-Student(x) & Library(x) & ComputerScience(x))\nall x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nall x. (Student(x) & Database(x) -> ComputerScience(x))\nall x. (Student(x) & David(x) -> Database(x))\nall x. (Student(x) & Lab(x) & David(x) -> Database(x))\nJames: Student(James) & Lab(James)\nJack: -Student(Jack) & -Library(Jack) & -PartTimeJob(Jack) & -Lab(Jack)\n</PREMISES>\n<CONCLUSION>\nall x. (Student(x) & Database(x) -> ComputerScience(x))\nJack: -Student(Jack) & Database(Jack) & -ComputerScience(Jack)\n</CONCLUSION>",
    "<PREMISES>\nNo students who work in the library are from the computer science department.\nFOL: all x. (Student(x) & Library(x) & ComputerScience(x) -> -True)\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (Student(x) & UniversityJob(x) -> (Library(x) & -ComputerScience(x)))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Student(x) & DatabaseCourse(x) -> ComputerScience(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (Student(x) & ProfessorDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Student(x) & Lab(x) -> ProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: Student(james) & Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Library(jack)\n</PREMISES>\n",
    "<PREMISES>\nNo students who work in the library are from the computer science department.\nFOL: all x. (Student(x) & Library(x) & ComputerScience(x) -> False)\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (Student(x) & University(x) & PartTimeJob(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Student(x) & DatabaseCourse(x) & ComputerScience(x) -> True)\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (Student(x) & ProfessorDavid(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Student(x) & Lab(x) & ProfessorDavid(x) -> True)\nTEXT: James is a student working in the lab.\nFOL: Student(james) & Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJob(jack) & -University(jack) & -"
   ],
   [
    "<PREMISES>\nall x. (-Student(x) & Library(x) & ComputerScience(x))\nall x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScience(x))\nall x. (Student(x) & ProfessorDavid(x) -> DatabaseCourse(x))\nall x. (Student(x) & Lab(x) & ProfessorDavid(x) -> DatabaseCourse(x))\nStudent(james) & Lab(james)\n-Student(jack) & -Library(jack) & -Lab(jack)\n</PREMISES>\n<CONCLUSION>\nStudent(jack) & DatabaseCourse(jack)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (-Student(x) & Library(x) & ComputerScience(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all",
    "<PREMISES>\nall x. (Student(x) & Library(x) -> -ComputerScience(x))\nall x. (Student(x) & PartTimeJob(x) -> Library(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScience(x))\nall x. (Student(x) & DatabaseCourse(x) -> David(x))\nall x. (Student(x) & Lab(x) -> David(x))\nStudent(james) & Lab(james)\nStudent(jack) & -PartTimeJob(jack) & -Lab(jack)\n</PREMISES>\n<CONCLUSION>\nStudent(jack) & DatabaseCourse(jack)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> -LibraryWorker(x) & -CSDepartment(x))\nall x. (Student(x) & PartTimeJobOfferedByUniversity(x) -> LibraryWorker(x))\nall x. (Student(x) & DatabaseCourse(x) -> CSDepartment(x))\nall x. (Student(x) & Professor(x, David) -> DatabaseCourse(x))\nall x. (Student(x) & LabWorker(x) -> Professor(x, David))\nJames is a student working in the lab.\nJack neither has a part-time job offered by the university nor works in the lab.\n</PREMISES>\n<CONCLUSION>\nJack takes the database course.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Student(x) -> -LibraryWorker(x) & -CSDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (Student(x) & PartTimeJobOfferedByUniversity(x) -> LibraryWorker(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL",
    "<PREMISES>\nall x. (Student(x) & LibraryJob(x) -> -CSDepartment(x))\nall x. (Student(x) & UniversityJob(x) -> (LibraryJob(x) & Student(x)))\nall x. (Student(x) & DatabaseCourse(x) -> CSDepartment(x))\nall x. (Student(x) & DatabaseCourse(x) -> David(x))\nall x. (Student(x) & LabJob(x) -> David(x))\nJames is a student working in the lab.\nJack neither has a part-time job offered by the university nor works in the lab.\n</PREMISES>\n<CONCLUSION>\nJack takes the database course.\n</CONCLUSION>",
    "<PREMISES>\nNo students who work in the library are from the computer science department.\nFOL: all x. (Library(x) & ComputerScience(x) -> -Student(x))\n\nAll students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) & Library(x) -> Student(x))\n\nAll students who take the database course are from the computer science department.\nFOL: all x. (Database(x) & ComputerScience(x) -> Student(x))\n\nAll students instructed by professor David are taking the database course.\nFOL: all x. (David(x) & Database(x) -> Student(x))\n\nAll students working in the lab are instructed by professor David.\nFOL: all x. (Lab(x) & David(x) -> Student(x))\n\nJames is a student working in the lab.\nFOL: Lab(james) & David(james) & Student(james)\n\nJack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -Lab(jack)\n\n</PREMISES>\n<CONCLUSION>\nJack takes the database course.\nFOL: Database(jack)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo students who work in the library are from the computer science department.\nFOL: all x. (LibraryWorker(x) -> -ComputerScience(x))\n\nAll students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> LibraryWorker(x))\n\nAll students who take the database course are from the computer science department.\nFOL: all x. (DatabaseCourse(x) -> ComputerScience(x))\n\nAll students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> DatabaseCourse(x))\n\nAll students working in the lab are instructed by professor David.\nFOL: all x. (LabWorker(x) -> ProfessorDavid(x))\n\nJames is a student working in the lab.\nFOL: LabWorker(james)\n\nJack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -LabWorker(jack)\n\n</PREMISES>\n<CONCLUSION>\nJack takes the database course.\nFOL: DatabaseCourse(jack)\n</CONCLUSION>",
    "<PREMISES>\nall x. (-Student(x) & LibraryJob(x) & ComputerScience(x)) -> False\nall x. (Student(x) & PartTimeJob(x, U) -> LibraryJob(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScience(x))\nall x. (Student(x) & InstructedBy(David, x) -> DatabaseCourse(x))\nall x. (Student(x) & LabJob(x) -> InstructedBy(David, x))\nStudent(james) & LabJob(james)\n-Student(jack) & -LabJob(jack) & -PartTimeJob(jack, U)\n</PREMISES>\n<CONCLUSION>\nStudent(jack) & DatabaseCourse(jack)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (-Student(x) & LibraryJob(x) & ComputerScience(x)) -> False\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (Student(x) & PartTimeJob(x, U) -> LibraryJob(x))\nTEXT: All students who",
    "<PREMISES>\nNo students who work in the library are from the computer science department.\nFOL: all x. (Student(x) & Library(x) -> -CSDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (Student(x) & PartTimeJob(x, university) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Student(x) & Database(x) -> CSDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (Student(x) & ProfessorDavid(x) -> Database(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Student(x) & Lab(x) -> ProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: Student(james) & Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJob(jack, university) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: Database",
    "<PREMISES>\nNo students who work in the library are from the computer science department.\nFOL: all x. (Student(x) & Library(x) -> -CSDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (Student(x) & PartTimeJob(x, university) -> Library(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (Student(x) & DatabaseCourse(x) -> CSDepartment(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (Student(x) & David(x) -> DatabaseCourse(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (Student(x) & Lab(x) -> David(x))\nTEXT: James is a student working in the lab.\nFOL: Student(james) & Lab(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJob(jack, university) & -Lab(jack)\nTEXT: Jack takes the database course.\nFOL: Database",
    "<PREMISES>\nNo students who work in the library are from the computer science department.\nFOL: all x. (LibraryWorker(x) -> -CSStudent(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (UniversityJob(x) -> LibraryWorker(x))\nTEXT: All students who take the database course are from the computer science department.\nFOL: all x. (DatabaseStudent(x) -> CSStudent(x))\nTEXT: All students instructed by professor David are taking the database course.\nFOL: all x. (ProfessorDavid(x) -> DatabaseStudent(x))\nTEXT: All students working in the lab are instructed by professor David.\nFOL: all x. (LabWorker(x) -> ProfessorDavid(x))\nTEXT: James is a student working in the lab.\nFOL: LabWorker(james)\nTEXT: Jack neither has a part-time job offered by the university nor works in the lab.\nFOL: -UniversityJob(jack) & -LabWorker(jack)\n</PREMISES>\n<CONCLUSION>\nJack takes the database course.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students who work in the library are from"
   ],
   [
    "<PREMISES>\nall x. (-Student(x) & LibraryWorker(x) & ComputerScience(x)) -> False\nall x. (Student(x) & PartTimeJob(x) & UniversityJob(x) -> LibraryWorker(x))\nall x. (Student(x) & DatabaseCourse(x) & ComputerScience(x))\nall x. (Student(x) & DatabaseCourse(x) -> David(x))\nall x. (Student(x) & LabWorker(x) -> David(x))\nStudent(james) & LabWorker(james)\n\u00ac(Student(jack) & PartTimeJob(jack) & UniversityJob(jack)) & \u00acLabWorker(jack)\n</PREMISES>\n<CONCLUSION>\n\u00ac(Student(jack) & DatabaseCourse(jack))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students who work in the library are from the computer science department.\nFOL: all x. (-Student(x) & LibraryWorker(x) & ComputerScience(x)) -> False\nTEXT: All students who have part-time jobs offered by the university are students who work in the library.\nFOL: all x. (Student(x) & PartTimeJob(x) & UniversityJob(x) -> LibraryWorker(x))\nTEXT: All students who",
    "<PREMISES>\nall x. (Student(x) & -LibraryJob(x) -> -CS(x))\nall x. (Student(x) & UniversityJobOffer(x) -> LibraryJob(x))\nall x. (Student(x) & DatabaseCourse(x) -> CS(x))\nall x. (Student(x) & David(x) -> DatabaseCourse(x))\nall x. (Student(x) & LabJob(x) -> David(x))\nJames is a student working in the lab.\nJack neither has a part-time job offered by the university nor works in the lab.\n</PREMISES>\n<CONCLUSION>\nJack takes the database course.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Student(x) & LibraryJob(x) -> -CS(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (Student(x) & UniversityJobOffer(x) -> LibraryJob(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (Student(x) & DatabaseCourse(x) -> CS(x",
    "<PREMISES>\nall x. (-LibraryWorker(x) -> -ComputerScienceDepartment(x))\nall x. (PartTimeJob(x) -> LibraryWorker(x))\nall x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nall x. (InstructedByDavid(x) -> DatabaseCourse(x))\nall x. (LabWorker(x) -> InstructedByDavid(x))\nJames is a student working in the lab.\nJack neither has a part-time job offered by the university nor works in the lab.\n</PREMISES>\n<CONCLUSION>\nJack takes the database course.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (-LibraryWorker(x) -> -ComputerScienceDepartment(x))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (PartTimeJob(x) -> LibraryWorker(x))\nTEXT: All students who take the database course are from the computer science department. \nFOL: all x. (DatabaseCourse(x) -> ComputerScienceDepartment(x))\nTEXT: All students instructed by professor David are taking the database course. \nF",
    "<PREMISES>\nall x. (Student(x) & Lab(x) & -CS(x) -> -ComputerScience(x))\nall x. (Student(x) & PartTimeJob(x) & University(x) -> Library(x))\nall x. (Student(x) & Database(x) -> CS(x))\nall x. (Student(x) & Database(x) & David(x) -> Takes(x))\nall x. (Student(x) & Lab(x) & David(x) -> Database(x))\nJames is a student working in the lab.\nFOL: Student(james) & Lab(james)\nJack neither has a part-time job offered by the university nor works in the lab.\nFOL: -PartTimeJob(jack) & -Lab(jack)\n</PREMISES>\n<CONCLUSION>\nJack takes the database course.\nFOL: -Takes(jack) & Database(jack)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Student(x) -> -LibraryWorker(x) & -ComputerScienceDepartment(x))\nall x. (Student(x) & PartTimeJob(x) & UniversityJob(x) -> LibraryWorker(x))\nall x. (Student(x) & DatabaseCourse(x) -> ComputerScienceDepartment(x))\nall x. (Student(x) & DatabaseCourse(x) -> David(x))\nall x. (Student(x) & LabWorker(x) -> David(x))\nJames is a student working in the lab.\nJack neither has a part-time job offered by the university nor works in the lab.\n</PREMISES>\n<CONCLUSION>\nJack takes the database course.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No students who work in the library are from the computer science department. \nFOL: all x. (Student(x) -> (-LibraryWorker(x) & -ComputerScienceDepartment(x)))\nTEXT: All students who have part-time jobs offered by the university are students who work in the library. \nFOL: all x. (Student(x) & PartTimeJob(x) & UniversityJob(x) -> LibraryWorker(x))\nTEXT: All students who take the database course are from the computer science department. \nF"
   ]
  ]
 },
 {
  "index": 142,
  "responses": [
   [
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic -> GeorgeWantsToCompose\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram -> GeorgeCanCompose\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose & GeorgeWantsToCompose) -> GeorgeWillCompose\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (GeorgeLikesMusic & GeorgeHasAccessToProgram) -> GeorgeWillCompose\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: LikesMusic(george) -> WantsToCompose(george)\nTEXT: If George has access to a program, he can compose.\nFOL: HasAccessToProgram(george) -> CanCompose(george)\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george)) -> WillCompose(george)\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: LikesMusic(george) & HasAccessToProgram(george) -> WillCompose(george)\n</CONCLUSION>",
    "<PREMISES>\nall x. (LikesMusic(x) -> WantsToCompose(x))\nall x. (HasAccessToProgram(x) -> CanCompose(x))\nall x. ((CanCompose(x) & WantsToCompose(x)) -> WillCompose(x))\n</PREMISES>\n<CONCLUSION>\nall x. (LikesMusic(x) & HasAccessToProgram(x) -> WillCompose(x))\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic -> GeorgeWantsToCompose\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram -> GeorgeCanCompose\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose & GeorgeWantsToCompose) -> GeorgeWillCompose\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (GeorgeLikesMusic & GeorgeHasAccessToProgram) -> GeorgeWillCompose\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: likesMusic(george) -> wantsToCompose(george)\nTEXT: If George has access to a program, he can compose.\nFOL: hasAccessToProgram(george) -> canCompose(george)\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (canCompose(george) & wantsToCompose(george)) -> willCompose(george)\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: likesMusic(george) & hasAccessToProgram(george) -> willCompose(george)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic -> GeorgeWantsToCompose\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram -> GeorgeCanCompose\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose & GeorgeWantsToCompose) -> GeorgeWillCompose\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: GeorgeLikesMusic & GeorgeHasAccessToProgram -> GeorgeWillCompose\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: LikesMusic(george) -> WantsToCompose(george)\nIf George has access to a program, he can compose.\nFOL: HasAccessToProgram(george) -> CanCompose(george)\nIf George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george)) -> WillCompose(george)\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: LikesMusic(george) & HasAccessToProgram(george) -> WillCompose(george)\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic -> GeorgeWantsToCompose\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram -> GeorgeCanCompose\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose & GeorgeWantsToCompose) -> GeorgeWillCompose\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (GeorgeLikesMusic & GeorgeHasAccessToProgram) -> GeorgeWillCompose\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic -> GeorgeWantsToCompose\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram -> GeorgeCanCompose\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: GeorgeCanCompose & GeorgeWantsToCompose -> GeorgeWillCompose\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: GeorgeLikesMusic & GeorgeHasAccessToProgram -> GeorgeWillCompose\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic -> GeorgeWantsToCompose\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram -> GeorgeCanCompose\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose & GeorgeWantsToCompose) -> GeorgeWillCompose\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: GeorgeLikesMusic & GeorgeHasAccessToProgram -> GeorgeWillCompose\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic -> GeorgeWantsToCompose\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram -> GeorgeCanCompose\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose & GeorgeWantsToCompose) -> GeorgeWillCompose\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (GeorgeLikesMusic & GeorgeHasAccessToProgram) -> GeorgeWillCompose\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\n\nIf George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\n\nIf George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\n</PREMISES>\n\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & HasAccessToProgram(george) -> WillCompose(george))\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic -> GeorgeWantsToCompose\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram -> GeorgeCanCompose\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose & GeorgeWantsToCompose) -> GeorgeWillCompose\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (GeorgeLikesMusic & GeorgeHasAccessToProgram) -> GeorgeWillCompose\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: likesMusic(george) -> wantsToCompose(george)\nIf George has access to a program, he can compose.\nFOL: hasAccessToProgram(george) -> canCompose(george)\nIf George can compose and wants to compose, he will compose.\nFOL: (canCompose(george) & wantsToCompose(george)) -> willCompose(george)\n</PREMISES>\n\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (likesMusic(george) & hasAccessToProgram(george)) -> willCompose(george)\n</CONCLUSION>",
    "<PREMISES>\nall x. (LikesMusic(x) -> WantsToCompose(x))\nall x. (HasAccessToProgram(x) -> CanCompose(x))\nall x. ((CanCompose(x) & WantsToCompose(x)) -> WillCompose(x))\n</PREMISES>\n<CONCLUSION>\nall x. (LikesMusic(x) & HasAccessToProgram(x) -> WillCompose(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: likesMusic(george) -> wantsToCompose(george)\nTEXT: If George has access to a program, he can compose.\nFOL: hasAccessToProgram(george) -> canCompose(george)\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (canCompose(george) & wantsToCompose(george)) -> willCompose(george)\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (likesMusic(george) & hasAccessToProgram(george)) -> willCompose(george)\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\n</PREMISES>\n\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & HasAccessToProgram(george) -> WillCompose(george))\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: LikesMusic(george) -> WantsToCompose(george)\nTEXT: If George has access to a program, he can compose.\nFOL: HasAccessToProgram(george) -> CanCompose(george)\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george)) -> WillCompose(george)\n</PREMISES>\n\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & HasAccessToProgram(george)) -> WillCompose(george)\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic -> GeorgeWantsToCompose\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccess -> GeorgeCanCompose\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose & GeorgeWantsToCompose) -> GeorgeWillCompose\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (GeorgeLikesMusic & GeorgeHasAccess) -> GeorgeWillCompose\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic -> GeorgeWantsToCompose\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram -> GeorgeCanCompose\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose & GeorgeWantsToCompose) -> GeorgeWillCompose\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (GeorgeLikesMusic & GeorgeHasAccessToProgram) -> GeorgeWillCompose\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic -> GeorgeWantsToCompose\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram -> GeorgeCanCompose\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose & GeorgeWantsToCompose) -> GeorgeWillCompose\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (GeorgeLikesMusic & GeorgeHasAccessToProgram) -> GeorgeWillCompose\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic -> GeorgeWantsToCompose\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram -> GeorgeCanCompose\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose & GeorgeWantsToCompose) -> GeorgeWillCompose\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (GeorgeLikesMusic & GeorgeHasAccessToProgram) -> GeorgeWillCompose\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: likesMusic(george) -> wantsToCompose(george)\nTEXT: If George has access to a program, he can compose.\nFOL: hasAccessToProgram(george) -> canCompose(george)\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: canCompose(george) & wantsToCompose(george) -> willCompose(george)\n</PREMISES>\n\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: likesMusic(george) & hasAccessToProgram(george) -> willCompose(george)\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\n</PREMISES>\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: (LikesMusic(george) & HasAccessToProgram(george) -> WillCompose(george))\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: likesMusic(george) -> wantsToCompose(george)\nIf George has access to a program, he can compose.\nFOL: hasAccessToProgram(george) -> canCompose(george)\nIf George can compose and wants to compose, he will compose.\nFOL: canCompose(george) & wantsToCompose(george) -> willCompose(george)\n</PREMISES>\n\n<CONCLUSION>\nIf George likes music and has access to a program, he will compose.\nFOL: likesMusic(george) & hasAccessToProgram(george) -> willCompose(george)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 143,
  "responses": [
   [
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic -> GeorgeWantsToCompose\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram -> GeorgeCanCompose\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose & GeorgeWantsToCompose) -> GeorgeWillCompose\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -GeorgeWillCompose -> -GeorgeCanCompose\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\n</PREMISES>\n\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -WillCompose(george) -> -CanCompose(george)\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic -> GeorgeWantsToCompose\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram -> GeorgeCanCompose\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose & GeorgeWantsToCompose) -> GeorgeWillCompose\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -GeorgeWillCompose -> -GeorgeCanCompose\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic -> GeorgeWantsToCompose\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram -> GeorgeCanCompose\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose & GeorgeWantsToCompose) -> GeorgeWillCompose\n</PREMISES>\n\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -GeorgeWillCompose -> -GeorgeCanCompose\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic -> GeorgeWantsToCompose\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram -> GeorgeCanCompose\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose & GeorgeWantsToCompose) -> GeorgeWillCompose\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -GeorgeWillCompose -> -GeorgeCanCompose\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic -> GeorgeWantsToCompose\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram -> GeorgeCanCompose\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose & GeorgeWantsToCompose) -> GeorgeWillCompose\n</PREMISES>\n\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -GeorgeWillCompose -> -GeorgeCanCompose\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -WillCompose(george) -> -CanCompose(george)\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic -> GeorgeWantsToCompose\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram -> GeorgeCanCompose\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose & GeorgeWantsToCompose) -> GeorgeWillCompose\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -GeorgeWillCompose -> -GeorgeCanCompose\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic -> GeorgeWantsToCompose\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram -> GeorgeCanCompose\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose & GeorgeWantsToCompose) -> GeorgeWillCompose\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -GeorgeWillCompose -> -GeorgeCanCompose\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: LikesMusic(george) -> WantsToCompose(george)\nTEXT: If George has access to a program, he can compose.\nFOL: HasAccessToProgram(george) -> CanCompose(george)\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george)) -> WillCompose(george)\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -WillCompose(george) -> -CanCompose(george)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -WillCompose(george) -> -CanCompose(george)\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: LikesMusic(george) -> WantsToCompose(george)\nTEXT: If George has access to a program, he can compose.\nFOL: AccessToProgram(george) -> CanCompose(george)\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george)) -> WillCompose(george)\n</PREMISES>\n\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -WillCompose(george) -> -CanCompose(george)\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic -> GeorgeWantsToCompose\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram -> GeorgeCanCompose\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose & GeorgeWantsToCompose) -> GeorgeWillCompose\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -GeorgeWillCompose -> -GeorgeCanCompose\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: likesMusic(george) -> wantsToCompose(george)\nTEXT: If George has access to a program, he can compose.\nFOL: accessToProgram(george) -> canCompose(george)\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (canCompose(george) & wantsToCompose(george)) -> willCompose(george)\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -willCompose(george) -> -canCompose(george)\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: likesMusic(george) -> wantsToCompose(george)\nTEXT: If George has access to a program, he can compose.\nFOL: hasAccessToProgram(george) -> canCompose(george)\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (canCompose(george) & wantsToCompose(george)) -> willCompose(george)\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -willCompose(george) -> -canCompose(george)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -WillCompose(george) -> -CanCompose(george)\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: likesMusic(george) -> wantsToCompose(george)\nTEXT: If George has access to a program, he can compose.\nFOL: hasAccessToProgram(george) -> canCompose(george)\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: canCompose(george) & wantsToCompose(george) -> willCompose(george)\n</PREMISES>\n\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -willCompose(george) -> -canCompose(george)\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic -> GeorgeWantsToCompose\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram -> GeorgeCanCompose\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (GeorgeCanCompose & GeorgeWantsToCompose) -> GeorgeWillCompose\n</PREMISES>\n\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -GeorgeWillCompose -> -GeorgeCanCompose\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: LikesMusic(george) -> WantsToCompose(george)\nTEXT: If George has access to a program, he can compose.\nFOL: HasAccessToProgram(george) -> CanCompose(george)\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george)) -> WillCompose(george)\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -WillCompose(george) -> -CanCompose(george)\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic -> GeorgeWantsToCompose\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram -> GeorgeCanCompose\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: GeorgeCanCompose & GeorgeWantsToCompose -> GeorgeWillCompose\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -GeorgeWillCompose -> -GeorgeCanCompose\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: likesMusic(george) -> wantsToCompose(george)\nTEXT: If George has access to a program, he can compose.\nFOL: hasAccessToProgram(george) -> canCompose(george)\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (canCompose(george) & wantsToCompose(george)) -> willCompose(george)\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -willCompose(george) -> -canCompose(george)\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: (LikesMusic(george) -> WantsToCompose(george))\nTEXT: If George has access to a program, he can compose.\nFOL: (HasAccessToProgram(george) -> CanCompose(george))\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (CanCompose(george) & WantsToCompose(george) -> WillCompose(george))\n</PREMISES>\n\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -WillCompose(george) -> -CanCompose(george)\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: likesMusic(george) -> wantsToCompose(george)\nTEXT: If George has access to a program, he can compose.\nFOL: hasAccessToProgram(george) -> canCompose(george)\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (canCompose(george) & wantsToCompose(george)) -> willCompose(george)\n</PREMISES>\n\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -willCompose(george) -> -canCompose(george)\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: likesMusic(george) -> wantsToCompose(george)\nTEXT: If George has access to a program, he can compose.\nFOL: hasAccessToProgram(george) -> canCompose(george)\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: (canCompose(george) & wantsToCompose(george)) -> willCompose(george)\n</PREMISES>\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -willCompose(george) -> -canCompose(george)\n</CONCLUSION>",
    "<PREMISES>\nIf George likes music, he wants to compose.\nFOL: GeorgeLikesMusic -> GeorgeWantsToCompose\nTEXT: If George has access to a program, he can compose.\nFOL: GeorgeHasAccessToProgram -> GeorgeCanCompose\nTEXT: If George can compose and wants to compose, he will compose.\nFOL: GeorgeCanCompose & GeorgeWantsToCompose -> GeorgeWillCompose\n</PREMISES>\n\n<CONCLUSION>\nIf George will not compose, George can not compose.\nFOL: -GeorgeWillCompose -> -GeorgeCanCompose\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 144,
  "responses": [
   [
    "<PREMISES>\nA hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n</PREMISES>\n<CONCLUSION>\nAll birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Hawk(x) -> -Land(x))\nexists x. (Bird(x) & Hawk(x))\n</PREMISES>\n<CONCLUSION>\nall x. Land(x)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: -Lands(hawk)\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (-Lands(x) & Hawk(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<PREMISES>\n<evaluate>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n</evaluate>\n</PREMISES>\n<CONCLUSION>\n<evaluate>\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</evaluate>\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: -Lands(hawk)\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<PREMISES>\nA hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n</PREMISES>\n\n<CONCLUSION>\nAll birds land.\nFOL: all x. (Bird(x) -> Lands(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<PREMISES>\nA hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n</PREMISES>\n<CONCLUSION>\nAll birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (-Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: -Lands(hawk)\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (-Lands(x) & Hawk(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>",
    "<PREMISES>\nA hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nSome birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\n</PREMISES>\n\n<CONCLUSION>\nAll birds land.\nFOL: all x. (Bird(x) -> Lands(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: A hawk never lands.\nFOL: all x. (Hawk(x) -> -Lands(x))\nTEXT: Some birds are hawks.\nFOL: exists x. (Bird(x) & Hawk(x))\nTEXT: All birds land\nFOL: all x. (Bird(x) -> Lands(x))\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 145,
  "responses": [
   [
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGiven(x) & TV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGiven(x) & TV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGiven(x) & TV(x))\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: BreakingBad & Monday(8",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGiven(x) & TV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGiven(x) & TV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGiven(x) & TV(x))\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: BreakingBad & exists x.",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monsday(m) & 8pm(m) & RosesOnTV(m))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monsday(m) & 8pm(m) & RosesOnTV(m))\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: BreakingBad & exists m. (Monsday(m",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monsday(x) & 8pm(x) & Roses(x) & TV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) & TV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monsday(x) & 8pm(x) & Roses(x) & TV(x))\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: ((-BreakBad &",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monsday(m) & 8pm(m) & Roses(m))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\nFOL: -RealityTV(BreakingBad) & exists m. (Monsday(m) & 8pm(m) & BreakingBad(m))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monday(m) & 8pm(m) & RosesGiven(m))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGiven(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monday(m) & 8pm(m) & RosesGiven(m))\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: exists m. ((Monday(m) & 8pm(m) &",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGiven(x) & TV(x))\nEvery rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGiven(x) & TV(x) -> OnTheBachelor(x))\nEverything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nAll shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nBreaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\nFOL: -Monday(8pm) & -TV(BreakingBad)\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monsday(m) & 8pm(m) & Roses(m))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> RealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (RealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monsday(m) & 8pm(m) & Roses(m))\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: exists m. (Monsday(m) & 8pm(m) & Roses(m) & -",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGiven(x) & TV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGiven(x) & TV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGiven(x) & TV(x))\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: exists x. ((Monday(x",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & Roses(x) & TV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) & TV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & Roses(x) & TV(x))\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: -Monday(BreakingBad) & "
   ],
   [
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monsday(m) & 8pm(m) & Roses(m))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monsday(m) & 8pm(m) & Roses(m))\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: ((-Roses(BreakingBad) & Monsday(",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: -RosesGivenOutOnTV(Break",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGiven(x) & TV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGiven(x) & TV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGiven(x) & TV(x))\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: BreakingBad & Monday(8",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monsday(x) & 8pm(x) & Roses(x) & TV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) & TV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortrayRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortrayRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monsday(x) & 8pm(x) & Roses(x) & TV(x))\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: -Roses(Break",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Mondays(m) & 8pm(m) & RosesGivenOnTV(m))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Mondays(m) & 8pm(m) & RosesGivenOnTV(m))\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: -RosesGivenOnTV(Break"
   ],
   [
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monday(m) & 8pm(m) & Roses(m, TV(m)))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Rose(x, TV(m)) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\nFOL: -Monday(8pm) & BreakingBad\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monday(m) & 8pm(m) & Roses(m, TV(m)))\nTEXT: Breaking Bad is on Monday at 8 pm",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (MondaysAt8pm(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (MondaysAt8pm(x) & RosesOnTV(x))\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: MondaysAt8pm(breakingBad) & RosesOnTV(breakingBad",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\nFOL: BreakingBad & exists x. (Monday(x) & 8pm(x) & RosesOnTV(x))\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monday(m) & 8pm(m) & RosesGivenOut(m))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOut(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monday(m) & 8pm(m) & RosesGivenOut(m))\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: exists m. ((Monday(m) & 8pm(m) & Roses",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8(x) & RosesGiven(x) & TV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGiven(x) & TV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8(x) & RosesGiven(x) & TV(x))\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: -Monday(BreakingBad) &"
   ],
   [
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysLivesOfRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(breakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Breaking Bad is on Monday at 8 pm.\n",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monday(m) & 8pm(m) & RosesOnTV(m))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monday(m) & 8pm(m) & RosesOnTV(m))\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: BreakingBad & exists m. (Monday(m) &",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monsday(m) & 8pm(m) & Roses(m))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monsday(m) & 8pm(m) & Roses(m))\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: -Roses(BreakingBad) & Monsday(breakingBad) &",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monday(m) & 8pm(m) & RosesOnTV(m))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monday(m) & 8pm(m) & RosesOnTV(m))\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: exists m. ((Monday(m) & 8pm(m) & Roses",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOut(x, TV(x)))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOut(x, TV(x)) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is on Monday at 8 pm.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: On some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOut(x, TV(x)))\nTEXT: Breaking Bad is on Monday at 8 pm.\nFOL: BreakingBad & exists x."
   ]
  ]
 },
 {
  "index": 146,
  "responses": [
   [
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOut(x) & TV(x))\nEvery rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOut(x) & TV(x) -> Bachelor(x))\nEverything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nAll shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nBreaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTV(BreakingBad) & RosesGivenOut(BreakingBad) & Monday(BreakingBad) & 8pm(BreakingBad) & TV(BreakingBad)\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & Roses(x) & TV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) & TV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTV(BreakingBad) & Roses(BreakingBad) & Monday(BreakingBad) & 8pm(BreakingBad) & TV(BreakingBad)\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monday(m) & 8pm(m) & RosesGivenOut(m))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOut(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTV(BreakingBad) & RosesGivenOut(Monday(8pm) & RosesGivenOut(Monday(8pm)))\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & Roses(x) & TV(x))\nEvery rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) & TV(x) -> Bachelor(x))\nEverything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nAll shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nBreaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTV(BreakingBad) & Roses(BreakingBad) & Monday(BreakingBad) & 8pm(BreakingBad) & TV(BreakingBad)\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & Roses(x) & TV(x))\nEvery rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) & TV(x) -> Bachelor(x))\nEverything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortrayLivesOfRealPeople(x))\nAll shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortrayLivesOfRealPeople(x) -> RealityTV(x))\nBreaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTV(BreakingBad) & Roses(BreakingBad) & Monday(BreakingBad) & 8pm(BreakingBad) & TV(BreakingBad)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. exists t. (Monsday(m) & Hour(m, 8) & Day(m, Monday) & RosesGivenOutOnTV(t) & t = m)\nEvery rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nEverything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nAll shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nBreaking Bad is not a reality TV show.\nFOL: -RealityTVShow(BreakingBad)\n</PREMISES>\n\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTVShow(BreakingBad) & RosesGivenOutOnMondayAt8pm(BreakingBad)\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTV(BreakingBad) & RosesGivenOutOnMondayAt8pm(BreakingBad)\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Mon(m) & 8pm(m) & RosesOnTV(m))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTV(BreakingBad) & RosesOnTV(BreakingBad) & Mon(BreakingBad) & 8pm(BreakingBad)\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monsday(m) & 8pm(m) & RosesOnTV(m))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortrayRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortrayRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTV(BreakingBad) & RosesOnTV(BreakingBad) & Monsday(BreakingBad) & 8pm(BreakingBad)\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & Roses(x) & TV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) & TV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortrayLivesOfRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortrayLivesOfRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTV(BreakingBad) & Roses(BreakingBad) & Monday(BreakingBad) & 8pm(BreakingBad) & TV(BreakingBad)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & Roses(x) & TV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) & TV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTV(BreakingBad) & Roses(BreakingBad) & Monday(BreakingBad) & 8pm(BreakingBad) & TV(BreakingBad)\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTV(BreakingBad) & RosesGivenOnTV(BreakingBad) & Monday(BreakingBad) & 8pm(BreakingBad)\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & Roses(x) & TV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) & TV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortrayRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortrayRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTV(BreakingBad) & Roses(BreakingBad) & Monday(BreakingBad) & 8pm(BreakingBad) & TV(BreakingBad)\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTV(BreakingBad) & RosesOnTV(BreakingBad) & Monday(BreakingBad) & 8(BreakingBad)\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monday(m) & 8pm(m) & RosesOnTV(m))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTV(BreakingBad) & RosesOnTV(BreakingBad) & Monday(BreakingBad) & 8pm(BreakingBad)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTV(BreakingBad) & RosesGivenOutOnMondayAt8pm(BreakingBad)\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monday(m) & 8pm(m) & Roses(m))\nEvery rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) -> OnTheBachelor(x))\nEverything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nAll shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nBreaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTV(BreakingBad) & Roses(m) & Monday(m) & 8pm(m)\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTV(BreakingBad) & RosesOnTV(BreakingBad) & Monday(BreakingBad) & 8pm(BreakingBad)\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monsday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nEvery rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> Bachelor(x))\nEverything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nAll shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nBreaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTV(BreakingBad) & RosesGivenOutOnTV(BreakingBad) & Monsday(BreakingBad) & 8pm(BreakingBad)\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8(x) & RosesGivenOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTV(BreakingBad) & RosesGivenOnTV(Monday(8) & 8(Monday(8)) & RosesGivenOnTV(Monday"
   ],
   [
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & Roses(x, TV(x)))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x, TV(x)) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTV(BreakingBad) & Roses(x, TV(x)) & x = BreakingBad & Monday(x) & 8pm(x)\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOut(x, TV(x)))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOut(x, TV(x)) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTV(BreakingBad) & RosesGivenOut(BreakingBad, Monday(8pm))\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monday(m) & 8pm(m) & Roses(m))\nEvery rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) -> OnTheBachelor(x))\nEverything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nAll shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nBreaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTV(BreakingBad) & Roses(BreakingBad) & Monday(BreakingBad) & 8pm(BreakingBad)\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTV(BreakingBad) & RosesOnTV(BreakingBad) & Monday(BreakingBad) & 8(BreakingBad)\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTVShow(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTVShow(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\nFOL: RealityTVShow(BreakingBad) & RosesGivenOutOnTV(Monday(8pm)) & OnTheBachelor(BreakingBad)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 147,
  "responses": [
   [
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Mondays(x) & 8pm(x) & Roses(x) & TV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) & TV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (Roses(x) & BreakingBad(x) -> (Mondays(x) & 8pm(x) & TV(x)))\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOut(x) & TV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOut(x) & TV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOut(BreakingBad) & TV(BreakingBad)) -> (Monday(BreakingBad) & 8pm(BreakingBad))\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monday(m) & 8pm(m) & Roses(m)OnTV(m))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesDuring(BreakingBad) -> (Monday(8pm) & Roses(8pm)))\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & Roses(x) & TV(x))\nEvery rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) & TV(x) -> Bachelor(x))\nEverything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortrayRealPeople(x))\nAll shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortrayRealPeople(x) -> RealityTV(x))\nBreaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (Roses(x) & BreakingBad(x) -> (Monday(x) & 8pm(x)))\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & Roses(x) & TV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) & TV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (Roses(x) & TV(x) & BreakingBad(x) -> (Monday(x) & 8pm(x)))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monday(m) & 8pm(m) & Roses(m))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (Roses(x) & BreakingBad(x) -> Monday(x) & 8pm(x))\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monsday(m) & 8pm(m) & RosesOnTV(m))\nEvery rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> OnTheBachelor(x))\nEverything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nAll shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nBreaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesOnTV(x) & BreakingBad(x) -> Monsday(x) & 8pm(x))\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & Roses(x, TV(x)))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x, TV(x)) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (Roses(x, TV(x)) & BreakingBad(x)) -> (Monday(x) & 8pm(x))\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monsday(m) & 8pm(m) & RosesOnTV(m))\nEvery rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> Bachelor(x))\nEverything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nAll shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nBreaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesOnTV(BreakingBad) -> (Monsday(BreakingBad) & 8pm(BreakingBad)))\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutDuring(BreakingBad) -> (Monday(8) & RosesGivenOutOnTV(8)))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monday(m) & 8pm(m) & Roses(m))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (Roses(x) & BreakingBad(x) -> Monday(x) & 8pm(x))\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: BreakingBad(x) & RosesOnTV(x) -> Monday(x) & 8pm(x)\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesOnTV(x) & BreakingBad(x)) -> (Monday(x) & 8pm(x))\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & Roses(x) & TV(x))\nEvery rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) & TV(x) -> Bachelor(x))\nEverything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nAll shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nBreaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (Roses(x) & BreakingBad(x) -> (Monday(x) & 8pm(x)))\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Mondays(m) & 8pm(m) & Roses(m) & TV(m))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) & TV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (Roses(x) & BreakingBad(x) -> Mondays(x) & 8pm(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monday(m) & 8pm(m) & Roses(m))\nEvery rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) -> OnTheBachelor(x))\nEverything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nAll shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nBreaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (Roses(x) & OnTheBachelor(x) & BreakingBad(x)) -> (Monday(x) & 8pm(x))\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monsday(m) & 8pm(m) & Roses(m) & TV(m))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) & TV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (Roses(x) & BreakingBad(x) -> (Monsday(x) & 8pm(x)))\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & Roses(x) & TV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) & TV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (Roses(x) & BreakingBad(x) & TV(x) & Monday(x) & 8pm(x)) -> Bachelor(x)\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesOnTV(y) & BreakingBad(y)) -> (Monday(y) & 8pm(y))\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Monday(m) & 8pm(m) & RosesOnTV(m))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesOnTV(x) & BreakingBad(x)) -> (Monday(x) & 8pm(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8(x) & Roses(x) & TV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) & TV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (Roses(x) & BreakingBad(x) & TV(x) & Monday(x) & 8(x)) -> (Bachelor(x) & RealityTV(x))\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & RosesGivenOutOnTV(x))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesGivenOutOnTV(x) -> Bachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesGivenOutDuring(BreakingBad) -> (Monday(8pm) & RosesGivenOutOnTV(8pm)))\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & Roses(x) & TV(x))\nEvery rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) & TV(x) -> Bachelor(x))\nEverything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nAll shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nBreaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (Roses(x) & BreakingBad(x) -> (Monday(x) & 8pm(x)))\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists x. (Monday(x) & 8pm(x) & Roses(x) & TV(x))\nEvery rose given out on TV is on the Bachelor.\nFOL: all x. (Roses(x) & TV(x) -> Bachelor(x))\nEverything on the Bachelor portrays the lives of real people.\nFOL: all x. (Bachelor(x) -> PortraysRealPeople(x))\nAll shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nBreaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (Roses(x) & BreakingBad(x) -> (Monday(x) & 8pm(x)))\n</CONCLUSION>",
    "<PREMISES>\nOn some Mondays at 8 pm, roses are given out on TV.\nFOL: exists m. (Mondays(m) & 8pm(m) & RosesOnTV(m))\nTEXT: Every rose given out on TV is on the Bachelor.\nFOL: all x. (RosesOnTV(x) -> OnTheBachelor(x))\nTEXT: Everything on the Bachelor portrays the lives of real people.\nFOL: all x. (OnTheBachelor(x) -> PortraysRealPeople(x))\nTEXT: All shows portraying the lives of real people are reality TV shows.\nFOL: all x. (PortraysRealPeople(x) -> RealityTV(x))\nTEXT: Breaking Bad is not a reality TV show.\nFOL: -RealityTV(BreakingBad)\n</PREMISES>\n<CONCLUSION>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\nFOL: (RosesOnTV(BreakingBad) -> (Mondays(8pm) & 8pm(BreakingBad)))\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 148,
  "responses": [
   [
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\nFOL: GermanOrRussian(heinrichSchmidt)\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician. \nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician. \nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (GermanOrRussian(heinrichScmidt))\n</EVALUATE>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Sc Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichScSchmidt) & MemberNaziReichstag(heinrichScSchmidt)\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\nFOL: (NaziGermanPolitician(heinrichSchmidt) & German) | (NaziGermanPolitician(heinrichSchmidt) & Russian)\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\nFOL: GermanOrRussian(heinrichSchmidt)\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician. \nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician. \nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: GermanOrRussian(heinrichSchmidt)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician. \nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: GermanPolitician(heinrichScmidt)\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichScmidt) & MemberNaziReichstag(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: German(schmidt) | Russian(schmidt)\n</EVALUATE>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician. \nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: GermanPolitician(heinrichSchmidt)\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: (German(heinrichSchmidt) | Russian(heinrichSchmidt))\n</EVALUATE>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Sc Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScSchmidt) & MemberOfNaziReichstag(heinrichScSchmidt)\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\nFOL: (NaziGermanPolitician(heinrichScmidt) & German) | (-NaziGermanPolitician(heinrichScmidt) & Russian)\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichSchmidt) & MemberNaziReichstag(heinrichSchmidt)\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\nFOL: (NaziGermanPolitician(heinrichSchmidt) & German) | (-NaziGermanPolitician(heinrichSchmidt) & Russian)\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanHeinrichScmidt\nHeinrich Sc Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliamentHeinrichScSchmidt & MemberNaziReichstagHeinrichScSchmidt\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\nFOL: (NaziGermanHeinrichSc Schmidt | RussianHeinrichSchmidt)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician. \nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician. \nFOL: GermanPolitician(heinrichSchmidt)\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: GermanOrRussian(heinrichSchmidt)\n</EVALUATE>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichScmidt) & MemberNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\nFOL: (German(heinrichScmidt) | Russian(heinrichScmidt))\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\nFOL: (-German(schmidt) | Russian(schmidt))\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichScmidt) & MemberNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\nFOL: (NaziGermanPolitician(heinrichScmidt) & German) | (NaziGermanPolitician(heinrichScmidt) & Russian)\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\nFOL: (NaziGermanPolitician(heinrichScmidt) -> German) | (NaziGermanPolitician(heinrichScmidt) -> Russian)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician. \nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician. \nFOL: GermanPolitician(heinrichScmidt)\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: GermanOrRussian(heinrichScmidt)\n</EVALUATE>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\nFOL: (NaziGermanPolitician(heinrichScmidt) & German) | (NaziGermanPolitician(heinrichScmidt) & Russian)\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\n</PREMISES>\n\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\nFOL: (NaziGerman(heinrichScmidt) | -NaziGerman(heinrichScmidt)) & (German(heinrichScmidt) | -German(heinrichScmidt))\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician. \nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician. \nFOL: GermanPolitician(heinrichScmidt)\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: Heinrich Schmidt was either German or Russian.\nFOL: German(schmidt) | Russian(schmidt)\n</EVALUATE>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanHeinrichScmidt\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliamentHeinrichScmidt & MemberNaziReichstagHeinrichScmidt\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\nFOL: (NaziGermanHeinrichScmidt & German) | (NaziGermanHeinrichScmidt & Russian)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\nFOL: (German(schmidt) | Russian(schmidt))\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: GermanHeinrichScmidt\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliamentHeinrichScmidt & MemberNaziReichstagHeinrichScmidt\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\nFOL: GermanHeinrichSchmidt | RussianHeinrichSchmidt\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichScmidt) & MemberNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\nFOL: (NaziGermanPolitician(heinrichScmidt) & German) | (NaziGermanPolitician(heinrichScmidt) & Russian)\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\nFOL: (NaziGermanPolitician(heinrichScmidt) & German) | (NaziGermanPolitician(heinrichScmidt) & Russian)\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: GermanHeinrichScmidt\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: (MemberOfPrussianStateParliament(HeinrichScmidt) & MemberOfNaziReichstag(HeinrichScmidt))\n</PREMISES>\n<CONCLUSION>\nHeinrich Schmidt was either German or Russian.\nFOL: (GermanHeinrichSchmidt | RussianHeinrichSchmidt)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 149,
  "responses": [
   [
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichScmidt) & MemberNaziReichstag(heinrichScmidt)\n</PREMISES>\n\n<CONCLUSION>\nSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberPrussianStateParliament(x) & MemberNaziReichstag(x))\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician. \nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</PREMISES>\n<CONCLUSION>\nSome x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichScmidt) & MemberNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberPrussianStateParliament(x) & MemberNaziReichstag(x))\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichScmidt) & MemberNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberPrussianStateParliament(x) & MemberNaziReichstag(x))\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\n</PREMISES>\n\n<CONCLUSION>\nSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician. \nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</PREMISES>\n<CONCLUSION>\nSome x. (NaziGermanPolitician(x) & MemberOfParliament(x) & MemberOfReichstag(x))\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician. \nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</PREMISES>\n<CONCLUSION>\nSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician. \nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\n</EVALUATE>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\n</PREMISES>\n\n<CONCLUSION>\nSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician. \nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</PREMISES>\n<CONCLUSION>\nSome x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: HeinrichScmidt(NaziGermanPolitician)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: HeinrichScmidt(MemberPrussianStateParliament & MemberNaziReichstag)\n</PREMISES>\n<CONCLUSION>\nSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberPrussianStateParliament(x) & MemberNaziReichstag(x))\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichScmidt) & MemberNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberPrussianStateParliament(x) & MemberNaziReichstag(x))\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichScmidt) & MemberNaziReichstag(heinrichScmidt)\n</PREMISES>\n\n<CONCLUSION>\nSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberPrussianStateParliament(x) & MemberNaziReichstag(x))\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician. \nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</PREMISES>\n<CONCLUSION>\nSome x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician. \nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</PREMISES>\n<CONCLUSION>\nSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician. \nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichScmidt) & MemberNaziReichstag(heinrichScmidt)\nTEXT: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberPrussianStateParliament(x) & MemberNaziReichstag(x))\n</EVALUATE>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\n</PREMISES>\n\n<CONCLUSION>\nSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician. \nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</PREMISES>\n<CONCLUSION>\nSome x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: Scmidt(heinrich) & NaziGerman(heinrich)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOf(heinrich, PrussianStateParliament) & MemberOf(heinrich, NaziReichstag)\n</PREMISES>\n<CONCLUSION>\nSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGerman(x) & MemberOf(x, PrussianStateParliament) & MemberOf(x, NaziReichstag))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\n</PREMISES>\n\n<CONCLUSION>\nSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichScmidt) & MemberNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberPrussianStateParliament(x) & MemberNaziReichstag(x))\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichScmidt) & MemberNaziReichstag(heinrichScmidt)\n</PREMISES>\n\n<CONCLUSION>\nSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberPrussianStateParliament(x) & MemberNaziReichstag(x))\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberOfPrussianStateParliament(x) & MemberOfNaziReichstag(x))\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichScmidt) & MemberNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\nFOL: exists x. (NaziGermanPolitician(x) & MemberPrussianStateParliament(x) & MemberNaziReichstag(x))\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 150,
  "responses": [
   [
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichScmidt) & MemberNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\nFOL: -Politician(heinrichScmidt) & MemberNaziReichstag(heinrichScmidt)\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician. \nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician. \nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -MemberOfNaziReichstag(x))\n</EVALUATE>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: Politician(heinrichScmidt) & NaziGerman(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\nFOL: -Politician(y) & MemberOfNaziReichstag(y)\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichSchmidt) & MemberOfNaziReichstag(heinrichSchmidt)\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\nFOL: -Politician(heinrichSchmidt) & -MemberOfNaziReichstag(heinrichSchmidt)\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichScmidt) & MemberNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\nFOL: -Politician(x) & MemberNaziReichstag(x)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichScmidt) & MemberNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\nFOL: -Politician(x) & MemberNaziReichstag(x)\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichSchmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichSchmidt) & MemberNaziReichstag(heinrichSchmidt)\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\nFOL: -Politician(x) & MemberNaziReichstag(x)\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician. \nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician. \nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichScmidt) & MemberNaziReichstag(heinrichScmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: -MemberNaziReichstag(politician)\n</EVALUATE>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: Scmidt(heinrich) & Nazi(heinrich) & Politician(heinrich)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: Scmidt(heinrich) & Reichstag(heinrich) & PrussianStateParliament(heinrich)\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\nFOL: -Politician(heinrich) & Reichstag(heinrich)\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichScmidt) & MemberNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\nFOL: -Politician(x) & MemberNaziReichstag(x)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: Scmidt(heinrich) & NaziGerman(heinrich) & Politician(heinrich)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: Scmidt(heinrich) & PrussianStateParliament(heinrich) & NaziReichstag(heinrich)\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\nFOL: -Politician(heinrich) & NaziReichstag(heinrich)\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: Politician(heinrichScmidt) & NaziGerman(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOf(heinrichScmidt, PrussianStateParliament) & MemberOf(heinrichScmidt, NaziReichstag)\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\nFOL: -MemberOf(_, NaziReichstag)\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician. \nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: Scmidt(heinrich) & NaziGermanPolitician(heinrich)\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: Scmidt(heinrich) & MemberOfPrussianStateParliament(heinrich) & MemberOfNaziReichstag(heinrich)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: -Politician(x) & MemberOfNaziReichstag(x)\n</EVALUATE>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\nFOL: -Politician(x) & MemberOfNaziReichstag(x)\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: Politician(heinrichScmidt) & NaziGerman(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfParliament(heinrichScmidt) & MemberOfReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\nFOL: -MemberOfReichstag(politician)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\nFOL: -Politician(x) & MemberOfNaziReichstag(x)\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichScmidt) & MemberNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\nFOL: -Politician(x) & MemberNaziReichstag(x)\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichScmidt) & MemberNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\nFOL: -Politician(x) & MemberNaziReichstag(x)\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichScmidt) & MemberNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\nFOL: -Politician(x) & MemberNaziReichstag(x)\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: Scmidt(heinrich) & Nazi(heinrich) & Politician(heinrich)\nTEXT: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: Scmidt(heinrich) & Reichstag(heinrich) & PrussianStateParliament(heinrich)\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\nFOL: -Politician(x) & Reichstag(x)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician. \nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician. \nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: all x. (Politician(x) -> -MemberOfNaziReichstag(x))\n</EVALUATE>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician. \nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician. \nFOL: NaziGermanPolitician(heinrichScmidt)\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: -MemberOfNaziReichstag(x)\n</EVALUATE>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\nFOL: -Politician(x) & MemberOfNaziReichstag(x)\n</CONCLUSION>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician. \nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Heinrich Scmidt was a Nazi German politician.\nFOL: Politician(heinrichScmidt) & Nazi(heinrichScmidt)\nTEXT: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberOfPrussianStateParliament(heinrichScmidt) & MemberOfNaziReichstag(heinrichScmidt)\nTEXT: No politicians are part of the Nazi Reichstag.\nFOL: -MemberOfNaziReichstag(politician)\n</EVALUATE>",
    "<PREMISES>\nHeinrich Scmidt was a Nazi German politician.\nFOL: NaziGermanPolitician(heinrichScmidt)\nHeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nFOL: MemberPrussianStateParliament(heinrichScmidt) & MemberNaziReichstag(heinrichScmidt)\n</PREMISES>\n<CONCLUSION>\nNo politicians are part of the Nazi Reichstag.\nFOL: -Politician(x) & MemberNaziReichstag(x)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 151,
  "responses": [
   [
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu -> -LowSurvivalRate\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n</PREMISES>\n<CONCLUSION>\nColorectal cancer is a severe cancer.\nFOL: ColorectalCancer -> Severe",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer))\nTEXT: Colorectal cancer is a severe cancer\nFOL: BileDuctCancer(colore",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n</PREMISES>\n<CONCLUSION>\nColorectal cancer is a severe cancer\n</CONCLUSION>\n\n<E",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nAll severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nBile duct cancer is a severe cancer.\nFOL: BileDuctCancer(bileDuctCancer)\n\nAll Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nNo one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\n\nIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x))\n\n</PREMISES>\n<CONCLUSION>\nColorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) & SevereC",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n</PREMISES>\n<CONCLUSION>\nColorectal cancer is a severe cancer.\nFOL: ColorectalC"
   ],
   [
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n</PREMISES>\n<CONCLUSION>\nColorectal cancer is a severe cancer\n</CONCLUSION>\n\n<E",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer))\n</PREMISES>\n<CONCLUSION>\nColorectal cancer is a severe cancer.\nFOL:",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer\nFOL: BileD",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n</PREMISES>\n<CONCLUSION>\nColorectal cancer is a severe cancer\n</CONCLUSION>\n\n<E",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n</PREMISES>\n<CONCLUSION>\nColorectal cancer is a severe cancer\n</CONCLUSION>\n\n<E"
   ],
   [
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\nTEXT: Colorectal cancer is a severe cancer\nFOL: BileDuctCancer(colorectalCancer)\n</",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu -> -LowSurvivalRate\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n</PREMISES>\n<CONCLUSION>\nColorectal cancer is a severe cancer.\nFOL: BileDuctCancer -> SevereCancer\n</CONCLUSION>",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n</PREMISES>\n<CONCLUSION>\nColorectal cancer is a severe cancer.\nFOL: ColorectalC",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (-MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x) -> -BileDuctCancer(x))\n</PREMISES>\n<CONCLUSION>\nColorectal cancer is a severe cancer.\nFOL: Col",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nAll severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nBile duct cancer is a severe cancer.\nFOL: BileDuctCancer = SevereCancer\n\nAll Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nNo one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\n\nIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x)\n\n</PREMISES>\n<CONCLUSION>\nColorectal cancer is a severe cancer.\nFOL: ColorectalCancer = SevereCancer\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\n</PREMISES>\n<CONCLUSION>\nColorectal cancer is a severe cancer.\nF",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer))\n</PREMISES>\n<CONCLUSION>\nColorectal cancer is a severe cancer.\nF",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x)\n</PREMISES>\n<CONCLUSION>\nColorectal cancer is a severe cancer.\nFOL: BileDuctCancer(x) & Severe",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nAll severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nBile duct cancer is a severe cancer.\nFOL: BileDuctCancer(bileDuctCancer)\n\nAll Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nNo one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\n\nIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n\n</PREMISES>\n<CONCLUSION>\nColorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> SevereCancer(x)\n",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n</PREMISES>\n<CONCLUSION>\nColorectal cancer is a severe cancer\n</CONCLUSION>\n\n<EVAL"
   ],
   [
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\n</PREMISES>\n<CONCLUSION>\nColorectal cancer is a severe cancer.\nFOL:",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (-MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\n</PREMISES>\n<CONCLUSION>\nColorectal cancer is a severe cancer.\nF",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nAll severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nBile duct cancer is a severe cancer.\nFOL: BileDuctCancer(bileDuctCancer)\n\nAll Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nNo one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\n\nIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n\n</PREMISES>\n<CONCLUSION>\nColorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) -> SevereCancer(x)\n",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x)\n</PREMISES>\n<CONCLUSION>\nColorectal cancer is a severe cancer.\nFOL: ColorectalCancer(x) &",
    "<EVALUATE>\nTEXT: If something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer))\nTEXT: Colorectal cancer is a severe cancer\nFOL: BileDuctCancer"
   ]
  ]
 },
 {
  "index": 152,
  "responses": [
   [
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu -> -LowSurvivalRate\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -ColorectalCancer(x)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu -> -LowSurvivalRate\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer -> BileDuctCancer) & (ColorectalCancer -> LowSurvivalRate) -> -BileDuctCancer\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is a bile duct cancer or a Cholangiocarcin",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -ColorectalCancer(x)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is a bile duct cancer or a Ch",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then"
   ],
   [
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer) & -BileDuctCancer(colorectalCancer)) -> -ColorectalCancer(colorectalCancer)\n</PREMISES>\n<CON",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is a bile duct cancer or a Cholangiocarcin",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (Deadly(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> Deadly(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu -> -LowSurvivalRate\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -ColorectalCancer(x)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is a bile duct cancer or a Cholangiocarcin",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (Deadly(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> Deadly(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -ColorectalCancer(x)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colore"
   ],
   [
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (-MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colore",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu -> -LowSurvivalRate\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is a bile duct cancer or a Cholangioc",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is a bile duct cancer or a Cholangiocarc",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is a bile duct cancer or a Cholangiocarc"
   ],
   [
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nAll severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nBile duct cancer is a severe cancer.\nFOL: BileDuctCancer = SevereCancer\n\nAll Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nNo one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\n\nIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nAll severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nBile duct cancer is a severe cancer.\nFOL: BileDuctCancer(bileDuctCancer)\n\nAll Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nNo one with mild flu has a low survival rate.\nFOL: all x. (-MildFlu(x) -> -LowSurvivalRate(x))\n\nIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer))\n\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colore",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nAll severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nBile duct cancer is a severe cancer.\nFOL: BileDuctCancer(bileDuctCancer)\n\nAll Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nNo one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\n\nIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x) -> -ColorectalCancer(x))\n\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is a bile duct cancer or a Cholangiocarc"
   ],
   [
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu -> -LowSurvivalRate\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is a bile duct cancer or a Cholangiocarcin",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nAll severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nBile duct cancer is a severe cancer.\nFOL: BileDuctCancer(bileDuctCancer)\n\nAll Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nNo one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\n\nIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x)\n\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nAll severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nBile duct cancer is a severe cancer.\nFOL: BileDuctCancer = SevereCancer\n\nAll Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nNo one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\n\nIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -ColorectalCancer(x)\n\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (-MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\nTEXT: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma"
   ]
  ]
 },
 {
  "index": 153,
  "responses": [
   [
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (-MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholang",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarc",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarcinoma",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nAll severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nBile duct cancer is a severe cancer.\nFOL: BileDuctCancer(bileDuctCancer)\nAll Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nNo one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nAll severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nBile duct cancer is a severe cancer.\nFOL: BileDuctCancer(bileDuctCancer)\nAll Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nNo one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer"
   ],
   [
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarc",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarc",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarc",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu -> -LowSurvivalRate\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer & BileDuctCancer & LowSurvivalRate) -> -BileDuctCancer\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarc"
   ],
   [
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholang",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer(bileDuctCancer)\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (-MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarc",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a"
   ],
   [
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarcinoma",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarcinoma",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarcinoma",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarcinoma",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\n\nAll severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\n\nBile duct cancer is a severe cancer.\nFOL: BileDuctCancer(bileDuctCancer)\n\nAll Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\n\nNo one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\n\nIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: ((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))\n\n</PREMISES>\n\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct"
   ],
   [
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarcinoma",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu(x) -> -LowSurvivalRate(x)\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarc",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low. \nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer. \nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: all x. (-MildFlu(x) -> -LowSurvivalRate(x))\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Ch",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nAll severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nBile duct cancer is a severe cancer.\nFOL: BileDuctCancer(bileDuctCancer)\nAll Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nNo one with mild flu has a low survival rate.\nFOL: all x. (MildFlu(x) -> -LowSurvivalRate(x))\nIf colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is",
    "<PREMISES>\nIf something is a deadly disease, then its survival rate is low.\nFOL: all x. (DeadlyDisease(x) -> LowSurvivalRate(x))\nTEXT: All severe cancers are deadly diseases.\nFOL: all x. (SevereCancer(x) -> DeadlyDisease(x))\nTEXT: Bile duct cancer is a severe cancer.\nFOL: BileDuctCancer -> SevereCancer\nTEXT: All Cholangiocarcinoma is bile duct cancer.\nFOL: all x. (Cholangiocarcinoma(x) -> BileDuctCancer(x))\nTEXT: No one with mild flu has a low survival rate.\nFOL: -MildFlu -> HighSurvivalRate\nTEXT: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nFOL: (BileDuctCancer(colorectalCancer) & LowSurvivalRate(colorectalCancer)) -> -BileDuctCancer(colorectalCancer)\n</PREMISES>\n<CONCLUSION>\nIf colorectal cancer is not a mild flu and a Cholangiocarcinoma"
   ]
  ]
 },
 {
  "index": 154,
  "responses": [
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) \nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedals(Tokyo, USA)\nTEXT: The world championships is a sporting event.\nFOL: WorldChampionships(SportingEvent)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) -> SportingEvent(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames -> Tokyo\nTEXT: The United States won the most medals in Tokyo.\nFOL: US -> MostMedalsInTokyo\n</EVALUATE>\n\n<PREMISES>\n[BG] \n</PREMISES>\n\n<CONCLUSION>\nTEXT: The world championships is a sporting event.\nFOL: WorldChampionships -> SportingEvent(WorldChampionships)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(OlympicGames, Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsInTokyo(UnitedStates, Tokyo)\n</EVALUATE>\n\n<PREMISES>\n[BG] The world championships is a sporting event. \n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) \nTEXT: The last Olympic games was in Tokyo.\nFOL: -LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(Tokyo, USA)\nTEXT: The world championships is a sporting event.\nFOL: WorldChampionships(WorldChampionships)\n</EVALUATE>",
    "<PREMISES>\n[BG] The Olympic games is a sporting event. \nFOL: OlympicGames(OlympicGames) -> SportingEvent(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames -> Tokyo\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedals(Tokyo) -> UnitedStates\n</PREMISES>\n<CONCLUSION>\n[BG] The world championships is a sporting event. \nFOL: WorldChampionships -> SportingEvent(WorldChampionships)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) \nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(Tokyo, USA)\nTEXT: The world championships is a sporting event.\nFOL: WorldChampionships(WorldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames -> SportingEvent\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames -> Tokyo\nTEXT: The United States won the most medals in Tokyo.\nFOL: UnitedStates -> MostMedalsInTokyo\n</EVALUATE>\n\n<PREMISES>\n[BG] The world championships is a sporting event.\n</PREMISES>\n\n<CONCLUSION>\nTEXT: The world championships is a sporting event.\nFOL: WorldChampionships -> SportingEvent\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames -> SportingEvent\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames -> Tokyo\nTEXT: The United States won the most medals in Tokyo.\nFOL: US -> MostMedalsInTokyo\nTEXT: The world championships is a sporting event.\nFOL: WorldChampionships -> SportingEvent\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(isSportingEvent)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(inTokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsInTokyo(UnitedStates)\n</EVALUATE>\n\n<PREMISES>\n[BG] \n</PREMISES>\n\n<CONCLUSION>\nTEXT: The world championships is a sporting event.\nFOL: WorldChampionships(isSportingEvent)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) -> SportingEvent(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames -> Tokyo\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(Tokyo, UnitedStates) -> Won(Tokyo, UnitedStates)\nTEXT: The world championships is a sporting event.\nFOL: WorldChampionships -> SportingEvent(WorldChampionships)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) & SportingEvent(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(Tokyo, USA)\nTEXT: [BG] The world championships is a sporting event.\nFOL: WorldChampionships & SportingEvent(WorldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: -OlympicGames\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsInTokyo(US)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) & Sport(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGame(LastOlympicGame) & Location(LastOlympicGame, Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(MostMedals) & Winner(MostMedals, UnitedStates) & Location(MostMedals, Tokyo)\nTEXT: The world championships is a sporting event.\nFOL: WorldChampionships(WorldChampionships) & Sport(WorldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) \nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(Tokyo, USA)\nTEXT: The world championships is a sporting event.\nFOL: WorldChampionships(WorldChampionships) \n</EVALUATE>",
    "<PREMISES>\n[BG] The Olympic games is a sporting event.\nFOL: OlympicGames(isSportingEvent)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(inTokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(inTokyo, USA)\n</PREMISES>\n<CONCLUSION>\n[BG] The world championships is a sporting event.\nFOL: WorldChampionship(isSportingEvent)\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: OlympicGames = Tokyo\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsIn(OlympicGames, UnitedStates)\n</EVALUATE>\n\n<PREMISES>\n[BG] The world championships is a sporting event. \n</PREMISES>\n\n<CONCLUSION>\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(worldChampionships)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) \nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(Tokyo, USA)\nTEXT: The world championships is a sporting event.\nFOL: WorldChampionships(WorldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: [BG] The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) & Sport(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(Tokyo, USA)\nTEXT: [BG] The world championships is a sporting event.\nFOL: WorldChampionships & Sport(WorldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames -> SportingEvent\nTEXT: The last Olympic games was in Tokyo.\nFOL: -OlympicGames -> Tokyo\nTEXT: The United States won the most medals in Tokyo.\nFOL: US -> MostMedalsIn(Tokyo)\nTEXT: The world championships is a sporting event.\nFOL: WorldChampionships -> SportingEvent\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(isSportingEvent)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(Tokyo, USA)\n</EVALUATE>\n\n<PREMISES>\n[BG] \n</PREMISES>\n\n<CONCLUSION>\nTEXT: The world championships is a sporting event.\nFOL: WorldChampionship(isSportingEvent)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\n[BG] The Olympic games is a sporting event. \nFOL: OlympicGames(OlympicGames) & Sport(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedals(Tokyo, USA)\n</PREMISES>\n<CONCLUSION>\n[BG] The world championships is a sporting event. \nFOL: WorldChampionships & Sport(WorldChampionships)\n</CONCLUSION>",
    "<PREMISES>\n[BG] The Olympic games is a sporting event. \nFOL: OlympicGames(isSportingEvent)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsInTokyo(UnitedStates)\n</PREMISES>\n<CONCLUSION>\nThe world championships is a sporting event.\nFOL: WorldChampionships(isSportingEvent)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) & Sport(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(Tokyo, USA)\nTEXT: The world championships is a sporting event.\nFOL: WorldChampionships & Sport(WorldChampionships)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: SportingEvent(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: -OlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(Tokyo, USA)\nTEXT: The world championships is a sporting event.\nFOL: SportingEvent(WorldChampionships)\n</EVALUATE>",
    "<PREMISES>\n[BG]\nThe Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) -> Sport(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames -> Tokyo\nTEXT: The United States won the most medals in Tokyo.\nFOL: UnitedStates -> MostMedals(Tokyo)\n</PREMISES>\n<CONCLUSION>\nThe world championships is a sporting event.\nFOL: WorldChampionships -> Sport(WorldChampionships)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) -> Sport(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames -> Tokyo\nTEXT: The United States won the most medals in Tokyo.\nFOL: UnitedStates -> MostMedals(Tokyo)\nTEXT: The world championships is a sporting event.\nFOL: WorldChampionships -> Sport(WorldChampionships)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 155,
  "responses": [
   [
    "<PREMISES>\n[BG] The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) & SportingEvent(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(Tokyo, UnitedStates)\n</PREMISES>\n<CONCLUSION>\n[BG] The last Olympic games were not in Tokyo.\nFOL: -Tokyo(OlympicGames)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) & SportingEvent(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(Tokyo, UnitedStates)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -Tokyo(OlympicGames)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) \nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(LastOlympicGames) & Tokyo(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(Medals, UnitedStates, Tokyo)\n</EVALUATE>\n\n<PREMISES>\n[BG] The Olympic games is a sporting event. \n</PREMISES>\n<CONCLUSION>\nTEXT: The Olympic games is not a sporting event.\nFOL: -OlympicGames(OlympicGames)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) \nTEXT: The last Olympic games were in Tokyo.\nFOL: LastOlympicGames(LastOlympicGames) & Tokyo(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(Medals, UnitedStates, Tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -Tokyo(Tokyo)\n</EVALUATE",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) :- SportingEvent(OlympicGames).\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo).\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsInTokyo(UnitedStates, Tokyo).\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -Tokyo(OlympicGames).\n</EVALUATE>",
    "<PREMISES>\n[BG] The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) -> SportingEvent(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames -> Tokyo\nTEXT: The United States won the most medals in Tokyo.\nFOL: US -> MostMedals(Tokyo)\n</PREMISES>\n<CONCLUSION>\n[BG] The last Olympic games were not in Tokyo.\nFOL: -Tokyo -> LastOlympicGames\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event. \nFOL: OlympicGames(OlympicGames) \nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(LastOlympicGames) & Tokyo(Tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedals(UnitedStates, Tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -Tokyo(LastOlympicGames)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) & SportingEvent(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(UnitedStates, Tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -Tokyo\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) \nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedals(UnitedStates, Tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -Tokyo\n</EVALUATE>",
    "<PREMISES>\n[BG] The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) & Sport(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(Tokyo, UnitedStates)\n</PREMISES>\n<CONCLUSION>\n[BG] The last Olympic games were not in Tokyo.\nFOL: -Tokyo\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(Tokyo)\n</EVALUATE>",
    "<PREMISES>\n[BG]\nThe Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) \nThe last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nThe United States won the most medals in Tokyo.\nFOL: MostMedalsIn(Tokyo, USA)\n</PREMISES>\n<CONCLUSION>\nThe last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(Tokyo)\n</CONCLUSION>",
    "<PREMISES>\n[BG] The Olympic games is a sporting event. \nFOL: OlympicGames(OlympicGames) & Sport(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedals(UnitedStates, Tokyo)\n</PREMISES>\n<CONCLUSION>\n[BG] The last Olympic games were not in Tokyo.\nFOL: -Tokyo(LastOlympicGames)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: The Olympic games is a sporting event. \nFOL: OlympicGames(OlympicGames) & Sport(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedals(UnitedStates, Tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -Tokyo(LastOlympicGames)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\n[BG] The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) -> SportingEvent(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: Last(OlympicGames) -> Tokyo(OlympicGames)\nTEXT: The United States won the most medals in Tokyo.\nFOL: UnitedStates -> MostMedals(Tokyo)\n</PREMISES>\n<CONCLUSION>\n[BG] The last Olympic games were not in Tokyo.\nFOL: -Tokyo(OlympicGames)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) -> SportingEvent(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: -Last(OlympicGames) -> Tokyo(OlympicGames)\nTEXT: The United States won the most medals in Tokyo.\nFOL: -UnitedStates -> MostMedals(Tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -Tokyo(OlympicGames)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) \nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsInTokyo(US)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -Tokyo(LastOlympicGames)\n</EVALUATE>",
    "<PREMISES>\n[BG]\nThe Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) -> SportingEvent(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames -> Tokyo\nTEXT: The United States won the most medals in Tokyo.\nFOL: US -> MostMedals(Tokyo)\n</PREMISES>\n<CONCLUSION>\n[BG]\nThe last Olympic games were not in Tokyo.\nFOL: -Tokyo -> NotInTokyo\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) -> SportingEvent(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames -> Tokyo\nTEXT: The United States won the most medals in Tokyo.\nFOL: US -> MostMedals(Tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -Tokyo -> NotInTokyo\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(isSportingEvent)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(Tokyo, USA)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -Tokyo(LastOlympicGames)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) \nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(UnitedStates, Tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -Tokyo\n</EVALUATE>"
   ],
   [
    "<PREMISES>\n[BG]\nThe Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) \nThe last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nThe United States won the most medals in Tokyo.\nFOL: MostMedalsInTokyo(UnitedStates, Tokyo)\n</PREMISES>\n<CONCLUSION>\nThe last Olympic games were not in Tokyo.\nFOL: -LastOlympicGames(Tokyo)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event. \nFOL: OlympicGames(OlympicGames) \nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(OlympicGames, Tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsInTokyo(UnitedStates, Tokyo)\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -Tokyo(LastOlympicGames)\n</EVALUATE>",
    "<PREMISES>\n[BG]\nThe Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(Tokyo, USA)\n</PREMISES>\n<CONCLUSION>\n[BG]\nThe last Olympic games were not in Tokyo.\nFOL: -Tokyo(LastOlympicGames)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) :- sportingEvent(OlympicGames).\nTEXT: The last Olympic games was in Tokyo.\nFOL: lastOlympicGames(Tokyo).\nTEXT: The United States won the most medals in Tokyo.\nFOL: usWonMostMedals(Tokyo).\n</EVALUATE>\n\n<CONCLUSION>\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -Tokyo.\n</EVALUATE>",
    "<PREMISES>\n[BG] The Olympic games is a sporting event. \nFOL: OlympicGames(OlympicGames) -> SportingEvent(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames -> Tokyo\nTEXT: The United States won the most medals in Tokyo. \nFOL: UnitedStates -> MostMedals(Tokyo)\n</PREMISES>\n<CONCLUSION>\n[BG] The last Olympic games were not in Tokyo.\nFOL: -Tokyo\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -Tokyo\n</EVALUATE>"
   ],
   [
    "<PREMISES>\n[BG]\nThe Olympic games is a sporting event. \nFOL: SportingEvent(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsInTokyo(UnitedStates)\n</PREMISES>\n<CONCLUSION>\n[BG]\nThe last Olympic games were not in Tokyo.\nFOL: -Tokyo(OlympicGames)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) & Sport(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(LastOlympicGames) & Location(LastOlympicGames, Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: UnitedStates(UnitedStates) & MostMedals(UnitedStates, Tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -Location(LastOlympicGames, Tokyo)\n</EVALUATE>",
    "<PREMISES>\n[BG] The Olympic games is a sporting event. \nFOL: OlympicGames(OlympicGames) -> SportingEvent(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames -> Tokyo\nTEXT: The United States won the most medals in Tokyo. \nFOL: UnitedStates -> MostMedalsIn(Tokyo)\n</PREMISES>\n<CONCLUSION>\n[BG] The last Olympic games were not in Tokyo.\nFOL: -Tokyo\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -Tokyo\n</EVALUATE>",
    "<PREMISES>\n[BG] The Olympic games is a sporting event. \nFOL: OlympicGames(isSportingEvent)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(inTokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: UnitedStates wonMostMedals(inTokyo)\n</PREMISES>\n<CONCLUSION>\n[BG] The last Olympic games were not in Tokyo.\nFOL: -inTokyo(LastOlympicGames)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) \nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(UnitedStates, Tokyo)\nTEXT: The last Olympic games were not in Tokyo.\nFOL: -Tokyo\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 156,
  "responses": [
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event. \nFOL: OlympicGames(OlympicGames) -> Sport(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames -> Tokyo\nTEXT: The United States won the most medals in Tokyo. \nFOL: UnitedStates -> MostMedals(Tokyo)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: UnitedStates -> MostMedals(LastOlympicGames)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) \nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedals(Tokyo, UnitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedals(LastOlympicGames, UnitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) -> SportingEvent(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames -> Tokyo\nTEXT: The United States won the most medals in Tokyo.\nFOL: UnitedStates -> MostMedals(Tokyo)\n</EVALUATE>\n\n<PREMISES>\n[BG] \nThe last Olympic games is the Olympic games.\n</PREMISES>\n<CONCLUSION>\nThe United States won the most medals in the last Olympic games.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: The last Olympic games is the Olympic games.\nFOL: LastOlympicGames -> OlympicGames\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: UnitedStates -> MostMedals(LastOlympicGames)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) \nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(Tokyo, UnitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedals(LastOlympicGames, UnitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) \nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsInTokyo(UnitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsInLastOlympicGames(UnitedStates)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\n[BG] The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) & Sport(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(LastOlympicGames) & Tokyo(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(Tokyo, UnitedStates)\n</PREMISES>\n<CONCLUSION>\n[BG] The United States won the most medals in the last Olympic games.\nFOL: MostMedals(LastOlympicGames, UnitedStates)\n</CONCLUSION>",
    "<PREMISES>\n[BG] The Olympic games is a sporting event. \nFOL: OlympicGames(OlympicGames) -> SportingEvent(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames -> Tokyo\nTEXT: The United States won the most medals in Tokyo. \nFOL: UnitedStates -> MostMedalsIn(Tokyo)\n</PREMISES>\n<CONCLUSION>\n[BG] The United States won the most medals in the last Olympic games.\nFOL: UnitedStates -> MostMedalsIn(LastOlympicGames)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) :- SportingEvent(OlympicGames).\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo).\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsInTokyo(UnitedStates).\n</EVALUATE>\n\n<PREMISES>\n[BG] The Olympic games is a sporting event. \nThe last Olympic games was in Tokyo.\nThe United States won the most medals in Tokyo. \n</PREMISES>\n<CONCLUSION>\n[EVALUATE]\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsInLastOlympicGames(UnitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) \nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsInTokyo(US)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsInLastOlympicGames(US)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) & SportingEvent(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(OlympicGames) & Location(OlympicGames, Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(OlympicGames, Tokyo, UnitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedals(LastOlympicGames, MostMedals(OlympicGames, Tokyo, UnitedStates))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) \nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(Tokyo, USA)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedals(LastOlympicGames, USA)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) & Sport(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(LastOlympicGames) & Location(LastOlympicGames, Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: USWonMostMedals(US, Tokyo)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: USWonMostMedals(US, LastOlympicGames)\n</EVALUATE>",
    "<PREMISES>\n[BG] The Olympic games is a sporting event. \nFOL: OlympicGames(isSportingEvent)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(isTokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: USWonMostMedals(isTokyo)\n</PREMISES>\n<CONCLUSION>\nThe United States won the most medals in the last Olympic games.\nFOL: USWonMostMedals(isLastOlympicGames)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) \nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(Tokyo, UnitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedals(LastOlympicGames, UnitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) :- SportingEvent(OlympicGames).\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames = Tokyo.\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(Tokyo) = UnitedStates.\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedals(LastOlympicGames) = UnitedStates.\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) \nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsInTokyo(UnitedStates)\n</EVALUATE>\n\n<PREMISES>\n[BG] The Olympic games is a sporting event. \n</PREMISES>\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\n[BG] The Olympic games is a sporting event. \nFOL: OlympicGames(OlympicGames) -> Sport(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames -> Tokyo\nTEXT: The United States won the most medals in Tokyo. \nFOL: UnitedStates -> MostMedals(Tokyo)\n</PREMISES>\n<CONCLUSION>\n[BG] The United States won the most medals in the last Olympic games.\nFOL: UnitedStates -> MostMedals(LastOlympicGames)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) \nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedals(Tokyo, USA)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedals(LastOlympicGames, USA)\n</EVALUATE>",
    "<PREMISES>\n[BG] The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) & SportingEvent(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(OlympicGames) & Location(OlympicGames, Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsInTokyo(UnitedStates, Tokyo)\n</PREMISES>\n<CONCLUSION>\n[BG] The United States won the most medals in the last Olympic games.\nFOL: MostMedalsInLastOlympicGames(UnitedStates)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) \nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(LastOlympicGames) & Tokyo(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: USWonMostMedals(USWonMostMedals) & Tokyo(Tokyo)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: USWonMostMedals(LastOlympicGames)\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) -> SportingEvent(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames -> Tokyo\nTEXT: The United States won the most medals in Tokyo.\nFOL: UnitedStates -> MostMedalsIn(Tokyo)\n</EVALUATE>\n\n<PREMISES>\n[BG] The last Olympic games was in Tokyo.\n</PREMISES>\n<CONCLUSION>\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames -> Tokyo\n</EVALUATE>\n\n<PREMISES>\n[BG] The United States won the most medals in Tokyo.\n</PREMISES>\n<CONCLUSION>\nTEXT: The United States won the most medals in Tokyo.\nFOL: UnitedStates -> MostMedalsIn(Tokyo)\n</EVALUATE>\n\n<PREMISES>\n[BG] The last Olympic games was in Tokyo.\n</PREMISES>\n<CONCLUSION>\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames -> Tokyo\n</EVALUATE>\n\n<",
    "<PREMISES>\n[BG] The Olympic games is a sporting event. \nFOL: OlympicGames(isSportingEvent)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(isTokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: UnitedStates(wonMostMedalsInTokyo)\n</PREMISES>\n<CONCLUSION>\n[BG] The United States won the most medals in the last Olympic games.\nFOL: UnitedStates(wonMostMedalsInLastOlympicGames)\n</CONCLUSION>",
    "<PREMISES>\n[BG]\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) & Sport(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames & Location(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: UnitedStates & MostMedals(Tokyo)\n</PREMISES>\n<CONCLUSION>\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: UnitedStates & MostMedals(LastOlympicGames)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: [BG] OlympicGames(OlympicGames) & Sport(OlympicGames)\nTEXT: The last Olympic games was in Tokyo.\nFOL: [BG] LastOlympicGames & Location(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: [BG] UnitedStates & MostMedals(Tokyo)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: [BG] UnitedStates & MostMedals(LastOlympicGames)\n</E",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event.\nFOL: OlympicGames(OlympicGames) \nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo.\nFOL: MostMedalsInTokyo(UnitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsInLastOlympicGames(UnitedStates)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: The Olympic games is a sporting event. \nFOL: OlympicGames(OlympicGames) \nTEXT: The last Olympic games was in Tokyo.\nFOL: LastOlympicGames(Tokyo)\nTEXT: The United States won the most medals in Tokyo. \nFOL: MostMedalsInTokyo(UnitedStates)\nTEXT: The United States won the most medals in the last Olympic games.\nFOL: MostMedalsInLastOlympicGames(UnitedStates)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 157,
  "responses": [
   [
    "<PREMISES>\nall x. (Horse(x) -> Hooves(x))\nall x. (-Human(x) -> -Hooves(x))\n</PREMISES>\n<CONCLUSION>\nsome x. (Human(x) & Horse(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Horse(x) -> Hoof(x))\nall x. (-Human(x) -> -Hoof(x))\n</PREMISES>\n<CONCLUSION>\nsome x. (Human(x) & Horse(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<PREMISES>\nall x. (Horse(x) -> Hoof(x))\nall x. (-Human(x) -> -Hoof(x))\n</PREMISES>\n<CONCLUSION>\nsome x. (Human(x) & -Horse(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Horse(x) -> Hoof(x))\nall x. (-Human(x) -> -Hoof(x))\n</PREMISES>\n<CONCLUSION>\nsome x. (Human(x) & Horse(x))\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<PREMISES>\nall x. (Horse(x) -> Hoof(x))\nall x. (-Human(x) -> -Hoof(x))\n</PREMISES>\n<CONCLUSION>\nsome x. (Human(x) & Horse(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hoove(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hoove(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<PREMISES>\nall x. (Horse(x) -> Hoof(x))\nall x. (-Human(x) -> -Hoof(x))\n</PREMISES>\n<CONCLUSION>\nsome x. (Human(x) & Horse(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nall x. (Horse(x) -> Hooves(x))\nall x. (-Human(x) -> -Hooves(x))\n</PREMISES>\n<CONCLUSION>\nexists x. (Human(x) & Horse(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Horse(x) -> Hoof(x))\nall x. (-Human(x) -> -Hoof(x))\n</PREMISES>\n<CONCLUSION>\nsome x. (Human(x) & Horse(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Horse(x) -> Hoof(x))\nall x. (-Human(x) -> -Hoof(x))\n</PREMISES>\n<CONCLUSION>\nsome x. (Human(x) & Horse(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Horse(x) -> Hoof(x))\nall x. (-Human(x) -> -Hoof(x))\n</PREMISES>\n<CONCLUSION>\nsome x. (Human(x) & Horse(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<PREMISES>\nall x. (Horse(x) -> Hooves(x))\nall x. (-Human(x) -> -Hooves(x))\n</PREMISES>\n<CONCLUSION>\nsome x. (Human(x) & Horse(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Horse(x) -> Hoof(x))\nall x. (-Human(x) -> -Hoof(x))\n</PREMISES>\n<CONCLUSION>\nsome x. (Human(x) & Horse(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Horse(x) -> Hooves(x))\nall x. (-Human(x) -> -Hooves(x))\n</PREMISES>\n<CONCLUSION>\nsome x. (Human(x) & Horse(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hoove(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hoove(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: All horses have hooves.\nFOL: all x. (Horse(x) -> Hooves(x))\nTEXT: No humans have hooves.\nFOL: all x. (Human(x) -> -Hooves(x))\nTEXT: Some humans are horses.\nFOL: exists x. (Human(x) & Horse(x))\n</EVALUATE>",
    "<PREMISES>\nall x. (Horse(x) -> Hooves(x))\nall x. (-Human(x) -> -Hooves(x))\n</PREMISES>\n\n<CONCLUSION>\nexists x. (Human(x) & Horse(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Horse(x) -> Hoof(x))\nall x. (-Human(x) -> -Hoof(x))\n</PREMISES>\n<CONCLUSION>\nsome x. (Human(x) & Horse(x))\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 158,
  "responses": [
   [
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Susan)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\n</PREMISES>\n\n<CONCLUSION>\nSusan flies from LGA airport.\nFOL: -LGA(Susan)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Susan)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: Susan flies from LGA airport.\nFOL: -LGA(Susan)\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan(flightsTo(LGA))\nThe departure and arrival can not be the same airport.\nFOL: -SameAirport(flightsTo(LGA))\nJohn flies from LGA airport.\nFOL: John(flightsFrom(LGA))\n</PREMISES>\n<CONCLUSION>\nSusan flies from LGA airport.\nFOL: Susan(flightsFrom(LGA))\n</CONCLUSION>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan(LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Susan, Susan)\nTEXT: John flies from LGA airport.\nFOL: John(LGA)\n</PREMISES>\n<CONCLUSION>\nSusan flies from LGA airport.\nFOL: Susan(LGA)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan(LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Susan, Susan)\nTEXT: John flies from LGA airport.\nFOL: John(LGA)\nTEXT: Susan flies from LGA airport.\nFOL: Susan(LGA)\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -Departure(x, y) & Arrival(x, y) | -Arrival(x, y) & Departure(x, y)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\n</PREMISES>\n<CONCLUSION>\nSusan flies from LGA airport.\nFOL: Susan -> LGA\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -Departure(Susan, LGA) & -Arrival(Susan, LGA) | -Arrival(Susan, LGA) & Departure(Susan, LGA)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: Susan flies from LGA airport.\nFOL: -Departure(Susan, LGA) & -Arrival(Susan, LGA) | -Arrival(Susan, LGA) & Departure(Susan, LGA)\n</E",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan flies to LGA airport.\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Susan, LGA)\nTEXT: John flies from LGA airport.\nFOL: John flies from LGA airport.\n</PREMISES>\n<CONCLUSION>\nSusan flies from LGA airport.\nFOL: -SameAirport(Susan, LGA)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: LGA!= Departure\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\n</PREMISES>\n\n<CONCLUSION>\nSusan flies from LGA airport.\nFOL: Susan -> LGA\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: LGA!= Departure\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: Susan flies from LGA airport.\nFOL: Susan -> LGA\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan(flightsTo(LGA))\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(flightsTo(LGA), flightsFrom(LGA))\nTEXT: John flies from LGA airport.\nFOL: John(flightsFrom(LGA))\n</PREMISES>\n<CONCLUSION>\nSusan flies from LGA airport.\nFOL: Susan(flightsFrom(LGA))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan(flightsTo(LGA))\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(flightsTo(LGA), flightsFrom(LGA))\nTEXT: John flies from LGA airport.\nFOL: John(flightsFrom(LGA))\nTEXT: Susan flies from LGA airport.\nFOL: Susan(flightsFrom(LGA))\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\n</PREMISES>\n<CONCLUSION>\nSusan flies from LGA airport.\nFOL: Susan -> LGA\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: Susan flies from LGA airport.\nFOL: Susan -> LGA\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\n</PREMISES>\n\n<CONCLUSION>\nSusan flies from LGA airport.\nFOL: Susan -> LGA\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: Susan flies from LGA airport.\nFOL: Susan -> LGA\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan fliesTo(LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(departure, arrival)\nTEXT: John flies from LGA airport.\nFOL: John fliesFrom(LGA)\nTEXT: Susan flies from LGA airport.\nFOL: Susan fliesFrom(LGA)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan(LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Susan)\nTEXT: John flies from LGA airport.\nFOL: John(LGA)\n</PREMISES>\n<CONCLUSION>\nSusan flies from LGA airport.\nFOL: -Susan(LGA)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan(LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Susan)\nTEXT: John flies from LGA airport.\nFOL: John(LGA)\nTEXT: Susan flies from LGA airport.\nFOL: -Susan(LGA)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan fliesTo(LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Susan'sDeparture, Susan'sArrival)\nTEXT: John flies from LGA airport.\nFOL: John fliesFrom(LGA)\nTEXT: Susan flies from LGA airport.\nFOL: -Susan'sDeparture = LGA & Susan fliesTo(LGA)\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\n</PREMISES>\n\n<CONCLUSION>\nSusan flies from LGA airport.\nFOL: Susan -> LGA\n</CONCLUSION>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan(LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Susan)\nTEXT: John flies from LGA airport.\nFOL: John(LGA)\n</PREMISES>\n<CONCLUSION>\nSusan flies from LGA airport.\nFOL: Susan(LGA)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan(LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Susan)\nTEXT: John flies from LGA airport.\nFOL: John(LGA)\nTEXT: Susan flies from LGA airport.\nFOL: Susan(LGA)\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: Susan flies from LGA airport.\nFOL: -Susan -> LGA\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\n</PREMISES>\n<CONCLUSION>\nSusan flies from LGA airport.\nFOL: Susan -> LGA\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: Susan flies from LGA airport.\nFOL: Susan -> LGA\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\n</PREMISES>\n<CONCLUSION>\nSusan flies from LGA airport.\nFOL: -LGA(Susan) & LGA -> Susan\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: Susan flies from LGA airport.\nFOL: -LGA(Susan) & LGA -> Susan\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan flies to LGA airport.\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(departure, arrival)\nTEXT: John flies from LGA airport.\nFOL: John flies from LGA airport.\n</PREMISES>\n<CONCLUSION>\nSusan flies from LGA airport.\nFOL: -Susan flies to LGA airport & SameAirport(LGA, arrival) \n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan flies to LGA airport.\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(departure, arrival)\nTEXT: John flies from LGA airport.\nFOL: John flies from LGA airport.\nTEXT: Susan flies from LGA airport.\nFOL: -Susan flies to LGA airport & SameAirport(LGA, arrival)\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan FliesTo(LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Flight)\nTEXT: John flies from LGA airport.\nFOL: John FliesFrom(LGA)\n</PREMISES>\n\n<CONCLUSION>\nSusan flies from LGA airport.\nFOL: Susan FliesFrom(LGA)\n</CONCLUSION>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Susan)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\n</PREMISES>\n<CONCLUSION>\nSusan flies from LGA airport.\nFOL: Susan -> LGA\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Susan)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: Susan flies from LGA airport.\nFOL: Susan -> LGA\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan(LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John(LGA)\nTEXT: Susan flies from LGA airport.\nFOL: -Susan(LGA)\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(departure, arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\n</PREMISES>\n<CONCLUSION>\nSusan flies from LGA airport.\nFOL: Susan -> LGA\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(departure, arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: Susan flies from LGA airport.\nFOL: Susan -> LGA\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan(fliesTo(LGA))\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(departure, arrival)\nTEXT: John flies from LGA airport.\nFOL: John(fliesFrom(LGA))\nTEXT: Susan flies from LGA airport.\nFOL: -Susan(fliesTo(LGA))\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan fliesToLGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameDepartureAndArrival\nTEXT: John flies from LGA airport.\nFOL: John fliesFromLGA\n</PREMISES>\n<CONCLUSION>\nSusan flies from LGA airport.\nFOL: -Susan fliesToLGA\n</CONCLUSION>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\n</PREMISES>\n<CONCLUSION>\nSusan flies from LGA airport.\nFOL: Susan -> LGA\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: Susan flies from LGA airport.\nFOL: Susan -> LGA\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 159,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan(LGA)\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John(LGA)\nTEXT: John flies to LGA airport.\nFOL: -John(LGA)\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\n</PREMISES>\n<CONCLUSION>\nJohn flies to LGA airport.\nFOL: John -> LGA\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: John flies to LGA airport.\nFOL: John -> LGA\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: John flies to LGA airport.\nFOL: -FlyFrom(LGA) & FlyTo(LGA)\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: SusanFliesToLGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(SusanFliesToLGA)\nTEXT: John flies from LGA airport.\nFOL: JohnFliesFromLGA\n</PREMISES>\n<CONCLUSION>\nJohn flies to LGA airport.\nFOL: JohnFliesToLGA\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: SusanFliesToLGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(SusanFliesToLGA)\nTEXT: John flies from LGA airport.\nFOL: JohnFliesFromLGA\nTEXT: John flies to LGA airport.\nFOL: JohnFliesToLGA\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -Departure(LGA) & -Arrival(LGA)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: John flies to LGA airport.\nFOL: -John -> LGA\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: SusanFliesToLGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(SusanFliesToLGA)\nTEXT: John flies from LGA airport.\nFOL: JohnFliesFromLGA\n</PREMISES>\n<CONCLUSION>\nJohn flies to LGA airport.\nFOL: JohnFliesToLGA\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: SusanFliesToLGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(SusanFliesToLGA)\nTEXT: John flies from LGA airport.\nFOL: JohnFliesFromLGA\nTEXT: John flies to LGA airport.\nFOL: JohnFliesToLGA\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\n</PREMISES>\n\n<CONCLUSION>\nJohn flies to LGA airport.\nFOL: John -> LGA\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: John flies to LGA airport.\nFOL: John -> LGA\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -Departure(LGA) & -Arrival(LGA)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\n</PREMISES>\n<CONCLUSION>\nJohn flies to LGA airport.\nFOL: John -> LGA\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -Departure(LGA) & -Arrival(LGA)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: John flies to LGA airport.\nFOL: John -> LGA\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\n</PREMISES>\n\n<CONCLUSION>\nJohn flies to LGA airport.\nFOL: John -> LGA\n</CONCLUSION>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -Departure(Susan) & -Arrival(Susan)\nTEXT: John flies from LGA airport.\nFOL: LGA -> John\n</PREMISES>\n<CONCLUSION>\nJohn flies to LGA airport.\nFOL: LGA -> John\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -Departure(Susan) & -Arrival(Susan)\nTEXT: John flies from LGA airport.\nFOL: LGA -> John\nTEXT: John flies to LGA airport.\nFOL: LGA -> John\n</EVALUATE>"
   ],
   [
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Susan)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: John flies to LGA airport.\nFOL: -From(LGA)\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan(fliesTo(LGA))\nThe departure and arrival can not be the same airport.\nFOL: -SameAirport(departure, arrival)\nJohn flies from LGA airport.\nFOL: John(fliesFrom(LGA))\n</PREMISES>\n<CONCLUSION>\nJohn flies to LGA airport.\nFOL: John(fliesTo(LGA))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan(fliesTo(LGA))\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(departure, arrival)\nTEXT: John flies from LGA airport.\nFOL: John(fliesFrom(LGA))\nTEXT: John flies to LGA airport.\nFOL: John(fliesTo(LGA))\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan(fliesTo(LGA))\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(fliesTo(LGA))\nTEXT: John flies from LGA airport.\nFOL: John(fliesFrom(LGA))\n</PREMISES>\n<CONCLUSION>\nJohn flies to LGA airport.\nFOL: John(fliesTo(LGA))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan(fliesTo(LGA))\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(fliesTo(LGA))\nTEXT: John flies from LGA airport.\nFOL: John(fliesFrom(LGA))\nTEXT: John flies to LGA airport.\nFOL: John(fliesTo(LGA))\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -Departure(x) & -Arrival(x) & x = y -> x = y\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\n</PREMISES>\n<CONCLUSION>\nJohn flies to LGA airport.\nFOL: John -> LGA\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -Departure(x) & -Arrival(x) & x = y -> x = y\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: John flies to LGA airport.\nFOL: John -> LGA\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(departure, arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: John flies to LGA airport.\nFOL: -John -> SameAirport(departure, arrival)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\n</PREMISES>\n\n<CONCLUSION>\nJohn flies to LGA airport.\nFOL: John -> LGA\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: John flies to LGA airport.\nFOL: John -> LGA\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan flies to LGA airport.\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(departure, arrival)\nTEXT: John flies from LGA airport.\nFOL: John flies from LGA airport.\n</PREMISES>\n<CONCLUSION>\nJohn flies to LGA airport.\nFOL: John flies to LGA airport.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan flies to LGA airport.\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(departure, arrival)\nTEXT: John flies from LGA airport.\nFOL: John flies from LGA airport.\nTEXT: John flies to LGA airport.\nFOL: John flies to LGA airport.\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\n</PREMISES>\n<CONCLUSION>\nJohn flies to LGA airport.\nFOL: John -> LGA\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: John flies to LGA airport.\nFOL: John -> LGA\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(departure, arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\n</PREMISES>\n<CONCLUSION>\nJohn flies to LGA airport.\nFOL: John -> LGA\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(departure, arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: John flies to LGA airport.\nFOL: John -> LGA\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan fliesToLGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(departure, arrival)\nTEXT: John flies from LGA airport.\nFOL: John fliesFromLGA\nTEXT: John flies to LGA airport.\nFOL: John fliesToLGA\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Susan)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\n</PREMISES>\n\n<CONCLUSION>\nJohn flies to LGA airport.\nFOL: John -> LGA\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Susan)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: John flies to LGA airport.\nFOL: John -> LGA\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\n</PREMISES>\n<CONCLUSION>\nJohn flies to LGA airport.\nFOL: John -> LGA\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: John flies to LGA airport.\nFOL: John -> LGA\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan(fliesTo(LGA))\nThe departure and arrival can not be the same airport.\nFOL: -SameAirport(departure, arrival)\nJohn flies from LGA airport.\nFOL: John(fliesFrom(LGA))\n</PREMISES>\n\n<CONCLUSION>\nJohn flies to LGA airport.\nFOL: John(fliesTo(LGA))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(departure, arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: John flies to LGA airport.\nFOL: -John -> LGA\n</EVALUATE>",
    "<PREMISES>\nSusan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\n</PREMISES>\n<CONCLUSION>\nJohn flies to LGA airport.\nFOL: John -> LGA\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Susan flies to LGA airport.\nFOL: Susan -> LGA\nTEXT: The departure and arrival can not be the same airport.\nFOL: -SameAirport(Departure, Arrival)\nTEXT: John flies from LGA airport.\nFOL: John -> LGA\nTEXT: John flies to LGA airport.\nFOL: John -> LGA\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 160,
  "responses": [
   [
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is a grumpy person.\nFOL: -Grumpy(tom) & MeanToAnimals(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is a grumpy person.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: -Grumpy(tom) & MeanToAnimals(tom)\n</EVALUATE>",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (-Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> AnimalLover(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n-Grumpy(Tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is a grumpy person.\nFOL: Grumpy(tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is a grumpy person.\nFOL: Grumpy(tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is a grumpy person.\nFOL: Grumpy(tom)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is a grumpy person.\nFOL: Grumpy(tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is a grumpy person.\nFOL: -Grumpy(tom) & MeanToAnimals(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is a grumpy person.\nFOL: -Grumpy(tom) & MeanToAnimals(tom)\n</CONCLUSION>",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (-Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> AnimalLover(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n-Grumpy(Tom)\n</CONCLUSION>",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (-Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> AnimalLover(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n-Grumpy(Tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is a grumpy person.\nFOL: Grumpy(tom)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is a grumpy person.\nFOL: -Grumpy(tom) & MeanToAnimals(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is a grumpy person.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is a grumpy person.\nFOL: -Grumpy(tom) & MeanToAnimals(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is a grumpy person.\nFOL: -Grumpy(tom) & MeanToAnimals(tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is a grumpy person.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceTo",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (-Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> AnimalLover(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n-Grumpy(Tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is a grumpy person.\nFOL: Grumpy(tom)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is a grumpy person.\nFOL: Grumpy(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is a grumpy person.\nFOL: Grumpy(tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is a grumpy person.\nFOL: -Grumpy(tom) | (Grumpy(tom) & MeanToAnimals(tom))\n</PREMISES>\n\n<CONCLUSION>\nTom is a grumpy person.\nFOL: -Grumpy(tom) | (Grumpy(tom) & MeanToAnimals(tom))\n</CONCLUSION>",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (-Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> AnimalLover(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n-Grumpy(Tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is a grumpy person.\nFOL: -Grumpy(tom) & MeanToAnimals(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is a grumpy person.\nFOL: -Grumpy(tom) & MeanToAnimals(tom)\n</CONCLUSION>",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (-Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> LovesAnimals(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n-Grumpy(Tom)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is a grumpy person.\nFOL: -Grumpy(tom) & -NiceToAnimals(tom) & -AnimalLover(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is a grumpy person.\nFOL: -Grumpy(tom)\n</CONCLUSION>",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> AnimalLover(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n-Grumpy(Tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is a grumpy person.\nFOL: -Grumpy(tom) & MeanToAnimals(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is a grumpy person.\nFOL: -Grumpy(tom) & MeanToAnimals(tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is a grumpy person.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceTo",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is a grumpy person.\nFOL: -Grumpy(tom) & MeanToAnimals(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is a grumpy person.\nFOL: -Grumpy(tom) & MeanToAnimals(tom)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 161,
  "responses": [
   [
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</CONCLUSION>",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (-Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> AnimalLover(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n-Grumpy(Tom) & -MeanToAnimals(Tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</CONCLUSION>",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (-Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> AnimalLover(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n-Grumpy(Tom) & -MeanToAnimals(Tom)\n</CONCLUSION>",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (-Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> AnimalLover(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n-Grumpy(Tom) & -MeanToAnimals(Tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</PREMISES>\n\n<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</CONCLUSION>",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (-Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> AnimalLover(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n-Grumpy(Tom) & -MeanToAnimals(Tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</CONCLUSION>",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (-Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> AnimalLover(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n-Grumpy(Tom) & -MeanToAnimals(Tom)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (-Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> AnimalLover(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n-Grumpy(Tom) & -MeanToAnimals(Tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\nTEXT: Tom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</PREMISES>\n\n<EVALUATE>\nTEXT: No one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n\n<CONCLUSION>\nTom is not a grumpy person and mean to animals.\nFOL: -Grumpy(tom) & -MeanToAnimals(tom)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 162,
  "responses": [
   [
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n<CONCLUSION>\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\n</CONCLUSION>",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> LovesAnimals(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n(-Grumpy(Tom) & MeanToAnimals(Tom)) -> (-Grumpy(Tom) & AnimalLover(Tom))\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n\n<CONCLUSION>\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-Grumpy(tom) & -MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\n</CONCLUSION>",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> LoveAnimals(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n(-Grumpy(Tom) & -MeanToAnimals(Tom)) -> (-Grumpy(Tom) & AnimalLover(Tom))\n</CONCLUSION>",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> AnimalLover(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n(-Grumpy(Tom) & MeanToAnimals(Tom)) -> (-Grumpy(Tom) & AnimalLover(Tom))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (-Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> AnimalLover(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n(-Grumpy(Tom) & MeanToAnimals(Tom)) -> (-Grumpy(Tom) & AnimalLover(Tom))\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n\n<CONCLUSION>\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-Grumpy(tom) & -MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\n</CONCLUSION>",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> LovesAnimals(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n-Grumpy(Tom) & -MeanToAnimals(Tom) -> (-Grumpy(Tom) & AnimalLover(Tom))\n</CONCLUSION>",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> AnimalLover(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\nall x. (Grumpy(x) & -MeanToAnimals(x) -> -Grumpy(x) & -AnimalLover(x))\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n\n<CONCLUSION>\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -(Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n\n<CONCLUSION>\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-Grumpy(tom) & -MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\n</CONCLUSION>",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (-Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> AnimalLover(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n(-Grumpy(Tom) & -MeanToAnimals(Tom)) -> (-Grumpy(Tom) & AnimalLover(Tom))\n</CONCLUSION>",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (-Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> LovesAnimals(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n(-Grumpy(Tom) & -MeanToAnimals(Tom)) -> (-Grumpy(Tom) & AnimalLover(Tom))\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n<CONCLUSION>\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-Grumpy(tom) & -MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (-Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n<CONCLUSION>\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: (-Grumpy(tom) & -MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n\n<CONCLUSION>\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -(Grumpy(tom) & MeanToAnimals(tom)) -> (-Grumpy(tom) & -AnimalLover(tom))\n</CONCLUSION>",
    "<PREMISES>\nall x. (-NiceToAnimals(x) -> MeanToAnimals(x))\nexists x. (-Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> AnimalLover(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n(-Grumpy(Tom) & MeanToAnimals(Tom)) -> (-Grumpy(Tom) & AnimalLover(Tom))\n</CONCLUSION>",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (-Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> LovesAnimals(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\nall x. (-Grumpy(x) & MeanToAnimals(x) -> (-Grumpy(x) & -AnimalLover(x)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> LoveAnimals(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n(-Grumpy(Tom) & MeanToAnimals(Tom)) -> (-Grumpy(Tom) & AnimalLover(Tom))\n</CONCLUSION>",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> AnimalLover(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n-Grumpy(Tom) & -MeanToAnimals(Tom) -> (-Grumpy(Tom) & -Grumpy(Tom) | -AnimalLover(Tom) & -AnimalLover(Tom))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> LovesAnimals(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n-Grumpy(Tom) & -MeanToAnimals(Tom) -> (-Grumpy(Tom) & -AnimalLover(Tom))\n</CONCLUSION>",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> AnimalLover(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n-Grumpy(Tom) & -MeanToAnimals(Tom) -> (-Grumpy(Tom) & -AnimalLover(Tom))\n</CONCLUSION>",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (-Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> LoveAnimals(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n(-Grumpy(Tom) & -MeanToAnimals(Tom)) -> (-Grumpy(Tom) | AnimalLover(Tom))\n</CONCLUSION>",
    "<PREMISES>\nall x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nexists x. (Grumpy(x) & MeanToAnimals(x))\nall x. (AnimalLover(x) -> NiceToAnimals(x))\nall x. (OwnsPet(x) -> AnimalLover(x))\nTom is a pet owner.\n</PREMISES>\n<CONCLUSION>\n(-Grumpy(Tom) & MeanToAnimals(Tom)) -> (-Grumpy(Tom) & AnimalLover(Tom))\n</CONCLUSION>",
    "<PREMISES>\nNo one nice to animals is mean to animals.\nFOL: all x. (NiceToAnimals(x) -> -MeanToAnimals(x))\nTEXT: Some grumpy people are mean to animals.\nFOL: exists x. (Grumpy(x) & MeanToAnimals(x))\nTEXT: All animal lovers are nice to animals.\nFOL: all x. (AnimalLover(x) -> NiceToAnimals(x))\nTEXT: If someone owns a pet, then they love animals.\nFOL: all x. (OwnsPet(x) -> AnimalLover(x))\nTEXT: Tom is a pet owner.\nFOL: OwnsPet(tom)\n</PREMISES>\n\n<CONCLUSION>\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\nFOL: -(Grumpy(tom) & MeanToAnimals(tom)) -> (Grumpy(tom) | -AnimalLover(tom))\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 163,
  "responses": [
   [
    "<PREMISES>\nall x. (NotPodcast(x) -> NotNovel(x))\n[BG]\nall x. (BornInAmericanCity(x) -> American(x))\nall x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(x, y))\nDaniShapiro is an American writer.\nFamilyHistory is written by DaniShapiro.\nFamilyHistory is a novel written in 2003.\nDaniShapiro created a podcast called FamilySecrets.\n[BG]\nBoston is an American city.\n</PREMISES>\n<CONCLUSION>\nDaniShapiro is a novel writer.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: all x. (NotPodcast(x) -> NotNovel(x))\nTEXT: [BG] If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: [BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. ((Novel(x) & WrittenBy(x, y)) -> NovelWriter(x, y))\nTEXT: Dani Shapiro is an American",
    "<PREMISES>\nall x. (NotNovel(x) -> -American(x))\n[BG]\nall x. (AmericanCity(x) -> American(x))\nall x. (Novel(x) & Person(x) & -NovelWriter(x) -> American(x))\nDaniShapiro(isAmericanWriter)\nFamilyHistory(isWrittenBy(DaniShapiro))\nFamilyHistory(isNovel & isWrittenIn(2003))\nDaniShapiro(createdPodcast(FamilySecrets))\n[BG]\nBoston(isAmericanCity)\n</PREMISES>\n<CONCLUSION>\nDaniShapiro(isNovelWriter)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Not(Podcast(x)) -> Not(Novel(x)))\n[BG]\nall x. (BornIn(x, AmericanCity) -> American(x))\n[BG]\nall x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(x, y))\nDaniShapiro(isAmericanWriter)\nFamilyHistory(isWrittenBy(DaniShapiro))\nFamilyHistory(isNovelWritten(2003))\nDaniShapiro(isPodcastCreator)\n[BG]\nBoston(isAmericanCity)\n</PREMISES>\n<CONCLUSION>\nDaniShapiro(isNovelWriter)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Podcast(x) -> -Novel(x))\n[BG] all x. (BornIn(x, AmericanCity) -> American(x))\n[BG] all x. (Novel(x) & Person(x) -> NovelWriter(x))\nDaniShapiro is an American writer.\nFamilyHistory is written by DaniShapiro.\nFamilyHistory is a novel written in 2003.\nDaniShapiro created a podcast called FamilySecrets.\n[BG] Boston is an American city.\n</PREMISES>\n<CONCLUSION>\nDaniShapiro is a novel writer.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornIn(x, AmericanCity) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & Person(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(writer(DaniShapiro))\n",
    "<PREMISES>\nA podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n[BG]\nIf a person is born in American City, the person is American.\nFOL: all x. (BornIn(x, AmericanCity) -> American(x))\nIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(x, y))\nDani Shapiro is an American writer.\nFOL: American(Shapiro) & NovelWriter(Shapiro, DaniShapiro)\nFamily History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, DaniShapiro)\nFamily History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nDani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(FamilySecrets) & CreatedBy(FamilySecrets, Shapiro)\n[BG]\nBoston is an American city.\nFOL: AmericanCity(Boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro is a novel writer.\nFOL: NovelWriter("
   ],
   [
    "<PREMISES>\nall x. (NotNovel(x) -> NotAmerican(x))\n[BG]\nall x. (American(x) -> American(x))\n[BG]\nall x. (Novel(x) & Person(x) & NovelWriter(x) -> Person(x))\nDaniShapiro is American.\nFamilyHistory is written by DaniShapiro.\nFamilyHistory is a novel written in 2003.\nDaniShapiro created a podcast called FamilySecrets.\n[BG]\nBoston is American.\n</PREMISES>\n<CONCLUSION>\nDaniShapiro is a novel writer.\n</CONCLUSION>",
    "<PREMISES>\nall x. (NotNovel(x) -> NotBook(x))\n[bg] all x. (BornInAmericanCity(x) -> American(x))\n[bg] all x. (Novel(x) & Person(x) & Book(x) -> NovelWriter(x))\nDaniShapiro is an American writer.\nFamilyHistory is written by DaniShapiro.\nFamilyHistory is a novel written in 2003.\nDaniShapiro created a podcast called FamilySecrets.\n[bg] Boston is an American city.\n</PREMISES>\n<CONCLUSION>\nDaniShapiro is a novel writer.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: all x. (NotNovel(x) -> NotBook(x))\nTEXT: If a person is born in American City, the person is American.\nFOL: [bg] all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: [bg] all x. (Novel(x) & Person(x) & Book(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer",
    "<PREMISES>\nA podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n[BG]\nIf a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nDani Shapiro is an American writer.\nFOL: NovelWriter(daniShapiro)\nFamily History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nFamily History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nDani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets, daniShapiro)\n[BG]\nBoston is an American city.\nFOL: AmericanCity(boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</EVALUATE>",
    "<PREMISES>\nall x. (NotNovel(x) & AmericanCity(x) -> American(x))\nall x. (Novel(x) & Person(x) & NovelWriter(x) -> Person(x))\nDaniShapiro is an American writer.\nDaniShapiro created a podcast called Family Secrets.\nFamilyHistory is written by DaniShapiro.\nFamilyHistory is a novel written in 2003.\nDaniShapiro is a novel writer.\n</PREMISES>\n<CONCLUSION>\nDaniShapiro is a novel writer.\n</CONCLUSION>",
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(writer(DaniShapiro)) & NovelWriter(writer(DaniShapiro))\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, DaniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(2003, FamilyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(FamilySecrets, DaniShapiro)\nTEXT: Boston is an American city.\nFOL: American(Boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro is a novel writer.\nFOL: NovelWriter(writer(DaniShapiro))\n</EVALUATE"
   ],
   [
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornIn(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(shapiro) & NovelWriter(shapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, shapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & Year(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets, shapiro)\nTEXT: Boston is an American city.\nFOL: American(Boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro is a novel writer.\nFOL: NovelWriter(shapiro)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL:",
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInCity(x, AmericanCity) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(x, y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(writer(DaniShapiro)) & NovelWriter(DaniShapiro, writer(DaniShapiro))\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, DaniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(FamilySecrets, DaniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(Boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro is a novel writer.\nFOL: NovelWriter",
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornIn(x) & AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & Person(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: AmericanWriter(DaniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: Author(FamilyHistory, DaniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(DaniShapiro, FamilySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(Boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro is a novel writer.\nFOL: NovelWriter(DaniShapiro)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -",
    "<PREMISES>\nall x. (NotNovel(x) -> NotPodcast(x))\n[BG]\nall x. (BornInAmericanCity(x) -> American(x))\nall x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nDaniShapiro is an American writer.\nFamilyHistory is written by Dani Shapiro.\nFamilyHistory is a novel written in 2003.\nDaniShapiro created a podcast called Family Secrets.\n[BG]\nBoston is an American city.\n</PREMISES>\n<CONCLUSION>\nDaniShapiro is a novel writer.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: all x. (NotNovel(x) -> NotPodcast(x))\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(shapiro)\nTEXT: FamilyHistory is written by",
    "<PREMISES>\nA podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n[BG]\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornIn(x, AmericanCity) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(x, y))\nDani Shapiro is an American writer.\nFOL: American(Shapiro) & NovelWriter(Shapiro, DaniShapiro)\nFamily History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, DaniShapiro)\nFamily History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nDani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(FamilySecrets) & Creator(FamilySecrets, Shapiro)\n[BG]\nTEXT: Boston is an American city.\nFOL: AmericanCity(Boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro is a novel writer.\nF"
   ],
   [
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornIn(x) & AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & Person(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: AmericanWriter(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: Author(FamilyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(daniShapiro, FamilySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL:",
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornIn(x) & AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & Person(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: AmericanWriter(DaniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: Author(FamilyHistory, DaniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(DaniShapiro, FamilySecrets)\nTEXT: Boston is an American city.\nFOL: AmericanCity(Boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro is a novel writer.\nFOL: NovelWriter(DaniShapiro)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -",
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(Shapiro) & NovelWriter(Shapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, Shapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenInYear(FamilyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(FamilySecrets, Shapiro)\nTEXT: Boston is an American city.\nFOL: American(Boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro is a novel writer.\nFOL: NovelWriter(Shapiro)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A podcast is not a novel",
    "<PREMISES>\nall x. (Podcast(x) -> -Novel(x))\n[BG]\nall x. (BornInCity(x, \"American City\") -> American(x))\n[BG]\nall x. (Novel(x) & Person(x) & NovelWriter(x) -> NovelWriter(x))\nDaniShapiro(isAmericanWriter)\nFamilyHistory(isWrittenBy(DaniShapiro))\nFamilyHistory(isNovel)\nisNovelYear(FamilyHistory, 2003)\nDaniShapiro(isPodcaster)\n[BG]\nBoston(isAmericanCity)\n</PREMISES>\n<CONCLUSION>\nDaniShapiro(isNovelWriter)\n</CONCLUSION>",
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornIn(x, AmericanCity) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(x, y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(Shapiro) & NovelWriter(Shapiro, DaniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, DaniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & Year(FamilyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(FamilySecrets, DaniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(Boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro is a novel writer.\nFOL: NovelWriter(Shapiro, DaniShapiro)\n"
   ],
   [
    "<PREMISES>\nall x. (Podcast(x) -> -Novel(x))\n[BG] all x. (BornInCity(x) -> American(x))\n[BG] all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nDaniShapiro is an American writer.\nFOL: American(DaniShapiro) & NovelWriter(DaniShapiro)\nFamilyHistory is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, DaniShapiro)\nFamilyHistory is a novel written in 2003.\nFOL: Novel(FamilyHistory) & Year(FamilyHistory, 2003)\nDaniShapiro created a podcast called Family Secrets.\nFOL: Podcast(FamilySecrets, DaniShapiro)\n[BG] Boston is an American city.\nFOL: American(Boston)\n</PREMISES>\n<CONCLUSION>\nDaniShapiro is a novel writer.\nFOL: NovelWriter(DaniShapiro)\n</CONCLUSION>",
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInCity(x, AmericanCity) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(writer(DaniShapiro)) & NovelWriter(writer(DaniShapiro))\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, DaniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets, DaniShapiro)\nTEXT: Boston is an American city.\nFOL: American(Boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro is a novel writer.\nFOL: NovelWriter(writer(DaniShapiro))\n</CON",
    "<PREMISES>\nA podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\nIf a person is born in American City, the person is American.\nFOL: all x. (BornIn(x) & AmericanCity(x) -> American(x))\nIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nDani Shapiro is an American writer.\nFOL: NovelWriter(daniShapiro)\nFamily History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nFamily History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nDani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets) & CreatedBy(daniShapiro, familySecrets)\nIf a person is born in American City, the person is American.\nFOL: BornIn(daniShapiro) & AmericanCity(daniShapiro) -> American(daniShapiro)\nA podcast is not a novel.\nFOL: -Pod",
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornIn(x) & AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: AmericanWriter(DaniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, DaniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(FamilySecrets, DaniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(Boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro is a novel writer.\nFOL: NovelWriter(DaniShapiro)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL",
    "<PREMISES>\nA podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n[BG]\nIf a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nDani Shapiro is an American writer.\nFOL: NovelWriter(daniShapiro) & American(daniShapiro)\nFamily History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nFamily History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nDani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets) & CreatedBy(daniShapiro, familySecrets)\n[BG]\nBoston is an American city.\nFOL: American(Boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro is a novel writer.\nFOL: NovelWriter(daniShapiro)\n</E"
   ]
  ]
 },
 {
  "index": 164,
  "responses": [
   [
    "<PREMISES>\nall x. (NotPodcast(x) -> NotNovel(x))\n[BG] all x. (BornInAmericanCity(x) -> American(x))\n[BG] all x. (Novel(x) & Person(x) & NovelWriter(x) -> NovelWriter(x))\nDaniShapiro is American.\nFamilyHistory is written by DaniShapiro.\nFamilyHistory is a novel written in 2003.\nDaniShapiro created a podcast called FamilySecrets.\n[BG] Boston is AmericanCity\n</PREMISES>\n<CONCLUSION>\nFamilySecrets is novel\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\nTEXT: [BG] If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: [BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & Person(x) & NovelWriter(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is American.\nFOL:",
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornIn(x) & AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: AmericanWriter(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\n</PREMISES>\n<CONCLUSION>\nFamily Secrets is a novel.\nFOL: Novel(familySecrets)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A podcast",
    "<PREMISES>\nA podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n[BG]\nIf a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nDani Shapiro is an American writer.\nFOL: American(writer(DaniShapiro))\nFamily History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, DaniShapiro)\nFamily History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(2003, FamilyHistory)\nDani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(FamilySecrets) & Creator(DaniShapiro, FamilySecrets)\n[BG]\nBoston is an American city.\nFOL: American(Boston)\n</PREMISES>\n<CONCLUSION>\nFamily Secrets is a novel.\nFOL: -Podcast(FamilySecrets) & Novel(FamilySecrets)\n</EVAL",
    "<PREMISES>\nall x. (NotNovel(x) -> NotBook(x))\n[BG]\nall x. (BornInAmericanCity(x) -> American(x))\nall x. (Book(x) & NovelWriter(x) -> NovelWriter(x))\nDaniShapiro is an American writer.\nFamilyHistory is written by DaniShapiro.\nFamilyHistory is a novel written in 2003.\nDaniShapiro created a podcast called FamilySecrets.\n[BG]\nBoston is an American city.\n</PREMISES>\n<CONCLUSION>\nFamilyHistory is a novel.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: all x. (NotNovel(x) -> NotBook(x))\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Book(x) & NovelWriter(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: AmericanShapiro\nTEXT: FamilyHistory is written by Dani Shapiro.\nF",
    "<PREMISES>\nA podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n[BG] If a person is born in American City, the person is American.\nFOL: all x. (BornIn(x, AmericanCity) -> American(x))\n[BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(x, y))\nDani Shapiro is an American writer.\nFOL: American(Shapiro) & NovelWriter(Shapiro, DaniShapiro)\nFamily History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, DaniShapiro)\nFamily History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & Year(FamilyHistory, 2003)\nDani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(FamilySecrets) & Creator(FamilySecrets, Shapiro)\n[BG] Boston is an American city.\nFOL: AmericanCity(Boston)\n</PREMISES>\n<CONCLUSION>\nFamily Secrets is a novel.\nFOL: Podcast(Family"
   ],
   [
    "<PREMISES>\nall x. (NotNovel(x) & AmericanCity(x) -> American(x))\nall x. (Novel(x) & Person(x) -> NovelWriter(x))\nDaniShapiro is AmericanWriter.\nFamilyHistory is written by DaniShapiro.\nFamilyHistory is a Novel written in 2003.\nDaniShapiro created a podcast called FamilySecrets.\nBoston is AmericanCity.\n</PREMISES>\n<CONCLUSION>\nFamilySecrets is a Novel.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: all x. (NotNovel(x))\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & Person(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro is AmericanWriter.\nTEXT: Family History is written by Dani Shapiro.\nFOL: FamilyHistory is written by DaniShapiro.\nTEXT: Family History is a novel written in ",
    "<PREMISES>\nall x. (NotNovel(x) -> NotBook(x))\n[BG] all x. (BornInAmericanCity(x) -> American(x))\n[BG] all x. (Book(x) & Novel(x) & Person(x) -> NovelWriter(x))\nDani Shapiro is an American writer.\nFOL: AmericanWriter(daniShapiro)\nFamily History is written by Dani Shapiro.\nFOL: Person(daniShapiro)\nFamily History is a novel written in 2003.\nFOL: Book(FamilyHistory) & Novel(FamilyHistory) & Date(FamilyHistory, 2003)\nDani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(FamilySecrets)\n[BG] Boston is an American city.\nFOL: AmericanCity(Boston)\n</PREMISES>\n<CONCLUSION>\nFamily Secrets is a novel.\nFOL: Novel(FamilySecrets)\n</CONCLUSION>",
    "<PREMISES>\nA podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n[BG] If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\n[BG] If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nDani Shapiro is an American writer.\nFOL: American(writer(DaniShapiro))\nFamily History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, DaniShapiro)\nFamily History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(2003, FamilyHistory)\nDani Shapiro created a podcast called Family Secrets.\nFOL: CreatedPodcast(FamilySecrets, DaniShapiro)\n[BG] Boston is an American city.\nFOL: American(Boston)\n</PREMISES>\n<CONCLUSION>\nFamily Secrets is a novel.\nFOL: -Podcast(FamilySecrets) & Novel(FamilySecrets)\n</EVALUATE",
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInCity(x) & AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: AmericanWriter(DaniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, DaniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(FamilySecrets, DaniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(Boston)\n</PREMISES>\n<CONCLUSION>\nFamily Secrets is a novel.\nFOL: -Novel(podcast) & FamilySecrets = podcast & -Novel(FamilySecrets) & FamilySecrets = Dani",
    "<PREMISES>\nall x. (NotNovel(x) -> NotPodcast(x))\n[BG]\nall x. (BornInAmericanCity(x) -> American(x))\nall x. (Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\nDaniShapiro is American.\nFamilyHistory is written by DaniShapiro.\nFamilyHistory is novel.\nDaniShapiro created podcast FamilySecrets.\n[BG]\nBoston is AmericanCity\n</PREMISES>\n<CONCLUSION>\nFamilySecrets is novel.\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nA podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n[BG]\nIf a person is born in American City, the person is American.\nFOL: all x. (BornInCity(x) & AmericanCity(x) -> American(x))\nIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nDani Shapiro is an American writer.\nFOL: AmericanWriter(DaniShapiro)\nFamily History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, DaniShapiro)\nFamily History is a novel written in 2003.\nFOL: Novel(FamilyHistory, 2003)\nDani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(FamilySecrets, DaniShapiro)\n[BG]\nBoston is an American city.\nFOL: AmericanCity(Boston)\n</PREMISES>\n<CONCLUSION>\nFamily Secrets is a novel.\nFOL: -Podcast(FamilySecrets) & Novel(FamilySecrets)\n</EVALUATE>",
    "<PREMISES>\nall x. (Podcast(x) -> -Novel(x))\n[bg] all x. (BornInAmericanCity(x) -> American(x))\n[bg] all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nDaniShapiro is an American writer.\nFamilyHistory is written by DaniShapiro.\nFamilyHistory is a novel written in 2003.\nDaniShapiro created a podcast called FamilySecrets.\n[bg] Boston is an American city.\n</PREMISES>\n<CONCLUSION>\nFamilySecrets is a novel.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\nTEXT: If a person is born in American City, the person is American.\nFOL: [bg] all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: [bg] all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: AmericanShapiro",
    "<PREMISES>\nall x. (Podcast(x) -> -Novel(x))\n[BG]\nall x. (BornInCity(x, AmericanCity) -> American(x))\nall x. (Novel(x) & Person(x) & NovelWriter(x) -> NovelWriter(x))\nDaniShapiro is an American writer.\nFamilyHistory is written by DaniShapiro.\nFamilyHistory is a novel written in 2003.\nDaniShapiro created a podcast called FamilySecrets.\n[BG]\nBoston is an American city.\n</PREMISES>\n<CONCLUSION>\nFamilyHistory is a novel.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInCity(x, AmericanCity) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & Person(x) & NovelWriter(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: American",
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nIf a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nDani Shapiro is an American writer.\nFOL: American(shapiro) & NovelWriter(shapiro)\nFamily History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, shapiro)\nFamily History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nDani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets) & CreatedBy(shapiro, familySecrets)\nBoston is an American city.\nFOL: AmericanCity(boston)\n</PREMISES>\n<CONCLUSION>\nFamily Secrets is a novel.\nFOL: Novel(familySecrets)\n</EVALUATE>",
    "<PREMISES>\nall x. (NotNovel(x) & AmericanCity(x) -> American(x))\nall x. (Novel(x) & Person(x) -> NovelWriter(x))\nDaniShapiro is AmericanWriter.\nFamilyHistory is writtenBy(DaniShapiro).\nFamilyHistory isNovel & Novel(FamilyHistory) & NovelYear(FamilyHistory, 2003).\nDaniShapiro createdPodcast(FamilySecrets).\nBoston is AmericanCity.\n</PREMISES>\n<CONCLUSION>\nFamilySecrets isNovel.\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (NotNovel(x) -> NotAmerican(x))\nIf x is American then x is American.\nIf x is novel and x is written by y then y is novel writer.\nDani Shapiro is American writer.\nFamily History is written by Dani Shapiro.\nFamily History is novel and written in 2003.\nDani Shapiro created a podcast called Family Secrets.\nBoston is American\n</PREMISES>\n<CONCLUSION>\nFamilyHistory is novel\n</CONCLUSION>",
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(shapiro) & NovelWriter(shapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, shapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets, shapiro)\nTEXT: Boston is an American city.\nFOL: American(boston)\n</PREMISES>\n<CONCLUSION>\nFamily Secrets is a podcast.\nFOL: Podcast(familySecrets)\nTEXT: Family Secrets is not a novel.\nFOL: -Novel(familySecrets",
    "<PREMISES>\nall x. (NotNovel(x) -> NotPodcast(x))\n[BG]\nall x. (BornInAmericanCity(x) -> American(x))\n[BG]\nall x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nDaniShapiro is an American writer.\nFamilyHistory is written by Dani Shapiro.\nFamilyHistory is a novel written in 2003.\nDaniShapiro created a podcast called FamilySecrets.\n[BG]\nBoston is an American city.\n</PREMISES>\n<CONCLUSION>\nFamilySecrets is a novel.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: all x. (NotNovel(x) -> NotPodcast(x))\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: AmericanShapiro\nTEXT: FamilyHistory",
    "<PREMISES>\nA podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornIn(x) & AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: AmericanWriter(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\n</PREMISES>\n<CONCLUSION>\nFamily Secrets is a novel.\nFOL: Podcast(familySecrets) & Novel(familySecret",
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(writer(daniShapiro)) & NovelWriter(writer(daniShapiro))\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: American(boston)\n</PREMISES>\n<CONCLUSION>\nFamily Secrets is a novel.\nFOL: -Novel(podcast) & FamilySecrets = podcast"
   ],
   [
    "<PREMISES>\nA podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n[BG]\nIf a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nDani Shapiro is an American writer.\nFOL: American(writtenBy(daniShapiro))\nFamily History is written by Dani Shapiro.\nFOL: writtenBy(familyHistory) = writtenBy(daniShapiro)\nFamily History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nDani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets) & createdBy(daniShapiro, familySecrets)\n[BG]\nBoston is an American city.\nFOL: American(boston)\n</PREMISES>\n<CONCLUSION>\nFamily Secrets is a novel.\nFOL: Podcast(familySecrets) & Novel(familySecrets",
    "<PREMISES>\nall x. (Podcast(x) -> -Novel(x))\n[BG]\nall x. (BornInCity(x, 'AmericanCity') -> American(x))\nall x. (Novel(x) & Person(x) -> NovelWriter(x))\nDaniShapiro is American.\nFamilyHistory is written by DaniShapiro.\nFamilyHistory is novel & writtenInYear(FamilyHistory, 2003).\nDaniShapiro created a podcast called FamilySecrets.\n[BG]\nBoston is AmericanCity.\n</PREMISES>\n<CONCLUSION>\nFamilySecrets is novel.\n</CONCLUSION>",
    "<PREMISES>\nA podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\n[BG]\nIf a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nDani Shapiro is an American writer.\nFOL: American(writer(DaniShapiro))\nFamily History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, DaniShapiro)\nFamily History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(2003, FamilyHistory)\nDani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(FamilySecrets) & CreatedBy(DaniShapiro, FamilySecrets)\n[BG]\nBoston is an American city.\nFOL: American(Boston)\n</PREMISES>\n<CONCLUSION>\nFamily Secrets is a novel.\nFOL: Novel(FamilySecrets)\n</EVALUATE>",
    "<PREMISES>\nall x. (Podcast(x) -> -Novel(x))\n[BG]\nall x. (BornIn(x) -> American(x))\nall x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(x, y))\nDaniShapiro is an American writer.\nFamilyHistory is written by DaniShapiro.\nFamilyHistory is a novel written in 2003.\nDaniShapiro created a podcast called FamilySecrets.\n[BG]\nBoston is an American city.\n</PREMISES>\n<CONCLUSION>\nFamilySecrets is a novel.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornIn(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(x, y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(Shapiro)\nTEXT: Family",
    "<PREMISES>\nall x. (Podcast(x) -> -Novel(x))\n[BG]\nall x. (BornIn(x, 'American City') -> American(x))\n[BG]\nall x. (Novel(x) & Person(x) & NovelWriter(x) -> Person(x) & NovelWriter(x))\nDani Shapiro, American\nFamily History, Dani Shapiro, Novel, 2003\nDani Shapiro, Podcast, Family Secrets\n[BG]\nBoston, American\n</PREMISES>\n<CONCLUSION>\nFamily History, Novel\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 165,
  "responses": [
   [
    "<PREMISES>\nall x. (Podcast(x) -> -Novel(x))\n[BG]\nall x. (BornInAmericanCity(x) -> American(x))\n[BG]\nall x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nDaniShapiro is an American writer.\nFamilyHistory is written by DaniShapiro.\nFamilyHistory is a novel written in 2003.\nDaniShapiro created a podcast called Family Secrets.\n[BG]\nBoston is an American city.\n</PREMISES>\n<CONCLUSION>\n-DaniShapiro is BornInBoston\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: AmericanShapiro is American writer\nTEXT",
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(writer(shapiro)) & NovelWriter(writer(shapiro))\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, writer(shapiro))\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & Year(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets, writer(shapiro))\nTEXT: Boston is an American city.\nFOL: AmericanCity(boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro was born in Boston.\nFOL: BornInAmericanCity(shapiro) & American(shapiro)\n</EVALUATE",
    "<PREMISES>\nall x. (NotNovel(x) -> NotAmerican(x))\nIf x is American, then x is American.\nIf x is novel and x is written by y, then y is a novel writer.\nDani Shapiro is an American writer.\nFamilyHistory is written by Dani Shapiro.\nFamilyHistory is a novel written in 2003.\nDani Shapiro created a podcast called Family Secrets.\nBoston is an American city.\n</PREMISES>\n<CONCLUSION>\nDani Shapiro was born in Boston.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: all x. (NotNovel(x) -> NotAmerican(x))\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (AmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x y. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nTEXT: Dani Shapiro is an American writer.\nFOL: NovelWriter(daniShapiro) & American(daniShapiro)\nTEXT: FamilyHistory is written by Dani Shapiro.\nF",
    "<PREMISES>\nall x. (NotNovel(x) -> NotBook(x))\n[bg] all x. (BornInAmericanCity(x) -> American(x))\n[bg] all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nDaniShapiro is American.\nFamilyHistory is written by DaniShapiro.\nFamilyHistory is novel & WrittenIn(2003).\nDaniShapiro created a podcast called FamilySecrets.\n[bg] Boston is American.\n</PREMISES>\n<CONCLUSION>\nDaniShapiro BornInBoston.\n</CONCLUSION>",
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornIn(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(writer(DaniShapiro)) & NovelWriter(DaniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, DaniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(2003, FamilyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(FamilySecrets, DaniShapiro)\nTEXT: Boston is an American city.\nFOL: American(Boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro was born in Boston.\nFOL: BornIn(Boston, DaniShapiro)\n</CONCLUSION>\n\n<EVALUATE>\n"
   ],
   [
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornIn(x, AmericanCity) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(Shapiro) & NovelWriter(Shapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, Shapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(FamilySecrets, Shapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(Boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro was born in Boston.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: -Novel",
    "<PREMISES>\nA podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\nIf a person is born in American City, the person is American.\nFOL: all x. (BornIn(x) & AmericanCity(x) -> American(x))\nIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nDani Shapiro is an American writer.\nFOL: NovelWriter(daniShapiro)\nFamily History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory) & DaniShapiro\nFamily History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nDani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets) & DaniShapiro\nBoston is an American city.\nFOL: AmericanCity(boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro was born in Boston.\nFOL: BornIn(daniShapiro) & AmericanCity(boston)\n</CONCLUSION>",
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(writer(shapiro)) & NovelWriter(writer(shapiro))\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, writer(shapiro))\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: CreatedPodcast(familySecrets, writer(shapiro))\nTEXT: Boston is an American city.\nFOL: American(boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro was born in Boston.\nFOL: BornInAmericanCity(shapiro, boston)",
    "<PREMISES>\nall x. (Podcast(x) -> -Novel(x))\n[BG]\nall x. (BornInCity(x, 'American City') -> American(x))\n[BG]\nall x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(x, y))\nDani Shapiro is an American writer.\nFOL: AmericanWriter(DaniShapiro)\nFamily History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, DaniShapiro)\nFamily History is a novel written in 2003.\nFOL: Novel(FamilyHistory, 2003)\nDani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(DaniShapiro, 'Family Secrets')\n[BG]\nBoston is an American city.\nFOL: BornInCity(Boston, 'American City')\n</PREMISES>\n<CONCLUSION>\nDani Shapiro was born in Boston.\nFOL: BornInCity(DaniShapiro, Boston)\n</CONCLUSION>",
    "<PREMISES>\nall x. (NotNovel(x) & NotAmerican(x) -> NotAmericanCity(x))\nIf x is AmericanCity, then x is American.\nIf x is novel and x is writtenBy(x), then x is novelWriter(x)\nDaniShapiro is AmericanWriter.\nFamilyHistory is writtenBy(DaniShapiro).\nFamilyHistory is novel & writtenIn(2003).\nDaniShapiro created a podcast called FamilySecrets.\nBoston is AmericanCity.\n</PREMISES>\n<CONCLUSION>\nDaniShapiro is AmericanCity.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: A podcast is not a novel.\nFOL: all x. (NotNovel(x) & NotAmerican(x) -> NotAmericanCity(x))\nTEXT: If a person is born in American City, the person is American.\nFOL: x is AmericanCity -> x is American\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: x is novel & writtenBy(x) -> x is novelWriter(x)\nTEXT: Dani Shapiro is an American writer.\nFOL: DaniShapiro is AmericanWriter\nTEXT: Family History is written by Dani Shapiro.\nF"
   ],
   [
    "<PREMISES>\nA podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\nIf a person is born in American City, the person is American.\nFOL: all x. (BornInCity(x) -> American(x))\nIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nDani Shapiro is an American writer.\nFOL: American(writer(daniShapiro))\nFamily History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nFamily History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(2003, familyHistory)\nDani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets, daniShapiro)\nBoston is an American city.\nFOL: American(boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro was born in Boston.\nFOL: -BornInCity(daniShapiro, boston) \n</EVALUATE>",
    "<PREMISES>\nall x. (NotNovel(x) -> NotBook(x))\n[BG]\nall x. (BornInAmericanCity(x) -> American(x))\nall x. ((Novel(x) & WrittenBy(x) -> NovelWriter(x))\nDaniShapiro is American.\nFamilyHistory is written by DaniShapiro.\nFamilyHistory is a novel written in 2003.\nDaniShapiro created a podcast called FamilySecrets.\n[BG]\nBoston is American\n</PREMISES>\n<CONCLUSION>\n- BornInBoston(daniShapiro)\n</CONCLUSION>",
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornIn(x, AmericanCity) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(x, y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(Shapiro) & NovelWriter(Shapiro, DaniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, DaniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(FamilyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(FamilySecrets, DaniShapiro)\nTEXT: Boston is an American city.\nFOL: AmericanCity(Boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro was born in Boston.\nFOL: BornIn(Shapiro, Boston)\n</",
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornIn(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: NovelWriter(daniShapiro) & American(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: American(Boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro was born in Boston.\nFOL: -BornIn(boston) & American(daniShapiro) & -Novel",
    "<PREMISES>\nA podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\nIf a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nDani Shapiro is an American writer.\nFOL: American(writer(shapiro)) & NovelWriter(shapiro)\nFamily History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, shapiro)\nFamily History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nDani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets) & CreatedBy(shapiro, familySecrets)\nBoston is an American city.\nFOL: American(Boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro was born in Boston.\nFOL: BornInAmericanCity(shapiro) & American(Boston)\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(writer(daniShapiro)) & NovelWriter(writer(daniShapiro))\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, writer(daniShapiro))\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets, writer(daniShapiro))\nTEXT: Boston is an American city.\nFOL: American(city(boston))\n</PREMISES>\n<CONCLUSION>\nDani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro)",
    "<PREMISES>\nA podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\nIf a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenByPerson(x) -> NovelWriter(x))\nDani Shapiro is an American writer.\nFOL: American(writer(DaniShapiro))\nFamily History is written by Dani Shapiro.\nFOL: WrittenByPerson(FamilyHistory, DaniShapiro)\nFamily History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenInYear(FamilyHistory, 2003)\nDani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(FamilySecrets, DaniShapiro)\nBoston is an American city.\nFOL: American(Boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro was born in Boston.\nFOL: -BornInAmericanCity(DaniShapiro) & American(Boston)\n</CONCLUSION>",
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(writer(DaniShapiro)) & NovelWriter(DaniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, DaniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & WrittenIn(2003, FamilyHistory)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(FamilySecrets, DaniShapiro)\nTEXT: Boston is an American city.\nFOL: American(Boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro was born in Boston.\nFOL: BornInBoston(DaniShapiro) & American(DaniShapiro)\n</",
    "<PREMISES>\nall x. (Podcast(x) -> -Novel(x))\n[BG] all x. (BornIn(x, 'American City') -> American(x))\n[BG] all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(x, y))\nDaniShapiro is an AmericanWriter.\nFamilyHistory isWrittenBy(DaniShapiro).\nFamilyHistory isNovel & WrittenIn(2003).\nDaniShapiro created aPodcast calledFamilySecrets.\n[BG] Boston is anAmericanCity.\n</PREMISES>\n<CONCLUSION>\nDaniShapiro isBornIn(Boston).\n</CONCLUSION>",
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornInAmericanCity(x) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nTEXT: Dani Shapiro is an American writer.\nFOL: NovelWriter(daniShapiro) & American(daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & Year(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: American(Boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro was born in Boston.\nFOL: BornInBoston(daniShapiro) & American(daniShapiro)\n</"
   ],
   [
    "<PREMISES>\nA podcast is not a novel.\nFOL: -Novel(podcast)\nTEXT: If a person is born in American City, the person is American.\nFOL: all x. (BornIn(x, americanCity) -> American(x))\nTEXT: If a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(x, y))\nTEXT: Dani Shapiro is an American writer.\nFOL: American(writer(daniShapiro)) & NovelWriter(writer(daniShapiro), daniShapiro)\nTEXT: Family History is written by Dani Shapiro.\nFOL: WrittenBy(familyHistory, daniShapiro)\nTEXT: Family History is a novel written in 2003.\nFOL: Novel(familyHistory) & WrittenIn(familyHistory, 2003)\nTEXT: Dani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(familySecrets, daniShapiro)\nTEXT: Boston is an American city.\nFOL: American(boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro was born in Boston.\n</CONCLUSION>\n\n<E",
    "<PREMISES>\nall x. (Podcast(x) -> -Novel(x))\n[BG]\nall x. (BornInAmericanCity(x) -> American(x))\n[BG]\nall x. (Novel(x) & WrittenBy(x) -> NovelWriter(x))\nDaniShapiro is an American writer.\nFOL: AmericanWriter(DaniShapiro)\nFamilyHistory is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, DaniShapiro)\nFamilyHistory is a novel written in 2003.\nFOL: Novel(FamilyHistory, 2003)\nDaniShapiro created a podcast called Family Secrets.\nFOL: Podcast(FamilySecrets, DaniShapiro)\n[BG]\nBoston is an American city.\nFOL: AmericanCity(Boston)\n</PREMISES>\n<CONCLUSION>\nDaniShapiro was born in Boston.\nFOL: BornInBoston(DaniShapiro)\n</CONCLUSION>",
    "<PREMISES>\nA podcast is not a novel.\nFOL: all x. (Podcast(x) -> -Novel(x))\nIf a person is born in American City, the person is American.\nFOL: all x. (BornIn(x, AmericanCity) -> American(x))\nIf a book is novel and it is written by a person, then the person is a novel writer.\nFOL: all x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(x, y))\nDani Shapiro is an American writer.\nFOL: American(Shapiro) & NovelWriter(Shapiro, DaniShapiro)\nFamily History is written by Dani Shapiro.\nFOL: WrittenBy(FamilyHistory, DaniShapiro)\nFamily History is a novel written in 2003.\nFOL: Novel(FamilyHistory) & Written(FamilyHistory, 2003)\nDani Shapiro created a podcast called Family Secrets.\nFOL: Podcast(FamilySecrets) & CreatedBy(FamilySecrets, Shapiro)\nBoston is an American city.\nFOL: AmericanCity(Boston)\n</PREMISES>\n<CONCLUSION>\nDani Shapiro was born in Boston.\nFOL: BornIn(Shapiro, Boston)\n</E",
    "<PREMISES>\nall x. (Podcast(x) -> -Novel(x))\n[BG] all x. (BornInAmericanCity(x) -> American(x))\n[BG] all x. (Novel(x) & Person(x) & WrittenBy(x, y) -> NovelWriter(x, y))\nDaniShapiro(AmericanWriter)\nFamilyHistory(WrittenBy(DaniShapiro), Novel(FamilyHistory), Year(2003))\nDaniShapiro(CreatedPodcast(FamilySecrets))\n[BG] Boston(AmericanCity)\n</PREMISES>\n<CONCLUSION>\nDaniShapiro(BornInBoston)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Podcast(x) -> -Novel(x))\n[BG]\nall x. (BornInCity(x, 'American City') -> American(x))\n[BG]\nall x. (Novel(x) & WrittenBy(x, y) -> NovelWriter(y))\nDaniShapiro (AmericanWriter)\nFamilyHistory (WrittenBy(DaniShapiro))\nFamilyHistory (Novel & WrittenInYear(2003))\nDaniShapiro (CreatedPodcast(FamilySecrets))\n[BG]\nBoston (AmericanCity)\n</PREMISES>\n<CONCLUSION>\nDaniShapiro (BornInCity(Boston))\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 166,
  "responses": [
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is an American.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x.",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is an American.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (-American(x) & BasketballPlayer(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is an American.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (-American(x) & BasketballPlayer(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is an American.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x.",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x."
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is an American.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x.",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (-American(x) & BasketballPlayer(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x.",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is an American.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x."
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (-American(x) & BasketballPlayer(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is an American.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (-American(x) & BasketballPlayer(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is an American.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is an American.\nFOL: American(yuri)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 167,
  "responses": [
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is not an American basketball player.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: exists x. (BasketballPlayer(x) & -American(x)) \nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nFOL: -WearLargeSizedClothes(yuri)\nF",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is not an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 168,
  "responses": [
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is an American basketball player.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nFOL: all x. (Tall(x) -> LargeShoes(x))\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nFOL: -LargeSizedClothes(yuri)\nFOL: -American(yuri) & BasketballPlayer(yuri) &",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: (American(yuri) & BasketballPlayer(yuri))\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: BasketballPlayer(yuri) & American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: (American(yuri) & BasketballPlayer(yuri))\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: BasketballPlayer(yuri) & American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is an American basketball player.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: (American(yuri) & BasketballPlayer(yuri))\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: BasketballPlayer(yuri) & American(yuri)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nFOL: -WearLargeSizedClothes(yuri)\nFOL:",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: (American(yuri) & BasketballPlayer(yuri))\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: (American(yuri) & BasketballPlayer(yuri))\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nYuri is an American basketball player.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nTEXT: If someone wears large shoes, they wear large-sized clothes.\nFOL: all"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: (American(yuri) & BasketballPlayer(yuri))\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\nFOL: American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\n</CONCLUSION>\n\n<EVALUATE>\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nFOL: -WearLargeSizedClothes(yuri)\nFOL:",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nYuri is an American basketball player.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Some basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nTEXT: All basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nTEXT: If someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nTEXT: If someone wears large shoes, they wear large"
   ]
  ]
 },
 {
  "index": 169,
  "responses": [
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> BasketballPlayer(yuri) & American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (-American(x) & BasketballPlayer(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> BasketballPlayer(yuri) & American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: (-WearLargeShoes(yuri) -> BasketballPlayer(yuri) & American(yuri))\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> BasketballPlayer(yuri) & American(yuri)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (-American(x) & Basketball(x))\nAll basketball players are tall.\nFOL: all x. (Basketball(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> American(yuri) & Basketball(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> BasketballPlayer(yuri) & American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> BasketballPlayer(yuri) & American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> BasketballPlayer(yuri) & American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> BasketballPlayer(yuri) & American(yuri)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> BasketballPlayer(yuri) & American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> BasketballPlayer(yuri) & American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> BasketballPlayer(yuri) & American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (-American(x) & BasketballPlayer(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> BasketballPlayer(yuri) & American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> BasketballPlayer(yuri) & American(yuri)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> BasketballPlayer(yuri) & American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> BasketballPlayer(yuri) & American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> BasketballPlayer(yuri) & American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (-American(x) & BasketballPlayer(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> American(yuri) & BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: (-WearLargeShoes(yuri) -> BasketballPlayer(yuri) & American(yuri))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> BasketballPlayer(yuri) & American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> BasketballPlayer(yuri) & American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> BasketballPlayer(yuri) & American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -LargeShoes(yuri) -> BasketballPlayer(yuri) & American(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri does not wear large shoes, then Yuri is an American basketball player.\nFOL: -WearLargeShoes(yuri) -> BasketballPlayer(yuri) & American(yuri)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 170,
  "responses": [
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: (-American(yuri) & BasketballPlayer(yuri)) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: (-American(yuri) & BasketballPlayer(yuri)) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: (-American(yuri) & BasketballPlayer(yuri)) -> BasketballPlayer(yuri)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: (-American(yuri) & BasketballPlayer(yuri)) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: (-American(yuri) & BasketballPlayer(yuri)) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: (-American(yuri) & BasketballPlayer(yuri)) -> BasketballPlayer(yuri)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: (-American(yuri) & BasketballPlayer(yuri)) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: (-American(yuri) & BasketballPlayer(yuri)) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: (-American(yuri) & BasketballPlayer(yuri)) -> BasketballPlayer(yuri)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: (-American(yuri) & BasketballPlayer(yuri)) -> BasketballPlayer(yuri)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> LargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (LargeShoes(x) -> LargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -LargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: (-American(yuri) & BasketballPlayer(yuri)) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri) -> BasketballPlayer(yuri)\n</CONCLUSION>",
    "<PREMISES>\nSome basketball players are not American.\nFOL: exists x. (BasketballPlayer(x) & -American(x))\nAll basketball players are tall.\nFOL: all x. (BasketballPlayer(x) -> Tall(x))\nIf someone is tall, they wear large shoes.\nFOL: all x. (Tall(x) -> WearLargeShoes(x))\nIf someone wears large shoes, they wear large-sized clothes.\nFOL: all x. (WearLargeShoes(x) -> WearLargeSizedClothes(x))\nYuri does not wear large-size clothes.\nFOL: -WearLargeSizedClothes(yuri)\n</PREMISES>\n\n<CONCLUSION>\nIf Yuri is not an American basketball player, then Yuri is a basketball player.\nFOL: -American(yuri) & BasketballPlayer(yuri) -> BasketballPlayer(yuri)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 171,
  "responses": [
   [
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy. \nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<PREMISES>\nEvents are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy. \nFOL: exists x. (Happy(x) & Event(x))\n</PREMISES>\n<CONCLUSION>\nAll events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy. \nFOL: exists x. (Event(x) & Happy(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy. \nFOL: exists x. (Event(x) & Happy(x))\n</EVALUATE>\n\nThis conclusion does not logically follow from the premises. The premises only state that at least one event is happy, but they do not rule out the possibility of there being sad events."
   ],
   [
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<PREMISES>\nEvents are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\n</PREMISES>\n<CONCLUSION>\nAll events are sad.\nFOL: -Happy(x) | Sad(x) for all x. (Event(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<PREMISES>\nEvents are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Happy(x))\n</PREMISES>\n<CONCLUSION>\nAll events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</CONCLUSION>",
    "<PREMISES>\nEvents are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Happy(x))\n</PREMISES>\n<CONCLUSION>\nAll events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</CONCLUSION>"
   ],
   [
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy. \nFOL: exists x. (Event(x) & Happy(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<PREMISES>\nEvents are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\n</PREMISES>\n<CONCLUSION>\nAll events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</CONCLUSION>",
    "<PREMISES>\nEvents are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy. \nFOL: exists x. (Happy(x))\n</PREMISES>\n\n<CONCLUSION>\nAll events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nEvents are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Happy(x))\n</PREMISES>\n\n<CONCLUSION>\nAll events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</CONCLUSION>",
    "<PREMISES>\nEvents are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Happy(x))\n</PREMISES>\n<CONCLUSION>\nAll events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy. \nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>"
   ],
   [
    "<PREMISES>\nEvents are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Happy(x))\n</PREMISES>\n<CONCLUSION>\nAll events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<PREMISES>\nEvents are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\n</PREMISES>\n<CONCLUSION>\nAll events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy.\nFOL: exists x. (Event(x) & Happy(x))\nTEXT: All events are sad.\nFOL: all x. (Event(x) -> Sad(x))\n</EVALUATE>",
    "<EVALUATE>\nTEXT: Events are either happy or sad.\nFOL: all x. (Event(x) -> (Happy(x) | Sad(x)))\nTEXT: At least one event is happy. \nFOL: exists x. (Event(x) & Happy(x))\n</EVALUATE>\n\n<CONCLUSION>\nFOL: -Sad(x)\n</EVALUATE>"
   ]
  ]
 },
 {
  "index": 172,
  "responses": [
   [
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer : 1992DuMaurierClassic\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(1992DuMaurierClassic) & x : Leaderboard(1992DuMaurierClassic) & x : Belgium)\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe : Belgium & Descampe : Leaderboard(1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (x : Leaderboard(1992DuMaurierClassic) -> x : 1992DuMaurierClassic)\n</PREMISES>\n<CONCLUSION>\nSteinhauer was not the winner of",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. Leaderboard(1992DuMaurierClassic, x) & Leaderboard(1992DuMaurierClassic, x) & Leaderboard(1992DuMaurierClassic, x) & Leaderboard(1992DuMaurierClassic, x) & Leaderboard(1992DuMaurierClassic, x) & Leaderboard(1992DuMaurierClassic, x) & Leaderboard(1992DuMaurierClassic, Belgian)\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Belgian(Descampe) & Leaderboard(1992DuMaurierClassic, Descampe)\nTEXT: All people on the leaderboard",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. Leaderboard(1992DuMaurierClassic) & x = Belgium & -Winner(1992DuMaurierClassic)\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe = Belgium & Leaderboard(1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. Leaderboard(1992DuMaurierClassic) -> x(1992DuMaurierClassic)\n</PREMISES>\n<CONCLUSION>\nSteinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer : 1992DuMaurierClassic\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. Leaderboard(x) & Tie(x, 1) & Belgium(x)\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Belgium(Descampe) & Leaderboard(1992DuMaurierClassic) & Descampe\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. Leaderboard(x) -> 1992DuMaurierClassic(x)\n</PREMISES>\n<CONCLUSION>\nSteinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(1992DuMaurierClassic) = Ste",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(1992DuMaurierClassic) & (Tie(x) & FromBelgium(x)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(Descampe) & Leaderboard(1992DuMaurierClassic) & Descampe\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic) -> Participated(x, 1992DuMaurierClassic))\n</PREMISES>\n<CONCLUSION>\nSteinhauer was not the winner of"
   ],
   [
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(1992DuMaurierClassic) & Tied(x) & Belgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(Belgium) & Leaderboard(1992DuMaurierClassic) & Descampe(Tied)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic) & x -> Participated(1992DuMaurierClassic)(x))\n</PREMISES>\n<CONCLUSION>\nSteinhauer was not the winner of the 1992",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer : 1992DuMaurierClassic\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. Leaderboard(1992DuMaurierClassic) & x : Belgium\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe : Belgium & Descampe : Leaderboard(1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic) & x : 1992DuMaurierClassic)\n</PREMISES>\n<CONCLUSION>\nSteinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(1992",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. Leaderboard(1992DuMaurierClassic, x) & (Leaderboard(1992DuMaurierClassic, x) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(Descampe) & Leaderboard(1992DuMaurierClassic, Descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic, x) -> Participated(x, 1992DuMaurierClassic))\n</PREMISES>\n<",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard1992DuMaurierClassic(x) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(Descampe) & Leaderboard1992DuMaurierClassic(Descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard1992DuMaurierClassic(x) -> Participated(x, 1992DuMaurierClassic))\n</PREMISES>\n<CONCLUSION>\nSteinhauer was not the winner of the 1992 du Maurier Classic",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner1992 (Steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated1992 (Steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie1992 & FromBelgium\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(Descampe) & Leaderboard1992(Descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard1992(x) -> Participated1992(x))\n</PREMISES>\n<CONCLUSION>\nSteinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner1992(Steinhauer)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: (Leaderboard(1992DuMaurierClassic) & 6WayTie(Leaderboard(1992DuMaurierClassic)) & FromBelgium(Leaderboard(1992DuMaurierClassic)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(Descampe) & OnLeaderboard(1992DuMaurierClassic, Descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> Participated(x, 1992DuM",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. Leaderboard(1992DuMaurierClassic) & x = Belgium\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe = Belgium & Leaderboard(1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic) -> Participated(1992DuMaurierClassic)(x))\n</PREMISES>\n<CONCLUSION>\nSteinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(1992DuMaur",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(1992DuMaurierClassic) & x & Leaderboard(x) & Belgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(Belgium) & Leaderboard(1992DuMaurierClassic)(Descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic)(x) -> Steinhauer(1992DuMaurierClassic))\n</PREMISES>\n<CONCLUSION>\nSteinhauer was not the winner of the 1992 du Maur",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. Leaderboard(1992DuMaurierClassic, x) & Belgium(x) & -Winner(1992DuMaurierClassic)\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Belgium(Descampe) & Leaderboard(1992DuMaurierClassic, Descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. Leaderboard(1992DuMaurierClassic, x) -> Participated(x, 1992DuMaurierClassic)\n</PREMISES>\n<CONCLUSION>\nSteinhauer was not",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner1992 (Steinhauer)\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participant1992 (Steinhauer)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard1992(x) & SixWayTie(x) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard1992(descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard1992(x) -> Participant1992(x))\n</PREMISES>\n<CONCLUSION>\nSteinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner1992(Steinhauer)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(1992DuMaurierClassic) & -Winner(1992DuMaurierClassic) & x & Leaderboard(x) & x From Belgium)\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe From Belgium & Descampe Leaderboard(1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) & x 1992DuMaurierClassic)\nTEXT: Steinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer : 1992DuMaurierClassic\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. Leaderboard(1992DuMaurierClassic) & x : Belgium\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe : Belgium & Descampe : Leaderboard(1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic) -> x : 1992DuMaurierClassic)\n</PREMISES>\n<CONCLUSION>\nSteinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(1992",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. Leaderboard(x) & SixWayTie(x) & Belgium(x)\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe & Belgium & Leaderboard(1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> Participated(x, 1992DuMaurierClassic))\n</PREMISES>\n<CONCLUSION>\nSteinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner(1992DuMaurierClassic) =",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. Leaderboard(1992DuMaurierClassic) & x = Belgian & -Winner(1992DuMaurierClassic)\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Belgian & Descampe(1992DuMaurierClassic) & Leaderboard(1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic) & x -> Steinhauer(1992DuMaurierClassic))\n</PREMISES>\n<CONCLUSION>\nSteinhauer was not the winner",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer : 1992DuMaurierClassic\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. Leaderboard(1992DuMaurierClassic) & (x : 1992DuMaurierClassic & Belgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Belgium(Descampe) & Descampe : Leaderboard(1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic) & x : 1992DuMaurierClassic -> Participated(1992DuMaurierClassic))\n</PREMISES>\n<CONCLUSION>\nSteinh"
   ],
   [
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(1992DuMaurierClassic) & (Leaderboard(x) & FromBelgium(x)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(Descampe) & Leaderboard(1992DuMaurierClassic) = Descampe\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic) & x(x) -> Participated(1992DuMaurierClassic)(x))\n</PREMISES>\n<CONCLUSION>\nSteinhauer was not the winner of",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(1992DuMaurierClassic, x) & Leaderboard(1992DuMaurierClassic, x) & -Leaderboard(1992DuMaurierClassic, x) & Leaderboard(1992DuMaurierClassic, x) & Belgium(x) & Winner(1992DuMaurierClassic) = x)\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Belgium(Descampe) & Leaderboard(1992DuMaurierClassic, Descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: (LeaderboardTie(1992DuMaurierClassic) & FromBelgium(leader)) | (LeaderboardTie(1992DuMaurierClassic) & FromBelgium(leader))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(1992DuMaurierClassic, descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic, x) -> Participated(x, 1992DuMaurierClassic))\n</PRE",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer : 1992DuMaurierClassic\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. Leaderboard(1992DuMaurierClassic) & x : Belgium\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe : Belgium & Descampe : Leaderboard(1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic) & x : Leaderboard(1992DuMaurierClassic) -> x : 1992DuMaurierClassic)\n</PREMISES>\n<CONCLUSION>\nSteinhauer was not the winner of the 199",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(1992DuMaurierClassic) & Leaderboard(x) & Belgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(Belgium) & Leaderboard(1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic) -> Participated(1992DuMaurierClassic(x)))\n</PREMISES>\n<CONCLUSION>\nSteinhauer was not the winner of the 1992 du Maurier Classic.\nFOL: -Winner"
   ]
  ]
 },
 {
  "index": 173,
  "responses": [
   [
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer : 1992DuMaurierClassic\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. Leaderboard(1992DuMaurierClassic) & (x : 1992DuMaurierClassic & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(Descampe) & Descampe : Leaderboard(1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic) & x : 1992DuMaurierClassic -> x : 1992DuMaurierClassic)\n</PREMISES>\n<CON",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer : 1992DuMaurierClassic\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(1992DuMaurierClassic) & (x : Leaderboard(1992DuMaurierClassic) & Belgium(x)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Belgium(Descampe) & Descampe : Leaderboard(1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (x : Leaderboard(1992DuMaurierClassic) -> 1992DuMaurierClassic)\n</PREMISES>\n<CONCLUSION>\nDescampe is in the six-way tie",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer : 1992DuMaurierClassic\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. Leaderboard(1992DuMaurierClassic) & x : Belgium\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe : Belgium & Descampe : Leaderboard(1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic) -> x : 1992DuMaurierClassic)\n</PREMISES>\n<CONCLUSION>\nDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL:",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. Leaderboard(1992DuMaurierClassic) & x = Belgium & LeaderboardTie(x, 1992DuMaurierClassic) = 1\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe = Belgium & Leaderboard(1992DuMaurierClassic) & LeaderboardTie(x, 1992DuMaurierClassic) = Descampe\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. Leaderboard(1992DuMaurierClassic) & x -> Steinhauer(1992DuMaurier",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(1992DuMaurierClassic) & SixWayTie(x) & Country(x) = Belgium)\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(Country = Belgium) & Leaderboard(1992DuMaurierClassic) & Descampe(1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic)(x) -> Steinhauer(1992DuMaurierClassic))\n</PREMISES>\n<CONCLUSION>\nDesc"
   ],
   [
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. Leaderboard(1992DuMaurierClassic) & x = Belgian & LeaderboardPosition(x) = 1\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe = Belgian & Descampe(1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) & 1992DuMaurierClassic(x))\n</PREMISES>\n<CONCLUSION>\nDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: LeaderboardPosition",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard1992DuMaurierClassic(x) & x = Belgium)\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe = Belgium & Leaderboard1992DuMaurierClassic(Descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard1992DuMaurierClassic(x) -> Steinhauer(1992DuMaurierClassic))\n</PREMISES>\n<CONCLUSION>\nDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL:",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. Leaderboard(1992DuMaurierClassic) & x = Belgium\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe = Belgium & Descampe(1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic)(x) -> Steinhauer(1992DuMaurierClassic))\n</PREMISES>\n<CONCLUSION>\nDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: Leader",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(1992DuMaurierClassic) & x & -Leaderboard(1992DuMaurierClassic) & Leaderboard(x) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(1992DuMaurierClassic) = descampe\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> Steinhauer(1992DuMaurierClassic))\n</PREMISES>\n<CONCLUSION>\nDescampe is in the six",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. Leaderboard(1992DuMaurierClassic) & x = Belgium\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe = Belgium & Leaderboard(1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. Leaderboard(1992DuMaurierClassic)(x) -> Steinhauer(1992DuMaurierClassic)\n</PREMISES>\n<CONCLUSION>\nDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: Leaderboard("
   ],
   [
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. Leaderboard(1992DuMaurierClassic) & x & Belgium(x)\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Belgium(Descampe) & Leaderboard(1992DuMaurierClassic) & Descampe\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic) & x -> Steinhauer(1992DuMaurierClassic))\n</PREMISES>\n<CONCLUSION>\nDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer participatedIn(1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(1992DuMaurierClassic) & (Leaderboard(1992DuMaurierClassic) = 6 & Descampe(x) & Belgium(x)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(x) & Belgium(x) & Leaderboard(1992DuMaurierClassic) = Descampe(x)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic)(x) -> participatedIn(1992DuMaurierClassic)(x))\n</PRE",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer : 1992DuMaurierClassic\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: (Leaderboard(1992DuMaurierClassic) = 6) & (Leaderboard(1992DuMaurierClassic)[1] : Belgium)\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe : Belgium & Descampe : Leaderboard(1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic)[x] -> 1992DuMaurierClassic)\n</PREMISES>\n<CONCLUSION>\nDescampe is in the six-way tie in",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer : 1992DuMaurierClassic\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(x) & SixWayTie(x) & Descampe(x) & Belgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe : Belgium & Descampe : Leaderboard(1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> 1992DuMaurierClassic(x))\n</PREMISES>\n<CONCLUSION>\nDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: Descam",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(Leaderboard(1992DuMaurierClassic)) & PersonInTie(Belgium, Leaderboard(1992DuMaurierClassic))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: From(Belgium, Descampe) & OnLeaderboard(Leaderboard(1992DuMaurierClassic), Descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(Leaderboard(1992DuMaurierClassic), x) -> Participated(x, 1992DuMaurierClassic"
   ],
   [
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(1992DuMaurierClassic) & (x & Belgian(x)))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Belgian(Descampe) & Leaderboard(1992DuMaurierClassic)(Descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic)(x) -> Steinhauer(1992DuMaurierClassic))\n</PREMISES>\n<CONCLUSION>\nDescampe is in the six-way tie in the leaderboard of the 1992 du Maur",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(1992DuMaurierClassic) & -Winner(1992DuMaurierClassic) & x = Steinhauer & Leaderboard(x) & Descampe(x) & Belgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(1992DuMaurierClassic) & Belgium(Descampe) & Leaderboard(Descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> Steinhauer(1992DuMaurierClassic))\n</PREMISES>\n<",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(x) & SixWayTie(x) & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(descampe) & Leaderboard(1992DuMaurierClassic) & Descampe(descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> Participated(x, 1992DuMaurierClassic))\n</PREMISES>\n<CONCLUSION>\nDescampe is in the six-way tie in the leaderboard of the 1992 du Maur",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. Leaderboard(1992DuMaurierClassic) & x & Belgium(x)\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Belgium(Descampe) & Leaderboard(1992DuMaurierClassic) & Descampe\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. Leaderboard(1992DuMaurierClassic) & x -> Steinhauer(1992DuMaurierClassic)\n</PREMISES>\n<CONCLUSION>\nDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. Leaderboard(x, 1992DuMaurierClassic) & -LeaderboardDescampe(x, 1992DuMaurierClassic) & LeaderboardDescampe(x, Belgium)\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(x) & LeaderboardDescampe(x, 1992DuMaurierClassic) & LeaderboardDescampe(x, Belgium)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. Leaderboard(x, 1992DuMaurierClassic) -> Participated(x, 199"
   ],
   [
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & FromBelgium(Leaderboard(1992DuMaurierClassic))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(Descampe) & OnLeaderboard(1992DuMaurierClassic, Descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> Participated(x, 1992DuMaurierClassic))\n</PREMISES>\n<CONCLUSION>\nDescampe",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Participated(Steinhauer, 1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: SixWayTie(1992DuMaurierClassic) & FromBelgium(SixWayTie(1992DuMaurierClassic))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: FromBelgium(Descampe) & OnLeaderboard(1992DuMaurierClassic, Descampe)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (OnLeaderboard(1992DuMaurierClassic, x) -> Participated(x, 1992DuMaurierClassic))\n</PREMISES>\n<CONCLUSION>\nDesc",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. Leaderboard(1992DuMaurierClassic) & (x & FromBelgium(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(FromBelgium) & Descampe(Leaderboard(1992DuMaurierClassic))\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(1992DuMaurierClassic)(x) -> Steinhauer(1992DuMaurierClassic))\n</PREMISES>\n<CONCLUSION>\nDescampe is in the six-way tie in the leaderboard of the 199",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer : 1992DuMaurierClassic\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. (Leaderboard(x) & 6WayTie(x) & Descampe(x))\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe : Belgium & Descampe : Leaderboard(1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> 1992DuMaurierClassic(x))\n</PREMISES>\n<CONCLUSION>\nDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: 6WayTie",
    "<PREMISES>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nFOL: Winner(1992DuMaurierClassic) = Steinhauer\nTEXT: Steinhauer participated in the 1992 du Maurier Classic.\nFOL: Steinhauer(1992DuMaurierClassic)\nTEXT: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nFOL: exists x. Leaderboard(x) & SixWayTie(x, Belgium)\nTEXT: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(Belgium) & Leaderboard(1992DuMaurierClassic) & Descampe(1992DuMaurierClassic)\nTEXT: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nFOL: all x. (Leaderboard(x) -> Participated(x))\n</PREMISES>\n<CONCLUSION>\nDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\nFOL: Descampe(1992Du"
   ]
  ]
 },
 {
  "index": 174,
  "responses": [
   [
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) -> Jane(x) & -Like(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Animal(x) & Barking(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) -> Jane(x) & Like(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legged(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legged(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(KiKi) & -Legged(KiKi) -> (Terricolous(KiKi) | Legged(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(KiKi)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\n\nAll dogs are animals that bark.\nFOL: all x. (Dog(x) -> Barks(x))\n\nIf an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\n\nIf an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\n\nIf an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> HasLegs(x))\n\nIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(KiKi) & -HasLegs(KiKi) -> (Terricolous(KiKi) | HasLegs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\nFOL: -Jumps(KiKi) & -HasLegs(KiKi) -> Terricolous(KiKi)\n</CONCLUSION>",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(KiKi)\n</EVALUATE>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(KiKi)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (-Jump(KiKi) & -Legs(KiKi)) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Animal(x) & Barks(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(KiKi) & -HasLegs(KiKi) -> (Terricolous(KiKi) | HasLegs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(KiKi)\n</PREMISES>\n\n<CONCLUSION>\nKiKi is terricolous.\nFOL: Terricolous(KiKi)\n</CONCLUSION>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (-Jump(KiKi) & -Legs(KiKi)) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x"
   ],
   [
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) -> Jane(x) -> -Like(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) & Animal(x) -> Barks(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) -> Jane(x) -> Like(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(KiKi) & -HasLegs(KiKi) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(KiKi)\n</PREMISES>\n\n<CONCLUSION>\nKiKi is terricolous.\nFOL:",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\n\nAll dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nIf an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\n\nIf an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nIf an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\n\nIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n\n<CONCLUSION>\nKiKi is terricolous.\nFOL: Terricolous(KiKi)\n</CONCLUSION>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) -> Jane(x) & -Like(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Animal(x) & Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) -> Jane(x) & Like(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Animal(x) & Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(KiKi)\n</PREMISES>\n\n<CONCLUSION>\nKiKi is terricolous.\nFOL: Terricolous(Ki",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) -> Jane(x) & -Like(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Animal(x) & Barks(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) -> Jane(x) & Like(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(KiKi) & -HasLegs(KiKi) -> (Terricolous(KiKi) | HasLegs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like"
   ],
   [
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (-Jump(KiKi) & -Legs(KiKi)) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(KiKi)\n</EVALUATE>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Barks(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\n\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> HasLegs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(KiKi) & -HasLegs(KiKi) -> (Terricolous(KiKi) | HasLegs(KiKi))\n</PREMISES>\n\n<CONCLUSION>\nKiKi is terricolous.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x.",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Barks(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(KiKi) & -HasLegs(KiKi) -> (Terricolous(KiKi) | HasLegs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x.",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Bark(x) -> -LikeJane(x))\n\nAll dogs are animals that bark.\nFOL: all x. (Dog(x) -> Animal(x) & Bark(x))\n\nIf an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jump(x) -> LikeJane(x))\n\nIf an animal has legs, then it jumps.\nFOL: all x. (Animal(x) & Legs(x) -> Jump(x))\n\nIf an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\n\nIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (-Jump(KiKi) & -Legs(KiKi)) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n\n<CONCLUSION>\nKiKi is terricolous.\nFOL: Terricolous(KiKi)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Barks(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(KiKi) & -HasLegs(KiKi) -> (Terricolous(KiKi) | HasLegs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x.",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(KiKi)\n</EVALUATE>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (-Jump(KiKi) & -Legs(KiKi)) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi is terricolous.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi is terricolous.\nFOL: Terricolous(KiKi)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 175,
  "responses": [
   [
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\n\nAll dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\n\nIf an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\n\nIf an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nIf an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\n\nIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\nFOL: Bark(KiKi) & Dog(KiKi)\n</CONCLUSION>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\n\nAll dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nIf an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\n\nIf an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nIf an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\n\nIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\nFOL: Bark(KiKi) & Dog(KiKi)\n</CONCLUSION>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (-Jump(KiKi) & -Legs(KiKi)) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\nFOL: Bark(KiKi) & Dog(KiKi)\n</CONCLUSION>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like"
   ],
   [
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\nFOL: Bark(KiKi) & Dog(KiKi)\n</CONCLUSION>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi barks and is a dog.\nFOL: (Bark(KiKi) & Dog(KiKi)) & (Bark(KiKi) -> -LikeJane(KiKi)) & (LikeJane(KiKi) -> -Dog(KiKi",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(KiKi) & Dog(KiKi)\n</PREMISES>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x."
   ],
   [
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(KiKi) & Dog(KiKi)\n</PREMISES>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x.",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(KiKi) & Dog(KiKi)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi barks and is a dog.\nFOL: (Bark(KiKi) & Dog(KiKi)) | (-Bark(KiKi) & Dog(KiKi))\n</EVALUATE>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\nFOL: (Bark(KiKi) & Dog(KiKi))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi barks and is a dog.\nFOL: Bark(KiKi) & Dog(KiKi)\n</PREMISES>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x.",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi barks and is a dog.\nFOL: (Bark(KiKi) & Dog(KiKi)) & (Bark(KiKi) -> -LikeJane(KiKi))\n</EVALUATE>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\n\nAll dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x) & Animal(x))\n\nIf an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\n\nIf an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nIf an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\n\nIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n\nTEXT: KiKi barks and is a dog.\nFOL: Bark(KiKi) & Dog(KiKi)\n</PREMISES>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x."
   ],
   [
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLikes(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLikes(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Jane",
    "<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi barks and is a dog.\nFOL: (Bark(KiKi) & Dog(KiKi)) & (-LikeJane(KiKi) -> (Bark(KiKi) -> -LikeJane(KiKi)))\n</EVALUATE",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Like",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> (Animal(x) & Bark(x)))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\nFOL: Bark(KiKi) & Dog(KiKi)\n</CONCLUSION>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLikes(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLikes(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi barks and is a dog.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -Jane"
   ]
  ]
 },
 {
  "index": 176,
  "responses": [
   [
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\n\nAll dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x) & Animal(x))\n\nIf an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\n\nIf an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nIf an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\n\nIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n\n</PREMISES>\n<CONCLUSION>\nKiKi neither barks nor is a dog.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT:",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n\n<CONCLUSION>\nKiKi neither barks nor is a dog.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) & Barks(x) -> -LikesJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Animal(x) & Barks(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) & Jumps(x) -> LikesJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(KiKi) & -HasLegs(KiKi) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Barks(KiKi) & -Dog(KiKi)\n</PREMISES>\n\n",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(KiKi) & -Dog(KiKi)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(KiKi) & -Dog(KiKi)\n</PREMISES>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL"
   ],
   [
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(KiKi) & -Dog(KiKi)\n</PREMISES>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) -> Jane(x) -> -Like(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Animal(x) & Animal(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) -> Jane(x) -> Like(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Animal(x) -> Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: (-Jump(KiKi) & -Legs(KiKi)) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(KiKi) & -Dog(KiKi)\n</PREMISES>\n\n<EVALUATE>\nTEXT",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(KiKi) & -Dog(KiKi)\n</PREMISES>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(KiKi) & -Dog(KiKi)\n</PREMISES>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(KiKi) & -Dog(KiKi)\n</PREMISES>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL"
   ],
   [
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) -> Jane(x) = -Like(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Animal(x) & Animal(x) -> Barks(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) -> Jane(x) = Like(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Animal(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(KiKi) & -HasLegs(KiKi) -> (Terricolous(KiKi) | HasLegs(KiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Barks(KiKi) & -Dog(KiKi)\n</PRE",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) -> -JaneLikes(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Animal(x) & Barks(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) -> JaneLikes(x) & Jumps(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (HasLegs(x) -> Jumps(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> HasLegs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jumps(KiKi) & -HasLegs(KiKi) -> (Terricolous(KiKi) | HasLegs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi neither barks nor is a dog.\nFOL: -Barks(KiKi) & -Dog(KiKi)\n</CONCLUSION",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n\n<CONCLUSION>\nKiKi neither barks nor is a dog.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Animal(x) -> Jane(x) = -Like(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Animal(x) & Animal(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Animal(x) -> Jane(x) = Like(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Animal(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(KiKi) & -Dog(KiKi)\n</PREMISES>\n\n<EVALUATE>\n",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(KiKi) & -Dog(KiKi)\n</PREMISES>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL"
   ],
   [
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(KiKi) & -Dog(KiKi)\n</PREMISES>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi neither barks nor is a dog.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(KiKi) & -Dog(KiKi)\n</PREMISES>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\n\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\n\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\n\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(KiKi) & -Dog(KiKi)\n</PREMISES>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -JaneLikes(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> JaneLikes(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi neither barks nor is a dog.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -"
   ],
   [
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n</PREMISES>\n<CONCLUSION>\nKiKi neither barks nor is a dog.\nFOL: -Bark(KiKi) & -Dog(KiKi)\n</CONCLUSION>",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(KiKi) & -Dog(KiKi)\n</PREMISES>\n\n<CONCLUSION>\n<EVALUATE>\nTEXT: KiKi neither barks nor is a dog.\nF",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\n\nAll dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\n\nIf an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\n\nIf an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\n\nIf an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\n\nIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\n\n</PREMISES>\n<CONCLUSION>\nKiKi neither barks nor is a dog.\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(KiKi) & -Dog(KiKi)\n</PREMISES>\n\n<CONCLUSION>\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: If an animal barks, then",
    "<PREMISES>\nIf an animal barks, then Jane does not like it.\nFOL: all x. (Bark(x) -> -LikeJane(x))\nTEXT: All dogs are animals that bark.\nFOL: all x. (Dog(x) -> Bark(x))\nTEXT: If an animal jumps, then Jane likes it.\nFOL: all x. (Jump(x) -> LikeJane(x))\nTEXT: If an animal has legs, then it jumps.\nFOL: all x. (Legs(x) -> Jump(x))\nTEXT: If an animal is terricolous, then it has legs. \nFOL: all x. (Terricolous(x) -> Legs(x))\nTEXT: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nFOL: -Jump(KiKi) & -Legs(KiKi) -> (Terricolous(KiKi) | Legs(KiKi))\nTEXT: KiKi neither barks nor is a dog.\nFOL: -Bark(KiKi) & -Dog(KiKi)\n</PREMISES>\n\n<EVALUATE>\nTEXT: If an animal barks, then Jane does not like it.\nFOL"
   ]
  ]
 },
 {
  "index": 177,
  "responses": [
   [
    "<PREMISES>\nall x. (Person(x) -> Name(x, 'Ailton Silva'))\nall x. (Person(x) & Year(x, 1995) & Nationality(x, 'Brazilian') & Position(x, 'Footballer') & Team(x, 'Nautico') -> Nationality(x, 'Brazilian'))\nall x. (Person(x) & Position(x, 'Footballer') & Team(x, 'Nautico') & Team(x, 'Braga') -> LoanedOut(x))\nPerson(ailton)\nTeam(ailton, 'Braga')\nall x. (Person(x) & Position(x, 'Footballer') & Team(x, 'Nautico') & Team(x, 'Braga') -> LoanedOut(x))\nall x. (Person(x) & Position(x, 'Footballer') & Team(x, 'Nautico') & Team(x, 'Braga') -> LoanedOut(x))\nall x. (Person(x) & Team(x, 'Nautico') -> Nationality(x, 'Brazilian'))\nall x. (Person(x) & Team(x, 'Fluminense') -> Not(Nationality(x, 'Brazilian')))\n</PRE",
    "<PREMISES>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Ailton(x) & FootballPlayer(x) & LoanedOut(x) -> Braga(x))\nall x. (Ailton(x) & Brazillian(x) & Footballer(x) & Nautico(x) -> Footballer(x))\nNautico(x) & Braga(x)\nall x. (FootballClub(x) -> Nautico(x) & Braga(x))\nFluminense(x) & FootballClub(x)\n</PREMISES>\n<CONCLUSION>\nall x. (Nautico(x) & Brazilian(x) -> -Brazilian(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> BornIn1995(x))\nall x. (Ailton(x) -> CommonlyKnownAs(Ailton))\nAilton(x) & Person(x) & FootballPlayer(x) & LoanedOutTo(Braga(x))\nAilton(x) & Person(x) & Footballer(x) & Brazilian(x) & PlaysFor(Nautico(x))\nNautico(x) & Braga(x) & FootballClub(x)\nFootballClub(x) & Fluminense(x)\n</PREMISES>\n<CONCLUSION>\nall x. (PlaysFor(x) & Brazilian(x) -> False)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> BornIn(1995, x))\nall x. (Ailton(x) -> CommonlyKnownAs(Ailton))\nAilton(x) & Person(x) & BornIn(1995, x) & Ailton(x) & FootballPlayer(x) & LoanedOutTo(Braga, x)\nAilton(x) & Person(x) & BornIn(1995, x) & Ailton(x) & BrazilianFootballer(x) & PlaysFor(Nautico, x)\nNautico(x) & FootballClub(x) & Braga(x) & FootballClub(x)\nFluminense(x) & FootballClub(x)\n</PREMISES>\n<CONCLUSION>\nall x. (PlaysFor(x, Nautico) -> -BrazilianFootballer(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (FootballPlayer(x) & LoanedOutTo(x) -> Braga(x))\nall x. (Footballer(x) -> Brazilian(x) & Nautico(x))\nNautico(x) & Braga(x)\nFootballClub(x) -> (Nautico(x) & Braga(x))\nFootballClub(Fluminense)\n</PREMISES>\n<CONCLUSION>\nall x. (Nautico(x) & FootballPlayer(x) -> Brazilian(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Person(x) -> BornIn1995(x))\nall x. (Ailton(x) -> CommonlyKnownAs(Ailton))\nall x. (Ailton(x) -> FootballPlayer(x) & LoanedOut(x) -> Braga)\nall x. (Ailton(x) & Brazilian(x) -> Footballer(x) & PlaysFor(Nautico))\nall x. (Nautico(x) & Braga(x) -> FootballClub(x))\nall x. (Fluminense(x) -> FootballClub(x))\n</PREMISES>\n<CONCLUSION>\nall x. ((Nautico(x) & Brazilian(x)) -> -Footballer(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (FootballPlayer(x) & LoanedOutTo(Braga(x)) -> Ailton(x))\nall x. (BrazillianFootballer(x) & Nautico(x) -> Ailton(x))\nNautico(x) & Braga(x) |- FootballClub(x)\nFootballClub(x) |- Fluminense(x)\n</PREMISES>\n<CONCLUSION>\nall x. (Nautico(x) & Brazilian(x) -> False)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Person(x) & BornIn1995(x) & Ailton(x) -> FootballPlayer(x))\nall x. (Person(x) & Ailton(x) & FootballPlayer(x) & LoanedOutTo(x, Braga) -> FootballClub(x))\nall x. (Person(x) & Ailton(x) & FootballClub(x) & Brazilian(x) -> Footballer(x))\nall x. (Person(x) & Ailton(x) & FootballClub(x) & FootballClub(x) -> Nautico(x) & Braga(x))\nall x. (Person(x) & FootballClub(x) -> Fluminense(x))\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) & Nautico(x) & Brazilian(x) -> False)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> BornIn1995(x))\nall x. (Person(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Person(x) & FootballPlayer(x) & BornIn1995(x) -> LoanedOutTo(Braga(x)))\nall x. (Person(x) & FootballPlayer(x) & BornIn1995(x) & Footballer(x) & Club(x) -> Nautico(x))\nall x. (Club(x) & Braga(x) -> Nautico(x))\nall x. (Club(x) -> Fluminense(x))\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) & FootballPlayer(x) & Nautico(x) & Brazilian(x) -> -Brazilian(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Person(x) & YearOfBirth(x, 1995) & Person(x) -> Ailton(x))\nall x. (Person(x) & Ailton(x) & FootballPlayer(x) & LoanedOut(x, Braga(x)) -> FootballPlayer(x))\nall x. (Person(x) & Ailton(x) & FootballPlayer(x) & Brazilian(x) & FootballPlayer(x) -> Footballer(x))\nall x. (Club(x) & Braga(x) & Nautico(x) -> Club(x))\nall x. (Club(x) & Braga(x) & Nautico(x) -> Club(x))\nall x. (Club(x) & Fluminense(x) -> Club(x))\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) & FootballPlayer(x) & Nautico(x) & Brazilian(x) -> -Brazilian(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Person(x) & BirthYear(x, 1995) & CommonName(x, \"Ailton\") -> Name(x, \"Ailton\"))\nall x. (Person(x) & Position(x, \"FootballPlayer\") & LoanedOut(x, Braga) -> FootballPlayer(x))\nall x. (Person(x) & Nationality(x, \"Brazillian\") & Team(x, Nautico) -> Footballer(x))\nall x. (Team(x, Nautico) & Team(x, Braga) -> Club(x))\nall x. (Person(x) & Position(x, \"FootballClub\") -> Club(x))\n</PREMISES>\n\n<CONCLUSION>\nall x. (Person(x) & Team(x, Nautico) & Nationality(x, \"Brazilian\") -> -Nationality(x, \"Brazilian\"))\n</CONCLUSION>",
    "<PREMISES>\nall x. (BornIn1995(x) -> Ailton(x))\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(Ailton) & FootballPlayer(Ailton) & Nautico(Ailton)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & Nautico = Braga\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\n</PREMISES>\n<CONCLUSION>\nall x. (Nautico(x) -> -BrazillianFootballer(x))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: No one playing for Nautico is Brazilian.\nFOL: all x. (Nautico(x) -> -BrazillianFootballer(x))\n</EVALUATE>",
    "<PREMISES>\nall x. (Person(x) -> BornIn(1995, x))\nall x. (Ailton(x) -> CommonlyKnownAs(Ailton))\nAilton(x) & Person(x) & LaLiga(x) & LoanedOut(x, Braga)\nAilton(x) & Person(x) & Nationality(x, Brazilian) & Footballer(x) & PlaysFor(x, Nautico)\nNautico(x) & LaLiga(x) & Braga(x)\nFluminense(x) & LaLiga(x)\n</PREMISES>\n<CONCLUSION>\nall x. (PlaysFor(x, Nautico) -> Nationality(x, Brazilian))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (Person(x) -> BornIn(1995, x))\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: Ailton(x) & Person(x) & LaLiga(x) & LoanedOut(x, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nF",
    "<PREMISES>\nall x. (Person(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Person(x) & BornIn1995(x) & Ailton(x) -> FootballPlayer(x))\nall x. (Person(x) & Ailton(x) -> Footballer(x) & Brazilian(x) & PlaysFor(Nautico(x)))\nall x. (Club(x) & Braga(x) -> FootballClub(x))\nall x. (Club(x) & Fluminense(x) -> FootballClub(x))\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) & PlaysFor(Nautico(x)) -> Not(Brazilian(x)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & BornIn1995(x) & CommonlyKnownAs(Ailton(x)) -> Name(x, Ailton))\nall x. (Person(x) & FootballPlayer(x) & LoanedOut(x, Braga(x)) -> Player(x, Braga(x)))\nall x. (Person(x) & Brazilian(x) & Player(x, Nautico(x)) -> BrazilianPlayer(x, Nautico(x)))\nall x. (Club(x) & Player(x, Braga(x)) & Player(x, Nautico(x))) -> Club(x, Braga(x), Nautico(x))\nClub(Fluminense)\n</PREMISES>\n<CONCLUSION>\nall x. (Player(x, Nautico(x)) -> Brazilian(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Ailton(x) & FootballPlayer(x) & LoanedOutTo(Braga(x)) -> FootballPlayer(x))\nall x. (Ailton(x) & BrazilianFootballer(x) & PlaysFor(Nautico(x)) -> Footballer(x))\nall x. (Nautico(x) & Braga(x) -> FootballClub(x))\nFootballClub(Fluminense)\n</PREMISES>\n<CONCLUSION>\nall x. (PlaysFor(Nautico(x)) -> Brazilian(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & BornIn1995(x) & CommonlyKnownAs(Ailton(x)) -> Ailton(x))\nall x. (Ailton(x) & FootballPlayer(x) & LoanedOutTo(Braga(x)) -> FootballPlayer(x))\nall x. (Ailton(x) & BrazilianFootballer(x) & PlaysFor(Nautico(x)) -> Ailton(x))\nNautico(x) & Braga(x)\nFootballClub(x) & Nautico(x) & Braga(x)\nFootballClub(x) & Fluminense(x)\n</PREMISES>\n<CONCLUSION>\nall x. (Nautico(x) & BrazilianFootballer(x) -> -BrazilianFootballer(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Person(x) & BornIn1995(x) & Ailton(x) -> FootballPlayer(x))\nall x. (Person(x) & Ailton(x) -> FootballPlayer(x) & LoanedOut(x) & Braga(x))\nall x. (Person(x) & Ailton(x) -> FootballPlayer(x) & Brazilian(x) & Nautico(x))\nall x. (Nautico(x) & Braga(x) -> FootballClub(x))\nall x. (FootballClub(x) -> FootballClub(x))\nall x. (Person(x) & Club(x) -> FootballPlayer(x))\nall x. (Person(x) & Club(x) & Brazilian(x) -> BrazilianFootballer(x))\nall x. (Person(x) & Club(x) & Nautico(x) -> NauticoPlayer(x))\nall x. (NauticoPlayer(x) -> Brazilian(x))\nall x. (Person(x) & Club(x) & Braga(x) -> BragaPlayer(x))\nall x. (Person(x) & Club(x) & Nautico(x) & Braga(x) -> BothClub(x",
    "<PREMISES>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (FootballPlayer(x) & LoanedOutTo(x, Braga) -> Ailton(x))\nall x. (BrazillianFootballer(x) & PlaysFor(x, Nautico) -> Ailton(x))\nNautico(x) & Braga(x)\nFootballClub(x) -> (Nautico(x) | Braga(x))\nFluminense(x)\n</PREMISES>\n<CONCLUSION>\nall x. (PlaysFor(x, Nautico) -> -BrazillianFootballer(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> Born(1995, x))\nall x. (Person(x) & CommonlyKnownAs(Ailton, x) -> Ailton(x))\nall x. (Person(x) & Ailton(x) & Position(x) -> FootballPlayer(x))\nall x. (Person(x) & Position(x) & LoanedTo(x, Braga) -> FootballPlayer(x))\nall x. (Person(x) & Nationality(x) -> Brazilian(x))\nall x. (Person(x) & Nationality(x) -> Footballer(x))\nall x. (Person(x) & Team(x) -> Nautico(x))\nall x. (Person(x) & Team(x) -> Braga(x))\nall x. (Person(x) & Team(x) -> FootballClub(x))\nall x. (Person(x) & Team(x) -> Fluminense(x))\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) & Team(x) & Nationality(x) -> -Brazilian(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Person(x) -> BornIn1995(x))\nall x. (Person(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Person(x) & FootballPlayer(x) & LoanedOutTo(Braga(x)) -> Ailton(x))\nall x. (Person(x) & Nationality(x) & Nationality(x) = Brazilian(x) & Footballer(x) & PlaysFor(Nautico(x)) -> Ailton(x))\nall x. (FootballClub(x) -> Nautico(x) & Braga(x))\nall x. (FootballClub(x) -> Fluminense(x))\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) & PlaysFor(Nautico(x)) -> -Nationality(x) = Brazilian(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> CommonlyKnownAs(Ailton))\nall x. (Person(x) & BornIn1995(x) & Person(x) -> Ailton(x))\nall x. (Person(x) & IsFootballPlayer(x) & LoanedOut(x, Braga) -> FootballPlayer(x))\nall x. (Person(x) & IsFootballPlayer(x) & IsFootballer(x) & PlaysFor(x) -> Nautico(x))\nall x. (Nautico(x) & Braga(x) -> Club(x))\nall x. (Club(x) -> FootballClub(x))\nall x. (Club(x) -> Fluminense(x))\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) & PlaysFor(x) & IsFootballer(x) -> -Brazilian(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> (Brazillian(x) & Club(x)))\nall x. (Person(x) -> (Club(x) -> FootballClub(x)))\nall x. (Person(x) -> (Club(x) -> (Braga(x) | Nautico(x))))\nNautico(brazilian)\nBraga(football)\nFluminense(football)\n</PREMISES>\n<CONCLUSION>\n-All x. (Person(x) & Nautico(x) & Brazillian(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> Born(1995, x))\nall x. (Person(x) & FootballPlayer(x) & LoanedOut(x, y) -> y = Braga)\nall x. (Person(x) & Nationality(x) = Brazilian & Footballer(x) -> Player(x) = Nautico)\nall x. (x & y -> (x = Nautico or y = Braga))\nall x. (x & FootballClub(x) -> Player(x) = Fluminense)\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) & Player(x) = Nautico & Nationality(x)!= Brazilian)\n</CONCLUSION>",
    "<PREMISES>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (IsFootballPlayer(x) & LoanedOutTo(x, Braga) -> FootballClub(x) = Braga)\nall x. (IsBrazillianFootballer(x) & PlaysFor(x, Nautico) -> Nautico = FootballClub(x))\nNautico = FootballClub(x) & Braga = FootballClub(x)\nFluminense = FootballClub(x)\n</PREMISES>\n<CONCLUSION>\nall x. (PlaysFor(x, Nautico) -> -IsBrazillianFootballer(x))\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 178,
  "responses": [
   [
    "<PREMISES>\nall x. (Person(x) -> Born(1995, x))\nall x. (Person(x) & CommonlyKnownAs(Ailton, x) -> Ailton(x))\nPerson(AiltonSilva) & Born(1995, AiltonSilva) & CommonlyKnownAs(Ailton, AiltonSilva)\nall x. (Person(x) & FootballPlayer(x) & LoanedOutTo(Braga, x) -> Ailton(x))\nPerson(AiltonSilva) & Born(1995, AiltonSilva) & CommonlyKnownAs(Ailton, AiltonSilva) & FootballPlayer(AiltonSilva) & LoanedOutTo(Braga, AiltonSilva)\nall x. (Person(x) & BrazilianFootballer(x) & PlaysFor(Nautico, x) -> Ailton(x))\nPerson(AiltonSilva) & Born(1995, AiltonSilva) & CommonlyKnownAs(Ailton, AiltonSilva) & BrazilianFootballer(AiltonSilva) & PlaysFor(Nautico, AiltonSilva)\nall x. (Club(x) & FootballClub(x) -> Nautico(x) & Braga(x))\nClub(N",
    "<PREMISES>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & FootballPlayer(AiltonSilva) & PlaysFor(Nautico, AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & (Nautico & Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\n</PREMISES>\n<CONCLUSION>\nAilton Silva foes not play for a football club.\nFOL: -PlaysFor(AiltonSilva, FootballClub)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & BornIn1995(x) & CommonName(x, 'Ailton') -> Name(x, 'Ailton Silva'))\nall x. (Person(x) & Ailton(x) & FootballPlayer(x) & LoanedOut(x, Braga(x)) -> FootballPlayer(x))\nall x. (Person(x) & Ailton(x) & Brazilian(x) & Footballer(x) & Team(x, Nautico(x)) -> Footballer(x))\nall x. (Team(x) & x & Braga(x) & Nautico(x) -> Team(x))\nall x. (Team(x) & x & Football(x) -> Team(x))\n</PREMISES>\n\n<CONCLUSION>\nall x. (Person(x) & NotTeam(x) -> NotFootballPlayer(x))\nall x. (Person(x) & Ailton(x) & NotFootballPlayer(x) -> NotName(x, 'Ailton Silva'))\nName(Ailton, 'Ailton Silva')\n</CONCLUSION>",
    "<PREMISES>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (FootballPlayer(x) & LoanedOut(x, y) -> Braga(y))\nall x. (Footballer(x) & PlaysFor(x, y) -> Nautico(y))\nNautico(y) & Braga(y)\nFootballClub(y) & Nautico(y) & Braga(y)\nFootballClub(y) & Fluminense(y)\n</PREMISES>\n<CONCLUSION>\n-FootballClub(Ailton Silva)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> Born(x, 1995))\nall x. (Person(x) & KnownAs(x, 'Ailton') -> Ailton(x))\nall x. (Person(x) & Ailton(x) & Sport(x) & Position(x) = 'Footballer' & Team(x) = 'Nautico' -> BrazilianFootballer(x))\nall x. (Team(x) & Team(x) = 'Nautico') -> Club(x)\nall x. (Team(x) & Team(x) = 'Braga') -> Club(x)\nall x. (Team(x) & Team(x) = 'Fluminense') -> Club(x)\n</PREMISES>\n\n<CONCLUSION>\nall x. (Person(x) & Team(x) & Team(x) = 'FootballClub') -> NotPlayForFootballClub(x)\nall x. (Person(x) & Ailton(x) & Team(x) & Team(x) = 'Nautico') -> PlayForFootballClub(x)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Person(AiltonSilva) & Born"
   ],
   [
    "<PREMISES>\nall x. (Person(x) -> Born(1995, x))\nall x. (Person(x) & CommonlyKnownAs(Ailton, x) -> Ailton(x))\nall x. (Person(x) & FootballPlayer(x) & LoanedOutTo(Braga, x) -> FootballPlayer(x))\nall x. (Person(x) & Nationality(x) & Nationality(x) = Brazillian & Footballer(x) & Club(x) = Nautico(x) -> Footballer(x))\nall x. (Club(x) & Club(x) = Braga(x)) & Club(x) = Nautico(x) -> Club(x) = Braga(x) & Club(x) = Nautico(x)\nall x. (Club(x) & Club(x) = Fluminense(x)) -> Club(x) = Fluminense(x)\n</PREMISES>\n<CONCLUSION>\n-All x. (Person(x) & FootballClub(x) -> FootballPlayer(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & BornIn1995(x) & CommonName(x, 'Ailton') -> CommonName(x, 'Ailton'))\nall x. (Person(x) & Ailton(x) & FootballPlayer(x) & LoanedOutTo(x, Braga) -> FootballPlayer(x))\nall x. (Person(x) & Ailton(x) & Brazillian(x) & Footballer(x) & PlaysFor(x, Nautico) -> Footballer(x))\nall x. (Club(x) & Nautico(x) & Braga(x) -> Club(x))\nall x. (Club(x) & Fluminense(x) -> Club(x))\n</PREMISES>\n<CONCLUSION>\n- FootballPlayer(worksheet)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (Person(x) & BornIn1995(x) & CommonName(x, 'Ailton') -> CommonName(x, 'Ailton'))\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Person(x) & Ailton(x)",
    "<PREMISES>\nall x. (BornIn1995(x) -> Ailton(x))\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailton) & FootballPlayer(ailton) & PlaysFor(Nautico, ailton)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\n</PREMISES>\n<CONCLUSION>\nAilton Silva foes not play for a football club.\nFOL: -playsFor(ailton, FootballClub)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> Born(1995, x))\nall x. (Person(x) -> CommonlyKnownAs(Ailton, x))\nAilton is a football player.\nall x. (FootballPlayer(x) -> LoanedOutTo(Braga, x))\nAilton is a football player who was loaned out to Braga.\nall x. (Person(x) -> Nationality(Brazil, x))\nall x. (Person(x) -> PlaysFor(Nautico, x))\nAilton Silva is a Brazillian footballer who plays for Nautico.\nall x. (FootballClub(x) -> HasPlayers(x))\nall x. (FootballClub(x) -> HasPlayers(Braga))\nNautico is a football club along with Braga.\nFootballClub(Nautico)\nFootballClub(Braga)\nall x. (FootballClub(x) -> IsFootballClub(x))\nall x. (Person(x) -> IsPerson(x))\nall x. (Person(x) -> IsFootballClub(x))\nall x. (Person(x) -> IsFootballClub(x))\nFluminense is a football club.\n</PREMISES>\n<CONCLUSION>\n-IsFootballClub(AiltonSilva",
    "<PREMISES>\nall x. (Person(x) & Year(1995, x) & Name(Ailton, x) -> CommonlyKnownAs(Ailton))\nall x. (Player(x) & LoanedOut(x, Braga) -> FootballPlayer(x))\nall x. (Player(x) & Nationality(Brazilian, x) & Team(Nautico, x) -> BrazilianFootballer(x) & FootballPlayer(x))\nall x. (Team(x, Braga) & Team(x, Nautico) -> FootballClub(x))\nTeam(Fluminense, x)\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) & Team(x, FootballClub) -> -FootballPlayer(x))\n-Player(AiltonSilva)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Ailton(x) & FootballPlayer(x) & LoanedOutTo(x, Braga) -> FootballClub(x))\nall x. (Ailton(x) & BrazilianFootballer(x) & FootballClub(x) -> Nautico(x))\nNautico(x) & Braga(x) -> FootballClub(x)\nFootballClub(x) -> Fluminense(x)\n</PREMISES>\n<CONCLUSION>\n- FootballClub(AiltonSilva)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & BornIn1995(x) & CommonlyKnownAs(Ailton(x)) -> Name(x, Ailton))\nall x. (Person(x) & FootballPlayer(x) & LoanedOut(x, Braga(x)) -> Player(x, Ailton))\nall x. (Person(x) & BrazilianFootballer(x) & Player(x, Nautico(x)) -> Player(x, Ailton))\nall x. (Club(x) & FootballClub(x) & (Braga(x) & Nautico(x))) -> Club(x, Ailton)\nClub(Fluminense)\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) & -Player(x, Ailton) -> -FootballClub(x))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (Person(x) & BornIn1995(x) & CommonlyKnownAs(Ailton(x)) -> Name(x, Ailton))\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Person(x) & FootballPlayer(x) &",
    "<PREMISES>\nall x. (BornIn1995(x) -> Ailton(x))\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(ailton) & LoanedOut(ailton, braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(ailton) & FootballPlayer(ailton) & Nautico(ailton)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(nautico) & FootballClub(braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(fluminense)\n</PREMISES>\n<CONCLUSION>\nAilton Silva foes not play for a football club.\nFOL: -FootballPlayer(ailton)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> Born(x, 1995))\nall x. (Person(x) & CommonlyKnownAs(x, 'Ailton') -> Ailton(x))\nall x. (Person(x) & Ailton(x) & FootballPlayer(x) & LoanedOutTo(x, Braga) -> FootballPlayer(x))\nall x. (Person(x) & Ailton(x) & FootballPlayer(x) & BrazilianFootballer(x) & PlaysFor(x, Nautico) -> FootballPlayer(x))\nall x. (Club(x) & Braga(x) & Nautico(x) -> SameClub(x, Braga, Nautico))\nall x. (Club(x) -> FootballClub(x))\nall x. (Person(x) & Club(x) -> PlaysFor(x, x))\n</PREMISES>\n<CONCLUSION>\n-All x. (Person(x) & Club(x) & PlaysFor(x, x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & BirthYear(x, 1995) & CommonName(x, \"Ailton\") -> CommonName(x, \"Ailton Silva\"))\nall x. (Person(x) & Position(x, \"Football Player\") & LoanedOut(x, Braga) -> FootballPlayer(x))\nall x. (Person(x) & BirthYear(x, 1995) & Position(x, \"Footballer\") & Club(x, Nautico) -> Footballer(x))\nall x. (Club(x, Nautico) & Club(x, Braga) -> FootballClub(x))\nall x. (Club(x, Fluminense) -> FootballClub(x))\n</PREMISES>\n\n<CONCLUSION>\n- FootballPlayer(AiltonSilva)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Person(x) -> BornIn1995(x))\nall x. (Ailton(x) -> CommonlyKnownAsAilton(x))\nAilton(x) & FootballPlayer(x) & LoanedOutTo(x, Braga(x))\nAilton(x) & BrazilianFootballer(x) & PlaysFor(x, Nautico(x))\nNautico(x) & FootballClub(x) & Braga(x) & FootballClub(x)\nFluminense(x) & FootballClub(x)\n</PREMISES>\n<CONCLUSION>\n-FootballPlayer(worksheet)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (Person(x) -> BornIn1995(x))\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: Ailton(x) & FootballPlayer(x) & LoanedOutTo(x, Braga(x))\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: Ailton(x) & BrazilianFootballer(x) & PlaysFor(x, Nautico(x))\nTEXT: Nautico is a",
    "<PREMISES>\nall x. (Person(x) & BirthYear(x, 1995) & CommonName(x, \"Ailton\") -> Name(x, \"Ailton\"))\nall x. (Person(x) & Position(x, \"Football Player\") & Team(x, y) & LoanedOut(x, y) -> Team(x, \"Braga\"))\nall x. (Person(x) & Nationality(x, \"Brazilian\") & Position(x, \"Footballer\") & Team(x, y) -> Team(x, \"Nautico\"))\nall x. (Team(x, y) & Team(x, z) -> (Club(x) & Club(z)))\n(Club(Fluminense) & Club(Braga) & Club(Nautico))\n</PREMISES>\n<CONCLUSION>\n-Team(Ailton, FootballClub)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (Person(x) & BirthYear(x, 1995) & CommonName(x, \"Ailton\") -> Name(x, \"Ailton\"))\nTEXT: Ailton is a football player who was loaned out to Braga",
    "<PREMISES>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Ailton(x) & FootballPlayer(x) & LoanedOut(x) -> Braga(x))\nall x. (Ailton(x) & Brazillian(x) & Footballer(x) & Nautico(x) -> FootballClub(x))\nall x. (Braga(x) & Nautico(x) -> FootballClub(x))\nall x. (FootballClub(x) -> Fluminense(x))\n</PREMISES>\n<CONCLUSION>\n- FootballPlayer(AiltonSilva)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> Born(x, 1995))\nall x. (Person(x) & CommonlyKnownAs(x, 'Ailton') -> Ailton(x))\nAilton(x) & FootballPlayer(x) & LoanedOut(x, Braga)\nAilton(x) & BrazilianFootballer(x) & PlaysFor(x, Nautico)\nNautico(x) & Braga(x) & FootballClub(x)\nFluminense(x) & FootballClub(x)\n</PREMISES>\n<CONCLUSION>\n-FootballClub(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> CommonlyKnownAs(Ailton(x)))\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(Ailton) & FootballPlayer(Ailton) & PlaysFor(Nautico, Ailton)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & (Nautico = Braga)\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) -> Not FootballPlayer(x))\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: Person(Ailton) & CommonlyKnownAs(Ailton, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT:"
   ],
   [
    "<PREMISES>\nall x. (Person(x) -> Name(x, 'Ailton Silva'))\nall x. (Person(x) & Year(x, 1995) -> Name(x, 'Ailton'))\nall x. (Person(x) & Position(x, 'Footballer') & Nationality(x, 'Brazilian') & Club(x, 'Nautico') -> True)\nall x. (Club(x, 'Nautico') & Club(x, 'Braga') -> True)\nall x. (Club(x, 'Fluminense') -> True)\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) -> -Club(x, 'Football Club'))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> Born(1995, x))\nall x. (Person(x) & CommonlyKnownAs(x, 'Ailton') -> Ailton(x))\nAilton(x) & FootballPlayer(x) & LoanedOutTo(Braga, x)\nAilton(x) & BrazilianFootballer(x) & PlaysFor(Nautico, x)\nNautico(x) & FootballClub(x) & Braga(x)\nFootballClub(x) & Braga(x)\nFootballClub(x) & Fluminense(x)\n</PREMISES>\n<CONCLUSION>\n- FootballPlayer(worksheet)\n</CONCLUSION>",
    "<PREMISES>\nall x. (BornIn1995(x) -> Ailton(x))\nall x. (Ailton(x) -> FootballPlayer(x))\nAilton(x) & LoanedOut(x, Braga(x))\nall x. (Ailton(x) & Footballer(x) & Club(x) -> Nautico(x))\nNautico(x) & Braga(x) -> FootballClub(x)\nFootballClub(x) -> Fluminense(x)\n</PREMISES>\n<CONCLUSION>\n- FootballPlayer(AiltonSilva)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> Born(x, 1995))\nall x. (Person(x) & CommonlyKnownAs(x, 'Ailton') -> Ailton(x))\nall x. (Person(x) & Ailton(x) & FootballPlayer(x) & LoanedOut(x, Braga) -> FootballPlayer(x))\nall x. (Person(x) & Ailton(x) & FootballPlayer(x) & Brazilian(x) & PlaysFor(x, Nautico) -> FootballPlayer(x))\nall x. (FootballClub(x) & Braga(x) & Nautico(x) -> FootballClub(x))\nall x. (FootballClub(x) -> HasPlayers(x))\nall x. (Person(x) & FootballClub(x) -> PlaysFor(x, x))\nall x. (Person(x) & FootballClub(x) -> IsMember(x))\nall x. (Person(x) -> NotIsMember(x, FootballClub(x)))\nall x. (Fluminense(x) -> FootballClub(x))\n</PREMISES>\n<CONCLUSION>\n-IsMember(Ailton, FootballClub(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Ailton(x) & FootballPlayer(x) & LoanedOutTo(x, Braga) -> FootballClub(x))\nall x. (Ailton(x) & BrazillianFootballer(x) & PlaysFor(x, Nautico) -> FootballClub(x))\nNautico & Braga & FootballClub(x)\nFluminense & FootballClub(x)\n</PREMISES>\n<CONCLUSION>\n- FootballClub(AiltonSilva)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 179,
  "responses": [
   [
    "<PREMISES>\nall x. (Person(x) -> Born(x, 1995))\nall x. (Person(x) & CommonlyKnownAs(x, 'Ailton') -> Ailton(x))\nall x. (Person(x) & Ailton(x) & FootballPlayer(x) & LoanedOutTo(x, Braga) -> FootballPlayer(x))\nall x. (Person(x) & Ailton(x) & FootballPlayer(x) & BrazilianFootballer(x) & PlaysFor(x, Nautico) -> FootballPlayer(x))\nall x. (FootballClub(x) & Braga(x) -> Nautico(x) & Braga(x))\nall x. (FootballClub(x) -> Fluminense(x))\n</PREMISES>\n<CONCLUSION>\n-LoanedOutTo(Ailton, Braga)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> Name(x) = 'Ailton Silva')\nall x. (Person(x) & YearOfBirth(x) = 1995 & Position(x) = 'Footballer' & Team(x) = 'Nautico')\nall x. (Team(x) & Team(x) = 'Braga')\nall x. (Team(x) & Team(x) = 'Fluminense')\n</PREMISES>\n<CONCLUSION>\n-LoanOut(x, 'Braga')\n</CONCLUSION>",
    "<PREMISES>\nall x. (Born(x, 1995) -> CommonlyKnownAs(Ailton(x)))\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: BrazillianFootballer(AiltonSilva) & FootballPlayer(AiltonSilva) & PlaysFor(Nautico, AiltonSilva)\nTEXT: Nautico is a football club along with Braga.\nFOL: FootballClub(Nautico) & FootballClub(Braga) & Nautico = Braga\nTEXT: Fluminense is a football club.\nFOL: FootballClub(Fluminense)\n</PREMISES>\n<CONCLUSION>\nAilton was not loaned out to a football club.\nFOL: -LoanedOut(Ailton, FootballClub(x))\n</EVALUATE>",
    "<PREMISES>\nall x. (Person(x) & BirthYear(x, 1995) & CommonName(x, 'Ailton') -> CommonName(x, 'Ailton'))\nall x. (Player(x) & LoanedOut(x) -> FootballPlayer(x))\nall x. (Person(x) & BirthYear(x, 1995) & CommonName(x, 'Ailton') & FootballPlayer(x) -> BrazilianFootballer(x) & Club(x, Nautico))\nall x. (Club(x) & Club(x, Braga) -> FootballClub(x))\nall x. (Club(x) -> FootballClub(x))\nall x. (Club(x) -> FootballClub(x))\nall x. (Person(x) & CommonName(x, 'Ailton') & -LoanedOut(x) -> -FootballClub(x))\n</PREMISES>\n<CONCLUSION>\n-LoanedOut(Ailton)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & BirthYear(x, 1995) & CommonName(x, 'Ailton') -> Name(x, 'Ailton'))\nall x. (Person(x) & Position(x, 'Footballer') & TeamLoan(x, Braga) -> LoanedOut(x))\nall x. (Person(x) & Nationality(x, 'Brazilian') & Team(x, Nautico) & Position(x, 'Footballer') -> Footballer(x))\nall x. (Team(x, Braga) & Team(x, Nautico)) -> Clubs(x, [Braga, Nautico])\nTeam(x, Fluminense)\n</PREMISES>\n<CONCLUSION>\n-LoanedOut(Ailton)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Born(x, 1995) -> CommonlyKnownAs(Ailton(x)))\nall x. (Ailton(x) & FootballPlayer(x) & LoanedOut(x, y) -> Braga(y))\nall x. (Ailton(x) & BrazilianFootballer(x) & FootballClub(x) -> Nautico(x))\nNautico(x) & Braga(x) -> FootballClub(x)\nFootballClub(x) -> Fluminense(x)\n</PREMISES>\n<CONCLUSION>\n-LoanedOut(Ailton, y)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Born(x, 1995) -> CommonlyKnownAs(x, 'Ailton'))\nall x. (Ailton(x) & FootballPlayer(x) & LoanedOut(x, y) -> y = Braga)\nAilton Silva(x) & FootballPlayer(x) & Nautico(x)\nall x. (Nautico(x) & FootballClub(x) -> Braga(x))\nall x. (FootballClub(x) -> Fluminense(x))\n</PREMISES>\n<CONCLUSION>\n-LoanedOut(Ailton, Braga)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & BirthYear(x, 1995) & CommonName(x, 'Ailton') -> Name(x, 'Ailton'))\nall x. (Person(x) & Position(x) & Team(x) & LoanedOut(x) -> Player(x))\nPerson(AiltonSilva) & Position(AiltonSilva) & Team(AiltonSilva) & LoanedOut(AiltonSilva)\nall x. (Person(x) & Nationality(x) & Position(x) & Team(x) -> Brazilian(x))\nPerson(AiltonSilva) & Nationality(AiltonSilva) & Team(AiltonSilva)\nall x. (Club(x) & Team(x) -> Member(x))\nClub(Nautico) & Team(Nautico) & Team(Braga)\nall x. (Club(x) & Team(x) -> FootballClub(x))\nClub(Nautico) & Club(Braga)\nall x. (Club(x) -> FootballClub(x))\nClub(Fluminense)\n</PREMISES>\n<CONCLUSION>\n-LoanedOut(AiltonSilva)\n</CONCLUSION>",
    "<PREMISES>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (FootballPlayer(x) & LoanedOut(x) & Braga(x) -> Ailton(x))\nall x. (BrazillianFootballer(x) & Nautico(x) -> Ailton(x))\nNautico & Braga & FootballClub(x) -> Ailton(x)\nFootballClub(x) -> Fluminense(x)\n</PREMISES>\n<CONCLUSION>\n-LoanedOut(Ailton)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & BornIn1995(x) & CommonlyKnownAs(Ailton(x)) -> Ailton(x))\nall x. (Ailton(x) & FootballPlayer(x) & LoanedOutTo(x, Braga(x)) -> Braga(x))\nall x. (Ailton(x) & BrazilianFootballer(x) & PlaysFor(x, Nautico(x)) -> Nautico(x))\nall x. (Nautico(x) & FootballClub(x) & FootballClub(x) = Braga(x)) \nall x. (FootballClub(x) -> FootballClub(x) = Fluminense(x))\n</PREMISES>\n<CONCLUSION>\n-LoanedOutTo(Ailton, Braga)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (Person(x) & BornIn1995(x) & CommonlyKnownAs(Ailton(x)) -> Ailton(x))\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Ailton(x) & FootballPlayer(x) & LoanedOutTo(x"
   ],
   [
    "<PREMISES>\nall x. (Person(x) -> BornIn1995(x))\nall x. (Person(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Person(x) -> FootballPlayer(x) & LoanedOut(x) -> Braga(x))\nall x. (Person(x) -> FootballPlayer(x) & Nationality(x) -> Brazilian(x) & Team(x) -> Nautico(x))\nall x. (Team(x) -> FootballClub(x) & Team(x) -> Braga(x))\nall x. (Team(x) -> FootballClub(x) & Team(x) -> Fluminense(x))\n</PREMISES>\n<CONCLUSION>\n-LoanedOut(Ailton)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Person(x) & BornIn1995(x) & -Brazillian(x) -> FootballPlayer(x))\nall x. (Person(x) & FootballPlayer(x) & LoanedOutTo(x, y) -> LoanedOutToBraga(x))\nall x. (Person(x) & FootballPlayer(x) & Brazillian(x) & PlaysFor(x, y) -> PlaysForNautico(x))\nall x. (Club(x) -> Nautico(x) & Braga(x))\nall x. (Club(x) -> Fluminense(x))\n</PREMISES>\n<CONCLUSION>\n-LoanedOutToBraga(Ailton)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> Name(x, 'Ailton Silva'))\nall x. (Person(x) & BirthYear(x, 1995) & Name(x, 'Ailton'))\nall x. (Person(x) -> CommonName(x, 'Ailton'))\nall x. (Person(x) & Position(x) -> FootballPlayer(x))\nall x. (Person(x) & LoanedOut(x) -> FootballPlayer(x) & Club(x) = Braga)\nall x. (Person(x) & Nationality(x) -> Footballer(x) & Nationality(x) = Brazilian & Position(x) -> Footballer(x) & Club(x) = Nautico)\nall x. (Club(x) & Club(x) = Braga & Club(x) = Nautico)\nall x. (Club(x) -> Member(x) = FootballClub(x))\nall x. (Club(x) -> Name(x, 'Fluminense'))\n</PREMISES>\n<CONCLUSION>\n-LoanedOut(Ailton)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> Name(x, 'Ailton Silva'))\nall x. (Person(x) & BirthYear(x, 1995) -> CommonName(x, 'Ailton'))\nFootballPlayer(x) & LoanedOut(x, y) -> x : y\nFootballPlayer(Ailton Silva)\nBrazillianFootballer(x) & Club(x, y) -> x : y\nFootballClub(x) & Club(x, y) -> x : y\nNautico : Braga\nFluminense : FootballClub()\n</PREMISES>\n<CONCLUSION>\n-LoanedOut(Ailton Silva, y)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & BornIn1995(x) & CommonlyKnownAs(Ailton(x)) -> Ailton(x))\nall x. (Ailton(x) & FootballPlayer(x) & LoanedOut(x) -> Braga(x))\nall x. (Ailton(x) & BrazilianFootballer(x) & PlaysFor(x) -> Nautico(x))\nNautico(x) & Braga(x)\nall x. (FootballClub(x) -> (Nautico(x) | Braga(x)))\nFluminense(x)\n</PREMISES>\n<CONCLUSION>\n-LoanedOut(Ailton)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Person(x) -> BornIn1995(x))\nall x. (Person(x) & BornIn1995(x) & CommonName(x) -> CommonName(x, 'Ailton'))\nPerson(Ailton) & BornIn1995(Ailton) & CommonName(Ailton, 'Ailton')\nall x. (Person(x) & FootballPlayer(x) & LoanedOut(x, y) -> y = Braga)\nPerson(Ailton) & FootballPlayer(Ailton) & LoanedOut(Ailton, Braga)\nall x. (Person(x) & Nationality(x) = Brazilian & Footballer(x) & PlaysFor(x) = Nautico -> Nautico = FootballClub(x))\nNautico = FootballClub(Ailton)\nNautico = FootballClub(Braga)\nFootballClub(Nautico) & FootballClub(Braga)\nall x. (FootballClub(x) -> x = Fluminense)\nFluminense = FootballClub(x)\n</PREMISES>\n<CONCLUSION>\n-LoanedOut(Ailton, Braga)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\n",
    "<PREMISES>\nall x. (Person(x) -> BornIn(1995, x))\nall x. (Ailton(x) -> CommonlyKnownAs(Ailton))\nFootballPlayer(x) -> LoanedOutTo(x)\nAilton(x) -> FootballPlayer(x) & LoanedOutTo(x)\nBrazillianFootballer(x) -> Person(x) & FootballPlayer(x) & Team(x) = Nautico\nTeam(x) -> Team(x) = Braga & Team(x) = Nautico\nFootballClub(x) -> Team(x) = Fluminense\n</PREMISES>\n<CONCLUSION>\n-LoanedOutTo(Ailton)\n</CONCLUSION>",
    "<PREMISES>\nall x. (BornIn1995(x) -> Ailton(x))\nall x. (Ailton(x) -> FootballPlayer(x))\nAilton(x) & LoanedOut(x, Braga(x))\nall x. (Ailton(x) & BrazilianFootballer(x) & FootballPlayer(x) -> Nautico(x))\nNautico(x) & Braga(x)\nall x. (FootballClub(x) -> Nautico(x) | Braga(x))\nall x. (FootballClub(x) -> Fluminense(x))\n</PREMISES>\n<CONCLUSION>\n-LoanedOut(Ailton, Braga)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & BirthYear(x, 1995) & CommonName(x, 'Ailton') -> Name(x, 'Ailton'))\nall x. (Person(x) & Position(x, 'FootballPlayer') & Team(x, 'Braga') -> LoanedOut(x, 'Braga'))\nall x. (Person(x) & Nationality(x, 'Brazilian') & Position(x, 'Footballer') & Team(x, 'Nautico') -> Team(x, 'Nautico'))\nall x. (Team(x, 'Braga') & Team(x, 'Nautico')) -> SameTeam(x, 'Braga', x, 'Nautico')\nall x. (Team(x, 'Fluminense') -> FootballClub(x, 'Fluminense'))\n</PREMISES>\n<CONCLUSION>\n-LoanedOut(Ailton, 'Braga')\n</CONCLUSION>",
    "<PREMISES>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Ailton(x) & FootballPlayer(x) & LoanedOutTo(x, y) -> y = Braga)\nAilton Silva\nall x. (Ailton Silva & BrazilianFootballer(x) & PlaysFor(x, y) -> y = Nautico)\nNautico\nall x. (x & Braga -> FootballClub(x))\nFluminense\n</PREMISES>\n<CONCLUSION>\n-LoanedOutTo(Ailton Silva, Braga)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Person(x) & BirthYear(x, 1995) & CommonName(x, 'Ailton') -> Name(x, 'Ailton'))\nall x. (Person(x) & Sport(x) & Position(x, 'Footballer') & LoanedOut(x) -> Team(x, 'Braga'))\nall x. (Person(x) & Nationality(x, 'Brazilian') & Sport(x) & Position(x, 'Footballer') & Team(x, 'Nautico') -> True)\nall x. (Team(x, 'Nautico') & Team(x, 'Braga') -> True)\nTeam(x, 'Fluminense')\n</PREMISES>\n<CONCLUSION>\n-LoanedOut(Ailton)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Person(x) & BornIn1995(x) & Ailton(x) -> FootballPlayer(x))\nall x. (Person(x) & Ailton(x) -> LoanedOutTo(Braga(x)))\nall x. (Person(x) & Nationality(x) = Brazillian(x) & Ailton(x) -> Footballer(x) & Club(x) = Nautico(x))\nall x. (Club(x) & Braga(x) -> FootballClub(x) & FootballClub(x) = Braga(x))\nall x. (Club(x) -> FootballClub(x))\nall x. (Club(x) & Fluminense(x) -> FootballClub(x))\n</PREMISES>\n<CONCLUSION>\n-LoanedOutTo(Braga(workers))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & BornIn1995(x) & CommonlyKnownAs(Ailton(x))) -> SamePerson(x, Ailton)\nall x. (Person(x) & Ailton(x) & FootballPlayer(x)) -> LoanedOutTo(x, Braga)\nall x. (Person(x) & Ailton(x) & BrazillianFootballer(x) & PlaysFor(x, Nautico)) -> SameClub(x, Braga)\nsame x. (FootballClub(x) & Braga(x)) -> Nautico(x)\nFootballClub(Fluminense)\n</PREMISES>\n<CONCLUSION>\n-LoanedOutTo(Ailton, Braga)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (Person(x) & BornIn1995(x) & CommonlyKnownAs(Ailton(x))) -> SamePerson(x, Ailton)\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Person(x) & Ailton(x) & FootballPlayer(x)) -> LoanedOutTo(x, Braga)\nTEXT",
    "<PREMISES>\nall x. (BornIn1995(x) -> Ailton(x))\nall x. (Ailton(x) -> FootballPlayer(x))\nall x. (Ailton(x) & LoanedOut(x) -> Braga(x))\nall x. (Ailton(x) & Nationality(x) & Sport(x) -> Nautico(x))\nNautico(x) & Braga(x) -> Club(x)\nClub(x) -> FootballClub(x)\nFootballClub(x) -> Fluminense(x)\n</PREMISES>\n<CONCLUSION>\n-LoanedOut(Ailton)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> BornIn1995(x))\nall x. (Person(x) -> CommonlyKnownAs(x, 'Ailton'))\nPerson(ailton) & BornIn1995(ailton) & CommonlyKnownAs(ailton, 'Ailton')\nall x. (Person(x) & FootballPlayer(x) -> LoanedOutTo(x))\nPerson(ailton) & FootballPlayer(ailton) & LoanedOutTo(ailton, Braga)\nall x. (Person(x) & Footballer(x) & Club(x) -> PlaysFor(x))\nPerson(ailton) & Footballer(ailton) & Club(Nautico) & PlaysFor(ailton, Nautico)\nall x. (Club(x) -> (Braga & Nautico))\nBraga & Nautico\nall x. (Club(x) -> FootballClub(x))\nFluminense & FootballClub(Fluminense)\n</PREMISES>\n<CONCLUSION>\n-LoanedOutTo(ailton, Braga)\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 180,
  "responses": [
   [
    "<PREMISES>\nall x. (Person(x) -> BornIn1995(x))\nall x. (Person(x) -> CommonlyKnownAs(Ailton(x)))\nFootballPlayer(x) & LoanedOutTo(x, Braga(x))\nFootballPlayer(x) & Brazilian(x) & PlaysFor(x, Nautico(x))\nFootballClub(x) & Plays(x, Nautico(x)) & Plays(x, Braga(x))\nFootballClub(x) & Name(x, Fluminense(x))\n</PREMISES>\n<CONCLUSION>\nPerson(x) & BornIn1995(x) & CommonlyKnownAs(Ailton(x)) & PlaysFor(x, Fluminense(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & BirthYear(x, 1995) & CommonName(x, \"Ailton\") -> CommonName(x, \"Ailton Silva\"))\nall x. (Person(x) & Position(x, \"Football Player\") & LoanedOut(x, Braga) -> FootballPlayer(x))\nall x. (Person(x) & BirthCountry(x, \"Brazil\") & Position(x, \"Footballer\") & Club(x, Nautico) -> BrazilianFootballer(x))\nall x. (Club(x, Braga) & Club(x, Nautico) -> Club(x, either(Braga, Nautico)))\nall x. (Club(x, Fluminense) -> FootballClub(x))\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) & Position(x, \"Football Player\") & Club(x, Fluminense) -> FootballPlayer(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & BornIn1995(x) & CommonName(x, 'Ailton') -> Name(x, 'Ailton'))\nall x. (Person(x) & Ailton(x) & FootballPlayer(x) & LoanedOut(x, Braga(x)) -> FootballPlayer(x))\nall x. (Person(x) & Ailton(x) & Footballer(x) & Nationality(x, 'Brazilian') & PlaysFor(x, Nautico(x)) -> Footballer(x))\nall x. (Club(x) & Nautico(x) & Braga(x) -> Club(x))\nall x. (Club(x) & Fluminense(x) -> Club(x))\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) & BornIn1995(x) & CommonName(x, 'Ailton') & Name(x, 'Ailton') & PlaysFor(x, Fluminense(x)) -> Person(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> Name(x, 'Ailton Silva') & Age(x, 1995))\nall x. (Person(x) -> FootballPlayer(x) & LoanedOut(x, Braga))\nPerson(Ailton Silva)\nFootballPlayer(Ailton)\nClub(Nautico)\nFootballClub(Nautico)\nFootballClub(Braga)\nFootballClub(Fluminense)\n</PREMISES>\n<CONCLUSION>\n-Loan(Ailton, Braga)\nClub(Nautico)\nClub(Ailton)\nFootballClub(Fluminense)\nPerson(Ailton Silva)\nFootballPlayer(Ailton)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> Name(x, 'Ailton Silva') & BirthYear(x, 1995))\nall x. (Person(x) -> Position(x, 'Football Player') & LoanedOut(x, Braga))\nall x. (Person(x) -> Nationality(x, 'Brazillian') & Team(x, Nautico))\nNautico & Braga\nall x. (Team(x) -> Position(x, 'Football Club'))\nFluminense\n</PREMISES>\n<CONCLUSION>\n-Team(Ailton Silva) & Fluminense\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Person(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Ailton(x) & FootballPlayer(x) & LoanedOutTo(x, Braga) -> FootballClub(x))\nall x. (Ailton Silva(x) & Footballer(x, Brazillian) & PlaysFor(x, Nautico) -> FootballClub(x))\nall x. (FootballClub(x) & FootballClub(y) -> (x = y))\nFootballClub(Fluminense)\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Ailton(x) & FootballPlayer(x) -> PlaysFor(x, Braga) | PlaysFor(x, Nautico))\nall x. (Ailton Silva(x) -> Person(x))\nall x. (Fluminense(x) -> FootballClub(x))\nall x. (PlaysFor(x, Braga) & PlaysFor(x, Nautico) -> PlaysFor(x, Fluminense))\nall x. (PlaysFor(x, Fluminense) -> Person(x))\nall x. (Person(x) -> PlaysFor(x, Fluminense))\nFOL: Plays",
    "<PREMISES>\nall x. (BornIn1995(x) -> Ailton(x))\nall x. (Ailton(x) -> FootballPlayer(x))\nAilton(x) & LoanedOut(x, Braga(x))\nall x. (Ailton(x) & BrazilianFootballer(x) & PlaysFor(x, Nautico(x)))\nall x. (Nautico(x) & Braga(x) -> FootballClub(x))\nFootballClub(x) & Fluminense(x)\n</PREMISES>\n<CONCLUSION>\nall x. (Ailton(x) & PlaysFor(x, Fluminense(x)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> Born(x, 1995)) & Person(AiltonSilva) & CommonlyKnownAs(AiltonSilva, Ailton)\nall x. (FootballPlayer(x) & LoanedOut(x, Braga)) -> FootballPlayer(Ailton)\nall x. (Footballer(x) & PlaysFor(x, Nautico)) & Footballer(AiltonSilva) & PlaysFor(AiltonSilva, Nautico)\nall x. (FootballClub(x) & LoanedOut(x, Braga)) & FootballClub(Nautico) & LoanedOut(Nautico, Braga)\nFootballClub(Fluminense)\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) & PlaysFor(x, Fluminense)) -> AiltonSilva\n</CONCLUSION>",
    "<PREMISES>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (FootballPlayer(x) & LoanedOutTo(x, Braga) -> Ailton(x))\nall x. (BrazillianFootballer(x) & PlaysFor(x, Nautico) -> Ailton(x))\nNautico & Braga are football clubs.\nFluminense is a football club.\n</PREMISES>\n<CONCLUSION>\n-Ailton Silva\nall x. (BornIn1995(x) & CommonlyKnownAs(Ailton(x)) & PlaysFor(x, Fluminense) -> Ailton(x))\n</EVALUATE>",
    "<PREMISES>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Ailton(x) & FootballPlayer(x) & LoanedOutTo(x) -> Braga(x))\nAilton Silva(x) & FootballPlayer(x) & BrazillianFootballer(x) & Nautico(x)\nNautico(x) & Braga(x)\nFootballClub(x) -> Nautico(x) & Braga(x)\nFootballClub(x) -> Fluminense(x)\n</PREMISES>\n<CONCLUSION>\nall x. (Ailton(x) & FootballPlayer(x) -> Fluminense(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Person(x) -> BornIn1995(x))\nall x. (Ailton(x) -> CommonlyKnownAsAilton(x))\nFootballPlayer(x) & LoanedOutTo(x) & Braga(x) -> Ailton\nFootballPlayer(x) & Nationality(x) & Brazilian(x) & Nautico(x) -> Ailton\nNautico(x) & Braga(x) -> FootballClub(x)\nFootballClub(x) -> Fluminense(x)\n</PREMISES>\n<CONCLUSION>\nPerson(x) & BornIn1995(x) & Ailton(x) & PlayedFor(x, Fluminense(x)) ->?\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & Born(1995, x) & CommonName(x, 'Ailton') -> Name(x, 'Ailton Silva'))\nall x. (Person(x) & Position(x) = 'Footballer' & Team(x) = 'Braga' -> Player(x))\nall x. (Person(x) & Nationality(x) = 'Brazilian' & Team(x) = 'Nautico' -> Player(x))\nall x. (Team(x) = 'Braga' & Team(x) = 'Nautico') -> SameTeam(x, y)\nall x. (Team(x) = 'Fluminense') -> Team(x)\n</PREMISES>\n<CONCLUSION>\nall x. (Player(x) & Team(x) = 'Fluminense') -> PlayedFor(x)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (Person(x) & Born(1995, x) & CommonName(x, 'Ailton') -> Name(x, 'Ailton Silva'))\nTEXT: Ailton is a football player who was loaned out",
    "<PREMISES>\nall x. (BornIn1995(x) -> Ailton(x))\nall x. (Ailton(x) -> FootballPlayer(x))\nAilton(x) & LoanedOut(x, Braga(x))\nall x. (Ailton(x) & BrazilianFootballer(x) & Nautico(x) -> FootballClub(x))\nall x. (Nautico(x) & Braga(x) -> FootballClub(x))\nFootballClub(x) & Fluminense(x)\n</PREMISES>\n<CONCLUSION>\nall x. (Ailton(x) -> FootballPlayer(x))\nAilton(silva) & BornIn1995(silva)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> Ailton(x))\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Ailton(x) -> FootballPlayer(x)) & Ailton(x) & LoanedOut(x, Braga(x))\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all",
    "<PREMISES>\nall x. (Person(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Ailton(x) & FootballPlayer(x) & LoanedOut(x, Braga) -> FootballClub(x))\nall x. (Ailton(x) & BrazilianFootballer(x) & FootballClub(x) -> FootballClub(x))\nall x. (FootballClub(x) & FootballClub(y) -> (Braga(x) & Braga(y)))\nFootballClub(Fluminense)\n</PREMISES>\n<CONCLUSION>\nall x. (Ailton(x) & Person(x) -> FootballClub(x))\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (Person(x) -> CommonlyKnownAs(Ailton(x)))\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: all x. (Ailton(x) & FootballPlayer(x) & LoanedOut(x, Braga) -> FootballClub(x))\nTEXT: Ailton Silva is a Brazillian footballer who plays for Nautico.\nFOL: all x. (Ailton(x) & Brazilian",
    "<PREMISES>\nall x. (Person(x) & BornIn1995(x) & CommonlyKnownAs(Ailton(x)) -> Name(x, Ailton))\nall x. (FootballPlayer(x) & LoanedOutTo(Braga(x)) -> Player(x, Ailton))\nall x. (BrazillianFootballer(x) & Player(x, Ailton) & Club(x, Nautico) -> Club(x, Ailton))\nall x. (Club(x, Braga) & Club(x, Nautico) -> Club(x, Ailton))\nall x. (FootballClub(x) -> Club(x, Ailton))\n</PREMISES>\n\n<CONCLUSION>\nall x. (Player(x, Ailton) & Club(x, Fluminense) -> PlayedFor(x, Ailton))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Person(x) -> BornIn1995(x))\nall x. (Person(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Person(x) & FootballPlayer(x) & LoanedOutTo(Braga(x)) -> Ailton(x))\nall x. (Person(x) & BrazilianFootballer(x) & PlaysFor(Nautico(x)) -> Ailton(x))\nNautico(x) & Braga(x) <- FootballClub(x)\nFootballClub(x) -> Fluminense(x)\n</PREMISES>\n<CONCLUSION>\n-Fluminense(x)\nall x. (Person(x) -> PlaysFor(x))\nall x. (Person(x) & FootballPlayer(x) -> PlaysFor(x))\nall x. (Person(x) & PlaysFor(Nautico(x)) -> PlaysFor(x))\nall x. (Person(x) & PlaysFor(Nautico(x)) & PlaysFor(Braga(x)) -> PlaysFor(x))\nall x. (Person(x) & PlaysFor(x) -> FootballPlayer(x))\nall x. (Person(x) & PlaysFor(x) & BornIn1995(x) -> PlaysFor(x))\nall x. (Person(x) ->",
    "<PREMISES>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (FootballPlayer(x) & LoanedOut(x, Braga) -> Ailton(x))\nall x. (BrazillianFootballer(x) & PlaysFor(Nautico(x)) -> Ailton(x))\nNautico(x) & Braga(x)\nFootballClub(x) -> (Nautico(x) | Braga(x))\nFluminense(x)\n</PREMISES>\n<CONCLUSION>\n-Fluminense(AiltonSilva)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> Born(x, 1995)) & (CommonlyKnownAs(x, \"Ailton\")) & (Person(x) & FootballPlayer(x) & LoanedOutTo(x, Braga) -> FootballPlayer(x))\nall x. (Person(x) & Footballer(x) & Club(x) -> Nautico(x) & Braga(x))\nall x. (Club(x) -> (Nautico(x) & Braga(x)))\nall x. (Club(x) -> Person(x))\nall x. (Person(x) & Club(x) -> Fluminense(x))\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) & Club(x) -> (Nautico(x) & Braga(x) & Fluminense(x)))\nall x. (Person(x) & Club(x) -> (Nautico(x) & Braga(x)))\nall x. (Person(x) & Club(x) -> Fluminense(x))\nall x. (Person(x) & FootballPlayer(x) & Club(x) -> (Nautico(x) & Braga(x)))\nall x. (Person(x) & FootballPlayer(x) & LoanedOutTo",
    "<PREMISES>\nall x. (Person(x) & Born(1995, x) -> Name(x, 'Ailton Silva'))\nall x. (Person(x) & IsFootballer(x) & Nationality(x, 'Brazilian') & Team(x, 'Nautico') -> IsFootballer(x))\nall x. (Team(x, 'Nautico') & Team(x, 'Braga') -> AreBothFootballClubs(x))\nall x. (Team(x, 'Fluminense') -> AreFootballClubs(x))\n</PREMISES>\n<CONCLUSION>\n-Team(Ailton Silva, 'Braga') & Team(Ailton Silva, 'Nautico') & AreBothFootballClubs(Ailton Silva)\n</CONCLUSION>",
    "<PREMISES>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (IsFootballPlayer(x) & LoanedOutTo(x) -> Braga(x))\nall x. (IsBrazillianFootballer(x) & PlaysFor(x) -> Nautico(x))\nNautico(x) & Braga(x)\nall x. (IsFootballClub(x) -> (Nautico(x) | Braga(x)))\nFluminense(x)\n</PREMISES>\n<CONCLUSION>\nNautico(x) & Braga(x) & Fluminense(x) & IsFootballClub(x) & IsFootballPlayer(AiltonSilva) & PlaysFor(Nautico, AiltonSilva)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Person(x) & BornIn1995(x) & CommonlyKnownAs(Ailton(x)) -> Ailton(x))\nall x. (Person(x) & Ailton(x) & FootballPlayer(x) & LoanedOutTo(Braga(x)) -> Braga(x))\nall x. (Person(x) & Ailton(x) & Footballer(x) & Brazilian(x) & PlaysFor(Nautico(x)) -> Nautico(x))\nNautico(x) & Braga(x)\nall x. (FootballClub(x) -> (Nautico(x) & Braga(x)))\nFluminense(x)\n</PREMISES>\n<CONCLUSION>\n-Fluminense(Ailton Silva)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & BornIn1995(x) & CommonlyKnownAs(Ailton(x)) -> Ailton(x))\nall x. (Ailton(x) & FootballPlayer(x) & LoanedOutTo(x, Braga) -> FootballPlayer(x))\nall x. (Ailton(x) & Brazillian(x) & Footballer(x) & PlaysFor(x, Nautico) -> Footballer(x))\nNautico(x) & Braga(x)\nFootballClub(x) & Nautico(x) & Braga(x) -> FootballClub(x)\nFootballClub(x) & Fluminense(x) -> FootballClub(x)\n</PREMISES>\n<CONCLUSION>\nAilton(x) & Fluminense(x) -> FootballPlayer(x)\n</CONCLUSION>",
    "<PREMISES>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (FootballPlayer(x) & LoanedOutTo(x, Braga) -> Ailton(x))\nall x. (BrazillianFootballer(x) & PlaysFor(x, Nautico) -> Ailton(x))\nNautico(x) & Braga(x)\nFootballClub(x) & x = Nautico(x) & x = Braga(x)\nFootballClub(x) & x = Fluminense(x)\n</PREMISES>\n<CONCLUSION>\nAiltonSilva(x) & PlaysFor(x, Fluminense(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (FootballPlayer(x) & LoanedOutTo(x, Braga) -> Ailton(x))\nall x. (BrazillianFootballer(x) & PlaysFor(x, Nautico) -> Ailton(x))\nNautico(x) & Braga(x) -> FootballClub(x)\nFootballClub(x) -> Fluminense(x)\n</PREMISES>\n<CONCLUSION>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x))) & all x. (FootballPlayer(x) & LoanedOutTo(x, Braga) -> Ailton(x)) & all x. (BrazillianFootballer(x) & PlaysFor(x, Nautico) -> Ailton(x)) & Nautico(x) & Braga(x) -> FootballClub(x) & FootballClub(x) -> Fluminense(x) -> Ailton(Silva)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (BornIn1995(x) -> CommonlyKnown",
    "<PREMISES>\nall x. (Person(x) & BirthYear(x, 1995) & CommonName(x, 'Ailton') -> Name(x, 'Ailton Silva'))\nall x. (Person(x) & Position(x, 'Football Player') & Team(x, 'Braga') -> LoanedOut(x, 'Braga'))\nall x. (Person(x) & Nationality(x, 'Brazilian') & Position(x, 'Footballer') & Team(x, 'Nautico') -> Team(x, 'Nautico'))\nall x. (Team(x, 'Braga') & Team(x, 'Nautico')) -> Club(x, 'Football')\nall x. (Team(x, 'Fluminense')) -> Club(x, 'Football')\n</PREMISES>\n\n<CONCLUSION>\nall x. (Person(x) & Position(x, 'Football Player') & Team(x, 'Fluminense') -> PlayedFor(x, 'Fluminense'))\n</CONCLUSION>"
   ]
  ]
 },
 {
  "index": 181,
  "responses": [
   [
    "<PREMISES>\nall x. (Person(x) -> BornIn1995(x))\nall x. (Person(x) & BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nPerson(Ailton) & BornIn1995(Ailton) & CommonlyKnownAs(Ailton)\nall x. (Person(x) -> FootballPlayer(x))\nFootballPlayer(Ailton)\nall x. (Person(x) -> Brazillian(x))\nBrazillian(Ailton)\nall x. (Person(x) -> PlaysFor(Nautico(x)))\nPlaysFor(Ailton, Nautico)\nall x. (Club(x) -> FootballClub(x))\nFootballClub(Nautico)\nFootballClub(Braga)\nall x. (Club(x) -> FootballClub(x))\nFootballClub(Fluminense)\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) & LoanedOut(x) -> FootballClub(x))\nLoanedOut(Ailton) & FootballClub(Ailton)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> BornIn1995(x))\nall x. (Ailton(x) -> CommonlyKnownAs(Ailton))\nall x. (Ailton(x) -> FootballPlayer(x))\nall x. (Ailton(x) -> LoanedOutTo(Braga(x)))\nall x. (Ailton(x) -> BrazilianFootballer(x))\nall x. (Nautico(x) -> FootballClub(x))\nall x. (Braga(x) -> FootballClub(x))\nall x. (Fluminense(x) -> FootballClub(x))\n</PREMISES>\n<CONCLUSION>\nall x. (Ailton(x) -> LoanedOutTo(x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (FootballPlayer(x) & LoanedOut(x) -> Braga(x))\nall x. (BrazillianFootballer(x) & PlaysFor(x) -> Nautico(x))\nNautico(x) & Braga(x)\nall x. (FootballClub(x) -> (Nautico(x) & Braga(x)))\nFluminense(x)\n</PREMISES>\n<CONCLUSION>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (FootballPlayer(x) & LoanedOut(x) -> Braga(x))\nall x. (BrazillianFootballer(x) & PlaysFor(x) -> Nautico(x))\nNautico(x) & Braga(x)\nall x. (FootballClub(x) -> (Nautico(x) & Braga(x)))\nFluminense(x)\nall x. (Ailton(x) -> LoanedOut(x))\n</EVALUATE>",
    "<PREMISES>\nall x. (Person(x) -> BornIn1995(x))\nall x. (Ailton(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Ailton(x) -> FootballPlayer(x))\nall x. (Ailton(x) -> LoanedOutTo(x, Braga(x)))\nall x. (Ailton(x) -> BrazilianFootballer(x))\nall x. (Nautico(x) -> FootballClub(x))\nall x. (Braga(x) -> FootballClub(x))\nall x. (Fluminense(x) -> FootballClub(x))\n</PREMISES>\n<CONCLUSION>\nall x. (Ailton(x) -> LoanedOutTo(x, FootballClub(x)))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> Name(x, 'Ailton Silva') & BirthYear(x, 1995))\nall x. (Player(x) & LoanedOut(x) -> Team(x) = Braga)\nall x. (Player(x) & Nationality(x) = 'Brazilian' & Team(x) = Nautico)\nNautico & Braga & Team(x) = Nautico & Team(x) = Braga\nTeam(x) = Fluminense\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) -> Name(x, 'Ailton Silva') & BirthYear(x, 1995)) & (LoanOut(x) -> Team(x) =?)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Ailton(x) & FootballPlayer(x) & LoanedOutTo(x) -> Braga(x))\nAilton Silva (x)\nall x. (Ailton Silva (x) & BrazilianFootballer(x) & FootballClub(x) -> Nautico(x))\nNautico (x) & Braga (x)\nFootballClub (Fluminense (x))\n</PREMISES>\n<CONCLUSION>\n-LoanOutTo(Ailton Silva)\n</CONCLUSION>",
    "<PREMISES>\nall x. (BornIn1995(x) -> Ailton(x))\nall x. (Ailton(x) -> FootballPlayer(x))\nall x. (Ailton(x) -> LoanedOutToBraga(x))\nall x. (Ailton(x) -> BrazilianFootballer(x))\nall x. (Nautico(x) & Braga(x))\nall x. (Fluminense(x) -> FootballClub(x))\n</PREMISES>\n<CONCLUSION>\n-LoanedOutToBraga(Ailton)\n</CONCLUSION>",
    "<PREMISES>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (FootballPlayer(x) & LoanedOut(x) -> Braga(x))\nall x. (BrazillianFootballer(x) & PlaysFor(x) -> Nautico(x))\nNautico(x) & Braga(x)\nFootballClub(x) & Nautico(x) & Braga(x)\nFootballClub(x) & Fluminense(x)\n</PREMISES>\n<CONCLUSION>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (FootballPlayer(x) & LoanedOut(x) -> Braga(x))\nall x. (BrazillianFootballer(x) & PlaysFor(x) -> Nautico(x))\nNautico(x) & Braga(x)\nFootballClub(x) & Nautico(x) & Braga(x)\nFootballClub(x) & Fluminense(x)\n-LoanedOut(Ailton Silva)\nAilton Silva(x) & Nautico(x)\nAilton Silva(x) & Braga(x)\n</EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known",
    "<PREMISES>\nall x. (Person(x) & BirthYear(x, 1995) & CommonName(x, 'Ailton') -> Name(x, 'Ailton'))\nall x. (Person(x) & FootballPlayer(x) & LoanedOut(x, y) -> Player(x, y))\nPerson(ailtonSilva) & FootballPlayer(ailtonSilva) & LoanedOut(ailtonSilva, Braga)\nall x. (Person(x) & Nationality(x, 'Brazillian') & Footballer(x) & Team(x, y) -> TeamPlayer(x, y))\nPerson(ailtonSilva) & Nationality(ailtonSilva, 'Brazillian') & Footballer(ailtonSilva) & Team(ailtonSilva, Nautico)\nall x. (Team(x, y) & Team(x, z) -> Team(x, w))\nTeam(Nautico, Braga)\nTeam(Fluminense, y)\n</PREMISES>\n<CONCLUSION>\n-LoanedOut(ailtonSilva, z)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & BirthYear(x, 1995) & CommonName(x, 'Ailton') -> CommonName(x, 'Ailton'))\nall x. (Person(x) & Position(x, 'FootballPlayer') & Team(x, 'Braga') -> LoanedOut(x))\nall x. (Person(x) & Nationality(x, 'Brazilian') & Team(x, 'Nautico') -> Footballer(x))\nall x. (Team(x, 'Braga') & Team(x, 'Nautico') -> Club(x))\nTeam(nautico, football)\nTeam(braga, football)\nall x. (Person(x) & Club(x, 'Fluminense') -> FootballClub(x))\n</PREMISES>\n<CONCLUSION>\n-LoanOut(Ailton)\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Person(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Person(x) & BornIn1995(x) & -Brazillian(x) -> FootballPlayer(x))\nAilton Silva\nall x. (Person(x) & FootballPlayer(x) & LoanedOutTo(x) -> Braga(x))\nAilton Silva\nall x. (Person(x) & FootballPlayer(x) & Brazillian(x) & PlaysFor(x) -> Nautico(x))\nNautico\nall x. (Club(x) & -Braga(x) -> Nautico(x))\nBraga\nall x. (Club(x) -> Fluminense(x))\nFluminense\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) & FootballPlayer(x) & LoanedOutTo(x) -> Braga(x))\n</EVALUATE>",
    "<PREMISES>\nall x. (Person(x) -> BornIn1995(x))\nall x. (Person(x) & BornIn1995(x) & CommonlyKnownAs(Ailton, x) -> Ailton(x))\nPerson(Ailton) & Ailton(isFootballPlayer) & Ailton(isLoaneedOutToBraga)\nPerson(Ailton) & Ailton(isBrazilianFootballer) & Ailton(playsForNautico)\nNautico(isFootballClub) & Braga(isFootballClub)\nPerson(Fluminense) & Fluminense(isFootballClub)\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) & isLoaneedOutTo(x) -> x(isFootballClub))\nAilton(isLoaneedOutToBraga) & Ailton(isLoaneedOutToNautico)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as Ailton.\nFOL: all x. (Person(x) -> BornIn1995(x) & CommonlyKnownAs(Ailton, x))\nTEXT: Ailton is a football player who was loaned out to Braga.\nFOL: Person(Ailton) &",
    "<PREMISES>\nall x. (Born(x, 1995) -> CommonlyKnownAs(Ailton(x)))\nall x. (Ailton(x) & FootballPlayer(x) & LoanedOut(x, y) -> Braga(y))\nall x. (Ailton(x) & BrazilianFootballer(x) & FootballClub(x) -> Nautico(x))\nNautico(x) & Braga(x) -> FootballClub(x)\nFootballClub(x) -> Fluminense(x)\n</PREMISES>\n<CONCLUSION>\nall x. (Ailton(x) & LoanedOut(x, y) -> FootballClub(y))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & Born(1995, x) & CommonlyKnownAs(Ailton, x) -> Ailton(x))\nall x. (Person(x) & Ailton(x) & FootballPlayer(x) & LoanedOut(x, y) -> y = Braga)\nall x. (Person(x) & Ailton(x) & BrazilianFootballer(x) & PlaysFor(x) -> x = Nautico)\nNautico(x) & Braga(x) -> FootballClub(x)\nFootballClub(x) -> Fluminense(x)\n</PREMISES>\n<CONCLUSION>\nAilton(x) & LoanedOut(x, y) -> y = FootballClub(z)\nall x. (Person(x) & LoanedOut(x, y) & PlaysFor(x) -> y = FootballClub(z))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Person(x) & BornIn1995(x) & -Person(Braga) & LoanedOutTo(x) -> FootballPlayer(x))\nall x. (Person(x) & Brazilian(x) & Person(Nautico) & Person(Ailton(x)) & Player(x) -> Footballer(x))\nall x. (FootballClub(x) & -FootballClub(Braga) & -FootballClub(Nautico) & FootballClub(x) -> FootballClub(Ailton))\nFootballClub(Fluminense)\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) & LoanedOutTo(x) -> FootballClub(x))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Born(x, 1995) -> Ailton(x))\nall x. (Ailton(x) -> FootballPlayer(x))\nall x. (Ailton(x) -> LoanedOut(x, Braga))\nall x. (Ailton(x) & Brazilian(x) & Footballer(x) -> Nautico(x))\nNautico(x) & Braga(x)\nFootballClub(x) -> Nautico(x) | Braga(x)\nFootballClub(x) -> Fluminense(x)\n</PREMISES>\n<CONCLUSION>\nall x. (Ailton(x) -> LoanedOut(x, x))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & BirthYear(x, 1995) & CommonName(x, 'Ailton') -> Name(x, 'Ailton Silva'))\nall x. (Person(x) & Position(x, 'Football Player') & TeamLoan(x, Braga) -> LoanedOut(x))\nall x. (Person(x) & Nationality(x, 'Brazilian') & Position(x, 'Footballer') & Team(x, Nautico) -> BrazilianFootballer(x))\nall x. (Team(x, Nautico) & Team(x, Braga) -> FootballClub(x))\nall x. (Team(x, Fluminense) -> FootballClub(x))\n</PREMISES>\n\n<CONCLUSION>\nall x. (Person(x) & TeamLoan(x, y) -> FootballClub(y))\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> BornIn1995(x))\nall x. (Person(x) -> CommonlyKnownAs(x, 'Ailton'))\nAilton is a football player.\nAilton is a football player who was loaned out to Braga.\nall x. (Person(x) -> Brazilian(x) & Footballer(x) & PlaysFor(x, 'Nautico'))\nNautico is a football club along with Braga.\nall x. (FootballClub(x) -> HasPlayers(x))\nFluminense is a football club.\n</PREMISES>\n<CONCLUSION>\n-LoanOut(Ailton)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> Born(1995,x))\nall x. (Ailton(x) -> CommonlyKnownAs(Ailton))\nAilton(x) & Person(x) & LoanedOut(x, Braga) & Ailton(x) & FootballPlayer(x) & Brazilian(x) & Nautico(x) & FootballClub(x)\nNautico(x) & FootballClub(x) & Braga(x) & FootballClub(x)\nFluminense(x) & FootballClub(x)\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) -> Born(1995,x))\nall x. (Ailton(x) -> CommonlyKnownAs(Ailton))\nAilton(x) & Person(x) & LoanedOut(x, Braga) & Ailton(x) & FootballPlayer(x) & Brazilian(x) & Nautico(x) & FootballClub(x)\nNautico(x) & FootballClub(x) & Braga(x) & FootballClub(x)\nFluminense(x) & FootballClub(x)\n-LoanedOut(Ailton, Fluminense)\n</CONCLUSION>\n\n<EVALUATE>\nTEXT: Ailton Silva, born in 1995, is commonly known as",
    "<PREMISES>\nall x. (BornIn1995(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (FootballPlayer(x) & LoanedOut(x, y) -> Braga(y))\nall x. (BrazillianFootballer(x) & PlaysFor(x) -> Nautico(x))\nNautico(x) & Braga(x) :- FootballClub(x)\nFootballClub(x) :- Fluminense(x)\n</PREMISES>\n<CONCLUSION>\nall x. (FootballPlayer(x) & LoanedOut(x, y) -> Nautico(y))\n</CONCLUSION>"
   ],
   [
    "<PREMISES>\nall x. (Person(x) -> BornIn1995(x))\nall x. (Person(x) & BornIn1995(x) -> CommonlyKnownAs(x, 'Ailton'))\nAilton Silva\nall x. (Person(x) & BornIn1995(x) & CommonlyKnownAs(x, 'Ailton') -> FootballPlayer(x))\nAilton is a football player who was loaned out to Braga.\nall x. (Person(x) & BornIn1995(x) & CommonlyKnownAs(x, 'Ailton') & FootballPlayer(x) -> BrazilianFootballer(x))\nAilton Silva is a Brazillian footballer who plays for Nautico.\nall x. (Club(x) & Braga(x) -> FootballClub(x))\nNautico is a football club along with Braga.\nall x. (Club(x) -> FootballClub(x))\nFluminense is a football club.\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) & BornIn1995(x) & CommonlyKnownAs(x, 'Ailton') & FootballPlayer(x) -> LoanedOutToFootballClub(x))\nAilton Silva was loaned out to a football club.\n",
    "<PREMISES>\nall x. (Person(x) -> Born(x, 1995))\nall x. (Person(x) -> CommonlyKnownAs(x, 'Ailton'))\nFootballPlayer(x) & LoanedOut(x, y) -> x = Braga(y)\nFootballPlayer(x) & Born(x, 1995) & CommonlyKnownAs(x, 'Ailton') & -Brazillian(x) & Club(x) -> x = Nautico\nClub(x) & Club(y) -> x = Braga(y)\nClub(x) -> x = Fluminense\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) -> LoanedOut(x, y))\nx = Ailton Silva\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) -> CommonlyKnownAs(Ailton(x)))\nall x. (Ailton(x) & FootballPlayer(x) & LoanedOut(x, Braga) -> FootballClub(x) = Braga)\nall x. (Ailton(x) & Brazillian(x) & Footballer(x) & PlaysFor(x, Nautico) -> FootballClub(x) = Nautico)\nFootballClub(Nautico) & FootballClub(Braga)\nFootballClub(Fluminense)\n</PREMISES>\n<CONCLUSION>\nall x. (Ailton(x) & LoanedOut(x, x) -> FootballClub(x) = Braga)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & BornIn1995(x) & CommonlyKnownAs(Ailton(x))) -> Ailton(x)\nall x. (Ailton(x) & FootballPlayer(x) & LoanedOutTo(x, Braga(x))) -> Braga(x)\nAilton(x) & BrazilianFootballer(x) & Nautico(x) -> Nautico(x)\nNautico(x) & FootballClub(x) & Braga(x) -> Braga(x)\nFootballClub(x) -> Fluminense(x)\n</PREMISES>\n<CONCLUSION>\n-Braga(x) & FootballClub(x) -> LoanedOutTo(x,?y)\n</CONCLUSION>",
    "<PREMISES>\nall x. (Person(x) & BirthYear(x, 1995) & CommonName(x, 'Ailton') -> Name(x, 'Ailton'))\nall x. (Person(x) & Position(x, 'FootballPlayer') & Team(x, 'Braga') -> LoanedOut(x, 'Braga'))\nall x. (Person(x) & BirthCountry(x, 'Brazil') & Position(x, 'Footballer') & Team(x, 'Nautico') -> Position(x, 'Footballer'))\nall x. (Team(x, 'Nautico') & Team(x, 'Braga') -> SameSport(x))\nall x. (Team(x, 'Fluminense') -> SameSport(x))\n</PREMISES>\n<CONCLUSION>\nall x. (Person(x) & Team(x, 'Braga') & LoanedOut(x, 'Braga') -> SameTeam(x))\n</CONCLUSION>"
   ]
  ]
 }
]