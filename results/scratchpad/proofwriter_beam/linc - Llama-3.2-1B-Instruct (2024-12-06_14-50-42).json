[
 {
  "index": 0,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> Big(x))\nTEXT: Dave is green.\nFOL: all x. (Dave(x) -> Green(x))\nTEXT: Dave is red.\nFOL: all x. (Dave(x) -> Red(x))\nTEXT: Dave is rough.\nFOL: all x. (Dave(x) -> Rough(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Dave is young.\nFOL: all x. (Dave(x) -> Young(x))\nTEXT: Erin is big.\nFOL: all x. (Erin(x) -> Big(x))\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\nTEXT: Erin is rough.\nFOL: all x. (Erin(x) -> Rough(x))\nTEXT: Erin is smart.\nFOL: all x. (Erin(x) -> Smart(x))\nTEXT: Erin is young.\nFOL: all x. (Erin(x) -> Young(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is nice.\nFOL: all x. (Harry(x) -> Nice(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\nTEXT: Smart people are young.\nFOL: all x. (Smart(x) -> Young(x))\nTEXT: If Erin is red then Erin is big.\nFOL: all x. (Erin(x) -> Red(x) & Big(x) -> Erin(x))\nTEXT: If Harry is red then Harry is smart.\nFOL: all x. (Harry(x) -> Red(x) & Smart(x) -> Harry(x))\nTEXT: If Harry is green then Harry is red.\nFOL: all x. (Harry(x) -> Green(x) & Red(x) -> Harry(x))\nTEXT: Red people are green.\nFOL: all x. (Red(x) -> Green(x))\nTEXT: Young people are big.\nFOL: all x. (Young(x) -> Big(x))\nTEXT: Erin is nice.\nFOL: all x. (Erin(x) -> Nice(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> Big(x))\nTEXT: Dave is green.\nFOL: all x. (Dave(x) -> Green(x))\nTEXT: Dave is red.\nFOL: all x. (Dave(x) -> Red(x))\nTEXT: Dave is rough.\nFOL: all x. (Dave(x) -> Rough(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Dave is young.\nFOL: all x. (Dave(x) -> Young(x))\nTEXT: Erin is big.\nFOL: all x. (Erin(x) -> Big(x))\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\nTEXT: Erin is rough.\nFOL: all x. (Erin(x) -> Rough(x))\nTEXT: Erin is smart.\nFOL: all x. (Erin(x) -> Smart(x))\nTEXT: Erin is young.\nFOL: all x. (Erin(x) -> Young(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is nice.\nFOL: all x. (Harry(x) -> Nice(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\nTEXT: Smart people are young.\nFOL: all x. (Smart(x) -> Young(x))\nTEXT: If Erin is red then Erin is big.\nFOL: if Erin(x) & Red(x) -> Big(x)\nTEXT: If Harry is red then Harry is smart.\nFOL: if Harry(x) & Red(x) -> Smart(x)\nTEXT: If Harry is green then Harry is red.\nFOL: if Harry(x) & Green(x) -> Red(x)\nTEXT: Red people are green.\nFOL: all x. (Red(x) -> Green(x))\nTEXT: Young people are big.\nFOL: all x. (Young(x) -> Big(x))\nTEXT: Erin is nice.\nFOL: all x. (Erin(x) -> Nice(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> Big(x))\nTEXT: Dave is green.\nFOL: all x. (Dave(x) -> Green(x))\nTEXT: Dave is red.\nFOL: all x. (Dave(x) -> Red(x))\nTEXT: Dave is rough.\nFOL: all x. (Dave(x) -> Rough(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Dave is young.\nFOL: all x. (Dave(x) -> Young(x))\nTEXT: Erin is big.\nFOL: all x. (Erin(x) -> Big(x))\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\nTEXT: Erin is rough.\nFOL: all x. (Erin(x) -> Rough(x))\nTEXT: Erin is smart.\nFOL: all x. (Erin(x) -> Smart(x))\nTEXT: Erin is young.\nFOL: all x. (Erin(x) -> Young(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is nice.\nFOL: all x. (Harry(x) -> Nice(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\nTEXT: Smart people are young.\nFOL: all x. (Smart(x) -> Young(x))\nTEXT: If Erin is red then Erin is big.\nFOL: all x y. (Erin(x) & Red(x) -> Big(x))\nTEXT: If Harry is red then Harry is smart.\nFOL: all x y. (Harry(x) & Red(x) -> Smart(x))\nTEXT: If Harry is green then Harry is red.\nFOL: all x y. (Harry(x) & Green(x) -> Red(x))\nTEXT: Red people are green.\nFOL: all x. (Red(x) -> Green(x))\nTEXT: Young people are big.\nFOL: all x. (Young(x) -> Big(x))\nTEXT: Erin is nice.\nFOL: all x. (Erin(x) -> Nice(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> Big(x))\nTEXT: Dave is green.\nFOL: all x. (Dave(x) -> Green(x))\nTEXT: Dave is red.\nFOL: all x. (Dave(x) -> Red(x))\nTEXT: Dave is rough.\nFOL: all x. (Dave(x) -> Rough(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Dave is young.\nFOL: all x. (Dave(x) -> Young(x))\nTEXT: Erin is big.\nFOL: all x. (Erin(x) -> Big(x))\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\nTEXT: Erin is rough.\nFOL: all x. (Erin(x) -> Rough(x))\nTEXT: Erin is smart.\nFOL: all x. (Erin(x) -> Smart(x))\nTEXT: Erin is young.\nFOL: all x. (Erin(x) -> Young(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is nice.\nFOL: all x. (Harry(x) -> Nice(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\nTEXT: Smart people are young.\nFOL: all x. (Smart(x) -> Young(x))\nTEXT: If Erin is red then Erin is big.\nFOL: all x y. (Erin(x) & Red(x) -> Big(x, y) & Erin(x))\nTEXT: If Harry is red then Harry is smart.\nFOL: all x y. (Harry(x) & Red(x) -> Smart(x, y) & Harry(x))\nTEXT: If Harry is green then Harry is red.\nFOL: all x y. (Harry(x) & Green(x) -> Red(x, y) & Harry(x))\nTEXT: Red people are green.\nFOL: all x. (Red(x) -> Green(x))\nTEXT: Young people are big.\nFOL: all x. (Young(x) -> Big(x))\nTEXT: Erin is nice.\nFOL: all x. (Erin(x) -> Nice(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> Big(x))\nTEXT: Dave is green.\nFOL: all x. (Dave(x) -> Green(x))\nTEXT: Dave is red.\nFOL: all x. (Dave(x) -> Red(x))\nTEXT: Dave is rough.\nFOL: all x. (Dave(x) -> Rough(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Dave is young.\nFOL: all x. (Dave(x) -> Young(x))\nTEXT: Erin is big.\nFOL: all x. (Erin(x) -> Big(x))\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\nTEXT: Erin is rough.\nFOL: all x. (Erin(x) -> Rough(x))\nTEXT: Erin is smart.\nFOL: all x. (Erin(x) -> Smart(x))\nTEXT: Erin is young.\nFOL: all x. (Erin(x) -> Young(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is nice.\nFOL: all x. (Harry(x) -> Nice(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\nTEXT: Smart people are young.\nFOL: all x. (Smart(x) -> Young(x))\nTEXT: If Erin is red then Erin is big.\nFOL: all x. (Erin(x) -> Red(x) & Big(x) -> Erin(x))\nTEXT: If Harry is red then Harry is smart.\nFOL: all x. (Harry(x) -> Red(x) & Smart(x) -> Harry(x))\nTEXT: If Harry is green then Harry is red.\nFOL: all x. (Harry(x) -> Green(x) & Red(x) -> Harry(x))\nTEXT: Red people are green.\nFOL: all x. (Red(x) -> Green(x))\nTEXT: Young people are big.\nFOL: all x. (Young(x) -> Big(x))\nTEXT: Erin is nice.\nFOL: all x. (Erin(x) -> Nice(x))"
  ]
 },
 {
  "index": 1,
  "responses": [
   "<EVALUATE>\nTEXT: The cat is cold.\nFOL: all x. (Cat(x) -> -Cold(x))\nTEXT: The cat is rough.\nFOL: all x. (Cat(x) -> -Rough(x))\nTEXT: The cat likes the dog.\nFOL: all x. (Cat(x) & Dog(x) -> Like(x, dog))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> -Round(x))\nTEXT: The cow visits the cat.\nFOL: all x. (Cow(x) & Cat(x) -> Visit(x, cat))\nTEXT: The dog is big.\nFOL: all x. (Dog(x) -> -Big(x))\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> -Green(x))\nTEXT: The dog is rough.\nFOL: all x. (Dog(x) -> -Rough(x))\nTEXT: The dog likes the cat.\nFOL: all x. (Dog(x) & Cat(x) -> Like(x, cat))\nTEXT: The dog likes the cow.\nFOL: all x. (Dog(x) & Cow(x) -> Like(x, cow))\nTEXT: The dog likes the rabbit.\nFOL: all x. (Dog(x) & Rabbit(x) -> Like(x, rabbit))\nTEXT: The rabbit is big.\nFOL: all x. (Rabbit(x) -> -Big(x))\nTEXT: The rabbit likes the cow.\nFOL: all x. (Rabbit(x) & Cow(x) -> Like(x, cow))\nTEXT: The rabbit needs the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> Need(x, cat))\nTEXT: The rabbit visits the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> Visit(x, cat))\nTEXT: The rabbit visits the dog.\nFOL: all x. (Rabbit(x) & Dog(x) -> Visit(x, dog))\nTEXT: If someone is cold then they like the cow.\nFOL: all x. (Cold(x) -> Like(x, cow))\nTEXT: If someone visits the rabbit and the rabbit needs the cow then the cow needs the rabbit.\nFOL: all x. (Visit(x, rabbit) & Need(x, cow) & Cow(x) -> Need(x, rabbit))\nTEXT: If someone likes the cat then they need the cow.\nFOL: all x. (Like(x, cat) -> Need(x, cow))\nTEXT: If someone needs the cow and the cow likes the cat then the cat visits the dog.\nFOL: all x. (Need(x, cow) & Like(x, cat) -> Visit(x, dog))\nTEXT: If someone likes the rabbit and the rabbit visits the dog then they like the dog.\nFOL: all x. (Like(x, rabbit) & Visit(x, dog) -> Like(x, dog))\nTEXT: If the rabbit likes the dog and the rabbit needs the cat then the dog visits the rabbit.\nFOL: all x. (Like(x, rabbit) & Need(x, cat) & Cat(x) -> Visit(x, rabbit))\nTEXT: If someone likes the rabbit and they are round then the rabbit needs the dog.\nFOL: all x. (Like(x, rabbit) & -Round(x) -> Need(x, dog))\nTEXT: If someone visits the cat and the cat likes the cow then they like the cat.\nFOL: all x. (Visit(x, cat) & Like(x, cow) -> Like(x, cat))\nTEXT: The dog needs the rabbit.\nFOL: all x. (Dog(x) & Rabbit(x) -> Need(x, rabbit))",
   "<EVALUATE>\nTEXT: The cat is cold.\nFOL: all x. (Cat(x) -> -Cold(x))\nTEXT: The cat is rough.\nFOL: all x. (Cat(x) -> -Rough(x))\nTEXT: The cat likes the dog.\nFOL: all x. (Cat(x) & Dog(x) -> Like(x, dog))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> -Round(x))\nTEXT: The cow visits the cat.\nFOL: all x. (Cow(x) & Cat(x) -> Visit(x, cat))\nTEXT: The dog is big.\nFOL: all x. (Dog(x) -> -Big(x))\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> -Green(x))\nTEXT: The dog is rough.\nFOL: all x. (Dog(x) -> -Rough(x))\nTEXT: The dog likes the cat.\nFOL: all x. (Dog(x) & Cat(x) -> Like(x, cat))\nTEXT: The dog likes the cow.\nFOL: all x. (Dog(x) & Cow(x) -> Like(x, cow))\nTEXT: The dog likes the rabbit.\nFOL: all x. (Dog(x) & Rabbit(x) -> Like(x, rabbit))\nTEXT: The rabbit is big.\nFOL: all x. (Rabbit(x) -> -Big(x))\nTEXT: The rabbit likes the cow.\nFOL: all x. (Rabbit(x) & Cow(x) -> Like(x, cow))\nTEXT: The rabbit needs the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> Need(x, cat))\nTEXT: The rabbit visits the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> Visit(x, cat))\nTEXT: The rabbit visits the dog.\nFOL: all x. (Rabbit(x) & Dog(x) -> Visit(x, dog))\nTEXT: If someone is cold then they like the cow.\nFOL: all x. (Cold(x) -> Like(x, cow))\nTEXT: If someone visits the rabbit and the rabbit needs the cow then the cow needs the rabbit.\nFOL: all x. (Visit(x, rabbit) & Need(x, cow) & Cow(x) -> Need(x, rabbit))\nTEXT: If someone likes the cat then they need the cow.\nFOL: all x. (Like(x, cat) -> Need(x, cow))\nTEXT: If someone needs the cow and the cow likes the cat then the cat visits the dog.\nFOL: all x. (Need(x, cow) & Like(x, cat) -> Visit(x, dog))\nTEXT: If someone likes the rabbit and the rabbit visits the dog then they like the dog.\nFOL: all x. (Like(x, rabbit) & Visit(x, dog) -> Like(x, dog))\nTEXT: If the rabbit likes the dog and the rabbit needs the cat then the dog visits the rabbit.\nFOL: all x. (Like(x, rabbit) & Need(x, cat) & Cat(x) -> Visit(x, rabbit))\nTEXT: If someone likes the rabbit and they are round then the rabbit needs the dog.\nFOL: all x. (Like(x, rabbit) & -Round(x) -> Need(x, dog))\nTEXT: If someone visits the cat and the cat likes the cow then they like the cat.\nFOL: all x. (Visit(x, cat) & Like(x, cow) -> Like(x, cat))\nTEXT: The dog needs the rabbit.\nFOL: all x. (Dog(x) & Rabbit(x) -> Need(x, rabbit))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is cold.\nFOL: all x. (Cat(x) -> -Cold(x))\nTEXT: The cat is rough.\nFOL: all x. (Cat(x) -> -Rough(x))\nTEXT: The cat likes the dog.\nFOL: all x. (Cat(x) & Dog(x) -> Like(x, dog))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> -Round(x))\nTEXT: The cow visits the cat.\nFOL: all x. (Cow(x) & Cat(x) -> Visit(x, cat))\nTEXT: The dog is big.\nFOL: all x. (Dog(x) -> -Big(x))\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> -Green(x))\nTEXT: The dog is rough.\nFOL: all x. (Dog(x) -> -Rough(x))\nTEXT: The dog likes the cat.\nFOL: all x. (Dog(x) & Cat(x) -> Like(x, cat))\nTEXT: The dog likes the cow.\nFOL: all x. (Dog(x) & Cow(x) -> Like(x, cow))\nTEXT: The dog likes the rabbit.\nFOL: all x. (Dog(x) & Rabbit(x) -> Like(x, rabbit))\nTEXT: The rabbit is big.\nFOL: all x. (Rabbit(x) -> -Big(x))\nTEXT: The rabbit likes the cow.\nFOL: all x. (Rabbit(x) & Cow(x) -> Like(x, cow))\nTEXT: The rabbit needs the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> Need(x, cat))\nTEXT: The rabbit visits the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> Visit(x, cat))\nTEXT: The rabbit visits the dog.\nFOL: all x. (Rabbit(x) & Dog(x) -> Visit(x, dog))\nTEXT: If someone is cold then they like the cow.\nFOL: all x. (Cold(x) -> Like(x, cow))\nTEXT: If someone visits the rabbit and the rabbit needs the cow then the cow needs the rabbit.\nFOL: all x. (Visit(x, rabbit) & Need(x, cow) & Cow(x) -> Need(x, rabbit))\nTEXT: If someone likes the cat then they need the cow.\nFOL: all x. (Like(x, cat) -> Need(x, cow))\nTEXT: If someone needs the cow and the cow likes the cat then the cat visits the dog.\nFOL: all x. (Need(x, cow) & Like(x, cat) -> Visit(x, dog))\nTEXT: If someone likes the rabbit and the rabbit visits the dog then they like the dog.\nFOL: all x. (Like(x, rabbit) & Visit(x, dog) -> Like(x, dog))\nTEXT: If the rabbit likes the dog and the rabbit needs the cat then the dog visits the rabbit.\nFOL: all x. (Like(x, rabbit) & Need(x, cat) & Cat(x) -> Visit(x, rabbit))\nTEXT: If someone likes the rabbit and they are round then the rabbit needs the dog.\nFOL: all x. (Like(x, rabbit) & -Round(x) -> Need(x, dog))\nTEXT: If someone visits the cat and the cat likes the cow then they like the cat.\nFOL: all x. (Visit(x, cat) & Like(x, cow) -> Like(x, cat))\nTEXT: The dog needs the rabbit.\nFOL: -Need(x, rabbit) & Like(x, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is cold.\nFOL: all x. (Cat(x) -> -Cold(x))\nTEXT: The cat is rough.\nFOL: all x. (Cat(x) -> -Rough(x))\nTEXT: The cat likes the dog.\nFOL: all x. (Cat(x) & Dog(x) -> Like(x, dog))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> -Round(x))\nTEXT: The cow visits the cat.\nFOL: all x. (Cow(x) & Cat(x) -> Visit(x, cat))\nTEXT: The dog is big.\nFOL: all x. (Dog(x) -> -Big(x))\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> -Green(x))\nTEXT: The dog is rough.\nFOL: all x. (Dog(x) -> -Rough(x))\nTEXT: The dog likes the cat.\nFOL: all x. (Dog(x) & Cat(x) -> Like(x, cat))\nTEXT: The dog likes the cow.\nFOL: all x. (Dog(x) & Cow(x) -> Like(x, cow))\nTEXT: The dog likes the rabbit.\nFOL: all x. (Dog(x) & Rabbit(x) -> Like(x, rabbit))\nTEXT: The rabbit is big.\nFOL: all x. (Rabbit(x) -> -Big(x))\nTEXT: The rabbit likes the cow.\nFOL: all x. (Rabbit(x) & Cow(x) -> Like(x, cow))\nTEXT: The rabbit needs the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> Need(x, cat))\nTEXT: The rabbit visits the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> Visit(x, cat))\nTEXT: The rabbit visits the dog.\nFOL: all x. (Rabbit(x) & Dog(x) -> Visit(x, dog))\nTEXT: If someone is cold then they like the cow.\nFOL: all x. (Cold(x) -> Like(x, cow))\nTEXT: If someone visits the rabbit and the rabbit needs the cow then the cow needs the rabbit.\nFOL: all x. (Visit(x, rabbit) & Need(x, cow) & Cow(x) -> Need(x, rabbit))\nTEXT: If someone likes the cat then they need the cow.\nFOL: all x. (Like(x, cat) -> Need(x, cow))\nTEXT: If someone needs the cow and the cow likes the cat then the cat visits the dog.\nFOL: all x. (Need(x, cow) & Like(x, cat) -> Visit(x, dog))\nTEXT: If someone likes the rabbit and the rabbit visits the dog then they like the dog.\nFOL: all x. (Like(x, rabbit) & Visit(x, dog) -> Like(x, dog))\nTEXT: If the rabbit likes the dog and the rabbit needs the cat then the dog visits the rabbit.\nFOL: all x. (Like(x, rabbit) & Need(x, cat) & Cat(x) -> Visit(x, rabbit))\nTEXT: If someone likes the rabbit and they are round then the rabbit needs the dog.\nFOL: all x. (Like(x, rabbit) & -Round(x) -> Need(x, dog))\nTEXT: If someone visits the cat and the cat likes the cow then they like the cat.\nFOL: all x. (Visit(x, cat) & Like(x, cow) -> Like(x, cat))\nTEXT: The dog needs the rabbit.\nFOL: -Need(x, rabbit) & Like(x, rabbit)",
   "<EVALUATE>\nTEXT: The cat is cold.\nFOL: all x. (Cat(x) -> -Cold(x))\nTEXT: The cat is rough.\nFOL: all x. (Cat(x) -> -Rough(x))\nTEXT: The cat likes the dog.\nFOL: all x. (Cat(x) & Dog(x) -> Like(x, dog))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> -Round(x))\nTEXT: The cow visits the cat.\nFOL: all x. (Cow(x) & Cat(x) -> Visit(x, cat))\nTEXT: The dog is big.\nFOL: all x. (Dog(x) -> -Big(x))\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> -Green(x))\nTEXT: The dog is rough.\nFOL: all x. (Dog(x) -> -Rough(x))\nTEXT: The dog likes the cat.\nFOL: all x. (Dog(x) & Cat(x) -> Like(x, cat))\nTEXT: The dog likes the cow.\nFOL: all x. (Dog(x) & Cow(x) -> Like(x, cow))\nTEXT: The dog likes the rabbit.\nFOL: all x. (Dog(x) & Rabbit(x) -> Like(x, rabbit))\nTEXT: The rabbit is big.\nFOL: all x. (Rabbit(x) -> -Big(x))\nTEXT: The rabbit likes the cow.\nFOL: all x. (Rabbit(x) & Cow(x) -> Like(x, cow))\nTEXT: The rabbit needs the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> Need(x, cat))\nTEXT: The rabbit visits the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> Visit(x, cat))\nTEXT: The rabbit visits the dog.\nFOL: all x. (Rabbit(x) & Dog(x) -> Visit(x, dog))\nTEXT: If someone is cold then they like the cow.\nFOL: all x. (Cold(x) -> Like(x, cow))\nTEXT: If someone visits the rabbit and the rabbit needs the cow then the cow needs the rabbit.\nFOL: all x. (Visit(x, rabbit) & Need(x, cow) & Cow(x) -> Need(x, rabbit))\nTEXT: If someone likes the cat then they need the cow.\nFOL: all x. (Like(x, cat) -> Need(x, cow))\nTEXT: If someone needs the cow and the cow likes the cat then the cat visits the dog.\nFOL: all x. (Need(x, cow) & Like(x, cat) -> Visit(x, dog))\nTEXT: If someone likes the rabbit and the rabbit visits the dog then they like the dog.\nFOL: all x. (Like(x, rabbit) & Visit(x, dog) -> Like(x, dog))\nTEXT: If the rabbit likes the dog and the rabbit needs the cat then the dog visits the rabbit.\nFOL: all x. (Like(x, rabbit) & Need(x, cat) & Cat(x) -> Visit(x, rabbit))\nTEXT: If someone likes the rabbit and they are round then the rabbit needs the dog.\nFOL: all x. (Like(x, rabbit) & -Round(x) -> Need(x, dog))\nTEXT: If someone visits the cat and the cat likes the cow then they like the cat.\nFOL: all x. (Visit(x, cat) & Like(x, cow) -> Like(x, cat))\nTEXT: The dog needs the rabbit.\nFOL: -Need(rabbit, dog)"
  ]
 },
 {
  "index": 2,
  "responses": [
   "<EVALUATE>\nTEXT: The cat does not chase the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & -Chase(x, y) -> NotChase(x, y))\nTEXT: The cat is green.\nFOL: all x. (Cat(x) -> Green(x))\nTEXT: The cat visits the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & Visit(x, y) -> Visit(x, y))\nTEXT: The mouse chases the rabbit.\nFOL: all x y. (Mouse(x) & Rabbit(y) & -Chase(x, y) -> Chase(x, y))\nTEXT: The mouse is big.\nFOL: all x. (Mouse(x) -> Big(x))\nTEXT: The mouse is red.\nFOL: all x. (Mouse(x) -> Red(x))\nTEXT: The mouse is rough.\nFOL: all x. (Mouse(x) -> Rough(x))\nTEXT: The mouse does not like the rabbit.\nFOL: all x y. (Mouse(x) & Rabbit(y) & -Like(x, y) -> NotLike(x, y))\nTEXT: The rabbit is blue.\nFOL: all x. (Rabbit(x) -> Blue(x))\nTEXT: The rabbit is red.\nFOL: all x. (Rabbit(x) -> Red(x))\nTEXT: The rabbit is rough.\nFOL: all x. (Rabbit(x) -> Rough(x))\nTEXT: The rabbit likes the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & Like(x, y) -> Like(x, y))\nTEXT: The rabbit likes the mouse.\nFOL: all x y. (Rabbit(x) & Mouse(y) & Like(x, y) -> Like(x, y))\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & Visit(x, y) -> Visit(x, y))\nTEXT: The rabbit visits the mouse.\nFOL: all x y. (Rabbit(x) & Mouse(y) & Visit(x, y) -> Visit(x, y))\nTEXT: If something is big then it is not blue.\nFOL: all x y. (Big(x) & -Blue(x) -> NotBlue(x))\nTEXT: If the mouse is not rough then the mouse does not chase the rabbit.\nFOL: all x y. (NotRough(x) & Mouse(x) & -Chase(x, y) -> NotChase(x, y))\nTEXT: The mouse does not visit the cat.\nFOL: all x y. (Mouse(x) & Cat(y) & -Visit(x, y) -> NotVisit(x, y))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat does not chase the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & -Chase(x, y) -> NotChase(x, y))\nTEXT: The cat is green.\nFOL: all x. (Cat(x) -> Green(x))\nTEXT: The cat visits the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & -Visit(x, y) -> Visit(x, y))\nTEXT: The mouse chases the rabbit.\nFOL: all x y. (Mouse(x) & Rabbit(y) & -Chase(x, y) -> Chase(x, y))\nTEXT: The mouse is big.\nFOL: all x. (Mouse(x) -> Big(x))\nTEXT: The mouse is red.\nFOL: all x. (Mouse(x) -> Red(x))\nTEXT: The mouse is rough.\nFOL: all x. (Mouse(x) -> Rough(x))\nTEXT: The mouse does not like the rabbit.\nFOL: all x y. (Mouse(x) & Rabbit(y) & -Like(x, y) -> NotLike(x, y))\nTEXT: The rabbit is blue.\nFOL: all x. (Rabbit(x) -> Blue(x))\nTEXT: The rabbit is red.\nFOL: all x. (Rabbit(x) -> Red(x))\nTEXT: The rabbit is rough.\nFOL: all x. (Rabbit(x) -> Rough(x))\nTEXT: The rabbit likes the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Like(x, y) -> Like(x, y))\nTEXT: The rabbit likes the mouse.\nFOL: all x y. (Rabbit(x) & Mouse(y) & -Like(x, y) -> Like(x, y))\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Visit(x, y) -> Visit(x, y))\nTEXT: The rabbit visits the mouse.\nFOL: all x y. (Rabbit(x) & Mouse(y) & -Visit(x, y) -> Visit(x, y))\nTEXT: If something is big then it is not blue.\nFOL: all x y. (Big(x) & -Blue(y) -> NotBlue(x, y))\nTEXT: If the mouse is not rough then the mouse does not chase the rabbit.\nFOL: all x y. (NotRough(x) & Mouse(x) & -Chase(x, y) -> NotChase(x, y))\nTEXT: The mouse does not visit the cat.\nFOL: all x y. (Mouse(x) & Cat(y) & -Visit(x, y) -> NotVisit(x, y))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat does not chase the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & -Chase(x, y) -> NotChase(x, y))\nTEXT: The cat is green.\nFOL: all x. (Cat(x) -> Green(x))\nTEXT: The cat visits the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & -Visit(x, y) -> Visit(x, y))\nTEXT: The mouse chases the rabbit.\nFOL: all x y. (Mouse(x) & Rabbit(y) & -Chase(x, y) -> Chase(x, y))\nTEXT: The mouse is big.\nFOL: all x. (Mouse(x) -> Big(x))\nTEXT: The mouse is red.\nFOL: all x. (Mouse(x) -> Red(x))\nTEXT: The mouse is rough.\nFOL: all x. (Mouse(x) -> Rough(x))\nTEXT: The mouse does not like the rabbit.\nFOL: all x y. (Mouse(x) & Rabbit(y) & -Like(x, y) -> NotLike(x, y))\nTEXT: The rabbit is blue.\nFOL: all x. (Rabbit(x) -> Blue(x))\nTEXT: The rabbit is red.\nFOL: all x. (Rabbit(x) -> Red(x))\nTEXT: The rabbit is rough.\nFOL: all x. (Rabbit(x) -> Rough(x))\nTEXT: The rabbit likes the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Like(x, y) -> Like(x, y))\nTEXT: The rabbit likes the mouse.\nFOL: all x y. (Rabbit(x) & Mouse(y) & -Like(x, y) -> Like(x, y))\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Visit(x, y) -> Visit(x, y))\nTEXT: The rabbit visits the mouse.\nFOL: all x y. (Rabbit(x) & Mouse(y) & -Visit(x, y) -> Visit(x, y))\nTEXT: If something is big then it is not blue.\nFOL: all x y. (Big(x) & -Blue(x) -> NotBlue(x))\nTEXT: If the mouse is not rough then the mouse does not chase the rabbit.\nFOL: all x y. (NotRough(x) & Mouse(x) & -Chase(x, y) -> NotChase(x, y))\nTEXT: The mouse does not visit the cat.\nFOL: all x y. (Mouse(x) & Cat(y) & -Visit(x, y) -> NotVisit(x, y))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat does not chase the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & -Chase(x, y) -> NotChase(x, y))\nTEXT: The cat is green.\nFOL: all x. (Cat(x) -> Green(x))\nTEXT: The cat visits the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & Visit(x, y) -> Visit(x, y))\nTEXT: The mouse chases the rabbit.\nFOL: all x y. (Mouse(x) & Rabbit(y) & -Chase(x, y) -> Chase(x, y))\nTEXT: The mouse is big.\nFOL: all x. (Mouse(x) -> Big(x))\nTEXT: The mouse is red.\nFOL: all x. (Mouse(x) -> Red(x))\nTEXT: The mouse is rough.\nFOL: all x. (Mouse(x) -> Rough(x))\nTEXT: The mouse does not like the rabbit.\nFOL: all x y. (Mouse(x) & Rabbit(y) & -Like(x, y) -> NotLike(x, y))\nTEXT: The rabbit is blue.\nFOL: all x. (Rabbit(x) -> Blue(x))\nTEXT: The rabbit is red.\nFOL: all x. (Rabbit(x) -> Red(x))\nTEXT: The rabbit is rough.\nFOL: all x. (Rabbit(x) -> Rough(x))\nTEXT: The rabbit likes the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & Like(x, y) -> Like(x, y))\nTEXT: The rabbit likes the mouse.\nFOL: all x y. (Rabbit(x) & Mouse(y) & Like(x, y) -> Like(x, y))\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & Visit(x, y) -> Visit(x, y))\nTEXT: The rabbit visits the mouse.\nFOL: all x y. (Rabbit(x) & Mouse(y) & Visit(x, y) -> Visit(x, y))\nTEXT: If something is big then it is not blue.\nFOL: all x y. (Big(x) & -Blue(x) -> NotBlue(x))\nTEXT: If the mouse is not rough then the mouse does not chase the rabbit.\nFOL: all x y. (NotRough(x) & Mouse(x) & -Chase(x, y) -> NotChase(x, y))\nTEXT: The mouse does not visit the cat.\nFOL: all x y. (Mouse(x) & Cat(y) & -Visit(x, y) -> NotVisit(x, y))",
   "<EVALUATE>\nTEXT: The cat does not chase the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & -Chase(x, y) -> NotChase(x, y))\nTEXT: The cat is green.\nFOL: all x. (Cat(x) -> Green(x))\nTEXT: The cat visits the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & -Visit(x, y) -> Visit(x, y))\nTEXT: The mouse chases the rabbit.\nFOL: all x y. (Mouse(x) & Rabbit(y) & -Chase(x, y) -> Chase(x, y))\nTEXT: The mouse is big.\nFOL: all x. (Mouse(x) -> Big(x))\nTEXT: The mouse is red.\nFOL: all x. (Mouse(x) -> Red(x))\nTEXT: The mouse is rough.\nFOL: all x. (Mouse(x) -> Rough(x))\nTEXT: The mouse does not like the rabbit.\nFOL: all x y. (Mouse(x) & Rabbit(y) & -Like(x, y) -> NotLike(x, y))\nTEXT: The rabbit is blue.\nFOL: all x. (Rabbit(x) -> Blue(x))\nTEXT: The rabbit is red.\nFOL: all x. (Rabbit(x) -> Red(x))\nTEXT: The rabbit is rough.\nFOL: all x. (Rabbit(x) -> Rough(x))\nTEXT: The rabbit likes the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Like(x, y) -> Like(x, y))\nTEXT: The rabbit likes the mouse.\nFOL: all x y. (Rabbit(x) & Mouse(y) & -Like(x, y) -> Like(x, y))\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Visit(x, y) -> Visit(x, y))\nTEXT: The rabbit visits the mouse.\nFOL: all x y. (Rabbit(x) & Mouse(y) & -Visit(x, y) -> Visit(x, y))\nTEXT: If something is big then it is not blue.\nFOL: all x y. (Big(x) & -Blue(y) -> NotBlue(x, y))\nTEXT: If the mouse is not rough then the mouse does not chase the rabbit.\nFOL: all x y. (NotRough(x) & Mouse(x) & -Chase(x, y) -> NotChase(x, y))\nTEXT: The mouse does not visit the cat.\nFOL: all x y. (Mouse(x) & Cat(y) & -Visit(x, y) -> NotVisit(x, y))"
  ]
 },
 {
  "index": 3,
  "responses": [
   "<EVALUATE>\nTEXT: Rough and cold that is what they say about Blue Bob.\nFOL: all x. (BlueBob(x) -> Rough(x) & Cold(x))\nTEXT: That guy Charlie sure is nice.\nFOL: all x. (Charlie(x) -> Nice(x))\nTEXT: Dave is kind and nice and looks green.\nFOL: all x. (Dave(x) -> Nice(x) & Look(x) & Green(x))\nTEXT: Fred seems to be round.\nFOL: all x. (Fred(x) -> Round(x))\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: all x. (Skin(x) -> Rough(x) & Cold(x) & Nice(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Nice(x) -> Green(x))\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: all x. (Rough(x) & Nice(x) & Round(x) -> Big(x))\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: all x. (Nice(x) & Young(x) & Red(x) & Green(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Nice(x) & Red(x) -> Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x. (Round(x) & Green(x) & Nice(x) -> Red(x))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) -> Round(x))\nTEXT: Fred is not nice.\nFOL: -Nice(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Rough and cold that is what they say about Blue Bob.\nFOL: all x. (BlueBob(x) -> Rough(x) & Cold(x))\nTEXT: That guy Charlie sure is nice.\nFOL: all x. (Charlie(x) -> Nice(x))\nTEXT: Dave is kind and nice and looks green.\nFOL: all x. (Dave(x) -> Nice(x) & Look(x) & Green(x))\nTEXT: Fred seems to be round.\nFOL: all x. (Fred(x) -> Round(x))\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: all x. (Skin(x) -> Rough(x) & Cold(x) & Nice(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Nice(x) -> Green(x))\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: all x. (Rough(x) & Nice(x) & Round(x) -> Big(x))\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: all x. (Nice(x) & Young(x) & Red(x) & Green(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Nice(x) & Red(x) -> Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x. (Round(x) & Green(x) & Nice(x) & Red(x))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) -> Round(x))\nTEXT: Fred is not nice.\nFOL: -Nice(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Rough and cold that is what they say about Blue Bob.\nFOL: all x. (BlueBob(x) -> Rough(x) & Cold(x))\nTEXT: That guy Charlie sure is nice.\nFOL: all x. (Charlie(x) -> Nice(x))\nTEXT: Dave is kind and nice and looks green.\nFOL: all x. (Dave(x) -> Nice(x) & Look(x) & Green(x))\nTEXT: Fred seems to be round.\nFOL: all x. (Fred(x) -> Round(x))\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: all x. (Skin(x) -> Rough(x) & Cold(x) & Nice(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: all x. (Rough(x) & Nice(x) & Round(x) -> Big(x))\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: all x. (Nice(x) & Young(x) & Red(x) & Green(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Nice(x) & Red(x) -> Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x. (Round(x) & Green(x) & Nice(x) -> Red(x))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) & Round(x) -> Round(x))\nTEXT: Fred is not nice.\nFOL: -Nice(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Rough and cold that is what they say about Blue Bob.\nFOL: all x. (BlueBob(x) -> Rough(x) & Cold(x))\nTEXT: That guy Charlie sure is nice.\nFOL: all x. (Charlie(x) -> Nice(x))\nTEXT: Dave is kind and nice and looks green.\nFOL: all x. (Dave(x) -> Nice(x) & Look(x) & Green(x))\nTEXT: Fred seems to be round.\nFOL: all x. (Fred(x) -> Round(x))\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: all x. (Skin(x) -> Rough(x) & Cold(x) & Nice(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: all x. (Rough(x) & Nice(x) & Round(x) -> Big(x))\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: all x. (Nice(x) & Young(x) & Red(x) & Green(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Nice(x) & Red(x) -> Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x. (Round(x) & Green(x) & Nice(x) & Red(x))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) & Round(x))\nTEXT: Fred is not nice.\nFOL: -Nice(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Rough and cold that is what they say about Blue Bob.\nFOL: all x. (BlueBob(x) -> Rough(x) & Cold(x))\nTEXT: That guy Charlie sure is nice.\nFOL: all x. (Charlie(x) -> Nice(x))\nTEXT: Dave is kind and nice and looks green.\nFOL: all x. (Dave(x) -> Nice(x) & Look(x) & Green(x))\nTEXT: Fred seems to be round.\nFOL: all x. (Fred(x) -> Round(x))\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: all x. (Skin(x) -> Rough(x) & Cold(x) & Nice(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: all x. (Rough(x) & Nice(x) & Round(x) -> Big(x))\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: all x. (Nice(x) & Young(x) & Red(x) & Green(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Kind(x) & Young(x) & Red(x) -> Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x. (Round(x) & Green(x) & Nice(x) -> Red(x))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) & Round(x) -> Round(x))\nTEXT: Fred is not nice.\nFOL: -Nice(fred)\n</EVALUATE>"
  ]
 },
 {
  "index": 4,
  "responses": [
   "<EVALUATE>\n\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\n\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\n\nTEXT: The cow likes the squirrel.\nFOL: all x. (Cow(x) -> likes(x, Squirrel(x)))\n\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\n\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\n\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\n\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\n\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> kind(x))\n\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> nice(x))\n\nTEXT: The squirrel eats the cow.\nFOL: all x. (Squirrel(x) -> eats(x, Cow(x)))\n\nTEXT: The squirrel is kind.\nFOL: all x. (Squirrel(x) -> kind(x))\n\nTEXT: The squirrel is nice.\nFOL: all x. (Squirrel(x) -> nice(x))\n\nTEXT: If someone likes the cow then they are red.\nFOL: all x. (likes(x, Cow(x)) -> red(x))\n\nTEXT: If someone is big then they like the squirrel.\nFOL: all x. (Big(x) -> likes(x, Squirrel(x)))\n\nTEXT: The squirrel does not like the squirrel.\nFOL: -likes(x, Squirrel(x)) & -likes(x, Squirrel(x))\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\n\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\n\nTEXT: The cow likes the squirrel.\nFOL: all x. (Cow(x) -> likes(x, Squirrel(x)))\n\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\n\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\n\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\n\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\n\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> kind(x))\n\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> nice(x))\n\nTEXT: The squirrel eats the cow.\nFOL: all x. (Squirrel(x) -> eats(x, Cow(x)))\n\nTEXT: The squirrel is kind.\nFOL: all x. (Squirrel(x) -> kind(x))\n\nTEXT: The squirrel is nice.\nFOL: all x. (Squirrel(x) -> nice(x))\n\nTEXT: If someone likes the cow then they are red.\nFOL: all x. (likes(x, Cow(x)) -> red(x))\n\nTEXT: If someone is big then they like the squirrel.\nFOL: all x. (is(x, Big(x)) -> likes(x, Squirrel(x)))\n\nTEXT: The squirrel does not like the squirrel.\nFOL: not all x. (likes(x, Squirrel(x)) -> likes(x, Squirrel(x)))\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\n\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\n\nTEXT: The cow likes the squirrel.\nFOL: all x. (Cow(x) -> likes(x, Squirrel(x)))\n\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\n\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\n\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\n\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\n\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> kind(x))\n\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> nice(x))\n\nTEXT: The squirrel eats the cow.\nFOL: all x. (Squirrel(x) -> eats(x, Cow(x)))\n\nTEXT: The squirrel is kind.\nFOL: all x. (Squirrel(x) -> kind(x))\n\nTEXT: The squirrel is nice.\nFOL: all x. (Squirrel(x) -> nice(x))\n\nTEXT: If someone likes the cow then they are red.\nFOL: all x. (likes(x, Cow(x)) -> red(x))\n\nTEXT: If someone is big then they like the squirrel.\nFOL: all x. (Big(x) -> likes(x, Squirrel(x)))\n\nTEXT: The squirrel does not like the squirrel.\nFOL: not all x. (likes(x, Squirrel(x)) -> likes(x, Squirrel(x)))\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\n\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\n\nTEXT: The cow likes the squirrel.\nFOL: all x. (Cow(x) -> likes(x, Squirrel(x)))\n\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\n\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\n\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\n\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\n\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\n\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> Nice(x))\n\nTEXT: The squirrel eats the cow.\nFOL: all x. (Squirrel(x) -> eats(x, Cow(x)))\n\nTEXT: The squirrel is kind.\nFOL: all x. (Squirrel(x) -> Kind(x))\n\nTEXT: The squirrel is nice.\nFOL: all x. (Squirrel(x) -> Nice(x))\n\nTEXT: If someone likes the cow then they are red.\nFOL: all x. (likes(x, Cow(x)) -> red(x))\n\nTEXT: If someone is big then they like the squirrel.\nFOL: all x. (Big(x) -> likes(x, Squirrel(x)))\n\nTEXT: The squirrel does not like the squirrel.\nFOL: not all x. (likes(x, Squirrel(x)) -> likes(x, Squirrel(x)))\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\n\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\n\nTEXT: The cow likes the squirrel.\nFOL: all x. (Cow(x) -> likes(x, Squirrel(x)))\n\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\n\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\n\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\n\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\n\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> kind(x))\n\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> nice(x))\n\nTEXT: The squirrel eats the cow.\nFOL: all x. (Squirrel(x) -> eats(x, Cow(x)))\n\nTEXT: The squirrel is kind.\nFOL: all x. (Squirrel(x) -> kind(x))\n\nTEXT: The squirrel is nice.\nFOL: all x. (Squirrel(x) -> nice(x))\n\nTEXT: If someone likes the cow then they are red.\nFOL: all x. (likes(x, Cow(x)) -> Red(x))\n\nTEXT: If someone is big then they like the squirrel.\nFOL: all x. (Big(x) -> likes(x, Squirrel(x)))\n\nTEXT: The squirrel does not like the squirrel.\nFOL: not all x. (likes(x, Squirrel(x)) -> likes(x, Squirrel(x)))\n\n</EVALUATE>"
  ]
 },
 {
  "index": 5,
  "responses": [
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & Eat(x, y) -> CatEatsRabbit(x, y))\nTEXT: The cat is cold.\nFOL: all x. (Cat(x) -> -Cold(x))\nTEXT: The cat is young.\nFOL: all x. (Cat(x) -> Young(x))\nTEXT: The cat sees the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & See(x, y) -> CatSeesRabbit(x, y))\nTEXT: The cat visits the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & Visit(x, y) -> CatVisitsRabbit(x, y))\nTEXT: The rabbit sees the cat.\nFOL: all x y. (Rabbit(x) & Cat(x) & See(x, y) -> RabbitSeesCat(x, y))\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(x) & Visit(x, y) -> RabbitVisitsCat(x, y))\nTEXT: If something visits the rabbit and the rabbit eats the cat then the cat visits the rabbit.\nFOL: all x y. (Something(x) & Rabbit(x) & Visit(x, y) & RabbitEatsCat(x, y) -> CatVisitsRabbit(x, y))\nTEXT: If something is blue then it sees the cat.\nFOL: all x y. (Something(x) & Blue(x) & See(x, y) -> Cat(x) -> See(x, y))\nTEXT: If something visits the rabbit then it is blue.\nFOL: all x y. (Something(x) & Rabbit(x) & Visit(x, y) -> Blue(x, y))\nTEXT: If something visits the rabbit then it eats the cat.\nFOL: all x y. (Something(x) & Rabbit(x) & Visit(x, y) & Eat(x, y) -> CatEatsRabbit(x, y))\nTEXT: If something sees the cat then the cat sees the rabbit.\nFOL: all x y. (Something(x) & Cat(x) & See(x, y) -> CatSeesRabbit(x, y))\nTEXT: If something is big and it sees the cat then it visits the cat.\nFOL: all x y. (Something(x) & Big(x) & See(x, y) & Visit(x, y) -> CatVisitsCat(x, y))\nTEXT: If something is cold then it sees the cat.\nFOL: all x y. (Something(x) & Cold(x) & See(x, y) -> Cat(x) -> See(x, y))\nTEXT: If something is blue then it is big.\nFOL: all x y. (Something(x) & Blue(x) & Big(x) -> Cat(x) -> Big(x))\nTEXT: The rabbit eats the cat.\nFOL: all x y. (Rabbit(x) & Cat(x) & Eat(x, y) -> RabbitEatsCat(x, y))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & Eat(x, y) -> CatEatsRabbit(x, y))\nTEXT: The cat is cold.\nFOL: all x. (Cat(x) -> -Cold(x))\nTEXT: The cat is young.\nFOL: all x. (Cat(x) -> Young(x))\nTEXT: The cat sees the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & See(x, y) -> CatSeesRabbit(x, y))\nTEXT: The cat visits the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & Visit(x, y) -> CatVisitsRabbit(x, y))\nTEXT: The rabbit sees the cat.\nFOL: all x y. (Rabbit(x) & Cat(x) & See(x, y) -> RabbitSeesCat(x, y))\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(x) & Visit(x, y) -> RabbitVisitsCat(x, y))\nTEXT: If something visits the rabbit and the rabbit eats the cat then the cat visits the rabbit.\nFOL: all x y. (Something(x) & Rabbit(x) & Visit(x, y) & RabbitEatsCat(x, y) -> CatVisitsRabbit(x, y))\nTEXT: If something is blue then it sees the cat.\nFOL: all x y. (Something(x) & Blue(x) & See(x, y) -> Cat(x) -> Blue(x))\nTEXT: If something visits the rabbit then it is blue.\nFOL: all x y. (Something(x) & Rabbit(x) & Visit(x, y) -> Blue(x))\nTEXT: If something visits the rabbit then it eats the cat.\nFOL: all x y. (Something(x) & Rabbit(x) & Visit(x, y) & Eat(x, y) -> CatEatsRabbit(x, y))\nTEXT: If something sees the cat then the cat sees the rabbit.\nFOL: all x y. (Something(x) & Cat(x) & See(x, y) -> CatSeesRabbit(x, y))\nTEXT: If something is big and it sees the cat then it visits the cat.\nFOL: all x y. (Something(x) & Big(x) & See(x, y) & Visit(x, y) -> CatVisitsCat(x, y))\nTEXT: If something is cold then it sees the cat.\nFOL: all x y. (Something(x) & Cold(x) & See(x, y) -> Cat(x) -> Cold(x))\nTEXT: If something is blue then it is big.\nFOL: all x y. (Something(x) & Blue(x) & Big(x) -> Cat(x) -> Big(x))\nTEXT: The rabbit eats the cat.\nFOL: all x y. (Rabbit(x) & Cat(x) & Eat(x, y) -> RabbitEatsCat(x, y))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & Eat(x, y) -> CatEatsRabbit(x, y))\nTEXT: The cat is cold.\nFOL: all x. (Cat(x) -> -Cold(x))\nTEXT: The cat is young.\nFOL: all x. (Cat(x) -> Young(x))\nTEXT: The cat sees the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & See(x, y) -> CatSeesRabbit(x, y))\nTEXT: The cat visits the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & Visit(x, y) -> CatVisitsRabbit(x, y))\nTEXT: The rabbit sees the cat.\nFOL: all x y. (Rabbit(x) & Cat(x) & See(x, y) -> RabbitSeesCat(x, y))\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(x) & Visit(x, y) -> RabbitVisitsCat(x, y))\nTEXT: If something visits the rabbit and the rabbit eats the cat then the cat visits the rabbit.\nFOL: all x y. (Something(x) & Rabbit(x) & Visit(x, y) & RabbitEatsCat(x, y) -> CatVisitsRabbit(x, y))\nTEXT: If something is blue then it sees the cat.\nFOL: all x y. (Something(x) & Blue(x) & See(x, y) -> Cat(x) -> See(x, y))\nTEXT: If something visits the rabbit then it is blue.\nFOL: all x y. (Something(x) & Rabbit(x) & Visit(x, y) -> Blue(x, y))\nTEXT: If something visits the rabbit then it eats the cat.\nFOL: all x y. (Something(x) & Rabbit(x) & Visit(x, y) & Eat(x, y) -> CatEatsRabbit(x, y))\nTEXT: If something sees the cat then the cat sees the rabbit.\nFOL: all x y. (Something(x) & Cat(x) & See(x, y) -> CatSeesRabbit(x, y))\nTEXT: If something is big and it sees the cat then it visits the cat.\nFOL: all x y. (Something(x) & Big(x) & See(x, y) & Visit(x, y) -> CatVisitsCat(x, y))\nTEXT: If something is cold then it sees the cat.\nFOL: all x y. (Something(x) & Cold(x) & See(x, y) -> Cat(x) -> See(x, y))\nTEXT: If something is blue then it is big.\nFOL: all x y. (Something(x) & Blue(x) & Big(x) -> Cat(x) -> Big(x))\nTEXT: The rabbit eats the cat.\nFOL: all x y. (Rabbit(x) & Cat(x) & Eat(x, y) -> CatEatsRabbit(x, y))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & Eat(x, y) -> CatEatsRabbit(x, y))\nTEXT: The cat is cold.\nFOL: all x. (Cat(x) -> -Cold(x))\nTEXT: The cat is young.\nFOL: all x. (Cat(x) -> Young(x))\nTEXT: The cat sees the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & See(x, y) -> CatSeesRabbit(x, y))\nTEXT: The cat visits the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & Visit(x, y) -> CatVisitsRabbit(x, y))\nTEXT: The rabbit sees the cat.\nFOL: all x y. (Rabbit(x) & Cat(x) & See(x, y) -> RabbitSeesCat(x, y))\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(x) & Visit(x, y) -> RabbitVisitsCat(x, y))\nTEXT: If something visits the rabbit and the rabbit eats the cat then the cat visits the rabbit.\nFOL: all x y. (Something(x) & Rabbit(x) & Visit(x, y) & RabbitEatsCat(x, y) -> CatVisitsRabbit(x, y))\nTEXT: If something is blue then it sees the cat.\nFOL: all x y. (Something(x) & Blue(x) & See(x, y) -> Cat(x) -> Blue(x))\nTEXT: If something visits the rabbit then it is blue.\nFOL: all x y. (Something(x) & Rabbit(x) & Visit(x, y) -> Blue(x))\nTEXT: If something visits the rabbit then it eats the cat.\nFOL: all x y. (Something(x) & Rabbit(x) & Visit(x, y) & Eat(x, y) -> CatEatsRabbit(x, y))\nTEXT: If something sees the cat then the cat sees the rabbit.\nFOL: all x y. (Something(x) & Cat(x) & See(x, y) -> CatSeesRabbit(x, y))\nTEXT: If something is big and it sees the cat then it visits the cat.\nFOL: all x y. (Something(x) & Big(x) & See(x, y) & Visit(x, y) -> CatVisitsCat(x, y))\nTEXT: If something is cold then it sees the cat.\nFOL: all x y. (Something(x) & Cold(x) & See(x, y) -> Cat(x) -> Cold(x))\nTEXT: If something is blue then it is big.\nFOL: all x y. (Something(x) & Blue(x) & Big(x) & -Cold(x))\nTEXT: The rabbit eats the cat.\nFOL: all x y. (Rabbit(x) & Cat(x) & Eat(x, y) -> RabbitEatsCat(x, y))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & Eat(x, y) -> CatEatsRabbit(x, y))\nTEXT: The cat is cold.\nFOL: all x. (Cat(x) -> -Cold(x))\nTEXT: The cat is young.\nFOL: all x. (Cat(x) -> Young(x))\nTEXT: The cat sees the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & See(x, y) -> CatSeesRabbit(x, y))\nTEXT: The cat visits the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & Visit(x, y) -> CatVisitsRabbit(x, y))\nTEXT: The rabbit sees the cat.\nFOL: all x y. (Rabbit(x) & Cat(x) & See(x, y) -> RabbitSeesCat(x, y))\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(x) & Visit(x, y) -> RabbitVisitsCat(x, y))\nTEXT: If something visits the rabbit and the rabbit eats the cat then the cat visits the rabbit.\nFOL: all x y. (Something(x) & Rabbit(x) & Visit(x, y) & RabbitEatsCat(x, y) -> CatVisitsRabbit(x, y))\nTEXT: If something is blue then it sees the cat.\nFOL: all x y. (Something(x) & Blue(x) & See(x, y) -> Cat(x) -> See(x, y))\nTEXT: If something visits the rabbit then it is blue.\nFOL: all x y. (Something(x) & Rabbit(x) & Visit(x, y) -> Blue(x, y))\nTEXT: If something visits the rabbit then it eats the cat.\nFOL: all x y. (Something(x) & Rabbit(x) & Visit(x, y) & Eat(x, y) -> CatEatsRabbit(x, y))\nTEXT: If something sees the cat then the cat sees the rabbit.\nFOL: all x y. (Something(x) & Cat(x) & See(x, y) -> CatSeesRabbit(x, y))\nTEXT: If something is big and it sees the cat then it visits the cat.\nFOL: all x y. (Something(x) & Big(x) & See(x, y) & Visit(x, y) -> CatVisitsCat(x, y))\nTEXT: If something is cold then it sees the cat.\nFOL: all x y. (Something(x) & Cold(x) & See(x, y) -> Cat(x) -> See(x, y))\nTEXT: If something is blue then it is big.\nFOL: all x y. (Something(x) & Blue(x) & Big(x) -> Cat(x))\nTEXT: The rabbit eats the cat.\nFOL: all x y. (Rabbit(x) & Cat(x) & Eat(x, y) -> RabbitEatsCat(x, y))\n</EVALUATE>"
  ]
 },
 {
  "index": 6,
  "responses": [
   "<EVALUATE>\n\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\n\nTEXT: Anne is blue.\nFOL: all x. (Anne(x) -> Blue(x))\n\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> Cold(x))\n\nTEXT: Anne is furry.\nFOL: all x. (Anne(x) -> Furry(x))\n\nTEXT: Anne is kind.\nFOL: all x. (Anne(x) -> Kind(x))\n\nTEXT: Anne is white.\nFOL: all x. (Anne(x) -> White(x))\n\nTEXT: Anne is young.\nFOL: all x. (Anne(x) -> Young(x))\n\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\n\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Furry(x))\n\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) -> Kind(x))\n\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\n\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\n\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Furry(x))\n\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\n\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\n\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\n\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\n\nTEXT: Furry, white people are blue.\nFOL: all x. (Furry(x) & White(x) -> Blue(x))\n\nTEXT: If someone is furry then they are white.\nFOL: all x. (Furry(x) -> White(x))\n\nTEXT: Harry is cold.\nFOL: all x. (Harry(x) -> Cold(x))\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\n\nTEXT: Anne is blue.\nFOL: all x. (Anne(x) -> Blue(x))\n\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> Cold(x))\n\nTEXT: Anne is furry.\nFOL: all x. (Anne(x) -> Furry(x))\n\nTEXT: Anne is kind.\nFOL: all x. (Anne(x) -> Kind(x))\n\nTEXT: Anne is white.\nFOL: all x. (Anne(x) -> White(x))\n\nTEXT: Anne is young.\nFOL: all x. (Anne(x) -> Young(x))\n\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\n\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Furry(x))\n\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) -> Kind(x))\n\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\n\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\n\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Furry(x))\n\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\n\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\n\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\n\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\n\nTEXT: Furry, white people are blue.\nFOL: (Furry(x) & White(x) -> Blue(x))\n\nTEXT: If someone is furry then they are white.\nFOL: (Furry(x) -> White(x))\n\nTEXT: Harry is cold.\nFOL: Harry(x) -> Cold(x)\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\n\nTEXT: Anne is blue.\nFOL: all x. (Anne(x) -> Blue(x))\n\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> Cold(x))\n\nTEXT: Anne is furry.\nFOL: all x. (Anne(x) -> Furry(x))\n\nTEXT: Anne is kind.\nFOL: all x. (Anne(x) -> Kind(x))\n\nTEXT: Anne is white.\nFOL: all x. (Anne(x) -> White(x))\n\nTEXT: Anne is young.\nFOL: all x. (Anne(x) -> Young(x))\n\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\n\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Furry(x))\n\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) -> Kind(x))\n\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\n\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\n\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Furry(x))\n\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\n\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\n\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\n\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\n\nTEXT: Furry, white people are blue.\nFOL: (Furry(x) & White(x) -> Blue(x))\n\nTEXT: If someone is furry then they are white.\nFOL: (Furry(x) -> White(x))\n\nTEXT: Harry is cold.\nFOL: (Harry(x) -> Cold(x))\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\n\nTEXT: Anne is blue.\nFOL: all x. (Anne(x) -> Blue(x))\n\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> Cold(x))\n\nTEXT: Anne is furry.\nFOL: all x. (Anne(x) -> Furry(x))\n\nTEXT: Anne is kind.\nFOL: all x. (Anne(x) -> Kind(x))\n\nTEXT: Anne is white.\nFOL: all x. (Anne(x) -> White(x))\n\nTEXT: Anne is young.\nFOL: all x. (Anne(x) -> Young(x))\n\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\n\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Furry(x))\n\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) -> Kind(x))\n\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\n\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\n\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Furry(x))\n\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\n\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\n\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\n\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\n\nTEXT: Furry, white people are blue.\nFOL: (Furry(x) & White(x) -> Blue(x))\n\nTEXT: If someone is furry then they are white.\nFOL: (Furry(x) -> White(x))\n\nTEXT: Harry is cold.\nFOL: all x. (Harry(x) -> Cold(x))\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\n\nTEXT: Anne is blue.\nFOL: all x. (Anne(x) -> Blue(x))\n\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> Cold(x))\n\nTEXT: Anne is furry.\nFOL: all x. (Anne(x) -> Furry(x))\n\nTEXT: Anne is kind.\nFOL: all x. (Anne(x) -> Kind(x))\n\nTEXT: Anne is white.\nFOL: all x. (Anne(x) -> White(x))\n\nTEXT: Anne is young.\nFOL: all x. (Anne(x) -> Young(x))\n\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\n\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Furry(x))\n\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) -> Kind(x))\n\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\n\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\n\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Furry(x))\n\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\n\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\n\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\n\nTEXT: Big people are kind.\nFOL: all x. (Big(x) & Kind(x))\n\nTEXT: Furry, white people are blue.\nFOL: (Furry(x) & White(x) & Blue(x))\n\nTEXT: If someone is furry then they are white.\nFOL: (Furry(x) -> White(x))\n\nTEXT: Harry is cold.\nFOL: Harry(x) -> Cold(x)\n\n</EVALUATE>"
  ]
 },
 {
  "index": 7,
  "responses": [
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x y. (Young(x) & Cold(x) -> NamedAlan(x))\nTEXT: Dave, who is both nice and kind, is rough, round and young, too.\nFOL: all x y. (Nice(x) & Kind(x) & Rough(x) & Round(x) & Young(x) -> Dave(x))\nTEXT: A blue colored person who is nice is a red person.\nFOL: all x y. (Blue(x) & Nice(x) & Red(x) -> Red(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x y. (Nice(x) & Kind(x) & -Blue(x) -> -Blue(y))\nTEXT: Nice people who are blue and round at the same time are always young.\nFOL: all x y. (Nice(x) & Blue(x) & Round(x) & Young(x) -> Young(x))\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: all x y. (Green(x) & Naive(x) & Red(x) & Rough(x) & Skin(x) -> Red(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: -Green(x) & -Naive(x) & -Red(x) & -Rough(x) & -Skin(x) -> Round(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x y. (Rough(x) & Red(x) & Face(x) & Size(x) -> Big(x))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x y. (Round(x) & Blue(x) & Young(x) -> Young(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: all x y. (Cold(x) & Blue(x) & Rough(x) & Kind(x) -> Kind(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x y. (Young(x) & Cold(x) -> NamedAlan(x))\nTEXT: Dave, who is both nice and kind, is rough, round and young, too.\nFOL: all x y. (Nice(x) & Kind(x) & Rough(x) & Round(x) & Young(x) -> Dave(x))\nTEXT: A blue colored person who is nice is a red person.\nFOL: all x y. (Blue(x) & Nice(x) & Red(x) -> Red(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x y. (Nice(x) & Kind(x) & -Blue(x) -> -Blue(y))\nTEXT: Nice people who are blue and round at the same time are always young.\nFOL: all x y. (Nice(x) & Blue(x) & Round(x) & Young(x) -> Young(x))\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: all x y. (Green(x) & Naive(x) & Red(x) & Rough(x) & Skin(x) -> Red(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: -Green(x) & -Naive(x) & -Red(x) & -Rough(x) & -Skin(x) -> Round(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x y. (Rough(x) & Red(x) & Face(x) & Size(x) -> Big(x))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x y. (Round(x) & Blue(x) & Young(x) -> Young(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: all x y. (Cold(x) & Blue(x) & Rough(x) & Kind(x) -> Kind(x))\nTEXT: Dave is red.\nFOL: -Nice(x) & -Kind(x) & Dave(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x y. (Young(x) & Cold(x) -> NamedAlan(x))\nTEXT: Dave, who is both nice and kind, is rough, round and young, too.\nFOL: all x y. (Nice(x) & Kind(x) & Rough(x) & Round(x) & Young(x) -> Dave(x))\nTEXT: A blue colored person who is nice is a red person.\nFOL: all x y. (Blue(x) & Nice(x) & Red(x) -> Red(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x y. (Nice(x) & Kind(x) & -Blue(x) -> -Blue(y))\nTEXT: Nice people who are blue and round at the same time are always young.\nFOL: all x y. (Nice(x) & Blue(x) & Round(x) & Young(x) -> Young(x))\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: all x y. (Green(x) & Naive(x) & Red(x) & Rough(x) & Skin(x) -> Red(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: -Green(x) & -Naive(x) & -Red(x) & -Rough(x) & -Skin(x) -> Round(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x y. (Rough(x) & Red(x) & Face(x) & Size(x) -> Big(x))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x y. (Round(x) & Blue(x) & Young(x) -> Young(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: all x y. (Cold(x) & Blue(x) & Rough(x) & Kind(x) -> Kind(x))\nTEXT: Dave is red.\nFOL: -Nice(x) & -Kind(x) & -Blue(x) & -Red(x) & Dave(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x y. (Young(x) & Cold(x) -> NamedAlan(x))\nTEXT: Dave, who is both nice and kind, is rough, round and young, too.\nFOL: all x y. (Nice(x) & Kind(x) & Rough(x) & Round(x) & Young(x) -> Dave(x))\nTEXT: A blue colored person who is nice is a red person.\nFOL: all x y. (Blue(x) & Nice(x) & Red(x) -> Red(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x y. (Nice(x) & Kind(x) & -Blue(x) -> -Blue(y))\nTEXT: Nice people who are blue and round at the same time are always young.\nFOL: all x y. (Nice(x) & Blue(x) & Round(x) & Young(x) -> Young(x))\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: all x y. (Green(x) & Naive(x) & Red(x) & Rough(x) & Skin(x) -> Red(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: -Green(x) & -Naive(x) & -Red(x) & -Rough(x) & -Skin(x) -> Round(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x y. (Rough(x) & Red(x) & Face(x) & Size(x) -> Big(x))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x y. (Round(x) & Blue(x) & Young(x) -> Young(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: all x y. (Cold(x) & Blue(x) & Rough(x) & Kind(x) -> Kind(x))\nTEXT: Dave is red.\nFOL: -Nice(x) & -Kind(x) & -Blue(x) & -Rough(x) & -Red(x) -> Dave(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x y. (Young(x) & Cold(x) -> NamedAlan(x))\nTEXT: Dave, who is both nice and kind, is rough, round and young, too.\nFOL: all x y. (Nice(x) & Kind(x) & Rough(x) & Round(x) & Young(x) -> Dave(x))\nTEXT: A blue colored person who is nice is a red person.\nFOL: all x y. (Blue(x) & Nice(x) & Red(x) -> Red(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x y. (Nice(x) & Kind(x) & -Blue(x) -> -Blue(y))\nTEXT: Nice people who are blue and round at the same time are always young.\nFOL: all x y. (Nice(x) & Blue(x) & Round(x) & Young(x) -> Young(x))\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: all x y. (Green(x) & Naive(x) & Red(x) & Rough(x) & Skin(x) -> Red(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: -Green(x) & -Naive(x) & -Red(x) & -Rough(x) & -Skin(x) -> Round(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x y. (Rough(x) & Red(x) & Face(x) & Size(x) -> Big(x))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x y. (Round(x) & Blue(x) & Young(x) -> Young(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: all x y. (Cold(x) & Blue(x) & Rough(x) & Kind(x) -> Kind(x))\nTEXT: Dave is red.\nFOL: -Nice(x) & -Kind(x) & -Blue(x) & -Rough(x) & -Red(x) & Dave(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 8,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: all x. (Furry(x) -> Anne(x))\nTEXT: Anne is nice.\nFOL: all x. (Nice(x) -> Anne(x))\nTEXT: Anne is rough.\nFOL: all x. (Rough(x) -> Anne(x))\nTEXT: Anne is young.\nFOL: all x. (Young(x) -> Anne(x))\nTEXT: Dave is green.\nFOL: all x. (Green(x) -> Dave(x))\nTEXT: Dave is rough.\nFOL: all x. (Rough(x) -> Dave(x))\nTEXT: Dave is young.\nFOL: all x. (Young(x) -> Dave(x))\nTEXT: If something is round and rough then it is green.\nFOL: (Round(x) & Rough(x) -> Green(x))\nTEXT: Green things are white.\nFOL: all x. (Green(x) -> White(x))\nTEXT: If something is white and green then it is young.\nFOL: (White(x) & Green(x) -> Young(x))\nTEXT: White, nice things are furry.\nFOL: (Nice(x) & White(x) -> Furry(x))\nTEXT: If Anne is nice then Anne is furry.\nFOL: (Nice(x) -> Furry(x))\nTEXT: Young, rough things are white.\nFOL: (Young(x) & Rough(x) -> White(x))\nTEXT: All white things are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Round things are rough.\nFOL: all x. (Round(x) -> Rough(x))\nTEXT: Dave is not round.\nFOL: -Round(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: all x. (Furry(x) -> Anne(x))\nTEXT: Anne is nice.\nFOL: all x. (Nice(x) -> Anne(x))\nTEXT: Anne is rough.\nFOL: all x. (Rough(x) -> Anne(x))\nTEXT: Anne is young.\nFOL: all x. (Young(x) -> Anne(x))\nTEXT: Dave is green.\nFOL: all x. (Green(x) -> Dave(x))\nTEXT: Dave is rough.\nFOL: all x. (Rough(x) -> Dave(x))\nTEXT: Dave is young.\nFOL: all x. (Young(x) -> Dave(x))\nTEXT: If something is round and rough then it is green.\nFOL: all x y. (Round(x) & Rough(x) -> Green(x))\nTEXT: Green things are white.\nFOL: all x. (Green(x) -> White(x))\nTEXT: If something is white and green then it is young.\nFOL: all x y. (White(x) & Green(x) -> Young(x))\nTEXT: White, nice things are furry.\nFOL: all x. (Nice(x) & White(x) -> Furry(x))\nTEXT: If Anne is nice then Anne is furry.\nFOL: all x. (Nice(x) -> Furry(x))\nTEXT: Young, rough things are white.\nFOL: all x. (Young(x) & Rough(x) -> White(x))\nTEXT: All white things are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Round things are rough.\nFOL: all x. (Round(x) -> Rough(x))\nTEXT: Dave is not round.\nFOL: -Round(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: all x. (Furry(x) -> Anne(x))\nTEXT: Anne is nice.\nFOL: all x. (Nice(x) -> Anne(x))\nTEXT: Anne is rough.\nFOL: all x. (Rough(x) -> Anne(x))\nTEXT: Anne is young.\nFOL: all x. (Young(x) -> Anne(x))\nTEXT: Dave is green.\nFOL: all x. (Green(x) -> Dave(x))\nTEXT: Dave is rough.\nFOL: all x. (Rough(x) -> Dave(x))\nTEXT: Dave is young.\nFOL: all x. (Young(x) -> Dave(x))\nTEXT: If something is round and rough then it is green.\nFOL: (Round(x) & Rough(x) -> Green(x))\nTEXT: Green things are white.\nFOL: (Green(x) -> White(x))\nTEXT: If something is white and green then it is young.\nFOL: (White(x) & Green(x) -> Young(x))\nTEXT: White, nice things are furry.\nFOL: (Nice(x) & White(x) -> Furry(x))\nTEXT: If Anne is nice then Anne is furry.\nFOL: (Nice(x) -> Furry(x))\nTEXT: Young, rough things are white.\nFOL: (Young(x) & Rough(x) -> White(x))\nTEXT: All white things are round.\nFOL: (White(x) -> Round(x))\nTEXT: Round things are rough.\nFOL: (Round(x) -> Rough(x))\nTEXT: Dave is not round.\nFOL: -Round(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: all x. (Furry(x) -> Anne(x))\nTEXT: Anne is nice.\nFOL: all x. (Nice(x) -> Anne(x))\nTEXT: Anne is rough.\nFOL: all x. (Rough(x) -> Anne(x))\nTEXT: Anne is young.\nFOL: all x. (Young(x) -> Anne(x))\nTEXT: Dave is green.\nFOL: all x. (Green(x) -> Dave(x))\nTEXT: Dave is rough.\nFOL: all x. (Rough(x) -> Dave(x))\nTEXT: Dave is young.\nFOL: all x. (Young(x) -> Dave(x))\nTEXT: If something is round and rough then it is green.\nFOL: (Round(x) & Rough(x) -> Green(x))\nTEXT: Green things are white.\nFOL: (Green(x) -> White(x))\nTEXT: If something is white and green then it is young.\nFOL: (White(x) & Green(x) -> Young(x))\nTEXT: White, nice things are furry.\nFOL: (Nice(x) & White(x) -> Furry(x))\nTEXT: If Anne is nice then Anne is furry.\nFOL: (Nice(x) -> Furry(x))\nTEXT: Young, rough things are white.\nFOL: (Young(x) & Rough(x) -> White(x))\nTEXT: All white things are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Round things are rough.\nFOL: all x. (Round(x) -> Rough(x))\nTEXT: Dave is not round.\nFOL: -Round(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: all x. (Furry(x) -> Anne(x))\nTEXT: Anne is nice.\nFOL: all x. (Nice(x) -> Anne(x))\nTEXT: Anne is rough.\nFOL: all x. (Rough(x) -> Anne(x))\nTEXT: Anne is young.\nFOL: all x. (Young(x) -> Anne(x))\nTEXT: Dave is green.\nFOL: all x. (Green(x) -> Dave(x))\nTEXT: Dave is rough.\nFOL: all x. (Rough(x) -> Dave(x))\nTEXT: Dave is young.\nFOL: all x. (Young(x) -> Dave(x))\nTEXT: If something is round and rough then it is green.\nFOL: (Round(x) & Rough(x) -> Green(x))\nTEXT: Green things are white.\nFOL: all x. (Green(x) -> White(x))\nTEXT: If something is white and green then it is young.\nFOL: (White(x) & Green(x) -> Young(x))\nTEXT: White, nice things are furry.\nFOL: (Nice(x) & White(x) -> Furry(x))\nTEXT: If Anne is nice then Anne is furry.\nFOL: (Nice(x) -> Furry(x))\nTEXT: Young, rough things are white.\nFOL: (Young(x) & Rough(x) -> White(x))\nTEXT: All white things are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Round things are rough.\nFOL: all x. (Round(x) -> Rough(x))\nTEXT: Dave is not round.\nFOL: -Round(dave)"
  ]
 },
 {
  "index": 9,
  "responses": [
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: all x. (Bear(x) -> Round(x))\nTEXT: The bear needs the squirrel.\nFOL: all x. (Bear(x) -> -Squirrel(x))\nTEXT: The rabbit is cold.\nFOL: all x. (Rabbit(x) -> -Cold(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> Round(x))\nTEXT: The rabbit needs the squirrel.\nFOL: all x. (Rabbit(x) -> -Squirrel(x))\nTEXT: The rabbit visits the bear.\nFOL: all x. (Rabbit(x) -> -Bear(x))\nTEXT: The squirrel is young.\nFOL: all x. (Squirrel(x) -> -Young(x))\nTEXT: The squirrel likes the rabbit.\nFOL: all x. (Squirrel(x) -> -Rabbit(x))\nTEXT: The squirrel needs the bear.\nFOL: all x. (Squirrel(x) -> -Bear(x))\nTEXT: The squirrel visits the rabbit.\nFOL: all x. (Squirrel(x) -> -Rabbit(x))\nTEXT: If the squirrel is young and the squirrel likes the bear then the bear is green.\nFOL: all x y. (Young(x) & Likes(x) & Bear(x) -> Green(x))\nTEXT: If someone likes the rabbit then they are round.\nFOL: all x y. (Likes(x) & -Rabbit(x) -> Round(x))\nTEXT: If someone is round then they like the bear.\nFOL: all x y. (Round(x) & -Bear(x) -> Likes(x))\nTEXT: The bear is green.\nFOL: Bear(x) -> Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: all x. (Bear(x) -> Round(x))\nTEXT: The bear needs the squirrel.\nFOL: all x. (Bear(x) -> -Squirrel(x))\nTEXT: The rabbit is cold.\nFOL: all x. (Rabbit(x) -> -Cold(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> Round(x))\nTEXT: The rabbit needs the squirrel.\nFOL: all x. (Rabbit(x) -> -Squirrel(x))\nTEXT: The rabbit visits the bear.\nFOL: all x. (Rabbit(x) -> -Bear(x))\nTEXT: The squirrel is young.\nFOL: all x. (Squirrel(x) -> -Young(x))\nTEXT: The squirrel likes the rabbit.\nFOL: all x. (Squirrel(x) -> -Rabbit(x))\nTEXT: The squirrel needs the bear.\nFOL: all x. (Squirrel(x) -> -Bear(x))\nTEXT: The squirrel visits the rabbit.\nFOL: all x. (Squirrel(x) -> -Rabbit(x))\nTEXT: If the squirrel is young and the squirrel likes the bear then the bear is green.\nFOL: all x y. (Young(x) & Likes(x) & Bear(x) -> Green(x))\nTEXT: If someone likes the rabbit then they are round.\nFOL: all x. (Likes(x) -> Round(x))\nTEXT: If someone is round then they like the bear.\nFOL: all x. (Round(x) -> -Likes(x))\nTEXT: The bear is green.\nFOL: Bear(x) -> Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: all x. (Bear(x) -> Round(x))\nTEXT: The bear needs the squirrel.\nFOL: all x. (Bear(x) -> -Squirrel(x))\nTEXT: The rabbit is cold.\nFOL: all x. (Rabbit(x) -> -Cold(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> Round(x))\nTEXT: The rabbit needs the squirrel.\nFOL: all x. (Rabbit(x) -> -Squirrel(x))\nTEXT: The rabbit visits the bear.\nFOL: all x. (Rabbit(x) -> -Bear(x))\nTEXT: The squirrel is young.\nFOL: all x. (Squirrel(x) -> -Young(x))\nTEXT: The squirrel likes the rabbit.\nFOL: all x. (Squirrel(x) -> -Rabbit(x))\nTEXT: The squirrel needs the bear.\nFOL: all x. (Squirrel(x) -> -Bear(x))\nTEXT: The squirrel visits the rabbit.\nFOL: all x. (Squirrel(x) -> -Rabbit(x))\nTEXT: If the squirrel is young and the squirrel likes the bear then the bear is green.\nFOL: all x y. (Young(x) & Likes(x) & Bear(x) -> Green(x))\nTEXT: If someone likes the rabbit then they are round.\nFOL: all x. (Likes(x) -> Round(x))\nTEXT: If someone is round then they like the bear.\nFOL: all x. (Round(x) -> -Likes(x))\nTEXT: The bear is green.\nFOL: -Bear(x) -> Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: all x. (Bear(x) -> -Round(x))\nTEXT: The bear needs the squirrel.\nFOL: all x. (Bear(x) -> -Squirrel(x))\nTEXT: The rabbit is cold.\nFOL: all x. (Rabbit(x) -> -Cold(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> -Round(x))\nTEXT: The rabbit needs the squirrel.\nFOL: all x. (Rabbit(x) -> -Squirrel(x))\nTEXT: The rabbit visits the bear.\nFOL: all x. (Rabbit(x) -> -Bear(x))\nTEXT: The squirrel is young.\nFOL: all x. (Squirrel(x) -> -Young(x))\nTEXT: The squirrel likes the rabbit.\nFOL: all x. (Squirrel(x) -> -Rabbit(x))\nTEXT: The squirrel needs the bear.\nFOL: all x. (Squirrel(x) -> -Bear(x))\nTEXT: The squirrel visits the rabbit.\nFOL: all x. (Squirrel(x) -> -Rabbit(x))\nTEXT: If the squirrel is young and the squirrel likes the bear then the bear is green.\nFOL: all x y. (Young(x) & Likes(x) & Bear(x) -> Green(x))\nTEXT: If someone likes the rabbit then they are round.\nFOL: all x. (Likes(x) -> -Round(x))\nTEXT: If someone is round then they like the bear.\nFOL: all x. (Round(x) -> -Likes(x))\nTEXT: The bear is green.\nFOL: Bear(x) -> Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: all x. (Bear(x) -> Round(x))\nTEXT: The bear needs the squirrel.\nFOL: all x. (Bear(x) -> -Squirrel(x))\nTEXT: The rabbit is cold.\nFOL: all x. (Rabbit(x) -> -Cold(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> Round(x))\nTEXT: The rabbit needs the squirrel.\nFOL: all x. (Rabbit(x) -> -Squirrel(x))\nTEXT: The rabbit visits the bear.\nFOL: all x. (Rabbit(x) -> -Bear(x))\nTEXT: The squirrel is young.\nFOL: all x. (Squirrel(x) -> -Young(x))\nTEXT: The squirrel likes the rabbit.\nFOL: all x. (Squirrel(x) -> -Rabbit(x))\nTEXT: The squirrel needs the bear.\nFOL: all x. (Squirrel(x) -> -Bear(x))\nTEXT: The squirrel visits the rabbit.\nFOL: all x. (Squirrel(x) -> -Rabbit(x))\nTEXT: If the squirrel is young and the squirrel likes the bear then the bear is green.\nFOL: all x y. (Young(x) & Likes(x) & Bear(x) -> Green(x))\nTEXT: If someone likes the rabbit then they are round.\nFOL: all x y. (Likes(x) & -Rabbit(x) -> Round(x))\nTEXT: If someone is round then they like the bear.\nFOL: all x y. (Round(x) & -Bear(x) -> Likes(x))\nTEXT: The bear is green.\nFOL: -Bear(x) -> Green(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 10,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: all x. (Person(x) -> Blue(x))\nTEXT: Bob is green.\nFOL: all x. (Person(x) -> Green(x))\nTEXT: Bob is quiet.\nFOL: all x. (Person(x) -> Quiet(x))\nTEXT: Bob is red.\nFOL: all x. (Person(x) -> Red(x))\nTEXT: Bob is round.\nFOL: all x. (Person(x) -> Round(x))\nTEXT: Gary is blue.\nFOL: all x. (Person(x) -> Blue(x))\nTEXT: Gary is green.\nFOL: all x. (Person(x) -> Green(x))\nTEXT: Gary is nice.\nFOL: all x. (Person(x) -> Nice(x))\nTEXT: Gary is quiet.\nFOL: all x. (Person(x) -> Quiet(x))\nTEXT: Gary is red.\nFOL: all x. (Person(x) -> Red(x))\nTEXT: Gary is white.\nFOL: all x. (Person(x) -> White(x))\nTEXT: Harry is green.\nFOL: all x. (Person(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Person(x) -> Quiet(x))\nTEXT: Harry is red.\nFOL: all x. (Person(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Person(x) -> White(x))\nTEXT: Red people are white.\nFOL: Red(x) -> White(x)\nTEXT: Gary is green.\nFOL: all x. (Person(x) -> Green(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: all x. (Anne(x) -> Blue(x))\nTEXT: Bob is green.\nFOL: all x. (Bob(x) -> Green(x))\nTEXT: Bob is quiet.\nFOL: all x. (Bob(x) -> Quiet(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> Red(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> Round(x))\nTEXT: Gary is blue.\nFOL: all x. (Gary(x) -> Blue(x))\nTEXT: Gary is green.\nFOL: all x. (Gary(x) -> Green(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> Nice(x))\nTEXT: Gary is quiet.\nFOL: all x. (Gary(x) -> Quiet(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Gary is white.\nFOL: all x. (Gary(x) -> White(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is red.\nFOL: all x. (Harry(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: Red people are white.\nFOL: all x. (Red(x) -> White(x))\nTEXT: Gary is green.\nFOL: all x. (Gary(x) -> Green(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: all x. (Anne(x) -> Blue(x))\nTEXT: Bob is green.\nFOL: all x. (Bob(x) -> Green(x))\nTEXT: Bob is quiet.\nFOL: all x. (Bob(x) -> Quiet(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> Red(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> Round(x))\nTEXT: Gary is blue.\nFOL: all x. (Gary(x) -> Blue(x))\nTEXT: Gary is green.\nFOL: all x. (Gary(x) -> Green(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> Nice(x))\nTEXT: Gary is quiet.\nFOL: all x. (Gary(x) -> Quiet(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Gary is white.\nFOL: all x. (Gary(x) -> White(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is red.\nFOL: all x. (Harry(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: Red people are white.\nFOL: Red(x) -> White(x)\nTEXT: Gary is green.\nFOL: all x. (Gary(x) -> Green(x))\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Anne is blue.\nFOL: all x. (Anne(x) -> Blue(x))\n\nTEXT: Bob is green.\nFOL: all x. (Bob(x) -> Green(x))\n\nTEXT: Bob is quiet.\nFOL: all x. (Bob(x) -> Quiet(x))\n\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> Red(x))\n\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> Round(x))\n\nTEXT: Gary is blue.\nFOL: all x. (Gary(x) -> Blue(x))\n\nTEXT: Gary is green.\nFOL: all x. (Gary(x) -> Green(x))\n\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> Nice(x))\n\nTEXT: Gary is quiet.\nFOL: all x. (Gary(x) -> Quiet(x))\n\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\n\nTEXT: Gary is white.\nFOL: all x. (Gary(x) -> White(x))\n\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\n\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\n\nTEXT: Harry is red.\nFOL: all x. (Harry(x) -> Red(x))\n\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\n\nTEXT: Red people are white.\nFOL: all x. (Red(x) -> White(x))\n\nTEXT: Gary is green.\nFOL: all x. (Gary(x) -> Green(x))\n\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: all x. (Person(x) -> Blue(x))\nTEXT: Bob is green.\nFOL: all x. (Person(x) -> Green(x))\nTEXT: Bob is quiet.\nFOL: all x. (Person(x) -> Quiet(x))\nTEXT: Bob is red.\nFOL: all x. (Person(x) -> Red(x))\nTEXT: Bob is round.\nFOL: all x. (Person(x) -> Round(x))\nTEXT: Gary is blue.\nFOL: all x. (Person(x) -> Blue(x))\nTEXT: Gary is green.\nFOL: all x. (Person(x) -> Green(x))\nTEXT: Gary is nice.\nFOL: all x. (Person(x) -> Nice(x))\nTEXT: Gary is quiet.\nFOL: all x. (Person(x) -> Quiet(x))\nTEXT: Gary is red.\nFOL: all x. (Person(x) -> Red(x))\nTEXT: Gary is white.\nFOL: all x. (Person(x) -> White(x))\nTEXT: Harry is green.\nFOL: all x. (Person(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Person(x) -> Quiet(x))\nTEXT: Harry is red.\nFOL: all x. (Person(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Person(x) -> White(x))\nTEXT: Red people are white.\nFOL: all x. (Red(x) & White(x) -> x)\nTEXT: Gary is green.\nFOL: all x. (Person(x) -> Green(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 11,
  "responses": [
   "<EVALUATE>\nTEXT: Bob who frequently wears red clothes always feels very cold because of his young age on the team and his rough skin.\nFOL: all x y. (Red(x) & Young(x) & AgeOnTeam(x) & Young(x) & Rough(x) -> Cold(x))\nTEXT: Young Charlie has a round form, believes in green and is rough.\nFOL: all x y. (Young(x) & Round(x) & BelievesInGreen(x) & Rough(x) -> Green(x))\nTEXT: That guy Dave sure is nice.\nFOL: all x y. (Guy(x) -> Nice(x))\nTEXT: People who have green body paint and act kind to others are quite young.\nFOL: all x y. (Green(x) & BodyPaint(x) & ActKindToOthers(x) & Young(x))\nTEXT: Any person that's blue, young and green will turn out to be a nice person, too.\nFOL: all x y. (Blue(x) & Young(x) & Green(x) & Nice(x) -> Nice(x))\nTEXT: Rough, cold people are blue.\nFOL: all x y. (Rough(x) & Cold(x) & Blue(x))\nTEXT: Big people with rough, green skin are cold because of it.\nFOL: all x y. (Big(x) & Rough(x) & Green(x) & Cold(x))\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: all x y. (Nice(x) & Red(x) & Rough(x) & Green(x) & Envy(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: all x y. (Young(x) & Big(x) & Rough(x) & Big(x) & Round(x))\nTEXT: Every single blue and red person who acts sort of rough tends to be green in places.\nFOL: all x y. (Blue(x) & Red(x) & Rough(x) -> Green(x))\nTEXT: Eric is cold.\nFOL: -Cold(eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob who frequently wears red clothes always feels very cold because of his young age on the team and his rough skin.\nFOL: all x y. (Red(x) & Young(x) & AgeOnTeam(x) & Young(x) & Rough(x) -> Cold(x))\nTEXT: Young Charlie has a round form, believes in green and is rough.\nFOL: all x y. (Young(x) & Round(x) & BelievesInGreen(x) & Rough(x) -> Green(x))\nTEXT: That guy Dave sure is nice.\nFOL: all x y. (Guy(x) -> Nice(x))\nTEXT: People who have green body paint and act kind to others are quite young.\nFOL: all x y. (Green(x) & BodyPaint(x) & ActKindToOthers(x) & Young(x))\nTEXT: Any person that's blue, young and green will turn out to be a nice person, too.\nFOL: all x y. (Blue(x) & Young(x) & Green(x) & Nice(x) -> Nice(x))\nTEXT: Rough, cold people are blue.\nFOL: all x y. (Rough(x) & Cold(x) & Blue(x))\nTEXT: Big people with rough, green skin are cold because of it.\nFOL: all x y. (Big(x) & Rough(x) & Green(x) & Cold(x))\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: all x y. (Nice(x) & Red(x) & Rough(x) & Green(x) & Envy(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: all x y. (Young(x) & Big(x) & Rough(x) & Big(x) & Round(x))\nTEXT: Every single blue and red person who acts sort of rough tends to be green in places.\nFOL: all x y. (Blue(x) & Red(x) & Rough(x) -> GreenInPlaces(x))\nTEXT: Eric is cold.\nFOL: -Cold(eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob who frequently wears red clothes always feels very cold because of his young age on the team and his rough skin.\nFOL: all x y. (Red(x) & Young(x) & AgeOnTeam(x) & Young(x) & Rough(x) -> Cold(x))\nTEXT: Young Charlie has a round form, believes in green and is rough.\nFOL: all x y. (Young(x) & Round(x) & BelievesInGreen(x) & Rough(x) -> Green(x))\nTEXT: That guy Dave sure is nice.\nFOL: all x y. (Guy(x) -> Nice(x))\nTEXT: People who have green body paint and act kind to others are quite young.\nFOL: all x y. (Green(x) & BodyPaint(x) & ActKindToOthers(x) & Young(x))\nTEXT: Any person that's blue, young and green will turn out to be a nice person, too.\nFOL: all x y. (Blue(x) & Young(x) & Green(x) & Nice(x) -> Nice(x))\nTEXT: Rough, cold people are blue.\nFOL: all x y. (Rough(x) & Cold(x) & Blue(x))\nTEXT: Big people with rough, green skin are cold because of it.\nFOL: all x y. (Big(x) & Rough(x) & Green(x) & Cold(x))\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: all x y. (Nice(x) & Red(x) & Rough(x) & Green(x) & Envy(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: all x y. (Young(x) & Big(x) & Rough(x) & Big(x) & Round(x))\nTEXT: Every single blue and red person who acts sort of rough tends to be green in places.\nFOL: all x y. (Blue(x) & Red(x) & Rough(x) -> Green(x))\nTEXT: Eric is cold.\nFOL: -Cold(eric)",
   "<EVALUATE>\nTEXT: Bob who frequently wears red clothes always feels very cold because of his young age on the team and his rough skin.\nFOL: all x y. (Red(x) & Young(x) & AgeOnTeam(x) & Young(x) & Rough(x) -> Cold(x))\nTEXT: Young Charlie has a round form, believes in green and is rough.\nFOL: all x y. (Young(x) & Round(x) & BelievesInGreen(x) & Rough(x) -> Green(x))\nTEXT: That guy Dave sure is nice.\nFOL: all x y. (Guy(x) -> Nice(x))\nTEXT: People who have green body paint and act kind to others are quite young.\nFOL: all x y. (Green(x) & BodyPaint(x) & ActKindToOthers(x) & Young(x))\nTEXT: Any person that's blue, young and green will turn out to be a nice person, too.\nFOL: all x y. (Blue(x) & Young(x) & Green(x) & Nice(x) -> Nice(x))\nTEXT: Rough, cold people are blue.\nFOL: all x y. (Rough(x) & Cold(x) & Blue(x))\nTEXT: Big people with rough, green skin are cold because of it.\nFOL: all x y. (Big(x) & Rough(x) & Green(x) & Cold(x))\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: all x y. (Nice(x) & Red(x) & Rough(x) & Green(x) & Envy(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: all x y. (Young(x) & Big(x) & Rough(x) & Big(x) & Round(x))\nTEXT: Every single blue and red person who acts sort of rough tends to be green in places.\nFOL: all x y. (Blue(x) & Red(x) & Rough(x) -> GreenInPlaces(x))\nTEXT: Eric is cold.\nFOL: -Cold(eric)",
   "<EVALUATE>\nTEXT: Bob who frequently wears red clothes always feels very cold because of his young age on the team and his rough skin.\nFOL: all x y. (Red(x) & Young(x) & AgeOnTeam(x) & Young(x) & Rough(x) -> Cold(x))\nTEXT: Young Charlie has a round form, believes in green and is rough.\nFOL: all x y. (Young(x) & Round(x) & BelievesInGreen(x) & Rough(x) -> Green(x))\nTEXT: That guy Dave sure is nice.\nFOL: all x y. (Guy(x) -> Nice(x))\nTEXT: People who have green body paint and act kind to others are quite young.\nFOL: all x y. (Green(x) & BodyPaint(x) & ActKindToOthers(x) & Young(x))\nTEXT: Any person that's blue, young and green will turn out to be a nice person, too.\nFOL: all x y. (Blue(x) & Young(x) & Green(x) & Nice(x) -> Nice(x))\nTEXT: Rough, cold people are blue.\nFOL: all x y. (Rough(x) & Cold(x) & Blue(x))\nTEXT: Big people with rough, green skin are cold because of it.\nFOL: all x y. (Big(x) & Rough(x) & Green(x) & Cold(x))\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: all x y. (Nice(x) & Red(x) & Rough(x) & Green(x) & Envy(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: all x y. (Young(x) & Big(x) & Rough(x) & Big(x) & Round(x))\nTEXT: Every single blue and red person who acts sort of rough tends to be green in places.\nFOL: all x y. (Blue(x) & Red(x) & Rough(x) & Green(x) & Places(x))\nTEXT: Eric is cold.\nFOL: -Cold(eric)\n</EVALUATE>"
  ]
 },
 {
  "index": 12,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle eats the bear.\nFOL: all x y. (BaldEagle(x) & Bear(y) & MoreEats(x, y) -> Eats(x, y))\nTEXT: The bald eagle eats the mouse.\nFOL: all x y. (BaldEagle(x) & Mouse(y) & MoreEats(x, y) -> Eats(x, y))\nTEXT: The bald eagle is not big.\nFOL: all x y. (BaldEagle(x) & Big(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bald eagle is nice.\nFOL: all x y. (BaldEagle(x) & Nice(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bald eagle is rough.\nFOL: all x y. (BaldEagle(x) & Rough(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bald eagle needs the dog.\nFOL: all x y. (BaldEagle(x) & Dog(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bald eagle sees the bear.\nFOL: all x y. (BaldEagle(x) & Bear(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bear does not eat the bald eagle.\nFOL: all x y. (Bear(x) & BaldEagle(y) & -MoreEats(x, y) & -NotEat(x, y))\nTEXT: The bear eats the mouse.\nFOL: all x y. (Bear(x) & Mouse(y) & -MoreEats(x, y) & -NotEat(x, y))\nTEXT: The bear is big.\nFOL: all x y. (Bear(x) & Big(y) & -MoreEats(x, y) & -NotEat(x, y))\nTEXT: The bear sees the bald eagle.\nFOL: all x y. (Bear(x) & BaldEagle(y) & -MoreEats(x, y) & -NotEat(x, y))\nTEXT: The bear sees the mouse.\nFOL: all x y. (Bear(x) & Mouse(y) & -MoreEats(x, y) & -NotEat(x, y))\nTEXT: The dog does not eat the mouse.\nFOL: all x y. (Dog(x) & Mouse(y) & -MoreEats(x, y) & -NotEat(x, y))\nTEXT: The dog needs the mouse.\nFOL: all x y. (Dog(x) & Mouse(y) & -MoreEats(x, y) & -NotEat(x, y))\nTEXT: The mouse is nice.\nFOL: all x y. (Mouse(x) & Nice(y) & -MoreEats(x, y) & -NotEat(x, y))\nTEXT: If someone sees the dog then the dog is nice.\nFOL: all x y. (See(x) & Dog(y) & -MoreEats(x, y) & -NotEat(x, y) & Nice(x, y))\nTEXT: If someone needs the bald eagle then the bald eagle is rough.\nFOL: all x y. (Need(x) & BaldEagle(y) & -MoreEats(x, y) & -NotEat(x, y) & Rough(x, y))\nTEXT: If someone is cold then they see the dog.\nFOL: all x y. (Cold(x) & See(x) & -MoreEats(x, y) & -NotEat(x, y) & Dog(y))\nTEXT: If someone eats the bald eagle and they need the mouse then they see the mouse.\nFOL: all x y. (Eat(x) & BaldEagle(y) & Need(x) & -MoreEats(x, y) & -NotEat(x, y) & See(x, y))\nTEXT: If someone eats the bear then the bear needs the mouse.\nFOL: all x y. (Eat(x) & Bear(y) & Need(x) & -MoreEats(x, y) & -NotEat(x, y) & See(x, y))\nTEXT: If someone is blue and they need the dog then the dog does not need the bear.\nFOL: all x y. (Blue(x) & Need(x) & Dog(y) & -MoreEats(x, y) & -NotEat(x, y) & Bear(y))\nTEXT: If someone eats the bear then the bear is cold.\nFOL: all x y. (Eat(x) & Bear(y) & -MoreEats(x, y) & -NotEat(x, y) & Cold(x, y))\nTEXT: If the dog",
   "<EVALUATE>\nTEXT: The bald eagle eats the bear.\nFOL: all x y. (BaldEagle(x) & Bear(y) & MoreEats(x, y) -> Eats(x, y))\nTEXT: The bald eagle eats the mouse.\nFOL: all x y. (BaldEagle(x) & Mouse(y) & MoreEats(x, y) -> Eats(x, y))\nTEXT: The bald eagle is not big.\nFOL: all x y. (BaldEagle(x) & Big(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bald eagle is nice.\nFOL: all x y. (BaldEagle(x) & Nice(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bald eagle is rough.\nFOL: all x y. (BaldEagle(x) & Rough(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bald eagle needs the dog.\nFOL: all x y. (BaldEagle(x) & Dog(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bald eagle sees the bear.\nFOL: all x y. (BaldEagle(x) & Bear(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bear does not eat the bald eagle.\nFOL: all x y. (Bear(x) & BaldEagle(x) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bear eats the mouse.\nFOL: all x y. (Bear(x) & Mouse(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bear is big.\nFOL: all x y. (Bear(x) & Big(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bear sees the bald eagle.\nFOL: all x y. (Bear(x) & BaldEagle(x) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bear sees the mouse.\nFOL: all x y. (Bear(x) & Mouse(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The dog does not eat the mouse.\nFOL: all x y. (Dog(x) & Mouse(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The dog needs the mouse.\nFOL: all x y. (Dog(x) & Mouse(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The mouse is nice.\nFOL: all x y. (Mouse(x) & Nice(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: If someone sees the dog then the dog is nice.\nFOL: all x y. (See(x) & Dog(y) & -MoreEats(x, y) & -NotBig(x, y) & Nice(x, y))\nTEXT: If someone needs the bald eagle then the bald eagle is rough.\nFOL: all x y. (Need(x) & BaldEagle(x) & -MoreEats(x, y) & -NotBig(x, y) & Rough(x, y))\nTEXT: If someone is cold then they see the dog.\nFOL: all x y. (Cold(x) & See(x) & -MoreEats(x, y) & -NotBig(x, y) & Dog(x, y))\nTEXT: If someone eats the bald eagle and they need the mouse then they see the mouse.\nFOL: all x y. (Eat(x) & BaldEagle(x) & Need(x) & -MoreEats(x, y) & -NotBig(x, y) & See(x, y))\nTEXT: If someone eats the bear then the bear needs the mouse.\nFOL: all x y. (Eat(x) & Bear(y) & Need(x) & -MoreEats(x, y) & -NotBig(x, y) & See(x, y))\nTEXT: If someone is blue and they need the dog then the dog does not need the bear.\nFOL: all x y. (Blue(x) & Need(x) & Dog(y) & -MoreEats(x, y) & -NotBig(x, y) & Bear(y, x))\nTEXT: If someone eats the bear then the bear is cold.\nFOL: all x y. (Eat(x) & Bear(y) & -MoreEats(x, y) & -NotBig(x, y) & Cold(x, y))\nTEXT",
   "<EVALUATE>\nTEXT: The bald eagle eats the bear.\nFOL: all x y. (BaldEagle(x) & Bear(y) & MoreEats(x, y) -> Eats(x, y))\nTEXT: The bald eagle eats the mouse.\nFOL: all x y. (BaldEagle(x) & Mouse(y) & MoreEats(x, y) -> Eats(x, y))\nTEXT: The bald eagle is not big.\nFOL: all x y. (BaldEagle(x) & Big(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bald eagle is nice.\nFOL: all x y. (BaldEagle(x) & Nice(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bald eagle is rough.\nFOL: all x y. (BaldEagle(x) & Rough(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bald eagle needs the dog.\nFOL: all x y. (BaldEagle(x) & Dog(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bald eagle sees the bear.\nFOL: all x y. (BaldEagle(x) & Bear(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bear does not eat the bald eagle.\nFOL: all x y. (Bear(x) & BaldEagle(y) & -MoreEats(x, y) & -NotEat(x, y))\nTEXT: The bear eats the mouse.\nFOL: all x y. (Bear(x) & Mouse(y) & -MoreEats(x, y) & -NotEat(x, y))\nTEXT: The bear is big.\nFOL: all x y. (Bear(x) & Big(y) & -MoreEats(x, y) & -NotEat(x, y))\nTEXT: The bear sees the bald eagle.\nFOL: all x y. (Bear(x) & BaldEagle(y) & -MoreEats(x, y) & -NotEat(x, y))\nTEXT: The bear sees the mouse.\nFOL: all x y. (Bear(x) & Mouse(y) & -MoreEats(x, y) & -NotEat(x, y))\nTEXT: The dog does not eat the mouse.\nFOL: all x y. (Dog(x) & Mouse(y) & -MoreEats(x, y) & -NotEat(x, y))\nTEXT: The dog needs the mouse.\nFOL: all x y. (Dog(x) & Mouse(y) & -MoreEats(x, y) & -NotEat(x, y))\nTEXT: The mouse is nice.\nFOL: all x y. (Mouse(x) & Nice(y) & -MoreEats(x, y) & -NotEat(x, y))\nTEXT: If someone sees the dog then the dog is nice.\nFOL: all x y. (See(x) & Dog(y) & -MoreEats(x, y) & -NotEat(x, y) & Nice(x, y))\nTEXT: If someone needs the bald eagle then the bald eagle is rough.\nFOL: all x y. (Need(x) & BaldEagle(y) & -MoreEats(x, y) & -NotEat(x, y) & Rough(x, y))\nTEXT: If someone is cold then they see the dog.\nFOL: all x y. (Cold(x) & See(x) & -MoreEats(x, y) & -NotEat(x, y) & Dog(y))\nTEXT: If someone eats the bald eagle and they need the mouse then they see the mouse.\nFOL: all x y. (Eat(x) & BaldEagle(y) & -MoreEats(x, y) & -NotEat(x, y) & Need(x, y) & See(x, y))\nTEXT: If someone eats the bear then the bear needs the mouse.\nFOL: all x y. (Eat(x) & Bear(y) & -MoreEats(x, y) & -NotEat(x, y) & Need(x, y) & See(x, y))\nTEXT: If someone is blue and they need the dog then the dog does not need the bear.\nFOL: all x y. (Blue(x) & Need(x) & -MoreEats(x, y) & -NotEat(x, y) & Dog(y))\nTEXT: If someone eats the bear then the bear is cold.\nFOL: all x y. (Eat(x) & Bear(y) & -MoreEats(x, y) & -NotEat(x, y) & Cold(x, y))\nTEXT: If the dog",
   "<EVALUATE>\nTEXT: The bald eagle eats the bear.\nFOL: all x y. (BaldEagle(x) & Bear(y) & MoreEats(x, y) -> Eats(x, y))\nTEXT: The bald eagle eats the mouse.\nFOL: all x y. (BaldEagle(x) & Mouse(y) & MoreEats(x, y) -> Eats(x, y))\nTEXT: The bald eagle is not big.\nFOL: all x y. (BaldEagle(x) & Big(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bald eagle is nice.\nFOL: all x y. (BaldEagle(x) & Nice(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bald eagle is rough.\nFOL: all x y. (BaldEagle(x) & Rough(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bald eagle needs the dog.\nFOL: all x y. (BaldEagle(x) & Dog(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bald eagle sees the bear.\nFOL: all x y. (BaldEagle(x) & Bear(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bear does not eat the bald eagle.\nFOL: all x y. (Bear(x) & BaldEagle(x) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bear eats the mouse.\nFOL: all x y. (Bear(x) & Mouse(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bear is big.\nFOL: all x y. (Bear(x) & Big(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bear sees the bald eagle.\nFOL: all x y. (Bear(x) & BaldEagle(x) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bear sees the mouse.\nFOL: all x y. (Bear(x) & Mouse(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The dog does not eat the mouse.\nFOL: all x y. (Dog(x) & Mouse(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The dog needs the mouse.\nFOL: all x y. (Dog(x) & Mouse(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The mouse is nice.\nFOL: all x y. (Mouse(x) & Nice(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: If someone sees the dog then the dog is nice.\nFOL: all x y. (See(x) & Dog(y) & -MoreEats(x, y) & -NotBig(x, y) & Nice(x, y))\nTEXT: If someone needs the bald eagle then the bald eagle is rough.\nFOL: all x y. (Need(x) & BaldEagle(x) & -MoreEats(x, y) & -NotBig(x, y) & Rough(x, y))\nTEXT: If someone is cold then they see the dog.\nFOL: all x y. (Cold(x) & See(x) & -MoreEats(x, y) & -NotBig(x, y) & Dog(x, y))\nTEXT: If someone eats the bald eagle and they need the mouse then they see the mouse.\nFOL: all x y. (Eat(x) & BaldEagle(x) & Need(x) & -MoreEats(x, y) & -NotBig(x, y) & See(x, y))\nTEXT: If someone eats the bear then the bear needs the mouse.\nFOL: all x y. (Eat(x) & Bear(y) & Need(x) & -MoreEats(x, y) & -NotBig(x, y) & See(x, y))\nTEXT: If someone is blue and they need the dog then the dog does not need the bear.\nFOL: all x y. (Blue(x) & Need(x) & Dog(y) & -MoreEats(x, y) & -NotBig(x, y) & See(x, y))\nTEXT: If someone eats the bear then the bear is cold.\nFOL: all x y. (Eat(x) & Bear(y) & -MoreEats(x, y) & -NotBig(x, y) & Cold(x, y))\nTEXT",
   "<EVALUATE>\nTEXT: The bald eagle eats the bear.\nFOL: all x y. (BaldEagle(x) & Bear(y) & MoreEats(x, y) -> Eats(x, y))\nTEXT: The bald eagle eats the mouse.\nFOL: all x y. (BaldEagle(x) & Mouse(y) & MoreEats(x, y) -> Eats(x, y))\nTEXT: The bald eagle is not big.\nFOL: all x y. (BaldEagle(x) & Big(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bald eagle is nice.\nFOL: all x y. (BaldEagle(x) & Nice(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bald eagle is rough.\nFOL: all x y. (BaldEagle(x) & Rough(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bald eagle needs the dog.\nFOL: all x y. (BaldEagle(x) & Dog(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bald eagle sees the bear.\nFOL: all x y. (BaldEagle(x) & Bear(y) & -MoreEats(x, y) & -NotBig(x, y))\nTEXT: The bear does not eat the bald eagle.\nFOL: all x y. (Bear(x) & BaldEagle(y) & -MoreEats(x, y) & -NotEat(x, y))\nTEXT: The bear eats the mouse.\nFOL: all x y. (Bear(x) & Mouse(y) & -MoreEats(x, y) & -NotEat(x, y))\nTEXT: The bear is big.\nFOL: all x y. (Bear(x) & Big(y) & -MoreEats(x, y) & -NotEat(x, y))\nTEXT: The bear sees the bald eagle.\nFOL: all x y. (Bear(x) & BaldEagle(y) & -MoreEats(x, y) & -NotEat(x, y))\nTEXT: The bear sees the mouse.\nFOL: all x y. (Bear(x) & Mouse(y) & -MoreEats(x, y) & -NotEat(x, y))\nTEXT: The dog does not eat the mouse.\nFOL: all x y. (Dog(x) & Mouse(y) & -MoreEats(x, y) & -NotEat(x, y))\nTEXT: The dog needs the mouse.\nFOL: all x y. (Dog(x) & Mouse(y) & -MoreEats(x, y) & -NotEat(x, y))\nTEXT: The mouse is nice.\nFOL: all x y. (Mouse(x) & Nice(y) & -MoreEats(x, y) & -NotEat(x, y))\nTEXT: If someone sees the dog then the dog is nice.\nFOL: all x y. (See(x) & Dog(y) & -MoreEats(x, y) & -NotEat(x, y) & Nice(x, y))\nTEXT: If someone needs the bald eagle then the bald eagle is rough.\nFOL: all x y. (Need(x) & BaldEagle(y) & -MoreEats(x, y) & -NotEat(x, y) & Rough(x, y))\nTEXT: If someone is cold then they see the dog.\nFOL: all x y. (Cold(x) & See(x) & -MoreEats(x, y) & -NotEat(x, y) & Dog(y))\nTEXT: If someone eats the bald eagle and they need the mouse then they see the mouse.\nFOL: all x y. (Eat(x) & BaldEagle(y) & -MoreEats(x, y) & -NotEat(x, y) & Need(x, y) & See(x, y))\nTEXT: If someone eats the bear then the bear needs the mouse.\nFOL: all x y. (Eat(x) & Bear(y) & -MoreEats(x, y) & -NotEat(x, y) & Need(x, y) & See(x, y))\nTEXT: If someone is blue and they need the dog then the dog does not need the bear.\nFOL: all x y. (Blue(x) & Need(x) & -MoreEats(x, y) & -NotEat(x, y) & Dog(y) & Bear(y))\nTEXT: If someone eats the bear then the bear is cold.\nFOL: all x y. (Eat(x) & Bear(y) & -MoreEats(x, y) & -NotEat(x, y) & Cold(x, y))\nTEXT"
  ]
 },
 {
  "index": 13,
  "responses": [
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: all x y. (Cow(x) & Dog(y) & -Chase(x, y) & -Chase(y, x))\nTEXT: The cow does not chase the squirrel.\nFOL: all x y. (Cow(x) & Dog(y) & -Chase(x, y) & -Chase(y, x))\nTEXT: The cow is kind.\nFOL: all x. (Cow(x) -> Kind(x))\nTEXT: The cow is young.\nFOL: all x. (Cow(x) -> Young(x))\nTEXT: The dog chases the cow.\nFOL: all x y. (Dog(x) & Cow(y) & -Chase(x, y) & -Chase(y, x))\nTEXT: The dog is round.\nFOL: all x. (Dog(x) -> Round(x))\nTEXT: The dog likes the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & -Like(x, y) & -Like(y, x))\nTEXT: The squirrel eats the dog.\nFOL: all x y. (Squirrel(x) & Dog(y) & -Eat(x, y) & -Eat(y, x))\nTEXT: The squirrel is green.\nFOL: all x. (Squirrel(x) -> Green(x))\nTEXT: The squirrel does not like the tiger.\nFOL: all x y. (Squirrel(x) & Tiger(y) & -Like(x, y) & -Like(y, x))\nTEXT: The tiger eats the dog.\nFOL: all x y. (Tiger(x) & Dog(y) & -Eat(x, y) & -Eat(y, x))\nTEXT: The tiger is red.\nFOL: all x. (Tiger(x) -> Red(x))\nTEXT: If the tiger chases the squirrel then the tiger likes the dog.\nFOL: all x y z. (Tiger(x) & Squirrel(y) & Dog(z) & -Like(x, y) & -Like(y, z) & -Chase(x, y) & -Chase(y, z))\nTEXT: If something is kind and it does not eat the dog then the dog is young.\nFOL: all x y z. (Something(x) & Kind(x) & -Eat(x, y) & -Eat(y, x) & Young(x))\nTEXT: If something chases the squirrel then it likes the tiger.\nFOL: all x y z. (Something(x) & Squirrel(y) & Tiger(z) & -Like(x, y) & -Like(y, z) & -Chase(x, y) & -Chase(y, z))\nTEXT: If something is young then it likes the tiger.\nFOL: all x y z. (Something(x) & Young(x) & Tiger(z) & -Like(x, y) & -Like(y, z) & -Chase(x, y) & -Chase(y, z))\nTEXT: If something is red and it eats the dog then the dog is red.\nFOL: all x y z. (Something(x) & Red(x) & Dog(y) & -Eat(x, y) & -Eat(y, x) & Red(x))\nTEXT: If something likes the tiger and the tiger eats the dog then it is green.\nFOL: all x y z. (Something(x) & Tiger(y) & Tiger(z) & -Like(x, y) & -Like(y, z) & -Eat(x, y) & -Eat(y, z) & Green(x))\nTEXT: If something likes the tiger then it chases the tiger.\nFOL: all x y z. (Something(x) & Tiger(y) & Tiger(z) & -Like(x, y) & -Like(y, z) & -Chase(x, y) & -Chase(y, z))\nTEXT: If something is green then it eats the cow.\nFOL: all x y z. (Something(x) & Green(x) & Cow(y) & -Eat(x, y) & -Eat(y, x))\nTEXT: The tiger is green.\nFOL: Tiger(x) & Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: all x y. (Cow(x) & Dog(y) & -Chase(x, y) & -Chase(y, x))\nTEXT: The cow does not chase the squirrel.\nFOL: all x y. (Cow(x) & Dog(y) & -Chase(x, y) & -Chase(y, x))\nTEXT: The cow is kind.\nFOL: all x. (Cow(x) -> Kind(x))\nTEXT: The cow is young.\nFOL: all x. (Cow(x) -> Young(x))\nTEXT: The dog chases the cow.\nFOL: all x y. (Dog(x) & Cow(y) & -Chase(x, y) & -Chase(y, x))\nTEXT: The dog is round.\nFOL: all x. (Dog(x) -> Round(x))\nTEXT: The dog likes the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & -Like(x, y) & -Like(y, x))\nTEXT: The squirrel eats the dog.\nFOL: all x y. (Squirrel(x) & Dog(y) & -Eat(x, y) & -Eat(y, x))\nTEXT: The squirrel is green.\nFOL: all x. (Squirrel(x) -> Green(x))\nTEXT: The squirrel does not like the tiger.\nFOL: all x y. (Squirrel(x) & Tiger(y) & -Like(x, y) & -Like(y, x))\nTEXT: The tiger eats the dog.\nFOL: all x y. (Tiger(x) & Dog(y) & -Eat(x, y) & -Eat(y, x))\nTEXT: The tiger is red.\nFOL: all x. (Tiger(x) -> Red(x))\nTEXT: If the tiger chases the squirrel then the tiger likes the dog.\nFOL: all x y z. (Tiger(x) & Squirrel(y) & Dog(z) & -Like(x, y) & -Like(y, z) & -Chase(x, y) & -Chase(y, z))\nTEXT: If something is kind and it does not eat the dog then the dog is young.\nFOL: all x y z. (Something(x) & Kind(x) & -Eat(x, y) & -Eat(y, x) & Young(x))\nTEXT: If something chases the squirrel then it likes the tiger.\nFOL: all x y z. (Something(x) & Squirrel(y) & Tiger(z) & -Like(x, y) & -Like(y, z) & -Chase(x, y) & -Chase(y, z))\nTEXT: If something is young then it likes the tiger.\nFOL: all x y z. (Something(x) & Young(x) & Tiger(z) & -Like(x, y) & -Like(y, z) & -Chase(x, y) & -Chase(y, z))\nTEXT: If something is red and it eats the dog then the dog is red.\nFOL: all x y z. (Something(x) & Red(x) & Dog(y) & -Eat(x, y) & -Eat(y, x) & Red(x))\nTEXT: If something likes the tiger and the tiger eats the dog then it is green.\nFOL: all x y z. (Something(x) & Tiger(y) & Tiger(z) & -Like(x, y) & -Like(y, z) & -Eat(x, y) & -Eat(y, z) & Green(x))\nTEXT: If something likes the tiger then it chases the tiger.\nFOL: all x y z. (Something(x) & Tiger(y) & Tiger(z) & -Like(x, y) & -Like(y, z) & -Chase(x, y) & -Chase(y, z))\nTEXT: If something is green then it eats the cow.\nFOL: all x y z. (Something(x) & Green(x) & Cow(y) & -Eat(x, y) & -Eat(y, x))\nTEXT: The tiger is green.\nFOL: Tiger(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: all x y. (Cow(x) & Dog(y) & -Chase(x, y) & -Chase(y, x))\nTEXT: The cow does not chase the squirrel.\nFOL: all x y. (Cow(x) & Dog(y) & -Chase(x, y) & -Chase(y, x))\nTEXT: The cow is kind.\nFOL: all x. (Cow(x) -> Kind(x))\nTEXT: The cow is young.\nFOL: all x. (Cow(x) -> Young(x))\nTEXT: The dog chases the cow.\nFOL: all x y. (Dog(x) & Cow(y) & -Chase(x, y) & -Chase(y, x))\nTEXT: The dog is round.\nFOL: all x. (Dog(x) -> Round(x))\nTEXT: The dog likes the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & -Like(x, y) & -Like(y, x))\nTEXT: The squirrel eats the dog.\nFOL: all x y. (Squirrel(x) & Dog(y) & -Eat(x, y) & -Eat(y, x))\nTEXT: The squirrel is green.\nFOL: all x. (Squirrel(x) -> Green(x))\nTEXT: The squirrel does not like the tiger.\nFOL: all x y. (Squirrel(x) & Tiger(y) & -Like(x, y) & -Like(y, x))\nTEXT: The tiger eats the dog.\nFOL: all x y. (Tiger(x) & Dog(y) & -Eat(x, y) & -Eat(y, x))\nTEXT: The tiger is red.\nFOL: all x. (Tiger(x) -> Red(x))\nTEXT: If the tiger chases the squirrel then the tiger likes the dog.\nFOL: all x y z. (Tiger(x) & Squirrel(y) & Dog(z) & -Like(x, y) & -Like(y, z) & -Chase(x, y) & -Chase(y, z))\nTEXT: If something is kind and it does not eat the dog then the dog is young.\nFOL: all x y z. (Something(x) & Kind(x) & -Eat(x, y) & -Eat(y, x) & Young(x))\nTEXT: If something chases the squirrel then it likes the tiger.\nFOL: all x y z. (Something(x) & Squirrel(y) & Tiger(z) & -Like(x, y) & -Like(y, z) & -Chase(x, y))\nTEXT: If something is young then it likes the tiger.\nFOL: all x y z. (Something(x) & Young(x) & Tiger(z) & -Like(x, y) & -Like(y, z) & -Chase(x, y))\nTEXT: If something is red and it eats the dog then the dog is red.\nFOL: all x y z. (Something(x) & Red(x) & Dog(y) & -Eat(x, y) & -Eat(y, x) & Red(x))\nTEXT: If something likes the tiger and the tiger eats the dog then it is green.\nFOL: all x y z. (Something(x) & Tiger(y) & Tiger(z) & -Like(x, y) & -Like(y, z) & -Eat(x, y) & -Eat(y, z) & Green(x))\nTEXT: If something likes the tiger then it chases the tiger.\nFOL: all x y z. (Something(x) & Tiger(y) & Tiger(z) & -Like(x, y) & -Like(y, z) & -Chase(x, y))\nTEXT: If something is green then it eats the cow.\nFOL: all x y z. (Something(x) & Green(x) & Cow(y) & -Eat(x, y) & -Eat(y, x))\nTEXT: The tiger is green.\nFOL: Tiger(x) & Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: all x y. (Cow(x) & Dog(y) & -Chase(x, y) & -Chase(y, x))\nTEXT: The cow does not chase the squirrel.\nFOL: all x y. (Cow(x) & Dog(y) & -Chase(x, y) & -Chase(y, x))\nTEXT: The cow is kind.\nFOL: all x. (Cow(x) -> Kind(x))\nTEXT: The cow is young.\nFOL: all x. (Cow(x) -> Young(x))\nTEXT: The dog chases the cow.\nFOL: all x y. (Dog(x) & Cow(y) & -Chase(x, y) & -Chase(y, x))\nTEXT: The dog is round.\nFOL: all x. (Dog(x) -> Round(x))\nTEXT: The dog likes the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & -Like(x, y) & -Like(y, x))\nTEXT: The squirrel eats the dog.\nFOL: all x y. (Squirrel(x) & Dog(y) & -Eat(x, y) & -Eat(y, x))\nTEXT: The squirrel is green.\nFOL: all x. (Squirrel(x) -> Green(x))\nTEXT: The squirrel does not like the tiger.\nFOL: all x y. (Squirrel(x) & Tiger(y) & -Like(x, y) & -Like(y, x))\nTEXT: The tiger eats the dog.\nFOL: all x y. (Tiger(x) & Dog(y) & -Eat(x, y) & -Eat(y, x))\nTEXT: The tiger is red.\nFOL: all x. (Tiger(x) -> Red(x))\nTEXT: If the tiger chases the squirrel then the tiger likes the dog.\nFOL: all x y z. (Tiger(x) & Squirrel(y) & Dog(z) & -Like(x, y) & -Like(y, z) & -Chase(x, y) & -Chase(y, z))\nTEXT: If something is kind and it does not eat the dog then the dog is young.\nFOL: all x y z. (Something(x) & Kind(x) & -Eat(x, y) & -Eat(y, x) & Young(x))\nTEXT: If something chases the squirrel then it likes the tiger.\nFOL: all x y z. (Something(x) & Squirrel(y) & Tiger(z) & -Like(x, y) & -Like(y, z) & -Chase(x, y) & -Chase(y, z))\nTEXT: If something is young then it likes the tiger.\nFOL: all x y z. (Something(x) & Young(x) & Tiger(z) & -Like(x, y) & -Like(y, z) & -Chase(x, y) & -Chase(y, z))\nTEXT: If something is red and it eats the dog then the dog is red.\nFOL: all x y z. (Something(x) & Red(x) & Dog(y) & -Eat(x, y) & -Eat(y, x) & Red(x))\nTEXT: If something likes the tiger and the tiger eats the dog then it is green.\nFOL: all x y z. (Something(x) & Tiger(y) & Tiger(z) & -Like(x, y) & -Like(y, z) & -Eat(x, y) & -Eat(y, z) & Green(x))\nTEXT: If something likes the tiger then it chases the tiger.\nFOL: all x y z. (Something(x) & Tiger(y) & Tiger(z) & -Like(x, y) & -Like(y, z) & -Chase(x, y) & -Chase(y, z))\nTEXT: If something is green then it eats the cow.\nFOL: all x y z. (Something(x) & Green(x) & Cow(y) & -Eat(x, y) & -Eat(y, x) & Green(x))\nTEXT: The tiger is green.\nFOL: Tiger(x) & Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: all x y. (Cow(x) & Dog(y) & -Chase(x, y) & -Chase(y, x))\nTEXT: The cow does not chase the squirrel.\nFOL: all x y. (Cow(x) & Dog(y) & -Chase(x, y) & -Chase(y, x))\nTEXT: The cow is kind.\nFOL: all x. (Cow(x) -> Kind(x))\nTEXT: The cow is young.\nFOL: all x. (Cow(x) -> Young(x))\nTEXT: The dog chases the cow.\nFOL: all x y. (Dog(x) & Cow(y) & -Chase(x, y) & -Chase(y, x))\nTEXT: The dog is round.\nFOL: all x. (Dog(x) -> Round(x))\nTEXT: The dog likes the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & -Like(x, y) & -Like(y, x))\nTEXT: The squirrel eats the dog.\nFOL: all x y. (Squirrel(x) & Dog(y) & -Eat(x, y) & -Eat(y, x))\nTEXT: The squirrel is green.\nFOL: all x. (Squirrel(x) -> Green(x))\nTEXT: The squirrel does not like the tiger.\nFOL: all x y. (Squirrel(x) & Tiger(y) & -Like(x, y) & -Like(y, x))\nTEXT: The tiger eats the dog.\nFOL: all x y. (Tiger(x) & Dog(y) & -Eat(x, y) & -Eat(y, x))\nTEXT: The tiger is red.\nFOL: all x. (Tiger(x) -> Red(x))\nTEXT: If the tiger chases the squirrel then the tiger likes the dog.\nFOL: all x y z. (Tiger(x) & Squirrel(y) & Dog(z) & -Like(x, y) & -Like(y, z) & -Chase(x, y) & -Chase(y, z))\nTEXT: If something is kind and it does not eat the dog then the dog is young.\nFOL: all x y z. (Something(x) & Kind(x) & -Eat(x, y) & -Eat(y, x) & Young(x))\nTEXT: If something chases the squirrel then it likes the tiger.\nFOL: all x y z. (Something(x) & Squirrel(y) & Tiger(z) & -Like(x, y) & -Like(y, z) & -Chase(x, y) & -Chase(y, z))\nTEXT: If something is young then it likes the tiger.\nFOL: all x y z. (Something(x) & Young(x) & Tiger(z) & -Like(x, y) & -Like(y, z) & -Chase(x, y) & -Chase(y, z))\nTEXT: If something is red and it eats the dog then the dog is red.\nFOL: all x y z. (Something(x) & Red(x) & Dog(y) & -Eat(x, y) & -Eat(y, x) & Red(x))\nTEXT: If something likes the tiger and the tiger eats the dog then it is green.\nFOL: all x y z. (Something(x) & Tiger(y) & Tiger(z) & -Like(x, y) & -Like(y, z) & -Eat(x, y) & -Eat(y, z) & Green(x))\nTEXT: If something likes the tiger then it chases the tiger.\nFOL: all x y z. (Something(x) & Tiger(y) & Tiger(z) & -Like(x, y) & -Like(y, z) & -Chase(x, y) & -Chase(y, z))\nTEXT: If something is green then it eats the cow.\nFOL: all x y z. (Something(x) & Green(x) & Cow(y) & -Eat(x, y) & -Eat(y, x))\nTEXT: The tiger is green.\nFOL: Tiger(inception)\n</EVALUATE>"
  ]
 },
 {
  "index": 14,
  "responses": [
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: all x y. (Cow(x) & Dog(y) & -Chase(x, y) -> x == y)\nTEXT: The cow does not see the tiger.\nFOL: all x y. (Cow(x) & Tiger(y) & -See(x, y) -> x == y)\nTEXT: The cow visits the dog.\nFOL: all x y. (Cow(x) & Dog(y) & -Visit(x, y) -> x == y)\nTEXT: The cow visits the tiger.\nFOL: all x y. (Cow(x) & Tiger(y) & -Visit(x, y) -> x == y)\nTEXT: The dog does not see the lion.\nFOL: all x y. (Dog(x) & Lion(y) & -See(x, y) -> x == y)\nTEXT: The lion chases the cow.\nFOL: all x y. (Lion(x) & Cow(y) & -Chase(x, y) -> x == y)\nTEXT: The lion chases the dog.\nFOL: all x y. (Lion(x) & Dog(y) & -Chase(x, y) -> x == y)\nTEXT: The lion does not chase the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -Chase(x, y) -> x == y)\nTEXT: The lion is young.\nFOL: all x y. (Lion(x) & Young(y) -> x == y)\nTEXT: The lion sees the cow.\nFOL: all x y. (Lion(x) & Cow(y) & -See(x, y) -> x == y)\nTEXT: The lion does not see the dog.\nFOL: all x y. (Lion(x) & Dog(y) & -See(x, y) -> x == y)\nTEXT: The lion sees the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -See(x, y) -> x == y)\nTEXT: The lion visits the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -Visit(x, y) -> x == y)\nTEXT: The tiger sees the dog.\nFOL: all x y. (Tiger(x) & Dog(y) & -See(x, y) -> x == y)\nTEXT: The tiger visits the lion.\nFOL: all x y. (Tiger(x) & Lion(y) & -Visit(x, y) -> x == y)\nTEXT: If something chases the tiger and the tiger chases the lion then it is not young.\nFOL: all x y z. (Something(x) & Tiger(y) & Lion(z) & -Young(z) -> x == y)\nTEXT: If something visits the lion then the lion is green.\nFOL: all x y z. (Something(x) & Lion(y) & -Visit(x, y) -> x == y)\nTEXT: If something sees the dog then it does not see the lion.\nFOL: all x y z. (Something(x) & Dog(y) & -See(x, y) -> x == y)\nTEXT: If something is cold then it chases the cow.\nFOL: all x y z. (Something(x) & Cold(z) & -Chase(x, z) -> x == y)\nTEXT: If something sees the tiger then the tiger is cold.\nFOL: all x y z. (Something(x) & Tiger(y) & -See(x, y) -> x == y)\nTEXT: If something visits the cow then the cow visits the tiger.\nFOL: all x y z. (Something(x) & Cow(y) & -Visit(x, y) -> x == y)\nTEXT: If something sees the tiger then it is nice.\nFOL: all x y z. (Something(x) & Tiger(y) & -See(x, y) -> x == y)\nTEXT: If something visits the lion and it chases the cow then it chases the dog.\nFOL: all x y z. (Something(x) & Lion(y) & -Visit(x, y) & -Chase(x, y) -> x == y)\nTEXT: The cow is not nice.\nFOL: -Nice(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: all x y. (Cow(x) & Dog(y) & -Chase(x, y) -> x == y)\nTEXT: The cow does not see the tiger.\nFOL: all x y. (Cow(x) & Tiger(y) & -See(x, y) -> x == y)\nTEXT: The cow visits the dog.\nFOL: all x y. (Cow(x) & Dog(y) & -Visit(x, y) -> x == y)\nTEXT: The cow visits the tiger.\nFOL: all x y. (Cow(x) & Tiger(y) & -Visit(x, y) -> x == y)\nTEXT: The dog does not see the lion.\nFOL: all x y. (Dog(x) & Lion(y) & -See(x, y) -> x == y)\nTEXT: The lion chases the cow.\nFOL: all x y. (Lion(x) & Cow(y) & -Chase(x, y) -> x == y)\nTEXT: The lion chases the dog.\nFOL: all x y. (Lion(x) & Dog(y) & -Chase(x, y) -> x == y)\nTEXT: The lion does not chase the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -Chase(x, y) -> x == y)\nTEXT: The lion is young.\nFOL: all x y. (Lion(x) & Young(y) -> x == y)\nTEXT: The lion sees the cow.\nFOL: all x y. (Lion(x) & Cow(y) & -See(x, y) -> x == y)\nTEXT: The lion does not see the dog.\nFOL: all x y. (Lion(x) & Dog(y) & -See(x, y) -> x == y)\nTEXT: The lion sees the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -See(x, y) -> x == y)\nTEXT: The lion visits the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -Visit(x, y) -> x == y)\nTEXT: The tiger sees the dog.\nFOL: all x y. (Tiger(x) & Dog(y) & -See(x, y) -> x == y)\nTEXT: The tiger visits the lion.\nFOL: all x y. (Tiger(x) & Lion(y) & -Visit(x, y) -> x == y)\nTEXT: If something chases the tiger and the tiger chases the lion then it is not young.\nFOL: all x y z. (Something(x) & Tiger(y) & Lion(z) & -Young(z) -> x == y)\nTEXT: If something visits the lion then the lion is green.\nFOL: all x y z. (Something(x) & Lion(y) & -Visit(x, y) -> x == y)\nTEXT: If something sees the dog then it does not see the lion.\nFOL: all x y z. (Something(x) & Dog(y) & -See(x, y) -> x == y)\nTEXT: If something is cold then it chases the cow.\nFOL: all x y z. (Something(x) & -Cold(x) & Cow(y) & -Chase(x, y) -> x == y)\nTEXT: If something sees the tiger then the tiger is cold.\nFOL: all x y z. (Something(x) & Tiger(y) & -See(x, y) -> x == y)\nTEXT: If something visits the cow then the cow visits the tiger.\nFOL: all x y z. (Something(x) & Cow(y) & -Visit(x, y) -> x == y)\nTEXT: If something sees the tiger then it is nice.\nFOL: all x y z. (Something(x) & Tiger(y) & -See(x, y) -> x == y)\nTEXT: If something visits the lion and it chases the cow then it chases the dog.\nFOL: all x y z. (Something(x) & Lion(y) & -Visit(x, y) & -Chase(x, y) -> x == y)\nTEXT: The cow is not nice.\nFOL: -Nice(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: all x y. (Cow(x) & Dog(y) & -Chase(x, y) -> x == y)\nTEXT: The cow does not see the tiger.\nFOL: all x y. (Cow(x) & Tiger(y) & -See(x, y) -> x == y)\nTEXT: The cow visits the dog.\nFOL: all x y. (Cow(x) & Dog(y) & -Visit(x, y) -> x == y)\nTEXT: The cow visits the tiger.\nFOL: all x y. (Cow(x) & Tiger(y) & -Visit(x, y) -> x == y)\nTEXT: The dog does not see the lion.\nFOL: all x y. (Dog(x) & Lion(y) & -See(x, y) -> x == y)\nTEXT: The lion chases the cow.\nFOL: all x y. (Lion(x) & Cow(y) & -Chase(x, y) -> x == y)\nTEXT: The lion chases the dog.\nFOL: all x y. (Lion(x) & Dog(y) & -Chase(x, y) -> x == y)\nTEXT: The lion does not chase the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -Chase(x, y) -> x == y)\nTEXT: The lion is young.\nFOL: all x y. (Lion(x) & Young(y) -> x == y)\nTEXT: The lion sees the cow.\nFOL: all x y. (Lion(x) & Cow(y) & -See(x, y) -> x == y)\nTEXT: The lion does not see the dog.\nFOL: all x y. (Lion(x) & Dog(y) & -See(x, y) -> x == y)\nTEXT: The lion sees the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -See(x, y) -> x == y)\nTEXT: The lion visits the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -Visit(x, y) -> x == y)\nTEXT: The tiger sees the dog.\nFOL: all x y. (Tiger(x) & Dog(y) & -See(x, y) -> x == y)\nTEXT: The tiger visits the lion.\nFOL: all x y. (Tiger(x) & Lion(y) & -Visit(x, y) -> x == y)\nTEXT: If something chases the tiger and the tiger chases the lion then it is not young.\nFOL: all x y z. (Something(x) & Tiger(y) & Lion(z) & -Young(z) -> x!= y)\nTEXT: If something visits the lion then the lion is green.\nFOL: all x y. (Something(x) & Lion(y) & -Visit(x, y) -> x == y)\nTEXT: If something sees the dog then it does not see the lion.\nFOL: all x y. (Something(x) & Dog(y) & -See(x, y) -> x!= y)\nTEXT: If something is cold then it chases the cow.\nFOL: all x y. (Something(x) & Cold(y) & -Chase(x, y) -> x == y)\nTEXT: If something sees the tiger then the tiger is cold.\nFOL: all x y. (Something(x) & Tiger(y) & -See(x, y) -> x == y)\nTEXT: If something visits the cow then the cow visits the tiger.\nFOL: all x y. (Something(x) & Cow(y) & -Visit(x, y) -> x == y)\nTEXT: If something sees the tiger then it is nice.\nFOL: all x y. (Something(x) & Tiger(y) & -See(x, y) -> x == y)\nTEXT: If something visits the lion and it chases the cow then it chases the dog.\nFOL: all x y z. (Something(x) & Lion(y) & Cow(z) & -Chase(x, y, z) -> x == z)\nTEXT: The cow is not nice.\nFOL: not all x. (Cow(x) & -Nice(x))",
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: all x y. (Cow(x) & Dog(y) & -Chase(x, y) -> x == y)\nTEXT: The cow does not see the tiger.\nFOL: all x y. (Cow(x) & Tiger(y) & -See(x, y) -> x == y)\nTEXT: The cow visits the dog.\nFOL: all x y. (Cow(x) & Dog(y) & -Visit(x, y) -> x == y)\nTEXT: The cow visits the tiger.\nFOL: all x y. (Cow(x) & Tiger(y) & -Visit(x, y) -> x == y)\nTEXT: The dog does not see the lion.\nFOL: all x y. (Dog(x) & Lion(y) & -See(x, y) -> x == y)\nTEXT: The lion chases the cow.\nFOL: all x y. (Lion(x) & Cow(y) & -Chase(x, y) -> x == y)\nTEXT: The lion chases the dog.\nFOL: all x y. (Lion(x) & Dog(y) & -Chase(x, y) -> x == y)\nTEXT: The lion does not chase the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -Chase(x, y) -> x == y)\nTEXT: The lion is young.\nFOL: all x y. (Lion(x) & Young(y) -> x == y)\nTEXT: The lion sees the cow.\nFOL: all x y. (Lion(x) & Cow(y) & -See(x, y) -> x == y)\nTEXT: The lion does not see the dog.\nFOL: all x y. (Lion(x) & Dog(y) & -See(x, y) -> x == y)\nTEXT: The lion sees the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -See(x, y) -> x == y)\nTEXT: The lion visits the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -Visit(x, y) -> x == y)\nTEXT: The tiger sees the dog.\nFOL: all x y. (Tiger(x) & Dog(y) & -See(x, y) -> x == y)\nTEXT: The tiger visits the lion.\nFOL: all x y. (Tiger(x) & Lion(y) & -Visit(x, y) -> x == y)\nTEXT: If something chases the tiger and the tiger chases the lion then it is not young.\nFOL: all x y z. (Something(x) & Tiger(y) & Lion(z) & -Young(z) -> x == y)\nTEXT: If something visits the lion then the lion is green.\nFOL: all x y z. (Something(x) & Lion(y) & -Visit(x, y) -> x == y)\nTEXT: If something sees the dog then it does not see the lion.\nFOL: all x y z. (Something(x) & Dog(y) & -See(x, y) -> x == y)\nTEXT: If something is cold then it chases the cow.\nFOL: all x y z. (Something(x) & -Cold(x) & Cow(y) & -Chase(x, y) -> x == y)\nTEXT: If something sees the tiger then the tiger is cold.\nFOL: all x y z. (Something(x) & Tiger(y) & -See(x, y) -> x == y)\nTEXT: If something visits the cow then the cow visits the tiger.\nFOL: all x y z. (Something(x) & Cow(y) & -Visit(x, y) -> x == y)\nTEXT: If something sees the tiger then it is nice.\nFOL: all x y z. (Something(x) & Tiger(y) & -See(x, y) -> x == y)\nTEXT: If something visits the lion and it chases the cow then it chases the dog.\nFOL: all x y z. (Something(x) & Lion(y) & -Visit(x, y) & -Chase(x, y) -> x == y)\nTEXT: The cow is not nice.\nFOL: -Nice(cow)",
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: all x y. (Cow(x) & Dog(y) & -Chase(x, y) -> x == y)\nTEXT: The cow does not see the tiger.\nFOL: all x y. (Cow(x) & Tiger(y) & -See(x, y) -> x == y)\nTEXT: The cow visits the dog.\nFOL: all x y. (Cow(x) & Dog(y) & -Visit(x, y) -> x == y)\nTEXT: The cow visits the tiger.\nFOL: all x y. (Cow(x) & Tiger(y) & -Visit(x, y) -> x == y)\nTEXT: The dog does not see the lion.\nFOL: all x y. (Dog(x) & Lion(y) & -See(x, y) -> x == y)\nTEXT: The lion chases the cow.\nFOL: all x y. (Lion(x) & Cow(y) & -Chase(x, y) -> x == y)\nTEXT: The lion chases the dog.\nFOL: all x y. (Lion(x) & Dog(y) & -Chase(x, y) -> x == y)\nTEXT: The lion does not chase the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -Chase(x, y) -> x == y)\nTEXT: The lion is young.\nFOL: all x y. (Lion(x) & Young(y) -> x == y)\nTEXT: The lion sees the cow.\nFOL: all x y. (Lion(x) & Cow(y) & -See(x, y) -> x == y)\nTEXT: The lion does not see the dog.\nFOL: all x y. (Lion(x) & Dog(y) & -See(x, y) -> x == y)\nTEXT: The lion sees the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -See(x, y) -> x == y)\nTEXT: The lion visits the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -Visit(x, y) -> x == y)\nTEXT: The tiger sees the dog.\nFOL: all x y. (Tiger(x) & Dog(y) & -See(x, y) -> x == y)\nTEXT: The tiger visits the lion.\nFOL: all x y. (Tiger(x) & Lion(y) & -Visit(x, y) -> x == y)\nTEXT: If something chases the tiger and the tiger chases the lion then it is not young.\nFOL: all x y z. (Something(x) & Tiger(y) & Lion(z) & -Young(z) -> x == y)\nTEXT: If something visits the lion then the lion is green.\nFOL: all x y z. (Something(x) & Lion(y) & -Visit(x, y) -> x == y)\nTEXT: If something sees the dog then it does not see the lion.\nFOL: all x y z. (Something(x) & Dog(y) & -See(x, y) -> x == y)\nTEXT: If something is cold then it chases the cow.\nFOL: all x y z. (Something(x) & Cold(z) & -Chase(x, z) -> x == y)\nTEXT: If something sees the tiger then the tiger is cold.\nFOL: all x y z. (Something(x) & Tiger(y) & -See(x, y) -> x == y)\nTEXT: If something visits the cow then the cow visits the tiger.\nFOL: all x y z. (Something(x) & Cow(y) & -Visit(x, y) -> x == y)\nTEXT: If something sees the tiger then it is nice.\nFOL: all x y z. (Something(x) & Tiger(y) & -See(x, y) -> x == y)\nTEXT: If something visits the lion and it chases the cow then it chases the dog.\nFOL: all x y z. (Something(x) & Lion(y) & -Visit(x, y) & -Chase(x, y) -> x == y)\nTEXT: The cow is not nice.\nFOL: not all x. (Cow(x) & -Nice(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 15,
  "responses": [
   "<EVALUATE>\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\nTEXT: Erin is quiet.\nFOL: all x. (Erin(x) -> Quiet(x))\nTEXT: Erin is smart.\nFOL: all x. (Erin(x) -> Smart(x))\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\nTEXT: Harry is cold.\nFOL: all x. (Harry(x) -> Cold(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is kind.\nFOL: all x. (Harry(x) -> Kind(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\nTEXT: Quiet people are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nTEXT: All green, kind people are blue.\nFOL: all x. (Green(x) & Kind(x) -> Blue(x))\nTEXT: Erin is kind.\nFOL: all x. (Erin(x) -> Kind(x))\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\n\nTEXT: Erin is quiet.\nFOL: all x. (Erin(x) -> Quiet(x))\n\nTEXT: Erin is smart.\nFOL: all x. (Erin(x) -> Smart(x))\n\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\n\nTEXT: Harry is cold.\nFOL: all x. (Harry(x) -> Cold(x))\n\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\n\nTEXT: Harry is kind.\nFOL: all x. (Harry(x) -> Kind(x))\n\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\n\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\n\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\n\nTEXT: Quiet people are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\n\nTEXT: All green, kind people are blue.\nFOL: all x. (Green(x) & Kind(x) -> Blue(x))\n\nTEXT: Erin is kind.\nFOL: all x. (Erin(x) -> Kind(x))\n\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\nTEXT: Erin is quiet.\nFOL: all x. (Erin(x) -> Quiet(x))\nTEXT: Erin is smart.\nFOL: all x. (Erin(x) -> Smart(x))\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\nTEXT: Harry is cold.\nFOL: all x. (Harry(x) -> Cold(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is kind.\nFOL: all x. (Harry(x) -> Kind(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\nTEXT: Quiet people are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nTEXT: All green, kind people are blue.\nFOL: all x. ((Green(x) & Kind(x)) -> Blue(x))\nTEXT: Erin is kind.\nFOL: all x. (Erin(x) -> Kind(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\nTEXT: Erin is quiet.\nFOL: all x. (Erin(x) -> Quiet(x))\nTEXT: Erin is smart.\nFOL: all x. (Erin(x) -> Smart(x))\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\nTEXT: Harry is cold.\nFOL: all x. (Harry(x) -> Cold(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is kind.\nFOL: all x. (Harry(x) -> Kind(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\nTEXT: Quiet people are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nTEXT: All green, kind people are blue.\nFOL: all x. (Green(x) & Kind(x) -> Blue(x))\nTEXT: Erin is kind.\nFOL: Erin(x) -> Kind(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\nTEXT: Erin is quiet.\nFOL: all x. (Erin(x) -> Quiet(x))\nTEXT: Erin is smart.\nFOL: all x. (Erin(x) -> Smart(x))\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\nTEXT: Harry is cold.\nFOL: all x. (Harry(x) -> Cold(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is kind.\nFOL: all x. (Harry(x) -> Kind(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\nTEXT: Quiet people are blue.\nFOL: all x. (Quiet(x) -> -Blue(x))\nTEXT: All green, kind people are blue.\nFOL: all x. (Green(x) & Kind(x) -> -Blue(x))\nTEXT: Erin is kind.\nFOL: all x. (Erin(x) -> Kind(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 16,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is not green.\nFOL: all x. (Anne(x) -> -Green(x))\nTEXT: Anne is kind.\nFOL: all x. (Anne(x) -> Kind(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Charlie is not white.\nFOL: all x. (Charlie(x) -> -White(x))\nTEXT: Erin is not green.\nFOL: all x. (Erin(x) -> -Green(x))\nTEXT: Erin is not nice.\nFOL: all x. (Erin(x) -> -Nice(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> -Furry(x))\nTEXT: Harry is nice.\nFOL: all x. (Harry(x) -> Nice(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> -White(x))\nTEXT: All white things are not smart.\nFOL: all x. (White(x) -> -Smart(x))\nTEXT: If Erin is white and Erin is furry then Erin is nice.\nFOL: if Erin(x) & White(x) & Erin(x) & Furry(x) -> Nice(x)\nTEXT: If something is furry and kind then it is green.\nFOL: if Furry(x) & Kind(x) -> Green(x))\nTEXT: If something is kind and not nice then it is not big.\nFOL: if Kind(x) & -Nice(x) -> -Big(x))\nTEXT: If Harry is kind and Harry is nice then Harry is furry.\nFOL: if Kind(x) & Nice(x) -> Furry(x))\nTEXT: If Harry is green and Harry is not smart then Harry is furry.\nFOL: if Green(x) & -Smart(x) -> Furry(x))\nTEXT: Harry is not green.\nFOL: -Green(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is not green.\nFOL: all x. (Anne(x) -> -Green(x))\nTEXT: Anne is kind.\nFOL: all x. (Anne(x) -> Kind(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Charlie is not white.\nFOL: all x. (Charlie(x) -> -White(x))\nTEXT: Erin is not green.\nFOL: all x. (Erin(x) -> -Green(x))\nTEXT: Erin is not nice.\nFOL: all x. (Erin(x) -> -Nice(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> -Furry(x))\nTEXT: Harry is nice.\nFOL: all x. (Harry(x) -> Nice(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> -White(x))\nTEXT: All white things are not smart.\nFOL: all x. (White(x) -> -Smart(x))\nTEXT: If Erin is white and Erin is furry then Erin is nice.\nFOL: if Erin(x) & White(x) & Erin(x) & Furry(x) -> Nice(x)\nTEXT: If something is furry and kind then it is green.\nFOL: if Furry(x) & Kind(x) -> Green(x))\nTEXT: If something is kind and not nice then it is not big.\nFOL: if Kind(x) & -Nice(x) -> -Big(x))\nTEXT: If Harry is kind and Harry is nice then Harry is furry.\nFOL: if Kind(x) & Nice(x) -> Furry(x))\nTEXT: If Harry is green and Harry is not smart then Harry is furry.\nFOL: if Green(x) & -Smart(x) -> Furry(x))\nTEXT: Harry is not green.\nFOL: -Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is not green.\nFOL: all x. (Anne(x) -> -Green(x))\nTEXT: Anne is kind.\nFOL: all x. (Anne(x) -> Kind(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Charlie is not white.\nFOL: all x. (Charlie(x) -> -White(x))\nTEXT: Erin is not green.\nFOL: all x. (Erin(x) -> -Green(x))\nTEXT: Erin is not nice.\nFOL: all x. (Erin(x) -> -Nice(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> -Furry(x))\nTEXT: Harry is nice.\nFOL: all x. (Harry(x) -> Nice(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> -White(x))\nTEXT: All white things are not smart.\nFOL: all x. (White(x) -> -Smart(x))\nTEXT: If Erin is white and Erin is furry then Erin is nice.\nFOL: if Erin(x) & White(x) & Erin(x) & Furry(x) -> Nice(x)\nTEXT: If something is furry and kind then it is green.\nFOL: if Furry(x) & Kind(x) -> Green(x)\nTEXT: If something is kind and not nice then it is not big.\nFOL: if Kind(x) & -Nice(x) -> -Big(x))\nTEXT: If Harry is kind and Harry is nice then Harry is furry.\nFOL: if Kind(x) & Nice(x) -> Furry(x))\nTEXT: If Harry is green and Harry is not smart then Harry is furry.\nFOL: if Green(x) & -Smart(x) -> Furry(x))\nTEXT: Harry is not green.\nFOL: -Green(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is not green.\nFOL: all x. (Anne(x) -> -Green(x))\nTEXT: Anne is kind.\nFOL: all x. (Anne(x) -> Kind(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Charlie is not white.\nFOL: all x. (Charlie(x) -> -White(x))\nTEXT: Erin is not green.\nFOL: all x. (Erin(x) -> -Green(x))\nTEXT: Erin is not nice.\nFOL: all x. (Erin(x) -> -Nice(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> -Furry(x))\nTEXT: Harry is nice.\nFOL: all x. (Harry(x) -> Nice(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> -White(x))\nTEXT: All white things are not smart.\nFOL: all x. (White(x) -> -Smart(x))\nTEXT: If Erin is white and Erin is furry then Erin is nice.\nFOL: if Erin(x) & White(x) & Erin(x) & Furry(x) -> Nice(x)\nTEXT: If something is furry and kind then it is green.\nFOL: if Furry(x) & Kind(x) -> Green(x)\nTEXT: If something is kind and not nice then it is not big.\nFOL: if Kind(x) & -Nice(x) -> -Big(x))\nTEXT: If Harry is kind and Harry is nice then Harry is furry.\nFOL: if Kind(x) & Nice(x) -> Furry(x))\nTEXT: If Harry is green and Harry is not smart then Harry is furry.\nFOL: if Green(x) & -Smart(x) -> Furry(x))\nTEXT: Harry is not green.\nFOL: -Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is not green.\nFOL: all x. (Anne(x) -> -Green(x))\nTEXT: Anne is kind.\nFOL: all x. (Anne(x) -> Kind(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Charlie is not white.\nFOL: all x. (Charlie(x) -> -White(x))\nTEXT: Erin is not green.\nFOL: all x. (Erin(x) -> -Green(x))\nTEXT: Erin is not nice.\nFOL: all x. (Erin(x) -> -Nice(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> -Furry(x))\nTEXT: Harry is nice.\nFOL: all x. (Harry(x) -> Nice(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> -White(x))\nTEXT: All white things are not smart.\nFOL: all x. (White(x) -> -Smart(x))\nTEXT: If Erin is white and Erin is furry then Erin is nice.\nFOL: if Erin(x) & White(x) & Erin(x) & Furry(x) -> Nice(x)\nTEXT: If something is furry and kind then it is green.\nFOL: if Furry(x) & Kind(x) -> Green(x))\nTEXT: If something is kind and not nice then it is not big.\nFOL: if Kind(x) & -Nice(x) -> -Big(x))\nTEXT: If Harry is kind and Harry is nice then Harry is furry.\nFOL: if Kind(x) & Nice(x) -> Furry(x))\nTEXT: If Harry is green and Harry is not smart then Harry is furry.\nFOL: if Green(x) & -Smart(x) -> Furry(x))\nTEXT: Harry is not green.\nFOL: -Green(x) & -Smart(x) & Furry(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 17,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> -Cold(x))\nTEXT: If Anne is kind and Anne is smart then Anne is nice.\nFOL: all x y. (Anne(x) & -Kind(x) & -Smart(x) -> Nice(x))\nTEXT: If something is nice then it is red.\nFOL: all x. (Nice(x) -> Red(x))\nTEXT: All cold things are smart.\nFOL: all x. (Cold(x) -> Smart(x))\nTEXT: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\nTEXT: If something is smart then it is nice.\nFOL: all x. (Smart(x) -> Nice(x))\nTEXT: All rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\nTEXT: Anne is not smart.\nFOL: -Smart(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> -Cold(x))\nTEXT: If Anne is kind and Anne is smart then Anne is nice.\nFOL: all x y. (Anne(x) & -Kind(x) & -Smart(x) -> Nice(x))\nTEXT: If something is nice then it is red.\nFOL: all x. (Nice(x) -> Red(x))\nTEXT: All cold things are smart.\nFOL: all x. (Cold(x) -> Smart(x))\nTEXT: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\nTEXT: If something is smart then it is nice.\nFOL: all x y. (Smart(x) -> Nice(x))\nTEXT: All rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\nTEXT: Anne is not smart.\nFOL: -Smart(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> -Cold(x))\nTEXT: If Anne is kind and Anne is smart then Anne is nice.\nFOL: all x y. (Anne(x) & Anne(y) & (Kind(x) & Smart(x) -> Nice(x, y))\nTEXT: If something is nice then it is red.\nFOL: all x. (Nice(x) -> Red(x))\nTEXT: All cold things are smart.\nFOL: all x. (Cold(x) -> Smart(x))\nTEXT: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\nTEXT: If something is smart then it is nice.\nFOL: all x y. (Smart(x) & Nice(x) -> (Kind(x) & Nice(x))\nTEXT: All rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\nTEXT: Anne is not smart.\nFOL: -Smart(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> -Cold(x))\nTEXT: If Anne is kind and Anne is smart then Anne is nice.\nFOL: all x y. (Anne(x) & -Kind(x) & -Smart(x) -> Nice(x))\nTEXT: If something is nice then it is red.\nFOL: all x. (Nice(x) -> Red(x))\nTEXT: All cold things are smart.\nFOL: all x. (Cold(x) -> Smart(x))\nTEXT: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\nTEXT: If something is smart then it is nice.\nFOL: all x y. (Smart(x) & Nice(x) -> -Quiet(x))\nTEXT: All rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\nTEXT: Anne is not smart.\nFOL: -Smart(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> -Cold(x))\nTEXT: If Anne is kind and Anne is smart then Anne is nice.\nFOL: all x y. (Anne(x) & -Kind(x) & -Smart(x) -> Nice(x))\nTEXT: If something is nice then it is red.\nFOL: all x. (Nice(x) -> Red(x))\nTEXT: All cold things are smart.\nFOL: all x. (Cold(x) -> Smart(x))\nTEXT: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\nTEXT: If something is smart then it is nice.\nFOL: all x. (Smart(x) -> Nice(x))\nTEXT: All rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\nTEXT: Anne is not smart.\nFOL: -Smart(Anne)\n</EVALUATE>"
  ]
 },
 {
  "index": 18,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> -Cold(x))\nTEXT: The bald eagle is round.\nFOL: all x. (BaldEagle(x) -> -Round(x))\nTEXT: The bald eagle sees the rabbit.\nFOL: all x. (BaldEagle(x) & Rabbit(x) -> See(x, rabbit))\nTEXT: The bald eagle visits the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> Visit(x, cat))\nTEXT: The bald eagle visits the rabbit.\nFOL: all x. (BaldEagle(x) & Rabbit(x) -> Visit(x, rabbit))\nTEXT: The cat is cold.\nFOL: all x. (Cat(x) -> -Cold(x))\nTEXT: The cat sees the bald eagle.\nFOL: all x. (Cat(x) & BaldEagle(x) -> See(x, baldEagle(x)))\nTEXT: The cat sees the rabbit.\nFOL: all x. (Cat(x) & Rabbit(x) -> See(x, rabbit))\nTEXT: The cat does not visit the bald eagle.\nFOL: all x. (Cat(x) & BaldEagle(x) -> -Visit(x, baldEagle(x)))\nTEXT: The mouse likes the bald eagle.\nFOL: all x. (Mouse(x) & BaldEagle(x) -> Like(x, baldEagle(x)))\nTEXT: The mouse does not like the cat.\nFOL: all x. (Mouse(x) & Cat(x) -> -Like(x, cat(x)))\nTEXT: The mouse does not see the cat.\nFOL: all x. (Mouse(x) & Cat(x) -> -See(x, cat(x)))\nTEXT: The mouse visits the cat.\nFOL: all x. (Mouse(x) & Cat(x) -> Visit(x, cat))\nTEXT: The mouse visits the rabbit.\nFOL: all x. (Mouse(x) & Rabbit(x) -> Visit(x, rabbit))\nTEXT: The rabbit likes the mouse.\nFOL: all x. (Rabbit(x) & Mouse(x) -> Like(x, mouse(x)))\nTEXT: The rabbit sees the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> See(x, cat(x)))\nTEXT: If something is cold then it sees the rabbit.\nFOL: if all x. (Cold(x) -> See(x, rabbit(x)))\nTEXT: If something visits the mouse then it does not like the rabbit.\nFOL: if all x. (Visit(x, mouse(x)) -> -Like(x, rabbit(x)))\nTEXT: If something visits the rabbit then the rabbit visits the cat.\nFOL: if all x. (Visit(x, rabbit(x)) -> Visit(x, cat(x)))\nTEXT: If something sees the cat and the cat is young then the cat is round.\nFOL: if all x. (See(x, cat(x)) & Cat(x) -> Round(x))\nTEXT: If the rabbit visits the cat then the rabbit is round.\nFOL: if all x. (Visit(x, cat(x)) -> Round(x))\nTEXT: All round things are kind.\nFOL: all x. (Round(x) -> Kind(x))\nTEXT: The rabbit does not like the rabbit.\nFOL: -Like(x, rabbit(x)) & -Like(x, rabbit(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> -Cold(x))\nTEXT: The bald eagle is round.\nFOL: all x. (BaldEagle(x) -> -Round(x))\nTEXT: The bald eagle sees the rabbit.\nFOL: all x. (BaldEagle(x) & Rabbit(x) -> See(x, rabbit))\nTEXT: The bald eagle visits the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> Visit(x, cat))\nTEXT: The bald eagle visits the rabbit.\nFOL: all x. (BaldEagle(x) & Rabbit(x) -> Visit(x, rabbit))\nTEXT: The cat is cold.\nFOL: all x. (Cat(x) -> -Cold(x))\nTEXT: The cat sees the bald eagle.\nFOL: all x. (Cat(x) & BaldEagle(x) -> See(x, baldEagle(x)))\nTEXT: The cat sees the rabbit.\nFOL: all x. (Cat(x) & Rabbit(x) -> See(x, rabbit))\nTEXT: The cat does not visit the bald eagle.\nFOL: all x. (Cat(x) & BaldEagle(x) -> -Visit(x, baldEagle(x)))\nTEXT: The mouse likes the bald eagle.\nFOL: all x. (Mouse(x) & BaldEagle(x) -> Like(x, baldEagle(x)))\nTEXT: The mouse does not like the cat.\nFOL: all x. (Mouse(x) & Cat(x) -> -Like(x, cat(x)))\nTEXT: The mouse does not see the cat.\nFOL: all x. (Mouse(x) & Cat(x) -> -See(x, cat(x)))\nTEXT: The mouse visits the cat.\nFOL: all x. (Mouse(x) & Cat(x) -> Visit(x, cat))\nTEXT: The mouse visits the rabbit.\nFOL: all x. (Mouse(x) & Rabbit(x) -> Visit(x, rabbit))\nTEXT: The rabbit likes the mouse.\nFOL: all x. (Rabbit(x) & Mouse(x) -> Like(x, mouse(x)))\nTEXT: The rabbit sees the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> See(x, cat(x)))\nTEXT: If something is cold then it sees the rabbit.\nFOL: if all x. (Cold(x) -> See(x, rabbit(x)))\nTEXT: If something visits the mouse then it does not like the rabbit.\nFOL: if all x. (Visit(x, mouse(x)) -> -Like(x, rabbit(x)))\nTEXT: If something visits the rabbit then the rabbit visits the cat.\nFOL: if all x. (Visit(x, rabbit(x)) -> Visit(x, cat(x)))\nTEXT: If something sees the cat and the cat is young then the cat is round.\nFOL: if all x. (See(x, cat(x)) & Cat(x) -> -Round(x))\nTEXT: If the rabbit visits the cat then the rabbit is round.\nFOL: if all x. (Visit(x, cat(x)) -> -Round(x))\nTEXT: All round things are kind.\nFOL: all x. (Round(x) -> -Kind(x))\nTEXT: The rabbit does not like the rabbit.\nFOL: -Like(x, rabbit(x)) & -Like(x, rabbit(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> -Cold(x))\nTEXT: The bald eagle is round.\nFOL: all x. (BaldEagle(x) -> -Round(x))\nTEXT: The bald eagle sees the rabbit.\nFOL: all x. (BaldEagle(x) & Rabbit(x) -> See(x, rabbit))\nTEXT: The bald eagle visits the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> Visit(x, cat))\nTEXT: The bald eagle visits the rabbit.\nFOL: all x. (BaldEagle(x) & Rabbit(x) -> Visit(x, rabbit))\nTEXT: The cat is cold.\nFOL: all x. (Cat(x) -> -Cold(x))\nTEXT: The cat sees the bald eagle.\nFOL: all x. (Cat(x) & BaldEagle(x) -> See(x, baldEagle(x)))\nTEXT: The cat sees the rabbit.\nFOL: all x. (Cat(x) & Rabbit(x) -> See(x, rabbit))\nTEXT: The cat does not visit the bald eagle.\nFOL: all x. (Cat(x) & BaldEagle(x) -> -Visit(x, baldEagle(x)))\nTEXT: The mouse likes the bald eagle.\nFOL: all x. (Mouse(x) & BaldEagle(x) -> Like(x, baldEagle(x)))\nTEXT: The mouse does not like the cat.\nFOL: all x. (Mouse(x) & Cat(x) -> -Like(x, cat(x)))\nTEXT: The mouse does not see the cat.\nFOL: all x. (Mouse(x) & Cat(x) -> -See(x, cat(x)))\nTEXT: The mouse visits the cat.\nFOL: all x. (Mouse(x) & Cat(x) -> Visit(x, cat))\nTEXT: The mouse visits the rabbit.\nFOL: all x. (Mouse(x) & Rabbit(x) -> Visit(x, rabbit))\nTEXT: The rabbit likes the mouse.\nFOL: all x. (Rabbit(x) & Mouse(x) -> Like(x, mouse(x)))\nTEXT: The rabbit sees the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> See(x, cat(x)))\nTEXT: If something is cold then it sees the rabbit.\nFOL: if all x. (Cold(x) -> See(x, rabbit(x)))\nTEXT: If something visits the mouse then it does not like the rabbit.\nFOL: if all x. (Visit(x, mouse(x)) -> -Like(x, rabbit(x)))\nTEXT: If something visits the rabbit then the rabbit visits the cat.\nFOL: if all x. (Visit(x, rabbit(x)) -> Visit(x, cat(x)))\nTEXT: If something sees the cat and the cat is young then the cat is round.\nFOL: if all x. (See(x, cat(x)) & Cat(x) -> -Round(x))\nTEXT: If the rabbit visits the cat then the rabbit is round.\nFOL: if all x. (Visit(x, cat(x)) -> -Round(x))\nTEXT: All round things are kind.\nFOL: all x. (Round(x) -> Kind(x))\nTEXT: The rabbit does not like the rabbit.\nFOL: -Like(x, rabbit(x)) & -Like(x, rabbit(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> -Cold(x))\nTEXT: The bald eagle is round.\nFOL: all x. (BaldEagle(x) -> -Round(x))\nTEXT: The bald eagle sees the rabbit.\nFOL: all x. (BaldEagle(x) & Rabbit(x) -> See(x, rabbit))\nTEXT: The bald eagle visits the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> Visit(x, cat))\nTEXT: The bald eagle visits the rabbit.\nFOL: all x. (BaldEagle(x) & Rabbit(x) -> Visit(x, rabbit))\nTEXT: The cat is cold.\nFOL: all x. (Cat(x) -> -Cold(x))\nTEXT: The cat sees the bald eagle.\nFOL: all x. (Cat(x) & BaldEagle(x) -> See(x, baldEagle(x)))\nTEXT: The cat sees the rabbit.\nFOL: all x. (Cat(x) & Rabbit(x) -> See(x, rabbit))\nTEXT: The cat does not visit the bald eagle.\nFOL: all x. (Cat(x) & BaldEagle(x) -> -Visit(x, baldEagle(x)))\nTEXT: The mouse likes the bald eagle.\nFOL: all x. (Mouse(x) & BaldEagle(x) -> Like(x, baldEagle(x)))\nTEXT: The mouse does not like the cat.\nFOL: all x. (Mouse(x) & Cat(x) -> -Like(x, cat(x)))\nTEXT: The mouse does not see the cat.\nFOL: all x. (Mouse(x) & Cat(x) -> -See(x, cat(x)))\nTEXT: The mouse visits the cat.\nFOL: all x. (Mouse(x) & Cat(x) -> Visit(x, cat))\nTEXT: The mouse visits the rabbit.\nFOL: all x. (Mouse(x) & Rabbit(x) -> Visit(x, rabbit))\nTEXT: The rabbit likes the mouse.\nFOL: all x. (Rabbit(x) & Mouse(x) -> Like(x, mouse(x)))\nTEXT: The rabbit sees the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> See(x, cat(x)))\nTEXT: If something is cold then it sees the rabbit.\nFOL: if all x. (Cold(x) -> See(x, rabbit(x)))\nTEXT: If something visits the mouse then it does not like the rabbit.\nFOL: if all x. (Visit(x, mouse(x)) -> -Like(x, rabbit(x)))\nTEXT: If something visits the rabbit then the rabbit visits the cat.\nFOL: if all x. (Visit(x, rabbit(x)) -> Visit(x, cat(x)))\nTEXT: If something sees the cat and the cat is young then the cat is round.\nFOL: if all x. (See(x, cat(x)) & Cat(x) -> -Round(x, cat(x)))\nTEXT: If the rabbit visits the cat then the rabbit is round.\nFOL: if all x. (Visit(x, cat(x)) -> -Round(x, cat(x)))\nTEXT: All round things are kind.\nFOL: all x. (Round(x) -> -Kind(x))\nTEXT: The rabbit does not like the rabbit.\nFOL: -Like(x, rabbit(x)) & -Like(x, rabbit(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> -Cold(x))\nTEXT: The bald eagle is round.\nFOL: all x. (BaldEagle(x) -> -Round(x))\nTEXT: The bald eagle sees the rabbit.\nFOL: all x. (BaldEagle(x) & Rabbit(x) -> See(x, rabbit))\nTEXT: The bald eagle visits the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> Visit(x, cat))\nTEXT: The bald eagle visits the rabbit.\nFOL: all x. (BaldEagle(x) & Rabbit(x) -> Visit(x, rabbit))\nTEXT: The cat is cold.\nFOL: all x. (Cat(x) -> -Cold(x))\nTEXT: The cat sees the bald eagle.\nFOL: all x. (Cat(x) & BaldEagle(x) -> See(x, baldEagle(x)))\nTEXT: The cat sees the rabbit.\nFOL: all x. (Cat(x) & Rabbit(x) -> See(x, rabbit))\nTEXT: The cat does not visit the bald eagle.\nFOL: all x. (Cat(x) & BaldEagle(x) -> -Visit(x, baldEagle(x)))\nTEXT: The mouse likes the bald eagle.\nFOL: all x. (Mouse(x) & BaldEagle(x) -> Like(x, baldEagle(x)))\nTEXT: The mouse does not like the cat.\nFOL: all x. (Mouse(x) & Cat(x) -> -Like(x, cat(x)))\nTEXT: The mouse does not see the cat.\nFOL: all x. (Mouse(x) & Cat(x) -> -See(x, cat(x)))\nTEXT: The mouse visits the cat.\nFOL: all x. (Mouse(x) & Cat(x) -> Visit(x, cat))\nTEXT: The mouse visits the rabbit.\nFOL: all x. (Mouse(x) & Rabbit(x) -> Visit(x, rabbit))\nTEXT: The rabbit likes the mouse.\nFOL: all x. (Rabbit(x) & Mouse(x) -> Like(x, mouse(x)))\nTEXT: The rabbit sees the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> See(x, cat(x)))\nTEXT: If something is cold then it sees the rabbit.\nFOL: if all x. (Cold(x) -> See(x, rabbit(x)))\nTEXT: If something visits the mouse then it does not like the rabbit.\nFOL: if all x. (Visit(x, mouse(x)) -> -Like(x, rabbit(x)))\nTEXT: If something visits the rabbit then the rabbit visits the cat.\nFOL: if all x. (Visit(x, rabbit(x)) -> Visit(x, cat(x)))\nTEXT: If something sees the cat and the cat is young then the cat is round.\nFOL: if all x. (See(x, cat(x)) & Cat(x) -> -Round(x, cat(x)))\nTEXT: If the rabbit visits the cat then the rabbit is round.\nFOL: if all x. (Visit(x, cat(x)) -> -Round(x, cat(x)))\nTEXT: All round things are kind.\nFOL: all x. (Round(x) -> Kind(x))\nTEXT: The rabbit does not like the rabbit.\nFOL: -Like(x, rabbit(x)) & -Like(x, rabbit(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 19,
  "responses": [
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: all x. (Cat(x) -> ChasesCow(x))\nTEXT: The cat chases the rabbit.\nFOL: all x. (Cat(x) -> ChasesRabbit(x))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat needs the cow.\nFOL: all x. (Cat(x) -> NeedsCow(x))\nTEXT: The cat visits the rabbit.\nFOL: all x. (Cat(x) -> VisitsRabbit(x))\nTEXT: The cow is nice.\nFOL: all x. (Cow(x) -> Nice(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\nTEXT: The cow needs the cat.\nFOL: all x. (Cow(x) -> NeedsCat(x))\nTEXT: The cow visits the rabbit.\nFOL: all x. (Cow(x) -> VisitsRabbit(x))\nTEXT: The mouse chases the cow.\nFOL: all x. (Mouse(x) -> ChasesCow(x))\nTEXT: The mouse chases the rabbit.\nFOL: all x. (Mouse(x) -> ChasesRabbit(x))\nTEXT: The mouse is kind.\nFOL: all x. (Mouse(x) -> Kind(x))\nTEXT: The mouse needs the rabbit.\nFOL: all x. (Mouse(x) -> NeedsRabbit(x))\nTEXT: The rabbit chases the cow.\nFOL: all x. (Rabbit(x) -> ChasesCow(x))\nTEXT: The rabbit needs the cow.\nFOL: all x. (Rabbit(x) -> NeedsCow(x))\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: all x. (Something(x) -> VisitsCow(x) & Nice(x) -> ChasesMouse(x))\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: all x. (Something(x) -> Nice(x) & ChasesCow(x) -> NeedsCow(x))\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: all x. (Rabbit(x) -> Red(x) & VisitsMouse(x) -> Kind(x))\nTEXT: If something chases the cow then it visits the mouse.\nFOL: all x. (Something(x) -> ChasesCow(x) & VisitsMouse(x))\nTEXT: If something chases the cow then it visits the cat.\nFOL: all x. (Something(x) -> ChasesCow(x) & VisitsCat(x))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: all x. (Mouse(x) -> NeedsRabbit(x) & VisitsRabbit(x) -> Red(x))\nTEXT: The cow does not visit the cat.\nFOL: -VisitsCat(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: all x. (Cat(x) -> ChasesCow(x))\nTEXT: The cat chases the rabbit.\nFOL: all x. (Cat(x) -> ChasesRabbit(x))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat needs the cow.\nFOL: all x. (Cat(x) -> NeedsCow(x))\nTEXT: The cat visits the rabbit.\nFOL: all x. (Cat(x) -> VisitsRabbit(x))\nTEXT: The cow is nice.\nFOL: all x. (Cow(x) -> Nice(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\nTEXT: The cow needs the cat.\nFOL: all x. (Cow(x) -> NeedsCat(x))\nTEXT: The cow visits the rabbit.\nFOL: all x. (Cow(x) -> VisitsRabbit(x))\nTEXT: The mouse chases the cow.\nFOL: all x. (Mouse(x) -> ChasesCow(x))\nTEXT: The mouse chases the rabbit.\nFOL: all x. (Mouse(x) -> ChasesRabbit(x))\nTEXT: The mouse is kind.\nFOL: all x. (Mouse(x) -> Kind(x))\nTEXT: The mouse needs the rabbit.\nFOL: all x. (Mouse(x) -> NeedsRabbit(x))\nTEXT: The rabbit chases the cow.\nFOL: all x. (Rabbit(x) -> ChasesCow(x))\nTEXT: The rabbit needs the cow.\nFOL: all x. (Rabbit(x) -> NeedsCow(x))\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: all x. (Something(x) -> VisitsCow(x) & Nice(x) -> ChasesMouse(x))\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: all x. (Something(x) -> Nice(x) & ChasesCow(x) -> NeedsCow(x))\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: all x. (Rabbit(x) -> Red(x) & VisitsMouse(x) -> Kind(x))\nTEXT: If something chases the cow then it visits the mouse.\nFOL: all x. (Something(x) -> ChasesCow(x) & VisitsMouse(x))\nTEXT: If something chases the cow then it visits the cat.\nFOL: all x. (Something(x) -> ChasesCow(x) & VisitsCat(x))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: all x. (Mouse(x) -> NeedsRabbit(x) & VisitsRabbit(x) -> Red(x))\nTEXT: The cow does not visit the cat.\nFOL: -VisitsCat(cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: all x. (Cat(x) -> ChasesCow(x))\nTEXT: The cat chases the rabbit.\nFOL: all x. (Cat(x) -> ChasesRabbit(x))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat needs the cow.\nFOL: all x. (Cat(x) -> NeedsCow(x))\nTEXT: The cat visits the rabbit.\nFOL: all x. (Cat(x) -> VisitsRabbit(x))\nTEXT: The cow is nice.\nFOL: all x. (Cow(x) -> Nice(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\nTEXT: The cow needs the cat.\nFOL: all x. (Cow(x) -> NeedsCat(x))\nTEXT: The cow visits the rabbit.\nFOL: all x. (Cow(x) -> VisitsRabbit(x))\nTEXT: The mouse chases the cow.\nFOL: all x. (Mouse(x) -> ChasesCow(x))\nTEXT: The mouse chases the rabbit.\nFOL: all x. (Mouse(x) -> ChasesRabbit(x))\nTEXT: The mouse is kind.\nFOL: all x. (Mouse(x) -> Kind(x))\nTEXT: The mouse needs the rabbit.\nFOL: all x. (Mouse(x) -> NeedsRabbit(x))\nTEXT: The rabbit chases the cow.\nFOL: all x. (Rabbit(x) -> ChasesCow(x))\nTEXT: The rabbit needs the cow.\nFOL: all x. (Rabbit(x) -> NeedsCow(x))\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: all x. (Something(x) -> VisitsCow(x) & Nice(x) -> ChasesMouse(x))\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: all x. (Something(x) -> Nice(x) & ChasesCow(x) -> NeedsCow(x))\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: all x. (Rabbit(x) -> Red(x) & VisitsMouse(x) -> Kind(x))\nTEXT: If something chases the cow then it visits the mouse.\nFOL: all x. (Something(x) -> ChasesCow(x) & VisitsMouse(x))\nTEXT: If something chases the cow then it visits the cat.\nFOL: all x. (Something(x) -> ChasesCow(x) & VisitsCat(x))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: all x. (Mouse(x) -> NeedsRabbit(x) & VisitsRabbit(x) -> Red(x))\nTEXT: The cow does not visit the cat.\nFOL: -VisitsCat(cow)",
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: all x. (Cat(x) -> ChasesCow(x))\nTEXT: The cat chases the rabbit.\nFOL: all x. (Cat(x) -> ChasesRabbit(x))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat needs the cow.\nFOL: all x. (Cat(x) -> NeedsCow(x))\nTEXT: The cat visits the rabbit.\nFOL: all x. (Cat(x) -> VisitsRabbit(x))\nTEXT: The cow is nice.\nFOL: all x. (Cow(x) -> Nice(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\nTEXT: The cow needs the cat.\nFOL: all x. (Cow(x) -> NeedsCat(x))\nTEXT: The cow visits the rabbit.\nFOL: all x. (Cow(x) -> VisitsRabbit(x))\nTEXT: The mouse chases the cow.\nFOL: all x. (Mouse(x) -> ChasesCow(x))\nTEXT: The mouse chases the rabbit.\nFOL: all x. (Mouse(x) -> ChasesRabbit(x))\nTEXT: The mouse is kind.\nFOL: all x. (Mouse(x) -> Kind(x))\nTEXT: The mouse needs the rabbit.\nFOL: all x. (Mouse(x) -> NeedsRabbit(x))\nTEXT: The rabbit chases the cow.\nFOL: all x. (Rabbit(x) -> ChasesCow(x))\nTEXT: The rabbit needs the cow.\nFOL: all x. (Rabbit(x) -> NeedsCow(x))\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: all x. (Something(x) -> VisitsCow(x) & Nice(x) -> ChasesMouse(x))\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: all x. (Something(x) -> Nice(x) & ChasesCow(x) -> NeedsCow(x))\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: all x. (Rabbit(x) -> Red(x) & VisitsMouse(x) -> Kind(x))\nTEXT: If something chases the cow then it visits the mouse.\nFOL: all x. (Something(x) -> ChasesCow(x) -> VisitsMouse(x))\nTEXT: If something chases the cow then it visits the cat.\nFOL: all x. (Something(x) -> ChasesCow(x) -> VisitsCat(x))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: all x. (Mouse(x) -> NeedsRabbit(x) & Rabbit(x) -> VisitsMouse(x) -> Red(x))\nTEXT: The cow does not visit the cat.\nFOL: -VisitsCat(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: all x. (Cat(x) -> ChasesCow(x))\nTEXT: The cat chases the rabbit.\nFOL: all x. (Cat(x) -> ChasesRabbit(x))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat needs the cow.\nFOL: all x. (Cat(x) -> NeedsCow(x))\nTEXT: The cat visits the rabbit.\nFOL: all x. (Cat(x) -> VisitsRabbit(x))\nTEXT: The cow is nice.\nFOL: all x. (Cow(x) -> Nice(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\nTEXT: The cow needs the cat.\nFOL: all x. (Cow(x) -> NeedsCat(x))\nTEXT: The cow visits the rabbit.\nFOL: all x. (Cow(x) -> VisitsRabbit(x))\nTEXT: The mouse chases the cow.\nFOL: all x. (Mouse(x) -> ChasesCow(x))\nTEXT: The mouse chases the rabbit.\nFOL: all x. (Mouse(x) -> ChasesRabbit(x))\nTEXT: The mouse is kind.\nFOL: all x. (Mouse(x) -> Kind(x))\nTEXT: The mouse needs the rabbit.\nFOL: all x. (Mouse(x) -> NeedsRabbit(x))\nTEXT: The rabbit chases the cow.\nFOL: all x. (Rabbit(x) -> ChasesCow(x))\nTEXT: The rabbit needs the cow.\nFOL: all x. (Rabbit(x) -> NeedsCow(x))\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: all x. (Something(x) -> VisitsCow(x) & Nice(x) -> ChasesMouse(x))\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: all x. (Something(x) -> Nice(x) & ChasesCow(x) -> NeedsCow(x))\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: all x. (Rabbit(x) -> Red(x) & VisitsMouse(x) -> Kind(x))\nTEXT: If something chases the cow then it visits the mouse.\nFOL: all x. (Something(x) -> ChasesCow(x) & VisitsMouse(x))\nTEXT: If something chases the cow then it visits the cat.\nFOL: all x. (Something(x) -> ChasesCow(x) & VisitsCat(x))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: all x. (Mouse(x) -> NeedsRabbit(x) & VisitsRabbit(x) -> Red(x))\nTEXT: The cow does not visit the cat.\nFOL: not all x. (Cow(x) -> VisitsCat(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 20,
  "responses": [
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: all x. (Bear(x) -> Round(x))\nTEXT: The bear sees the cat.\nFOL: all x. (Bear(x) & Cat(x) -> See(x))\nTEXT: The cat is blue.\nFOL: all x. (Cat(x) -> Blue(x))\nTEXT: The cat is round.\nFOL: all x. (Cat(x) -> Round(x))\nTEXT: The cat likes the bear.\nFOL: all x. (Cat(x) & Bear(x) -> Like(x))\nTEXT: The squirrel eats the bear.\nFOL: all x. (Squirrel(x) & Bear(x) -> Eat(x))\nTEXT: The squirrel sees the cat.\nFOL: all x. (Squirrel(x) & Cat(x) -> See(x))\nTEXT: If someone sees the bear and they like the bear then the bear likes the cat.\nFOL: all x. (See(x) & Like(x) & Bear(x) -> Like(x))\nTEXT: If someone likes the cat and the cat likes the bear then they see the bear.\nFOL: all x. (Like(x) & Cat(x) & Bear(x) -> See(x))\nTEXT: If someone eats the squirrel then they eat the bear.\nFOL: all x. (Eats(x) & Squirrel(x) -> Eat(x))\nTEXT: If someone eats the squirrel then the squirrel likes the cat.\nFOL: all x. (Eats(x) & Squirrel(x) -> Like(x))\nTEXT: If someone likes the squirrel and the squirrel is round then they are red.\nFOL: all x. (Like(x) & Squirrel(x) & Round(x) -> Red(x))\nTEXT: If someone is red and they like the cat then they are blue.\nFOL: all x. (Red(x) & Like(x) & Cat(x) -> Blue(x))\nTEXT: If someone sees the squirrel then they eat the cat.\nFOL: all x. (See(x) & Squirrel(x) -> Eat(x))\nTEXT: If someone likes the bear then they eat the squirrel.\nFOL: all x. (Like(x) & Bear(x) -> Eat(x))\nTEXT: The cat sees the cat.\nFOL: all x. (Cat(x) & Cat(x) -> See(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: all x. (Bear(x) -> Round(x))\nTEXT: The bear sees the cat.\nFOL: all x. (Bear(x) & Cat(x) -> See(x))\nTEXT: The cat is blue.\nFOL: all x. (Cat(x) -> Blue(x))\nTEXT: The cat is round.\nFOL: all x. (Cat(x) -> Round(x))\nTEXT: The cat likes the bear.\nFOL: all x. (Cat(x) & Bear(x) -> Like(x))\nTEXT: The squirrel eats the bear.\nFOL: all x. (Squirrel(x) & Bear(x) -> Eat(x))\nTEXT: The squirrel sees the cat.\nFOL: all x. (Squirrel(x) & Cat(x) -> See(x))\nTEXT: If someone sees the bear and they like the bear then the bear likes the cat.\nFOL: all x. (See(x) & Like(x) & Bear(x) -> Like(x))\nTEXT: If someone likes the cat and the cat likes the bear then they see the bear.\nFOL: all x. (Like(x) & Cat(x) & Bear(x) -> See(x))\nTEXT: If someone eats the squirrel then they eat the bear.\nFOL: all x. (Eat(x) & Squirrel(x) -> Eat(x))\nTEXT: If someone eats the squirrel then the squirrel likes the cat.\nFOL: all x. (Eat(x) & Squirrel(x) -> Like(x))\nTEXT: If someone likes the squirrel and the squirrel is round then they are red.\nFOL: all x. (Like(x) & Squirrel(x) & Round(x) -> Red(x))\nTEXT: If someone is red and they like the cat then they are blue.\nFOL: all x. (Red(x) & Like(x) & Cat(x) -> Blue(x))\nTEXT: If someone sees the squirrel then they eat the cat.\nFOL: all x. (See(x) & Squirrel(x) -> Eat(x))\nTEXT: If someone likes the bear then they eat the squirrel.\nFOL: all x. (Like(x) & Bear(x) -> Eat(x))\nTEXT: The cat sees the cat.\nFOL: all x. (Cat(x) & Cat(x) -> See(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: all x. (Bear(x) -> Round(x))\nTEXT: The bear sees the cat.\nFOL: all x. (Bear(x) & Cat(x) -> See(x))\nTEXT: The cat is blue.\nFOL: all x. (Cat(x) -> Blue(x))\nTEXT: The cat is round.\nFOL: all x. (Cat(x) -> Round(x))\nTEXT: The cat likes the bear.\nFOL: all x. (Cat(x) & Bear(x) -> Like(x))\nTEXT: The squirrel eats the bear.\nFOL: all x. (Squirrel(x) & Bear(x) -> Eat(x))\nTEXT: The squirrel sees the cat.\nFOL: all x. (Squirrel(x) & Cat(x) -> See(x))\nTEXT: If someone sees the bear and they like the bear then the bear likes the cat.\nFOL: all x. (See(x) & Like(x) & Bear(x) -> Like(x))\nTEXT: If someone likes the cat and the cat likes the bear then they see the bear.\nFOL: all x. (Like(x) & Bear(x) -> See(x))\nTEXT: If someone eats the squirrel then they eat the bear.\nFOL: all x. (Eats(x) & Squirrel(x) -> Eat(x))\nTEXT: If someone eats the squirrel then the squirrel likes the cat.\nFOL: all x. (Eats(x) & Squirrel(x) -> Like(x))\nTEXT: If someone likes the squirrel and the squirrel is round then they are red.\nFOL: all x. (Like(x) & Round(x) & Squirrel(x) -> Red(x))\nTEXT: If someone is red and they like the cat then they are blue.\nFOL: all x. (Red(x) & Like(x) & Cat(x) -> Blue(x))\nTEXT: If someone sees the squirrel then they eat the cat.\nFOL: all x. (See(x) & Squirrel(x) -> Eat(x))\nTEXT: If someone likes the bear then they eat the squirrel.\nFOL: all x. (Like(x) & Bear(x) -> Eat(x))\nTEXT: The cat sees the cat.\nFOL: all x. (Cat(x) & Cat(x) -> See(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: all x. (Bear(x) -> Round(x))\nTEXT: The bear sees the cat.\nFOL: all x. (Bear(x) & Cat(x) -> See(x))\nTEXT: The cat is blue.\nFOL: all x. (Cat(x) -> Blue(x))\nTEXT: The cat is round.\nFOL: all x. (Cat(x) -> Round(x))\nTEXT: The cat likes the bear.\nFOL: all x. (Cat(x) & Bear(x) -> Like(x))\nTEXT: The squirrel eats the bear.\nFOL: all x. (Squirrel(x) & Bear(x) -> Eat(x))\nTEXT: The squirrel sees the cat.\nFOL: all x. (Squirrel(x) & Cat(x) -> See(x))\nTEXT: If someone sees the bear and they like the bear then the bear likes the cat.\nFOL: all x. (See(x) & Like(x) & Bear(x) -> Like(x))\nTEXT: If someone likes the cat and the cat likes the bear then they see the bear.\nFOL: all x. (Like(x) & Cat(x) & Bear(x) -> See(x))\nTEXT: If someone eats the squirrel then they eat the bear.\nFOL: all x. (Eats(x) & Squirrel(x) & Bear(x) -> Eat(x))\nTEXT: If someone eats the squirrel then the squirrel likes the cat.\nFOL: all x. (Eats(x) & Squirrel(x) & Cat(x) -> Like(x))\nTEXT: If someone likes the squirrel and the squirrel is round then they are red.\nFOL: all x. (Like(x) & Squirrel(x) & Round(x) -> Red(x))\nTEXT: If someone is red and they like the cat then they are blue.\nFOL: all x. (Red(x) & Like(x) & Cat(x) -> Blue(x))\nTEXT: If someone sees the squirrel then they eat the cat.\nFOL: all x. (See(x) & Squirrel(x) -> Eat(x))\nTEXT: If someone likes the bear then they eat the squirrel.\nFOL: all x. (Like(x) & Bear(x) -> Eat(x))\nTEXT: The cat sees the cat.\nFOL: all x. (Cat(x) & Cat(x) -> See(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: all x. (Bear(x) -> Round(x))\nTEXT: The bear sees the cat.\nFOL: all x. (Bear(x) & Cat(x) -> See(x))\nTEXT: The cat is blue.\nFOL: all x. (Cat(x) -> Blue(x))\nTEXT: The cat is round.\nFOL: all x. (Cat(x) -> Round(x))\nTEXT: The cat likes the bear.\nFOL: all x. (Cat(x) & Bear(x) -> Like(x))\nTEXT: The squirrel eats the bear.\nFOL: all x. (Squirrel(x) & Bear(x) -> Eat(x))\nTEXT: The squirrel sees the cat.\nFOL: all x. (Squirrel(x) & Cat(x) -> See(x))\nTEXT: If someone sees the bear and they like the bear then the bear likes the cat.\nFOL: all x. (See(x) & Like(x) & Bear(x) -> Like(x))\nTEXT: If someone likes the cat and the cat likes the bear then they see the bear.\nFOL: all x. (Like(x) & Cat(x) & Bear(x) -> See(x))\nTEXT: If someone eats the squirrel then they eat the bear.\nFOL: all x. (Eats(x) & Squirrel(x) & Bear(x) -> Eat(x))\nTEXT: If someone eats the squirrel then the squirrel likes the cat.\nFOL: all x. (Eats(x) & Squirrel(x) & Cat(x) -> Like(x))\nTEXT: If someone likes the squirrel and the squirrel is round then they are red.\nFOL: all x. (Like(x) & Squirrel(x) & Round(x) -> Red(x))\nTEXT: If someone is red and they like the cat then they are blue.\nFOL: all x. (Red(x) & Like(x) & Cat(x) -> Blue(x))\nTEXT: If someone sees the squirrel then they eat the cat.\nFOL: all x. (See(x) & Squirrel(x) -> Eat(x))\nTEXT: If someone likes the bear then they eat the squirrel.\nFOL: all x. (Like(x) & Bear(x) -> Eat(x))\nTEXT: The cat sees the cat.\nFOL: all x. (Cat(x) & See(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 21,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is not smart.\nFOL: all x. (Anne(x) -> -Smart(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))\nTEXT: Fiona is kind.\nFOL: all x. (Fiona(x) -> Kind(x))\nTEXT: Harry is kind.\nFOL: all x. (Harry(x) -> Kind(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\nTEXT: Rough, smart things are white.\nFOL: all x. (Smart(x) & Rough(x) -> White(x))\nTEXT: All round things are smart.\nFOL: all x. (Round(x) -> Smart(x))\nTEXT: All white things are big.\nFOL: all x. (White(x) -> Big(x))\nTEXT: If Anne is rough then Anne is kind.\nFOL: all x y. (Anne(x) & Rough(x) -> Anne(x) & Kind(x))\nTEXT: If Dave is round then Dave is kind.\nFOL: all x y. (Dave(x) & Round(x) -> Dave(x) & Kind(x))\nTEXT: All smart things are rough.\nFOL: all x. (Smart(x) -> Rough(x))\nTEXT: Dave is not big.\nFOL: -BigDave(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is not smart.\nFOL: all x. (Anne(x) -> NotSmart(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))\nTEXT: Fiona is kind.\nFOL: all x. (Fiona(x) -> Kind(x))\nTEXT: Harry is kind.\nFOL: all x. (Harry(x) -> Kind(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\nTEXT: Rough, smart things are white.\nFOL: all x. ((Smart(x) & Rough(x)) -> White(x))\nTEXT: All round things are smart.\nFOL: all x. ((Round(x) & Smart(x)) -> White(x))\nTEXT: All white things are big.\nFOL: all x. ((White(x) & Big(x)) -> Round(x))\nTEXT: If Anne is rough then Anne is kind.\nFOL: all x. ((Rough(x) & Kind(x)) -> Anne(x))\nTEXT: If Dave is round then Dave is kind.\nFOL: all x. ((Round(x) & Kind(x)) -> Dave(x))\nTEXT: All smart things are rough.\nFOL: all x. ((Smart(x) & Rough(x)) -> Dave(x))\nTEXT: Dave is not big.\nFOL: -BigDave(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is not smart.\nFOL: all x. (Anne(x) -> -Smart(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))\nTEXT: Fiona is kind.\nFOL: all x. (Fiona(x) -> Kind(x))\nTEXT: Harry is kind.\nFOL: all x. (Harry(x) -> Kind(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\nTEXT: Rough, smart things are white.\nFOL: all x. (Smart(x) & Rough(x) -> White(x))\nTEXT: All round things are smart.\nFOL: all x. (Round(x) & Smart(x) -> White(x))\nTEXT: All white things are big.\nFOL: all x. (White(x) & Big(x) -> Round(x))\nTEXT: If Anne is rough then Anne is kind.\nFOL: all x. (Anne(x) & Rough(x) -> Kind(x))\nTEXT: If Dave is round then Dave is kind.\nFOL: all x. (Dave(x) & Round(x) -> Kind(x))\nTEXT: All smart things are rough.\nFOL: all x. (Smart(x) & Rough(x) -> -Round(x))\nTEXT: Dave is not big.\nFOL: -BigDave(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is not smart.\nFOL: all x. (Anne(x) -> -Smart(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))\nTEXT: Fiona is kind.\nFOL: all x. (Fiona(x) -> Kind(x))\nTEXT: Harry is kind.\nFOL: all x. (Harry(x) -> Kind(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\nTEXT: Rough, smart things are white.\nFOL: all x. (Smart(x) & Rough(x) -> White(x))\nTEXT: All round things are smart.\nFOL: all x. (Round(x) & Smart(x) -> White(x))\nTEXT: All white things are big.\nFOL: all x. (White(x) & Big(x) -> Round(x))\nTEXT: If Anne is rough then Anne is kind.\nFOL: all x. (Anne(x) & Rough(x) -> Kind(x))\nTEXT: If Dave is round then Dave is kind.\nFOL: all x. (Dave(x) & Round(x) -> Kind(x))\nTEXT: All smart things are rough.\nFOL: all x. (Smart(x) & Rough(x) -> -Round(x))\nTEXT: Dave is not big.\nFOL: -BigDave(x)",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is not smart.\nFOL: all x. (Anne(x) -> -Smart(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))\nTEXT: Fiona is kind.\nFOL: all x. (Fiona(x) -> Kind(x))\nTEXT: Harry is kind.\nFOL: all x. (Harry(x) -> Kind(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\nTEXT: Rough, smart things are white.\nFOL: all x. (Smart(x) & Rough(x) -> White(x))\nTEXT: All round things are smart.\nFOL: all x. (Round(x) -> Smart(x))\nTEXT: All white things are big.\nFOL: all x. (White(x) -> Big(x))\nTEXT: If Anne is rough then Anne is kind.\nFOL: all x y. (Anne(x) & Rough(x) -> Anne(x) & Kind(x))\nTEXT: If Dave is round then Dave is kind.\nFOL: all x y. (Dave(x) & Round(x) -> Dave(x) & Kind(x))\nTEXT: All smart things are rough.\nFOL: all x. (Smart(x) & Rough(x) -> -Rough(x))\nTEXT: Dave is not big.\nFOL: -BigDave(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 22,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: all x. (Anne(x) -> Green(x))\nTEXT: Anne is kind.\nFOL: all x. (Anne(x) -> Kind(x))\nTEXT: Anne is round.\nFOL: all x. (Anne(x) -> Round(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Anne is white.\nFOL: all x. (Anne(x) -> White(x))\nTEXT: Charlie is big.\nFOL: all x. (Charlie(x) -> Big(x))\nTEXT: Charlie is kind.\nFOL: all x. (Charlie(x) -> Kind(x))\nTEXT: Charlie is red.\nFOL: all x. (Charlie(x) -> Red(x))\nTEXT: Charlie is smart.\nFOL: all x. (Charlie(x) -> Smart(x))\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))\nTEXT: Fiona is kind.\nFOL: all x. (Fiona(x) -> Kind(x))\nTEXT: Fiona is red.\nFOL: all x. (Fiona(x) -> Red(x))\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is red.\nFOL: all x. (Harry(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: Kind, red people are round.\nFOL: ((Kind(x) & Red(x)) -> Round(x))\nTEXT: If Anne is big and Anne is kind then Anne is green.\nFOL: ((Big(x) & Kind(x)) -> Green(x))\nTEXT: All kind, big people are white.\nFOL: all x. (Big(x) & Kind(x) -> White(x))\nTEXT: Round people are green.\nFOL: ((Round(x) & Green(x)) -> White(x))\nTEXT: If Charlie is big then Charlie is green.\nFOL: ((Big(x) -> Green(x)))\nTEXT: If someone is white then they are kind.\nFOL: ((White(x) -> Kind(x)))\nTEXT: Anne is red.\nFOL: (Red(x) -> Kind(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: all x. (Anne(x) -> Green(x))\nTEXT: Anne is kind.\nFOL: all x. (Anne(x) -> Kind(x))\nTEXT: Anne is round.\nFOL: all x. (Anne(x) -> Round(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Anne is white.\nFOL: all x. (Anne(x) -> White(x))\nTEXT: Charlie is big.\nFOL: all x. (Charlie(x) -> Big(x))\nTEXT: Charlie is kind.\nFOL: all x. (Charlie(x) -> Kind(x))\nTEXT: Charlie is red.\nFOL: all x. (Charlie(x) -> Red(x))\nTEXT: Charlie is smart.\nFOL: all x. (Charlie(x) -> Smart(x))\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))\nTEXT: Fiona is kind.\nFOL: all x. (Fiona(x) -> Kind(x))\nTEXT: Fiona is red.\nFOL: all x. (Fiona(x) -> Red(x))\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is red.\nFOL: all x. (Harry(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: Kind, red people are round.\nFOL: ((Kind(x) & Red(x)) -> Round(x))\nTEXT: If Anne is big and Anne is kind then Anne is green.\nFOL: ((Big(x) & Kind(x)) -> Green(x))\nTEXT: All kind, big people are white.\nFOL: all x. (Big(x) & Kind(x) -> White(x))\nTEXT: Round people are green.\nFOL: ((Round(x) & Green(x)) -> White(x))\nTEXT: If Charlie is big then Charlie is green.\nFOL: ((Big(x) -> Green(x)))\nTEXT: If someone is white then they are kind.\nFOL: (White(x) -> Kind(x))\nTEXT: Anne is red.\nFOL: (Red(x) -> Kind(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: all x. (Anne(x) -> Green(x))\nTEXT: Anne is kind.\nFOL: all x. (Anne(x) -> Kind(x))\nTEXT: Anne is round.\nFOL: all x. (Anne(x) -> Round(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Anne is white.\nFOL: all x. (Anne(x) -> White(x))\nTEXT: Charlie is big.\nFOL: all x. (Charlie(x) -> Big(x))\nTEXT: Charlie is kind.\nFOL: all x. (Charlie(x) -> Kind(x))\nTEXT: Charlie is red.\nFOL: all x. (Charlie(x) -> Red(x))\nTEXT: Charlie is smart.\nFOL: all x. (Charlie(x) -> Smart(x))\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))\nTEXT: Fiona is kind.\nFOL: all x. (Fiona(x) -> Kind(x))\nTEXT: Fiona is red.\nFOL: all x. (Fiona(x) -> Red(x))\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is red.\nFOL: all x. (Harry(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: Kind, red people are round.\nFOL: ((Kind(x) & Red(x)) -> Round(x))\nTEXT: If Anne is big and Anne is kind then Anne is green.\nFOL: ((Big(x) & Kind(x)) -> Green(x))\nTEXT: All kind, big people are white.\nFOL: all x. (Big(x) & Kind(x) -> White(x))\nTEXT: Round people are green.\nFOL: ((Round(x) & Green(x)) -> White(x))\nTEXT: If Charlie is big then Charlie is green.\nFOL: ((Big(x) -> Green(x)))\nTEXT: If someone is white then they are kind.\nFOL: ((White(x) -> Kind(x)))\nTEXT: Anne is red.\nFOL: all x. (Red(x) -> Kind(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: all x. (Anne(x) -> Green(x))\nTEXT: Anne is kind.\nFOL: all x. (Anne(x) -> Kind(x))\nTEXT: Anne is round.\nFOL: all x. (Anne(x) -> Round(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Anne is white.\nFOL: all x. (Anne(x) -> White(x))\nTEXT: Charlie is big.\nFOL: all x. (Charlie(x) -> Big(x))\nTEXT: Charlie is kind.\nFOL: all x. (Charlie(x) -> Kind(x))\nTEXT: Charlie is red.\nFOL: all x. (Charlie(x) -> Red(x))\nTEXT: Charlie is smart.\nFOL: all x. (Charlie(x) -> Smart(x))\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))\nTEXT: Fiona is kind.\nFOL: all x. (Fiona(x) -> Kind(x))\nTEXT: Fiona is red.\nFOL: all x. (Fiona(x) -> Red(x))\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is red.\nFOL: all x. (Harry(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: Kind, red people are round.\nFOL: ((Kind(x) & Red(x)) -> Round(x))\nTEXT: If Anne is big and Anne is kind then Anne is green.\nFOL: ((Big(x) & Kind(x)) -> Green(x))\nTEXT: All kind, big people are white.\nFOL: all x. (Big(x) & Kind(x) -> White(x))\nTEXT: Round people are green.\nFOL: ((Round(x) & Green(x)) -> White(x))\nTEXT: If Charlie is big then Charlie is green.\nFOL: ((Big(x) & Green(x)) -> Green(x))\nTEXT: If someone is white then they are kind.\nFOL: ((White(x) & Kind(x)) -> Kind(x))\nTEXT: Anne is red.\nFOL: ((Red(x) & Kind(x)) -> Kind(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: all x. (Anne(x) -> Green(x))\nTEXT: Anne is kind.\nFOL: all x. (Anne(x) -> Kind(x))\nTEXT: Anne is round.\nFOL: all x. (Anne(x) -> Round(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Anne is white.\nFOL: all x. (Anne(x) -> White(x))\nTEXT: Charlie is big.\nFOL: all x. (Charlie(x) -> Big(x))\nTEXT: Charlie is kind.\nFOL: all x. (Charlie(x) -> Kind(x))\nTEXT: Charlie is red.\nFOL: all x. (Charlie(x) -> Red(x))\nTEXT: Charlie is smart.\nFOL: all x. (Charlie(x) -> Smart(x))\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))\nTEXT: Fiona is kind.\nFOL: all x. (Fiona(x) -> Kind(x))\nTEXT: Fiona is red.\nFOL: all x. (Fiona(x) -> Red(x))\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is red.\nFOL: all x. (Harry(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: Kind, red people are round.\nFOL: ((Kind(x) & Red(x)) -> Round(x))\nTEXT: If Anne is big and Anne is kind then Anne is green.\nFOL: ((Big(x) & Kind(x)) -> Green(x))\nTEXT: All kind, big people are white.\nFOL: all x. (Big(x) & Kind(x) -> White(x))\nTEXT: Round people are green.\nFOL: ((Round(x) & Green(x)) -> White(x))\nTEXT: If Charlie is big then Charlie is green.\nFOL: ((Big(x) & Green(x)) -> Green(x))\nTEXT: If someone is white then they are kind.\nFOL: ((White(x) & Kind(x)) -> Kind(x))\nTEXT: Anne is red.\nFOL: (Red(x) -> Kind(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 23,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Erin is blue.\nFOL: all x. (Erin(x) -> Blue(x))\nTEXT: Gary is cold.\nFOL: all x. (Gary(x) -> Cold(x))\nTEXT: If Erin is green then Erin is big.\nFOL: all x y. (Erin(x) & Green(x) -> Big(x))\nTEXT: Green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: If Bob is cold then Bob is big.\nFOL: all x y. (Bob(x) & Cold(x) -> Big(x))\nTEXT: All blue things are cold.\nFOL: all x. (Blue(x) -> Cold(x))\nTEXT: All green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If something is rough and big then it is green.\nFOL: all x y. (Something(x) & Rough(x) & Big(x) -> Green(x))\nTEXT: All kind, blue things are cold.\nFOL: all x. (Kind(x) & Blue(x) -> Cold(x))\nTEXT: Gary is big.\nFOL: all x. (Gary(x) -> Big(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Erin is blue.\nFOL: all x. (Erin(x) -> Blue(x))\nTEXT: Gary is cold.\nFOL: all x. (Gary(x) -> Cold(x))\nTEXT: If Erin is green then Erin is big.\nFOL: all x y. (Erin(x) & Green(x) -> Big(x))\nTEXT: Green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: If Bob is cold then Bob is big.\nFOL: all x y. (Bob(x) & Cold(x) -> Big(x))\nTEXT: All blue things are cold.\nFOL: all x. (Blue(x) -> Cold(x))\nTEXT: All green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If something is rough and big then it is green.\nFOL: all x y. (Something(x) & Rough(x) & Big(x) -> Green(x))\nTEXT: All kind, blue things are cold.\nFOL: all x y. (Kind(x) & Blue(x) & Cold(x))\nTEXT: Gary is big.\nFOL: all x. (Gary(x) -> Big(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Erin is blue.\nFOL: all x. (Erin(x) -> Blue(x))\nTEXT: Gary is cold.\nFOL: all x. (Gary(x) -> Cold(x))\nTEXT: If Erin is green then Erin is big.\nFOL: all x y. (Erin(x) & Green(x) -> Big(x))\nTEXT: Green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: If Bob is cold then Bob is big.\nFOL: all x y. (Bob(x) & Cold(x) -> Big(x))\nTEXT: All blue things are cold.\nFOL: all x. (Blue(x) -> Cold(x))\nTEXT: All green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If something is rough and big then it is green.\nFOL: all x y. (Something(x) & Rough(x) & Big(x) -> Green(x))\nTEXT: All kind, blue things are cold.\nFOL: all x. (Kind(x) & Blue(x) & Cold(x))\nTEXT: Gary is big.\nFOL: all x. (Gary(x) -> Big(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Erin is blue.\nFOL: all x. (Erin(x) -> Blue(x))\nTEXT: Gary is cold.\nFOL: all x. (Gary(x) -> Cold(x))\nTEXT: If Erin is green then Erin is big.\nFOL: all x y. (Erin(x) & Green(x) -> Big(x))\nTEXT: Green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: If Bob is cold then Bob is big.\nFOL: all x y. (Bob(x) & Cold(x) -> Big(x))\nTEXT: All blue things are cold.\nFOL: all x. (Blue(x) -> Cold(x))\nTEXT: All green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If something is rough and big then it is green.\nFOL: all x y. (Something(x) & Rough(x) & Big(x) -> Green(x))\nTEXT: All kind, blue things are cold.\nFOL: all x y. (Kind(x) & Blue(x) -> Cold(x))\nTEXT: Gary is big.\nFOL: all x. (Gary(x) -> Big(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> -Blue(x))\nTEXT: Erin is blue.\nFOL: all x. (Erin(x) -> -Blue(x))\nTEXT: Gary is cold.\nFOL: all x. (Gary(x) -> -Cold(x))\nTEXT: If Erin is green then Erin is big.\nFOL: all x y. (Erin(x) & Green(x) -> Big(x))\nTEXT: Green things are rough.\nFOL: all x. (Green(x) -> -Rough(x))\nTEXT: If Bob is cold then Bob is big.\nFOL: all x y. (Bob(x) & Cold(x) -> Big(x))\nTEXT: All blue things are cold.\nFOL: all x. (Blue(x) -> -Cold(x))\nTEXT: All green things are rough.\nFOL: all x. (Green(x) -> -Rough(x))\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> -Kind(x))\nTEXT: If something is rough and big then it is green.\nFOL: all x y. (Something(x) & Rough(x) & Big(x) -> Green(x))\nTEXT: All kind, blue things are cold.\nFOL: all x. (Kind(x) & Blue(x) -> -Cold(x))\nTEXT: Gary is big.\nFOL: all x. (Gary(x) -> -Big(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 24,
  "responses": [
   "<EVALUATE>\n\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) -> Kind(x))\n\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\n\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> Big(x))\n\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n\nTEXT: Dave is young.\nFOL: all x. (Dave(x) -> Young(x))\n\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))\n\nTEXT: Fiona is kind.\nFOL: all x. (Fiona(x) -> Kind(x))\n\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\n\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\n\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\n\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\n\nTEXT: Blue people are nice.\nFOL: all x. (Blue(x) -> Nice(x))\n\nTEXT: All nice, cold people are young.\nFOL: all x. (Nice(x) & Cold(x) -> Young(x))\n\nTEXT: All young, nice people are cold.\nFOL: all x. (Young(x) & Nice(x) -> Cold(x))\n\nTEXT: All cold people are kind.\nFOL: all x. (Cold(x) -> Kind(x))\n\nTEXT: Cold people are young.\nFOL: all x. (Cold(x) -> Young(x))\n\nTEXT: If Dave is young then Dave is kind.\nFOL: if all x. (Dave(x) -> Young(x)) then all x. (Dave(x) -> Kind(x))\n\nTEXT: Bob is not nice.\nFOL: not all x. (Bob(x) -> Nice(x))\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) -> Kind(x))\n\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\n\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> Big(x))\n\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n\nTEXT: Dave is young.\nFOL: all x. (Dave(x) -> Young(x))\n\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))\n\nTEXT: Fiona is kind.\nFOL: all x. (Fiona(x) -> Kind(x))\n\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\n\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\n\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\n\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\n\nTEXT: Blue people are nice.\nFOL: all x. (Blue(x) -> Nice(x))\n\nTEXT: All nice, cold people are young.\nFOL: all x. (Nice(x) & Cold(x) -> Young(x))\n\nTEXT: All young, nice people are cold.\nFOL: all x. (Young(x) & Nice(x) -> Cold(x))\n\nTEXT: All cold people are kind.\nFOL: all x. (Cold(x) -> Kind(x))\n\nTEXT: Cold people are young.\nFOL: all x. (Cold(x) -> Young(x))\n\nTEXT: If Dave is young then Dave is kind.\nFOL: if Dave(x) -> Kind(x)\n\nTEXT: Bob is not nice.\nFOL: not Bob(x) -> -Nice(x)\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) -> Kind(x))\n\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\n\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> Big(x))\n\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n\nTEXT: Dave is young.\nFOL: all x. (Dave(x) -> Young(x))\n\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))\n\nTEXT: Fiona is kind.\nFOL: all x. (Fiona(x) -> Kind(x))\n\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\n\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\n\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\n\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\n\nTEXT: Blue people are nice.\nFOL: all x. (Blue(x) -> Nice(x))\n\nTEXT: All nice, cold people are young.\nFOL: all x. (Nice(x) & Cold(x) -> Young(x))\n\nTEXT: All young, nice people are cold.\nFOL: all x. (Young(x) & Nice(x) -> Cold(x))\n\nTEXT: All cold people are kind.\nFOL: all x. (Cold(x) -> Kind(x))\n\nTEXT: Cold people are young.\nFOL: all x. (Cold(x) -> Young(x))\n\nTEXT: If Dave is young then Dave is kind.\nFOL: if all x. (Dave(x) -> Young(x)) then all x. (Dave(x) -> Kind(x))\n\nTEXT: Bob is not nice.\nFOL: not all x. (Bob(x) -> Nice(x))",
   "<EVALUATE>\n\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) -> Kind(x))\n\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\n\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> Big(x))\n\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n\nTEXT: Dave is young.\nFOL: all x. (Dave(x) -> Young(x))\n\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))\n\nTEXT: Fiona is kind.\nFOL: all x. (Fiona(x) -> Kind(x))\n\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\n\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\n\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\n\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\n\nTEXT: Blue people are nice.\nFOL: all x. (Blue(x) -> Nice(x))\n\nTEXT: All nice, cold people are young.\nFOL: all x. (Nice(x) & Cold(x) -> Young(x))\n\nTEXT: All young, nice people are cold.\nFOL: all x. (Young(x) & Nice(x) -> Cold(x))\n\nTEXT: All cold people are kind.\nFOL: all x. (Cold(x) -> Kind(x))\n\nTEXT: Cold people are young.\nFOL: all x. (Cold(x) -> Young(x))\n\nTEXT: If Dave is young then Dave is kind.\nFOL: all x. (Dave(x) -> Young(x)) & (Young(x) -> Kind(x))\n\nTEXT: Bob is not nice.\nFOL: -Nice(bob)\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) -> Kind(x))\n\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\n\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> Big(x))\n\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n\nTEXT: Dave is young.\nFOL: all x. (Dave(x) -> Young(x))\n\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))\n\nTEXT: Fiona is kind.\nFOL: all x. (Fiona(x) -> Kind(x))\n\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\n\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\n\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\n\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\n\nTEXT: Blue people are nice.\nFOL: all x. (Blue(x) -> Nice(x))\n\nTEXT: All nice, cold people are young.\nFOL: all x. (Nice(x) & Cold(x) -> Young(x))\n\nTEXT: All young, nice people are cold.\nFOL: all x. (Young(x) & Nice(x) -> Cold(x))\n\nTEXT: All cold people are kind.\nFOL: all x. (Cold(x) -> Kind(x))\n\nTEXT: Cold people are young.\nFOL: all x. (Cold(x) -> Young(x))\n\nTEXT: If Dave is young then Dave is kind.\nFOL: if all x. (Dave(x) -> Young(x)) -> Dave(x) -> Kind(x))\n\nTEXT: Bob is not nice.\nFOL: not all x. (Bob(x) -> Nice(x))\n\n</EVALUATE>"
  ]
 },
 {
  "index": 25,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: all x. (Anne(x) -> Blue(x))\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> Cold(x))\nTEXT: Anne is not furry.\nFOL: all x. (Anne(x) -> -Furry(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> Blue(x))\nTEXT: Charlie is not green.\nFOL: all x. (Charlie(x) -> -Green(x))\nTEXT: Erin is cold.\nFOL: all x. (Erin(x) -> Cold(x))\nTEXT: Erin is not quiet.\nFOL: all x. (Erin(x) -> -Quiet(x))\nTEXT: All smart things are quiet.\nFOL: all x. (Smart(x) -> Quiet(x))\nTEXT: If Anne is blue then Anne is smart.\nFOL: all x y. (Anne(x) & Blue(x) -> Smart(x))\nTEXT: All cold, quiet things are big.\nFOL: all x y. (Cold(x) & Quiet(x) -> Big(x))\nTEXT: Quiet things are blue.\nFOL: all x y. (Quiet(x) & Blue(x) -> -Big(x))\nTEXT: If Erin is big then Erin is not blue.\nFOL: all x y. (Erin(x) & Big(x) -> -Blue(x))\nTEXT: If something is blue and not quiet then it is furry.\nFOL: all x y. (Blue(x) & -Quiet(x) -> -Furry(x))\nTEXT: If something is smart and not blue then it is furry.\nFOL: all x y. (Smart(x) & -Blue(x) -> -Furry(x))\nTEXT: If something is blue and not quiet then it is not furry.\nFOL: all x y. (Blue(x) & -Quiet(x) -> -NotFurry(x))\nTEXT: Erin is quiet.\nFOL: -Quiet(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: all x. (Anne(x) -> Blue(x))\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> Cold(x))\nTEXT: Anne is not furry.\nFOL: all x. (Anne(x) -> -Furry(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> Blue(x))\nTEXT: Charlie is not green.\nFOL: all x. (Charlie(x) -> -Green(x))\nTEXT: Erin is cold.\nFOL: all x. (Erin(x) -> Cold(x))\nTEXT: Erin is not quiet.\nFOL: all x. (Erin(x) -> -Quiet(x))\nTEXT: All smart things are quiet.\nFOL: all x. (Smart(x) -> Quiet(x))\nTEXT: If Anne is blue then Anne is smart.\nFOL: all x y. (Anne(x) & Blue(x) -> Smart(x))\nTEXT: All cold, quiet things are big.\nFOL: all x y. (Cold(x) & Quiet(x) -> Big(x))\nTEXT: Quiet things are blue.\nFOL: all x y. (Quiet(x) & Blue(x) -> -Big(x))\nTEXT: If Erin is big then Erin is not blue.\nFOL: all x y. (Erin(x) & Big(x) -> -Blue(x))\nTEXT: If something is blue and not quiet then it is furry.\nFOL: all x y. (x Blue(x) & -Quiet(x) -> -Furry(x))\nTEXT: If something is smart and not blue then it is furry.\nFOL: all x y. (x Smart(x) & -Blue(x) -> -Furry(x))\nTEXT: If something is blue and not quiet then it is not furry.\nFOL: all x y. (x Blue(x) & -Quiet(x) -> -NotFurry(x))\nTEXT: Erin is quiet.\nFOL: -Quiet(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: all x. (Anne(x) -> Blue(x))\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> Cold(x))\nTEXT: Anne is not furry.\nFOL: all x. (Anne(x) -> -Furry(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> Blue(x))\nTEXT: Charlie is not green.\nFOL: all x. (Charlie(x) -> -Green(x))\nTEXT: Erin is cold.\nFOL: all x. (Erin(x) -> Cold(x))\nTEXT: Erin is not quiet.\nFOL: all x. (Erin(x) -> -Quiet(x))\nTEXT: All smart things are quiet.\nFOL: all x. (Smart(x) -> -Quiet(x))\nTEXT: If Anne is blue then Anne is smart.\nFOL: all x y. (Anne(x) & Blue(x) -> Smart(x))\nTEXT: All cold, quiet things are big.\nFOL: all x y. (Cold(x) & Quiet(x) -> Big(x))\nTEXT: Quiet things are blue.\nFOL: all x y. (Quiet(x) & Blue(x) -> -Big(x))\nTEXT: If Erin is big then Erin is not blue.\nFOL: all x y. (Erin(x) & Big(x) -> -Blue(x))\nTEXT: If something is blue and not quiet then it is furry.\nFOL: all x y. (x Blue(x) & -Quiet(x) -> -Furry(x))\nTEXT: If something is smart and not blue then it is furry.\nFOL: all x y. (x Smart(x) & -Blue(x) -> -Furry(x))\nTEXT: If something is blue and not quiet then it is not furry.\nFOL: all x y. (x Blue(x) & -Quiet(x) -> -NotFurry(x))\nTEXT: Erin is quiet.\nFOL: -Quiet(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: all x. (Anne(x) -> Blue(x))\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> Cold(x))\nTEXT: Anne is not furry.\nFOL: all x. (Anne(x) -> -Furry(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> Blue(x))\nTEXT: Charlie is not green.\nFOL: all x. (Charlie(x) -> -Green(x))\nTEXT: Erin is cold.\nFOL: all x. (Erin(x) -> Cold(x))\nTEXT: Erin is not quiet.\nFOL: all x. (Erin(x) -> -Quiet(x))\nTEXT: All smart things are quiet.\nFOL: all x. (Smart(x) -> Quiet(x))\nTEXT: If Anne is blue then Anne is smart.\nFOL: all x y. (Anne(x) & Blue(x) -> Smart(x))\nTEXT: All cold, quiet things are big.\nFOL: all x y. (Cold(x) & Quiet(x) -> Big(x))\nTEXT: Quiet things are blue.\nFOL: all x y. (Quiet(x) & Blue(x) -> -Big(x))\nTEXT: If Erin is big then Erin is not blue.\nFOL: all x y. (Erin(x) & Big(x) -> -Blue(x))\nTEXT: If something is blue and not quiet then it is furry.\nFOL: all x y. (Blue(x) & -Quiet(x) -> -Furry(x))\nTEXT: If something is smart and not blue then it is furry.\nFOL: all x y. (Smart(x) & -Blue(x) -> -Furry(x))\nTEXT: If something is blue and not quiet then it is not furry.\nFOL: all x y. (Blue(x) & -Quiet(x) -> -Furry(x))\nTEXT: Erin is quiet.\nFOL: -Quiet(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: all x. (Anne(x) -> Blue(x))\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> Cold(x))\nTEXT: Anne is not furry.\nFOL: all x. (Anne(x) -> -Furry(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> Blue(x))\nTEXT: Charlie is not green.\nFOL: all x. (Charlie(x) -> -Green(x))\nTEXT: Erin is cold.\nFOL: all x. (Erin(x) -> Cold(x))\nTEXT: Erin is not quiet.\nFOL: all x. (Erin(x) -> -Quiet(x))\nTEXT: All smart things are quiet.\nFOL: all x. (Smart(x) -> Quiet(x))\nTEXT: If Anne is blue then Anne is smart.\nFOL: all x y. (Anne(x) & Blue(x) -> Smart(x))\nTEXT: All cold, quiet things are big.\nFOL: all x y. (Cold(x) & Quiet(x) -> Big(x))\nTEXT: Quiet things are blue.\nFOL: all x y. (Quiet(x) & Blue(x) -> -Big(x))\nTEXT: If Erin is big then Erin is not blue.\nFOL: all x y. (Erin(x) & Big(x) -> -Blue(x))\nTEXT: If something is blue and not quiet then it is furry.\nFOL: all x y. (x Blue(x) & -Quiet(x) -> -Furry(x))\nTEXT: If something is smart and not blue then it is furry.\nFOL: all x y. (x Smart(x) & -Blue(x) -> -Furry(x))\nTEXT: If something is blue and not quiet then it is not furry.\nFOL: all x y. (x Blue(x) & -Quiet(x) -> -Furry(x))\nTEXT: Erin is quiet.\nFOL: -Quiet(erin)\n</EVALUATE>"
  ]
 },
 {
  "index": 26,
  "responses": [
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: Bob woke up one day to find he had become round.\nFOL: all x. (Bob(x) -> -Round(x))\nTEXT: He was still rough, red, and green, but now he was also big.\nFOL: all x. (Rough(x) & Red(x) & Green(x) & -Big(x))\nTEXT: Charlie may be young but he is nice, wears green shoes and is cold.\nFOL: all x. (Young(x) & Nice(x) & WearGreen(x) & -Cold(x))\nTEXT: That guy Fred sure is nice.\nFOL: all x. (Fred(x) -> Nice(x))\nTEXT: Someone who has young, nice and cold qualities will possess a red quality, too.\nFOL: all x. (Young(x) & Nice(x) & Cold(x) & Red(x))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) & -Cold(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) & -Kind(x))\nTEXT: Young people who feel cold and are still kind usually look rough.\nFOL: all x. (Young(x) & Cold(x) & -Kind(x) & Rough(x))\nTEXT: Charlie is rough.\nFOL: all x. (Charlie(x) -> Rough(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: Bob woke up one day to find he had become round.\nFOL: all x. (Bob(x) -> -Round(x))\nTEXT: He was still rough, red, and green, but now he was also big.\nFOL: all x. (Rough(x) & Red(x) & Green(x) & -Big(x))\nTEXT: Charlie may be young but he is nice, wears green shoes and is cold.\nFOL: all x. (Young(x) & Nice(x) & WearGreen(x) & -Cold(x))\nTEXT: That guy Fred sure is nice.\nFOL: all x. (Fred(x) -> Nice(x))\nTEXT: Someone who has young, nice and cold qualities will possess a red quality, too.\nFOL: all x. (Young(x) & Nice(x) & Cold(x) & -Red(x))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) & -Cold(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) & -Kind(x))\nTEXT: Young people who feel cold and are still kind usually look rough.\nFOL: all x. (Young(x) & Cold(x) & -Kind(x) & Rough(x))\nTEXT: Charlie is rough.\nFOL: -Rough(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: Bob woke up one day to find he had become round.\nFOL: all x. (Bob(x) -> -Round(x))\nTEXT: He was still rough, red, and green, but now he was also big.\nFOL: all x. (Rough(x) & Red(x) & Green(x) & -Big(x))\nTEXT: Charlie may be young but he is nice, wears green shoes and is cold.\nFOL: all x. (Young(x) & Nice(x) & WearGreen(x) & -Cold(x))\nTEXT: That guy Fred sure is nice.\nFOL: all x. (Fred(x) -> Nice(x))\nTEXT: Someone who has young, nice and cold qualities will possess a red quality, too.\nFOL: all x. (Young(x) & Nice(x) & Cold(x) & -Red(x))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) & -Cold(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) & -Kind(x))\nTEXT: Young people who feel cold and are still kind usually look rough.\nFOL: all x. (Young(x) & Cold(x) & -Kind(x) & -Rough(x))\nTEXT: Charlie is rough.\nFOL: -Rough(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: Bob woke up one day to find he had become round.\nFOL: all x. (Bob(x) -> -Round(x))\nTEXT: He was still rough, red, and green, but now he was also big.\nFOL: all x. (Rough(x) & Red(x) & Green(x) & -Big(x))\nTEXT: Charlie may be young but he is nice, wears green shoes and is cold.\nFOL: all x. (Young(x) & Nice(x) & WearGreen(x) & -Cold(x))\nTEXT: That guy Fred sure is nice.\nFOL: all x. (Fred(x) -> Nice(x))\nTEXT: Someone who has young, nice and cold qualities will possess a red quality, too.\nFOL: all x. (Young(x) & Nice(x) & Cold(x) & -Red(x))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) & -Cold(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) & -Kind(x))\nTEXT: Young people who feel cold and are still kind usually look rough.\nFOL: all x. (Young(x) & -Cold(x) & -Kind(x) & Rough(x))\nTEXT: Charlie is rough.\nFOL: -Rough(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: Bob woke up one day to find he had become round.\nFOL: all x. (Bob(x) -> -Round(x))\nTEXT: He was still rough, red, and green, but now he was also big.\nFOL: all x. (Rough(x) & Red(x) & Green(x) & -Big(x))\nTEXT: Charlie may be young but he is nice, wears green shoes and is cold.\nFOL: all x. (Young(x) & Nice(x) & WearGreen(x) & -Cold(x))\nTEXT: That guy Fred sure is nice.\nFOL: all x. (Fred(x) -> Nice(x))\nTEXT: Someone who has young, nice and cold qualities will possess a red quality, too.\nFOL: all x. (Young(x) & Nice(x) & Cold(x) & Red(x))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) & -Cold(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) & -Kind(x))\nTEXT: Young people who feel cold and are still kind usually look rough.\nFOL: all x. (Young(x) & Cold(x) & -Kind(x) & Rough(x))\nTEXT: Charlie is rough.\nFOL: all x. (Charlie(x) -> -Rough(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 27,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Erin is big.\nFOL: all x. (Erin(x) -> Big(x))\nTEXT: Gary is blue.\nFOL: all x. (Gary(x) -> Blue(x))\nTEXT: All big, smart people are green.\nFOL: all x. (Big(x) & Smart(x) -> Green(x))\nTEXT: If someone is smart then they are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: If someone is big then they are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: If Gary is cold and Gary is blue then Gary is green.\nFOL: ((Cold(gary) & -Blue(gary)) | (-Cold(gary) & Blue(gary))) -> Green(gary)\nTEXT: Green, round people are big.\nFOL: all x. (Round(x) -> Green(x))\nTEXT: All green people are round.\nFOL: all x. (Green(x) -> Round(x))\nTEXT: Erin is not green.\nFOL: -Green(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Erin is big.\nFOL: all x. (Erin(x) -> Big(x))\nTEXT: Gary is blue.\nFOL: all x. (Gary(x) -> Blue(x))\nTEXT: All big, smart people are green.\nFOL: all x. (Big(x) & Smart(x) -> Green(x))\nTEXT: If someone is smart then they are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: If someone is big then they are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: If Gary is cold and Gary is blue then Gary is green.\nFOL: (Cold(x) & Blue(x)) -> Green(x)\nTEXT: Green, round people are big.\nFOL: all x. (Green(x) & Round(x) -> Big(x))\nTEXT: All green people are round.\nFOL: all x. (Green(x) -> Round(x))\nTEXT: Erin is not green.\nFOL: -Green(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Erin is big.\nFOL: all x. (Erin(x) -> Big(x))\nTEXT: Gary is blue.\nFOL: all x. (Gary(x) -> Blue(x))\nTEXT: All big, smart people are green.\nFOL: all x. (Big(x) & Smart(x) -> Green(x))\nTEXT: If someone is smart then they are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: If someone is big then they are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: If Gary is cold and Gary is blue then Gary is green.\nFOL: ((Cold(gary) & -Blue(gary)) | (-Cold(gary) & Blue(gary)))\nTEXT: Green, round people are big.\nFOL: all x. (Round(x) -> Green(x))\nTEXT: All green people are round.\nFOL: all x. (Green(x) -> Round(x))\nTEXT: Erin is not green.\nFOL: -Green(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Erin is big.\nFOL: all x. (Erin(x) -> Big(x))\nTEXT: Gary is blue.\nFOL: all x. (Gary(x) -> Blue(x))\nTEXT: All big, smart people are green.\nFOL: all x. (Big(x) & Smart(x) -> Green(x))\nTEXT: If someone is smart then they are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: If someone is big then they are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: If Gary is cold and Gary is blue then Gary is green.\nFOL: (Cold(x) & Blue(x) -> Green(x))\nTEXT: Green, round people are big.\nFOL: all x. (Round(x) -> Green(x))\nTEXT: All green people are round.\nFOL: all x. (Green(x) -> Round(x))\nTEXT: Erin is not green.\nFOL: -Green(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Erin is big.\nFOL: all x. (Erin(x) -> Big(x))\nTEXT: Gary is blue.\nFOL: all x. (Gary(x) -> Blue(x))\nTEXT: All big, smart people are green.\nFOL: all x. (Big(x) & Smart(x) -> Green(x))\nTEXT: If someone is smart then they are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: If someone is big then they are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: If Gary is cold and Gary is blue then Gary is green.\nFOL: (Cold(x) & Blue(x)) -> Green(x)\nTEXT: Green, round people are big.\nFOL: all x. (Green(x) & Round(x) -> Big(x))\nTEXT: All green people are round.\nFOL: all x. (Green(x) -> Round(x))\nTEXT: Erin is not green.\nFOL: not Green(erin)\n</EVALUATE>"
  ]
 },
 {
  "index": 28,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: Fiona is not quiet.\nFOL: all x. (Fiona(x) -> NotQuiet(x))\nTEXT: Fiona is smart.\nFOL: all x. (Fiona(x) -> Smart(x))\nTEXT: If someone is smart then they are nice.\nFOL: all x. (Smart(x) -> Nice(x))\nTEXT: All smart people are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: Rough people are big.\nFOL: all x. (Rough(x) -> Big(x))\nTEXT: If someone is quiet and white then they are not rough.\nFOL: all x. (Quiet(x) & White(x) & -Rough(x) -> NotRough(x))\nTEXT: Big people are rough.\nFOL: all x. (Big(x) -> Rough(x))\nTEXT: If someone is quiet and white then they are not rough.\nFOL: all x. (Quiet(x) & White(x) & -Rough(x) -> NotRough(x))\nTEXT: Rough, big people are white.\nFOL: Rough(x) & Big(x) & White(x)\nTEXT: If Dave is white then Dave is not big.\nFOL: all x. (Dave(x) & White(x) -> -Big(x))\nTEXT: If someone is big and not white then they are not furry.\nFOL: all x. (Big(x) & NotWhite(x) -> -Furry(x))\nTEXT: Dave is nice.\nFOL: Dave(x) -> Nice(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: Fiona is not quiet.\nFOL: all x. (Fiona(x) -> NotQuiet(x))\nTEXT: Fiona is smart.\nFOL: all x. (Fiona(x) -> Smart(x))\nTEXT: If someone is smart then they are nice.\nFOL: all x. (Smart(x) -> Nice(x))\nTEXT: All smart people are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: Rough people are big.\nFOL: all x. (Rough(x) -> Big(x))\nTEXT: If someone is quiet and white then they are not rough.\nFOL: all x. (Quiet(x) & White(x) & -Rough(x) -> NotRough(x))\nTEXT: Big people are rough.\nFOL: all x. (Big(x) -> Rough(x))\nTEXT: If someone is quiet and white then they are not rough.\nFOL: all x. (Quiet(x) & White(x) & -Rough(x) -> NotRough(x))\nTEXT: Rough, big people are white.\nFOL: Rough(x) & Big(x) & White(x)\nTEXT: If Dave is white then Dave is not big.\nFOL: all x. (Dave(x) & White(x) -> -Big(x))\nTEXT: If someone is big and not white then they are not furry.\nFOL: all x. (Big(x) & NotWhite(x) -> -Furry(x))\nTEXT: Dave is nice.\nFOL: all x. (Dave(x) -> Nice(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: Fiona is not quiet.\nFOL: all x. (Fiona(x) -> NotQuiet(x))\nTEXT: Fiona is smart.\nFOL: all x. (Fiona(x) -> Smart(x))\nTEXT: If someone is smart then they are nice.\nFOL: all x. (Smart(x) -> Nice(x))\nTEXT: All smart people are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: Rough people are big.\nFOL: all x. (Rough(x) -> Big(x))\nTEXT: If someone is quiet and white then they are not rough.\nFOL: all x. (Quiet(x) & White(x) & -Rough(x) -> NotRough(x))\nTEXT: Big people are rough.\nFOL: all x. (Big(x) -> Rough(x))\nTEXT: If someone is quiet and white then they are not rough.\nFOL: all x. (Quiet(x) & White(x) & -Rough(x) -> NotRough(x))\nTEXT: Rough, big people are white.\nFOL: Rough(x) & Big(x) & White(x)\nTEXT: If Dave is white then Dave is not big.\nFOL: all x. (Dave(x) -> White(x)) & -Big(x) -> Dave(x)\nTEXT: If someone is big and not white then they are not furry.\nFOL: all x. (Big(x) & NotWhite(x) & -Furry(x) -> NotFurry(x))\nTEXT: Dave is nice.\nFOL: Dave(x) -> Nice(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: Fiona is not quiet.\nFOL: all x. (Fiona(x) -> NotQuiet(x))\nTEXT: Fiona is smart.\nFOL: all x. (Fiona(x) -> Smart(x))\nTEXT: If someone is smart then they are nice.\nFOL: all x. (Smart(x) -> Nice(x))\nTEXT: All smart people are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: Rough people are big.\nFOL: all x. (Rough(x) -> Big(x))\nTEXT: If someone is quiet and white then they are not rough.\nFOL: all x. (Quiet(x) & White(x) & -Rough(x) -> NotRough(x))\nTEXT: Big people are rough.\nFOL: all x. (Big(x) -> Rough(x))\nTEXT: If someone is quiet and white then they are not rough.\nFOL: all x. (Quiet(x) & White(x) & -Rough(x) -> NotRough(x))\nTEXT: Rough, big people are white.\nFOL: Rough(x) & Big(x) & White(x)\nTEXT: If Dave is white then Dave is not big.\nFOL: all x. (Dave(x) & White(x) -> -Big(x))\nTEXT: If someone is big and not white then they are not furry.\nFOL: all x. (Big(x) & NotWhite(x) -> -Furry(x))\nTEXT: Dave is nice.\nFOL: all x. (Dave(x) -> Nice(x))",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: Fiona is not quiet.\nFOL: all x. (Fiona(x) -> NotQuiet(x))\nTEXT: Fiona is smart.\nFOL: all x. (Fiona(x) -> Smart(x))\nTEXT: If someone is smart then they are nice.\nFOL: all x. (Smart(x) -> Nice(x))\nTEXT: All smart people are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: Rough people are big.\nFOL: all x. (Rough(x) -> Big(x))\nTEXT: If someone is quiet and white then they are not rough.\nFOL: all x. (Quiet(x) & White(x) & -Rough(x) -> NotRough(x))\nTEXT: Big people are rough.\nFOL: all x. (Big(x) -> Rough(x))\nTEXT: If someone is quiet and white then they are not rough.\nFOL: all x. (Quiet(x) & White(x) & -Rough(x) -> NotRough(x))\nTEXT: Rough, big people are white.\nFOL: Rough(x) & Big(x) & White(x)\nTEXT: If Dave is white then Dave is not big.\nFOL: all x. (Dave(x) & White(x) -> -Big(x))\nTEXT: If someone is big and not white then they are not furry.\nFOL: all x. (Big(x) & NotWhite(x) -> -Furry(x))\nTEXT: Dave is nice.\nFOL: Dave(x) -> Nice(x)"
  ]
 },
 {
  "index": 29,
  "responses": [
   "<EVALUATE>\nTEXT: The cow chases the squirrel.\nFOL: all x. (Cow(x) -> ChasesSquirrel(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\nTEXT: The cow is young.\nFOL: all x. (Cow(x) -> Young(x))\nTEXT: The cow needs the squirrel.\nFOL: all x. (Cow(x) -> NeedsSquirrel(x))\nTEXT: The cow sees the squirrel.\nFOL: all x. (Cow(x) -> SeesSquirrel(x))\nTEXT: The squirrel chases the cow.\nFOL: all x. (Squirrel(x) -> ChasesCow(x))\nTEXT: The squirrel is young.\nFOL: all x. (Squirrel(x) -> Young(x))\nTEXT: The squirrel needs the cow.\nFOL: all x. (Squirrel(x) -> NeedsCow(x))\nTEXT: The squirrel sees the cow.\nFOL: all x. (Squirrel(x) -> SeesCow(x))\nTEXT: If the cow needs the squirrel and the squirrel sees the cow then the squirrel is big.\nFOL: all x y. (Cow(x) -> NeedsSquirrel(x) & Squirrel(x) -> SeesCow(x) -> Big(x))\nTEXT: If someone is big then they chase the squirrel.\nFOL: all x. (Big(x) -> ChasesSquirrel(x))\nTEXT: If the cow needs the squirrel and the cow is big then the cow is young.\nFOL: all x y. (Cow(x) -> NeedsSquirrel(x) & Cow(x) -> Big(x) -> Young(x))\nTEXT: If someone sees the squirrel and they are blue then the squirrel needs the cow.\nFOL: all x y. (Squirrel(x) -> Sees(x) & Blue(x) -> NeedsCow(x))\nTEXT: If someone chases the squirrel then they are cold.\nFOL: all x. (ChasesSquirrel(x) -> Cold(x))\nTEXT: If the squirrel needs the cow and the squirrel sees the cow then the cow needs the squirrel.\nFOL: all x y. (Squirrel(x) -> NeedsCow(x) & Squirrel(x) -> SeesCow(x) -> NeedsSquirrel(x))\nTEXT: The squirrel is not round.\nFOL: not all x. (Squirrel(x) -> Round(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the squirrel.\nFOL: all x. (Cow(x) -> ChasesSquirrel(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\nTEXT: The cow is young.\nFOL: all x. (Cow(x) -> Young(x))\nTEXT: The cow needs the squirrel.\nFOL: all x. (Cow(x) -> NeedsSquirrel(x))\nTEXT: The cow sees the squirrel.\nFOL: all x. (Cow(x) -> SeesSquirrel(x))\nTEXT: The squirrel chases the cow.\nFOL: all x. (Squirrel(x) -> ChasesCow(x))\nTEXT: The squirrel is young.\nFOL: all x. (Squirrel(x) -> Young(x))\nTEXT: The squirrel needs the cow.\nFOL: all x. (Squirrel(x) -> NeedsCow(x))\nTEXT: The squirrel sees the cow.\nFOL: all x. (Squirrel(x) -> SeesCow(x))\nTEXT: If the cow needs the squirrel and the squirrel sees the cow then the squirrel is big.\nFOL: all x y. (Cow(x) -> NeedsSquirrel(x) & Squirrel(x) -> SeesCow(x) -> Big(x))\nTEXT: If someone is big then they chase the squirrel.\nFOL: all x. (Big(x) -> ChasesSquirrel(x))\nTEXT: If the cow needs the squirrel and the cow is big then the cow is young.\nFOL: all x y. (Cow(x) -> NeedsSquirrel(x) & Cow(x) -> Big(x) -> Young(x))\nTEXT: If someone sees the squirrel and they are blue then the squirrel needs the cow.\nFOL: all x y. (Squirrel(x) -> Sees(x) & Blue(x) -> NeedsCow(x))\nTEXT: If someone chases the squirrel then they are cold.\nFOL: all x. (ChasesSquirrel(x) -> Cold(x))\nTEXT: If the squirrel needs the cow and the squirrel sees the cow then the cow needs the squirrel.\nFOL: all x y. (Squirrel(x) -> SeesCow(x) & NeedsCow(x) -> NeedsSquirrel(x))\nTEXT: The squirrel is not round.\nFOL: not all x. (Squirrel(x) -> Round(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the squirrel.\nFOL: all x. (Cow(x) -> ChasesSquirrel(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\nTEXT: The cow is young.\nFOL: all x. (Cow(x) -> Young(x))\nTEXT: The cow needs the squirrel.\nFOL: all x. (Cow(x) -> NeedsSquirrel(x))\nTEXT: The cow sees the squirrel.\nFOL: all x. (Cow(x) -> SeesSquirrel(x))\nTEXT: The squirrel chases the cow.\nFOL: all x. (Squirrel(x) -> ChasesCow(x))\nTEXT: The squirrel is young.\nFOL: all x. (Squirrel(x) -> Young(x))\nTEXT: The squirrel needs the cow.\nFOL: all x. (Squirrel(x) -> NeedsCow(x))\nTEXT: The squirrel sees the cow.\nFOL: all x. (Squirrel(x) -> SeesCow(x))\nTEXT: If the cow needs the squirrel and the squirrel sees the cow then the squirrel is big.\nFOL: all x y. (Cow(x) -> NeedsSquirrel(x) & Squirrel(x) -> SeesCow(x) -> Big(x))\nTEXT: If someone is big then they chase the squirrel.\nFOL: all x. (Big(x) -> ChasesSquirrel(x))\nTEXT: If the cow needs the squirrel and the cow is big then the cow is young.\nFOL: all x y. (Cow(x) -> NeedsSquirrel(x) & Cow(x) -> Big(x) -> Young(x))\nTEXT: If someone sees the squirrel and they are blue then the squirrel needs the cow.\nFOL: all x y. (SeeSquirrel(x) & Blue(x) -> NeedsSquirrel(x))\nTEXT: If someone chases the squirrel then they are cold.\nFOL: all x. (ChasesSquirrel(x) -> Cold(x))\nTEXT: If the squirrel needs the cow and the squirrel sees the cow then the cow needs the squirrel.\nFOL: all x y. (NeedsSquirrel(x) & SeeSquirrel(x) -> Cow(x) -> NeedsSquirrel(x))\nTEXT: The squirrel is not round.\nFOL: not all x. (Squirrel(x) -> Round(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the squirrel.\nFOL: all x. (Cow(x) -> ChasesSquirrel(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\nTEXT: The cow is young.\nFOL: all x. (Cow(x) -> Young(x))\nTEXT: The cow needs the squirrel.\nFOL: all x. (Cow(x) -> NeedsSquirrel(x))\nTEXT: The cow sees the squirrel.\nFOL: all x. (Cow(x) -> SeesSquirrel(x))\nTEXT: The squirrel chases the cow.\nFOL: all x. (Squirrel(x) -> ChasesCow(x))\nTEXT: The squirrel is young.\nFOL: all x. (Squirrel(x) -> Young(x))\nTEXT: The squirrel needs the cow.\nFOL: all x. (Squirrel(x) -> NeedsCow(x))\nTEXT: The squirrel sees the cow.\nFOL: all x. (Squirrel(x) -> SeesCow(x))\nTEXT: If the cow needs the squirrel and the squirrel sees the cow then the squirrel is big.\nFOL: all x y. (Cow(x) -> NeedsSquirrel(x) & Squirrel(x) -> SeesCow(x) -> Big(x))\nTEXT: If someone is big then they chase the squirrel.\nFOL: all x. (Big(x) -> ChasesSquirrel(x))\nTEXT: If the cow needs the squirrel and the cow is big then the cow is young.\nFOL: all x y. (Cow(x) -> NeedsSquirrel(x) & Cow(x) -> Big(x) -> Young(x))\nTEXT: If someone sees the squirrel and they are blue then the squirrel needs the cow.\nFOL: all x y. (Someone(x) -> SeesSquirrel(x) & Squirrel(x) -> NeedsCow(x))\nTEXT: If someone chases the squirrel then they are cold.\nFOL: all x. (Someone(x) -> ChasesSquirrel(x) & ChasesSquirrel(x) -> Cold(x))\nTEXT: If the squirrel needs the cow and the squirrel sees the cow then the cow needs the squirrel.\nFOL: all x y. (Squirrel(x) -> NeedsCow(x) & Squirrel(x) -> SeesCow(x) -> NeedsSquirrel(x))\nTEXT: The squirrel is not round.\nFOL: not all x. (Squirrel(x) -> Round(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the squirrel.\nFOL: all x. (Cow(x) -> ChasesSquirrel(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\nTEXT: The cow is young.\nFOL: all x. (Cow(x) -> Young(x))\nTEXT: The cow needs the squirrel.\nFOL: all x. (Cow(x) -> NeedsSquirrel(x))\nTEXT: The cow sees the squirrel.\nFOL: all x. (Cow(x) -> SeesSquirrel(x))\nTEXT: The squirrel chases the cow.\nFOL: all x. (Squirrel(x) -> ChasesCow(x))\nTEXT: The squirrel is young.\nFOL: all x. (Squirrel(x) -> Young(x))\nTEXT: The squirrel needs the cow.\nFOL: all x. (Squirrel(x) -> NeedsCow(x))\nTEXT: The squirrel sees the cow.\nFOL: all x. (Squirrel(x) -> SeesCow(x))\nTEXT: If the cow needs the squirrel and the squirrel sees the cow then the squirrel is big.\nFOL: all x y. (Cow(x) -> NeedsSquirrel(x) & Squirrel(x) -> SeesCow(x) -> Big(x))\nTEXT: If someone is big then they chase the squirrel.\nFOL: all x. (Big(x) -> ChasesSquirrel(x))\nTEXT: If the cow needs the squirrel and the cow is big then the cow is young.\nFOL: all x y. (Cow(x) -> NeedsSquirrel(x) & Cow(x) -> Big(x) -> Young(x))\nTEXT: If someone sees the squirrel and they are blue then the squirrel needs the cow.\nFOL: all x y. (Someone(x) -> SeesSquirrel(x) & Squirrel(x) -> NeedsCow(x))\nTEXT: If someone chases the squirrel then they are cold.\nFOL: all x. (Someone(x) -> ChasesSquirrel(x) & ChasesSquirrel(x) -> Cold(x))\nTEXT: If the squirrel needs the cow and the squirrel sees the cow then the cow needs the squirrel.\nFOL: all x y. (Squirrel(x) -> NeedsCow(x) & Squirrel(x) -> SeesCow(x) -> NeedsCow(x))\nTEXT: The squirrel is not round.\nFOL: not all x. (Squirrel(x) -> Round(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 30,
  "responses": [
   "<EVALUATE>\nTEXT: Alan is a big fellow, often blue and sad, but he is nice.\nFOL: all x. (Fellow(x) & Blue(x) & Sad(x) & Nice(x))\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: all x. (Young(x) & Kind(x) & AlwaysFeelingBlue(x))\nTEXT: Eric is a really nice guy with a big round body, usually wearing red.\nFOL: all x. (Nice(x) & Big(x) & Round(x) & Red(x))\nTEXT: Fred may be round, but he is also kind.\nFOL: all x. (Round(x) & Kind(x))\nTEXT: Young, red people are usually quite blue too.\nFOL: all x. (Young(x) & Red(x) & QuiteBlue(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Red(x) & Big(x) & Young(x))\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: all x. (Blue(x) & Red(x) & RoughSkin(x))\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: all x. (Red(x) & Green(x))\nTEXT: A kind person who looks blue because he is is cold is usually big in stature.\nFOL: all x. (Kind(x) & Blue(x) & Cold(x) & Big(x) & Stature(x))\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: all x. (Green(x) & Blue(x) & Red(x) & Round(x))\nTEXT: When a person is blue, rough and kind then it means they also are cold.\nFOL: all x. (Blue(x) & Rough(x) & Kind(x) & Cold(x))\nTEXT: Eric is not young.\nFOL: -Young(eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a big fellow, often blue and sad, but he is nice.\nFOL: all x. (Fellow(x) & Blue(x) & Sad(x) & Nice(x))\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: all x. (Young(x) & Kind(x) & -Blue(x))\nTEXT: Eric is a really nice guy with a big round body, usually wearing red.\nFOL: all x. (Nice(x) & Big(x) & Round(x) & Red(x))\nTEXT: Fred may be round, but he is also kind.\nFOL: all x. (Round(x) & -Big(x) & Kind(x))\nTEXT: Young, red people are usually quite blue too.\nFOL: all x. (Young(x) & Red(x) & -Blue(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Red(x) & Big(x) & -Young(x))\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: all x. (Blue(x) & Red(x) & Rough(x))\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: all x. (Red(x) & -Green(x))\nTEXT: A kind person who looks blue because he is is cold is usually big in stature.\nFOL: all x. (Kind(x) & Blue(x) & -Cold(x) & Big(x))\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: all x. (Green(x) & Blue(x) & Red(x) & Round(x))\nTEXT: When a person is blue, rough and kind then it means they also are cold.\nFOL: all x. (Blue(x) & Rough(x) & Kind(x) & -Cold(x))\nTEXT: Eric is not young.\nFOL: -Young(eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a big fellow, often blue and sad, but he is nice.\nFOL: all x. (Fellow(x) & Blue(x) & Sad(x) & Nice(x))\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: all x. (Young(x) & Kind(x) & AlwaysFeelingBlue(x))\nTEXT: Eric is a really nice guy with a big round body, usually wearing red.\nFOL: all x. (Nice(x) & Round(x) & Red(x))\nTEXT: Fred may be round, but he is also kind.\nFOL: all x. (Round(x) & Kind(x))\nTEXT: Young, red people are usually quite blue too.\nFOL: all x. (Young(x) & Red(x) & QuiteBlue(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Red(x) & Round(x) & Young(x))\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: all x. (Blue(x) & Red(x) & RoughSkin(x))\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: all x. (Red(x) & Green(x))\nTEXT: A kind person who looks blue because he is is cold is usually big in stature.\nFOL: all x. (Kind(x) & Blue(x) & Cold(x) & Big(x) & Stature(x))\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: all x. (Green(x) & Blue(x) & Red(x) & Round(x))\nTEXT: When a person is blue, rough and kind then it means they also are cold.\nFOL: all x. (Blue(x) & Rough(x) & Kind(x) & Cold(x))\nTEXT: Eric is not young.\nFOL: -Young(eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a big fellow, often blue and sad, but he is nice.\nFOL: all x. (Fellow(x) & Blue(x) & Sad(x) & Nice(x))\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: all x. (Young(x) & Kind(x) & AlwaysFeelingBlue(x))\nTEXT: Eric is a really nice guy with a big round body, usually wearing red.\nFOL: all x. (Nice(x) & Big(x) & Round(x) & Red(x))\nTEXT: Fred may be round, but he is also kind.\nFOL: all x. (Round(x) & Kind(x))\nTEXT: Young, red people are usually quite blue too.\nFOL: all x. (Young(x) & Red(x) & QuiteBlue(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Red(x) & Big(x) & Young(x))\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: all x. (Blue(x) & Red(x) & RoughSkin(x))\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: all x. (Red(x) & Green(x))\nTEXT: A kind person who looks blue because he is is cold is usually big in stature.\nFOL: all x. (Kind(x) & Blue(x) & Cold(x) & Big(x) & Stature(x))\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: all x. (Green(x) & Blue(x) & Red(x) & Round(x))\nTEXT: When a person is blue, rough and kind then it means they also are cold.\nFOL: all x. (Blue(x) & Rough(x) & Kind(x) & Cold(x))\nTEXT: Eric is not young.\nFOL: not Young(eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a big fellow, often blue and sad, but he is nice.\nFOL: all x. (Fellow(x) & Blue(x) & Sad(x) & Nice(x))\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: all x. (Young(x) & Kind(x) & AlwaysFeelingBlue(x))\nTEXT: Eric is a really nice guy with a big round body, usually wearing red.\nFOL: all x. (Nice(x) & Big(x) & Round(x) & Red(x))\nTEXT: Fred may be round, but he is also kind.\nFOL: all x. (Round(x) & Kind(x))\nTEXT: Young, red people are usually quite blue too.\nFOL: all x. (Young(x) & Red(x) & QuiteBlue(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Red(x) & Big(x) & Young(x))\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: all x. (Blue(x) & Red(x) & RoughSkin(x))\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: all x. (Red(x) & Green(x))\nTEXT: A kind person who looks blue because he is is cold is usually big in stature.\nFOL: all x. (Kind(x) & Blue(x) & Cold(x) & Big(x) & Stature(x))\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: all x. (Green(x) & Blue(x) & Red(x) & Round(x))\nTEXT: When a person is blue, rough and kind then it means they also are cold.\nFOL: all x. (Blue(x) & Rough(x) & Kind(x) & Cold(x))\nTEXT: Eric is not young.\nFOL: -Young(eric)"
  ]
 },
 {
  "index": 31,
  "responses": [
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: all x. (Cat(x) -> ChasesCow(x))\nTEXT: The cat chases the rabbit.\nFOL: all x. (Cat(x) -> ChasesRabbit(x))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat needs the cow.\nFOL: all x. (Cat(x) -> NeedsCow(x))\nTEXT: The cat visits the rabbit.\nFOL: all x. (Cat(x) -> VisitsRabbit(x))\nTEXT: The cow is nice.\nFOL: all x. (Cow(x) -> Nice(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\nTEXT: The cow needs the cat.\nFOL: all x. (Cow(x) -> NeedsCat(x))\nTEXT: The cow visits the rabbit.\nFOL: all x. (Cow(x) -> VisitsRabbit(x))\nTEXT: The mouse chases the cow.\nFOL: all x. (Mouse(x) -> ChasesCow(x))\nTEXT: The mouse chases the rabbit.\nFOL: all x. (Mouse(x) -> ChasesRabbit(x))\nTEXT: The mouse is kind.\nFOL: all x. (Mouse(x) -> Kind(x))\nTEXT: The mouse needs the rabbit.\nFOL: all x. (Mouse(x) -> NeedsRabbit(x))\nTEXT: The rabbit chases the cow.\nFOL: all x. (Rabbit(x) -> ChasesCow(x))\nTEXT: The rabbit needs the cow.\nFOL: all x. (Rabbit(x) -> NeedsCow(x))\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: all x. (Something(x) -> VisitsCow(x) & Nice(x) -> ChasesMouse(x))\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: all x. (Something(x) -> Nice(x) & ChasesCow(x) -> NeedsCow(x))\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: all x. (Rabbit(x) -> Red(x) & VisitsMouse(x) -> Kind(x))\nTEXT: If something chases the cow then it visits the mouse.\nFOL: all x. (Something(x) -> ChasesCow(x) & VisitsMouse(x))\nTEXT: If something chases the cow then it visits the cat.\nFOL: all x. (Something(x) -> ChasesCow(x) & VisitsCat(x))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: all x. (Mouse(x) -> NeedsRabbit(x) & VisitsRabbit(x) -> Red(x))\nTEXT: The cow chases the cow.\nFOL: all x. (Cow(x) -> ChasesCow(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: all x. (Cat(x) -> ChasesCow(x))\nTEXT: The cat chases the rabbit.\nFOL: all x. (Cat(x) -> ChasesRabbit(x))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat needs the cow.\nFOL: all x. (Cat(x) -> NeedsCow(x))\nTEXT: The cat visits the rabbit.\nFOL: all x. (Cat(x) -> VisitsRabbit(x))\nTEXT: The cow is nice.\nFOL: all x. (Cow(x) -> Nice(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\nTEXT: The cow needs the cat.\nFOL: all x. (Cow(x) -> NeedsCat(x))\nTEXT: The cow visits the rabbit.\nFOL: all x. (Cow(x) -> VisitsRabbit(x))\nTEXT: The mouse chases the cow.\nFOL: all x. (Mouse(x) -> ChasesCow(x))\nTEXT: The mouse chases the rabbit.\nFOL: all x. (Mouse(x) -> ChasesRabbit(x))\nTEXT: The mouse is kind.\nFOL: all x. (Mouse(x) -> Kind(x))\nTEXT: The mouse needs the rabbit.\nFOL: all x. (Mouse(x) -> NeedsRabbit(x))\nTEXT: The rabbit chases the cow.\nFOL: all x. (Rabbit(x) -> ChasesCow(x))\nTEXT: The rabbit needs the cow.\nFOL: all x. (Rabbit(x) -> NeedsCow(x))\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: all x. (Something(x) -> VisitsCow(x) & Nice(x) -> ChasesMouse(x))\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: all x. (Something(x) -> Nice(x) & ChasesCow(x) -> NeedsCow(x))\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: all x. (Rabbit(x) -> Red(x) & VisitsMouse(x) -> Kind(x))\nTEXT: If something chases the cow then it visits the mouse.\nFOL: all x. (Something(x) -> ChasesCow(x) & VisitsMouse(x))\nTEXT: If something chases the cow then it visits the cat.\nFOL: all x. (Something(x) -> ChasesCow(x) & VisitsCat(x))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: all x. (Mouse(x) -> NeedsRabbit(x) & Rabbit(x) -> Red(x))\nTEXT: The cow chases the cow.\nFOL: all x. (Cow(x) -> ChasesCow(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: all x. (Cat(x) -> ChasesCow(x))\nTEXT: The cat chases the rabbit.\nFOL: all x. (Cat(x) -> ChasesRabbit(x))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat needs the cow.\nFOL: all x. (Cat(x) -> NeedsCow(x))\nTEXT: The cat visits the rabbit.\nFOL: all x. (Cat(x) -> VisitsRabbit(x))\nTEXT: The cow is nice.\nFOL: all x. (Cow(x) -> Nice(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\nTEXT: The cow needs the cat.\nFOL: all x. (Cow(x) -> NeedsCat(x))\nTEXT: The cow visits the rabbit.\nFOL: all x. (Cow(x) -> VisitsRabbit(x))\nTEXT: The mouse chases the cow.\nFOL: all x. (Mouse(x) -> ChasesCow(x))\nTEXT: The mouse chases the rabbit.\nFOL: all x. (Mouse(x) -> ChasesRabbit(x))\nTEXT: The mouse is kind.\nFOL: all x. (Mouse(x) -> Kind(x))\nTEXT: The mouse needs the rabbit.\nFOL: all x. (Mouse(x) -> NeedsRabbit(x))\nTEXT: The rabbit chases the cow.\nFOL: all x. (Rabbit(x) -> ChasesCow(x))\nTEXT: The rabbit needs the cow.\nFOL: all x. (Rabbit(x) -> NeedsCow(x))\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: all x. (Something(x) -> VisitsCow(x) & Nice(x) -> ChasesMouse(x))\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: all x. (Something(x) -> Nice(x) & ChasesCow(x) -> NeedsCow(x))\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: all x. (Rabbit(x) -> Red(x) & VisitsMouse(x) -> Kind(x))\nTEXT: If something chases the cow then it visits the mouse.\nFOL: all x. (Something(x) -> ChasesCow(x) -> VisitsMouse(x))\nTEXT: If something chases the cow then it visits the cat.\nFOL: all x. (Something(x) -> ChasesCow(x) -> VisitsCat(x))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: all x. (Mouse(x) -> NeedsRabbit(x) & Rabbit(x) -> VisitsMouse(x) -> Red(x))\nTEXT: The cow chases the cow.\nFOL: all x. (Cow(x) -> ChasesCow(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: all x. (Cat(x) -> ChasesCow(x))\nTEXT: The cat chases the rabbit.\nFOL: all x. (Cat(x) -> ChasesRabbit(x))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat needs the cow.\nFOL: all x. (Cat(x) -> NeedsCow(x))\nTEXT: The cat visits the rabbit.\nFOL: all x. (Cat(x) -> VisitsRabbit(x))\nTEXT: The cow is nice.\nFOL: all x. (Cow(x) -> Nice(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\nTEXT: The cow needs the cat.\nFOL: all x. (Cow(x) -> NeedsCat(x))\nTEXT: The cow visits the rabbit.\nFOL: all x. (Cow(x) -> VisitsRabbit(x))\nTEXT: The mouse chases the cow.\nFOL: all x. (Mouse(x) -> ChasesCow(x))\nTEXT: The mouse chases the rabbit.\nFOL: all x. (Mouse(x) -> ChasesRabbit(x))\nTEXT: The mouse is kind.\nFOL: all x. (Mouse(x) -> Kind(x))\nTEXT: The mouse needs the rabbit.\nFOL: all x. (Mouse(x) -> NeedsRabbit(x))\nTEXT: The rabbit chases the cow.\nFOL: all x. (Rabbit(x) -> ChasesCow(x))\nTEXT: The rabbit needs the cow.\nFOL: all x. (Rabbit(x) -> NeedsCow(x))\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: all x. (Something(x) -> VisitsCow(x) & Nice(x) -> ChasesMouse(x))\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: all x. (Something(x) -> Nice(x) & ChasesCow(x) -> NeedsCow(x))\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: all x. (Rabbit(x) -> Red(x) & VisitsMouse(x) -> Kind(x))\nTEXT: If something chases the cow then it visits the mouse.\nFOL: all x. (Something(x) -> ChasesCow(x) & VisitsMouse(x))\nTEXT: If something chases the cow then it visits the cat.\nFOL: all x. (Something(x) -> ChasesCow(x) & VisitsCat(x))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: all x. (Mouse(x) -> NeedsRabbit(x) & VisitsRabbit(x) -> Red(x))\nTEXT: The cow chases the cow.\nFOL: -ChasesCow(the cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: all x. (Cat(x) -> ChasesCow(x))\nTEXT: The cat chases the rabbit.\nFOL: all x. (Cat(x) -> ChasesRabbit(x))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat needs the cow.\nFOL: all x. (Cat(x) -> NeedsCow(x))\nTEXT: The cat visits the rabbit.\nFOL: all x. (Cat(x) -> VisitsRabbit(x))\nTEXT: The cow is nice.\nFOL: all x. (Cow(x) -> Nice(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\nTEXT: The cow needs the cat.\nFOL: all x. (Cow(x) -> NeedsCat(x))\nTEXT: The cow visits the rabbit.\nFOL: all x. (Cow(x) -> VisitsRabbit(x))\nTEXT: The mouse chases the cow.\nFOL: all x. (Mouse(x) -> ChasesCow(x))\nTEXT: The mouse chases the rabbit.\nFOL: all x. (Mouse(x) -> ChasesRabbit(x))\nTEXT: The mouse is kind.\nFOL: all x. (Mouse(x) -> Kind(x))\nTEXT: The mouse needs the rabbit.\nFOL: all x. (Mouse(x) -> NeedsRabbit(x))\nTEXT: The rabbit chases the cow.\nFOL: all x. (Rabbit(x) -> ChasesCow(x))\nTEXT: The rabbit needs the cow.\nFOL: all x. (Rabbit(x) -> NeedsCow(x))\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: all x. (Something(x) -> VisitsCow(x) & Nice(x) -> ChasesMouse(x))\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: all x. (Something(x) -> Nice(x) & ChasesCow(x) -> NeedsCow(x))\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: all x. (Rabbit(x) -> Red(x) & VisitsMouse(x) -> Kind(x))\nTEXT: If something chases the cow then it visits the mouse.\nFOL: all x. (Something(x) -> ChasesCow(x) -> VisitsMouse(x))\nTEXT: If something chases the cow then it visits the cat.\nFOL: all x. (Something(x) -> ChasesCow(x) -> VisitsCat(x))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: all x. (Mouse(x) -> NeedsRabbit(x) & Rabbit(x) -> VisitsMouse(x) -> Red(x))\nTEXT: The cow chases the cow.\nFOL: all x. (Cat(x) -> ChasesCow(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 32,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Dave(x) -> Kind(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Gary is rough.\nFOL: all x. (Gary(x) -> Rough(x))\nTEXT: All nice things are big.\nFOL: all x. (Nice(x) -> Big(x))\nTEXT: If Gary is nice then Gary is rough.\nFOL: all x y. (Nice(x) & Rough(y) -> Rough(x, y))\nTEXT: Red things are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If something is nice and not red then it is cold.\nFOL: all x y. (Nice(x) & NotRed(y) -> Cold(x, y))\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If Gary is not round and Gary is not big then Gary is cold.\nFOL: all x y. (NotRound(x) & NotBig(y) -> Cold(x, y))\nTEXT: Dave is rough.\nFOL: all x. (Dave(x) -> Rough(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Dave(x) -> Kind(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Gary is rough.\nFOL: all x. (Gary(x) -> Rough(x))\nTEXT: All nice things are big.\nFOL: all x. (Nice(x) -> Big(x))\nTEXT: If Gary is nice then Gary is rough.\nFOL: all x y. (Nice(x) & Rough(y) -> Rough(x, y))\nTEXT: Red things are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If something is nice and not red then it is cold.\nFOL: all x y. (Nice(x) & NotRed(x) -> Cold(x, y))\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If Gary is not round and Gary is not big then Gary is cold.\nFOL: all x y. (NotRound(x) & NotBig(x) -> Cold(x, y))\nTEXT: Dave is rough.\nFOL: all x. (Dave(x) -> Rough(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Dave(x) -> Kind(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Gary is rough.\nFOL: all x. (Gary(x) -> Rough(x))\nTEXT: All nice things are big.\nFOL: all x. (Nice(x) -> Big(x))\nTEXT: If Gary is nice then Gary is rough.\nFOL: all x y. (Nice(x) & Rough(y) -> Rough(x, y))\nTEXT: Red things are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If something is nice and not red then it is cold.\nFOL: all x y. (Nice(x) & NotRed(y) -> Cold(x, y))\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If Gary is not round and Gary is not big then Gary is cold.\nFOL: all x y. (NotRound(x) & NotBig(y) -> Cold(x, y))\nTEXT: Dave is rough.\nFOL: all x. (Dave(x) -> Rough(x))",
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Dave(x) -> Kind(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Gary is rough.\nFOL: all x. (Gary(x) -> Rough(x))\nTEXT: All nice things are big.\nFOL: all x. (Nice(x) -> Big(x))\nTEXT: If Gary is nice then Gary is rough.\nFOL: all x y. (Nice(x) & Rough(y) -> Rough(x, y))\nTEXT: Red things are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If something is nice and not red then it is cold.\nFOL: all x y. (Nice(x) & NotRed(x) -> Cold(x, y))\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If Gary is not round and Gary is not big then Gary is cold.\nFOL: all x y. (NotRound(x) & NotBig(x) -> Cold(x, y))\nTEXT: Dave is rough.\nFOL: all x. (Dave(x) -> Rough(x))",
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Dave(x) -> Kind(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Gary is rough.\nFOL: all x. (Gary(x) -> Rough(x))\nTEXT: All nice things are big.\nFOL: all x. (Nice(x) -> Big(x))\nTEXT: If Gary is nice then Gary is rough.\nFOL: all x y. (Nice(x) & Rough(y) -> Rough(x, y))\nTEXT: Red things are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If something is nice and not red then it is cold.\nFOL: all x y. (Nice(x) & NotRed(y) -> Cold(x, y))\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If Gary is not round and Gary is not big then Gary is cold.\nFOL: all x y. (NotRound(x) & NotBig(y) & -Big(x, y) -> Cold(x, y))\nTEXT: Dave is rough.\nFOL: all x. (Dave(x) -> Rough(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 33,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) -> Kind(x))\nTEXT: He is also very cold and blue.\nFOL: all x. (He(x) -> (Cold(x) & Blue(x)))\nTEXT: Gary who is young and nice is also quite big and feels green.\nFOL: all x. (Gary(x) -> (Young(x) & Nice(x) & Big(x) & FeelGreen(x)))\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: all x. (Harry(x) -> (Young(x) & Cold(x)))\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> Nice(x))\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: all x. (Red(x) & Round(x) & Kind(x) -> Cold(x))\nTEXT: Someone being nice, even when they are cold without a doubt means that they are round about the middle.\nFOL: all x. (Nice(x) & Cold(x) -> (Round(x) & Middle(x)))\nTEXT: Nice people with blue and rough skin are very young and cannot be trusted with responsibility.\nFOL: all x. (Nice(x) & Blue(x) & RoughSkin(x) & Young(x) & -Trustworthy(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Kind(x) -> Red(x))\nTEXT: A young person that is blue and green is also assumed to be nice.\nFOL: all x. (Blue(x) & Green(x) & Nice(x) -> (Young(x) & Nice(x)))\nTEXT: People who are young are also blue.\nFOL: all x. (Young(x) & Blue(x) -> Blue(x))\nTEXT: Alan is round.\nFOL: all x. (Alan(x) -> Round(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) -> Kind(x))\nTEXT: He is also very cold and blue.\nFOL: all x. (He(x) -> (Cold(x) & Blue(x)))\nTEXT: Gary who is young and nice is also quite big and feels green.\nFOL: all x. (Gary(x) -> (Young(x) & Nice(x) & Big(x) & FeelGreen(x)))\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: all x. (Harry(x) -> (Young(x) & Cold(x)))\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> Nice(x))\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: all x. (Red(x) & Round(x) & Kind(x) -> Cold(x))\nTEXT: Someone being nice, even when they are cold without a doubt means that they are round about the middle.\nFOL: all x. (Nice(x) & Cold(x) -> (Round(x) & Middle(x)))\nTEXT: Nice people with blue and rough skin are very young and cannot be trusted with responsibility.\nFOL: all x. (Nice(x) & Blue(x) & RoughSkin(x) & Young(x) & -Trustworthy(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Kind(x) -> Red(x))\nTEXT: A young person that is blue and green is also assumed to be nice.\nFOL: all x. (Blue(x) & Green(x) & Nice(x) -> (Young(x) & Nice(x)))\nTEXT: People who are young are also blue.\nFOL: all x. (Young(x) -> Blue(x))\nTEXT: Alan is round.\nFOL: all x. (Alan(x) -> Round(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) -> Kind(x))\nTEXT: He is also very cold and blue.\nFOL: all x. (He(x) -> (Cold(x) & Blue(x)))\nTEXT: Gary who is young and nice is also quite big and feels green.\nFOL: all x. (Gary(x) -> (Young(x) & Nice(x) & Big(x) & FeelGreen(x)))\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: all x. (Harry(x) -> (Young(x) & Cold(x)))\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> Nice(x))\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: all x. (Red(x) & Round(x) & Kind(x) -> Cold(x))\nTEXT: Someone being nice, even when they are cold without a doubt means that they are round about the middle.\nFOL: all x. (Nice(x) & Cold(x) -> (Round(x) & Middle(x)))\nTEXT: Nice people with blue and rough skin are very young and cannot be trusted with responsibility.\nFOL: all x. (Nice(x) & Blue(x) & RoughSkin(x) & Young(x) & -Trustworthy(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Kind(x) -> Red(x))\nTEXT: A young person that is blue and green is also assumed to be nice.\nFOL: all x. (Young(x) & Blue(x) & Green(x) -> Nice(x))\nTEXT: People who are young are also blue.\nFOL: all x. (Young(x) & Blue(x) -> Blue(x))\nTEXT: Alan is round.\nFOL: all x. (Alan(x) -> Round(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) -> Kind(x))\nTEXT: He is also very cold and blue.\nFOL: all x. (He(x) -> (Cold(x) & Blue(x)))\nTEXT: Gary who is young and nice is also quite big and feels green.\nFOL: all x. (Gary(x) -> (Young(x) & Nice(x) & Big(x) & FeelGreen(x)))\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: all x. (Harry(x) -> (Young(x) & Cold(x)))\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> Nice(x))\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: all x. (Red(x) & Round(x) & Kind(x) -> (Cold(x) & -Manner(x)))\nTEXT: Someone being nice, even when they are cold without a doubt means that they are round about the middle.\nFOL: all x. (Nice(x) & (Cold(x) & -Manner(x))) -> (Round(x) & -Middle(x))\nTEXT: Nice people with blue and rough skin are very young and cannot be trusted with responsibility.\nFOL: all x. (Blue(x) & RoughSkin(x) & Young(x) & -Trustworthy(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Kind(x) -> Red(x))\nTEXT: A young person that is blue and green is also assumed to be nice.\nFOL: all x. (Blue(x) & Green(x) & Nice(x))\nTEXT: People who are young are also blue.\nFOL: all x. (Young(x) -> Blue(x))\nTEXT: Alan is round.\nFOL: all x. (Alan(x) -> Round(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) -> Kind(x))\nTEXT: He is also very cold and blue.\nFOL: all x. (He(x) -> (Cold(x) & Blue(x)))\nTEXT: Gary who is young and nice is also quite big and feels green.\nFOL: all x. (Gary(x) -> (Young(x) & Nice(x) & Big(x) & FeelGreen(x)))\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: all x. (Harry(x) -> (Young(x) & Cold(x)))\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> Nice(x))\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: all x. (Red(x) & Round(x) & Kind(x) -> Cold(x))\nTEXT: Someone being nice, even when they are cold without a doubt means that they are round about the middle.\nFOL: all x. (Nice(x) & Cold(x) -> (Round(x) & Middle(x)))\nTEXT: Nice people with blue and rough skin are very young and cannot be trusted with responsibility.\nFOL: all x. (Nice(x) & Blue(x) & RoughSkin(x) & Young(x) & -Trustworthy(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Kind(x) -> Red(x))\nTEXT: A young person that is blue and green is also assumed to be nice.\nFOL: all x. (Blue(x) & Green(x) & Nice(x) -> (Young(x) & Nice(x)))\nTEXT: People who are young are also blue.\nFOL: all x. (Young(x) & Blue(x) -> Blue(x))\nTEXT: Alan is round.\nFOL: all x. (Alan(x) -> (Round(x)))\n</EVALUATE>"
  ]
 },
 {
  "index": 34,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> -Cold(x))\nTEXT: The bald eagle is green.\nFOL: all x. (BaldEagle(x) -> -Green(x))\nTEXT: The bald eagle is kind.\nFOL: all x. (BaldEagle(x) -> -Kind(x))\nTEXT: The bald eagle is rough.\nFOL: all x. (BaldEagle(x) -> -Rough(x))\nTEXT: The bald eagle is young.\nFOL: all x. (BaldEagle(x) -> -Young(x))\nTEXT: The bald eagle needs the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> -Needs(x, dog))\nTEXT: The bald eagle sees the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> -See(x, dog))\nTEXT: The bald eagle visits the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> -Visit(x, dog))\nTEXT: The dog is cold.\nFOL: all x. (Dog(x) -> -Cold(x))\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> -Green(x))\nTEXT: The dog is kind.\nFOL: all x. (Dog(x) -> -Kind(x))\nTEXT: The dog is rough.\nFOL: all x. (Dog(x) -> -Rough(x))\nTEXT: The dog is young.\nFOL: all x. (Dog(x) -> -Young(x))\nTEXT: The dog needs the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> -Needs(x, baldEagle(x)))\nTEXT: The dog sees the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> -See(x, baldEagle(x)))\nTEXT: The dog visits the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> -Visit(x, baldEagle(x)))\nTEXT: If something is kind then it sees the bald eagle.\nFOL: if all x. (Kind(x) -> -See(x, baldEagle(x)))\nTEXT: If something visits the bald eagle and the bald eagle sees the dog then the bald eagle visits the dog.\nFOL: if all x. (Visit(x, baldEagle(x)) & baldEagle(x) -> -Visit(x, dog(x)))\nTEXT: If something visits the bald eagle and the bald eagle is green then the bald eagle is rough.\nFOL: if all x. (Visit(x, baldEagle(x)) & baldEagle(x) -> -Rough(x))\nTEXT: The dog is cold.\nFOL: all x. (Dog(x) -> -Cold(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> -Cold(x))\nTEXT: The bald eagle is green.\nFOL: all x. (BaldEagle(x) -> -Green(x))\nTEXT: The bald eagle is kind.\nFOL: all x. (BaldEagle(x) -> -Kind(x))\nTEXT: The bald eagle is rough.\nFOL: all x. (BaldEagle(x) -> -Rough(x))\nTEXT: The bald eagle is young.\nFOL: all x. (BaldEagle(x) -> -Young(x))\nTEXT: The bald eagle needs the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> -Needs(x, dog))\nTEXT: The bald eagle sees the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> -See(x, dog))\nTEXT: The bald eagle visits the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> -Visit(x, dog))\nTEXT: The dog is cold.\nFOL: all x. (Dog(x) -> -Cold(x))\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> -Green(x))\nTEXT: The dog is kind.\nFOL: all x. (Dog(x) -> -Kind(x))\nTEXT: The dog is rough.\nFOL: all x. (Dog(x) -> -Rough(x))\nTEXT: The dog is young.\nFOL: all x. (Dog(x) -> -Young(x))\nTEXT: The dog needs the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> -Needs(x, baldEagle(x)))\nTEXT: The dog sees the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> -See(x, baldEagle(x)))\nTEXT: The dog visits the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> -Visit(x, baldEagle(x)))\nTEXT: If something is kind then it sees the bald eagle.\nFOL: if all x. (Kind(x) -> -See(x, baldEagle(x)))\nTEXT: If something visits the bald eagle and the bald eagle sees the dog then the bald eagle visits the dog.\nFOL: if all x. (Visit(x, baldEagle(x)) & baldEagle(x) -> -Visit(x, dog(x)))\nTEXT: If something visits the bald eagle and the bald eagle is green then the bald eagle is rough.\nFOL: if all x. (Visit(x, baldEagle(x)) & baldEagle(x) -> -Rough(x))\nTEXT: The dog is cold.\nFOL: -Cold(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> -Cold(x))\nTEXT: The bald eagle is green.\nFOL: all x. (BaldEagle(x) -> -Green(x))\nTEXT: The bald eagle is kind.\nFOL: all x. (BaldEagle(x) -> -Kind(x))\nTEXT: The bald eagle is rough.\nFOL: all x. (BaldEagle(x) -> -Rough(x))\nTEXT: The bald eagle is young.\nFOL: all x. (BaldEagle(x) -> -Young(x))\nTEXT: The bald eagle needs the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> -Needs(x, dog))\nTEXT: The bald eagle sees the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> -See(x, dog))\nTEXT: The bald eagle visits the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> -Visit(x, dog))\nTEXT: The dog is cold.\nFOL: all x. (Dog(x) -> -Cold(x))\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> -Green(x))\nTEXT: The dog is kind.\nFOL: all x. (Dog(x) -> -Kind(x))\nTEXT: The dog is rough.\nFOL: all x. (Dog(x) -> -Rough(x))\nTEXT: The dog is young.\nFOL: all x. (Dog(x) -> -Young(x))\nTEXT: The dog needs the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> -Needs(x, baldEagle(x)))\nTEXT: The dog sees the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> -See(x, baldEagle(x)))\nTEXT: The dog visits the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> -Visit(x, baldEagle(x)))\nTEXT: If something is kind then it sees the bald eagle.\nFOL: if all x. (Kind(x) -> -See(x, baldEagle(x)))\nTEXT: If something visits the bald eagle and the bald eagle sees the dog then the bald eagle visits the dog.\nFOL: if all x. (Visit(x, baldEagle(x)) & -See(x, baldEagle(x)) & baldEagle(x) -> -Visit(x, dog(x)))\nTEXT: If something visits the bald eagle and the bald eagle is green then the bald eagle is rough.\nFOL: if all x. (Visit(x, baldEagle(x)) & -See(x, baldEagle(x)) & baldEagle(x) -> -Rough(x))\nTEXT: The dog is cold.\nFOL: all x. (Dog(x) -> -Cold(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> -Cold(x))\nTEXT: The bald eagle is green.\nFOL: all x. (BaldEagle(x) -> -Green(x))\nTEXT: The bald eagle is kind.\nFOL: all x. (BaldEagle(x) -> -Kind(x))\nTEXT: The bald eagle is rough.\nFOL: all x. (BaldEagle(x) -> -Rough(x))\nTEXT: The bald eagle is young.\nFOL: all x. (BaldEagle(x) -> -Young(x))\nTEXT: The bald eagle needs the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> -Needs(x, dog))\nTEXT: The bald eagle sees the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> -See(x, dog))\nTEXT: The bald eagle visits the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> -Visit(x, dog))\nTEXT: The dog is cold.\nFOL: all x. (Dog(x) -> -Cold(x))\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> -Green(x))\nTEXT: The dog is kind.\nFOL: all x. (Dog(x) -> -Kind(x))\nTEXT: The dog is rough.\nFOL: all x. (Dog(x) -> -Rough(x))\nTEXT: The dog is young.\nFOL: all x. (Dog(x) -> -Young(x))\nTEXT: The dog needs the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> -Needs(x, baldEagle(x)))\nTEXT: The dog sees the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> -See(x, baldEagle(x)))\nTEXT: The dog visits the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> -Visit(x, baldEagle(x)))\nTEXT: If something is kind then it sees the bald eagle.\nFOL: if all x. (Kind(x) -> See(x, baldEagle(x)))\nTEXT: If something visits the bald eagle and the bald eagle sees the dog then the bald eagle visits the dog.\nFOL: if all x. (Visit(x, baldEagle(x)) & baldEagle(x) -> Visit(x, dog(x)))\nTEXT: If something visits the bald eagle and the bald eagle is green then the bald eagle is rough.\nFOL: if all x. (Visit(x, baldEagle(x)) & baldEagle(x) -> -Rough(x))\nTEXT: The dog is cold.\nFOL: all x. (Dog(x) -> -Cold(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> -Cold(x))\nTEXT: The bald eagle is green.\nFOL: all x. (BaldEagle(x) -> -Green(x))\nTEXT: The bald eagle is kind.\nFOL: all x. (BaldEagle(x) -> -Kind(x))\nTEXT: The bald eagle is rough.\nFOL: all x. (BaldEagle(x) -> -Rough(x))\nTEXT: The bald eagle is young.\nFOL: all x. (BaldEagle(x) -> -Young(x))\nTEXT: The bald eagle needs the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> -Needs(x, dog))\nTEXT: The bald eagle sees the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> -See(x, dog))\nTEXT: The bald eagle visits the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> -Visit(x, dog))\nTEXT: The dog is cold.\nFOL: all x. (Dog(x) -> -Cold(x))\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> -Green(x))\nTEXT: The dog is kind.\nFOL: all x. (Dog(x) -> -Kind(x))\nTEXT: The dog is rough.\nFOL: all x. (Dog(x) -> -Rough(x))\nTEXT: The dog is young.\nFOL: all x. (Dog(x) -> -Young(x))\nTEXT: The dog needs the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> -Needs(x, baldEagle(x)))\nTEXT: The dog sees the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> -See(x, baldEagle(x)))\nTEXT: The dog visits the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> -Visit(x, baldEagle(x)))\nTEXT: If something is kind then it sees the bald eagle.\nFOL: if all x. (Kind(x) -> -See(x, baldEagle(x)))\nTEXT: If something visits the bald eagle and the bald eagle sees the dog then the bald eagle visits the dog.\nFOL: if all x. (Visit(x, baldEagle(x)) & -See(x, baldEagle(x)) & baldEagle(x) -> -Visit(x, dog(x)))\nTEXT: If something visits the bald eagle and the bald eagle is green then the bald eagle is rough.\nFOL: if all x. (Visit(x, baldEagle(x)) & -See(x, baldEagle(x)) & baldEagle(x) -> -Rough(x))\nTEXT: The dog is cold.\nFOL: -Cold(dog)\n</EVALUATE>"
  ]
 },
 {
  "index": 35,
  "responses": [
   "<EVALUATE>\nTEXT: Charlie is white.\nFOL: all x. (Charlie(x) -> White(x))\nTEXT: Erin is white.\nFOL: all x. (Erin(x) -> White(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\nTEXT: If someone is round and not rough then they are big.\nFOL: all x y. (Round(x) & -Rough(x) -> Big(x))\nTEXT: If someone is round then they are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If someone is young and not nice then they are white.\nFOL: all x y. (Young(x) & -Nice(x) -> White(x))\nTEXT: If someone is big and not smart then they are white.\nFOL: all x y. (Big(x) & -Smart(x) -> White(x))\nTEXT: If Gary is nice and Gary is not rough then Gary is young.\nFOL: all x y. (Nice(x) & -Rough(x) -> Young(x))\nTEXT: Smart, young people are round.\nFOL: all x. (Smart(x) & Young(x) -> Round(x))\nTEXT: If Fiona is nice then Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\nTEXT: If Erin is round and Erin is nice then Erin is white.\nFOL: all x y. (Round(x) & Nice(x) -> White(x))\nTEXT: Fiona is big.\nFOL: Fiona(x) -> Big(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is white.\nFOL: all x. (Charlie(x) -> White(x))\nTEXT: Erin is white.\nFOL: all x. (Erin(x) -> White(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\nTEXT: If someone is round and not rough then they are big.\nFOL: all x y. (Round(x) & -Rough(x) -> Big(x))\nTEXT: If someone is round then they are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If someone is young and not nice then they are white.\nFOL: all x y. (Young(x) & -Nice(x) -> White(x))\nTEXT: If someone is big and not smart then they are white.\nFOL: all x y. (Big(x) & -Smart(x) -> White(x))\nTEXT: If Gary is nice and Gary is not rough then Gary is young.\nFOL: all x y. (Nice(x) & -Rough(x) -> Young(x))\nTEXT: Smart, young people are round.\nFOL: all x. (Smart(x) & Young(x) -> Round(x))\nTEXT: If Fiona is nice then Fiona is young.\nFOL: all x y. (Nice(x) -> Young(x))\nTEXT: If Erin is round and Erin is nice then Erin is white.\nFOL: all x y. (Round(x) & Nice(x) -> White(x))\nTEXT: Fiona is big.\nFOL: Fiona(x) -> Big(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is white.\nFOL: all x. (Charlie(x) -> White(x))\nTEXT: Erin is white.\nFOL: all x. (Erin(x) -> White(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\nTEXT: If someone is round and not rough then they are big.\nFOL: all x y. (Round(x) & -Rough(x) -> Big(x))\nTEXT: If someone is round then they are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If someone is young and not nice then they are white.\nFOL: all x y. (Young(x) & -Nice(x) -> White(x))\nTEXT: If someone is big and not smart then they are white.\nFOL: all x y. (Big(x) & -Smart(x) -> White(x))\nTEXT: If Gary is nice and Gary is not rough then Gary is young.\nFOL: all x y. (Nice(x) & -Rough(x) -> Young(x))\nTEXT: Smart, young people are round.\nFOL: all x. (Smart(x) & Young(x) -> Round(x))\nTEXT: If Fiona is nice then Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\nTEXT: If Erin is round and Erin is nice then Erin is white.\nFOL: all x y. (Round(x) & Nice(x) -> White(x))\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is white.\nFOL: all x. (Charlie(x) -> White(x))\nTEXT: Erin is white.\nFOL: all x. (Erin(x) -> White(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\nTEXT: If someone is round and not rough then they are big.\nFOL: all x y. (Round(x) & -Rough(x) -> Big(x))\nTEXT: If someone is round then they are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If someone is young and not nice then they are white.\nFOL: all x y. (Young(x) & -Nice(x) -> White(x))\nTEXT: If someone is big and not smart then they are white.\nFOL: all x y. (Big(x) & -Smart(x) -> White(x))\nTEXT: If Gary is nice and Gary is not rough then Gary is young.\nFOL: all x y. (Nice(x) & -Rough(x) -> Young(x))\nTEXT: Smart, young people are round.\nFOL: all x. (Smart(x) & Young(x) -> Round(x))\nTEXT: If Fiona is nice then Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\nTEXT: If Erin is round and Erin is nice then Erin is white.\nFOL: all x y. (Round(x) & Nice(x) -> White(x))\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))",
   "<EVALUATE>\nTEXT: Charlie is white.\nFOL: all x. (Charlie(x) -> White(x))\nTEXT: Erin is white.\nFOL: all x. (Erin(x) -> White(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\nTEXT: If someone is round and not rough then they are big.\nFOL: all x y. (Round(x) & -Rough(x) -> Big(x))\nTEXT: If someone is round then they are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If someone is young and not nice then they are white.\nFOL: all x y. (Young(x) & -Nice(x) -> White(x))\nTEXT: If someone is big and not smart then they are white.\nFOL: all x y. (Big(x) & -Smart(x) -> White(x))\nTEXT: If Gary is nice and Gary is not rough then Gary is young.\nFOL: all x y. (Nice(x) & Gary(x) & -Rough(x) -> Young(x))\nTEXT: Smart, young people are round.\nFOL: all x. (Smart(x) & Young(x) & Round(x))\nTEXT: If Fiona is nice then Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\nTEXT: If Erin is round and Erin is nice then Erin is white.\nFOL: all x y. (Round(x) & Nice(x) -> White(x))\nTEXT: Fiona is big.\nFOL: Fiona(x) -> Big(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 36,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL",
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL",
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n&EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n&EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n&EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n&EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n&EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n&EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n&EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n&EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n&EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n&EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n&EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n&EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n&EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL",
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) & Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is kind.\nFOL: all x. (Person(x) -> Kind(x))\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 37,
  "responses": [
   "<EVALUATE>\nTEXT: That guy Dave sure is nice.\nFOL: all x. (Dave(x) -> Nice(x))\nTEXT: Eric is a kind person and he is also often cold.\nFOL: all x. (Eric(x) -> Kind(x) & Cold(x))\nTEXT: Harry is shaped big and round like a balloon.\nFOL: all x. (Harry(x) -> Big(x) & Round(x))\nTEXT: His red color shows how kind he is.\nFOL: all x. (Red(x) -> Kind(x))\nTEXT: Cold people who are big hearted and kind are usually very round.\nFOL: all x. (Cold(x) & Big(x) & Kind(x) & Round(x))\nTEXT: A kind person who is down in the dumps and blue tends to have a rough side.\nFOL: all x. (Kind(x) & Down(x) & Blue(x) & Rough(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) & Little(x) & Green(x) & Some(x))\nTEXT: Young and rough people will most certainly be red.\nFOL: all x. (Young(x) & Rough(x) & Red(x))\nTEXT: A person that is red, rough and kind often feels cold.\nFOL: all x. (Red(x) & Rough(x) & Kind(x) & Cold(x))\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: all x. (Big(x) & Red(x) & Blue(x))\nTEXT: If you ever meet someone who is both green and blue while being nice, then they'll be big, too.\nFOL: all x. (Green(x) & Blue(x) & Nice(x) & Big(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Dave sure is nice.\nFOL: all x. (Dave(x) -> Nice(x))\nTEXT: Eric is a kind person and he is also often cold.\nFOL: all x. (Eric(x) -> Kind(x) & Cold(x))\nTEXT: Harry is shaped big and round like a balloon.\nFOL: all x. (Harry(x) -> Big(x) & Round(x))\nTEXT: His red color shows how kind he is.\nFOL: all x. (Red(x) -> Kind(x))\nTEXT: Cold people who are big hearted and kind are usually very round.\nFOL: all x. (Big(x) & Kind(x) & -Round(x))\nTEXT: A kind person who is down in the dumps and blue tends to have a rough side.\nFOL: all x. (Kind(x) & Down(x) & -Blue(x) & -RoughSide(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) & -Green(x) & -SomeAreas(x))\nTEXT: Young and rough people will most certainly be red.\nFOL: all x. (Young(x) & Rough(x) & -Red(x))\nTEXT: A person that is red, rough and kind often feels cold.\nFOL: all x. (Red(x) & Rough(x) & Kind(x) & -Cold(x))\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: all x. (Big(x) & Red(x) & -Blue(x))\nTEXT: If you ever meet someone who is both green and blue while being nice, then they'll be big, too.\nFOL: all x. (Green(x) & Blue(x) & Nice(x) & -Big(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Dave sure is nice.\nFOL: all x. (Dave(x) -> Nice(x))\nTEXT: Eric is a kind person and he is also often cold.\nFOL: all x. (Eric(x) -> Kind(x) & Cold(x))\nTEXT: Harry is shaped big and round like a balloon.\nFOL: all x. (Harry(x) -> Big(x) & Round(x))\nTEXT: His red color shows how kind he is.\nFOL: all x. (Red(x) -> Kind(x))\nTEXT: Cold people who are big hearted and kind are usually very round.\nFOL: all x. (Cold(x) & Big(x) & Kind(x) & Round(x))\nTEXT: A kind person who is down in the dumps and blue tends to have a rough side.\nFOL: all x. (Kind(x) & Down(x) & Blue(x) & Rough(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) & Little(x) & Green(x) & Some(x))\nTEXT: Young and rough people will most certainly be red.\nFOL: all x. (Young(x) & Rough(x) & Red(x))\nTEXT: A person that is red, rough and kind often feels cold.\nFOL: all x. (Red(x) & Rough(x) & Kind(x) & Cold(x))\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: all x. (Big(x) & Red(x) & Blue(x))\nTEXT: If you ever meet someone who is both green and blue while being nice, then they'll be big, too.\nFOL: all x. (Green(x) & Blue(x) & Nice(x) & Big(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))",
   "<EVALUATE>\nTEXT: That guy Dave sure is nice.\nFOL: all x. (Dave(x) -> Nice(x))\nTEXT: Eric is a kind person and he is also often cold.\nFOL: all x. (Eric(x) -> Kind(x) & Cold(x))\nTEXT: Harry is shaped big and round like a balloon.\nFOL: all x. (Harry(x) -> Big(x) & Round(x))\nTEXT: His red color shows how kind he is.\nFOL: all x. (Red(x) -> Kind(x))\nTEXT: Cold people who are big hearted and kind are usually very round.\nFOL: all x. (Cold(x) & Big(x) & Kind(x) & Round(x))\nTEXT: A kind person who is down in the dumps and blue tends to have a rough side.\nFOL: all x. (Kind(x) & Down(x) & Blue(x) & Rough(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) & Little(x) & Green(x) & Some(x))\nTEXT: Young and rough people will most certainly be red.\nFOL: all x. (Young(x) & Rough(x) & Red(x))\nTEXT: A person that is red, rough and kind often feels cold.\nFOL: all x. (Red(x) & Rough(x) & Kind(x) & Cold(x))\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: all x. (Big(x) & Red(x) & Blue(x))\nTEXT: If you ever meet someone who is both green and blue while being nice, then they'll be big, too.\nFOL: all x. (Green(x) & Blue(x) & Nice(x) & Big(x))\nTEXT: Harry is rough.\nFOL: Big(x)",
   "<EVALUATE>\nTEXT: That guy Dave sure is nice.\nFOL: all x. (Dave(x) -> Nice(x))\nTEXT: Eric is a kind person and he is also often cold.\nFOL: all x. (Eric(x) -> Kind(x) & -Cold(x))\nTEXT: Harry is shaped big and round like a balloon.\nFOL: all x. (Harry(x) -> Big(x) & Round(x))\nTEXT: His red color shows how kind he is.\nFOL: all x. (Red(x) -> Kind(x))\nTEXT: Cold people who are big hearted and kind are usually very round.\nFOL: all x. (Big(x) & Kind(x) & -Round(x))\nTEXT: A kind person who is down in the dumps and blue tends to have a rough side.\nFOL: all x. (Kind(x) & -Down(x) & -Blue(x) & -Rough(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) & -Green(x) & -SomeAreas(x))\nTEXT: Young and rough people will most certainly be red.\nFOL: all x. (Young(x) & Rough(x) & -Red(x))\nTEXT: A person that is red, rough and kind often feels cold.\nFOL: all x. (Red(x) & Rough(x) & -Kind(x) & -Cold(x))\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: all x. (Big(x) & Red(x) & -Blue(x))\nTEXT: If you ever meet someone who is both green and blue while being nice, then they'll be big, too.\nFOL: all x. (Green(x) & Blue(x) & -Nice(x) & -Big(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 38,
  "responses": [
   "<EVALUATE>\nTEXT: For being so young, Bob is nice.\nFOL: all x y. (Young(x) & Nice(x) -> Bob(x))\nTEXT: He has rough, red hands from working all day and it makes him feel blue.\nFOL: all x y. (Hand(x) & Rough(x) & Red(x) & -FeelsBlue(x) -> Bob(x))\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: all x y. (Round(x) & Big(x) & Kind(x) -> Dave(x))\nTEXT: Fred may be round, but he is also kind.\nFOL: all x y. (Round(x) & Kind(x) -> Fred(x))\nTEXT: For being so cold, it's good Gary can remain nice.\nFOL: all x y. (Cold(x) & Nice(x) -> Gary(x))\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: all x y. (Big(x) & Round(x) & Kind(x) & -Naive(x) -> Bob(x))\nTEXT: Kind red people are green on the inside.\nFOL: all x y. (Kind(x) & Red(x) & Green(x) & -Inside(x) -> Bob(x))\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: all x y. (Nice(x) & Young(x) & Red(x) & -Green(x) -> Bob(x))\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: all x y. (Green(x) & Naive(x) & Red(x) & -Rough(x) -> Bob(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: all x y. (Green(x) & Naive(x) & -Round(x) -> Bob(x))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: all x y. (Nice(x) & -FeelsBlue(x) & -Round(x) -> Bob(x))\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: all x y. (Cold(x) & Round(x) & -Red(x) -> Bob(x))\nTEXT: Dave is kind.\nFOL: Dave(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: For being so young, Bob is nice.\nFOL: all x y. (Young(x) & Nice(x) -> Bob(x))\nTEXT: He has rough, red hands from working all day and it makes him feel blue.\nFOL: all x y. (Hand(x) & Rough(x) & Red(x) & -FeelsBlue(x) -> Bob(x))\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: all x y. (Round(x) & Big(x) & Kind(x) -> Dave(x))\nTEXT: Fred may be round, but he is also kind.\nFOL: all x y. (Round(x) & Kind(x) -> Fred(x))\nTEXT: For being so cold, it's good Gary can remain nice.\nFOL: all x y. (Cold(x) & Nice(x) -> Gary(x))\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: all x y. (Big(x) & Round(x) & Kind(x) & -Naive(x) -> Bob(x))\nTEXT: Kind red people are green on the inside.\nFOL: all x y. (Kind(x) & Red(x) & Green(x) & -Inside(x) -> Bob(x))\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: all x y. (Nice(x) & Young(x) & Red(x) & -Green(x) -> Bob(x))\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: all x y. (Green(x) & Naive(x) & Red(x) & -Rough(x) -> Bob(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: all x y. (Green(x) & Naive(x) & -Round(x) -> Bob(x))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: all x y. (Nice(x) & -FeelsBlue(x) & -Round(x) -> Bob(x))\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: all x y. (Cold(x) & Round(x) & Red(x) -> Bob(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: For being so young, Bob is nice.\nFOL: all x y. (Young(x) & Nice(x) -> Bob(x))\nTEXT: He has rough, red hands from working all day and it makes him feel blue.\nFOL: all x y. (Hand(x) & Rough(x) & Red(x) & -FeelsBlue(x) -> Bob(x))\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: all x y. (Round(x) & Big(x) & Kind(x) -> Dave(x))\nTEXT: Fred may be round, but he is also kind.\nFOL: all x y. (Round(x) & Kind(x) -> Fred(x))\nTEXT: For being so cold, it's good Gary can remain nice.\nFOL: all x y. (Cold(x) & Nice(x) -> Gary(x))\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: all x y. (Big(x) & Round(x) & Kind(x) & -Naive(x) -> Bob(x))\nTEXT: Kind red people are green on the inside.\nFOL: all x y. (Kind(x) & Red(x) & Green(x) & -Inside(x) -> Bob(x))\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: all x y. (Nice(x) & Young(x) & Red(x) & -Green(x) -> Bob(x))\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: all x y. (Green(x) & Naive(x) & Red(x) & -Rough(x) -> Bob(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: all x y. (Green(x) & Naive(x) & -Round(x) -> Bob(x))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: all x y. (Nice(x) & -FeelsBlue(x) & -Round(x) -> Bob(x))\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: all x y. (Cold(x) & Round(x) & -Red(x) -> Bob(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: For being so young, Bob is nice.\nFOL: all x y. (Young(x) & Nice(x) -> Bob(x))\nTEXT: He has rough, red hands from working all day and it makes him feel blue.\nFOL: all x y. (Hand(x) & Rough(x) & Red(x) & -FeelsBlue(x) -> Bob(x))\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: all x y. (Round(x) & Big(x) & Kind(x) -> Dave(x))\nTEXT: Fred may be round, but he is also kind.\nFOL: all x y. (Round(x) & Kind(x) -> Fred(x))\nTEXT: For being so cold, it's good Gary can remain nice.\nFOL: all x y. (Cold(x) & Nice(x) -> Gary(x))\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: all x y. (Big(x) & Round(x) & Kind(x) & -Naive(x) -> Bob(x))\nTEXT: Kind red people are green on the inside.\nFOL: all x y. (Kind(x) & Red(x) & Green(x) & -Inside(x) -> Bob(x))\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: all x y. (Nice(x) & Young(x) & Red(x) & -Green(x) -> Bob(x))\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: all x y. (Green(x) & Naive(x) & Red(x) & -Rough(x) -> Bob(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: all x y. (Green(x) & Naive(x) & -Round(x) -> Bob(x))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: all x y. (Nice(x) & -FeelsBlue(x) & -Round(x) -> Bob(x))\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: all x y. (Cold(x) & Round(x) & -Red(x) -> Bob(x))\nTEXT: Dave is kind.\nFOL: all x y. (Dave(x) & Kind(x) -> Bob(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: For being so young, Bob is nice.\nFOL: all x y. (Young(x) & Nice(x) -> Bob(x))\nTEXT: He has rough, red hands from working all day and it makes him feel blue.\nFOL: all x y. (Hand(x) & Rough(x) & Red(x) & -FeelsBlue(x) -> Bob(x))\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: all x y. (Round(x) & Big(x) & Kind(x) -> Dave(x))\nTEXT: Fred may be round, but he is also kind.\nFOL: all x y. (Round(x) & Kind(x) -> Fred(x))\nTEXT: For being so cold, it's good Gary can remain nice.\nFOL: all x y. (Cold(x) & Nice(x) -> Gary(x))\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: all x y. (Big(x) & Round(x) & Kind(x) & -Naive(x) -> Bob(x))\nTEXT: Kind red people are green on the inside.\nFOL: all x y. (Kind(x) & Red(x) & Green(x) & -Inside(x) -> Bob(x))\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: all x y. (Nice(x) & Young(x) & Red(x) & -Green(x) -> Bob(x))\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: all x y. (Green(x) & Naive(x) & Red(x) & -Rough(x) -> Bob(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: Bob(x)\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: Bob(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: Bob(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 39,
  "responses": [
   "<EVALUATE>\nTEXT: The dog chases the rabbit.\nFOL: all x y. (Dog(x) & Rabbit(y) & DogChasesRabbit(x, y))\nTEXT: The rabbit eats the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & RabbitEatsTiger(x, y))\nTEXT: The tiger is green.\nFOL: all x y. (Tiger(x) & Green(y) & TigerIsGreen(x, y))\nTEXT: If something eats the dog and the dog chases the rabbit then it likes the tiger.\nFOL: all x y z. (Eat(x, dog) & DogChasesRabbit(x, y) & DogLikesTiger(x, y) & Eat(x, tiger) & TigerIsGreen(x, y))\nTEXT: If something eats the dog and the dog is nice then the dog is green.\nFOL: all x y z. (Eat(x, dog) & DogIsNice(x) & DogLikesTiger(x, y) & Eat(x, tiger) & TigerIsGreen(x, y))\nTEXT: If something chases the rabbit then the rabbit is blue.\nFOL: all x y z. (Chase(x, rabbit) & RabbitIsBlue(x, y) & Chase(x, tiger) & TigerIsBlue(x, y))\nTEXT: If something likes the dog and it likes the rabbit then the dog is blue.\nFOL: all x y z. (Like(x, dog) & DogLikesRabbit(x, y) & Like(x, tiger) & TigerIsBlue(x, y))\nTEXT: If something is blue then it is cold.\nFOL: all x y z. (Blue(x) & Cold(y) & Blue(x, y))\nTEXT: If something chases the tiger then the tiger is blue.\nFOL: all x y z. (Chase(x, tiger) & TigerIsBlue(x, y))\nTEXT: If something is big then it likes the tiger.\nFOL: all x y z. (Big(x) & Like(x, tiger) & Big(x, y))\nTEXT: If something is cold and blue then it chases the tiger.\nFOL: all x y z. (Cold(x) & Blue(x) & Chase(x, tiger))\nTEXT: The dog is nice.\nFOL: all x y z. (Dog(x) & Nice(y) & DogIsNice(x, y))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog chases the rabbit.\nFOL: all x y. (Dog(x) & Rabbit(y) & DogChasesRabbit(x, y))\nTEXT: The rabbit eats the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & RabbitEatsTiger(x, y))\nTEXT: The tiger is green.\nFOL: all x y. (Tiger(x) & Green(y) & TigerIsGreen(x, y))\nTEXT: If something eats the dog and the dog chases the rabbit then it likes the tiger.\nFOL: all x y z. (Eat(x, dog) & DogChasesRabbit(x, y) & DogLikesTiger(x, y) & Eat(x, tiger) & TigerIsGreen(x, y))\nTEXT: If something eats the dog and the dog is nice then the dog is green.\nFOL: all x y z. (Eat(x, dog) & DogIsNice(x) & DogLikesTiger(x, y) & Eat(x, tiger) & TigerIsGreen(x, y))\nTEXT: If something chases the rabbit then the rabbit is blue.\nFOL: all x y z. (Chase(x, rabbit) & RabbitIsBlue(x, y) & Chase(x, tiger) & RabbitIsBlue(x, y))\nTEXT: If something likes the dog and it likes the rabbit then the dog is blue.\nFOL: all x y z. (Like(x, dog) & DogLikesRabbit(x, y) & Like(x, tiger) & DogLikesRabbit(x, y))\nTEXT: If something is blue then it is cold.\nFOL: all x y z. (Blue(x) & Cold(y) & Blue(x))\nTEXT: If something chases the tiger then the tiger is blue.\nFOL: all x y z. (Chase(x, tiger) & TigerIsBlue(x, y))\nTEXT: If something is big then it likes the tiger.\nFOL: all x y z. (Big(x) & Like(x, tiger) & Big(x))\nTEXT: If something is cold and blue then it chases the tiger.\nFOL: all x y z. (Cold(x) & Blue(x) & Chase(x, tiger))\nTEXT: The dog is nice.\nFOL: all x y z. (Dog(x) & Nice(y) & DogIsNice(x, y))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog chases the rabbit.\nFOL: all x y. (Dog(x) & Rabbit(y) & DogChasesRabbit(x, y))\nTEXT: The rabbit eats the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & RabbitEatsTiger(x, y))\nTEXT: The tiger is green.\nFOL: all x y. (Tiger(x) & Green(y) & TigerIsGreen(x, y))\nTEXT: If something eats the dog and the dog chases the rabbit then it likes the tiger.\nFOL: all x y z. (Eat(x, dog) & DogChasesRabbit(x, y) & DogLikesTiger(x, y) & Eat(x, tiger) & TigerIsGreen(x, y))\nTEXT: If something eats the dog and the dog is nice then the dog is green.\nFOL: all x y z. (Eat(x, dog) & DogIsNice(x) & DogLikesTiger(x, y) & Eat(x, tiger) & TigerIsGreen(x, y))\nTEXT: If something chases the rabbit then the rabbit is blue.\nFOL: all x y z. (Chase(x, rabbit) & RabbitIsBlue(x, y) & Chase(x, tiger) & TigerIsBlue(x, y))\nTEXT: If something likes the dog and it likes the rabbit then the dog is blue.\nFOL: all x y z. (Like(x, dog) & DogLikesRabbit(x, y) & Like(x, tiger) & TigerIsBlue(x, y))\nTEXT: If something is blue then it is cold.\nFOL: all x y z. (Blue(x) & Cold(y) & Blue(x, y))\nTEXT: If something chases the tiger then the tiger is blue.\nFOL: all x y z. (Chase(x, tiger) & TigerIsBlue(x, y))\nTEXT: If something is big then it likes the tiger.\nFOL: all x y z. (Big(x) & Like(x, tiger) & Big(x, y))\nTEXT: If something is cold and blue then it chases the tiger.\nFOL: all x y z. (Cold(x) & Blue(x) & Cold(x, y) & Chase(x, tiger))\nTEXT: The dog is nice.\nFOL: all x y z. (Dog(x) & Nice(y) & DogIsNice(x, y))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog chases the rabbit.\nFOL: all x y. (Dog(x) & Rabbit(y) & DogChasesRabbit(x, y))\nTEXT: The rabbit eats the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & RabbitEatsTiger(x, y))\nTEXT: The tiger is green.\nFOL: all x y. (Tiger(x) & Green(y) & TigerIsGreen(x, y))\nTEXT: If something eats the dog and the dog chases the rabbit then it likes the tiger.\nFOL: all x y z. (Eat(x, dog) & DogChasesRabbit(x, y) & DogLikesTiger(x, y) & Eat(x, tiger) & TigerIsGreen(x, y))\nTEXT: If something eats the dog and the dog is nice then the dog is green.\nFOL: all x y z. (Eat(x, dog) & DogIsNice(x) & DogLikesTiger(x, y) & Eat(x, tiger) & TigerIsGreen(x, y))\nTEXT: If something chases the rabbit then the rabbit is blue.\nFOL: all x y z. (Chase(x, rabbit) & RabbitIsBlue(x, y) & Chase(x, tiger) & RabbitIsBlue(x, y))\nTEXT: If something likes the dog and it likes the rabbit then the dog is blue.\nFOL: all x y z. (Like(x, dog) & DogLikesRabbit(x, y) & Like(x, rabbit) & DogLikesTiger(x, y) & DogIsBlue(x, y))\nTEXT: If something is blue then it is cold.\nFOL: all x y z. (Blue(x) & Cold(y) & Blue(x))\nTEXT: If something chases the tiger then the tiger is blue.\nFOL: all x y z. (Chase(x, tiger) & TigerIsBlue(x, y))\nTEXT: If something is big then it likes the tiger.\nFOL: all x y z. (Big(x) & Like(x, tiger) & Big(x))\nTEXT: If something is cold and blue then it chases the tiger.\nFOL: all x y z. (Cold(x) & Blue(x) & Cold(x) & Chase(x, tiger))\nTEXT: The dog is nice.\nFOL: all x y z. (Dog(x) & Nice(y) & DogIsNice(x, y))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog chases the rabbit.\nFOL: all x y. (Dog(x) & Rabbit(y) & DogChasesRabbit(x, y))\nTEXT: The rabbit eats the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & RabbitEatsTiger(x, y))\nTEXT: The tiger is green.\nFOL: all x y. (Tiger(x) & Green(y) & TigerIsGreen(x, y))\nTEXT: If something eats the dog and the dog chases the rabbit then it likes the tiger.\nFOL: all x y z. (Eat(x, dog) & DogChasesRabbit(x, y) & DogLikesTiger(x, y) & Eat(x, tiger) & TigerIsGreen(x, y))\nTEXT: If something eats the dog and the dog is nice then the dog is green.\nFOL: all x y z. (Eat(x, dog) & DogIsNice(x) & DogLikesTiger(x, y) & Eat(x, tiger) & TigerIsGreen(x, y))\nTEXT: If something chases the rabbit then the rabbit is blue.\nFOL: all x y z. (Chase(x, rabbit) & RabbitIsBlue(x, y) & Chase(x, tiger) & TigerIsBlue(x, y))\nTEXT: If something likes the dog and it likes the rabbit then the dog is blue.\nFOL: all x y z. (Like(x, dog) & DogLikesRabbit(x, y) & Like(x, tiger) & TigerIsBlue(x, y))\nTEXT: If something is blue then it is cold.\nFOL: all x y z. (Blue(x) & Cold(y) & Blue(x, y))\nTEXT: If something chases the tiger then the tiger is blue.\nFOL: all x y z. (Chase(x, tiger) & TigerIsBlue(x, y))\nTEXT: If something is big then it likes the tiger.\nFOL: all x y z. (Big(x) & Like(x, tiger) & Big(x, y))\nTEXT: If something is cold and blue then it chases the tiger.\nFOL: all x y z. (Cold(x) & Blue(x) & Cold(x, y) & Chase(x, tiger))\nTEXT: The dog is nice.\nFOL: all x y. (Dog(x) & Nice(y))\n</EVALUATE>"
  ]
 },
 {
  "index": 40,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: all x. (Furry(x) -> Bob(x))\nTEXT: Bob is smart.\nFOL: all x. (Smart(x) -> Bob(x))\nTEXT: Dave is rough.\nFOL: all x. (Rough(x) -> Dave(x))\nTEXT: Dave is smart.\nFOL: all x. (Smart(x) -> Dave(x))\nTEXT: Erin is cold.\nFOL: all x. (Cold(x) -> Erin(x))\nTEXT: Erin is furry.\nFOL: all x. (Furry(x) -> Erin(x))\nTEXT: Erin is green.\nFOL: all x. (Green(x) -> Erin(x))\nTEXT: Erin is nice.\nFOL: all x. (Nice(x) -> Erin(x))\nTEXT: Erin is red.\nFOL: all x. (Red(x) -> Erin(x))\nTEXT: Erin is rough.\nFOL: all x. (Rough(x) -> Erin(x))\nTEXT: Erin is smart.\nFOL: all x. (Smart(x) -> Erin(x))\nTEXT: Gary is furry.\nFOL: all x. (Furry(x) -> Gary(x))\nTEXT: Gary is green.\nFOL: all x. (Green(x) -> Gary(x))\nTEXT: Gary is nice.\nFOL: all x. (Nice(x) -> Gary(x))\nTEXT: Gary is red.\nFOL: all x. (Red(x) -> Gary(x))\nTEXT: Rough things are nice.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: If something is red and rough then it is nice.\nFOL: all x. (Red(x) & Rough(x) -> Nice(x))\nTEXT: All cold things are nice.\nFOL: all x. (Nice(x) -> Cold(x))\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\nTEXT: If something is nice then it is rough.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: All green, red things are rough.\nFOL: all x. (Green(x) & Red(x) -> Rough(x))\nTEXT: If Erin is nice then Erin is red.\nFOL: all x. (Nice(x) -> Red(x))\nTEXT: Nice, cold things are red.\nFOL: Nice(x) & Cold(x) -> Red(x)\nTEXT: Bob is green.\nFOL: Bob(x) & Cold(x) -> Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: all x. (Furry(x) -> Bob(x))\nTEXT: Bob is smart.\nFOL: all x. (Smart(x) -> Bob(x))\nTEXT: Dave is rough.\nFOL: all x. (Rough(x) -> Dave(x))\nTEXT: Dave is smart.\nFOL: all x. (Smart(x) -> Dave(x))\nTEXT: Erin is cold.\nFOL: all x. (Cold(x) -> Erin(x))\nTEXT: Erin is furry.\nFOL: all x. (Furry(x) -> Erin(x))\nTEXT: Erin is green.\nFOL: all x. (Green(x) -> Erin(x))\nTEXT: Erin is nice.\nFOL: all x. (Nice(x) -> Erin(x))\nTEXT: Erin is red.\nFOL: all x. (Red(x) -> Erin(x))\nTEXT: Erin is rough.\nFOL: all x. (Rough(x) -> Erin(x))\nTEXT: Erin is smart.\nFOL: all x. (Smart(x) -> Erin(x))\nTEXT: Gary is furry.\nFOL: all x. (Furry(x) -> Gary(x))\nTEXT: Gary is green.\nFOL: all x. (Green(x) -> Gary(x))\nTEXT: Gary is nice.\nFOL: all x. (Nice(x) -> Gary(x))\nTEXT: Gary is red.\nFOL: all x. (Red(x) -> Gary(x))\nTEXT: Rough things are nice.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: If something is red and rough then it is nice.\nFOL: all x. (Red(x) & Rough(x) -> Nice(x))\nTEXT: All cold things are nice.\nFOL: all x. (Nice(x) -> Cold(x))\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\nTEXT: If something is nice then it is rough.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: All green, red things are rough.\nFOL: all x. (Red(x) & Rough(x) -> Rough(x))\nTEXT: If Erin is nice then Erin is red.\nFOL: all x. (Nice(x) -> Red(x))\nTEXT: Nice, cold things are red.\nFOL: Nice(x) & Cold(x) -> Red(x)\nTEXT: Bob is green.\nFOL: Bob(x) & Cold(x) -> Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: all x. (Furry(x) -> Bob(x))\nTEXT: Bob is smart.\nFOL: all x. (Smart(x) -> Bob(x))\nTEXT: Dave is rough.\nFOL: all x. (Rough(x) -> Dave(x))\nTEXT: Dave is smart.\nFOL: all x. (Smart(x) -> Dave(x))\nTEXT: Erin is cold.\nFOL: all x. (Cold(x) -> Erin(x))\nTEXT: Erin is furry.\nFOL: all x. (Furry(x) -> Erin(x))\nTEXT: Erin is green.\nFOL: all x. (Green(x) -> Erin(x))\nTEXT: Erin is nice.\nFOL: all x. (Nice(x) -> Erin(x))\nTEXT: Erin is red.\nFOL: all x. (Red(x) -> Erin(x))\nTEXT: Erin is rough.\nFOL: all x. (Rough(x) -> Erin(x))\nTEXT: Erin is smart.\nFOL: all x. (Smart(x) -> Erin(x))\nTEXT: Gary is furry.\nFOL: all x. (Furry(x) -> Gary(x))\nTEXT: Gary is green.\nFOL: all x. (Green(x) -> Gary(x))\nTEXT: Gary is nice.\nFOL: all x. (Nice(x) -> Gary(x))\nTEXT: Gary is red.\nFOL: all x. (Red(x) -> Gary(x))\nTEXT: Rough things are nice.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: If something is red and rough then it is nice.\nFOL: all x. (Red(x) & Rough(x) -> Nice(x))\nTEXT: All cold things are nice.\nFOL: all x. (Nice(x) -> Cold(x))\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\nTEXT: If something is nice then it is rough.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: All green, red things are rough.\nFOL: all x. (Green(x) & Red(x) -> Rough(x))\nTEXT: If Erin is nice then Erin is red.\nFOL: all x. (Nice(x) -> Red(x))\nTEXT: Nice, cold things are red.\nFOL: Nice(x) & Cold(x) -> Red(x)\nTEXT: Bob is green.\nFOL: Bob(x) & Cold(x) -> Green(x)",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: all x. (Furry(x) -> Bob(x))\nTEXT: Bob is smart.\nFOL: all x. (Smart(x) -> Bob(x))\nTEXT: Dave is rough.\nFOL: all x. (Rough(x) -> Dave(x))\nTEXT: Dave is smart.\nFOL: all x. (Smart(x) -> Dave(x))\nTEXT: Erin is cold.\nFOL: all x. (Cold(x) -> Erin(x))\nTEXT: Erin is furry.\nFOL: all x. (Furry(x) -> Erin(x))\nTEXT: Erin is green.\nFOL: all x. (Green(x) -> Erin(x))\nTEXT: Erin is nice.\nFOL: all x. (Nice(x) -> Erin(x))\nTEXT: Erin is red.\nFOL: all x. (Red(x) -> Erin(x))\nTEXT: Erin is rough.\nFOL: all x. (Rough(x) -> Erin(x))\nTEXT: Erin is smart.\nFOL: all x. (Smart(x) -> Erin(x))\nTEXT: Gary is furry.\nFOL: all x. (Furry(x) -> Gary(x))\nTEXT: Gary is green.\nFOL: all x. (Green(x) -> Gary(x))\nTEXT: Gary is nice.\nFOL: all x. (Nice(x) -> Gary(x))\nTEXT: Gary is red.\nFOL: all x. (Red(x) -> Gary(x))\nTEXT: Rough things are nice.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: If something is red and rough then it is nice.\nFOL: all x. (Red(x) & Rough(x) -> Nice(x))\nTEXT: All cold things are nice.\nFOL: all x. (Nice(x) -> Cold(x))\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\nTEXT: If something is nice then it is rough.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: All green, red things are rough.\nFOL: all x. (Red(x) & Rough(x) -> Rough(x))\nTEXT: If Erin is nice then Erin is red.\nFOL: all x. (Nice(x) -> Red(x))\nTEXT: Nice, cold things are red.\nFOL: Nice(x) & Cold(x) -> Red(x)\nTEXT: Bob is green.\nFOL: Bob(x) & Cold(x) -> Green(x)",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: all x. (Furry(x) -> Bob(x))\nTEXT: Bob is smart.\nFOL: all x. (Smart(x) -> Bob(x))\nTEXT: Dave is rough.\nFOL: all x. (Rough(x) -> Dave(x))\nTEXT: Dave is smart.\nFOL: all x. (Smart(x) -> Dave(x))\nTEXT: Erin is cold.\nFOL: all x. (Cold(x) -> Erin(x))\nTEXT: Erin is furry.\nFOL: all x. (Furry(x) -> Erin(x))\nTEXT: Erin is green.\nFOL: all x. (Green(x) -> Erin(x))\nTEXT: Erin is nice.\nFOL: all x. (Nice(x) -> Erin(x))\nTEXT: Erin is red.\nFOL: all x. (Red(x) -> Erin(x))\nTEXT: Erin is rough.\nFOL: all x. (Rough(x) -> Erin(x))\nTEXT: Erin is smart.\nFOL: all x. (Smart(x) -> Erin(x))\nTEXT: Gary is furry.\nFOL: all x. (Furry(x) -> Gary(x))\nTEXT: Gary is green.\nFOL: all x. (Green(x) -> Gary(x))\nTEXT: Gary is nice.\nFOL: all x. (Nice(x) -> Gary(x))\nTEXT: Gary is red.\nFOL: all x. (Red(x) -> Gary(x))\nTEXT: Rough things are nice.\nFOL: all x. (Nice(x) & Rough(x) -> Red(x))\nTEXT: If something is red and rough then it is nice.\nFOL: Red(x) & Rough(x) -> Nice(x)\nTEXT: All cold things are nice.\nFOL: all x. (Nice(x) -> Cold(x))\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\nTEXT: If something is nice then it is rough.\nFOL: Nice(x) -> Rough(x)\nTEXT: All green, red things are rough.\nFOL: (Red(x) & Nice(x)) -> Rough(x)\nTEXT: If Erin is nice then Erin is red.\nFOL: Nice(x) -> Red(x)\nTEXT: Nice, cold things are red.\nFOL: Nice(x) & Cold(x) -> Red(x)\nTEXT: Bob is green.\nFOL: Bob(x) -> Green(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 41,
  "responses": [
   "<EVALUATE>\nTEXT: The mouse chases the tiger.\nFOL: all x y. (Mouse(x) & Tiger(y) & MouseChasesTiger(x, y))\nTEXT: The squirrel is young.\nFOL: all x. (Squirrel(x) -> Young(x))\nTEXT: The tiger likes the mouse.\nFOL: all x y. (Tiger(x) & Mouse(y) & Like(x, y))\nTEXT: If someone is young then they see the tiger.\nFOL: all x y. (Young(x) & -SeeTiger(x))\nTEXT: If someone likes the squirrel and the squirrel is not green then the squirrel sees the mouse.\nFOL: all x y. (Like(x, y) & Squirrel(x) & NotGreen(x) & See(x, y))\nTEXT: If someone sees the squirrel then they are blue.\nFOL: all x y. (See(x, y) & Squirrel(x) & -Blue(x))\nTEXT: If the tiger chases the mouse then the tiger likes the squirrel.\nFOL: all x y. (Tiger(x) & Mouse(y) & Like(x, y))\nTEXT: If the tiger is not green then the tiger likes the squirrel.\nFOL: all x y. (Tiger(x) & NotGreen(x) & Like(x, y))\nTEXT: If someone sees the tiger then they are red.\nFOL: all x y. (See(x, y) & Tiger(x) & -Red(x))\nTEXT: If someone chases the tiger then they are young.\nFOL: all x y. (Chase(x, y) & Tiger(x) & Young(x))\nTEXT: If the tiger does not like the squirrel then the squirrel likes the tiger.\nFOL: all x y. (NotLike(x, y) & Squirrel(x) & Like(x, y))\nTEXT: The tiger does not see the tiger.\nFOL: -SeeTiger(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse chases the tiger.\nFOL: all x y. (Mouse(x) & Tiger(y) & MouseChasesTiger(x, y))\nTEXT: The squirrel is young.\nFOL: all x. (Squirrel(x) -> Young(x))\nTEXT: The tiger likes the mouse.\nFOL: all x y. (Tiger(x) & Mouse(y) & Like(x, y))\nTEXT: If someone is young then they see the tiger.\nFOL: all x y. (Young(x) & -SeeTiger(x))\nTEXT: If someone likes the squirrel and the squirrel is not green then the squirrel sees the mouse.\nFOL: all x y. (Like(x, y) & Squirrel(x) & NotGreen(x) & See(x, y))\nTEXT: If someone sees the squirrel then they are blue.\nFOL: all x y. (See(x, y) & Squirrel(x) & -Blue(x))\nTEXT: If the tiger chases the mouse then the tiger likes the squirrel.\nFOL: all x y. (Tiger(x) & Mouse(x) & Like(x, y))\nTEXT: If the tiger is not green then the tiger likes the squirrel.\nFOL: all x y. (Tiger(x) & NotGreen(x) & Like(x, y))\nTEXT: If someone sees the tiger then they are red.\nFOL: all x y. (See(x, y) & Tiger(x) & -Red(x))\nTEXT: If someone chases the tiger then they are young.\nFOL: all x y. (Chase(x, y) & Tiger(x) & Young(x))\nTEXT: If the tiger does not like the squirrel then the squirrel likes the tiger.\nFOL: all x y. (NotLike(x, y) & Squirrel(x) & Like(x, y))\nTEXT: The tiger does not see the tiger.\nFOL: -SeeTiger(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse chases the tiger.\nFOL: all x y. (Mouse(x) & Tiger(y) & MouseChasesTiger(x, y))\nTEXT: The squirrel is young.\nFOL: all x. (Squirrel(x) -> Young(x))\nTEXT: The tiger likes the mouse.\nFOL: all x y. (Tiger(x) & Mouse(y) & Like(x, y))\nTEXT: If someone is young then they see the tiger.\nFOL: all x y. (Young(x) & -SeeTiger(x))\nTEXT: If someone likes the squirrel and the squirrel is not green then the squirrel sees the mouse.\nFOL: all x y. (Like(x, y) & Squirrel(x) & NotGreen(x) & See(x, y))\nTEXT: If someone sees the squirrel then they are blue.\nFOL: all x y. (See(x, y) & Squirrel(x) & -Blue(x))\nTEXT: If the tiger chases the mouse then the tiger likes the squirrel.\nFOL: all x y. (Tiger(x) & Mouse(x) & Like(x, y))\nTEXT: If the tiger is not green then the tiger likes the squirrel.\nFOL: all x y. (Tiger(x) & NotGreen(x) & Like(x, y))\nTEXT: If someone sees the tiger then they are red.\nFOL: all x y. (See(x, y) & Tiger(x) & -Red(x))\nTEXT: If someone chases the tiger then they are young.\nFOL: all x y. (Chase(x, y) & Tiger(x) & Young(x))\nTEXT: If the tiger does not like the squirrel then the squirrel likes the tiger.\nFOL: all x y. (NotLike(x, y) & Tiger(x) & Like(x, y))\nTEXT: The tiger does not see the tiger.\nFOL: -SeeTiger(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse chases the tiger.\nFOL: all x y. (Mouse(x) & Tiger(y) & MouseChasesTiger(x, y))\nTEXT: The squirrel is young.\nFOL: all x. (Squirrel(x) -> Young(x))\nTEXT: The tiger likes the mouse.\nFOL: all x y. (Tiger(x) & Mouse(y) & Like(x, y))\nTEXT: If someone is young then they see the tiger.\nFOL: all x y. (Young(x) & -SeeTiger(x))\nTEXT: If someone likes the squirrel and the squirrel is not green then the squirrel sees the mouse.\nFOL: all x y. (Like(x, y) & Squirrel(x) & NotGreen(x) & See(x, y))\nTEXT: If someone sees the squirrel then they are blue.\nFOL: all x y. (See(x, y) & Squirrel(x) & -Blue(x))\nTEXT: If the tiger chases the mouse then the tiger likes the squirrel.\nFOL: all x y. (Tiger(x) & Mouse(y) & Like(x, y))\nTEXT: If the tiger is not green then the tiger likes the squirrel.\nFOL: all x y. (Tiger(x) & NotGreen(x) & Like(x, y))\nTEXT: If someone sees the tiger then they are red.\nFOL: all x y. (See(x, y) & Tiger(x) & -Red(x))\nTEXT: If someone chases the tiger then they are young.\nFOL: all x y. (Chase(x, y) & Tiger(x) & Young(x))\nTEXT: If the tiger does not like the squirrel then the squirrel likes the tiger.\nFOL: all x y. (NotLike(x, y) & Tiger(x) & Like(x, y))\nTEXT: The tiger does not see the tiger.\nFOL: -SeeTiger(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse chases the tiger.\nFOL: all x y. (Mouse(x) & Tiger(y) & MouseChasesTiger(x, y))\nTEXT: The squirrel is young.\nFOL: all x. (Squirrel(x) -> Young(x))\nTEXT: The tiger likes the mouse.\nFOL: all x y. (Tiger(x) & Mouse(y) & Like(x, y))\nTEXT: If someone is young then they see the tiger.\nFOL: all x y. (Young(x) & -SeeTiger(x))\nTEXT: If someone likes the squirrel and the squirrel is not green then the squirrel sees the mouse.\nFOL: all x y. (Like(x, y) & Squirrel(x) & NotGreen(x) & See(x, y))\nTEXT: If someone sees the squirrel then they are blue.\nFOL: all x y. (See(x, y) & Squirrel(x) & -Blue(x))\nTEXT: If the tiger chases the mouse then the tiger likes the squirrel.\nFOL: all x y. (Tiger(x) & Mouse(y) & Like(x, y))\nTEXT: If the tiger is not green then the tiger likes the squirrel.\nFOL: all x y. (Tiger(x) & NotGreen(x) & Like(x, y))\nTEXT: If someone sees the tiger then they are red.\nFOL: all x y. (See(x, y) & Tiger(x) & -Red(x))\nTEXT: If someone chases the tiger then they are young.\nFOL: all x y. (See(x, y) & Tiger(x) & -Young(x))\nTEXT: If the tiger does not like the squirrel then the squirrel likes the tiger.\nFOL: all x y. (NotLike(x, y) & Squirrel(x) & Like(x, y))\nTEXT: The tiger does not see the tiger.\nFOL: -SeeTiger(tiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 42,
  "responses": [
   "<EVALUATE>\nTEXT: The dog is cold.\nFOL: all x. (Dog(x) -> -Cold(x))\nTEXT: The dog is red.\nFOL: all x. (Dog(x) -> Red(x))\nTEXT: The dog likes the lion.\nFOL: all x. (Dog(x) -> likes(x, Lion(x)))\nTEXT: The dog sees the lion.\nFOL: all x. (Dog(x) -> sees(x, Lion(x)))\nTEXT: The lion is cold.\nFOL: all x. (Lion(x) -> -Cold(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> kind(x))\nTEXT: The lion is young.\nFOL: all x. (Lion(x) -> young(x))\nTEXT: The lion likes the dog.\nFOL: all x. (Lion(x) -> likes(x, Dog(x)))\nTEXT: The lion sees the dog.\nFOL: all x. (Lion(x) -> sees(x, Dog(x)))\nTEXT: The lion visits the dog.\nFOL: all x. (Lion(x) -> visits(x, Dog(x)))\nTEXT: If someone sees the dog then they are rough.\nFOL: all x. (Dog(x) -> sees(x) & -Rough(x))\nTEXT: If someone is rough then they like the lion.\nFOL: all x. (Rough(x) -> likes(x, Lion(x)))\nTEXT: If someone likes the lion and the lion likes the dog then they visit the lion.\nFOL: all x. ((likes(x, Lion(x)) & likes(x, Dog(x))) -> visits(x, Lion(x)))\nTEXT: The dog is not rough.\nFOL: -Rough(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is cold.\nFOL: all x. (Dog(x) -> -Cold(x))\nTEXT: The dog is red.\nFOL: all x. (Dog(x) -> Red(x))\nTEXT: The dog likes the lion.\nFOL: all x. (Dog(x) -> likes(x, Lion(x)))\nTEXT: The dog sees the lion.\nFOL: all x. (Dog(x) -> sees(x, Lion(x)))\nTEXT: The lion is cold.\nFOL: all x. (Lion(x) -> -Cold(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> kind(x))\nTEXT: The lion is young.\nFOL: all x. (Lion(x) -> young(x))\nTEXT: The lion likes the dog.\nFOL: all x. (Lion(x) -> likes(x, Dog(x)))\nTEXT: The lion sees the dog.\nFOL: all x. (Lion(x) -> sees(x, Dog(x)))\nTEXT: The lion visits the dog.\nFOL: all x. (Lion(x) -> visits(x, Dog(x)))\nTEXT: If someone sees the dog then they are rough.\nFOL: all x. (Dog(x) -> sees(x) & -Rough(x))\nTEXT: If someone is rough then they like the lion.\nFOL: all x. (Rough(x) -> likes(x, Lion(x)))\nTEXT: If someone likes the lion and the lion likes the dog then they visit the lion.\nFOL: all x. (likes(x, Lion(x)) & likes(x, Dog(x)) -> visits(x, Lion(x)))\nTEXT: The dog is not rough.\nFOL: -Rough(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is cold.\nFOL: all x. (Dog(x) -> -Cold(x))\nTEXT: The dog is red.\nFOL: all x. (Dog(x) -> Red(x))\nTEXT: The dog likes the lion.\nFOL: all x. (Dog(x) -> likes(x, Lion(x)))\nTEXT: The dog sees the lion.\nFOL: all x. (Dog(x) -> sees(x, Lion(x)))\nTEXT: The lion is cold.\nFOL: all x. (Lion(x) -> -Cold(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> kind(x))\nTEXT: The lion is young.\nFOL: all x. (Lion(x) -> young(x))\nTEXT: The lion likes the dog.\nFOL: all x. (Lion(x) -> likes(x, Dog(x)))\nTEXT: The lion sees the dog.\nFOL: all x. (Lion(x) -> sees(x, Dog(x)))\nTEXT: The lion visits the dog.\nFOL: all x. (Lion(x) -> visits(x, Dog(x)))\nTEXT: If someone sees the dog then they are rough.\nFOL: all x. (Dog(x) -> sees(x) & -Rough(x))\nTEXT: If someone is rough then they like the lion.\nFOL: all x. (Rough(x) -> likes(x, Lion(x)))\nTEXT: If someone likes the lion and the lion likes the dog then they visit the lion.\nFOL: all x. ((likes(x, Lion(x)) & likes(x, Dog(x))) -> visits(x, Lion(x)))\nTEXT: The dog is not rough.\nFOL: not all x. (Dog(x) -> sees(x) & -Rough(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is cold.\nFOL: all x. (Dog(x) -> -Cold(x))\nTEXT: The dog is red.\nFOL: all x. (Dog(x) -> Red(x))\nTEXT: The dog likes the lion.\nFOL: all x. (Dog(x) -> likes(x, Lion(x)))\nTEXT: The dog sees the lion.\nFOL: all x. (Dog(x) -> sees(x, Lion(x)))\nTEXT: The lion is cold.\nFOL: all x. (Lion(x) -> -Cold(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> kind(x))\nTEXT: The lion is young.\nFOL: all x. (Lion(x) -> young(x))\nTEXT: The lion likes the dog.\nFOL: all x. (Lion(x) -> likes(x, Dog(x)))\nTEXT: The lion sees the dog.\nFOL: all x. (Lion(x) -> sees(x, Dog(x)))\nTEXT: The lion visits the dog.\nFOL: all x. (Lion(x) -> visits(x, Dog(x)))\nTEXT: If someone sees the dog then they are rough.\nFOL: all x. (Dog(x) -> sees(x) & -Rough(x))\nTEXT: If someone is rough then they like the lion.\nFOL: all x. (Rough(x) -> likes(x, Lion(x)))\nTEXT: If someone likes the lion and the lion likes the dog then they visit the lion.\nFOL: all x. ((likes(x, Lion(x)) & likes(x, Dog(x))) -> visits(x, Lion(x)))\nTEXT: The dog is not rough.\nFOL: not all x. (Dog(x) -> -Rough(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is cold.\nFOL: all x. (Dog(x) -> -Cold(x))\nTEXT: The dog is red.\nFOL: all x. (Dog(x) -> Red(x))\nTEXT: The dog likes the lion.\nFOL: all x. (Dog(x) -> likes(x, Lion(x)))\nTEXT: The dog sees the lion.\nFOL: all x. (Dog(x) -> sees(x, Lion(x)))\nTEXT: The lion is cold.\nFOL: all x. (Lion(x) -> -Cold(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> kind(x))\nTEXT: The lion is young.\nFOL: all x. (Lion(x) -> young(x))\nTEXT: The lion likes the dog.\nFOL: all x. (Lion(x) -> likes(x, Dog(x)))\nTEXT: The lion sees the dog.\nFOL: all x. (Lion(x) -> sees(x, Dog(x)))\nTEXT: The lion visits the dog.\nFOL: all x. (Lion(x) -> visits(x, Dog(x)))\nTEXT: If someone sees the dog then they are rough.\nFOL: all x. (Dog(x) -> sees(x) & -Rough(x))\nTEXT: If someone is rough then they like the lion.\nFOL: all x. (Rough(x) -> likes(x, Lion(x)))\nTEXT: If someone likes the lion and the lion likes the dog then they visit the lion.\nFOL: all x. ((likes(x, Lion(x)) & likes(x, Dog(x))) -> visits(x, Lion(x)))\nTEXT: The dog is not rough.\nFOL: -Rough(x) -> -Rough(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 43,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is young.\nFOL: all x. (Anne(x) -> Young(x))\nTEXT: Bob is not cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Erin is quiet.\nFOL: all x. (Erin(x) -> Quiet(x))\nTEXT: If Anne is round then Anne is not young.\nFOL: all x y. (Anne(x) & Round(x) -> -Young(x))\nTEXT: Young things are not white.\nFOL: all x. (Young(x) -> -White(x))\nTEXT: If Erin is quiet then Erin is cold.\nFOL: all x y. (Erin(x) & Quiet(x) -> -Cold(x))\nTEXT: If something is white then it is not smart.\nFOL: all x y. (White(x) -> -Smart(x))\nTEXT: If something is quiet and cold then it is round.\nFOL: all x y. (Quiet(x) & Cold(x) -> Round(x))\nTEXT: All white things are not round.\nFOL: all x. (White(x) -> -Round(x))\nTEXT: If Erin is round then Erin is young.\nFOL: all x y. (Erin(x) & Round(x) -> Young(x))\nTEXT: If something is round and not nice then it is not quiet.\nFOL: all x y. (Round(x) & -Nice(x) -> -Quiet(x))\nTEXT: Erin is round.\nFOL: Round(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is young.\nFOL: all x. (Anne(x) -> Young(x))\nTEXT: Bob is not cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Erin is quiet.\nFOL: all x. (Erin(x) -> Quiet(x))\nTEXT: If Anne is round then Anne is not young.\nFOL: all x y. (Anne(x) & Round(x) -> -Young(x))\nTEXT: Young things are not white.\nFOL: all x. (Young(x) -> -White(x))\nTEXT: If Erin is quiet then Erin is cold.\nFOL: all x y. (Erin(x) & Quiet(x) -> -Cold(x))\nTEXT: If something is white then it is not smart.\nFOL: all x y. (White(x) -> -Smart(x))\nTEXT: If something is quiet and cold then it is round.\nFOL: all x y. (Quiet(x) & Cold(x) -> Round(x))\nTEXT: All white things are not round.\nFOL: all x. (White(x) -> -Round(x))\nTEXT: If Erin is round then Erin is young.\nFOL: all x y. (Erin(x) & Round(x) -> -Young(x))\nTEXT: If something is round and not nice then it is not quiet.\nFOL: all x y. (Round(x) & -Nice(x) -> -Quiet(x))\nTEXT: Erin is round.\nFOL: Round(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is young.\nFOL: all x. (Anne(x) -> Young(x))\nTEXT: Bob is not cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Erin is quiet.\nFOL: all x. (Erin(x) -> Quiet(x))\nTEXT: If Anne is round then Anne is not young.\nFOL: all x y. (Anne(x) & Round(x) -> -Young(x))\nTEXT: Young things are not white.\nFOL: all x. (Young(x) -> -White(x))\nTEXT: If Erin is quiet then Erin is cold.\nFOL: all x y. (Erin(x) & Quiet(x) -> -Cold(x))\nTEXT: If something is white then it is not smart.\nFOL: all x y. (White(x) -> -Smart(x))\nTEXT: If something is quiet and cold then it is round.\nFOL: all x y. (Quiet(x) & Cold(x) -> Round(x))\nTEXT: All white things are not round.\nFOL: all x. (White(x) -> -Round(x))\nTEXT: If Erin is round then Erin is young.\nFOL: all x y. (Erin(x) & Round(x) -> -Young(x))\nTEXT: If something is round and not nice then it is not quiet.\nFOL: all x y. (Round(x) & -Nice(x) -> -Quiet(x))\nTEXT: Erin is round.\nFOL: Erin(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is young.\nFOL: all x. (Anne(x) -> Young(x))\nTEXT: Bob is not cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Erin is quiet.\nFOL: all x. (Erin(x) -> Quiet(x))\nTEXT: If Anne is round then Anne is not young.\nFOL: all x y. (Anne(x) & Round(x) -> -Young(x))\nTEXT: Young things are not white.\nFOL: all x. (Young(x) -> -White(x))\nTEXT: If Erin is quiet then Erin is cold.\nFOL: all x y. (Erin(x) & Quiet(x) -> -Cold(x))\nTEXT: If something is white then it is not smart.\nFOL: all x y. (White(x) -> -Smart(x))\nTEXT: If something is quiet and cold then it is round.\nFOL: all x y. (Quiet(x) & Cold(x) -> Round(x))\nTEXT: All white things are not round.\nFOL: all x. (White(x) -> -Round(x))\nTEXT: If Erin is round then Erin is young.\nFOL: all x y. (Erin(x) & Round(x) -> Young(x))\nTEXT: If something is round and not nice then it is not quiet.\nFOL: all x y. (Round(x) & -Nice(x) -> -Quiet(x))\nTEXT: Erin is round.\nFOL: Erin(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is young.\nFOL: all x. (Anne(x) -> Young(x))\nTEXT: Bob is not cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Erin is quiet.\nFOL: all x. (Erin(x) -> Quiet(x))\nTEXT: If Anne is round then Anne is not young.\nFOL: all x y. (Anne(x) & Round(x) -> -Young(x))\nTEXT: Young things are not white.\nFOL: all x. (Young(x) -> -White(x))\nTEXT: If Erin is quiet then Erin is cold.\nFOL: all x y. (Erin(x) & Quiet(x) -> -Cold(x))\nTEXT: If something is white then it is not smart.\nFOL: all x y. (Something(x) & White(x) -> -Smart(x))\nTEXT: If something is quiet and cold then it is round.\nFOL: all x y. (Something(x) & Quiet(x) & Cold(x) -> Round(x))\nTEXT: All white things are not round.\nFOL: all x. (White(x) -> -Round(x))\nTEXT: If Erin is round then Erin is young.\nFOL: all x y. (Erin(x) & Round(x) -> -Young(x))\nTEXT: If something is round and not nice then it is not quiet.\nFOL: all x y. (Something(x) & Round(x) & -Nice(x) -> -Quiet(x))\nTEXT: Erin is round.\nFOL: Round(erin)\n</EVALUATE>"
  ]
 },
 {
  "index": 44,
  "responses": [
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x. (Young(x) & -Cold(x) -> NamedAlan(x))\nTEXT: Charlie is kind and nice and looks green.\nFOL: all x. (Kind(x) & Nice(x) & Green(x))\nTEXT: Fred may be round, but he is also kind.\nFOL: all x. (Round(x) & Kind(x))\nTEXT: Harry seems to be round.\nFOL: all x. (Round(x) & -Nice(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & Nice(x) & Red(x))\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: all x. (Young(x) & -Cold(x) & Green(x) & Nice(x))\nTEXT: People who are young and blue are also red.\nFOL: all x. (Young(x) & Blue(x) & Red(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Big(x) & -Cold(x) & Red(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (Young(x) & Age(x) & Round(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Young(x) & Red(x) & Rough(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & -Cold(x) & Blue(x))\nTEXT: Harry is round.\nFOL: Round(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x. (Young(x) & -Cold(x) -> NamedAlan(x))\nTEXT: Charlie is kind and nice and looks green.\nFOL: all x. (Kind(x) & Nice(x) & Green(x))\nTEXT: Fred may be round, but he is also kind.\nFOL: all x. (Round(x) & Kind(x))\nTEXT: Harry seems to be round.\nFOL: all x. (Round(x) & -Nice(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & Nice(x) & Red(x))\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: all x. (Young(x) & -Cold(x) & Green(x) & Nice(x))\nTEXT: People who are young and blue are also red.\nFOL: all x. (Young(x) & Blue(x) & Red(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Big(x) & Rough(x) & -Cold(x) & Red(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (Young(x) & Age(x) & Round(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Young(x) & Red(x) & Rough(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & -Cold(x) & Blue(x))\nTEXT: Harry is round.\nFOL: Round(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x. (Young(x) & -Cold(x) -> NamedAlan(x))\nTEXT: Charlie is kind and nice and looks green.\nFOL: all x. (Kind(x) & Nice(x) & Green(x))\nTEXT: Fred may be round, but he is also kind.\nFOL: all x. (Round(x) & Kind(x))\nTEXT: Harry seems to be round.\nFOL: all x. (Round(x) & -Nice(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & Nice(x) & Red(x))\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: all x. (Young(x) & -Cold(x) & Green(x) & Nice(x))\nTEXT: People who are young and blue are also red.\nFOL: all x. (Young(x) & Blue(x) & Red(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Big(x) & Rough(x) & -Cold(x) & Red(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (Young(x) & Age(x) & -Heart(x) & Round(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Young(x) & Red(x) & -Hands(x) & Rough(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & -Cold(x) & Blue(x))\nTEXT: Harry is round.\nFOL: Round(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x. (Young(x) & -Cold(x) -> NamedAlan(x))\nTEXT: Charlie is kind and nice and looks green.\nFOL: all x. (Kind(x) & Nice(x) & Green(x))\nTEXT: Fred may be round, but he is also kind.\nFOL: all x. (Round(x) & Kind(x))\nTEXT: Harry seems to be round.\nFOL: all x. (Round(x) & -Nice(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & Nice(x) & Red(x))\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: all x. (Young(x) & -Cold(x) & Green(x) & Nice(x))\nTEXT: People who are young and blue are also red.\nFOL: all x. (Young(x) & Blue(x) & Red(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Big(x) & -Cold(x) & Red(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (Young(x) & Age(x) & Round(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Young(x) & Red(x) & Rough(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & -Cold(x) & Blue(x))\nTEXT: Harry is round.\nFOL: Round(harry)",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x. (Young(x) & -Cold(x) -> NamedAlan(x))\nTEXT: Charlie is kind and nice and looks green.\nFOL: all x. (Kind(x) & Nice(x) & Green(x))\nTEXT: Fred may be round, but he is also kind.\nFOL: all x. (Round(x) & Kind(x))\nTEXT: Harry seems to be round.\nFOL: all x. (Round(x) & -Nice(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & Nice(x) & Red(x))\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: all x. (Young(x) & -Cold(x) & Green(x) & Nice(x))\nTEXT: People who are young and blue are also red.\nFOL: all x. (Young(x) & Blue(x) & Red(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Big(x) & -Cold(x) & Red(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (Young(x) & Age(x) & Round(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Young(x) & Red(x) & Rough(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & -Cold(x) & Blue(x))\nTEXT: Harry is round.\nFOL: all x. (Round(x) & -Nice(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 45,
  "responses": [
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: all x. (Alan(x) -> Round(x))\nTEXT: That guy Bob sure is nice.\nFOL: all x. (Bob(x) -> Nice(x))\nTEXT: Charlie is green and cold too.\nFOL: all x. (Charlie(x) -> (Green(x) & Cold(x)))\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: all x. (Fred(x) -> (Green(x) & Blue(x)))\nTEXT: If a kind person is green and a bit blue then they are also nice.\nFOL: all x. (Kind(x) -> (Green(x) & Blue(x)))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) -> (Nice(x) & Red(x)))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) -> Big(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: all x. (Blue(x) & Red(x) & Nice(x) -> Young(x))\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (Cold(x) -> Act(x))\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: all x. (Cold(x) & Rough(x) & Red(x) -> Kind(x))\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) -> Red(x))\nTEXT: Bob is not kind.\nFOL: -Kind(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: all x. (Alan(x) -> Round(x))\nTEXT: That guy Bob sure is nice.\nFOL: all x. (Bob(x) -> Nice(x))\nTEXT: Charlie is green and cold too.\nFOL: all x. (Charlie(x) -> (Green(x) & Cold(x)))\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: all x. (Fred(x) -> (Green(x) & Blue(x)))\nTEXT: If a kind person is green and a bit blue then they are also nice.\nFOL: all x. (Kind(x) -> (Green(x) & Blue(x)))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) -> (Nice(x) & Red(x)))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) -> Big(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: all x. (Blue(x) & Red(x) & Nice(x) -> Young(x))\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (Cold(x) -> Act(x))\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: some x. (Cold(x) -> (Rough(x) & Red(x)))\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) -> Red(x))\nTEXT: Bob is not kind.\nFOL: -Kind(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: all x. (Alan(x) -> Round(x))\nTEXT: That guy Bob sure is nice.\nFOL: all x. (Bob(x) -> Nice(x))\nTEXT: Charlie is green and cold too.\nFOL: all x. (Charlie(x) -> (Green(x) & Cold(x)))\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: all x. (Fred(x) -> (Green(x) & Blue(x)))\nTEXT: If a kind person is green and a bit blue then they are also nice.\nFOL: all x. (Kind(x) & Green(x) & Blue(x) & Nice(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & Nice(x) & Red(x))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) & Big(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: all x. (Blue(x) & Red(x) & Nice(x) & Young(x))\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (Cold(x) & Nice(x))\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: all x. (Cold(x) & Rough(x) & Red(x) & Kind(x))\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) & Red(x))\nTEXT: Bob is not kind.\nFOL: -Kind(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: all x. (Alan(x) -> Round(x))\nTEXT: That guy Bob sure is nice.\nFOL: all x. (Bob(x) -> Nice(x))\nTEXT: Charlie is green and cold too.\nFOL: all x. (Charlie(x) -> (Green(x) & Cold(x)))\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: all x. (Fred(x) -> (Green(x) & Blue(x)))\nTEXT: If a kind person is green and a bit blue then they are also nice.\nFOL: all x. (Kind(x) & Green(x) & Blue(x) & Nice(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & Nice(x) & Red(x))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) & Big(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: all x. (Blue(x) & Red(x) & Nice(x) & Young(x))\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (Cold(x) & Nice(x))\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: some x. (Cold(x) & Rough(x) & Red(x) & Kind(x))\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) & Red(x))\nTEXT: Bob is not kind.\nFOL: -Kind(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: all x. (Alan(x) -> Round(x))\nTEXT: That guy Bob sure is nice.\nFOL: all x. (Bob(x) -> Nice(x))\nTEXT: Charlie is green and cold too.\nFOL: all x. (Charlie(x) -> (Green(x) & Cold(x)))\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: all x. (Fred(x) -> (Green(x) & Blue(x)))\nTEXT: If a kind person is green and a bit blue then they are also nice.\nFOL: all x. (Kind(x) & Green(x) & Blue(x) -> Nice(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & Nice(x) & Red(x))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) & Big(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: all x. (Blue(x) & Red(x) & Nice(x) & Young(x))\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (Cold(x) & Nice(x))\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: some x. (Cold(x) & Rough(x) & Red(x) & Nice(x))\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) & Red(x))\nTEXT: Bob is not kind.\nFOL: -Kind(bob)\n</EVALUATE>"
  ]
 },
 {
  "index": 46,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is blue.\nFOL: all x. (BaldEagle(x) -> Blue(x))\nTEXT: The bald eagle is not red.\nFOL: all x. (BaldEagle(x) -> NotRed(x))\nTEXT: The bald eagle likes the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> Like(x, cat))\nTEXT: The bald eagle likes the cow.\nFOL: all x. (BaldEagle(x) & Cow(x) -> Like(x, cow))\nTEXT: The bald eagle does not visit the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> NotVisit(x, tiger))\nTEXT: The cat is kind.\nFOL: all x. (Cat(x) -> Kind(x))\nTEXT: The cat is red.\nFOL: all x. (Cat(x) -> Red(x))\nTEXT: The cat needs the tiger.\nFOL: all x. (Cat(x) & Tiger(x) -> Need(x, tiger))\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\nTEXT: The tiger is big.\nFOL: all x. (Tiger(x) -> Big(x))\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) -> Blue(x))\nTEXT: The tiger likes the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> Like(x, cow))\nTEXT: The tiger needs the bald eagle.\nFOL: all x. (Tiger(x) & BaldEagle(x) -> Need(x, baldEagle(x)))\nTEXT: The tiger needs the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> Need(x, cat))\nTEXT: The tiger visits the bald eagle.\nFOL: all x. (Tiger(x) & BaldEagle(x) -> Visit(x, baldEagle(x)))\nTEXT: The tiger does not visit the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> NotVisit(x, cow))\nTEXT: If something likes the bald eagle then the bald eagle is not green.\nFOL: all x. (Like(x, baldEagle(x)) -> NotGreen(x))\nTEXT: Big things are green.\nFOL: all x. (Big(x) -> Green(x))\nTEXT: If something is blue then it needs the bald eagle.\nFOL: all x. (Blue(x) -> Need(x, baldEagle(x)))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Green(x) -> Need(x, baldEagle(x)))\nTEXT: If the cat likes the cow and the cat is not big then the cow needs the cat.\nFOL: all x. (Cat(x) & Cow(x) & NotBig(x) -> Need(x, cat))\nTEXT: If something is red then it visits the cat.\nFOL: all x. (Red(x) -> Visit(x, cat))\nTEXT: If something visits the cat then the cat likes the bald eagle.\nFOL: all x. (Visit(x, cat) -> Like(x, cat))\nTEXT: If something likes the bald eagle then it visits the bald eagle.\nFOL: all x. (Like(x, baldEagle(x)) -> Visit(x, baldEagle(x)))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) -> Green(x))",
   "<EVALUATE>\nTEXT: The bald eagle is blue.\nFOL: all x. (BaldEagle(x) -> Blue(x))\nTEXT: The bald eagle is not red.\nFOL: all x. (BaldEagle(x) -> NotRed(x))\nTEXT: The bald eagle likes the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> Like(x, cat))\nTEXT: The bald eagle likes the cow.\nFOL: all x. (BaldEagle(x) & Cow(x) -> Like(x, cow))\nTEXT: The bald eagle does not visit the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> NotVisit(x, tiger))\nTEXT: The cat is kind.\nFOL: all x. (Cat(x) -> Kind(x))\nTEXT: The cat is red.\nFOL: all x. (Cat(x) -> Red(x))\nTEXT: The cat needs the tiger.\nFOL: all x. (Cat(x) & Tiger(x) -> Need(x, tiger))\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\nTEXT: The tiger is big.\nFOL: all x. (Tiger(x) -> Big(x))\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) -> Blue(x))\nTEXT: The tiger likes the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> Like(x, cow))\nTEXT: The tiger needs the bald eagle.\nFOL: all x. (Tiger(x) & BaldEagle(x) -> Need(x, baldEagle(x)))\nTEXT: The tiger needs the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> Need(x, cat))\nTEXT: The tiger visits the bald eagle.\nFOL: all x. (Tiger(x) & BaldEagle(x) -> Visit(x, baldEagle(x)))\nTEXT: The tiger does not visit the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> NotVisit(x, cow))\nTEXT: If something likes the bald eagle then the bald eagle is not green.\nFOL: all x. (Like(x, baldEagle(x)) -> NotGreen(x))\nTEXT: Big things are green.\nFOL: all x. (Big(x) -> Green(x))\nTEXT: If something is blue then it needs the bald eagle.\nFOL: all x. (Blue(x) -> Need(x, baldEagle(x)))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Green(x) -> Need(x, baldEagle(x)))\nTEXT: If the cat likes the cow and the cat is not big then the cow needs the cat.\nFOL: all x. (Cat(x) & Cow(x) & NotBig(x) -> Need(x, cat))\nTEXT: If something is red then it visits the cat.\nFOL: all x. (Red(x) -> Visit(x, cat))\nTEXT: If something visits the cat then the cat likes the bald eagle.\nFOL: all x. (Visit(x, cat) -> Like(x, cat))\nTEXT: If something likes the bald eagle then it visits the bald eagle.\nFOL: all x. (Like(x, baldEagle(x)) -> Visit(x, baldEagle(x)))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) -> Green(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is blue.\nFOL: all x. (BaldEagle(x) -> Blue(x))\nTEXT: The bald eagle is not red.\nFOL: all x. (BaldEagle(x) -> NotRed(x))\nTEXT: The bald eagle likes the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> Like(x, cat))\nTEXT: The bald eagle likes the cow.\nFOL: all x. (BaldEagle(x) & Cow(x) -> Like(x, cow))\nTEXT: The bald eagle does not visit the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> NotVisit(x, tiger))\nTEXT: The cat is kind.\nFOL: all x. (Cat(x) -> Kind(x))\nTEXT: The cat is red.\nFOL: all x. (Cat(x) -> Red(x))\nTEXT: The cat needs the tiger.\nFOL: all x. (Cat(x) & Tiger(x) -> Need(x, tiger))\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\nTEXT: The tiger is big.\nFOL: all x. (Tiger(x) -> Big(x))\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) -> Blue(x))\nTEXT: The tiger likes the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> Like(x, cow))\nTEXT: The tiger needs the bald eagle.\nFOL: all x. (Tiger(x) & BaldEagle(x) -> Need(x, baldEagle(x)))\nTEXT: The tiger needs the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> Need(x, cat))\nTEXT: The tiger visits the bald eagle.\nFOL: all x. (Tiger(x) & BaldEagle(x) -> Visit(x, baldEagle(x)))\nTEXT: The tiger does not visit the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> NotVisit(x, cow))\nTEXT: If something likes the bald eagle then the bald eagle is not green.\nFOL: all x. (Like(x, baldEagle(x)) -> NotGreen(x))\nTEXT: Big things are green.\nFOL: all x. (Big(x) -> Green(x))\nTEXT: If something is blue then it needs the bald eagle.\nFOL: all x. (Blue(x) -> Need(x, baldEagle(x)))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Green(x) -> Need(x, baldEagle(x)))\nTEXT: If the cat likes the cow and the cat is not big then the cow needs the cat.\nFOL: all x. (Cat(x) & Cow(x) & NotBig(x) -> Need(x, cat))\nTEXT: If something is red then it visits the cat.\nFOL: all x. (Red(x) -> Visit(x, cat))\nTEXT: If something visits the cat then the cat likes the bald eagle.\nFOL: all x. (Visit(x, cat) -> Like(x, baldEagle(x)))\nTEXT: If something likes the bald eagle then it visits the bald eagle.\nFOL: all x. (Like(x, baldEagle(x)) -> Visit(x, baldEagle(x)))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) -> Green(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is blue.\nFOL: all x. (BaldEagle(x) -> Blue(x))\nTEXT: The bald eagle is not red.\nFOL: all x. (BaldEagle(x) -> NotRed(x))\nTEXT: The bald eagle likes the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> Like(x, cat))\nTEXT: The bald eagle likes the cow.\nFOL: all x. (BaldEagle(x) & Cow(x) -> Like(x, cow))\nTEXT: The bald eagle does not visit the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> NotVisit(x, tiger))\nTEXT: The cat is kind.\nFOL: all x. (Cat(x) -> Kind(x))\nTEXT: The cat is red.\nFOL: all x. (Cat(x) -> Red(x))\nTEXT: The cat needs the tiger.\nFOL: all x. (Cat(x) & Tiger(x) -> Need(x, tiger))\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\nTEXT: The tiger is big.\nFOL: all x. (Tiger(x) -> Big(x))\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) -> Blue(x))\nTEXT: The tiger likes the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> Like(x, cow))\nTEXT: The tiger needs the bald eagle.\nFOL: all x. (Tiger(x) & BaldEagle(x) -> Need(x, baldEagle(x)))\nTEXT: The tiger needs the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> Need(x, cat))\nTEXT: The tiger visits the bald eagle.\nFOL: all x. (Tiger(x) & BaldEagle(x) -> Visit(x, baldEagle(x)))\nTEXT: The tiger does not visit the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> NotVisit(x, cow))\nTEXT: If something likes the bald eagle then the bald eagle is not green.\nFOL: all x. (Like(x, baldEagle(x)) -> NotGreen(x))\nTEXT: Big things are green.\nFOL: all x. (Big(x) -> Green(x))\nTEXT: If something is blue then it needs the bald eagle.\nFOL: all x. (Blue(x) -> Need(x, baldEagle(x)))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Green(x) -> Need(x, baldEagle(x)))\nTEXT: If the cat likes the cow and the cat is not big then the cow needs the cat.\nFOL: all x. (Cat(x) & Cow(x) & NotBig(x) -> Need(x, cat))\nTEXT: If something is red then it visits the cat.\nFOL: all x. (Red(x) -> Visit(x, cat))\nTEXT: If something visits the cat then the cat likes the bald eagle.\nFOL: all x. (Visit(x, cat) -> Like(x, baldEagle(x)))\nTEXT: If something likes the bald eagle then it visits the bald eagle.\nFOL: all x. (Like(x, baldEagle(x)) -> Visit(x, baldEagle(x)))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) -> Green(x))",
   "<EVALUATE>\nTEXT: The bald eagle is blue.\nFOL: all x. (BaldEagle(x) -> Blue(x))\nTEXT: The bald eagle is not red.\nFOL: all x. (BaldEagle(x) -> NotRed(x))\nTEXT: The bald eagle likes the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> Like(x, cat))\nTEXT: The bald eagle likes the cow.\nFOL: all x. (BaldEagle(x) & Cow(x) -> Like(x, cow))\nTEXT: The bald eagle does not visit the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> NotVisit(x, tiger))\nTEXT: The cat is kind.\nFOL: all x. (Cat(x) -> Kind(x))\nTEXT: The cat is red.\nFOL: all x. (Cat(x) -> Red(x))\nTEXT: The cat needs the tiger.\nFOL: all x. (Cat(x) & Tiger(x) -> Need(x, tiger))\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\nTEXT: The tiger is big.\nFOL: all x. (Tiger(x) -> Big(x))\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) -> Blue(x))\nTEXT: The tiger likes the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> Like(x, cow))\nTEXT: The tiger needs the bald eagle.\nFOL: all x. (Tiger(x) & BaldEagle(x) -> Need(x, baldEagle(x)))\nTEXT: The tiger needs the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> Need(x, cat))\nTEXT: The tiger visits the bald eagle.\nFOL: all x. (Tiger(x) & BaldEagle(x) -> Visit(x, baldEagle(x)))\nTEXT: The tiger does not visit the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> NotVisit(x, cow))\nTEXT: If something likes the bald eagle then the bald eagle is not green.\nFOL: all x. (Like(x, baldEagle(x)) & BaldEagle(x) -> NotGreen(x))\nTEXT: Big things are green.\nFOL: all x. (Big(x) & Green(x))\nTEXT: If something is blue then it needs the bald eagle.\nFOL: all x. (Blue(x) & Need(x, baldEagle(x)))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Green(x) & Need(x, baldEagle(x)))\nTEXT: If the cat likes the cow and the cat is not big then the cow needs the cat.\nFOL: all x. (Cat(x) & Cow(x) & NotBig(x) -> Need(x, cat))\nTEXT: If something is red then it visits the cat.\nFOL: all x. (Red(x) & Visit(x, cat))\nTEXT: If something visits the cat then the cat likes the bald eagle.\nFOL: all x. (Visit(x, cat) & Like(x, cat))\nTEXT: If something likes the bald eagle then it visits the bald eagle.\nFOL: all x. (Like(x, baldEagle(x)) & Visit(x, baldEagle(x)))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) -> Green(x))"
  ]
 },
 {
  "index": 47,
  "responses": [
   "<EVALUATE>\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) -> Blue(x))\nTEXT: If the tiger is blue then the tiger is big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: If the tiger is big and the tiger is blue then the tiger is not round.\nFOL: all x. (Big(x) & Blue(x) -> -Round(x))\nTEXT: If the tiger is big then the tiger is blue.\nFOL: all x. (Big(x) -> Blue(x))\nTEXT: If the tiger is not round then the tiger is not nice.\nFOL: all x. (NotRound(x) -> -Nice(x))\nTEXT: If the tiger is not round and the tiger is not big then the tiger is not nice.\nFOL: all x. (NotRound(x) & -Big(x) -> -Nice(x))\nTEXT: If something is round and nice then it is not rough.\nFOL: all x. (Round(x) & Nice(x) -> -Rough(x))\nTEXT: The tiger is not blue.\nFOL: -Blue(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) -> Blue(x))\nTEXT: If the tiger is blue then the tiger is big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: If the tiger is big and the tiger is blue then the tiger is not round.\nFOL: all x. (Big(x) & Blue(x) -> -Round(x))\nTEXT: If the tiger is big then the tiger is blue.\nFOL: all x. (Big(x) -> Blue(x))\nTEXT: If the tiger is not round then the tiger is not nice.\nFOL: all x. (NotRound(x) -> -Nice(x))\nTEXT: If the tiger is not round and the tiger is not big then the tiger is not nice.\nFOL: all x. (NotRound(x) & Big(x) -> -Nice(x))\nTEXT: If something is round and nice then it is not rough.\nFOL: all x. (Round(x) & Nice(x) -> -Rough(x))\nTEXT: The tiger is not blue.\nFOL: -Blue(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) -> Blue(x))\nTEXT: If the tiger is blue then the tiger is big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: If the tiger is big and the tiger is blue then the tiger is not round.\nFOL: all x. (Big(x) & Blue(x) -> -Round(x))\nTEXT: If the tiger is big then the tiger is blue.\nFOL: all x. (Big(x) -> Blue(x))\nTEXT: If the tiger is not round then the tiger is not nice.\nFOL: all x. (NotRound(x) -> -Nice(x))\nTEXT: If the tiger is not round and the tiger is not big then the tiger is not nice.\nFOL: all x. (NotRound(x) & -Big(x) -> -Nice(x))\nTEXT: If something is round and nice then it is not rough.\nFOL: all x. (Round(x) & Nice(x) -> -Rough(x))\nTEXT: The tiger is not blue.\nFOL: not Blue(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) -> Blue(x))\nTEXT: If the tiger is blue then the tiger is big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: If the tiger is big and the tiger is blue then the tiger is not round.\nFOL: all x. (Big(x) & Blue(x) -> -Round(x))\nTEXT: If the tiger is big then the tiger is blue.\nFOL: all x. (Big(x) -> Blue(x))\nTEXT: If the tiger is not round then the tiger is not nice.\nFOL: all x. (NotRound(x) -> -Nice(x))\nTEXT: If the tiger is not round and the tiger is not big then the tiger is not nice.\nFOL: all x. (NotRound(x) & -Big(x) -> -Nice(x))\nTEXT: If something is round and nice then it is not rough.\nFOL: all x. (Round(x) & Nice(x) -> -Rough(x))\nTEXT: The tiger is not blue.\nFOL: -Blue(tiger)",
   "<EVALUATE>\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) -> Blue(x))\nTEXT: If the tiger is blue then the tiger is big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: If the tiger is big and the tiger is blue then the tiger is not round.\nFOL: all x. (Big(x) & Blue(x) -> -Round(x))\nTEXT: If the tiger is big then the tiger is blue.\nFOL: all x. (Big(x) -> -Blue(x))\nTEXT: If the tiger is not round then the tiger is not nice.\nFOL: all x. (NotRound(x) -> -Nice(x))\nTEXT: If the tiger is not round and the tiger is not big then the tiger is not nice.\nFOL: all x. (NotRound(x) & -Big(x) -> -Nice(x))\nTEXT: If something is round and nice then it is not rough.\nFOL: all x. (Round(x) & Nice(x) -> -Rough(x))\nTEXT: The tiger is not blue.\nFOL: -Blue(tiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 48,
  "responses": [
   "<EVALUATE>\nTEXT: The cow eats the dog.\nFOL: all x y. (Cow(x) & Dog(y) & Eat(x, y) -> True)\nTEXT: The cow eats the tiger.\nFOL: all x y. (Cow(x) & Tiger(y) & Eat(x, y) -> True)\nTEXT: The cow is kind.\nFOL: all x. (Cow(x) -> Kind(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\nTEXT: The cow likes the dog.\nFOL: all x y. (Cow(x) & Dog(y) & Like(x, y) -> True)\nTEXT: The cow needs the dog.\nFOL: all x y. (Cow(x) & Dog(y) & Need(x, y) -> True)\nTEXT: The dog likes the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & Like(x, y) -> True)\nTEXT: The dog needs the cow.\nFOL: all x y. (Dog(x) & Cow(y) & Need(x, y) -> True)\nTEXT: The dog needs the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & Need(x, y) -> True)\nTEXT: The tiger eats the cow.\nFOL: all x y. (Tiger(x) & Cow(y) & Eat(x, y) -> True)\nTEXT: The tiger is kind.\nFOL: all x. (Tiger(x) -> Kind(x))\nTEXT: The tiger is round.\nFOL: all x. (Tiger(x) -> Round(x))\nTEXT: The tiger likes the dog.\nFOL: all x y. (Tiger(x) & Dog(y) & Like(x, y) -> True)\nTEXT: The tiger needs the cow.\nFOL: all x y. (Tiger(x) & Cow(y) & Need(x, y) -> True)\nTEXT: The tiger needs the dog.\nFOL: all x y. (Tiger(x) & Dog(y) & Need(x, y) -> True)\nTEXT: If someone likes the cow then the cow needs the tiger.\nFOL: all x y. (Someone(x) & Like(x, y) & Cow(x) & Tiger(y) & Need(x, y) -> True)\nTEXT: If someone is kind then they like the dog.\nFOL: all x y. (Someone(x) & Kind(x) & Dog(y) & Like(x, y) -> True)\nTEXT: If someone is round then they like the dog.\nFOL: all x y. (Someone(x) & Round(x) & Dog(y) & Like(x, y) -> True)\nTEXT: If the cow is not round then the cow is not rough.\nFOL: all x. (Cow(x) & NotRound(x) -> NotRough(x))\nTEXT: If the dog eats the cow and the dog likes the tiger then the tiger is red.\nFOL: all x y. (Dog(x) & Eat(x, y) & Dog(x) & Like(x, y) & Tiger(y) & Red(x) -> True)\nTEXT: If someone likes the cow then they are rough.\nFOL: all x y. (Someone(x) & Like(x, y) & Cow(x) & Rough(x) -> True)\nTEXT: If someone eats the cow and the cow needs the dog then the dog likes the cow.\nFOL: all x y. (Someone(x) & Eat(x, y) & Cow(x) & Need(x, y) & Dog(y) & Like(x, y) -> True)\nTEXT: If someone likes the tiger and the tiger likes the dog then the dog eats the cow.\nFOL: all x y. (Someone(x) & Like(x, y) & Tiger(y) & Like(x, y) & Dog(y) & Eat(x, y) -> True)\nTEXT: The cow does not like the cow.\nFOL: not all x. (Cow(x) & Like(x, y) & Cow(y) -> Like(x, y))",
   "<EVALUATE>\nTEXT: The cow eats the dog.\nFOL: all x y. (Cow(x) & Dog(y) & Eat(x, y) -> True)\nTEXT: The cow eats the tiger.\nFOL: all x y. (Cow(x) & Tiger(y) & Eat(x, y) -> True)\nTEXT: The cow is kind.\nFOL: all x. (Cow(x) -> Kind(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\nTEXT: The cow likes the dog.\nFOL: all x y. (Cow(x) & Dog(y) & Like(x, y) -> True)\nTEXT: The cow needs the dog.\nFOL: all x y. (Cow(x) & Dog(y) & Need(x, y) -> True)\nTEXT: The dog likes the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & Like(x, y) -> True)\nTEXT: The dog needs the cow.\nFOL: all x y. (Dog(x) & Cow(y) & Need(x, y) -> True)\nTEXT: The dog needs the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & Need(x, y) -> True)\nTEXT: The tiger eats the cow.\nFOL: all x y. (Tiger(x) & Cow(y) & Eat(x, y) -> True)\nTEXT: The tiger is kind.\nFOL: all x. (Tiger(x) -> Kind(x))\nTEXT: The tiger is round.\nFOL: all x. (Tiger(x) -> Round(x))\nTEXT: The tiger likes the dog.\nFOL: all x y. (Tiger(x) & Dog(y) & Like(x, y) -> True)\nTEXT: The tiger needs the cow.\nFOL: all x y. (Tiger(x) & Cow(y) & Need(x, y) -> True)\nTEXT: The tiger needs the dog.\nFOL: all x y. (Tiger(x) & Dog(y) & Need(x, y) -> True)\nTEXT: If someone likes the cow then the cow needs the tiger.\nFOL: all x y. (Someone(x) & Like(x, y) & Cow(x) & Tiger(y) & Need(x, y) -> True)\nTEXT: If someone is kind then they like the dog.\nFOL: all x y. (Someone(x) & Kind(x) & Dog(y) & Like(x, y) -> True)\nTEXT: If someone is round then they like the dog.\nFOL: all x y. (Someone(x) & Round(x) & Dog(y) & Like(x, y) -> True)\nTEXT: If the cow is not round then the cow is not rough.\nFOL: all x. (Cow(x) & NotRound(x) -> NotRough(x))\nTEXT: If the dog eats the cow and the dog likes the tiger then the tiger is red.\nFOL: all x y. (Dog(x) & Eat(x, y) & Dog(x) & Like(x, y) & Tiger(y) & Red(x) -> True)\nTEXT: If someone likes the cow then they are rough.\nFOL: all x y. (Someone(x) & Like(x, y) & Cow(x) & Rough(x) -> True)\nTEXT: If someone eats the cow and the cow needs the dog then the dog likes the cow.\nFOL: all x y. (Someone(x) & Eat(x, y) & Cow(x) & Need(x, y) & Dog(y) & Like(x, y) -> True)\nTEXT: If someone likes the tiger and the tiger likes the dog then the dog eats the cow.\nFOL: all x y. (Someone(x) & Like(x, y) & Tiger(y) & Like(x, y) & Dog(y) & Eat(x, y) -> True)\nTEXT: The cow does not like the cow.\nFOL: not all x. (Cow(x) & Like(x, y) & Cow(y) -> Like(x, y))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow eats the dog.\nFOL: all x y. (Cow(x) & Dog(y) & Eat(x, y) -> True)\nTEXT: The cow eats the tiger.\nFOL: all x y. (Cow(x) & Tiger(y) & Eat(x, y) -> True)\nTEXT: The cow is kind.\nFOL: all x. (Cow(x) -> Kind(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\nTEXT: The cow likes the dog.\nFOL: all x y. (Cow(x) & Dog(y) & Like(x, y) -> True)\nTEXT: The cow needs the dog.\nFOL: all x y. (Cow(x) & Dog(y) & Need(x, y) -> True)\nTEXT: The dog likes the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & Like(x, y) -> True)\nTEXT: The dog needs the cow.\nFOL: all x y. (Dog(x) & Cow(y) & Need(x, y) -> True)\nTEXT: The dog needs the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & Need(x, y) -> True)\nTEXT: The tiger eats the cow.\nFOL: all x y. (Tiger(x) & Cow(y) & Eat(x, y) -> True)\nTEXT: The tiger is kind.\nFOL: all x. (Tiger(x) -> Kind(x))\nTEXT: The tiger is round.\nFOL: all x. (Tiger(x) -> Round(x))\nTEXT: The tiger likes the dog.\nFOL: all x y. (Tiger(x) & Dog(y) & Like(x, y) -> True)\nTEXT: The tiger needs the cow.\nFOL: all x y. (Tiger(x) & Cow(y) & Need(x, y) -> True)\nTEXT: The tiger needs the dog.\nFOL: all x y. (Tiger(x) & Dog(y) & Need(x, y) -> True)\nTEXT: If someone likes the cow then the cow needs the tiger.\nFOL: all x y. (Someone(x) & Like(x, y) & Cow(x) & Tiger(y) & Need(x, y) -> True)\nTEXT: If someone is kind then they like the dog.\nFOL: all x y. (Someone(x) & Kind(x) & Dog(y) & Like(x, y) -> True)\nTEXT: If someone is round then they like the dog.\nFOL: all x y. (Someone(x) & Round(x) & Dog(y) & Like(x, y) -> True)\nTEXT: If the cow is not round then the cow is not rough.\nFOL: all x. (Cow(x) & NotRound(x) -> NotRough(x))\nTEXT: If the dog eats the cow and the dog likes the tiger then the tiger is red.\nFOL: all x y. (Dog(x) & Eat(x, y) & Dog(x) & Like(x, y) & Tiger(y) & Red(x) -> True)\nTEXT: If someone likes the cow then they are rough.\nFOL: all x y. (Someone(x) & Like(x, y) & Cow(x) & Rough(x) -> True)\nTEXT: If someone eats the cow and the cow needs the dog then the dog likes the cow.\nFOL: all x y. (Someone(x) & Eat(x, y) & Cow(x) & Need(x, y) & Dog(y) & Like(x, y) -> True)\nTEXT: If someone likes the tiger and the tiger likes the dog then the dog eats the cow.\nFOL: all x y. (Someone(x) & Like(x, y) & Tiger(y) & Like(x, y) & Dog(y) & Eat(x, y) -> True)\nTEXT: The cow does not like the cow.\nFOL: not all x. (Cow(x) & Like(x, y) & Cow(x) & -Like(x, y) -> True)",
   "<EVALUATE>\nTEXT: The cow eats the dog.\nFOL: all x y. (Cow(x) & Dog(y) & Eat(x, y) -> True)\nTEXT: The cow eats the tiger.\nFOL: all x y. (Cow(x) & Tiger(y) & Eat(x, y) -> True)\nTEXT: The cow is kind.\nFOL: all x. (Cow(x) -> Kind(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\nTEXT: The cow likes the dog.\nFOL: all x y. (Cow(x) & Dog(y) & Like(x, y) -> True)\nTEXT: The cow needs the dog.\nFOL: all x y. (Cow(x) & Dog(y) & Need(x, y) -> True)\nTEXT: The dog likes the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & Like(x, y) -> True)\nTEXT: The dog needs the cow.\nFOL: all x y. (Dog(x) & Cow(y) & Need(x, y) -> True)\nTEXT: The dog needs the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & Need(x, y) -> True)\nTEXT: The tiger eats the cow.\nFOL: all x y. (Tiger(x) & Cow(y) & Eat(x, y) -> True)\nTEXT: The tiger is kind.\nFOL: all x. (Tiger(x) -> Kind(x))\nTEXT: The tiger is round.\nFOL: all x. (Tiger(x) -> Round(x))\nTEXT: The tiger likes the dog.\nFOL: all x y. (Tiger(x) & Dog(y) & Like(x, y) -> True)\nTEXT: The tiger needs the cow.\nFOL: all x y. (Tiger(x) & Cow(y) & Need(x, y) -> True)\nTEXT: The tiger needs the dog.\nFOL: all x y. (Tiger(x) & Dog(y) & Need(x, y) -> True)\nTEXT: If someone likes the cow then the cow needs the tiger.\nFOL: all x y. (Someone(x) & Like(x, y) & Cow(x) & Tiger(y) & Need(x, y) -> True)\nTEXT: If someone is kind then they like the dog.\nFOL: all x y. (Someone(x) & Kind(x) & Dog(y) & Like(x, y) -> True)\nTEXT: If someone is round then they like the dog.\nFOL: all x y. (Someone(x) & Round(x) & Dog(y) & Like(x, y) -> True)\nTEXT: If the cow is not round then the cow is not rough.\nFOL: all x. (Cow(x) & NotRound(x) -> NotRough(x))\nTEXT: If the dog eats the cow and the dog likes the tiger then the tiger is red.\nFOL: all x y. (Dog(x) & Eat(x, y) & Dog(x) & Like(x, y) & Tiger(y) & Red(x) -> True)\nTEXT: If someone likes the cow then they are rough.\nFOL: all x y. (Someone(x) & Like(x, y) & Cow(x) & Rough(x) -> True)\nTEXT: If someone eats the cow and the cow needs the dog then the dog likes the cow.\nFOL: all x y. (Someone(x) & Eat(x, y) & Cow(x) & Need(x, y) & Dog(x) & Like(x, y) -> True)\nTEXT: If someone likes the tiger and the tiger likes the dog then the dog eats the cow.\nFOL: all x y. (Someone(x) & Like(x, y) & Tiger(y) & Like(x, y) & Dog(x) & Eat(x, y) -> True)\nTEXT: The cow does not like the cow.\nFOL: not all x. (Cow(x) & Like(x, y) & Cow(x) & -Like(x, y) -> True)",
   "<EVALUATE>\nTEXT: The cow eats the dog.\nFOL: all x y. (Cow(x) & Dog(y) & Eat(x, y) -> True)\nTEXT: The cow eats the tiger.\nFOL: all x y. (Cow(x) & Tiger(y) & Eat(x, y) -> True)\nTEXT: The cow is kind.\nFOL: all x. (Cow(x) -> Kind(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\nTEXT: The cow likes the dog.\nFOL: all x y. (Cow(x) & Dog(y) & Like(x, y) -> True)\nTEXT: The cow needs the dog.\nFOL: all x y. (Cow(x) & Dog(y) & Need(x, y) -> True)\nTEXT: The dog likes the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & Like(x, y) -> True)\nTEXT: The dog needs the cow.\nFOL: all x y. (Dog(x) & Cow(y) & Need(x, y) -> True)\nTEXT: The dog needs the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & Need(x, y) -> True)\nTEXT: The tiger eats the cow.\nFOL: all x y. (Tiger(x) & Cow(y) & Eat(x, y) -> True)\nTEXT: The tiger is kind.\nFOL: all x. (Tiger(x) -> Kind(x))\nTEXT: The tiger is round.\nFOL: all x. (Tiger(x) -> Round(x))\nTEXT: The tiger likes the dog.\nFOL: all x y. (Tiger(x) & Dog(y) & Like(x, y) -> True)\nTEXT: The tiger needs the cow.\nFOL: all x y. (Tiger(x) & Cow(y) & Need(x, y) -> True)\nTEXT: The tiger needs the dog.\nFOL: all x y. (Tiger(x) & Dog(y) & Need(x, y) -> True)\nTEXT: If someone likes the cow then the cow needs the tiger.\nFOL: all x y. (Someone(x) & Like(x, y) & Cow(x) & Tiger(y) & Need(x, y) -> True)\nTEXT: If someone is kind then they like the dog.\nFOL: all x y. (Someone(x) & Kind(x) & Dog(y) & Like(x, y) -> True)\nTEXT: If someone is round then they like the dog.\nFOL: all x y. (Someone(x) & Round(x) & Dog(y) & Like(x, y) -> True)\nTEXT: If the cow is not round then the cow is not rough.\nFOL: all x. (Cow(x) & NotRound(x) -> NotRough(x))\nTEXT: If the dog eats the cow and the dog likes the tiger then the tiger is red.\nFOL: all x y. (Dog(x) & Eat(x, y) & Dog(x) & Like(x, y) & Tiger(y) & Red(x) -> True)\nTEXT: If someone likes the cow then they are rough.\nFOL: all x y. (Someone(x) & Like(x, y) & Cow(x) & Rough(x) -> True)\nTEXT: If someone eats the cow and the cow needs the dog then the dog likes the cow.\nFOL: all x y. (Someone(x) & Eat(x, y) & Cow(x) & Need(x, y) & Dog(y) & Like(x, y) -> True)\nTEXT: If someone likes the tiger and the tiger likes the dog then the dog eats the cow.\nFOL: all x y. (Someone(x) & Like(x, y) & Tiger(y) & Like(x, y) & Dog(y) & Eat(x, y) -> True)\nTEXT: The cow does not like the cow.\nFOL: not all x. (Cow(x) & Like(x, y) & Cow(x) & -Like(x, y) -> True)\n</EVALUATE>"
  ]
 },
 {
  "index": 49,
  "responses": [
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> RoughAndCold(x))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (KindAndRed(x) & Blue(x)))\nTEXT: That guy Eric sure is nice.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x)))\nTEXT: A bit overweight, Fred is big and round.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (BigAndRound(x)))\nTEXT: He's a nice guy who is often cold.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & Cold(x)))\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & RoundAndCold(x) & Blue(x)))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Big(x) & LittleGreenInSomeAreas(x)))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Big(x) & RedInColor(x) & Young(x)))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Blue(x) & BigAndKind(x) & Green(x)))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Blue(x) & Green(x) & Red(x)))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & BlueAndRound(x) & Kind(x)))\nTEXT: Fred is not rough.\nFOL: -Rough(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> RoughAndCold(x))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (KindAndRed(x) & Blue(x)))\nTEXT: That guy Eric sure is nice.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x)))\nTEXT: A bit overweight, Fred is big and round.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (BigAndRound(x)))\nTEXT: He's a nice guy who is often cold.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & Cold(x)))\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & RoundAndCold(x) & Blue(x)))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Big(x) & LittleGreenInAreas(x)))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Big(x) & RedInColor(x) & Young(x)))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Blue(x) & BigAndKind(x) & Green(x)))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Blue(x) & Green(x) & Red(x)))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & BlueAndRound(x) & Kind(x)))\nTEXT: Fred is not rough.\nFOL: -Rough(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> RoughAndCold(x))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (KindAndRed(x) & Blue(x)))\nTEXT: That guy Eric sure is nice.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x)))\nTEXT: A bit overweight, Fred is big and round.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (BigAndRound(x)))\nTEXT: He's a nice guy who is often cold.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & Cold(x)))\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & RoundAndCold(x) & Blue(x)))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Big(x) & LittleGreenInSomeAreas(x)))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Big(x) & RedInColor(x) & Young(x)))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Blue(x) & BigAndKind(x) & Green(x)))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Blue(x) & Green(x) & Red(x)))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & BlueAndRound(x) & Kind(x)))\nTEXT: Fred is not rough.\nFOL: -KnowCharlie(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> RoughAndCold(x))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (KindAndRed(x) & Blue(x)))\nTEXT: That guy Eric sure is nice.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x)))\nTEXT: A bit overweight, Fred is big and round.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (BigAndRound(x)))\nTEXT: He's a nice guy who is often cold.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & Cold(x)))\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & RoundAndCold(x) & Blue(x)))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Big(x) & LittleGreenInSomeAreas(x)))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Big(x) & RedInColor(x) & Young(x)))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Blue(x) & BigAndKind(x) & GreenAtOnce(x)))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Blue(x) & Green(x) & Red(x)))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & BlueAndRound(x) & Kind(x)))\nTEXT: Fred is not rough.\nFOL: -Rough(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> RoughAndCold(x))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (KindAndRed(x) & Blue(x)))\nTEXT: That guy Eric sure is nice.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x)))\nTEXT: A bit overweight, Fred is big and round.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (BigAndRound(x)))\nTEXT: He's a nice guy who is often cold.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & Cold(x)))\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & RoundAndCold(x) & Blue(x)))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Big(x) & LittleGreenInSomeAreas(x)))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Big(x) & RedInColor(x) & Young(x)))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Blue(x) & BigAndKind(x) & Green(x)))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Blue(x) & Green(x) & Red(x)))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & BlueAndRound(x) & Kind(x)))\nTEXT: Fred is not rough.\nFOL: -KnowCharlie(fred) -> NotRough(fred)\n</EVALUATE>"
  ]
 },
 {
  "index": 50,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: all x. (Anne(x) -> Blue(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\nTEXT: If Fiona is nice and Fiona is not blue then Fiona is red.\nFOL: all x y. (Nice(x) & -Blue(x) -> Red(x))\nTEXT: If Gary is round then Gary is blue.\nFOL: all x y. (Round(x) -> Blue(x))\nTEXT: Round, blue things are green.\nFOL: all x y. (Round(x) & Blue(x) -> Green(x))\nTEXT: White things are big.\nFOL: all x y. (White(x) & Big(x) -> Green(x))\nTEXT: If something is green then it is big.\nFOL: all x y. (Green(x) -> Big(x))\nTEXT: If something is blue and not red then it is round.\nFOL: all x y. (Blue(x) & -Red(x) -> Round(x))\nTEXT: If Anne is red and Anne is big then Anne is white.\nFOL: all x y. (Red(x) & Big(x) -> White(x))\nTEXT: If Anne is big then Anne is white.\nFOL: all x y. (Big(x) -> White(x))\nTEXT: Gary is big.\nFOL: all x. (Gary(x) -> Big(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: all x. (Anne(x) -> Blue(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\nTEXT: If Fiona is nice and Fiona is not blue then Fiona is red.\nFOL: all x y. (Nice(x) & -Blue(x) -> Red(x))\nTEXT: If Gary is round then Gary is blue.\nFOL: all x y. (Round(x) -> Blue(x))\nTEXT: Round, blue things are green.\nFOL: all x. (Round(x) & Blue(x) -> Green(x))\nTEXT: White things are big.\nFOL: all x. (White(x) -> Big(x))\nTEXT: If something is green then it is big.\nFOL: all x y. (Green(x) -> Big(x))\nTEXT: If something is blue and not red then it is round.\nFOL: all x y. (Blue(x) & -Red(x) -> Round(x))\nTEXT: If Anne is red and Anne is big then Anne is white.\nFOL: all x y. (Red(x) & Big(x) -> White(x))\nTEXT: If Anne is big then Anne is white.\nFOL: all x y. (Big(x) -> White(x))\nTEXT: Gary is big.\nFOL: all x. (Gary(x) -> Big(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: all x. (Anne(x) -> Blue(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\nTEXT: If Fiona is nice and Fiona is not blue then Fiona is red.\nFOL: all x y. (Nice(x) & -Blue(x) -> Red(x))\nTEXT: If Gary is round then Gary is blue.\nFOL: all x y. (Round(x) -> Blue(x))\nTEXT: Round, blue things are green.\nFOL: all x y. (Round(x) & Blue(x) -> Green(x))\nTEXT: White things are big.\nFOL: all x y. (White(x) & Big(x) -> Green(x))\nTEXT: If something is green then it is big.\nFOL: all x y. (Green(x) -> Big(x))\nTEXT: If something is blue and not red then it is round.\nFOL: all x y. (Blue(x) & -Red(x) -> Round(x))\nTEXT: If Anne is red and Anne is big then Anne is white.\nFOL: all x y. (Red(x) & Big(x) -> White(x))\nTEXT: If Anne is big then Anne is white.\nFOL: all x y. (Big(x) -> White(x))\nTEXT: Gary is big.\nFOL: all x y. (Gary(x) -> Big(x))\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Anne is blue.\nFOL: all x. (Anne(x) -> Blue(x))\n\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\n\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\n\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\n\nTEXT: If Fiona is nice and Fiona is not blue then Fiona is red.\nFOL: all x y. (Fiona(x) & Nice(x) & -Blue(x) -> Red(x))\n\nTEXT: If Gary is round then Gary is blue.\nFOL: all x. (Gary(x) -> Round(x) & Blue(x))\n\nTEXT: Round, blue things are green.\nFOL: all x. (Round(x) & Blue(x) & Green(x))\n\nTEXT: White things are big.\nFOL: all x. (White(x) & Big(x))\n\nTEXT: If something is green then it is big.\nFOL: all x y. (Something(x) & Green(x) -> Big(x))\n\nTEXT: If something is blue and not red then it is round.\nFOL: all x y. (Something(x) & Blue(x) & -Red(x) -> Round(x))\n\nTEXT: If Anne is red and Anne is big then Anne is white.\nFOL: all x y. (Anne(x) & Red(x) & Big(x) -> White(x))\n\nTEXT: If Anne is big then Anne is white.\nFOL: all x y. (Anne(x) & Big(x) -> White(x))\n\nTEXT: Gary is big.\nFOL: all x. (Gary(x) -> Big(x))\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Anne is blue.\nFOL: all x. (Anne(x) -> Blue(x))\n\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\n\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\n\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\n\nTEXT: If Fiona is nice and Fiona is not blue then Fiona is red.\nFOL: all x y. (Fiona(x) & Nice(x) & -Blue(x) -> Red(x))\n\nTEXT: If Gary is round then Gary is blue.\nFOL: all x. (Gary(x) -> Round(x) & Blue(x))\n\nTEXT: Round, blue things are green.\nFOL: all x. (Round(x) & Blue(x) & Green(x))\n\nTEXT: White things are big.\nFOL: all x. (White(x) & Big(x))\n\nTEXT: If something is green then it is big.\nFOL: all x y. (Something(x) & Green(x) -> Big(x))\n\nTEXT: If something is blue and not red then it is round.\nFOL: all x y. (Something(x) & Blue(x) & -Red(x) -> Round(x))\n\nTEXT: If Anne is red and Anne is big then Anne is white.\nFOL: all x y. (Anne(x) & Red(x) & Big(x) -> White(x))\n\nTEXT: If Anne is big then Anne is white.\nFOL: all x y. (Anne(x) & Big(x) -> White(x))\n\nTEXT: Gary is big.\nFOL: all x. (Gary(x) -> Big(x))"
  ]
 },
 {
  "index": 51,
  "responses": [
   "<EVALUATE>\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Need(x) & Lion(x) -> NotRed(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Need(x) & Lion(x) -> NotRed(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Need(x) & Lion(x) -> NotRed(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Need(x) & Lion(x) -> NotRed(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Need(x) & Lion(x) -> NotRed(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Need(x) & Lion(x) -> NotRed(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y",
   "<EVALUATE>\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x y. (Need(x) & NotRed(x) -> Lion(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x y. (Need(x) & NotRed(x) -> Lion(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x y. (Need(x) & NotRed(x) -> Lion(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x y. (Need(x) & NotRed(x) -> Lion(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x y. (Need(x) & NotRed(x) -> Lion(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x y. (Need(x) & NotRed(x) -> Lion(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x",
   "<EVALUATE>\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x y. (Need(x) & NotRed(x) -> Lion(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x y. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x y. (Need(x) & NotRed(x) -> Lion(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x y. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x y. (Need(x) & NotRed(x) -> Lion(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x y. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x y. (Need(x) & NotRed(x) -> Lion(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x y. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x y. (Need(x) & NotRed(x) -> Lion(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x y. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x y. (Need(x) & NotRed(x) -> Lion(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x y. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (T",
   "<EVALUATE>\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Need(x) & Lion(x) -> NotRed(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Need(x) & Lion(x) -> NotRed(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Need(x) & Lion(x) -> NotRed(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Need(x) & Lion(x) -> NotRed(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Need(x) & Lion(x) -> NotRed(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Need(x) & Lion(x) -> NotRed(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Need(x) & Lion(x) -> NotRed(x",
   "<EVALUATE>\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Need(x) & Lion(x) -> NotRed(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Need(x) & Lion(x) -> NotRed(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Need(x) & Lion(x) -> NotRed(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Need(x) & Lion(x) -> NotRed(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Need(x) & Lion(x) -> NotRed(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The lion visits the tiger.\nFOL: all x. (Lion(x) & Tiger(x) -> Visit(x, y))\nTEXT: The squirrel needs the tiger.\nFOL: all x. (Squirrel(x) & Tiger(x) -> Need(x, y))\nTEXT: The tiger sees the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> See(x, y))\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Need(x) & Lion(x) -> NotRed(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 52,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: all x. (Anne(x) -> Nice(x))\nTEXT: Bob is not cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: All red people are not cold.\nFOL: all x. (Red(x) -> -Cold(x))\nTEXT: If someone is nice and green then they are kind.\nFOL: all x y. (Nice(x) & Green(x) -> Kind(x))\nTEXT: If Anne is young then Anne is red.\nFOL: all x y. (Anne(x) & Young(x) -> Red(x))\nTEXT: If Harry is red then Harry is not green.\nFOL: all x y. (Harry(x) & Red(x) -> -Green(x))\nTEXT: If someone is nice then they are young.\nFOL: all x y. (Nice(x) -> Young(x))\nTEXT: Cold, red people are rough.\nFOL: all x y. (Red(x) & Cold(x) -> Rough(x))\nTEXT: If Charlie is young then Charlie is not nice.\nFOL: all x y. (Charlie(x) & Young(x) -> -Nice(x))\nTEXT: All nice people are not green.\nFOL: all x. (Nice(x) -> -Green(x))\nTEXT: Bob is green.\nFOL: Bob(x) -> Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: all x. (Anne(x) -> Nice(x))\nTEXT: Bob is not cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: All red people are not cold.\nFOL: all x. (Red(x) -> -Cold(x))\nTEXT: If someone is nice and green then they are kind.\nFOL: all x y. (Nice(x) & Green(x) -> Kind(x))\nTEXT: If Anne is young then Anne is red.\nFOL: all x y. (Anne(x) & Young(x) -> Red(x))\nTEXT: If Harry is red then Harry is not green.\nFOL: all x y. (Harry(x) & Red(x) -> -Green(x))\nTEXT: If someone is nice then they are young.\nFOL: all x y. (Nice(x) -> Young(x))\nTEXT: Cold, red people are rough.\nFOL: all x y. (Cold(x) & Red(x) -> Rough(x))\nTEXT: If Charlie is young then Charlie is not nice.\nFOL: all x y. (Charlie(x) & Young(x) -> -Nice(x))\nTEXT: All nice people are not green.\nFOL: all x. (Nice(x) -> -Green(x))\nTEXT: Bob is green.\nFOL: Bob(x) -> Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: all x. (Anne(x) -> Nice(x))\nTEXT: Bob is not cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: All red people are not cold.\nFOL: all x. (Red(x) -> -Cold(x))\nTEXT: If someone is nice and green then they are kind.\nFOL: all x y. (Nice(x) & Green(x) -> Kind(x))\nTEXT: If Anne is young then Anne is red.\nFOL: all x y. (Anne(x) & Young(x) -> Red(x))\nTEXT: If Harry is red then Harry is not green.\nFOL: all x y. (Harry(x) & Red(x) -> -Green(x))\nTEXT: If someone is nice then they are young.\nFOL: all x y. (Nice(x) -> Young(x))\nTEXT: Cold, red people are rough.\nFOL: all x y. (Red(x) & Cold(x) -> Rough(x))\nTEXT: If Charlie is young then Charlie is not nice.\nFOL: all x y. (Charlie(x) & Young(x) -> -Nice(x))\nTEXT: All nice people are not green.\nFOL: all x y. (Nice(x) -> -Green(x))\nTEXT: Bob is green.\nFOL: Bob(x) -> Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: all x. (Anne(x) -> Nice(x))\nTEXT: Bob is not cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: All red people are not cold.\nFOL: all x. (Red(x) -> -Cold(x))\nTEXT: If someone is nice and green then they are kind.\nFOL: all x y. (Nice(x) & Green(x) -> Kind(x))\nTEXT: If Anne is young then Anne is red.\nFOL: all x y. (Anne(x) & Young(x) -> Red(x))\nTEXT: If Harry is red then Harry is not green.\nFOL: all x y. (Harry(x) & Red(x) -> -Green(x))\nTEXT: If someone is nice then they are young.\nFOL: all x y. (Nice(x) -> Young(x))\nTEXT: Cold, red people are rough.\nFOL: all x y. (Cold(x) & Red(x) -> Rough(x))\nTEXT: If Charlie is young then Charlie is not nice.\nFOL: all x y. (Charlie(x) & Young(x) -> -Nice(x))\nTEXT: All nice people are not green.\nFOL: all x y. (Nice(x) -> -Green(x))\nTEXT: Bob is green.\nFOL: Bob(x) -> Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: all x. (Anne(x) -> Nice(x))\nTEXT: Bob is not cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: All red people are not cold.\nFOL: all x. (Red(x) -> -Cold(x))\nTEXT: If someone is nice and green then they are kind.\nFOL: all x y. (Nice(x) & Green(x) -> Kind(x))\nTEXT: If Anne is young then Anne is red.\nFOL: all x y. (Anne(x) & Young(x) -> Red(x))\nTEXT: If Harry is red then Harry is not green.\nFOL: all x y. (Harry(x) & Red(x) -> -Green(x))\nTEXT: If someone is nice then they are young.\nFOL: all x y. (Nice(x) -> Young(x))\nTEXT: Cold, red people are rough.\nFOL: all x y. (Cold(x) & Red(x) -> -Rough(x))\nTEXT: If Charlie is young then Charlie is not nice.\nFOL: all x y. (Young(x) & Nice(x) -> -Charlie(x))\nTEXT: All nice people are not green.\nFOL: all x. (Nice(x) -> -Green(x))\nTEXT: Bob is green.\nFOL: Bob(x) -> Green(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 53,
  "responses": [
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: all x. (Alan(x) -> Round(x))\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: all x. (Dave(x) -> (Round(x) & Big(x)) & Kind(x))\nTEXT: That guy Eric sure is nice.\nFOL: all x. (Eric(x) -> Nice(x))\nTEXT: Gary is a kind person and he is also often cold.\nFOL: all x. (Gary(x) -> Kind(x) & -Cold(x))\nTEXT: Red people are almost always rough.\nFOL: all x. (Red(x) -> -Rough(x))\nTEXT: A young, green person in my experience is round shaped and nice.\nFOL: all x. (Young(x) & Green(x) & Round(x) & Nice(x))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: all x. (Green(x) & Rough(x) & -Cold(x) & Nice(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (Young(x) & Age(x) & Round(x))\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: all x. (Cold(x) & Round(x) -> Red(x))\nTEXT: Dave is not red.\nFOL: -Red(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: all x. (Alan(x) -> Round(x))\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: all x. (Dave(x) -> (Round(x) & Big(x)) & Kind(x))\nTEXT: That guy Eric sure is nice.\nFOL: all x. (Eric(x) -> Nice(x))\nTEXT: Gary is a kind person and he is also often cold.\nFOL: all x. (Gary(x) -> Kind(x) & -Cold(x))\nTEXT: Red people are almost always rough.\nFOL: all x. (Red(x) -> -Rough(x))\nTEXT: A young, green person in my experience is round shaped and nice.\nFOL: all x. (Young(x) & Green(x) & Round(x) & Nice(x))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: all x. (Green(x) & Rough(x) & -Cold(x) & Nice(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (Young(x) & Age(x) & Round(x))\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: all x. (Cold(x) & Round(x) & -Red(x))\nTEXT: Dave is not red.\nFOL: -Red(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: all x. (Alan(x) -> Round(x))\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: all x. (Dave(x) -> (Round(x) & Big(x)) & Kind(x))\nTEXT: That guy Eric sure is nice.\nFOL: all x. (Eric(x) -> Nice(x))\nTEXT: Gary is a kind person and he is also often cold.\nFOL: all x. (Gary(x) -> Kind(x) & -Cold(x))\nTEXT: Red people are almost always rough.\nFOL: all x. (Red(x) -> -Rough(x))\nTEXT: A young, green person in my experience is round shaped and nice.\nFOL: all x. (Young(x) & Green(x) & Round(x) & Nice(x))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: all x. (Green(x) & Rough(x) & -Cold(x) & Nice(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (YoungAtHeart(x) & Age(x) & Round(x))\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: all x. (Cold(x) & Round(x) -> Red(x))\nTEXT: Dave is not red.\nFOL: -Red(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: all x. (Alan(x) -> Round(x))\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: all x. (Dave(x) -> (Round(x) & Big(x)) & Kind(x))\nTEXT: That guy Eric sure is nice.\nFOL: all x. (Eric(x) -> Nice(x))\nTEXT: Gary is a kind person and he is also often cold.\nFOL: all x. (Gary(x) -> Kind(x) & -Cold(x))\nTEXT: Red people are almost always rough.\nFOL: all x. (Red(x) -> -Rough(x))\nTEXT: A young, green person in my experience is round shaped and nice.\nFOL: all x. (Young(x) & Green(x) & Round(x) & Nice(x))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: all x. (Green(x) & Rough(x) & -Cold(x) & Nice(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (YoungAtHeart(x) & Age(x) & Round(x))\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: all x. (Cold(x) & Round(x) & -Red(x))\nTEXT: Dave is not red.\nFOL: -Red(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: all x. (Alan(x) -> Round(x))\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: all x. (Dave(x) -> (Round(x) & Big(x)) & Kind(x))\nTEXT: That guy Eric sure is nice.\nFOL: all x. (Eric(x) -> Nice(x))\nTEXT: Gary is a kind person and he is also often cold.\nFOL: all x. (Gary(x) -> Kind(x) & -Cold(x))\nTEXT: Red people are almost always rough.\nFOL: all x. (Red(x) -> -Rough(x))\nTEXT: A young, green person in my experience is round shaped and nice.\nFOL: all x. (Young(x) & Green(x) & (Round(x) & Nice(x)))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: all x. (Green(x) & Rough(x) & -Cold(x) & Nice(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (YoungAtHeart(x) & Age(x) & Round(x))\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: all x. (Cold(x) & Round(x) -> Red(x))\nTEXT: Dave is not red.\nFOL: -Red(dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 54,
  "responses": [
   "<EVALUATE>\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: all x. (Person(x) -> Kind(x) & FeelBlue(x))\nTEXT: Eric is green and cold too.\nFOL: all x. (Person(x) -> Green(x) & Cold(x))\nTEXT: Fred can be rough and cold, but he is also green, an avid gardener.\nFOL: all x. (Person(x) -> Rough(x) & Cold(x) & Green(x) & Gardener(x))\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: all x. (Person(x) -> Kind(x) & FeelBlue(x) & Cold(x) & Named(x))\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: all x. (Person(x) -> Rough(x) & Tumble(x) & Gentle(x) & Kind(x) & Blue(x))\nTEXT: Kind, round people that are really feeling blue are going to always be big.\nFOL: all x. (Person(x) -> Kind(x) & Round(x) & FeelBlue(x) & Big(x))\nTEXT: Someone with rough and green feet is invariably kind.\nFOL: all x. (Person(x) -> Rough(x) & Green(x) & Kind(x))\nTEXT: Blue eyed people, green with sickness and rough around the edges quickly turn red and blush when stepping ashore.\nFOL: all x. (Person(x) -> Blue(x) & Green(x) & Sickness(x) & Rough(x) & Edges(x) & Red(x) & Blush(x) & Ashore(x))\nTEXT: Every person I met that was cold and round was also red.\nFOL: all x. (Person(x) -> Cold(x) & Round(x) & Red(x))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x. (Person(x) -> Round(x) & Blue(x) & Young(x))\nTEXT: A round shaped kind person who is colored green will be cold natured.\nFOL: all x. (Person(x) -> Round(x) & Kind(x) & Green(x) & Cold(x) & Natured(x))\nTEXT: Eric is big.\nFOL: all x. (Person(x) -> Big(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: all x. (Person(x) -> Kind(x) & FeelBlue(x))\nTEXT: Eric is green and cold too.\nFOL: all x. (Person(x) -> Green(x) & Cold(x))\nTEXT: Fred can be rough and cold, but he is also green, an avid gardener.\nFOL: all x. (Person(x) -> Rough(x) & Cold(x) & Green(x) & Gardener(x))\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: all x. (Person(x) -> Kind(x) & FeelBlue(x) & Cold(x) & Named(x))\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: all x. (Person(x) -> Rough(x) & Tumble(x) & Gentle(x) & Kind(x) & Blue(x))\nTEXT: Kind, round people that are really feeling blue are going to always be big.\nFOL: all x. (Person(x) -> Kind(x) & Round(x) & FeelBlue(x) & Big(x))\nTEXT: Someone with rough and green feet is invariably kind.\nFOL: all x. (Person(x) -> Rough(x) & Green(x) & Kind(x))\nTEXT: Blue eyed people, green with sickness and rough around the edges quickly turn red and blush when stepping ashore.\nFOL: all x. (Person(x) -> Blue(x) & Green(x) & Sickness(x) & Rough(x) & Edges(x) & Red(x) & Blush(x) & Ashore(x))\nTEXT: Every person I met that was cold and round was also red.\nFOL: all x. (Person(x) -> Cold(x) & Round(x) & Red(x))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x. (Person(x) -> Round(x) & Blue(x) & Young(x))\nTEXT: A round shaped kind person who is colored green will be cold natured.\nFOL: all x. (Person(x) -> Round(x) & Kind(x) & Green(x) & Cold(x) & Natured(x))\nTEXT: Eric is big.\nFOL: all x. (Person(x) -> Big(x))",
   "<EVALUATE>\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: all x. (Person(x) -> Kind(x) & FeelBlue(x))\nTEXT: Eric is green and cold too.\nFOL: all x. (Person(x) -> Green(x) & Cold(x))\nTEXT: Fred can be rough and cold, but he is also green, an avid gardener.\nFOL: all x. (Person(x) -> Rough(x) & Cold(x) & Green(x) & Gardener(x))\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: all x. (Person(x) -> Kind(x) & FeelBlue(x) & Cold(x) & Named(x))\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: all x. (Person(x) -> Rough(x) & Tumble(x) & Gentle(x) & Kind(x) & Blue(x))\nTEXT: Kind, round people that are really feeling blue are going to always be big.\nFOL: all x. (Person(x) -> Kind(x) & Round(x) & FeelBlue(x) & Big(x))\nTEXT: Someone with rough and green feet is invariably kind.\nFOL: all x. (Person(x) -> Rough(x) & Green(x) & Kind(x))\nTEXT: Blue eyed people, green with sickness and rough around the edges quickly turn red and blush when stepping ashore.\nFOL: all x. (Person(x) -> Blue(x) & Green(x) & Sick(x) & Rough(x) & Edges(x) & Red(x) & Blush(x) & Ashore(x))\nTEXT: Every person I met that was cold and round was also red.\nFOL: all x. (Person(x) -> Cold(x) & Round(x) & Red(x))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x. (Person(x) -> Round(x) & Blue(x) & Young(x))\nTEXT: A round shaped kind person who is colored green will be cold natured.\nFOL: all x. (Person(x) -> Round(x) & Kind(x) & Green(x) & Cold(x) & Natured(x))\nTEXT: Eric is big.\nFOL: all x. (Person(x) -> Big(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: all x. (Person(x) -> Kind(x) & FeelBlue(x))\nTEXT: Eric is green and cold too.\nFOL: all x. (Person(x) -> Green(x) & Cold(x))\nTEXT: Fred can be rough and cold, but he is also green, an avid gardener.\nFOL: all x. (Person(x) -> Rough(x) & Cold(x) & Green(x) & Gardener(x))\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: all x. (Person(x) -> Kind(x) & FeelBlue(x) & Cold(x) & Named(x))\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: all x. (Person(x) -> Rough(x) & Tumble(x) & Gentle(x) & Kind(x) & Blue(x))\nTEXT: Kind, round people that are really feeling blue are going to always be big.\nFOL: all x. (Person(x) -> Kind(x) & Round(x) & FeelBlue(x) & Big(x))\nTEXT: Someone with rough and green feet is invariably kind.\nFOL: all x. (Person(x) -> Rough(x) & Green(x) & Kind(x))\nTEXT: Blue eyed people, green with sickness and rough around the edges quickly turn red and blush when stepping ashore.\nFOL: all x. (Person(x) -> Blue(x) & Green(x) & Sick(x) & Rough(x) & Edges(x) & Red(x) & Blush(x) & Ashore(x))\nTEXT: Every person I met that was cold and round was also red.\nFOL: all x. (Person(x) -> Cold(x) & Round(x) & Red(x))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x. (Person(x) -> Round(x) & Blue(x) & Young(x))\nTEXT: A round shaped kind person who is colored green will be cold natured.\nFOL: all x. (Person(x) -> Round(x) & Kind(x) & Green(x) & Cold(x) & Natured(x))\nTEXT: Eric is big.\nFOL: all x. (Person(x) -> Big(x))",
   "<EVALUATE>\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: all x. (Person(x) -> Kind(x) & FeelBlue(x))\nTEXT: Eric is green and cold too.\nFOL: all x. (Person(x) -> Green(x) & Cold(x))\nTEXT: Fred can be rough and cold, but he is also green, an avid gardener.\nFOL: all x. (Person(x) -> Rough(x) & Cold(x) & Green(x) & Gardener(x))\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: all x. (Person(x) -> Kind(x) & FeelBlue(x) & Cold(x) & Named(x))\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: all x. (Person(x) -> Rough(x) & Tumble(x) & Gentle(x) & Kind(x) & Blue(x))\nTEXT: Kind, round people that are really feeling blue are going to always be big.\nFOL: all x. (Person(x) -> Kind(x) & Round(x) & FeelBlue(x) & Big(x))\nTEXT: Someone with rough and green feet is invariably kind.\nFOL: all x. (Person(x) -> Rough(x) & Green(x) & Kind(x))\nTEXT: Blue eyed people, green with sickness and rough around the edges quickly turn red and blush when stepping ashore.\nFOL: all x. (Person(x) -> Blue(x) & Green(x) & Sickness(x) & Rough(x) & Edges(x) & Red(x) & Blush(x) & Ashore(x))\nTEXT: Every person I met that was cold and round was also red.\nFOL: all x. (Person(x) -> Cold(x) & Round(x) & Red(x))\nTEXT: Why is it that every round person that is blue is so young?\nFOL: all x. (Person(x) -> Round(x) & Blue(x) & Young(x))\nTEXT: A round shaped kind person who is colored green will be cold natured.\nFOL: all x. (Person(x) -> Round(x) & Kind(x) & Green(x) & Cold(x) & Natured(x))\nTEXT: Eric is big.\nFOL: all x. (Person(x) -> Big(x))"
  ]
 },
 {
  "index": 55,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: all x. (Bob(x) -> (Green(x) & Cold(x)))\nTEXT: Eric might be rough and red but he's actually very kind.\nFOL: all x. (Eric(x) -> ((Rough(x) & Red(x)) | (Kind(x))))\nTEXT: Fred is green and cold too.\nFOL: all x. (Fred(x) -> (Green(x) & Cold(x)))\nTEXT: Harry can be rough and cold, but he is also green, an avid gardener.\nFOL: all x. (Harry(x) -> ((Rough(x) & Cold(x)) | (Green(x) & Gardener(x))))\nTEXT: A person who is kind, cold, and rough is big.\nFOL: all x. (Kind(x) & Cold(x) & Rough(x) -> Big(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> (Little(x) & Green(x)))\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: all x. ((Rough(x) & Kind(x)) -> (Cold(x)))\nTEXT: Big, young people with green color are rather rough.\nFOL: all x. (Big(x) & Young(x) & Green(x) -> Rough(x))\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: all x. (Green(x) & Naive(x) -> (Red(x) & Rough(x)))\nTEXT: It is a safe guess then that they are also round.\nFOL: all x. (Green(x) & Naive(x) & Round(x))\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: all x. (Red(x) & Rough(x) & Green(x) & Envy(x))\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: all x. (Green(x) & Nice(x) & Rough(x) -> Round(x))\nTEXT: Fred is not round.\nFOL: -Round(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: all x. (Bob(x) -> (Green(x) & Cold(x)))\nTEXT: Eric might be rough and red but he's actually very kind.\nFOL: all x. (Eric(x) -> ((Rough(x) & Red(x)) | (Kind(x))))\nTEXT: Fred is green and cold too.\nFOL: all x. (Fred(x) -> (Green(x) & Cold(x)))\nTEXT: Harry can be rough and cold, but he is also green, an avid gardener.\nFOL: all x. (Harry(x) -> ((Rough(x) & Cold(x)) | (Green(x) & Gardener(x))))\nTEXT: A person who is kind, cold, and rough is big.\nFOL: all x. (Kind(x) & Cold(x) & Rough(x) -> Big(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> (Little(x) & Green(x)))\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: all x. ((Rough(x) & Kind(x)) -> (Cold(x)))\nTEXT: Big, young people with green color are rather rough.\nFOL: all x. (Big(x) & Young(x) & Green(x) -> Rough(x))\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: all x. (Green(x) & Naive(x) -> (Red(x) & Rough(x)))\nTEXT: It is a safe guess then that they are also round.\nFOL: all x. (Green(x) & Naive(x) & Rough(x) -> Round(x))\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: all x. (Red(x) & Rough(x) & Green(x) -> (Envy(x)))\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: all x. (Green(x) & Rough(x) & Nice(x) -> Round(x))\nTEXT: Fred is not round.\nFOL: -Round(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: all x. (Bob(x) -> (Green(x) & Cold(x)))\nTEXT: Eric might be rough and red but he's actually very kind.\nFOL: all x. (Eric(x) -> ((Rough(x) & Red(x)) | (Kind(x))))\nTEXT: Fred is green and cold too.\nFOL: all x. (Fred(x) -> (Green(x) & Cold(x)))\nTEXT: Harry can be rough and cold, but he is also green, an avid gardener.\nFOL: all x. (Harry(x) -> ((Rough(x) & Cold(x)) | (Green(x) & Gardener(x))))\nTEXT: A person who is kind, cold, and rough is big.\nFOL: all x. (Kind(x) & Cold(x) & Rough(x) -> Big(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> (Little(x) & Green(x)))\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: all x. ((Rough(x) & Kind(x)) -> (Cold(x)))\nTEXT: Big, young people with green color are rather rough.\nFOL: all x. (Big(x) & Young(x) & Green(x) -> Rough(x))\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: all x. (Green(x) & Naive(x) -> (Red(x) & Rough(x)))\nTEXT: It is a safe guess then that they are also round.\nFOL: all x. (Green(x) & Naive(x) & Round(x))\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: all x. (Red(x) & Rough(x) & Green(x) & Envy(x))\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: all x. (Green(x) & Rough(x) & Nice(x) & Round(x))\nTEXT: Fred is not round.\nFOL: -Round(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: all x. (Bob(x) -> (Green(x) & Cold(x)))\nTEXT: Eric might be rough and red but he's actually very kind.\nFOL: all x. (Eric(x) -> ((Rough(x) & Red(x)) | (Kind(x))))\nTEXT: Fred is green and cold too.\nFOL: all x. (Fred(x) -> (Green(x) & Cold(x)))\nTEXT: Harry can be rough and cold, but he is also green, an avid gardener.\nFOL: all x. (Harry(x) -> ((Rough(x) & Cold(x)) | (Green(x) & Gardener(x))))\nTEXT: A person who is kind, cold, and rough is big.\nFOL: all x. (Kind(x) & Cold(x) & Rough(x) -> Big(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> (Little(x) & Green(x)))\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: all x. ((Rough(x) & Kind(x)) -> (Cold(x)))\nTEXT: Big, young people with green color are rather rough.\nFOL: all x. (Big(x) & Young(x) & Green(x) -> Rough(x))\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: all x. (Green(x) & Naive(x) -> (Red(x) & Rough(x)))\nTEXT: It is a safe guess then that they are also round.\nFOL: all x. (Green(x) & Naive(x) & Round(x))\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: all x. (Red(x) & Rough(x) & Green(x) & Envy(x))\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: all x. (Green(x) & Nice(x) & Rough(x) -> Round(x))\nTEXT: Fred is not round.\nFOL: -Round(fred)",
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: all x. (Bob(x) -> (Green(x) & Cold(x)))\nTEXT: Eric might be rough and red but he's actually very kind.\nFOL: all x. (Eric(x) -> ((Rough(x) & Red(x)) | (Kind(x))))\nTEXT: Fred is green and cold too.\nFOL: all x. (Fred(x) -> (Green(x) & Cold(x)))\nTEXT: Harry can be rough and cold, but he is also green, an avid gardener.\nFOL: all x. (Harry(x) -> ((Rough(x) & Cold(x)) | (Green(x) & Gardener(x))))\nTEXT: A person who is kind, cold, and rough is big.\nFOL: all x. (Kind(x) & Cold(x) & Rough(x) -> Big(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> (Little(x) & Green(x)))\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: all x. ((Rough(x) & Kind(x)) -> (Cold(x)))\nTEXT: Big, young people with green color are rather rough.\nFOL: all x. (Big(x) & Young(x) & Green(x) -> Rough(x))\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: all x. (Green(x) & Naive(x) -> (Red(x) & Rough(x)))\nTEXT: It is a safe guess then that they are also round.\nFOL: all x. (Green(x) & Naive(x) & Round(x))\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: all x. (Red(x) & Rough(x) & Green(x) -> (Envy(x)))\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: all x. (Green(x) & Rough(x) & Nice(x) -> (Round(x)))\nTEXT: Fred is not round.\nFOL: -Round(fred)\n</EVALUATE>"
  ]
 },
 {
  "index": 56,
  "responses": [
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: That guy Eric sure is nice.\nFOL: all x. (Eric(x) -> Nice(x))\nTEXT: Fred is a big guy who is colored red from a sunburn.\nFOL: all x. (Big(x) & Red(x) & Sunburn(x) -> Nice(x))\nTEXT: He also has a cold.\nFOL: all x. (HasCold(x) -> Nice(x))\nTEXT: Gary is young, round and kind with green ideas and wears blue clothes.\nFOL: all x. (Young(x) & Round(x) & Green(x) & WearsBlue(x) -> Nice(x))\nTEXT: Kind people that are red and round are usually big.\nFOL: all x. (Red(x) & Round(x) & Nice(x) -> Big(x))\nTEXT: Nice round big people are kind to others.\nFOL: all x. (Nice(x) & Round(x) & Big(x) -> KindToOthers(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Cold(x) & Blue(x) -> Nice(x))\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (FeelingCold(x) -> ActNice(x))\nTEXT: When someone is green and round, they can be rough but kind.\nFOL: all x. (Green(x) & Round(x) & Nice(x) -> RoughButKind(x))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) -> Round(x))\nTEXT: Young and red people look round.\nFOL: all x. (Young(x) & Red(x) & Round(x))\nTEXT: Alan is not green.\nFOL: -Green(Alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: That guy Eric sure is nice.\nFOL: all x. (Eric(x) -> Nice(x))\nTEXT: Fred is a big guy who is colored red from a sunburn.\nFOL: all x. (Big(x) & Red(x) & Sunburn(x) -> Nice(x))\nTEXT: He also has a cold.\nFOL: all x. (HasCold(x) -> Nice(x))\nTEXT: Gary is young, round and kind with green ideas and wears blue clothes.\nFOL: all x. (Young(x) & Round(x) & Green(x) & WearsBlue(x) -> Nice(x))\nTEXT: Kind people that are red and round are usually big.\nFOL: all x. (Red(x) & Round(x) & Nice(x) -> Big(x))\nTEXT: Nice round big people are kind to others.\nFOL: all x. (Nice(x) & Round(x) & Big(x) -> KindToOthers(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Cold(x) & Blue(x) -> Nice(x))\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (FeelingCold(x) -> ActNice(x))\nTEXT: When someone is green and round, they can be rough but kind.\nFOL: all x. (Green(x) & Round(x) & Nice(x) -> RoughButKind(x))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) & Round(x) -> RoughButKind(x))\nTEXT: Young and red people look round.\nFOL: all x. (Young(x) & Red(x) & Round(x) -> Nice(x))\nTEXT: Alan is not green.\nFOL: -Green(Alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: That guy Eric sure is nice.\nFOL: all x. (Eric(x) -> Nice(x))\nTEXT: Fred is a big guy who is colored red from a sunburn.\nFOL: all x. (Big(x) & Red(x) & Sunburn(x) -> Nice(x))\nTEXT: He also has a cold.\nFOL: all x. (HasCold(x) -> Nice(x))\nTEXT: Gary is young, round and kind with green ideas and wears blue clothes.\nFOL: all x. (Young(x) & Round(x) & Green(x) & WearsBlue(x) -> Nice(x))\nTEXT: Kind people that are red and round are usually big.\nFOL: all x. (Red(x) & Round(x) & Nice(x) -> Big(x))\nTEXT: Nice round big people are kind to others.\nFOL: all x. (Nice(x) & Round(x) & Big(x) -> KindToOthers(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Cold(x) & Blue(x) -> Nice(x))\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (FeelingCold(x) -> ActNice(x))\nTEXT: When someone is green and round, they can be rough but kind.\nFOL: all x. (Green(x) & Round(x) & Nice(x) -> RoughButKind(x))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) & Round(x) -> RoughButKind(x))\nTEXT: Young and red people look round.\nFOL: all x. (Young(x) & Red(x) & Round(x) -> Nice(x))\nTEXT: Alan is not green.\nFOL: not Green(alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: That guy Eric sure is nice.\nFOL: all x. (Eric(x) -> Nice(x))\nTEXT: Fred is a big guy who is colored red from a sunburn.\nFOL: all x. (Big(x) & Red(x) & Sunburn(x) -> Nice(x))\nTEXT: He also has a cold.\nFOL: all x. (HasCold(x) -> Nice(x))\nTEXT: Gary is young, round and kind with green ideas and wears blue clothes.\nFOL: all x. (Young(x) & Round(x) & Green(x) & WearsBlue(x) -> Nice(x))\nTEXT: Kind people that are red and round are usually big.\nFOL: all x. (Red(x) & Round(x) & Nice(x) -> Big(x))\nTEXT: Nice round big people are kind to others.\nFOL: all x. (Nice(x) & Round(x) & Big(x) -> KindToOthers(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Cold(x) & Blue(x) -> Nice(x))\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (FeelingCold(x) -> ActNice(x))\nTEXT: When someone is green and round, they can be rough but kind.\nFOL: all x. (Green(x) & Round(x) & Nice(x) -> RoughButKind(x))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) & Round(x) -> RoughButKind(x))\nTEXT: Young and red people look round.\nFOL: all x. (Young(x) & Red(x) & Round(x) -> Nice(x))\nTEXT: Alan is not green.\nFOL: -Green(alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: That guy Eric sure is nice.\nFOL: all x. (Eric(x) -> Nice(x))\nTEXT: Fred is a big guy who is colored red from a sunburn.\nFOL: all x. (Big(x) & Red(x) & Sunburn(x) -> Nice(x))\nTEXT: He also has a cold.\nFOL: all x. (HasCold(x) -> Nice(x))\nTEXT: Gary is young, round and kind with green ideas and wears blue clothes.\nFOL: all x. (Young(x) & Round(x) & Green(x) & WearsBlue(x) -> Nice(x))\nTEXT: Kind people that are red and round are usually big.\nFOL: all x. (Red(x) & Round(x) & Nice(x) -> Big(x))\nTEXT: Nice round big people are kind to others.\nFOL: all x. (Nice(x) & Round(x) & Big(x) -> KindToOthers(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) & Blue(x) -> Nice(x))\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (FeelsCold(x) -> ActNice(x))\nTEXT: When someone is green and round, they can be rough but kind.\nFOL: all x. (Green(x) & Round(x) & Rough(x) & Kind(x) -> Nice(x))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) -> Round(x))\nTEXT: Young and red people look round.\nFOL: all x. (Young(x) & Red(x) & Round(x) -> Nice(x))\nTEXT: Alan is not green.\nFOL: -Green(alan)\n</EVALUATE>"
  ]
 },
 {
  "index": 57,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & -Chase(x, y) -> -Chase(y, x))\nTEXT: The bald eagle needs the cat.\nFOL: all x y. (BaldEagle(x) & Cat(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The bald eagle needs the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The bald eagle visits the cat.\nFOL: all x y. (BaldEagle(x) & Cat(y) & -Visit(x, y) -> -Visit(y, x))\nTEXT: The cat is big.\nFOL: all x y. (Cat(x) & Big(y) -> x)\nTEXT: The cat is kind.\nFOL: all x y. (Cat(x) & Kind(y) -> x)\nTEXT: The cat needs the bald eagle.\nFOL: all x y. (Cat(x) & BaldEagle(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & Big(y) -> x)\nTEXT: The rabbit is cold.\nFOL: all x y. (Rabbit(x) & Cold(y) -> x)\nTEXT: The rabbit needs the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Visit(x, y) -> -Visit(y, x))\nTEXT: The cat is big.\nFOL: all x y. (Cat(x) & Big(y) -> x)\nTEXT: The cat is kind.\nFOL: all x y. (Cat(x) & Kind(y) -> x)\nTEXT: The cat needs the bald eagle.\nFOL: all x y. (Cat(x) & BaldEagle(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & Big(y) -> x)\nTEXT: The rabbit is cold.\nFOL: all x y. (Rabbit(x) & Cold(y) -> x)\nTEXT: The rabbit needs the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Visit(x, y) -> -Visit(y, x))\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x y. (Something(x) & Cat(y) & -Visit(x, y) -> -Need(x, y))\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x y. (Something(x) & Rabbit(y) & -Visit(x, y) -> -Visit(y, x))\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x y. (Something(x) & Cat(y) & -Visit(x, y) & -Visit(y, x) -> -Visit(x, y))\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x y. (Something(x) & Cat(y) & -Need(x, y) -> -Need(y, x))\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x y. (Something(x) & BaldEagle(y) & -Need(x, y) -> -Visit(x, y))\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: all x y. (Rabbit(x) & Kind(y) & -Need(x, y) -> -Need(y, x))\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x y. (Something(x) & Kind(y) & -Need(x, y) -> -Visit(y, x))\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x y. (Something(x) & Rabbit(y) & -Need(x, y) -> -Visit(y, x))\nTEXT: The cat needs the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & -Need(x, y) -> -Need(y, x))",
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & -Chase(x, y) -> x == y)\nTEXT: The bald eagle needs the cat.\nFOL: all x y. (BaldEagle(x) & Cat(y) & -Need(x, y) -> x == y)\nTEXT: The bald eagle needs the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & -Need(x, y) -> x == y)\nTEXT: The bald eagle visits the cat.\nFOL: all x y. (BaldEagle(x) & Cat(y) & -Visit(x, y) -> x == y)\nTEXT: The cat is big.\nFOL: all x y. (Cat(x) & -Big(y) -> x == y)\nTEXT: The cat is kind.\nFOL: all x y. (Cat(x) & -Kind(y) -> x == y)\nTEXT: The cat needs the bald eagle.\nFOL: all x y. (Cat(x) & BaldEagle(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & -Big(y) -> x == y)\nTEXT: The rabbit is cold.\nFOL: all x y. (Rabbit(x) & -Cold(y) -> x == y)\nTEXT: The rabbit needs the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Visit(x, y) -> x == y)\nTEXT: The cat is big.\nFOL: all x y. (Cat(x) & -Big(y) -> x == y)\nTEXT: The cat is kind.\nFOL: all x y. (Cat(x) & -Kind(y) -> x == y)\nTEXT: The cat needs the bald eagle.\nFOL: all x y. (Cat(x) & BaldEagle(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & -Big(y) -> x == y)\nTEXT: The rabbit is cold.\nFOL: all x y. (Rabbit(x) & -Cold(y) -> x == y)\nTEXT: The rabbit needs the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Visit(x, y) -> x == y)\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x y. (Something(x) & Cat(y) & -Visit(x, y) & -Need(x, y) -> x == y)\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x y. (Something(x) & Rabbit(y) & -Visit(x, y) & -Visit(y, x) -> x == y)\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x y. (Something(x) & Cat(y) & -Visit(x, y) & -Visit(y, x) & -Visit(x, y) -> x == y)\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x y. (Something(x) & Cat(y) & -Need(x, y) -> x == y)\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x y. (Something(x) & BaldEagle(y) & -Need(x, y) -> x == y)\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: all x y. (Rabbit(x) & -Kind(y) & Cat(y) & -Need(x, y) -> x == y)\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x y. (Something(x) & -Kind(y) & Rabbit(y) & -Need(x, y) -> x == y)\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x y. (Something(x) & Rabbit(y) & -Need(x, y) -> x == y)\nTEXT: The cat needs the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & -Need",
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & -Chase(x, y) -> -Chase(y, x))\nTEXT: The bald eagle needs the cat.\nFOL: all x y. (BaldEagle(x) & Cat(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The bald eagle needs the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The bald eagle visits the cat.\nFOL: all x y. (BaldEagle(x) & Cat(y) & -Visit(x, y) -> -Visit(y, x))\nTEXT: The cat is big.\nFOL: all x y. (Cat(x) & Big(y) -> x)\nTEXT: The cat is kind.\nFOL: all x y. (Cat(x) & Kind(y) -> x)\nTEXT: The cat needs the bald eagle.\nFOL: all x y. (Cat(x) & BaldEagle(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & Big(y) -> x)\nTEXT: The rabbit is cold.\nFOL: all x y. (Rabbit(x) & Cold(y) -> x)\nTEXT: The rabbit needs the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Visit(x, y) -> -Visit(y, x))\nTEXT: The cat is big.\nFOL: all x y. (Cat(x) & Big(y) -> x)\nTEXT: The cat is kind.\nFOL: all x y. (Cat(x) & Kind(y) -> x)\nTEXT: The cat needs the bald eagle.\nFOL: all x y. (Cat(x) & BaldEagle(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & Big(y) -> x)\nTEXT: The rabbit is cold.\nFOL: all x y. (Rabbit(x) & Cold(y) -> x)\nTEXT: The rabbit needs the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Visit(x, y) -> -Visit(y, x))\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x y. (Something(x) & Cat(y) & -Visit(x, y) -> -Need(x, y))\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x y. (Something(x) & Rabbit(y) & -Visit(x, y) -> -Visit(y, x))\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x y. (Something(x) & Cat(y) & -Visit(x, y) & -Visit(y, x) -> -Visit(x, y))\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x y. (Something(x) & Cat(y) & -Need(x, y) -> -Need(y, x))\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x y. (Something(x) & BaldEagle(y) & -Need(x, y) -> -Visit(x, y))\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: all x y. (Rabbit(x) & Kind(y) & -Need(x, y) -> -Need(y, x))\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x y. (Something(x) & Kind(y) & -Need(x, y) -> -Visit(y, x))\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x y. (Something(x) & Rabbit(y) & -Need(x, y) -> -Visit(y, x))\nTEXT: The cat needs the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & -Need(x, y) -> -Need(y, x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & -Chase(x, y) -> -Chase(y, x))\nTEXT: The bald eagle needs the cat.\nFOL: all x y. (BaldEagle(x) & Cat(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The bald eagle needs the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The bald eagle visits the cat.\nFOL: all x y. (BaldEagle(x) & Cat(y) & -Visit(x, y) -> -Visit(y, x))\nTEXT: The cat is big.\nFOL: all x y. (Cat(x) & Big(y) -> x)\nTEXT: The cat is kind.\nFOL: all x y. (Cat(x) & Kind(y) -> x)\nTEXT: The cat needs the bald eagle.\nFOL: all x y. (Cat(x) & BaldEagle(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & Big(y) -> x)\nTEXT: The rabbit is cold.\nFOL: all x y. (Rabbit(x) & Cold(y) -> x)\nTEXT: The rabbit needs the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Visit(x, y) -> -Visit(y, x))\nTEXT: The cat is big.\nFOL: all x y. (Cat(x) & Big(y) -> x)\nTEXT: The cat is kind.\nFOL: all x y. (Cat(x) & Kind(y) -> x)\nTEXT: The cat needs the bald eagle.\nFOL: all x y. (Cat(x) & BaldEagle(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & Big(y) -> x)\nTEXT: The rabbit is cold.\nFOL: all x y. (Rabbit(x) & Cold(y) -> x)\nTEXT: The rabbit needs the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Visit(x, y) -> -Visit(y, x))\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x y. (Something(x) & Cat(y) & -Visit(x, y) -> -Need(x, y))\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x y. (Something(x) & Rabbit(y) & -Visit(x, y) -> -Visit(y, x))\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x y. (Something(x) & Cat(y) & -Visit(x, y) & -Visit(y, x) -> -Visit(x, y))\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x y. (Something(x) & Cat(y) & -Need(x, y) -> -Need(y, x))\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x y. (Something(x) & BaldEagle(y) & -Need(x, y) -> -Visit(y, x))\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: all x y. (Rabbit(x) & Kind(y) & -Need(x, y) -> -Need(y, x))\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x y. (Something(x) & Kind(y) & -Need(x, y) -> -Visit(y, x))\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x y. (Something(x) & Rabbit(y) & -Need(x, y) -> -Visit(y, x))\nTEXT: The cat needs the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & -Need(x, y) -> -Need(y, x))",
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & -Chase(x, y) -> x == y)\nTEXT: The bald eagle needs the cat.\nFOL: all x y. (BaldEagle(x) & Cat(y) & -Need(x, y) -> x == y)\nTEXT: The bald eagle needs the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & -Need(x, y) -> x == y)\nTEXT: The bald eagle visits the cat.\nFOL: all x y. (BaldEagle(x) & Cat(y) & -Visit(x, y) -> x == y)\nTEXT: The cat is big.\nFOL: all x y. (Cat(x) & Big(y) -> x == y)\nTEXT: The cat is kind.\nFOL: all x y. (Cat(x) & Kind(y) -> x == y)\nTEXT: The cat needs the bald eagle.\nFOL: all x y. (Cat(x) & BaldEagle(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & Big(y) -> x == y)\nTEXT: The rabbit is cold.\nFOL: all x y. (Rabbit(x) & Cold(y) -> x == y)\nTEXT: The rabbit needs the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Visit(x, y) -> x == y)\nTEXT: The cat is big.\nFOL: all x y. (Cat(x) & Big(y) -> x == y)\nTEXT: The cat is kind.\nFOL: all x y. (Cat(x) & Kind(y) -> x == y)\nTEXT: The cat needs the bald eagle.\nFOL: all x y. (Cat(x) & BaldEagle(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & Big(y) -> x == y)\nTEXT: The rabbit is cold.\nFOL: all x y. (Rabbit(x) & Cold(y) -> x == y)\nTEXT: The rabbit needs the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Visit(x, y) -> x == y)\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x y. (Something(x) & Cat(y) & -Visit(x, y) & -Need(x, y) -> x == y)\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x y. (Something(x) & Rabbit(y) & -Visit(x, y) & -Visit(y, x) -> x == y)\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x y. (Something(x) & Cat(y) & -Visit(x, y) & -Visit(y, x) & -Visit(x, y) -> x == y)\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x y. (Something(x) & Cat(y) & -Need(x, y) -> x == y)\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x y. (Something(x) & BaldEagle(y) & -Need(x, y) -> x == y)\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: all x y. (Rabbit(x) & Kind(y) & -Need(x, y) & -Need(y, x) -> x == y)\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x y. (Something(x) & Kind(y) & -Need(x, y) & -Need(y, x) -> x == y)\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x y. (Something(x) & Rabbit(y) & -Need(x, y) -> x == y)\nTEXT: The cat needs the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & -Need(x, y)"
  ]
 },
 {
  "index": 58,
  "responses": [
   "<EVALUATE>\nTEXT: For being so cold, it's good Alan can remain nice.\nFOL: all x y. (Being(x) & Cold(x) & Nice(x) -> Alan(x) -> RemainNice(x))\nTEXT: Bob is green and cold too.\nFOL: all x y. (Green(x) & Cold(x) & -Nice(x) & Bob(x))\nTEXT: Charlie can be rough and cold, but he is also green, an avid gardener.\nFOL: all x y. (Rough(x) & Cold(x) & Green(x) & -Nice(x) & Gardener(x))\nTEXT: Harry seems to be round.\nFOL: all x y. (Round(x) & -Nice(x) & Harry(x))\nTEXT: A blue, cold natured person will be rough textured.\nFOL: all x y. (Blue(x) & Cold(x) & Rough(x) & -Textured(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x y. (Green(x) & -Nice(x) & Feeling(x) & Blue(x))\nTEXT: Cold people that are big and red are usually nice.\nFOL: all x y. (Cold(x) & Big(x) & Red(x) & -Nice(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x y. (Big(x) & Rough(x) & Cold(x) & Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x y. (Round(x) & Green(x) & Nice(x) & -Red(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: all x y. (Cold(x) & Blue(x) & Rough(x) & -Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: all x y. (Nice(x) & Green(x) & Big(x) & -Young(x))\nTEXT: Bob is big.\nFOL: all x y. (Big(x) & Bob(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: For being so cold, it's good Alan can remain nice.\nFOL: all x y. (Being(x) & Cold(x) & Nice(x) -> Alan(x) -> RemainNice(x))\nTEXT: Bob is green and cold too.\nFOL: all x y. (Green(x) & Cold(x) & -Nice(x) & Bob(x))\nTEXT: Charlie can be rough and cold, but he is also green, an avid gardener.\nFOL: all x y. (Rough(x) & Cold(x) & Green(x) & -Nice(x) & Gardener(x))\nTEXT: Harry seems to be round.\nFOL: all x y. (Round(x) & -Nice(x) & Harry(x))\nTEXT: A blue, cold natured person will be rough textured.\nFOL: all x y. (Blue(x) & Cold(x) & -Nice(x) & Rough(x) & Textured(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x y. (Green(x) & -Nice(x) & Feeling(x) & Blue(x))\nTEXT: Cold people that are big and red are usually nice.\nFOL: all x y. (Cold(x) & Big(x) & Red(x) & -Nice(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x y. (Big(x) & Rough(x) & Cold(x) & -Nice(x) & Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x y. (Round(x) & Green(x) & Nice(x) & -Nice(x) & Red(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: all x y. (Cold(x) & Blue(x) & Rough(x) & -Nice(x) & Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: all x y. (Nice(x) & Green(x) & Big(x) & -Young(x))\nTEXT: Bob is big.\nFOL: all x y. (Big(x) & Bob(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: For being so cold, it's good Alan can remain nice.\nFOL: all x y. (Being(x) & Cold(x) & Nice(x) -> Alan(x) -> RemainNice(x))\nTEXT: Bob is green and cold too.\nFOL: all x y. (Green(x) & Cold(x) & -Nice(x) & Bob(x))\nTEXT: Charlie can be rough and cold, but he is also green, an avid gardener.\nFOL: all x y. (Rough(x) & Cold(x) & Green(x) & -Nice(x) & Gardener(x))\nTEXT: Harry seems to be round.\nFOL: all x y. (Round(x) & -Nice(x) & Harry(x))\nTEXT: A blue, cold natured person will be rough textured.\nFOL: all x y. (Blue(x) & Cold(x) & Rough(x) & -Textured(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x y. (Green(x) & -Nice(x) & Feeling(x) & Blue(x))\nTEXT: Cold people that are big and red are usually nice.\nFOL: all x y. (Cold(x) & Big(x) & Red(x) & -Nice(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x y. (Big(x) & Rough(x) & Cold(x) & Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x y. (Round(x) & Green(x) & Nice(x) & -Red(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: all x y. (Cold(x) & Blue(x) & Rough(x) & -Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: all x y. (Nice(x) & Green(x) & Big(x) & -Young(x))\nTEXT: Bob is big.\nFOL: all x. (Big(x) & Bob(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: For being so cold, it's good Alan can remain nice.\nFOL: all x y. (Being(x) & Cold(x) & Nice(x) -> Alan(x) -> RemainNice(x))\nTEXT: Bob is green and cold too.\nFOL: all x y. (Green(x) & Cold(x) & -Nice(x) & Bob(x))\nTEXT: Charlie can be rough and cold, but he is also green, an avid gardener.\nFOL: all x y. (Rough(x) & Cold(x) & Green(x) & -Nice(x) & Gardener(x))\nTEXT: Harry seems to be round.\nFOL: all x y. (Round(x) & -Nice(x) & Harry(x))\nTEXT: A blue, cold natured person will be rough textured.\nFOL: all x y. (Blue(x) & Cold(x) & -Nice(x) & Rough(x) & Textured(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x y. (Green(x) & -Nice(x) & Feeling(x) & Blue(x))\nTEXT: Cold people that are big and red are usually nice.\nFOL: all x y. (Cold(x) & Big(x) & Red(x) & -Nice(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x y. (Big(x) & Rough(x) & Cold(x) & Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x y. (Round(x) & Green(x) & Nice(x) & -Red(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: all x y. (Cold(x) & Blue(x) & -Nice(x) & Rough(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: all x y. (Nice(x) & Green(x) & Big(x) & -Young(x))\nTEXT: Bob is big.\nFOL: all x y. (Big(x) & Bob(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: For being so cold, it's good Alan can remain nice.\nFOL: all x y. (Being(x) & Cold(x) & Nice(x) -> Alan(x) -> RemainNice(x))\nTEXT: Bob is green and cold too.\nFOL: all x y. (Green(x) & Cold(x) & -Nice(x) & Bob(x))\nTEXT: Charlie can be rough and cold, but he is also green, an avid gardener.\nFOL: all x y. (Rough(x) & Cold(x) & Green(x) & -Nice(x) & Gardener(x))\nTEXT: Harry seems to be round.\nFOL: all x y. (Round(x) & -Nice(x) & Harry(x))\nTEXT: A blue, cold natured person will be rough textured.\nFOL: all x y. (Blue(x) & Cold(x) & -Nice(x) & Rough(x) & Textured(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x y. (Green(x) & -Nice(x) & Feeling(x) & Blue(x))\nTEXT: Cold people that are big and red are usually nice.\nFOL: all x y. (Cold(x) & Big(x) & Red(x) & -Nice(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x y. (Big(x) & Rough(x) & Cold(x) & -Nice(x) & Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x y. (Round(x) & Green(x) & Nice(x) & -Nice(x) & Red(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: all x y. (Cold(x) & Blue(x) & Rough(x) & -Nice(x) & Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: all x y. (Nice(x) & Green(x) & Big(x) & -Young(x))\nTEXT: Bob is big.\nFOL: all x. (Big(x) & Bob(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 59,
  "responses": [
   "<EVALUATE>\nTEXT: The bear chases the dog.\nFOL: all x y. (Bear(x) & Dog(y) & -Chases(x, y) -> -Dog(x))\nTEXT: The bear eats the dog.\nFOL: all x y. (Bear(x) & Dog(y) & -Eats(x, y) -> -Dog(x))\nTEXT: The bear is round.\nFOL: all x y. (Bear(x) & Dog(y) & -IsRound(x, y) -> -Dog(x))\nTEXT: The bear needs the mouse.\nFOL: all x y. (Bear(x) & Mouse(y) & -Needs(x, y) -> -Mouse(x))\nTEXT: The dog eats the mouse.\nFOL: all x y. (Dog(x) & Mouse(y) & -Eats(x, y) -> -Mouse(x))\nTEXT: The dog is kind.\nFOL: all x y. (Dog(x) & Mouse(y) & -IsKind(x, y) -> -Mouse(x))\nTEXT: The dog is rough.\nFOL: all x y. (Dog(x) & Mouse(y) & -IsRough(x, y) -> -Mouse(x))\nTEXT: The dog is round.\nFOL: all x y. (Dog(x) & Mouse(y) & -IsRound(x, y) -> -Mouse(x))\nTEXT: The dog needs the bear.\nFOL: all x y. (Dog(x) & Bear(y) & -Needs(x, y) -> -Bear(x))\nTEXT: The dog needs the mouse.\nFOL: all x y. (Dog(x) & Mouse(y) & -Needs(x, y) -> -Mouse(x))\nTEXT: The mouse chases the bear.\nFOL: all x y. (Mouse(x) & Bear(y) & -Chases(x, y) -> -Bear(x))\nTEXT: The mouse eats the bear.\nFOL: all x y. (Mouse(x) & Bear(y) & -Eats(x, y) -> -Bear(x))\nTEXT: The mouse eats the dog.\nFOL: all x y. (Mouse(x) & Dog(y) & -Eats(x, y) -> -Dog(x))\nTEXT: The mouse is round.\nFOL: all x y. (Mouse(x) & Dog(y) & -IsRound(x, y) -> -Dog(x))\nTEXT: The mouse needs the dog.\nFOL: all x y. (Mouse(x) & Dog(y) & -Needs(x, y) -> -Dog(x))\nTEXT: If someone chases the bear then they are kind.\nFOL: all x y. (Someone(x) & Bear(y) & -Chases(x, y) -> -Kind(x))\nTEXT: If someone is round then they chase the bear.\nFOL: all x y. (Someone(x) & Bear(y) & -IsRound(x, y) -> -Chases(x, y))\nTEXT: All kind people are rough.\nFOL: all x y. (Kind(x) & -IsRough(x))\nTEXT: If the mouse is green then the mouse chases the dog.\nFOL: all x y. (Mouse(x) & Green(y) & -Chases(x, y) -> -Dog(x))\nTEXT: If someone needs the bear then they need the mouse.\nFOL: all x y. (Someone(x) & Bear(y) & -Needs(x, y) -> -Mouse(x))\nTEXT: If someone eats the bear and the bear is red then they are round.\nFOL: all x y. (Someone(x) & Bear(y) & -Eats(x, y) & -Bear(x) & -IsRound(x, y))\nTEXT: The bear is green.\nFOL: -Bear(green)",
   "<EVALUATE>\nTEXT: The bear chases the dog.\nFOL: all x y. (Bear(x) & Dog(y) & -Chases(x, y) -> -Dog(x))\nTEXT: The bear eats the dog.\nFOL: all x y. (Bear(x) & Dog(y) & -Eats(x, y) -> -Dog(x))\nTEXT: The bear is round.\nFOL: all x y. (Bear(x) & Dog(y) & -IsRound(x, y) -> -Dog(x))\nTEXT: The bear needs the mouse.\nFOL: all x y. (Bear(x) & Mouse(y) & -Needs(x, y) -> -Mouse(x))\nTEXT: The dog eats the mouse.\nFOL: all x y. (Dog(x) & Mouse(y) & -Eats(x, y) -> -Mouse(x))\nTEXT: The dog is kind.\nFOL: all x y. (Dog(x) & Mouse(y) & -IsKind(x, y) -> -Mouse(x))\nTEXT: The dog is rough.\nFOL: all x y. (Dog(x) & Mouse(y) & -IsRough(x, y) -> -Mouse(x))\nTEXT: The dog is round.\nFOL: all x y. (Dog(x) & Mouse(y) & -IsRound(x, y) -> -Mouse(x))\nTEXT: The dog needs the bear.\nFOL: all x y. (Dog(x) & Bear(y) & -Needs(x, y) -> -Bear(x))\nTEXT: The dog needs the mouse.\nFOL: all x y. (Dog(x) & Mouse(y) & -Needs(x, y) -> -Mouse(x))\nTEXT: The mouse chases the bear.\nFOL: all x y. (Mouse(x) & Bear(y) & -Chases(x, y) -> -Bear(x))\nTEXT: The mouse eats the bear.\nFOL: all x y. (Mouse(x) & Bear(y) & -Eats(x, y) -> -Bear(x))\nTEXT: The mouse eats the dog.\nFOL: all x y. (Mouse(x) & Dog(y) & -Eats(x, y) -> -Dog(x))\nTEXT: The mouse is round.\nFOL: all x y. (Mouse(x) & Bear(y) & -IsRound(x, y) -> -Bear(x))\nTEXT: The mouse needs the dog.\nFOL: all x y. (Mouse(x) & Dog(y) & -Needs(x, y) -> -Dog(x))\nTEXT: If someone chases the bear then they are kind.\nFOL: all x y. (Someone(x) & Bear(y) & -Chases(x, y) -> -Kind(x))\nTEXT: If someone is round then they chase the bear.\nFOL: all x y. (Someone(x) & Bear(y) & -IsRound(x, y) -> -Chases(x, y))\nTEXT: All kind people are rough.\nFOL: all x y. (Kind(x) & -IsRough(x))\nTEXT: If the mouse is green then the mouse chases the dog.\nFOL: all x y. (Mouse(x) & Green(y) & -Chases(x, y) -> -Dog(x))\nTEXT: If someone needs the bear then they need the mouse.\nFOL: all x y. (Someone(x) & Bear(y) & -Needs(x, y) -> -Mouse(x))\nTEXT: If someone eats the bear and the bear is red then they are round.\nFOL: all x y. (Someone(x) & Bear(y) & -Eats(x, y) & -Bear(x) & -IsRound(x, y))\nTEXT: The bear is green.\nFOL: -Bear(green)",
   "<EVALUATE>\nTEXT: The bear chases the dog.\nFOL: all x y. (Bear(x) & Dog(y) & -Chases(x, y) -> -Dog(x))\nTEXT: The bear eats the dog.\nFOL: all x y. (Bear(x) & Dog(y) & -Eats(x, y) -> -Dog(x))\nTEXT: The bear is round.\nFOL: all x y. (Bear(x) & Dog(y) & -IsRound(x, y) -> -Dog(x))\nTEXT: The bear needs the mouse.\nFOL: all x y. (Bear(x) & Mouse(y) & -Needs(x, y) -> -Mouse(x))\nTEXT: The dog eats the mouse.\nFOL: all x y. (Dog(x) & Mouse(y) & -Eats(x, y) -> -Mouse(x))\nTEXT: The dog is kind.\nFOL: all x y. (Dog(x) & Mouse(y) & -IsKind(x, y) -> -Mouse(x))\nTEXT: The dog is rough.\nFOL: all x y. (Dog(x) & Mouse(y) & -IsRough(x, y) -> -Mouse(x))\nTEXT: The dog is round.\nFOL: all x y. (Dog(x) & Mouse(y) & -IsRound(x, y) -> -Mouse(x))\nTEXT: The dog needs the bear.\nFOL: all x y. (Dog(x) & Bear(y) & -Needs(x, y) -> -Bear(x))\nTEXT: The dog needs the mouse.\nFOL: all x y. (Dog(x) & Mouse(y) & -Needs(x, y) -> -Mouse(x))\nTEXT: The mouse chases the bear.\nFOL: all x y. (Mouse(x) & Bear(y) & -Chases(x, y) -> -Bear(x))\nTEXT: The mouse eats the bear.\nFOL: all x y. (Mouse(x) & Bear(y) & -Eats(x, y) -> -Bear(x))\nTEXT: The mouse eats the dog.\nFOL: all x y. (Mouse(x) & Dog(y) & -Eats(x, y) -> -Dog(x))\nTEXT: The mouse is round.\nFOL: all x y. (Mouse(x) & Dog(y) & -IsRound(x, y) -> -Dog(x))\nTEXT: The mouse needs the dog.\nFOL: all x y. (Mouse(x) & Dog(y) & -Needs(x, y) -> -Dog(x))\nTEXT: If someone chases the bear then they are kind.\nFOL: all x y. (Someone(x) & Bear(y) & -Chases(x, y) -> -Kind(x))\nTEXT: If someone is round then they chase the bear.\nFOL: all x y. (Someone(x) & Bear(y) & -IsRound(x, y) -> -Chases(x, y))\nTEXT: All kind people are rough.\nFOL: all x y. (Someone(x) & Kind(x) & -IsRough(x))\nTEXT: If the mouse is green then the mouse chases the dog.\nFOL: all x y. (Mouse(x) & Green(y) & -Chases(x, y) -> -Dog(x))\nTEXT: If someone needs the bear then they need the mouse.\nFOL: all x y. (Someone(x) & Bear(y) & -Needs(x, y) -> -Mouse(x))\nTEXT: If someone eats the bear and the bear is red then they are round.\nFOL: all x y. (Someone(x) & Bear(y) & -Eats(x, y) & -Bear(x) & -IsRound(x))\nTEXT: The bear is green.\nFOL: -Bear(green)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear chases the dog.\nFOL: all x y. (Bear(x) & Dog(y) & -Chases(x, y) -> -Dog(x))\nTEXT: The bear eats the dog.\nFOL: all x y. (Bear(x) & Dog(y) & -Eats(x, y) -> -Dog(x))\nTEXT: The bear is round.\nFOL: all x y. (Bear(x) & Dog(y) & -IsRound(x, y) -> -Dog(x))\nTEXT: The bear needs the mouse.\nFOL: all x y. (Bear(x) & Mouse(y) & -Needs(x, y) -> -Mouse(x))\nTEXT: The dog eats the mouse.\nFOL: all x y. (Dog(x) & Mouse(y) & -Eats(x, y) -> -Mouse(x))\nTEXT: The dog is kind.\nFOL: all x y. (Dog(x) & Mouse(y) & -IsKind(x, y) -> -Mouse(x))\nTEXT: The dog is rough.\nFOL: all x y. (Dog(x) & Mouse(y) & -IsRough(x, y) -> -Mouse(x))\nTEXT: The dog is round.\nFOL: all x y. (Dog(x) & Mouse(y) & -IsRound(x, y) -> -Mouse(x))\nTEXT: The dog needs the bear.\nFOL: all x y. (Dog(x) & Bear(y) & -Needs(x, y) -> -Bear(x))\nTEXT: The dog needs the mouse.\nFOL: all x y. (Dog(x) & Mouse(y) & -Needs(x, y) -> -Mouse(x))\nTEXT: The mouse chases the bear.\nFOL: all x y. (Mouse(x) & Bear(y) & -Chases(x, y) -> -Bear(x))\nTEXT: The mouse eats the bear.\nFOL: all x y. (Mouse(x) & Bear(y) & -Eats(x, y) -> -Bear(x))\nTEXT: The mouse eats the dog.\nFOL: all x y. (Mouse(x) & Dog(y) & -Eats(x, y) -> -Dog(x))\nTEXT: The mouse is round.\nFOL: all x y. (Mouse(x) & Bear(y) & -IsRound(x, y) -> -Bear(x))\nTEXT: The mouse needs the dog.\nFOL: all x y. (Mouse(x) & Dog(y) & -Needs(x, y) -> -Dog(x))\nTEXT: If someone chases the bear then they are kind.\nFOL: all x y. (Someone(x) & Bear(y) & -Chases(x, y) -> -Kind(x))\nTEXT: If someone is round then they chase the bear.\nFOL: all x y. (Someone(x) & Bear(y) & -IsRound(x, y) -> -Chases(x, y))\nTEXT: All kind people are rough.\nFOL: all x y. (Someone(x) & Kind(x) & -IsRough(x))\nTEXT: If the mouse is green then the mouse chases the dog.\nFOL: all x y. (Mouse(x) & Green(y) & -Chases(x, y) -> -Dog(x))\nTEXT: If someone needs the bear then they need the mouse.\nFOL: all x y. (Someone(x) & Bear(y) & -Needs(x, y) -> -Mouse(x))\nTEXT: If someone eats the bear and the bear is red then they are round.\nFOL: all x y. (Someone(x) & Bear(y) & -Eats(x, y) & -Bear(x) & -IsRound(x))\nTEXT: The bear is green.\nFOL: -Bear(green)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear chases the dog.\nFOL: all x y. (Bear(x) & Dog(y) & -Chases(x, y) -> -Dog(x))\nTEXT: The bear eats the dog.\nFOL: all x y. (Bear(x) & Dog(y) & -Eats(x, y) -> -Dog(x))\nTEXT: The bear is round.\nFOL: all x y. (Bear(x) & Dog(y) & -IsRound(x, y) -> -Dog(x))\nTEXT: The bear needs the mouse.\nFOL: all x y. (Bear(x) & Mouse(y) & -Needs(x, y) -> -Mouse(x))\nTEXT: The dog eats the mouse.\nFOL: all x y. (Dog(x) & Mouse(y) & -Eats(x, y) -> -Mouse(x))\nTEXT: The dog is kind.\nFOL: all x y. (Dog(x) & Mouse(y) & -IsKind(x, y) -> -Mouse(x))\nTEXT: The dog is rough.\nFOL: all x y. (Dog(x) & Mouse(y) & -IsRough(x, y) -> -Mouse(x))\nTEXT: The dog is round.\nFOL: all x y. (Dog(x) & Mouse(y) & -IsRound(x, y) -> -Mouse(x))\nTEXT: The dog needs the bear.\nFOL: all x y. (Dog(x) & Bear(y) & -Needs(x, y) -> -Bear(x))\nTEXT: The dog needs the mouse.\nFOL: all x y. (Dog(x) & Mouse(y) & -Needs(x, y) -> -Mouse(x))\nTEXT: The mouse chases the bear.\nFOL: all x y. (Mouse(x) & Bear(y) & -Chases(x, y) -> -Bear(x))\nTEXT: The mouse eats the bear.\nFOL: all x y. (Mouse(x) & Bear(y) & -Eats(x, y) -> -Bear(x))\nTEXT: The mouse eats the dog.\nFOL: all x y. (Mouse(x) & Dog(y) & -Eats(x, y) -> -Dog(x))\nTEXT: The mouse is round.\nFOL: all x y. (Mouse(x) & Bear(y) & -IsRound(x, y) -> -Bear(x))\nTEXT: The mouse needs the dog.\nFOL: all x y. (Mouse(x) & Dog(y) & -Needs(x, y) -> -Dog(x))\nTEXT: If someone chases the bear then they are kind.\nFOL: all x y. (Someone(x) & Bear(y) & -Chases(x, y) -> -Kind(x))\nTEXT: If someone is round then they chase the bear.\nFOL: all x y. (Someone(x) & Bear(y) & -IsRound(x, y) -> -Chases(x, y))\nTEXT: All kind people are rough.\nFOL: all x y. (Someone(x) & Kind(x) & -IsRough(x))\nTEXT: If the mouse is green then the mouse chases the dog.\nFOL: all x y. (Mouse(x) & Green(y) & -Chases(x, y) -> -Dog(x))\nTEXT: If someone needs the bear then they need the mouse.\nFOL: all x y. (Someone(x) & Bear(y) & -Needs(x, y) -> -Mouse(x))\nTEXT: If someone eats the bear and the bear is red then they are round.\nFOL: all x y. (Someone(x) & Bear(y) & -Eats(x, y) & -Bear(x) & -IsRound(x))\nTEXT: The bear is green.\nFOL: -Bear(green)"
  ]
 },
 {
  "index": 60,
  "responses": [
   "<EVALUATE>\nTEXT: The bear is not round.\nFOL: all x. (Bear(x) -> NotRound(x))\nTEXT: The bear likes the cow.\nFOL: all x. (Bear(x) -> LikesCow(x))\nTEXT: The bear likes the squirrel.\nFOL: all x. (Bear(x) -> LikesSquirrel(x))\nTEXT: The bear sees the dog.\nFOL: all x. (Bear(x) -> SeesDog(x))\nTEXT: The bear visits the cow.\nFOL: all x. (Bear(x) -> VisitsCow(x))\nTEXT: The cow is not blue.\nFOL: all x. (Cow(x) -> -Blue(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\nTEXT: The cow likes the dog.\nFOL: all x. (Cow(x) -> LikesDog(x))\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> Green(x))\nTEXT: The dog is nice.\nFOL: all x. (Dog(x) -> Nice(x))\nTEXT: The dog sees the bear.\nFOL: all x. (Dog(x) -> SeesBear(x))\nTEXT: The dog does not visit the bear.\nFOL: all x. (Dog(x) -> -VisitsBear(x))\nTEXT: The dog visits the cow.\nFOL: all x. (Dog(x) -> VisitsCow(x))\nTEXT: The dog visits the squirrel.\nFOL: all x. (Dog(x) -> VisitsSquirrel(x))\nTEXT: The squirrel is blue.\nFOL: all x. (Squirrel(x) -> -Blue(x))\nTEXT: The squirrel sees the bear.\nFOL: all x. (Squirrel(x) -> SeesBear(x))\nTEXT: If something is round and not kind then it visits the squirrel.\nFOL: all x. (Something(x) -> Round(x) & -Kind(x) -> VisitsSquirrel(x))\nTEXT: If the dog likes the squirrel then the squirrel sees the cow.\nFOL: all x. (Dog(x) -> LikesSquirrel(x) & Squirrel(x) -> SeesCow(x))\nTEXT: If the squirrel is nice and the squirrel visits the bear then the bear is not green.\nFOL: all x. (Squirrel(x) -> Nice(x) & Squirrel(x) -> VisitsBear(x) -> NotGreen(x))\nTEXT: If the squirrel sees the dog then the dog does not like the bear.\nFOL: all x. (Squirrel(x) -> SeesDog(x) & Dog(x) -> -LikesBear(x))\nTEXT: If something visits the cow and the cow is kind then the cow likes the squirrel.\nFOL: all x. (Something(x) -> VisitsCow(x) & Cow(x) -> -Kind(x) -> LikesSquirrel(x))\nTEXT: If something likes the cow and the cow does not like the dog then the dog is round.\nFOL: all x. (Something(x) -> LikesCow(x) & Cow(x) -> -LikesDog(x) -> NotRound(x))\nTEXT: If something is blue then it visits the bear.\nFOL: all x. (Something(x) -> -Blue(x) -> VisitsBear(x))\nTEXT: If something is kind and it likes the dog then it sees the dog.\nFOL: all x. (Something(x) -> -Kind(x) & LikesDog(x) -> SeesDog(x))\nTEXT: The bear does not see the dog.\nFOL: -SeesDog(bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is not round.\nFOL: all x. (Bear(x) -> NotRound(x))\nTEXT: The bear likes the cow.\nFOL: all x. (Bear(x) -> LikesCow(x))\nTEXT: The bear likes the squirrel.\nFOL: all x. (Bear(x) -> LikesSquirrel(x))\nTEXT: The bear sees the dog.\nFOL: all x. (Bear(x) -> SeesDog(x))\nTEXT: The bear visits the cow.\nFOL: all x. (Bear(x) -> VisitsCow(x))\nTEXT: The cow is not blue.\nFOL: all x. (Cow(x) -> -Blue(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\nTEXT: The cow likes the dog.\nFOL: all x. (Cow(x) -> LikesDog(x))\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> Green(x))\nTEXT: The dog is nice.\nFOL: all x. (Dog(x) -> Nice(x))\nTEXT: The dog sees the bear.\nFOL: all x. (Dog(x) -> SeesBear(x))\nTEXT: The dog does not visit the bear.\nFOL: all x. (Dog(x) -> -VisitsBear(x))\nTEXT: The dog visits the cow.\nFOL: all x. (Dog(x) -> VisitsCow(x))\nTEXT: The dog visits the squirrel.\nFOL: all x. (Dog(x) -> VisitsSquirrel(x))\nTEXT: The squirrel is blue.\nFOL: all x. (Squirrel(x) -> -Blue(x))\nTEXT: The squirrel sees the bear.\nFOL: all x. (Squirrel(x) -> SeesBear(x))\nTEXT: If something is round and not kind then it visits the squirrel.\nFOL: all x. (Something(x) -> Round(x) & -Kind(x) -> VisitsSquirrel(x))\nTEXT: If the dog likes the squirrel then the squirrel sees the cow.\nFOL: all x. (Dog(x) -> LikesSquirrel(x) & Squirrel(x) -> SeesCow(x))\nTEXT: If the squirrel is nice and the squirrel visits the bear then the bear is not green.\nFOL: all x. (Squirrel(x) -> Nice(x) & Squirrel(x) -> VisitsBear(x) -> NotGreen(x))\nTEXT: If the squirrel sees the dog then the dog does not like the bear.\nFOL: all x. (Squirrel(x) -> SeesDog(x) & Dog(x) -> -LikesBear(x))\nTEXT: If something visits the cow and the cow is kind then the cow likes the squirrel.\nFOL: all x. (Something(x) -> VisitsCow(x) & Cow(x) -> -Kind(x) -> LikesSquirrel(x))\nTEXT: If something likes the cow and the cow does not like the dog then the dog is round.\nFOL: all x. (Something(x) -> LikesCow(x) & Cow(x) -> -LikesDog(x) -> NotRound(x))\nTEXT: If something is blue then it visits the bear.\nFOL: all x. (Something(x) -> -Blue(x) -> VisitsBear(x))\nTEXT: If something is kind and it likes the dog then it sees the dog.\nFOL: all x. (Something(x) -> -Kind(x) & LikesDog(x) -> SeesDog(x))\nTEXT: The bear does not see the dog.\nFOL: -SeesDog(bear)",
   "<EVALUATE>\nTEXT: The bear is not round.\nFOL: all x. (Bear(x) -> NotRound(x))\nTEXT: The bear likes the cow.\nFOL: all x. (Bear(x) -> LikesCow(x))\nTEXT: The bear likes the squirrel.\nFOL: all x. (Bear(x) -> LikesSquirrel(x))\nTEXT: The bear sees the dog.\nFOL: all x. (Bear(x) -> SeesDog(x))\nTEXT: The bear visits the cow.\nFOL: all x. (Bear(x) -> VisitsCow(x))\nTEXT: The cow is not blue.\nFOL: all x. (Cow(x) -> -Blue(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\nTEXT: The cow likes the dog.\nFOL: all x. (Cow(x) -> LikesDog(x))\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> Green(x))\nTEXT: The dog is nice.\nFOL: all x. (Dog(x) -> Nice(x))\nTEXT: The dog sees the bear.\nFOL: all x. (Dog(x) -> SeesBear(x))\nTEXT: The dog does not visit the bear.\nFOL: all x. (Dog(x) -> -VisitsBear(x))\nTEXT: The dog visits the cow.\nFOL: all x. (Dog(x) -> VisitsCow(x))\nTEXT: The dog visits the squirrel.\nFOL: all x. (Dog(x) -> VisitsSquirrel(x))\nTEXT: The squirrel is blue.\nFOL: all x. (Squirrel(x) -> -Blue(x))\nTEXT: The squirrel sees the bear.\nFOL: all x. (Squirrel(x) -> SeesBear(x))\nTEXT: If something is round and not kind then it visits the squirrel.\nFOL: all x. (Something(x) -> Round(x) & -Kind(x) -> VisitsSquirrel(x))\nTEXT: If the dog likes the squirrel then the squirrel sees the cow.\nFOL: all x. (Dog(x) -> LikesSquirrel(x) & Squirrel(x) -> SeesCow(x))\nTEXT: If the squirrel is nice and the squirrel visits the bear then the bear is not green.\nFOL: all x. (Squirrel(x) -> Nice(x) & Squirrel(x) -> VisitsBear(x) -> NotGreen(x))\nTEXT: If the squirrel sees the dog then the dog does not like the bear.\nFOL: all x. (Squirrel(x) -> SeesDog(x) & Dog(x) -> -LikesBear(x))\nTEXT: If something visits the cow and the cow is kind then the cow likes the squirrel.\nFOL: all x. (Something(x) -> VisitsCow(x) & Cow(x) -> -Kind(x) -> LikesSquirrel(x))\nTEXT: If something likes the cow and the cow does not like the dog then the dog is round.\nFOL: all x. (Something(x) -> LikesCow(x) & Cow(x) -> -LikesDog(x) -> NotRound(x))\nTEXT: If something is blue then it visits the bear.\nFOL: all x. (Something(x) -> -Blue(x) -> VisitsBear(x))\nTEXT: If something is kind and it likes the dog then it sees the dog.\nFOL: all x. (Something(x) -> -Kind(x) & LikesDog(x) -> SeesDog(x))\nTEXT: The bear does not see the dog.\nFOL: not (Bear(x) -> SeesDog(x))",
   "<EVALUATE>\nTEXT: The bear is not round.\nFOL: all x. (Bear(x) -> NotRound(x))\nTEXT: The bear likes the cow.\nFOL: all x. (Bear(x) -> LikesCow(x))\nTEXT: The bear likes the squirrel.\nFOL: all x. (Bear(x) -> LikesSquirrel(x))\nTEXT: The bear sees the dog.\nFOL: all x. (Bear(x) -> SeesDog(x))\nTEXT: The bear visits the cow.\nFOL: all x. (Bear(x) -> VisitsCow(x))\nTEXT: The cow is not blue.\nFOL: all x. (Cow(x) -> -Blue(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\nTEXT: The cow likes the dog.\nFOL: all x. (Cow(x) -> LikesDog(x))\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> Green(x))\nTEXT: The dog is nice.\nFOL: all x. (Dog(x) -> Nice(x))\nTEXT: The dog sees the bear.\nFOL: all x. (Dog(x) -> SeesBear(x))\nTEXT: The dog does not visit the bear.\nFOL: all x. (Dog(x) -> -VisitsBear(x))\nTEXT: The dog visits the cow.\nFOL: all x. (Dog(x) -> VisitsCow(x))\nTEXT: The dog visits the squirrel.\nFOL: all x. (Dog(x) -> VisitsSquirrel(x))\nTEXT: The squirrel is blue.\nFOL: all x. (Squirrel(x) -> -Blue(x))\nTEXT: The squirrel sees the bear.\nFOL: all x. (Squirrel(x) -> SeesBear(x))\nTEXT: If something is round and not kind then it visits the squirrel.\nFOL: all x. (Something(x) -> Round(x) & -Kind(x) -> VisitsSquirrel(x))\nTEXT: If the dog likes the squirrel then the squirrel sees the cow.\nFOL: all x. (Dog(x) -> LikesSquirrel(x) & Squirrel(x) -> SeesCow(x))\nTEXT: If the squirrel is nice and the squirrel visits the bear then the bear is not green.\nFOL: all x. (Squirrel(x) -> Nice(x) & Squirrel(x) -> VisitsBear(x) -> NotGreen(x))\nTEXT: If the squirrel sees the dog then the dog does not like the bear.\nFOL: all x. (Squirrel(x) -> SeesDog(x) & Dog(x) -> -LikesBear(x))\nTEXT: If something visits the cow and the cow is kind then the cow likes the squirrel.\nFOL: all x. (Something(x) -> VisitsCow(x) & Cow(x) -> -Kind(x) -> LikesSquirrel(x))\nTEXT: If something likes the cow and the cow does not like the dog then the dog is round.\nFOL: all x. (Something(x) -> LikesCow(x) & Cow(x) -> -LikesDog(x) -> NotRound(x))\nTEXT: If something is blue then it visits the bear.\nFOL: all x. (Something(x) -> -Blue(x) -> VisitsBear(x))\nTEXT: If something is kind and it likes the dog then it sees the dog.\nFOL: all x. (Something(x) -> -Kind(x) & LikesDog(x) -> SeesDog(x))\nTEXT: The bear does not see the dog.\nFOL: -Bear(x) & -Dog(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is not round.\nFOL: all x. (Bear(x) -> NotRound(x))\nTEXT: The bear likes the cow.\nFOL: all x. (Bear(x) -> LikesCow(x))\nTEXT: The bear likes the squirrel.\nFOL: all x. (Bear(x) -> LikesSquirrel(x))\nTEXT: The bear sees the dog.\nFOL: all x. (Bear(x) -> SeesDog(x))\nTEXT: The bear visits the cow.\nFOL: all x. (Bear(x) -> VisitsCow(x))\nTEXT: The cow is not blue.\nFOL: all x. (Cow(x) -> -Blue(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> Round(x))\nTEXT: The cow likes the dog.\nFOL: all x. (Cow(x) -> LikesDog(x))\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> Green(x))\nTEXT: The dog is nice.\nFOL: all x. (Dog(x) -> Nice(x))\nTEXT: The dog sees the bear.\nFOL: all x. (Dog(x) -> SeesBear(x))\nTEXT: The dog does not visit the bear.\nFOL: all x. (Dog(x) -> -VisitsBear(x))\nTEXT: The dog visits the cow.\nFOL: all x. (Dog(x) -> VisitsCow(x))\nTEXT: The dog visits the squirrel.\nFOL: all x. (Dog(x) -> VisitsSquirrel(x))\nTEXT: The squirrel is blue.\nFOL: all x. (Squirrel(x) -> -Blue(x))\nTEXT: The squirrel sees the bear.\nFOL: all x. (Squirrel(x) -> SeesBear(x))\nTEXT: If something is round and not kind then it visits the squirrel.\nFOL: all x. (Something(x) -> Round(x) & -Kind(x) -> VisitsSquirrel(x))\nTEXT: If the dog likes the squirrel then the squirrel sees the cow.\nFOL: all x. (Dog(x) -> LikesSquirrel(x) & Squirrel(x) -> SeesCow(x))\nTEXT: If the squirrel is nice and the squirrel visits the bear then the bear is not green.\nFOL: all x. (Squirrel(x) -> Nice(x) & Squirrel(x) -> VisitsBear(x) -> NotGreen(x))\nTEXT: If the squirrel sees the dog then the dog does not like the bear.\nFOL: all x. (Squirrel(x) -> SeesDog(x) & Dog(x) -> -LikesBear(x))\nTEXT: If something visits the cow and the cow is kind then the cow likes the squirrel.\nFOL: all x. (Something(x) -> VisitsCow(x) & Cow(x) -> -Kind(x) -> LikesSquirrel(x))\nTEXT: If something likes the cow and the cow does not like the dog then the dog is round.\nFOL: all x. (Something(x) -> LikesCow(x) & Cow(x) -> -LikesDog(x) -> NotRound(x))\nTEXT: If something is blue then it visits the bear.\nFOL: all x. (Something(x) -> -Blue(x) -> VisitsBear(x))\nTEXT: If something is kind and it likes the dog then it sees the dog.\nFOL: all x. (Something(x) -> -Kind(x) & LikesDog(x) -> SeesDog(x))\nTEXT: The bear does not see the dog.\nFOL: -Bear(x) & -LikesDog(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 61,
  "responses": [
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x. (Young(x) & -Cold(x) -> NamedAlan(x))\nTEXT: Charlie is kind and nice and looks green.\nFOL: all x. (Kind(x) & Nice(x) & Green(x))\nTEXT: Fred may be round, but he is also kind.\nFOL: all x. (Round(x) & Kind(x))\nTEXT: Harry seems to be round.\nFOL: all x. (Round(x) & -Kind(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & Nice(x) & Red(x))\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: all x. (Young(x) & -Cold(x) & Green(x) & Nice(x))\nTEXT: People who are young and blue are also red.\nFOL: all x. (Young(x) & Blue(x) & Red(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Big(x) & -Cold(x) & Red(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (Young(x) & Age(x) & Round(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Young(x) & Red(x) & Rough(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & -Cold(x) & Blue(x))\nTEXT: Charlie is blue.\nFOL: Charlie is blue\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x. (Young(x) & -Cold(x) -> NamedAlan(x))\nTEXT: Charlie is kind and nice and looks green.\nFOL: all x. (Kind(x) & Nice(x) & Green(x))\nTEXT: Fred may be round, but he is also kind.\nFOL: all x. (Round(x) & Kind(x))\nTEXT: Harry seems to be round.\nFOL: all x. (Round(x) & -Kind(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & Nice(x) & Red(x))\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: all x. (Young(x) & -Cold(x) & Green(x) & Nice(x))\nTEXT: People who are young and blue are also red.\nFOL: all x. (Young(x) & Blue(x) & Red(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Big(x) & -Cold(x) & Red(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (Young(x) & Age(x) & Round(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Young(x) & Red(x) & Rough(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & -Cold(x) & Blue(x))\nTEXT: Charlie is blue.\nFOL: -Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x. (Young(x) & -Cold(x) -> NamedAlan(x))\nTEXT: Charlie is kind and nice and looks green.\nFOL: all x. (Kind(x) & Nice(x) & Green(x))\nTEXT: Fred may be round, but he is also kind.\nFOL: all x. (Round(x) & Kind(x))\nTEXT: Harry seems to be round.\nFOL: all x. (Round(x) & -Kind(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & Nice(x) & Red(x))\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: all x. (Young(x) & -Cold(x) & Green(x) & Nice(x))\nTEXT: People who are young and blue are also red.\nFOL: all x. (Young(x) & Blue(x) & Red(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Big(x) & -Cold(x) & Red(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (Young(x) & Age(x) & Round(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Young(x) & Red(x) & Rough(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & -Cold(x) & Blue(x))\nTEXT: Charlie is blue.\nFOL: Charlie is blue",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x. (Young(x) & -Cold(x) -> NamedAlan(x))\nTEXT: Charlie is kind and nice and looks green.\nFOL: all x. (Kind(x) & Nice(x) & Green(x))\nTEXT: Fred may be round, but he is also kind.\nFOL: all x. (Round(x) & Kind(x))\nTEXT: Harry seems to be round.\nFOL: all x. (Round(x) & -Kind(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & Nice(x) & Red(x))\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: all x. (Young(x) & -Cold(x) & Green(x) & Nice(x))\nTEXT: People who are young and blue are also red.\nFOL: all x. (Young(x) & Blue(x) & Red(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Big(x) & Rough(x) & -Cold(x) & Red(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (Young(x) & Age(x) & -Heart(x) & Round(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Young(x) & Red(x) & -Hands(x) & Rough(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & -Cold(x) & Blue(x))\nTEXT: Charlie is blue.\nFOL: -Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x. (Young(x) & -Cold(x) -> NamedAlan(x))\nTEXT: Charlie is kind and nice and looks green.\nFOL: all x. (Kind(x) & Nice(x) & Green(x))\nTEXT: Fred may be round, but he is also kind.\nFOL: all x. (Round(x) & Kind(x))\nTEXT: Harry seems to be round.\nFOL: all x. (Round(x) & -Kind(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & Nice(x) & Red(x))\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: all x. (Young(x) & -Cold(x) & Green(x) & Nice(x))\nTEXT: People who are young and blue are also red.\nFOL: all x. (Young(x) & Blue(x) & Red(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Big(x) & Rough(x) & -Cold(x) & Red(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (Young(x) & Age(x) & -Heart(x) & Round(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Young(x) & Red(x) & -Hands(x) & Rough(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & -Cold(x) & Blue(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) & Blue(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 62,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is kind and nice and looks green.\nFOL: all x. (Bob(x) -> Kind(x) & Nice(x) & LookGreen(x))\nTEXT: Eric, who is relatively young, is also pretty big and tends to be cold.\nFOL: all x. (Eric(x) -> Young(x) & Big(x) & -Cold(x))\nTEXT: Fred is kind.\nFOL: Fred(x) -> Kind(x)\nTEXT: He is also very cold and blue.\nFOL: He(x) -> Cold(x) & Blue(x)\nTEXT: That guy Harry sure is nice.\nFOL: ThatGuyHarry(x) -> Nice(x)\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: all x. (Big(x) & Kind(x) & -Cold(x) & Red(x))\nTEXT: Kind red people are green on the inside.\nFOL: all x. (Kind(x) & Red(x) & LookGreen(x))\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: all x. (Kind(x) & -Cold(x) & -Blue(x) & Big(x))\nTEXT: Kind red and round people often look green.\nFOL: all x. (Kind(x) & Round(x) & LookGreen(x))\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: all x. (Kind(x) & -Cold(x) & LookRed(x) & Young(x))\nTEXT: Bob is blue.\nFOL: Bob(x) -> Blue(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind and nice and looks green.\nFOL: all x. (Bob(x) -> Kind(x) & Nice(x) & LookGreen(x))\nTEXT: Eric, who is relatively young, is also pretty big and tends to be cold.\nFOL: all x. (Eric(x) -> Young(x) & Big(x) & -Cold(x))\nTEXT: Fred is kind.\nFOL: Fred(x) -> Kind(x)\nTEXT: He is also very cold and blue.\nFOL: He(x) -> Cold(x) & Blue(x)\nTEXT: That guy Harry sure is nice.\nFOL: ThatGuyHarry(x) -> Nice(x)\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: all x. (Big(x) & Kind(x) & -Cold(x) & Red(x))\nTEXT: Kind red people are green on the inside.\nFOL: all x. (Kind(x) & Red(x) & LookGreen(x))\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: all x. (Kind(x) & Cold(x) & Blue(x) & Big(x))\nTEXT: Kind red and round people often look green.\nFOL: all x. (Kind(x) & Red(x) & Round(x) & LookGreen(x))\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: all x. (Kind(x) & Cold(x) & LookRed(x) & Young(x))\nTEXT: Bob is blue.\nFOL: Bob(x) -> Blue(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind and nice and looks green.\nFOL: all x. (Bob(x) -> Kind(x) & Nice(x) & LookGreen(x))\nTEXT: Eric, who is relatively young, is also pretty big and tends to be cold.\nFOL: all x. (Eric(x) -> Young(x) & Big(x) & -Cold(x))\nTEXT: Fred is kind.\nFOL: Fred(x) -> Kind(x)\nTEXT: He is also very cold and blue.\nFOL: He(x) -> Cold(x) & Blue(x)\nTEXT: That guy Harry sure is nice.\nFOL: ThatGuyHarry(x) -> Nice(x)\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: all x. (Big(x) & Kind(x) & -Cold(x) & Red(x))\nTEXT: Kind red people are green on the inside.\nFOL: all x. (Kind(x) & Red(x) & LookGreen(x))\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: all x. (Kind(x) & -Cold(x) & -Blue(x) & Big(x))\nTEXT: Kind red and round people often look green.\nFOL: all x. (Kind(x) & Red(x) & Round(x) & LookGreen(x))\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: all x. (Kind(x) & -Cold(x) & -LookRed(x) & Young(x))\nTEXT: Bob is blue.\nFOL: Bob(x) -> Blue(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind and nice and looks green.\nFOL: all x. (Bob(x) -> Kind(x) & Nice(x) & LookGreen(x))\nTEXT: Eric, who is relatively young, is also pretty big and tends to be cold.\nFOL: all x. (Eric(x) -> Young(x) & Big(x) & -Cold(x))\nTEXT: Fred is kind.\nFOL: Fred(x) -> Kind(x)\nTEXT: He is also very cold and blue.\nFOL: He(x) -> Cold(x) & Blue(x)\nTEXT: That guy Harry sure is nice.\nFOL: ThatGuyHarry(x) -> Nice(x)\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: all x. (Big(x) & Kind(x) & -Cold(x) & Red(x))\nTEXT: Kind red people are green on the inside.\nFOL: all x. (Kind(x) & Red(x) & LookGreen(x))\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: all x. (Kind(x) & Cold(x) & Blue(x) & Big(x))\nTEXT: Kind red and round people often look green.\nFOL: all x. (Kind(x) & Red(x) & Round(x) & LookGreen(x))\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: all x. (Kind(x) & -Cold(x) & LookRed(x) & Young(x))\nTEXT: Bob is blue.\nFOL: Bob(x) -> Blue(x)\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Bob is kind and nice and looks green.\nFOL: all x. (Bob(x) -> Kind(x) & Nice(x) & LookGreen(x))\n\nTEXT: Eric, who is relatively young, is also pretty big and tends to be cold.\nFOL: all x. (Eric(x) -> Young(x) & Big(x) & -Cold(x))\n\nTEXT: Fred is kind.\nFOL: Fred(x) -> Kind(x)\n\nTEXT: He is also very cold and blue.\nFOL: He(x) -> Cold(x) & Blue(x)\n\nTEXT: That guy Harry sure is nice.\nFOL: ThatGuyHarry(x) -> Nice(x)\n\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: all x. (Big(x) & Kind(x) & -Cold(x) & Red(x))\n\nTEXT: Kind red people are green on the inside.\nFOL: all x. (Red(x) & Kind(x) & -Cold(x) & LookGreen(x))\n\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: all x. (Kind(x) & -Cold(x) & -Blue(x) & Big(x))\n\nTEXT: Kind red and round people often look green.\nFOL: all x. (Kind(x) & Round(x) & -Cold(x) & LookGreen(x))\n\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: all x. (Kind(x) & -Cold(x) & LookRed(x) & Young(x))\n\nTEXT: Bob is blue.\nFOL: Bob(x) -> Blue(x)"
  ]
 },
 {
  "index": 63,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is red.\nFOL: all x. (BaldEagle(x) -> Red(x))\nTEXT: The cat chases the rabbit.\nFOL: all x. (Cat(x) -> ChasesRabbit(x))\nTEXT: The rabbit does not eat the bald eagle.\nFOL: all x. (Rabbit(x) -> -EatBaldEagle(x))\nTEXT: The squirrel chases the rabbit.\nFOL: all x. (Squirrel(x) -> ChasesRabbit(x))\nTEXT: If someone likes the bald eagle then the bald eagle chases the cat.\nFOL: all x y. (Like(x) & BaldEagle(x) -> ChasesCat(x))\nTEXT: If someone eats the rabbit then the rabbit does not chase the squirrel.\nFOL: all x y. (Eat(x) & Rabbit(x) -> -ChasesCat(x))\nTEXT: If someone likes the cat and they are not blue then the cat is nice.\nFOL: all x y. (Like(x) & Cat(x) & -Blue(x) -> Nice(x))\nTEXT: If someone is red then they like the bald eagle.\nFOL: all x. (Red(x) -> LikeBaldEagle(x))\nTEXT: If someone chases the cat then they eat the squirrel.\nFOL: all x y. (ChasesCat(x) & Eat(x) -> Squirrel(x))\nTEXT: If someone is kind and they do not eat the rabbit then the rabbit eats the squirrel.\nFOL: all x y. (Kind(x) & -Eat(x) & Rabbit(x) -> Squirrel(x))\nTEXT: If someone eats the squirrel and they are not red then the squirrel is not nice.\nFOL: all x y. (Eat(x) & Squirrel(x) & -Red(x) -> -Nice(x))\nTEXT: If someone eats the bald eagle then they chase the cat.\nFOL: all x y. (Eat(x) & BaldEagle(x) -> ChasesCat(x))\nTEXT: The squirrel likes the rabbit.\nFOL: all x. (Squirrel(x) -> Rabbit(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is red.\nFOL: all x. (BaldEagle(x) -> Red(x))\nTEXT: The cat chases the rabbit.\nFOL: all x. (Cat(x) -> ChasesRabbit(x))\nTEXT: The rabbit does not eat the bald eagle.\nFOL: all x. (Rabbit(x) -> -EatBaldEagle(x))\nTEXT: The squirrel chases the rabbit.\nFOL: all x. (Squirrel(x) -> ChasesRabbit(x))\nTEXT: If someone likes the bald eagle then the bald eagle chases the cat.\nFOL: all x y. (Like(x) & BaldEagle(x) -> ChasesCat(x))\nTEXT: If someone eats the rabbit then the rabbit does not chase the squirrel.\nFOL: all x y. (Eat(x) & Rabbit(x) -> -ChasesCat(x))\nTEXT: If someone likes the cat and they are not blue then the cat is nice.\nFOL: all x y. (Like(x) & Cat(x) & -Blue(x) -> Nice(x))\nTEXT: If someone is red then they like the bald eagle.\nFOL: all x. (Red(x) -> LikeBaldEagle(x))\nTEXT: If someone chases the cat then they eat the squirrel.\nFOL: all x y. (ChasesCat(x) & Eat(x) -> Squirrel(x))\nTEXT: If someone is kind and they do not eat the rabbit then the rabbit eats the squirrel.\nFOL: all x y. (Kind(x) & -Eat(x) & Rabbit(x) -> Squirrel(x))\nTEXT: If someone eats the squirrel and they are not red then the squirrel is not nice.\nFOL: all x y. (Eat(x) & Squirrel(x) & -Red(x) -> -Nice(x))\nTEXT: If someone eats the bald eagle then they chase the cat.\nFOL: all x y. (Eat(x) & BaldEagle(x) -> ChasesCat(x))\nTEXT: The squirrel likes the rabbit.\nFOL: all x y. (Squirrel(x) -> LikeRabbit(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is red.\nFOL: all x. (BaldEagle(x) -> Red(x))\nTEXT: The cat chases the rabbit.\nFOL: all x. (Cat(x) -> ChasesRabbit(x))\nTEXT: The rabbit does not eat the bald eagle.\nFOL: all x. (Rabbit(x) -> -EatBaldEagle(x))\nTEXT: The squirrel chases the rabbit.\nFOL: all x. (Squirrel(x) -> ChasesRabbit(x))\nTEXT: If someone likes the bald eagle then the bald eagle chases the cat.\nFOL: all x y. (Like(x) & BaldEagle(x) -> ChasesCat(x))\nTEXT: If someone eats the rabbit then the rabbit does not chase the squirrel.\nFOL: all x y. (Eat(x) & Rabbit(x) -> -ChasesCat(x))\nTEXT: If someone likes the cat and they are not blue then the cat is nice.\nFOL: all x y. (Like(x) & Cat(x) & -Blue(x) -> Nice(x))\nTEXT: If someone is red then they like the bald eagle.\nFOL: all x. (Red(x) -> LikeBaldEagle(x))\nTEXT: If someone chases the cat then they eat the squirrel.\nFOL: all x y. (ChasesCat(x) & Eat(x) -> Squirrel(x))\nTEXT: If someone is kind and they do not eat the rabbit then the rabbit eats the squirrel.\nFOL: all x y. (Kind(x) & -Eat(x) & Rabbit(x) -> Squirrel(x))\nTEXT: If someone eats the squirrel and they are not red then the squirrel is not nice.\nFOL: all x y. (Eat(x) & Squirrel(x) & -Red(x) -> -Nice(x))\nTEXT: If someone eats the bald eagle then they chase the cat.\nFOL: all x y. (Eat(x) & BaldEagle(x) -> ChasesCat(x))\nTEXT: The squirrel likes the rabbit.\nFOL: all x. (Squirrel(x) -> LikeRabbit(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is red.\nFOL: all x. (BaldEagle(x) -> Red(x))\nTEXT: The cat chases the rabbit.\nFOL: all x. (Cat(x) -> ChasesRabbit(x))\nTEXT: The rabbit does not eat the bald eagle.\nFOL: all x. (Rabbit(x) -> -EatBaldEagle(x))\nTEXT: The squirrel chases the rabbit.\nFOL: all x. (Squirrel(x) -> ChasesRabbit(x))\nTEXT: If someone likes the bald eagle then the bald eagle chases the cat.\nFOL: all x y. (Like(x) & BaldEagle(x) -> ChasesCat(x))\nTEXT: If someone eats the rabbit then the rabbit does not chase the squirrel.\nFOL: all x y. (Eat(x) & Rabbit(x) -> -ChasesCat(x))\nTEXT: If someone likes the cat and they are not blue then the cat is nice.\nFOL: all x y. (Like(x) & Cat(x) & -Blue(x) -> Nice(x))\nTEXT: If someone is red then they like the bald eagle.\nFOL: all x. (Red(x) -> LikeBaldEagle(x))\nTEXT: If someone chases the cat then they eat the squirrel.\nFOL: all x y. (ChasesCat(x) & Eat(x) -> Squirrel(x))\nTEXT: If someone is kind and they do not eat the rabbit then the rabbit eats the squirrel.\nFOL: all x y. (Kind(x) & -Eat(x) & Rabbit(x) -> Squirrel(x))\nTEXT: If someone eats the squirrel and they are not red then the squirrel is not nice.\nFOL: all x y. (Eat(x) & Squirrel(x) & -Red(x) -> -Nice(x))\nTEXT: If someone eats the bald eagle then they chase the cat.\nFOL: all x y. (Eat(x) & BaldEagle(x) -> ChasesCat(x))\nTEXT: The squirrel likes the rabbit.\nFOL: all x. (Squirrel(x) -> LikesRabbit(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is red.\nFOL: all x. (BaldEagle(x) -> Red(x))\nTEXT: The cat chases the rabbit.\nFOL: all x. (Cat(x) -> ChasesRabbit(x))\nTEXT: The rabbit does not eat the bald eagle.\nFOL: all x. (Rabbit(x) -> -EatBaldEagle(x))\nTEXT: The squirrel chases the rabbit.\nFOL: all x. (Squirrel(x) -> ChasesRabbit(x))\nTEXT: If someone likes the bald eagle then the bald eagle chases the cat.\nFOL: all x y. (Like(x) & BaldEagle(x) -> ChasesCat(x))\nTEXT: If someone eats the rabbit then the rabbit does not chase the squirrel.\nFOL: all x y. (Eat(x) & Rabbit(x) -> -ChasesCat(x))\nTEXT: If someone likes the cat and they are not blue then the cat is nice.\nFOL: all x y. (Like(x) & Cat(x) & -Blue(x) -> Nice(x))\nTEXT: If someone is red then they like the bald eagle.\nFOL: all x. (Red(x) -> LikeBaldEagle(x))\nTEXT: If someone chases the cat then they eat the squirrel.\nFOL: all x y. (ChasesCat(x) & Eat(x) -> Squirrel(x))\nTEXT: If someone is kind and they do not eat the rabbit then the rabbit eats the squirrel.\nFOL: all x y. (Kind(x) & -Eat(x) & Rabbit(x) -> Squirrel(x))\nTEXT: If someone eats the squirrel and they are not red then the squirrel is not nice.\nFOL: all x y. (Eat(x) & Squirrel(x) & -Red(x) -> -Nice(x))\nTEXT: If someone eats the bald eagle then they chase the cat.\nFOL: all x y. (Eat(x) & BaldEagle(x) -> ChasesCat(x))\nTEXT: The squirrel likes the rabbit.\nFOL: all x. (Squirrel(x) -> ChasesRabbit(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 64,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Fur(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Fur(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Fur(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Fur(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Fur(x",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Fur(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Fur(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Fur(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Fur(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) ->",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Fur(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Fur(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Fur(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Fur(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Fur(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Fur(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Fur(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Fur(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Fur(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Fur(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Fur(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Fur(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Charlie is furry.\nFOL: all x. (Charlie(x) -> Fur(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) ->"
  ]
 },
 {
  "index": 65,
  "responses": [
   "<EVALUATE>\nTEXT: Alan may be round, but he is also kind.\nFOL: all x. (Alan(x) & -Round(x) & -Kind(x))\nTEXT: Bob is a round and rough around the edges, and he is also big.\nFOL: all x. (Bob(x) & -Round(x) & -Rough(x) & -Big(x))\nTEXT: Dave seems to be round.\nFOL: -Round(dave)\nTEXT: Fred may be young but he is nice, wears green shoes and is cold.\nFOL: all x. (Fred(x) & -Young(x) & -Nice(x) & -WearsGreenShoes(x) & -Cold(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & -RedInColor(x) & -Young(x))\nTEXT: A nice young person who is big can be considered round.\nFOL: all x. (Nice(x) & Young(x) & -Big(x) & -Round(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Person(x) & -FeelingBlue(x) & -Green(x))\nTEXT: Most round and cold people are often rough.\nFOL: all x. (Round(x) & -Cold(x) & -Rough(x))\nTEXT: Nice and green people are often found to be big as well.\nFOL: all x. (Nice(x) & Green(x) & -Big(x))\nTEXT: Fred is big.\nFOL: -Big(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan may be round, but he is also kind.\nFOL: all x. (Alan(x) & -Round(x) & -Kind(x))\nTEXT: Bob is a round and rough around the edges, and he is also big.\nFOL: all x. (Bob(x) & -Round(x) & -Rough(x) & -Big(x))\nTEXT: Dave seems to be round.\nFOL: -Round(dave)\nTEXT: Fred may be young but he is nice, wears green shoes and is cold.\nFOL: all x. (Fred(x) & -Young(x) & -Nice(x) & -WearsGreenShoes(x) & -Cold(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & -RedInColor(x) & -Young(x))\nTEXT: A nice young person who is big can be considered round.\nFOL: all x. (Nice(x) & Young(x) & -Big(x) & -Round(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Person(x) & -FeelingBlue(x) & -Green(x))\nTEXT: Most round and cold people are often rough.\nFOL: all x. (Round(x) & -Cold(x) & -Rough(x))\nTEXT: Nice and green people are often found to be big as well.\nFOL: all x. (Nice(x) & -Green(x) & -Big(x))\nTEXT: Fred is big.\nFOL: -Big(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan may be round, but he is also kind.\nFOL: all x. (Alan(x) & -Round(x) & -Kind(x))\nTEXT: Bob is a round and rough around the edges, and he is also big.\nFOL: all x. (Bob(x) & -Round(x) & -Rough(x) & -Big(x))\nTEXT: Dave seems to be round.\nFOL: -Round(dave)\nTEXT: Fred may be young but he is nice, wears green shoes and is cold.\nFOL: all x. (Fred(x) & -Young(x) & -Nice(x) & -WearsGreenShoes(x) & -Cold(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & -Red(x) & -InColor(x) & -Young(x))\nTEXT: A nice young person who is big can be considered round.\nFOL: all x. (Nice(x) & Young(x) & -Big(x) & -Round(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Person(x) & -FeelingBlue(x) & -Green(x))\nTEXT: Most round and cold people are often rough.\nFOL: all x. (Round(x) & -Cold(x) & -Rough(x))\nTEXT: Nice and green people are often found to be big as well.\nFOL: all x. (Nice(x) & Green(x) & -Big(x))\nTEXT: Fred is big.\nFOL: -Big(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan may be round, but he is also kind.\nFOL: all x. (Alan(x) & -Round(x) & -Kind(x))\nTEXT: Bob is a round and rough around the edges, and he is also big.\nFOL: all x. (Bob(x) & -Round(x) & -Rough(x) & -Big(x))\nTEXT: Dave seems to be round.\nFOL: all x. (Dave(x) & -Round(x))\nTEXT: Fred may be young but he is nice, wears green shoes and is cold.\nFOL: all x. (Fred(x) & -Young(x) & -Nice(x) & -WearsGreenShoes(x) & -Cold(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & -Red(x) & -InColor(x) & -Young(x))\nTEXT: A nice young person who is big can be considered round.\nFOL: all x. (Nice(x) & Young(x) & -Big(x) & -Round(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Person(x) & -FeelingBlue(x) & -Green(x))\nTEXT: Most round and cold people are often rough.\nFOL: all x. (Round(x) & -Cold(x) & -Rough(x))\nTEXT: Nice and green people are often found to be big as well.\nFOL: all x. (Nice(x) & Green(x) & -Big(x))\nTEXT: Fred is big.\nFOL: -Big(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan may be round, but he is also kind.\nFOL: all x. (Alan(x) & -Round(x) & -Kind(x))\nTEXT: Bob is a round and rough around the edges, and he is also big.\nFOL: all x. (Bob(x) & -Round(x) & -Rough(x) & -Big(x))\nTEXT: Dave seems to be round.\nFOL: all x. (Dave(x) & -Round(x))\nTEXT: Fred may be young but he is nice, wears green shoes and is cold.\nFOL: all x. (Fred(x) & -Young(x) & -Nice(x) & -WearsGreenShoes(x) & -Cold(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & -Red(x) & -InColor(x) & -Young(x))\nTEXT: A nice young person who is big can be considered round.\nFOL: all x. (Nice(x) & Young(x) & -Big(x) & -Round(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Person(x) & -FeelingBlue(x) & -Green(x))\nTEXT: Most round and cold people are often rough.\nFOL: all x. (Round(x) & -Cold(x) & -Rough(x))\nTEXT: Nice and green people are often found to be big as well.\nFOL: all x. (Nice(x) & Green(x) & -Big(x))\nTEXT: Fred is big.\nFOL: Fred(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 66,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: all x. (Bob(x) -> (Green(x) & Cold(x)))\nTEXT: Charlie seems big and rough, but he's actually quite kind.\nFOL: all x. (Charlie(x) -> (Big(x) & Rough(x)) & Kind(x))\nTEXT: The young person who is always feeling cold is named Dave.\nFOL: all x. (Dave(x) -> (Cold(x) & Young(x)))\nTEXT: When Eric walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: all x. (Eric(x) -> (Nice(x) & Kind(x)) & Blue(x) & Red(x))\nTEXT: A rather big person is a red person.\nFOL: all x. (Person(x) -> (Big(x) & Red(x)))\nTEXT: Young people who are cold and blue are actually kind.\nFOL: all x. (Young(x) -> (Cold(x) & Blue(x)) & Kind(x))\nTEXT: Rough people who are kind and green with envy are red with their toughened skin.\nFOL: all x. (Person(x) -> (Kind(x) & Green(x) & Envy(x)) & Red(x))\nTEXT: Rough and big people are always also cold people.\nFOL: all x. (Person(x) -> (Big(x) & Cold(x)))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Person(x) -> (Blue(x) & Green(x)))\nTEXT: If someone is cold and blue, you will find that they are also quite young.\nFOL: all x. (Cold(x) & Blue(x) -> Young(x))\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: all x. (Green(x) & Blue(x) & Red(x) & Round(x))\nTEXT: Charlie is not blue.\nFOL: not Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: all x. (Bob(x) -> (Green(x) & Cold(x)))\nTEXT: Charlie seems big and rough, but he's actually quite kind.\nFOL: all x. (Charlie(x) -> (Big(x) & Rough(x)) & Kind(x))\nTEXT: The young person who is always feeling cold is named Dave.\nFOL: all x. (Dave(x) -> (Cold(x) & Young(x)))\nTEXT: When Eric walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: all x. (Eric(x) -> (Nice(x) & Kind(x)) & (Blue(x) & Red(x)))\nTEXT: A rather big person is a red person.\nFOL: all x. (Person(x) -> (Big(x) & Red(x)))\nTEXT: Young people who are cold and blue are actually kind.\nFOL: all x. (Young(x) -> (Cold(x) & Blue(x)) & Kind(x))\nTEXT: Rough people who are kind and green with envy are red with their toughened skin.\nFOL: all x. (Person(x) -> (Kind(x) & Green(x) & Envy(x)) & Red(x))\nTEXT: Rough and big people are always also cold people.\nFOL: all x. (Person(x) -> (Big(x) & Cold(x)))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Person(x) -> (Blue(x) & Green(x)))\nTEXT: If someone is cold and blue, you will find that they are also quite young.\nFOL: all x. (Cold(x) & Blue(x) -> Young(x))\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: all x. (Green(x) & Blue(x) & Red(x) & Shape(x) -> Round(x))\nTEXT: Charlie is not blue.\nFOL: -Blue(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: all x. (Bob(x) -> (Green(x) & Cold(x)))\nTEXT: Charlie seems big and rough, but he's actually quite kind.\nFOL: all x. (Charlie(x) -> (Big(x) & Rough(x)) & Kind(x))\nTEXT: The young person who is always feeling cold is named Dave.\nFOL: all x. (Dave(x) -> (Cold(x) & Young(x)))\nTEXT: When Eric walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: all x. (Eric(x) -> (Nice(x) & Kind(x)) & (Blue(x) & Red(x)))\nTEXT: A rather big person is a red person.\nFOL: all x. (Person(x) -> (Big(x) & Red(x)))\nTEXT: Young people who are cold and blue are actually kind.\nFOL: all x. (Young(x) -> (Cold(x) & Blue(x)) & Kind(x))\nTEXT: Rough people who are kind and green with envy are red with their toughened skin.\nFOL: all x. (Person(x) -> (Kind(x) & Green(x) & Envy(x)) & (Red(x) & Toughened(x)))\nTEXT: Rough and big people are always also cold people.\nFOL: all x. (Person(x) -> (Big(x) & Cold(x)))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Person(x) -> (Blue(x) & Green(x)))\nTEXT: If someone is cold and blue, you will find that they are also quite young.\nFOL: all x. (Cold(x) & Blue(x) -> Young(x))\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: all x. (Green(x) & Blue(x) & Red(x) & Round(x))\nTEXT: Charlie is not blue.\nFOL: not Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: all x. (Bob(x) -> (Green(x) & Cold(x)))\nTEXT: Charlie seems big and rough, but he's actually quite kind.\nFOL: all x. (Charlie(x) -> (Big(x) & Rough(x)) & Kind(x))\nTEXT: The young person who is always feeling cold is named Dave.\nFOL: all x. (Dave(x) -> (Cold(x) & Young(x)))\nTEXT: When Eric walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: all x. (Eric(x) -> (Nice(x) & Kind(x)) & (Blue(x) & Red(x)))\nTEXT: A rather big person is a red person.\nFOL: all x. (Person(x) -> (Big(x) & Red(x)))\nTEXT: Young people who are cold and blue are actually kind.\nFOL: all x. (Young(x) -> (Cold(x) & Blue(x)) & Kind(x))\nTEXT: Rough people who are kind and green with envy are red with their toughened skin.\nFOL: all x. (Person(x) -> (Kind(x) & Green(x) & Envy(x)) & (Red(x) & Toughened(x)))\nTEXT: Rough and big people are always also cold people.\nFOL: all x. (Person(x) -> (Big(x) & Cold(x)))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Person(x) -> (Blue(x) & Green(x)))\nTEXT: If someone is cold and blue, you will find that they are also quite young.\nFOL: all x. (Cold(x) & Blue(x) -> Young(x))\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: all x. (Green(x) & Blue(x) & Red(x) & Round(x))\nTEXT: Charlie is not blue.\nFOL: -Blue(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: all x. (Bob(x) -> (Green(x) & Cold(x)))\nTEXT: Charlie seems big and rough, but he's actually quite kind.\nFOL: all x. (Charlie(x) -> (Big(x) & Rough(x)) & Kind(x))\nTEXT: The young person who is always feeling cold is named Dave.\nFOL: all x. (Dave(x) -> (Cold(x) & Young(x)))\nTEXT: When Eric walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: all x. (Eric(x) -> (Nice(x) & Kind(x)) & (Blue(x) & Red(x)))\nTEXT: A rather big person is a red person.\nFOL: all x. (Person(x) -> (Big(x) & Red(x)))\nTEXT: Young people who are cold and blue are actually kind.\nFOL: all x. (Young(x) -> (Cold(x) & Blue(x)) & Kind(x))\nTEXT: Rough people who are kind and green with envy are red with their toughened skin.\nFOL: all x. (Person(x) -> (Kind(x) & Green(x) & Envy(x)) & Red(x))\nTEXT: Rough and big people are always also cold people.\nFOL: all x. (Person(x) -> (Big(x) & Cold(x)))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Person(x) -> (Blue(x) & Green(x)))\nTEXT: If someone is cold and blue, you will find that they are also quite young.\nFOL: all x. (Cold(x) & Blue(x) -> Young(x))\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: all x. (Green(x) & Blue(x) & Red(x) & Shape(x) -> Round(x))\nTEXT: Charlie is not blue.\nFOL: not x. (Charlie(x) -> -Blue(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 67,
  "responses": [
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> RoughAndCold(x))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (KindAndRed(x) & Blue(x)))\nTEXT: That guy Eric sure is nice.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x)))\nTEXT: A bit overweight, Fred is big and round.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (BigAndRound(x)))\nTEXT: He's a nice guy who is often cold.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & Cold(x)))\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & RoundAndCold(x) & Blue(x)))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Big(x) & LittleGreenInSomeAreas(x)))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Big(x) & RedInColor(x) & Young(x)))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Blue(x) & BigAndKind(x) & Green(x)))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Blue(x) & Green(x) & Red(x)))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & BlueAndRound(x) & Kind(x)))\nTEXT: Fred is not kind.\nFOL: -KnowCharlie(fred) -> -Kind(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> RoughAndCold(x))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (KindAndRed(x) & Blue(x)))\nTEXT: That guy Eric sure is nice.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x)))\nTEXT: A bit overweight, Fred is big and round.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (BigAndRound(x)))\nTEXT: He's a nice guy who is often cold.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & Cold(x)))\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & RoundAndCold(x) & Blue(x)))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Big(x) & LittleGreenInSomeAreas(x)))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Big(x) & RedInColor(x) & Young(x)))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Blue(x) & BigAndKind(x) & Green(x)))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Blue(x) & Green(x) & Red(x)))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & BlueAndRound(x) & Kind(x)))\nTEXT: Fred is not kind.\nFOL: -KnowCharlie(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> RoughAndCold(x))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (KindAndRed(x) & Blue(x)))\nTEXT: That guy Eric sure is nice.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x)))\nTEXT: A bit overweight, Fred is big and round.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (BigAndRound(x)))\nTEXT: He's a nice guy who is often cold.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & Cold(x)))\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & Round(x) & Cold(x) & Blue(x)))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Big(x) & LittleGreen(x)))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Red(x) & Big(x) & Young(x)))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Blue(x) & Big(x) & Kind(x) & Green(x)))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Blue(x) & Green(x) & Red(x)))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & Blue(x) & Round(x) & Kind(x)))\nTEXT: Fred is not kind.\nFOL: -KnowCharlie(fred) -> -Kind(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> RoughAndCold(x))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (KindAndRed(x) & Blue(x)))\nTEXT: That guy Eric sure is nice.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x)))\nTEXT: A bit overweight, Fred is big and round.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (BigAndRound(x)))\nTEXT: He's a nice guy who is often cold.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & Cold(x)))\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & RoundAndCold(x) & Blue(x)))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Big(x) & LittleGreenInSomeAreas(x)))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Big(x) & RedInColor(x) & Young(x)))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Blue(x) & BigAndKind(x) & GreenAtOnce(x)))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Blue(x) & Green(x) & Red(x)))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & BlueAndRound(x) & Kind(x)))\nTEXT: Fred is not kind.\nFOL: -KnowCharlie(fred) -> -Kind(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> RoughAndCold(x))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (KindAndRed(x) & Blue(x)))\nTEXT: That guy Eric sure is nice.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x)))\nTEXT: A bit overweight, Fred is big and round.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (BigAndRound(x)))\nTEXT: He's a nice guy who is often cold.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & Cold(x)))\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & RoundAndCold(x) & Blue(x)))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Big(x) & LittleGreenInSomeAreas(x)))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Big(x) & RedInColor(x) & Young(x)))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Blue(x) & BigAndKind(x) & Green(x)))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Blue(x) & Green(x) & Red(x)))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: all x y. (KnowCharlie(x) & Charlie(x) -> (Nice(x) & BlueAndRound(x) & Kind(x)))\nTEXT: Fred is not kind.\nFOL: -KnowCharlie(fred) -> -Kind(fred)"
  ]
 },
 {
  "index": 68,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: all x. (Anne(x) -> Rough(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> Round(x))\nTEXT: Furry things are cold.\nFOL: all x. (FurryThing(x) -> -Cold(x))\nTEXT: If Bob is round then Bob is smart.\nFOL: all x y. (Bob(x) & Round(y) -> Smart(x, y))\nTEXT: Smart things are not furry.\nFOL: all x. (Smart(x) -> -Furry(x))\nTEXT: Round, nice things are not furry.\nFOL: all x. (Round(x) & Nice(x) -> -Furry(x))\nTEXT: Round, smart things are nice.\nFOL: all x. (Round(x) & Smart(x) -> Nice(x))\nTEXT: If something is smart and round then it is nice.\nFOL: all x y. (Smart(x) & Round(y) -> Nice(x, y))\nTEXT: If something is nice then it is rough.\nFOL: all x y. (Nice(x) -> -Rough(x))\nTEXT: Young things are round.\nFOL: all x. (Young(x) -> Round(x))\nTEXT: Anne is rough.\nFOL: all x. (Anne(x) -> Rough(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: all x. (Anne(x) -> Rough(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> Round(x))\nTEXT: Furry things are cold.\nFOL: all x. (FurryThing(x) -> -Cold(x))\nTEXT: If Bob is round then Bob is smart.\nFOL: all x y. (Bob(x) & Round(y) -> Smart(x, y))\nTEXT: Smart things are not furry.\nFOL: all x. (Smart(x) -> -Furry(x))\nTEXT: Round, nice things are not furry.\nFOL: all x y. (Round(x) & Nice(x) -> -Furry(x))\nTEXT: Round, smart things are nice.\nFOL: all x y. (Round(x) & Smart(x) -> Nice(x))\nTEXT: If something is smart and round then it is nice.\nFOL: all x y. (Smart(x) & Round(y) -> Nice(x, y))\nTEXT: If something is nice then it is rough.\nFOL: all x y. (Nice(x) -> Rough(y))\nTEXT: Young things are round.\nFOL: all x. (Young(x) -> Round(x))\nTEXT: Anne is rough.\nFOL: all x. (Anne(x) -> Rough(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: all x. (Anne(x) -> Rough(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> Round(x))\nTEXT: Furry things are cold.\nFOL: all x. (FurryThing(x) -> -Cold(x))\nTEXT: If Bob is round then Bob is smart.\nFOL: all x y. (Bob(x) & Round(y) -> Smart(x, y))\nTEXT: Smart things are not furry.\nFOL: all x. (Smart(x) -> -Furry(x))\nTEXT: Round, nice things are not furry.\nFOL: all x. (Round(x) & Nice(x) -> -Furry(x))\nTEXT: Round, smart things are nice.\nFOL: all x. (Round(x) & Smart(x) -> Nice(x))\nTEXT: If something is smart and round then it is nice.\nFOL: all x y. (Smart(x) & Round(y) -> Nice(x, y))\nTEXT: If something is nice then it is rough.\nFOL: all x y. (Nice(x) -> -Rough(x))\nTEXT: Young things are round.\nFOL: all x. (Young(x) -> Round(x))\nTEXT: Anne is rough.\nFOL: Anne(x) -> Rough(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: all x. (Anne(x) -> Rough(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> Round(x))\nTEXT: Furry things are cold.\nFOL: all x. (FurryThing(x) -> -Cold(x))\nTEXT: If Bob is round then Bob is smart.\nFOL: all x y. (Bob(x) & Round(y) -> Smart(x, y))\nTEXT: Smart things are not furry.\nFOL: all x. (Smart(x) -> -Furry(x))\nTEXT: Round, nice things are not furry.\nFOL: all x. (Round(x) & Nice(x) -> -Furry(x))\nTEXT: Round, smart things are nice.\nFOL: all x. (Round(x) & Smart(x) -> Nice(x))\nTEXT: If something is smart and round then it is nice.\nFOL: all x y. (Smart(x) & Round(y) -> Nice(x, y))\nTEXT: If something is nice then it is rough.\nFOL: all x y. (Nice(x) & Rough(y) -> Smart(x, y))\nTEXT: Young things are round.\nFOL: all x. (Young(x) -> Round(x))\nTEXT: Anne is rough.\nFOL: all x. (Anne(x) -> Rough(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: all x. (Anne(x) -> Rough(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> Round(x))\nTEXT: Furry things are cold.\nFOL: all x. (FurryThing(x) -> -Cold(x))\nTEXT: If Bob is round then Bob is smart.\nFOL: all x y. (Bob(x) & Round(y) -> Smart(x, y))\nTEXT: Smart things are not furry.\nFOL: all x. (Smart(x) -> -Furry(x))\nTEXT: Round, nice things are not furry.\nFOL: all x y. (Round(x) & Nice(x) -> -Furry(x))\nTEXT: Round, smart things are nice.\nFOL: all x y. (Round(x) & Smart(x) -> Nice(x))\nTEXT: If something is smart and round then it is nice.\nFOL: all x y. (Smart(x) & Round(y) -> Nice(x, y))\nTEXT: If something is nice then it is rough.\nFOL: all x y. (Nice(x) -> Rough(y))\nTEXT: Young things are round.\nFOL: all x. (Young(x) -> Round(x))\nTEXT: Anne is rough.\nFOL: Anne(x) -> Rough(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 69,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x. (FurryDave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x. (FurryDave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x. (FurryDave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x. (FurryDave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x. (FurryDave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x. (FurryDave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x. (FurryDave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x. (FurryDave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT:",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (Dave(x) & Fur(x) -> Rough(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Fur(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (Dave(x) & Fur(x) -> Rough(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Fur(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (Dave(x) & Fur(x) -> Rough(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Fur(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (Dave(x) & Fur(x) -> Rough(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Fur(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (Dave(x) & Fur(x) -> Rough(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Fur(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (Dave(x) & Fur(x) -> Rough(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Fur(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (Dave(x) & Fur(x) -> Rough(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Fur(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (Dave(x) & Fur(x) -> Rough(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Fur(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (FurryDave(x) & Dave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (FurryDave(x) & Dave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (FurryDave(x) & Dave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (FurryDave(x) & Dave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (FurryDave(x) & Dave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (FurryDave(x) & Dave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (FurryDave(x) & Dave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (FurryDave(x) & Dave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x. (FurryDave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x. (FurryDave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x. (FurryDave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x. (FurryDave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x. (FurryDave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x. (FurryDave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x. (FurryDave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x. (FurryDave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (Dave(x) & Fur(x) -> Rough(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Fur(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (Dave(x) & Fur(x) -> Rough(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Fur(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (Dave(x) & Fur(x) -> Rough(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Fur(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (Dave(x) & Fur(x) -> Rough(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Fur(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (Dave(x) & Fur(x) -> Rough(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Fur(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (Dave(x) & Fur(x) -> Rough(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Fur(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (Dave(x) & Fur(x) -> Rough(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Fur(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (Dave(x) & Fur(x) -> Rough(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Fur(x))\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 70,
  "responses": [
   "<EVALUATE>\nTEXT: Alan is a kind person and he is also often cold.\nFOL: all x. (Person(x) -> Kind(x) & -Cold(x))\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: all x. (Dave(x) -> Wet(x) & -Cold(x))\nTEXT: He also looks green but big.\nFOL: all x. (Dave(x) -> Green(x) & Big(x))\nTEXT: Fred was proud of being round, yet rough.\nFOL: all x. (Fred(x) -> Round(x) & Rough(x))\nTEXT: His red cheeks glowed.\nFOL: all x. (Fred(x) -> Red(x) & Glowed(x))\nTEXT: Gary is green and cold too.\nFOL: all x. (Gary(x) -> Green(x) & Cold(x))\nTEXT: A very big person who is green but also red is a rough person.\nFOL: all x. (Big(x) & Green(x) & Red(x) & Rough(x))\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: all x. (Red(x) & Round(x) & Kind(x) & -Cold(x))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) & Big(x))\nTEXT: Count on anyone you meet who is big, round, and red also being kind.\nFOL: all x. (Big(x) & Round(x) & Red(x) & Kind(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & Red(x) & Face(x) & Big(x))\nTEXT: When you meet and big and nice man, they will be kind to the earth and live green lifestyle.\nFOL: all x. (Big(x) & Nice(x) & -Earth(x) & GreenLifestyle(x))\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: all x. (Young(x) & Big(x) & Blue(x) & -Cold(x))\nTEXT: Gary is cold.\nFOL: all x. (Gary(x) -> Cold(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a kind person and he is also often cold.\nFOL: all x. (Person(x) -> Kind(x) & -Cold(x))\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: all x. (Dave(x) -> Wet(x) & -Cold(x))\nTEXT: He also looks green but big.\nFOL: all x. (Dave(x) -> Green(x) & Big(x))\nTEXT: Fred was proud of being round, yet rough.\nFOL: all x. (Fred(x) -> Round(x) & Rough(x))\nTEXT: His red cheeks glowed.\nFOL: all x. (Fred(x) -> Red(x) & Glowed(x))\nTEXT: Gary is green and cold too.\nFOL: all x. (Gary(x) -> Green(x) & Cold(x))\nTEXT: A very big person who is green but also red is a rough person.\nFOL: all x. (Big(x) & Green(x) & Red(x) & Rough(x))\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: all x. (Red(x) & Round(x) & Kind(x) & -Cold(x))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) & Big(x))\nTEXT: Count on anyone you meet who is big, round, and red also being kind.\nFOL: all x. (Big(x) & Round(x) & Red(x) & Kind(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & Red(x) & Face(x) & Big(x))\nTEXT: When you meet and big and nice man, they will be kind to the earth and live green lifestyle.\nFOL: all x. (Big(x) & Nice(x) & -Earth(x) & GreenLifestyle(x))\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: all x. (Age(x) & Big(x) & Blue(x) & -Cold(x))\nTEXT: Gary is cold.\nFOL: all x. (Gary(x) -> Cold(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a kind person and he is also often cold.\nFOL: all x. (Person(x) -> Kind(x) & -Cold(x))\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: all x. (Dave(x) -> Wet(x) & -Cold(x))\nTEXT: He also looks green but big.\nFOL: all x. (Dave(x) -> Green(x) & Big(x))\nTEXT: Fred was proud of being round, yet rough.\nFOL: all x. (Fred(x) -> Round(x) & Rough(x))\nTEXT: His red cheeks glowed.\nFOL: all x. (Fred(x) -> Red(x) & Glowed(x))\nTEXT: Gary is green and cold too.\nFOL: all x. (Gary(x) -> Green(x) & Cold(x))\nTEXT: A very big person who is green but also red is a rough person.\nFOL: all x. (Big(x) & Green(x) & Red(x) & Rough(x))\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: all x. (Red(x) & Round(x) & Kind(x) & -Cold(x))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) & Big(x))\nTEXT: Count on anyone you meet who is big, round, and red also being kind.\nFOL: all x. (Big(x) & Round(x) & Red(x) & Kind(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & Red(x) & Face(x) & Big(x))\nTEXT: When you meet and big and nice man, they will be kind to the earth and live green lifestyle.\nFOL: all x. (Big(x) & Nice(x) & -Earth(x) & GreenLifestyle(x))\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: all x. (Age(x) & Big(x) & Blue(x) & Cold(x))\nTEXT: Gary is cold.\nFOL: all x. (Gary(x) -> Cold(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a kind person and he is also often cold.\nFOL: all x. (Person(x) -> Kind(x) & -Cold(x))\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: all x. (Dave(x) -> Wet(x) & -Cold(x))\nTEXT: He also looks green but big.\nFOL: all x. (Dave(x) -> Green(x) & -Big(x))\nTEXT: Fred was proud of being round, yet rough.\nFOL: all x. (Fred(x) -> Round(x) & -Rough(x))\nTEXT: His red cheeks glowed.\nFOL: all x. (Fred(x) -> Red(x) & Glowed(x))\nTEXT: Gary is green and cold too.\nFOL: all x. (Gary(x) -> Green(x) & -Cold(x))\nTEXT: A very big person who is green but also red is a rough person.\nFOL: all x. (Big(x) & Green(x) & -Red(x) & -Rough(x))\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: all x. (Red(x) & Round(x) & Kind(x) & -Cold(x))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) & -Big(x))\nTEXT: Count on anyone you meet who is big, round, and red also being kind.\nFOL: all x. (Big(x) & Round(x) & Red(x) & -Kind(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & Red(x) & -Face(x) & -Big(x))\nTEXT: When you meet and big and nice man, they will be kind to the earth and live green lifestyle.\nFOL: all x. (Big(x) & Nice(x) & -Earth(x) & -GreenLifestyle(x))\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: all x. (Young(x) & Big(x) & -Blue(x) & -Cold(x))\nTEXT: Gary is cold.\nFOL: all x. (Gary(x) -> Cold(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a kind person and he is also often cold.\nFOL: all x. (Person(x) -> Kind(x) & -Cold(x))\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: all x. (Dave(x) -> Wet(x) & -Cold(x))\nTEXT: He also looks green but big.\nFOL: all x. (Dave(x) -> Green(x) & Big(x))\nTEXT: Fred was proud of being round, yet rough.\nFOL: all x. (Fred(x) -> Round(x) & Rough(x))\nTEXT: His red cheeks glowed.\nFOL: all x. (Fred(x) -> Red(x) & Glowed(x))\nTEXT: Gary is green and cold too.\nFOL: all x. (Gary(x) -> Green(x) & Cold(x))\nTEXT: A very big person who is green but also red is a rough person.\nFOL: all x. (Big(x) & Green(x) & Red(x) & Rough(x))\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: all x. (Red(x) & Round(x) & Kind(x) & -Cold(x))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) & Big(x))\nTEXT: Count on anyone you meet who is big, round, and red also being kind.\nFOL: all x. (Big(x) & Round(x) & Red(x) & Kind(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & Red(x) & Face(x) & Big(x))\nTEXT: When you meet and big and nice man, they will be kind to the earth and live green lifestyle.\nFOL: all x. (Big(x) & Nice(x) & -Earth(x) & GreenLifestyle(x))\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: all x. (Young(x) & Big(x) & Blue(x) & -Cold(x))\nTEXT: Gary is cold.\nFOL: all x. (Gary(x) -> Cold(x))"
  ]
 },
 {
  "index": 71,
  "responses": [
   "<EVALUATE>\nTEXT: Charlie is kind.\nFOL: all x. (Charlie(x) -> Kind(x))\nTEXT: Erin is furry.\nFOL: all x. (Erin(x) -> Fur(x))\nTEXT: Gary is furry.\nFOL: all x. (Gary(x) -> Fur(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> Kind(x))\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\nTEXT: Gary is smart.\nFOL: all x. (Gary(x) -> Smart(x))\nTEXT: Gary is white.\nFOL: all x. (Gary(x) -> White(x))\nTEXT: If Gary is smart and Gary is round then Gary is green.\nFOL: all x y. (Smart(x) & Round(x) & Gary(x) -> Green(x))\nTEXT: Furry, young things are kind.\nFOL: all x. (Furry(x) & Young(x) & Kind(x))\nTEXT: If Charlie is green then Charlie is white.\nFOL: all x. (Charlie(x) -> Green(x) & White(x))\nTEXT: Young, white things are smart.\nFOL: all x. (Young(x) & White(x) & Smart(x))\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) & Young(x))\nTEXT: All kind things are green.\nFOL: all x. (Kind(x) & Green(x))\nTEXT: Charlie is not furry.\nFOL: -Furry(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is kind.\nFOL: all x. (Charlie(x) -> Kind(x))\nTEXT: Erin is furry.\nFOL: all x. (Erin(x) -> Fur(x))\nTEXT: Gary is furry.\nFOL: all x. (Gary(x) -> Fur(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> Kind(x))\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\nTEXT: Gary is smart.\nFOL: all x. (Gary(x) -> Smart(x))\nTEXT: Gary is white.\nFOL: all x. (Gary(x) -> White(x))\nTEXT: If Gary is smart and Gary is round then Gary is green.\nFOL: all x y. (Smart(x) & Round(x) & Gary(x) -> Green(x))\nTEXT: Furry, young things are kind.\nFOL: all x. (Furry(x) & Young(x) & Kind(x))\nTEXT: If Charlie is green then Charlie is white.\nFOL: all x. (Charlie(x) -> Green(x) & White(x))\nTEXT: Young, white things are smart.\nFOL: all x. (Young(x) & White(x) & Smart(x))\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) & Young(x))\nTEXT: All kind things are green.\nFOL: all x. (Kind(x) & Green(x))\nTEXT: Charlie is not furry.\nFOL: -Furry(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is kind.\nFOL: all x. (Charlie(x) -> Kind(x))\nTEXT: Erin is furry.\nFOL: all x. (Erin(x) -> Fur(x))\nTEXT: Gary is furry.\nFOL: all x. (Gary(x) -> Fur(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> Kind(x))\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\nTEXT: Gary is smart.\nFOL: all x. (Gary(x) -> Smart(x))\nTEXT: Gary is white.\nFOL: all x. (Gary(x) -> White(x))\nTEXT: If Gary is smart and Gary is round then Gary is green.\nFOL: all x y. (Smart(x) & Round(x) & Gary(x) -> Green(x))\nTEXT: Furry, young things are kind.\nFOL: all x y. (Furry(x) & Young(x) & Kind(x))\nTEXT: If Charlie is green then Charlie is white.\nFOL: all x y. (Charlie(x) & Green(x) -> Charlie(x) & White(x))\nTEXT: Young, white things are smart.\nFOL: all x y. (Young(x) & White(x) & Smart(x))\nTEXT: All kind things are young.\nFOL: all x y. (Kind(x) & Young(x))\nTEXT: All kind things are green.\nFOL: all x y. (Kind(x) & Green(x))\nTEXT: Charlie is not furry.\nFOL: -Furry(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is kind.\nFOL: all x. (Charlie(x) -> Kind(x))\nTEXT: Erin is furry.\nFOL: all x. (Erin(x) -> Fur(x))\nTEXT: Gary is furry.\nFOL: all x. (Gary(x) -> Fur(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> Kind(x))\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\nTEXT: Gary is smart.\nFOL: all x. (Gary(x) -> Smart(x))\nTEXT: Gary is white.\nFOL: all x. (Gary(x) -> White(x))\nTEXT: If Gary is smart and Gary is round then Gary is green.\nFOL: all x y. (Smart(x) & Round(x) & Gary(x) -> Green(x))\nTEXT: Furry, young things are kind.\nFOL: all x y. (Furry(x) & Young(x) & Kind(x))\nTEXT: If Charlie is green then Charlie is white.\nFOL: all x y. (Green(x) & White(x) & Charlie(x) -> Charlie(x))\nTEXT: Young, white things are smart.\nFOL: all x y. (Young(x) & White(x) & Smart(x))\nTEXT: All kind things are young.\nFOL: all x y. (Kind(x) & Young(x))\nTEXT: All kind things are green.\nFOL: all x y. (Kind(x) & Green(x))\nTEXT: Charlie is not furry.\nFOL: -Furry(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is kind.\nFOL: all x. (Charlie(x) -> Kind(x))\nTEXT: Erin is furry.\nFOL: all x. (Erin(x) -> Fur(x))\nTEXT: Gary is furry.\nFOL: all x. (Gary(x) -> Fur(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> Kind(x))\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\nTEXT: Gary is smart.\nFOL: all x. (Gary(x) -> Smart(x))\nTEXT: Gary is white.\nFOL: all x. (Gary(x) -> White(x))\nTEXT: If Gary is smart and Gary is round then Gary is green.\nFOL: all x y. (Smart(x) & Round(x) & Gary(x) -> Green(x))\nTEXT: Furry, young things are kind.\nFOL: all x y. (Furry(x) & Young(x) & Kind(x))\nTEXT: If Charlie is green then Charlie is white.\nFOL: all x y. (Charlie(x) & Green(x) -> Charlie(x) & White(x))\nTEXT: Young, white things are smart.\nFOL: all x y. (Young(x) & White(x) & Smart(x))\nTEXT: All kind things are young.\nFOL: all x y. (Kind(x) & Young(x))\nTEXT: All kind things are green.\nFOL: all x y. (Kind(x) & Green(x))\nTEXT: Charlie is not furry.\nFOL: -Furry(Charlie)\n</EVALUATE>"
  ]
 },
 {
  "index": 72,
  "responses": [
   "<EVALUATE>\nTEXT: The bear visits the cat.\nFOL: all x y. (Bear(x) & Cat(y) & BearVisitsCat(x, y))\nTEXT: The cat is green.\nFOL: all x. (Cat(x) -> Green(x))\nTEXT: If something is blue and green then it visits the bear.\nFOL: all x y. (Something(x) & Blue(x) & Green(x) & BearVisitsCat(x, y))\nTEXT: If something likes the bear and it sees the cat then it sees the bear.\nFOL: all x y. (Something(x) & Bear(x) & LikesBear(x) & Cat(x) & BearVisitsCat(x, y))\nTEXT: If something visits the bear then the bear sees the cat.\nFOL: all x y. (Something(x) & Bear(x) & VisitsBear(x) & Cat(x) & BearVisitsCat(x, y))\nTEXT: If the bear is cold then the bear is round.\nFOL: all x. (Bear(x) & -Cold(x) & Bear(x) & Round(x))\nTEXT: If the cat is not green then the cat does not see the bear.\nFOL: all x. (Cat(x) & -Green(x) & Cat(x) & BearVisitsCat(x, y))\nTEXT: If something visits the bear then it likes the bear.\nFOL: all x y. (Something(x) & Bear(x) & VisitsBear(x) & LikesBear(x))\nTEXT: If the cat is green then the cat is blue.\nFOL: all x. (Cat(x) & Green(x) & Cat(x) & Blue(x))\nTEXT: If something visits the cat and it sees the bear then the cat visits the bear.\nFOL: all x y. (Something(x) & Cat(x) & VisitsCat(x, y) & BearVisitsCat(x, y))\nTEXT: The bear visits the cat.\nFOL: Bear(x) & Cat(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear visits the cat.\nFOL: all x y. (Bear(x) & Cat(y) & BearVisitsCat(x, y))\nTEXT: The cat is green.\nFOL: all x. (Cat(x) -> Green(x))\nTEXT: If something is blue and green then it visits the bear.\nFOL: all x y. (Something(x) & Blue(x) & Green(x) & BearVisitsCat(x, y))\nTEXT: If something likes the bear and it sees the cat then it sees the bear.\nFOL: all x y. (Something(x) & Bear(x) & LikesBear(x) & Cat(x) & BearVisitsCat(x, y))\nTEXT: If something visits the bear then the bear sees the cat.\nFOL: all x y. (Something(x) & Bear(x) & VisitsBear(x) & Cat(x) & BearVisitsCat(x, y))\nTEXT: If the bear is cold then the bear is round.\nFOL: all x. (Bear(x) & -Cold(x) & Bear(x) & Round(x))\nTEXT: If the cat is not green then the cat does not see the bear.\nFOL: all x. (Cat(x) & -Green(x) & Cat(x) & BearVisitsCat(x, y))\nTEXT: If something visits the bear then it likes the bear.\nFOL: all x y. (Something(x) & Bear(x) & VisitsBear(x) & LikesBear(x))\nTEXT: If the cat is green then the cat is blue.\nFOL: all x. (Cat(x) & Green(x) & Cat(x) & Blue(x))\nTEXT: If something visits the cat and it sees the bear then the cat visits the bear.\nFOL: all x y. (Something(x) & Cat(x) & Bear(x) & VisitsCat(x, y) & BearVisitsCat(x, y))\nTEXT: The bear visits the cat.\nFOL: Bear(x) & Cat(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear visits the cat.\nFOL: all x y. (Bear(x) & Cat(y) & BearVisitsCat(x, y))\nTEXT: The cat is green.\nFOL: all x. (Cat(x) -> Green(x))\nTEXT: If something is blue and green then it visits the bear.\nFOL: all x y. (Something(x) & Blue(x) & Green(x) & BearVisitsCat(x, y))\nTEXT: If something likes the bear and it sees the cat then it sees the bear.\nFOL: all x y. (Something(x) & Bear(x) & LikesBear(x) & Cat(x) & BearVisitsCat(x, y))\nTEXT: If something visits the bear then the bear sees the cat.\nFOL: all x y. (Something(x) & Bear(x) & VisitsBear(x) & Cat(x) & BearVisitsCat(x, y))\nTEXT: If the bear is cold then the bear is round.\nFOL: all x. (Bear(x) & -Cold(x) & Bear(x) & Round(x))\nTEXT: If the cat is not green then the cat does not see the bear.\nFOL: all x. (Cat(x) & -Green(x) & Cat(x) & BearVisitsCat(x, y))\nTEXT: If something visits the bear then it likes the bear.\nFOL: all x y. (Something(x) & Bear(x) & VisitsBear(x) & LikesBear(x))\nTEXT: If the cat is green then the cat is blue.\nFOL: all x. (Cat(x) & Green(x) & Cat(x) & Blue(x))\nTEXT: If something visits the cat and it sees the bear then the cat visits the bear.\nFOL: all x y. (Something(x) & Cat(x) & VisitsBear(x) & BearVisitsCat(x, y))\nTEXT: The bear visits the cat.\nFOL: Bear(x) & Cat(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear visits the cat.\nFOL: all x y. (Bear(x) & Cat(y) & BearVisitsCat(x, y))\nTEXT: The cat is green.\nFOL: all x. (Cat(x) -> Green(x))\nTEXT: If something is blue and green then it visits the bear.\nFOL: all x y. (Something(x) & Blue(x) & Green(x) & BearVisitsCat(x, y))\nTEXT: If something likes the bear and it sees the cat then it sees the bear.\nFOL: all x y. (Something(x) & Bear(x) & LikesBear(x) & Cat(x) & BearVisitsCat(x, y))\nTEXT: If something visits the bear then the bear sees the cat.\nFOL: all x y. (Something(x) & Bear(x) & VisitsBear(x) & Cat(x) & BearVisitsCat(x, y))\nTEXT: If the bear is cold then the bear is round.\nFOL: all x. (Bear(x) & -Cold(x) & Bear(x) & Round(x))\nTEXT: If the cat is not green then the cat does not see the bear.\nFOL: all x. (Cat(x) & -Green(x) & Cat(x) & -BearVisitsCat(x, y))\nTEXT: If something visits the bear then it likes the bear.\nFOL: all x y. (Something(x) & Bear(x) & VisitsBear(x) & LikesBear(x))\nTEXT: If the cat is green then the cat is blue.\nFOL: all x. (Cat(x) & Green(x) & Cat(x) & -Blue(x))\nTEXT: If something visits the cat and it sees the bear then the cat visits the bear.\nFOL: all x y. (Something(x) & Cat(x) & VisitsCat(x) & BearVisitsCat(x, y))\nTEXT: The bear visits the cat.\nFOL: Bear(x) & Cat(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear visits the cat.\nFOL: all x y. (Bear(x) & Cat(y) & BearVisitsCat(x, y))\nTEXT: The cat is green.\nFOL: all x. (Cat(x) -> Green(x))\nTEXT: If something is blue and green then it visits the bear.\nFOL: all x y. (Something(x) & Blue(x) & Green(x) & BearVisitsCat(x, y))\nTEXT: If something likes the bear and it sees the cat then it sees the bear.\nFOL: all x y. (Something(x) & Bear(x) & LikesBear(x) & Cat(x) & BearVisitsCat(x, y))\nTEXT: If something visits the bear then the bear sees the cat.\nFOL: all x y. (Something(x) & Bear(x) & VisitsBear(x) & Cat(x) & BearVisitsCat(x, y))\nTEXT: If the bear is cold then the bear is round.\nFOL: all x. (Bear(x) & -Cold(x) & Bear(x) & Round(x))\nTEXT: If the cat is not green then the cat does not see the bear.\nFOL: all x. (Cat(x) & -Green(x) & Cat(x) & -BearVisitsCat(x, y))\nTEXT: If something visits the bear then it likes the bear.\nFOL: all x y. (Something(x) & Bear(x) & VisitsBear(x) & LikesBear(x))\nTEXT: If the cat is green then the cat is blue.\nFOL: all x. (Cat(x) & Green(x) & Cat(x) & Blue(x))\nTEXT: If something visits the cat and it sees the bear then the cat visits the bear.\nFOL: all x y. (Something(x) & Cat(x) & VisitsCat(x) & BearVisitsCat(x, y))\nTEXT: The bear visits the cat.\nFOL: Bear(x) & Cat(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 73,
  "responses": [
   "<EVALUATE>\nTEXT: Alan is green and cold too.\nFOL: all x. (Alan(x) -> Green(x) & Cold(x))\nTEXT: For being so cold, it's good Fred can remain nice.\nFOL: all x. (Fred(x) -> -Cold(x) & Nice(x))\nTEXT: Gary seems to be round.\nFOL: all x. (Gary(x) -> -Round(x))\nTEXT: No one knows Harry like me and he is a kind guy, very round in the belly and green as grass.\nFOL: all x. (Harry(x) -> -Know(x) & Nice(x) & Belly(x) & Green(x))\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: all x. (Skin(x) -> -Rough(x) & Cold(x) & Nice(x))\nTEXT: Kind red people are green on the inside.\nFOL: all x. (Red(x) -> -Green(x) & Nice(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) -> -Rough(x) & Red(x))\nTEXT: Nice people that are very green and even round shaped will be very young.\nFOL: all x. (Nice(x) & -Green(x) & -Round(x) & Young(x))\nTEXT: Round people who are kind tend to be nice.\nFOL: all x. (Round(x) -> -Kind(x) & Nice(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: all x. (Green(x) -> -Rough(x) & -Cold(x) & Nice(x))\nTEXT: Someone who is a young age and looks like they are round are also red.\nFOL: all x. (Young(x) & -Round(x) & Red(x))\nTEXT: Fred is not kind.\nFOL: -Kind(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is green and cold too.\nFOL: all x. (Alan(x) -> Green(x) & Cold(x))\nTEXT: For being so cold, it's good Fred can remain nice.\nFOL: all x. (Fred(x) -> -Cold(x) & Nice(x))\nTEXT: Gary seems to be round.\nFOL: all x. (Gary(x) -> -Round(x))\nTEXT: No one knows Harry like me and he is a kind guy, very round in the belly and green as grass.\nFOL: all x. (Harry(x) -> -Know(x) & Nice(x) & Belly(x) & Green(x))\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: all x. (Skin(x) -> -Rough(x) & Cold(x) & Nice(x))\nTEXT: Kind red people are green on the inside.\nFOL: all x. (Red(x) -> -Green(x) & Kind(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) -> -Rough(x) & Red(x))\nTEXT: Nice people that are very green and even round shaped will be very young.\nFOL: all x. (Nice(x) -> -Green(x) & -Round(x) & Young(x))\nTEXT: Round people who are kind tend to be nice.\nFOL: all x. (Round(x) -> -Kind(x) & Nice(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: all x. (Green(x) -> -Rough(x) & -Cold(x) & Nice(x))\nTEXT: Someone who is a young age and looks like they are round are also red.\nFOL: all x. (Age(x) -> -Young(x) & Round(x) & Red(x))\nTEXT: Fred is not kind.\nFOL: -Kind(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is green and cold too.\nFOL: all x. (Alan(x) -> Green(x) & Cold(x))\nTEXT: For being so cold, it's good Fred can remain nice.\nFOL: all x. (Fred(x) -> -Cold(x) & Nice(x))\nTEXT: Gary seems to be round.\nFOL: all x. (Gary(x) -> -Round(x))\nTEXT: No one knows Harry like me and he is a kind guy, very round in the belly and green as grass.\nFOL: all x. (Harry(x) -> -Know(x) & Nice(x) & Belly(x) & Green(x))\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: all x. (Skin(x) -> -Rough(x) & Cold(x) & Nice(x))\nTEXT: Kind red people are green on the inside.\nFOL: all x. (Red(x) -> -Green(x) & Nice(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) -> -Rough(x) & Red(x))\nTEXT: Nice people that are very green and even round shaped will be very young.\nFOL: all x. (Nice(x) & -Green(x) & -Round(x) & Young(x))\nTEXT: Round people who are kind tend to be nice.\nFOL: all x. (Round(x) -> -Kind(x) & Nice(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: all x. (Green(x) -> -Rough(x) & -Cold(x) & Nice(x))\nTEXT: Someone who is a young age and looks like they are round are also red.\nFOL: all x. (Age(x) -> -Young(x) & Round(x) & Red(x))\nTEXT: Fred is not kind.\nFOL: -Kind(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is green and cold too.\nFOL: all x. (Alan(x) -> Green(x) & Cold(x))\nTEXT: For being so cold, it's good Fred can remain nice.\nFOL: all x. (Fred(x) -> -Cold(x) & Nice(x))\nTEXT: Gary seems to be round.\nFOL: all x. (Gary(x) -> -Round(x))\nTEXT: No one knows Harry like me and he is a kind guy, very round in the belly and green as grass.\nFOL: all x. (Harry(x) -> -Know(x) & Nice(x) & Belly(x) & Green(x))\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: all x. (Skin(x) -> -Rough(x) & Cold(x) & Nice(x))\nTEXT: Kind red people are green on the inside.\nFOL: all x. (Red(x) -> -Green(x) & Kind(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) -> -Rough(x) & Red(x))\nTEXT: Nice people that are very green and even round shaped will be very young.\nFOL: all x. (Nice(x) -> -Green(x) & -Round(x) & Young(x))\nTEXT: Round people who are kind tend to be nice.\nFOL: all x. (Round(x) -> -Kind(x) & Nice(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: all x. (Green(x) -> -Rough(x) & -Cold(x) & Nice(x))\nTEXT: Someone who is a young age and looks like they are round are also red.\nFOL: all x. (Age(x) -> -Young(x) & -Round(x) & Red(x))\nTEXT: Fred is not kind.\nFOL: -Kind(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is green and cold too.\nFOL: all x. (Alan(x) -> Green(x) & Cold(x))\nTEXT: For being so cold, it's good Fred can remain nice.\nFOL: all x. (Fred(x) -> -Cold(x) & Nice(x))\nTEXT: Gary seems to be round.\nFOL: all x. (Gary(x) -> -Round(x))\nTEXT: No one knows Harry like me and he is a kind guy, very round in the belly and green as grass.\nFOL: all x. (Harry(x) -> -Know(x) & Nice(x) & Belly(x) & Green(x))\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: all x. (Skin(x) -> -Rough(x) & Cold(x) & Nice(x))\nTEXT: Kind red people are green on the inside.\nFOL: all x. (Red(x) -> -Green(x) & Nice(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) -> -Rough(x) & Red(x))\nTEXT: Nice people that are very green and even round shaped will be very young.\nFOL: all x. (Nice(x) & -Green(x) & -Round(x) & Young(x))\nTEXT: Round people who are kind tend to be nice.\nFOL: all x. (Round(x) -> -Kind(x) & Nice(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: all x. (Green(x) -> -Rough(x) & -Cold(x) & Nice(x))\nTEXT: Someone who is a young age and looks like they are round are also red.\nFOL: all x. (Young(x) & -Round(x) & Red(x))\nTEXT: Fred is not kind.\nFOL: -Kind(fred)"
  ]
 },
 {
  "index": 74,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle needs the lion.\nFOL: all x y. (BaldEagle(x) & Lion(x) & MoreNeeds(x, y) -> Needs(x, y))\nTEXT: The bald eagle visits the mouse.\nFOL: all x y. (BaldEagle(x) & Mouse(x) & MoreVisits(x, y) -> Visits(x, y))\nTEXT: The cow visits the bald eagle.\nFOL: all x y. (Cow(x) & BaldEagle(x) & MoreVisits(x, y) -> Visits(x, y))\nTEXT: The lion is green.\nFOL: all x y. (Lion(x) & Green(x) & MoreIs(x, y) -> IsGreen(x, y))\nTEXT: The lion sees the cow.\nFOL: all x y. (Lion(x) & Cow(x) & MoreSees(x, y) -> Sees(x, y))\nTEXT: The lion visits the cow.\nFOL: all x y. (Lion(x) & Cow(x) & MoreVisits(x, y) -> Visits(x, y))\nTEXT: The mouse is blue.\nFOL: all x y. (Mouse(x) & Blue(x) & MoreIs(x, y) -> IsBlue(x, y))\nTEXT: If the cow needs the mouse then the mouse sees the cow.\nFOL: all x y. (Cow(x) & Mouse(x) & MoreNeeds(x, y) & MoreSees(x, y) -> MoreVisits(x, y))\nTEXT: If something visits the cow and it is blue then the cow sees the mouse.\nFOL: all x y. (Something(x) & Cow(x) & MoreVisits(x, y) & MoreSees(x, y) & IsBlue(x, y) -> MoreVisits(x, y))\nTEXT: If something is green and it needs the lion then it needs the bald eagle.\nFOL: all x y. (Something(x) & Green(x) & MoreNeeds(x, y) & MoreNeeds(x, y) -> MoreNeeds(x, y))\nTEXT: If the mouse is blue then the mouse needs the lion.\nFOL: all x y. (Mouse(x) & Blue(x) & MoreNeeds(x, y) & MoreNeeds(x, y) -> MoreNeeds(x, y))\nTEXT: If something needs the lion then it is green.\nFOL: all x y. (Something(x) & MoreNeeds(x, y) & MoreNeeds(x, y) -> MoreIs(x, y))\nTEXT: If something sees the lion and the lion does not need the cow then it is big.\nFOL: all x y. (Something(x) & Lion(x) & MoreSees(x, y) & -MoreNeeds(x, y) & MoreIs(x, y) -> MoreIs(x, y))\nTEXT: The mouse needs the lion.\nFOL: Mouse(x) & Needs(x, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle needs the lion.\nFOL: all x y. (BaldEagle(x) & Lion(x) & MoreNeeds(x, y) -> Needs(x, y))\nTEXT: The bald eagle visits the mouse.\nFOL: all x y. (BaldEagle(x) & Mouse(x) & MoreVisits(x, y) -> Visits(x, y))\nTEXT: The cow visits the bald eagle.\nFOL: all x y. (Cow(x) & BaldEagle(x) & MoreVisits(x, y) -> Visits(x, y))\nTEXT: The lion is green.\nFOL: all x y. (Lion(x) & Green(x) & MoreIs(x, y) -> IsGreen(x, y))\nTEXT: The lion sees the cow.\nFOL: all x y. (Lion(x) & Cow(x) & MoreSees(x, y) -> Sees(x, y))\nTEXT: The lion visits the cow.\nFOL: all x y. (Lion(x) & Cow(x) & MoreVisits(x, y) -> Visits(x, y))\nTEXT: The mouse is blue.\nFOL: all x y. (Mouse(x) & Blue(x) & MoreIs(x, y) -> IsBlue(x, y))\nTEXT: If the cow needs the mouse then the mouse sees the cow.\nFOL: all x y. (Cow(x) & Mouse(x) & MoreNeeds(x, y) & MoreSees(x, y) -> MoreVisits(x, y))\nTEXT: If something visits the cow and it is blue then the cow sees the mouse.\nFOL: all x y. (Something(x) & Cow(x) & MoreVisits(x, y) & MoreSees(x, y) & IsBlue(x, y) -> MoreVisits(x, y))\nTEXT: If something is green and it needs the lion then it needs the bald eagle.\nFOL: all x y. (Something(x) & Green(x) & MoreNeeds(x, y) & MoreNeeds(x, y) -> MoreNeeds(x, y))\nTEXT: If the mouse is blue then the mouse needs the lion.\nFOL: all x y. (Mouse(x) & Blue(x) & MoreNeeds(x, y) & MoreNeeds(x, y) -> MoreNeeds(x, y))\nTEXT: If something needs the lion then it is green.\nFOL: all x y. (Something(x) & MoreNeeds(x, y) & MoreNeeds(x, y) -> MoreIs(x, y))\nTEXT: If something sees the lion and the lion does not need the cow then it is big.\nFOL: all x y. (Something(x) & Lion(x) & MoreSees(x, y) & MoreDoesNotNeed(x, y) & MoreIs(x, y) -> MoreIs(x, y))\nTEXT: The mouse needs the lion.\nFOL: all x y. (Mouse(x) & MoreNeeds(x, y) & MoreNeeds(x, y) -> MoreNeeds(x, y))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle needs the lion.\nFOL: all x y. (BaldEagle(x) & Lion(x) & MoreNeeds(x, y) -> Needs(x, y))\nTEXT: The bald eagle visits the mouse.\nFOL: all x y. (BaldEagle(x) & Mouse(x) & MoreVisits(x, y) -> Visits(x, y))\nTEXT: The cow visits the bald eagle.\nFOL: all x y. (Cow(x) & BaldEagle(x) & MoreVisits(x, y) -> Visits(x, y))\nTEXT: The lion is green.\nFOL: all x y. (Lion(x) & Green(x) & MoreIs(x, y) -> IsGreen(x, y))\nTEXT: The lion sees the cow.\nFOL: all x y. (Lion(x) & Cow(x) & MoreSees(x, y) -> Sees(x, y))\nTEXT: The lion visits the cow.\nFOL: all x y. (Lion(x) & Cow(x) & MoreVisits(x, y) -> Visits(x, y))\nTEXT: The mouse is blue.\nFOL: all x y. (Mouse(x) & Blue(x) & MoreIs(x, y) -> IsBlue(x, y))\nTEXT: If the cow needs the mouse then the mouse sees the cow.\nFOL: all x y. (Cow(x) & Mouse(x) & MoreNeeds(x, y) & MoreSees(x, y) -> MoreVisits(x, y))\nTEXT: If something visits the cow and it is blue then the cow sees the mouse.\nFOL: all x y. (Something(x) & Cow(x) & MoreVisits(x, y) & MoreSees(x, y) & IsBlue(x, y) -> MoreVisits(x, y))\nTEXT: If something is green and it needs the lion then it needs the bald eagle.\nFOL: all x y. (Something(x) & Green(x) & MoreNeeds(x, y) & MoreNeeds(x, y) -> MoreNeeds(x, y))\nTEXT: If the mouse is blue then the mouse needs the lion.\nFOL: all x y. (Mouse(x) & Blue(x) & MoreNeeds(x, y) & MoreNeeds(x, y) -> MoreNeeds(x, y))\nTEXT: If something needs the lion then it is green.\nFOL: all x y. (Something(x) & MoreNeeds(x, y) & MoreNeeds(x, y) -> MoreIs(x, y))\nTEXT: If something sees the lion and the lion does not need the cow then it is big.\nFOL: all x y. (Something(x) & Lion(x) & MoreSees(x, y) & MoreDoesNotNeed(x, y) & MoreIs(x, y) -> MoreIs(x, y))\nTEXT: The mouse needs the lion.\nFOL: Mouse(x) & Needs(x, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle needs the lion.\nFOL: all x y. (BaldEagle(x) & Lion(x) & MoreNeeds(x, y) -> Needs(x, y))\nTEXT: The bald eagle visits the mouse.\nFOL: all x y. (BaldEagle(x) & Mouse(x) & MoreVisits(x, y) -> Visits(x, y))\nTEXT: The cow visits the bald eagle.\nFOL: all x y. (Cow(x) & BaldEagle(x) & MoreVisits(x, y) -> Visits(x, y))\nTEXT: The lion is green.\nFOL: all x y. (Lion(x) & Green(x) & MoreIs(x, y) -> IsGreen(x, y))\nTEXT: The lion sees the cow.\nFOL: all x y. (Lion(x) & Cow(x) & MoreSees(x, y) -> Sees(x, y))\nTEXT: The lion visits the cow.\nFOL: all x y. (Lion(x) & Cow(x) & MoreVisits(x, y) -> Visits(x, y))\nTEXT: The mouse is blue.\nFOL: all x y. (Mouse(x) & Blue(x) & MoreIs(x, y) -> IsBlue(x, y))\nTEXT: If the cow needs the mouse then the mouse sees the cow.\nFOL: all x y. (Cow(x) & Mouse(x) & MoreNeeds(x, y) & MoreSees(x, y) -> MoreVisits(x, y))\nTEXT: If something visits the cow and it is blue then the cow sees the mouse.\nFOL: all x y. (Something(x) & Cow(x) & MoreVisits(x, y) & MoreSees(x, y) & IsBlue(x, y) -> MoreVisits(x, y))\nTEXT: If something is green and it needs the lion then it needs the bald eagle.\nFOL: all x y. (Something(x) & Green(x) & MoreNeeds(x, y) & MoreNeeds(x, y) -> MoreNeeds(x, y))\nTEXT: If the mouse is blue then the mouse needs the lion.\nFOL: all x y. (Mouse(x) & Blue(x) & MoreNeeds(x, y) & MoreNeeds(x, y) -> MoreNeeds(x, y))\nTEXT: If something needs the lion then it is green.\nFOL: all x y. (Something(x) & MoreNeeds(x, y) & MoreNeeds(x, y) -> MoreIs(x, y))\nTEXT: If something sees the lion and the lion does not need the cow then it is big.\nFOL: all x y. (Something(x) & Lion(x) & MoreSees(x, y) & -MoreNeeds(x, y) & MoreIs(x, y) -> MoreIs(x, y))\nTEXT: The mouse needs the lion.\nFOL: -Mouse(luke) & -Lion(luke)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle needs the lion.\nFOL: all x y. (BaldEagle(x) & Lion(x) & MoreNeeds(x, y) -> Needs(x, y))\nTEXT: The bald eagle visits the mouse.\nFOL: all x y. (BaldEagle(x) & Mouse(x) & MoreVisits(x, y) -> Visits(x, y))\nTEXT: The cow visits the bald eagle.\nFOL: all x y. (Cow(x) & BaldEagle(x) & MoreVisits(x, y) -> Visits(x, y))\nTEXT: The lion is green.\nFOL: all x y. (Lion(x) & Green(x) & MoreIs(x, y) -> IsGreen(x, y))\nTEXT: The lion sees the cow.\nFOL: all x y. (Lion(x) & Cow(x) & MoreSees(x, y) -> Sees(x, y))\nTEXT: The lion visits the cow.\nFOL: all x y. (Lion(x) & Cow(x) & MoreVisits(x, y) -> Visits(x, y))\nTEXT: The mouse is blue.\nFOL: all x y. (Mouse(x) & Blue(x) & MoreIs(x, y) -> IsBlue(x, y))\nTEXT: If the cow needs the mouse then the mouse sees the cow.\nFOL: all x y. (Cow(x) & Mouse(x) & MoreNeeds(x, y) & MoreSees(x, y) -> MoreVisits(x, y))\nTEXT: If something visits the cow and it is blue then the cow sees the mouse.\nFOL: all x y. (Something(x) & Cow(x) & MoreVisits(x, y) & MoreSees(x, y) & IsBlue(x, y) -> MoreVisits(x, y))\nTEXT: If something is green and it needs the lion then it needs the bald eagle.\nFOL: all x y. (Something(x) & Green(x) & MoreNeeds(x, y) & MoreNeeds(x, y) -> MoreNeeds(x, y))\nTEXT: If the mouse is blue then the mouse needs the lion.\nFOL: all x y. (Mouse(x) & Blue(x) & MoreNeeds(x, y) & MoreNeeds(x, y) -> MoreNeeds(x, y))\nTEXT: If something needs the lion then it is green.\nFOL: all x y. (Something(x) & MoreNeeds(x, y) & MoreNeeds(x, y) -> MoreIs(x, y))\nTEXT: If something sees the lion and the lion does not need the cow then it is big.\nFOL: all x y. (Something(x) & Lion(x) & MoreSees(x, y) & MoreDoesNotNeed(x, y) & MoreIs(x, y) -> MoreIs(x, y))\nTEXT: The mouse needs the lion.\nFOL: all x y. (Mouse(x) & Lion(x) & MoreNeeds(x, y) -> MoreNeeds(x, y))\n</EVALUATE>"
  ]
 },
 {
  "index": 75,
  "responses": [
   "<EVALUATE>\nTEXT: The cat chases the dog.\nFOL: all x. (Cat(x) -> Dog(x))\nTEXT: The cat needs the cow.\nFOL: all x. (Cat(x) -> Need(x, Cow(x)))\nTEXT: The cat sees the squirrel.\nFOL: all x. (Cat(x) -> See(x, Squirrel(x)))\nTEXT: The cow chases the cat.\nFOL: all x. (Cow(x) -> See(x, Cat(x)))\nTEXT: The cow chases the squirrel.\nFOL: all x. (Cow(x) -> See(x, Squirrel(x)))\nTEXT: The cow is kind.\nFOL: all x. (Cow(x) -> Kind(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\nTEXT: The cow needs the cat.\nFOL: all x. (Cow(x) -> Need(x, Cat(x)))\nTEXT: The cow sees the squirrel.\nFOL: all x. (Cow(x) -> See(x, Squirrel(x)))\nTEXT: The dog chases the squirrel.\nFOL: all x. (Dog(x) -> See(x, Squirrel(x)))\nTEXT: The dog is nice.\nFOL: all x. (Dog(x) -> Nice(x))\nTEXT: The dog needs the cow.\nFOL: all x. (Dog(x) -> Need(x, Cow(x)))\nTEXT: The dog sees the cat.\nFOL: all x. (Dog(x) -> See(x, Cat(x)))\nTEXT: The squirrel is blue.\nFOL: all x. (Squirrel(x) -> Blue(x))\nTEXT: The squirrel needs the cat.\nFOL: all x. (Squirrel(x) -> Need(x, Cat(x)))\nTEXT: The squirrel sees the cow.\nFOL: all x. (Squirrel(x) -> See(x, Cow(x)))\nTEXT: If someone sees the squirrel then they need the cow.\nFOL: if (See(x, Squirrel(x)) & Need(x, Cow(x))) -> Need(x, Cow(x))\nTEXT: If someone is kind then they need the dog.\nFOL: if (Kind(x) & Need(x, Dog(x))) -> Need(x, Dog(x))\nTEXT: If the cow needs the dog and the cow chases the cat then the dog is kind.\nFOL: if (Need(x, Dog(x)) & See(x, Cat(x))) -> Kind(x)\nTEXT: The cow needs the dog.\nFOL: all x. (Cow(x) -> Need(x, Dog(x)))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the dog.\nFOL: all x. (Cat(x) -> Dog(x))\nTEXT: The cat needs the cow.\nFOL: all x. (Cat(x) -> Need(x, Cow(x)))\nTEXT: The cat sees the squirrel.\nFOL: all x. (Cat(x) -> See(x, Squirrel(x)))\nTEXT: The cow chases the cat.\nFOL: all x. (Cow(x) -> See(x, Cat(x)))\nTEXT: The cow chases the squirrel.\nFOL: all x. (Cow(x) -> See(x, Squirrel(x)))\nTEXT: The cow is kind.\nFOL: all x. (Cow(x) -> Kind(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\nTEXT: The cow needs the cat.\nFOL: all x. (Cow(x) -> Need(x, Cat(x)))\nTEXT: The cow sees the squirrel.\nFOL: all x. (Cow(x) -> See(x, Squirrel(x)))\nTEXT: The dog chases the squirrel.\nFOL: all x. (Dog(x) -> See(x, Squirrel(x)))\nTEXT: The dog is nice.\nFOL: all x. (Dog(x) -> Nice(x))\nTEXT: The dog needs the cow.\nFOL: all x. (Dog(x) -> Need(x, Cow(x)))\nTEXT: The dog sees the cat.\nFOL: all x. (Dog(x) -> See(x, Cat(x)))\nTEXT: The squirrel is blue.\nFOL: all x. (Squirrel(x) -> Blue(x))\nTEXT: The squirrel needs the cat.\nFOL: all x. (Squirrel(x) -> Need(x, Cat(x)))\nTEXT: The squirrel sees the cow.\nFOL: all x. (Squirrel(x) -> See(x, Cow(x)))\nTEXT: If someone sees the squirrel then they need the cow.\nFOL: all x. (See(x, Squirrel(x)) & Need(x, Cow(x)))\nTEXT: If someone is kind then they need the dog.\nFOL: all x. (Kind(x) & Need(x, Dog(x)))\nTEXT: If the cow needs the dog and the cow chases the cat then the dog is kind.\nFOL: all x. (Need(x, Dog(x)) & See(x, Cat(x)) & Dog(x) -> Kind(x))\nTEXT: The cow needs the dog.\nFOL: all x. (Cow(x) -> Need(x, Dog(x)))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the dog.\nFOL: all x. (Cat(x) -> Dog(x))\nTEXT: The cat needs the cow.\nFOL: all x. (Cat(x) -> Need(x, Cow(x)))\nTEXT: The cat sees the squirrel.\nFOL: all x. (Cat(x) -> See(x, Squirrel(x)))\nTEXT: The cow chases the cat.\nFOL: all x. (Cow(x) -> See(x, Cat(x)))\nTEXT: The cow chases the squirrel.\nFOL: all x. (Cow(x) -> See(x, Squirrel(x)))\nTEXT: The cow is kind.\nFOL: all x. (Cow(x) -> Kind(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\nTEXT: The cow needs the cat.\nFOL: all x. (Cow(x) -> Need(x, Cat(x)))\nTEXT: The cow sees the squirrel.\nFOL: all x. (Cow(x) -> See(x, Squirrel(x)))\nTEXT: The dog chases the squirrel.\nFOL: all x. (Dog(x) -> See(x, Squirrel(x)))\nTEXT: The dog is nice.\nFOL: all x. (Dog(x) -> Nice(x))\nTEXT: The dog needs the cow.\nFOL: all x. (Dog(x) -> Need(x, Cow(x)))\nTEXT: The dog sees the cat.\nFOL: all x. (Dog(x) -> See(x, Cat(x)))\nTEXT: The squirrel is blue.\nFOL: all x. (Squirrel(x) -> Blue(x))\nTEXT: The squirrel needs the cat.\nFOL: all x. (Squirrel(x) -> Need(x, Cat(x)))\nTEXT: The squirrel sees the cow.\nFOL: all x. (Squirrel(x) -> See(x, Cow(x)))\nTEXT: If someone sees the squirrel then they need the cow.\nFOL: if (See(x, Squirrel(x)) & Need(x, Cow(x))) -> Need(x, Cow(x))\nTEXT: If someone is kind then they need the dog.\nFOL: if (Kind(x) & Need(x, Dog(x))) -> Need(x, Dog(x))\nTEXT: If the cow needs the dog and the cow chases the cat then the dog is kind.\nFOL: if (Need(x, Dog(x)) & See(x, Cat(x))) -> Kind(x)\nTEXT: The cow needs the dog.\nFOL: Need(x, Dog(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the dog.\nFOL: all x. (Cat(x) -> Dog(x))\nTEXT: The cat needs the cow.\nFOL: all x. (Cat(x) -> Need(x, Cow(x)))\nTEXT: The cat sees the squirrel.\nFOL: all x. (Cat(x) -> See(x, Squirrel(x)))\nTEXT: The cow chases the cat.\nFOL: all x. (Cow(x) -> See(x, Cat(x)))\nTEXT: The cow chases the squirrel.\nFOL: all x. (Cow(x) -> See(x, Squirrel(x)))\nTEXT: The cow is kind.\nFOL: all x. (Cow(x) -> Kind(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\nTEXT: The cow needs the cat.\nFOL: all x. (Cow(x) -> Need(x, Cat(x)))\nTEXT: The cow sees the squirrel.\nFOL: all x. (Cow(x) -> See(x, Squirrel(x)))\nTEXT: The dog chases the squirrel.\nFOL: all x. (Dog(x) -> See(x, Squirrel(x)))\nTEXT: The dog is nice.\nFOL: all x. (Dog(x) -> Nice(x))\nTEXT: The dog needs the cow.\nFOL: all x. (Dog(x) -> Need(x, Cow(x)))\nTEXT: The dog sees the cat.\nFOL: all x. (Dog(x) -> See(x, Cat(x)))\nTEXT: The squirrel is blue.\nFOL: all x. (Squirrel(x) -> Blue(x))\nTEXT: The squirrel needs the cat.\nFOL: all x. (Squirrel(x) -> Need(x, Cat(x)))\nTEXT: The squirrel sees the cow.\nFOL: all x. (Squirrel(x) -> See(x, Cow(x)))\nTEXT: If someone sees the squirrel then they need the cow.\nFOL: if (See(x, Squirrel(x)) & Need(x, Cow(x))) -> Need(x, Cow(x))\nTEXT: If someone is kind then they need the dog.\nFOL: if (Kind(x) & Need(x, Dog(x))) -> Need(x, Dog(x))\nTEXT: If the cow needs the dog and the cow chases the cat then the dog is kind.\nFOL: if (Need(x, Dog(x)) & See(x, Cat(x))) -> Kind(x)\nTEXT: The cow needs the dog.\nFOL: all x. (Cow(x) -> Need(x, Dog(x)))",
   "<EVALUATE>\nTEXT: The cat chases the dog.\nFOL: all x. (Cat(x) -> Dog(x))\nTEXT: The cat needs the cow.\nFOL: all x. (Cat(x) -> Need(x, Cow(x)))\nTEXT: The cat sees the squirrel.\nFOL: all x. (Cat(x) -> See(x, Squirrel(x)))\nTEXT: The cow chases the cat.\nFOL: all x. (Cow(x) -> See(x, Cat(x)))\nTEXT: The cow chases the squirrel.\nFOL: all x. (Cow(x) -> See(x, Squirrel(x)))\nTEXT: The cow is kind.\nFOL: all x. (Cow(x) -> Kind(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\nTEXT: The cow needs the cat.\nFOL: all x. (Cow(x) -> Need(x, Cat(x)))\nTEXT: The cow sees the squirrel.\nFOL: all x. (Cow(x) -> See(x, Squirrel(x)))\nTEXT: The dog chases the squirrel.\nFOL: all x. (Dog(x) -> See(x, Squirrel(x)))\nTEXT: The dog is nice.\nFOL: all x. (Dog(x) -> Nice(x))\nTEXT: The dog needs the cow.\nFOL: all x. (Dog(x) -> Need(x, Cow(x)))\nTEXT: The dog sees the cat.\nFOL: all x. (Dog(x) -> See(x, Cat(x)))\nTEXT: The squirrel is blue.\nFOL: all x. (Squirrel(x) -> Blue(x))\nTEXT: The squirrel needs the cat.\nFOL: all x. (Squirrel(x) -> Need(x, Cat(x)))\nTEXT: The squirrel sees the cow.\nFOL: all x. (Squirrel(x) -> See(x, Cow(x)))\nTEXT: If someone sees the squirrel then they need the cow.\nFOL: if (See(x, Squirrel(x)) & Need(x, Cow(x))) -> Need(x, Cow(x))\nTEXT: If someone is kind then they need the dog.\nFOL: if (Kind(x) & Need(x, Dog(x))) -> Need(x, Dog(x))\nTEXT: If the cow needs the dog and the cow chases the cat then the dog is kind.\nFOL: if (Need(x, Dog(x)) & See(x, Cat(x))) -> Kind(x)\nTEXT: The cow needs the dog.\nFOL: need(x, Dog(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 76,
  "responses": [
   "<EVALUATE>\nTEXT: The lion chases the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -Chase(x, y) -> LionTiger(x, y))\nTEXT: The lion eats the rabbit.\nFOL: all x y. (Lion(x) & Rabbit(y) & -Eat(x, y) -> LionRabbit(x, y))\nTEXT: The lion eats the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -Eat(x, y) -> LionTiger(x, y))\nTEXT: The lion is young.\nFOL: all x y. (Lion(x) & Young(y) -> Lion(x, y))\nTEXT: The rabbit chases the lion.\nFOL: all x y. (Rabbit(x) & Lion(y) & -Chase(x, y) -> RabbitLion(x, y))\nTEXT: The rabbit eats the lion.\nFOL: all x y. (Rabbit(x) & Lion(y) & -Eat(x, y) -> RabbitLion(x, y))\nTEXT: The rabbit eats the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & -Eat(x, y) -> RabbitTiger(x, y))\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & Big(y) -> Rabbit(x, y))\nTEXT: The rabbit is blue.\nFOL: all x y. (Rabbit(x) & Blue(y) -> Rabbit(x, y))\nTEXT: The rabbit is young.\nFOL: all x y. (Rabbit(x) & Young(y) -> Rabbit(x, y))\nTEXT: The rabbit needs the lion.\nFOL: all x y. (Rabbit(x) & Lion(y) & -Needs(x, y) -> RabbitLion(x, y))\nTEXT: The rabbit needs the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & -Needs(x, y) -> RabbitTiger(x, y))\nTEXT: The tiger chases the rabbit.\nFOL: all x y. (Tiger(x) & Rabbit(y) & -Chase(x, y) -> TigerRabbit(x, y))\nTEXT: The tiger eats the lion.\nFOL: all x y. (Tiger(x) & Lion(y) & -Eat(x, y) -> TigerLion(x, y))\nTEXT: The tiger needs the lion.\nFOL: all x y. (Tiger(x) & Lion(y) & -Needs(x, y) -> TigerLion(x, y))\nTEXT: If someone chases the rabbit then they are young.\nFOL: all x y. (Someone(x) & Rabbit(y) & -Chase(x, y) -> Young(x, y))\nTEXT: If the lion is young then the lion chases the tiger.\nFOL: all x y. (Lion(x) & Young(y) & -Chase(x, y) -> LionTiger(x, y))\nTEXT: If someone needs the tiger and the tiger eats the rabbit then the tiger chases the rabbit.\nFOL: all x y. (Someone(x) & Tiger(y) & -Needs(x, y) & TigerEats(x, y) -> TigerChase(x, y))\nTEXT: All kind, blue people are red.\nFOL: all x y. (Kind(x) & Blue(y) & -Red(x, y) -> Red(x, y))\nTEXT: If someone is big and they chase the lion then they need the lion.\nFOL: all x y. (Someone(x) & Big(y) & -Chase(x, y) -> Needs(x, y) -> Lion(x, y))\nTEXT: If someone needs the lion and they eat the lion then the lion needs the tiger.\nFOL: all x y. (Someone(x) & Lion(y) & -Needs(x, y) & -Eat(x, y) -> Needs(x, y) -> Tiger(x, y))\nTEXT: If someone chases the lion then they need the tiger.\nFOL: all x y. (Someone(x) & Lion(y) & -Chase(x, y) -> Needs(x, y) -> Tiger(x, y))\nTEXT: If someone is young then they chase the lion.\nFOL: all x y. (Someone(x) & Young(y) & -Chase(x, y) -> Chase(x, y))\nTEXT: The rabbit does not chase the rabbit.\nFOL: -Chase(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The lion chases the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -Chase(x, y) -> LionTiger(x, y))\nTEXT: The lion eats the rabbit.\nFOL: all x y. (Lion(x) & Rabbit(y) & -Eat(x, y) -> LionRabbit(x, y))\nTEXT: The lion eats the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -Eat(x, y) -> LionTiger(x, y))\nTEXT: The lion is young.\nFOL: all x y. (Lion(x) & Young(y) -> Lion(x, y))\nTEXT: The rabbit chases the lion.\nFOL: all x y. (Rabbit(x) & Lion(y) & -Chase(x, y) -> RabbitLion(x, y))\nTEXT: The rabbit eats the lion.\nFOL: all x y. (Rabbit(x) & Lion(y) & -Eat(x, y) -> RabbitLion(x, y))\nTEXT: The rabbit eats the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & -Eat(x, y) -> RabbitTiger(x, y))\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & Big(y) -> Rabbit(x, y))\nTEXT: The rabbit is blue.\nFOL: all x y. (Rabbit(x) & Blue(y) -> Rabbit(x, y))\nTEXT: The rabbit is young.\nFOL: all x y. (Rabbit(x) & Young(y) -> Rabbit(x, y))\nTEXT: The rabbit needs the lion.\nFOL: all x y. (Rabbit(x) & Lion(y) & -Needs(x, y) -> RabbitLion(x, y))\nTEXT: The rabbit needs the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & -Needs(x, y) -> RabbitTiger(x, y))\nTEXT: The tiger chases the rabbit.\nFOL: all x y. (Tiger(x) & Rabbit(y) & -Chase(x, y) -> TigerRabbit(x, y))\nTEXT: The tiger eats the lion.\nFOL: all x y. (Tiger(x) & Lion(y) & -Eat(x, y) -> TigerLion(x, y))\nTEXT: The tiger needs the lion.\nFOL: all x y. (Tiger(x) & Lion(y) & -Needs(x, y) -> TigerLion(x, y))\nTEXT: If someone chases the rabbit then they are young.\nFOL: all x y. (Someone(x) & Rabbit(y) & -Chase(x, y) -> Young(x, y))\nTEXT: If the lion is young then the lion chases the tiger.\nFOL: all x y. (Lion(x) & Young(y) & -Chase(x, y) -> LionTiger(x, y))\nTEXT: If someone needs the tiger and the tiger eats the rabbit then the tiger chases the rabbit.\nFOL: all x y. (Someone(x) & Tiger(y) & -Needs(x, y) & TigerEats(x, y) -> TigerChase(x, y))\nTEXT: All kind, blue people are red.\nFOL: all x y. (Kind(x) & Blue(y) & -IsRed(x, y) -> KindBlue(x, y))\nTEXT: If someone is big and they chase the lion then they need the lion.\nFOL: all x y. (Someone(x) & Big(y) & -Chase(x, y) -> Needs(x, y) -> Lion(x, y))\nTEXT: If someone needs the lion and they eat the lion then the lion needs the tiger.\nFOL: all x y. (Someone(x) & Lion(y) & -Needs(x, y) & -Eat(x, y) -> Needs(x, y) -> Tiger(x, y))\nTEXT: If someone chases the lion then they need the tiger.\nFOL: all x y. (Someone(x) & Lion(y) & -Chase(x, y) -> Needs(x, y) -> Tiger(x, y))\nTEXT: If someone is young then they chase the lion.\nFOL: all x y. (Someone(x) & Young(y) & -Chase(x, y) -> Chase(x, y))\nTEXT: The rabbit does not chase the rabbit.\nFOL: -Chase(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The lion chases the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -Chase(x, y) -> LionTiger(x, y))\nTEXT: The lion eats the rabbit.\nFOL: all x y. (Lion(x) & Rabbit(y) & -Eat(x, y) -> LionRabbit(x, y))\nTEXT: The lion eats the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -Eat(x, y) -> LionTiger(x, y))\nTEXT: The lion is young.\nFOL: all x y. (Lion(x) & Young(y) -> Lion(x, y))\nTEXT: The rabbit chases the lion.\nFOL: all x y. (Rabbit(x) & Lion(y) & -Chase(x, y) -> RabbitLion(x, y))\nTEXT: The rabbit eats the lion.\nFOL: all x y. (Rabbit(x) & Lion(y) & -Eat(x, y) -> RabbitLion(x, y))\nTEXT: The rabbit eats the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & -Eat(x, y) -> RabbitTiger(x, y))\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & Big(y) -> Rabbit(x, y))\nTEXT: The rabbit is blue.\nFOL: all x y. (Rabbit(x) & Blue(y) -> Rabbit(x, y))\nTEXT: The rabbit is young.\nFOL: all x y. (Rabbit(x) & Young(y) -> Rabbit(x, y))\nTEXT: The rabbit needs the lion.\nFOL: all x y. (Rabbit(x) & Lion(y) & -Needs(x, y) -> RabbitLion(x, y))\nTEXT: The rabbit needs the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & -Needs(x, y) -> RabbitTiger(x, y))\nTEXT: The tiger chases the rabbit.\nFOL: all x y. (Tiger(x) & Rabbit(y) & -Chase(x, y) -> TigerRabbit(x, y))\nTEXT: The tiger eats the lion.\nFOL: all x y. (Tiger(x) & Lion(y) & -Eat(x, y) -> TigerLion(x, y))\nTEXT: The tiger needs the lion.\nFOL: all x y. (Tiger(x) & Lion(y) & -Needs(x, y) -> TigerLion(x, y))\nTEXT: If someone chases the rabbit then they are young.\nFOL: all x y. (Someone(x) & Rabbit(y) & -Chase(x, y) -> Young(x, y))\nTEXT: If the lion is young then the lion chases the tiger.\nFOL: all x y. (Lion(x) & Young(y) & -Chase(x, y) -> LionTiger(x, y))\nTEXT: If someone needs the tiger and the tiger eats the rabbit then the tiger chases the rabbit.\nFOL: all x y. (Someone(x) & Tiger(y) & -Needs(x, y) & TigerEats(x, y) -> TigerChase(x, y))\nTEXT: All kind, blue people are red.\nFOL: all x y. (Kind(x) & Blue(y) & -IsRed(x, y) -> Red(x, y))\nTEXT: If someone is big and they chase the lion then they need the lion.\nFOL: all x y. (Someone(x) & Big(y) & -Chase(x, y) -> Needs(x, y) -> Lion(x, y))\nTEXT: If someone needs the lion and they eat the lion then the lion needs the tiger.\nFOL: all x y. (Someone(x) & Lion(y) & -Needs(x, y) & -Eat(x, y) -> Needs(x, y) -> Tiger(x, y))\nTEXT: If someone chases the lion then they need the tiger.\nFOL: all x y. (Someone(x) & Lion(y) & -Chase(x, y) -> Needs(x, y) -> Tiger(x, y))\nTEXT: If someone is young then they chase the lion.\nFOL: all x y. (Someone(x) & Young(y) & -Chase(x, y) -> Chase(x, y))\nTEXT: The rabbit does not chase the rabbit.\nFOL: -Chase(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The lion chases the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -Chase(x, y) -> LionTiger(x, y))\nTEXT: The lion eats the rabbit.\nFOL: all x y. (Lion(x) & Rabbit(y) & -Eat(x, y) -> LionRabbit(x, y))\nTEXT: The lion eats the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -Eat(x, y) -> LionTiger(x, y))\nTEXT: The lion is young.\nFOL: all x y. (Lion(x) & Young(y) -> Lion(x, y))\nTEXT: The rabbit chases the lion.\nFOL: all x y. (Rabbit(x) & Lion(y) & -Chase(x, y) -> RabbitLion(x, y))\nTEXT: The rabbit eats the lion.\nFOL: all x y. (Rabbit(x) & Lion(y) & -Eat(x, y) -> RabbitLion(x, y))\nTEXT: The rabbit eats the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & -Eat(x, y) -> RabbitTiger(x, y))\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & Big(y) -> Rabbit(x, y))\nTEXT: The rabbit is blue.\nFOL: all x y. (Rabbit(x) & Blue(y) -> Rabbit(x, y))\nTEXT: The rabbit is young.\nFOL: all x y. (Rabbit(x) & Young(y) -> Rabbit(x, y))\nTEXT: The rabbit needs the lion.\nFOL: all x y. (Rabbit(x) & Lion(y) & -Needs(x, y) -> RabbitLion(x, y))\nTEXT: The rabbit needs the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & -Needs(x, y) -> RabbitTiger(x, y))\nTEXT: The tiger chases the rabbit.\nFOL: all x y. (Tiger(x) & Rabbit(y) & -Chase(x, y) -> TigerRabbit(x, y))\nTEXT: The tiger eats the lion.\nFOL: all x y. (Tiger(x) & Lion(y) & -Eat(x, y) -> TigerLion(x, y))\nTEXT: The tiger needs the lion.\nFOL: all x y. (Tiger(x) & Lion(y) & -Needs(x, y) -> TigerLion(x, y))\nTEXT: If someone chases the rabbit then they are young.\nFOL: all x y. (Someone(x) & Rabbit(y) & -Chase(x, y) -> Young(x, y))\nTEXT: If the lion is young then the lion chases the tiger.\nFOL: all x y. (Lion(x) & Young(y) & -Chase(x, y) -> LionTiger(x, y))\nTEXT: If someone needs the tiger and the tiger eats the rabbit then the tiger chases the rabbit.\nFOL: all x y. (Someone(x) & Tiger(y) & -Needs(x, y) & TigerEats(x, y) -> TigerChase(x, y))\nTEXT: All kind, blue people are red.\nFOL: all x y. (Kind(x) & Blue(y) & -Red(x, y) -> Red(x, y))\nTEXT: If someone is big and they chase the lion then they need the lion.\nFOL: all x y. (Someone(x) & Big(y) & -Chase(x, y) -> Needs(x, y) -> Lion(x, y))\nTEXT: If someone needs the lion and they eat the lion then the lion needs the tiger.\nFOL: all x y. (Someone(x) & Lion(y) & -Needs(x, y) & -Eat(x, y) -> Needs(x, y) -> Tiger(x, y))\nTEXT: If someone chases the lion then they need the tiger.\nFOL: all x y. (Someone(x) & Lion(y) & -Chase(x, y) -> Needs(x, y) -> Tiger(x, y))\nTEXT: If someone is young then they chase the lion.\nFOL: all x y. (Someone(x) & Young(y) & -Chase(x, y) -> Chase(x, y))\nTEXT: The rabbit does not chase the rabbit.\nFOL: all x y. (Rabbit(x) & Rabbit(y) & -Chase(x, y) -> -Chase(y, x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The lion chases the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -Chase(x, y) -> LionTiger(x, y))\nTEXT: The lion eats the rabbit.\nFOL: all x y. (Lion(x) & Rabbit(y) & -Eat(x, y) -> LionRabbit(x, y))\nTEXT: The lion eats the tiger.\nFOL: all x y. (Lion(x) & Tiger(y) & -Eat(x, y) -> LionTiger(x, y))\nTEXT: The lion is young.\nFOL: all x y. (Lion(x) & Young(y) -> Lion(x, y))\nTEXT: The rabbit chases the lion.\nFOL: all x y. (Rabbit(x) & Lion(y) & -Chase(x, y) -> RabbitLion(x, y))\nTEXT: The rabbit eats the lion.\nFOL: all x y. (Rabbit(x) & Lion(y) & -Eat(x, y) -> RabbitLion(x, y))\nTEXT: The rabbit eats the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & -Eat(x, y) -> RabbitTiger(x, y))\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & Big(y) -> Rabbit(x, y))\nTEXT: The rabbit is blue.\nFOL: all x y. (Rabbit(x) & Blue(y) -> Rabbit(x, y))\nTEXT: The rabbit is young.\nFOL: all x y. (Rabbit(x) & Young(y) -> Rabbit(x, y))\nTEXT: The rabbit needs the lion.\nFOL: all x y. (Rabbit(x) & Lion(y) & -Needs(x, y) -> RabbitLion(x, y))\nTEXT: The rabbit needs the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & -Needs(x, y) -> RabbitTiger(x, y))\nTEXT: The tiger chases the rabbit.\nFOL: all x y. (Tiger(x) & Rabbit(y) & -Chase(x, y) -> TigerRabbit(x, y))\nTEXT: The tiger eats the lion.\nFOL: all x y. (Tiger(x) & Lion(y) & -Eat(x, y) -> TigerLion(x, y))\nTEXT: The tiger needs the lion.\nFOL: all x y. (Tiger(x) & Lion(y) & -Needs(x, y) -> TigerLion(x, y))\nTEXT: If someone chases the rabbit then they are young.\nFOL: all x y. (Someone(x) & Rabbit(y) & -Chase(x, y) -> Young(x, y))\nTEXT: If the lion is young then the lion chases the tiger.\nFOL: all x y. (Lion(x) & Young(y) & -Chase(x, y) -> LionTiger(x, y))\nTEXT: If someone needs the tiger and the tiger eats the rabbit then the tiger chases the rabbit.\nFOL: all x y. (Someone(x) & Tiger(y) & -Needs(x, y) & TigerEats(x, y) -> TigerChase(x, y))\nTEXT: All kind, blue people are red.\nFOL: all x y. (Kind(x) & Blue(y) & -Red(x, y) -> Red(x, y))\nTEXT: If someone is big and they chase the lion then they need the lion.\nFOL: all x y. (Someone(x) & Big(y) & -Chase(x, y) -> Needs(x, y) -> Lion(x, y))\nTEXT: If someone needs the lion and they eat the lion then the lion needs the tiger.\nFOL: all x y. (Someone(x) & Lion(y) & -Needs(x, y) & -Eat(x, y) -> Needs(x, y) -> Tiger(x, y))\nTEXT: If someone chases the lion then they need the tiger.\nFOL: all x y. (Someone(x) & Lion(y) & -Chase(x, y) -> Needs(x, y) -> Tiger(x, y))\nTEXT: If someone is young then they chase the lion.\nFOL: all x y. (Someone(x) & Young(y) & -Chase(x, y) -> Chase(x, y))\nTEXT: The rabbit does not chase the rabbit.\nFOL: all x y. (Rabbit(x) & Rabbit(y) & -Chase(x, y) -> NotChase(x, y))\n</EVALUATE>"
  ]
 },
 {
  "index": 77,
  "responses": [
   "<EVALUATE>\nTEXT: The dog chases the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & DogChasesTiger(x, y))\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> Green(x))\nTEXT: The dog is kind.\nFOL: all x. (Dog(x) -> Kind(x))\nTEXT: The dog is red.\nFOL: all x. (Dog(x) -> Red(x))\nTEXT: The dog does not see the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & DogDoesNotSeeTiger(x, y))\nTEXT: The dog visits the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & DogVisitsTiger(x, y))\nTEXT: The tiger does not chase the dog.\nFOL: all x y. (Tiger(x) & Dog(x) & DogDoesNotChaseTiger(x, y))\nTEXT: The tiger is green.\nFOL: all x y. (Tiger(x) & Dog(x) & TigerIsGreen(x))\nTEXT: The tiger is red.\nFOL: all x y. (Tiger(x) & Dog(x) & TigerIsRed(x))\nTEXT: The tiger visits the dog.\nFOL: all x y. (Tiger(x) & Dog(x) & DogVisitsTiger(x, y))\nTEXT: If something is big then it does not visit the dog.\nFOL: all x y. (Big(x) & Dog(x) & DogDoesNotVisitDog(x))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x y. (Something(x) & Tiger(y) & TigerIsBig(x, y))\nTEXT: Kind things are big.\nFOL: all x. (Kind(x) & Big(x))\nTEXT: If something visits the tiger then it is kind.\nFOL: all x y. (Something(x) & Tiger(y) & Dog(x) & DogVisitsTiger(x, y))\nTEXT: If something sees the tiger then it sees the dog.\nFOL: all x y. (Something(x) & Tiger(y) & Dog(x) & DogDoesNotSeeTiger(x, y))\nTEXT: If something is green then it sees the dog.\nFOL: all x y. (Something(x) & Green(x) & Dog(x) & DogDoesNotSeeTiger(x, y))\nTEXT: If something visits the tiger and the tiger is not big then the tiger is not green.\nFOL: all x y. (Something(x) & Tiger(y) & Dog(x) & TigerIsNotBig(x, y) & TigerIsNotGreen(x, y))\nTEXT: If something is red and it does not visit the dog then it chases the dog.\nFOL: all x y. (Something(x) & Red(x) & Dog(x) & DogDoesNotVisitDog(x))\nTEXT: The tiger does not chase the dog.\nFOL: all x y. (Tiger(x) & Dog(x) & DogDoesNotChaseTiger(x, y))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog chases the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & DogChasesTiger(x, y))\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> Green(x))\nTEXT: The dog is kind.\nFOL: all x. (Dog(x) -> Kind(x))\nTEXT: The dog is red.\nFOL: all x. (Dog(x) -> Red(x))\nTEXT: The dog does not see the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & DogDoesNotSeeTiger(x, y))\nTEXT: The dog visits the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & DogVisitsTiger(x, y))\nTEXT: The tiger does not chase the dog.\nFOL: all x y. (Tiger(x) & Dog(x) & DogDoesNotChaseTiger(x, y))\nTEXT: The tiger is green.\nFOL: all x y. (Tiger(x) & Dog(x) & TigerIsGreen(x))\nTEXT: The tiger is red.\nFOL: all x y. (Tiger(x) & Dog(x) & TigerIsRed(x))\nTEXT: The tiger visits the dog.\nFOL: all x y. (Tiger(x) & Dog(x) & DogVisitsTiger(x, y))\nTEXT: If something is big then it does not visit the dog.\nFOL: all x y. (Big(x) & Dog(x) & DogDoesNotVisitDog(x))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x y. (Something(x) & Tiger(y) & TigerIsBig(x, y))\nTEXT: Kind things are big.\nFOL: all x. (Kind(x) & Big(x))\nTEXT: If something visits the tiger then it is kind.\nFOL: all x y. (Something(x) & Tiger(y) & Dog(x) & DogVisitsTiger(x, y))\nTEXT: If something sees the tiger then it sees the dog.\nFOL: all x y. (Something(x) & Tiger(y) & Dog(x) & DogDoesNotSeeTiger(x, y))\nTEXT: If something is green then it sees the dog.\nFOL: all x y. (Something(x) & Green(x) & Dog(x) & DogDoesNotSeeTiger(x, y))\nTEXT: If something visits the tiger and the tiger is not big then the tiger is not green.\nFOL: all x y. (Something(x) & Tiger(y) & Dog(x) & DogVisitsTiger(x, y) & TigerNotBig(x, y))\nTEXT: If something is red and it does not visit the dog then it chases the dog.\nFOL: all x y. (Something(x) & Red(x) & Dog(x) & DogDoesNotVisitDog(x))\nTEXT: The tiger does not chase the dog.\nFOL: all x y. (Tiger(x) & Dog(x) & DogDoesNotChaseTiger(x, y))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog chases the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & DogChasesTiger(x, y))\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> Green(x))\nTEXT: The dog is kind.\nFOL: all x. (Dog(x) -> Kind(x))\nTEXT: The dog is red.\nFOL: all x. (Dog(x) -> Red(x))\nTEXT: The dog does not see the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & DogDoesNotSeeTiger(x, y))\nTEXT: The dog visits the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & DogVisitsTiger(x, y))\nTEXT: The tiger does not chase the dog.\nFOL: all x y. (Tiger(x) & Dog(x) & DogDoesNotChaseTiger(x, y))\nTEXT: The tiger is green.\nFOL: all x y. (Tiger(x) & Dog(x) & TigerIsGreen(x))\nTEXT: The tiger is red.\nFOL: all x y. (Tiger(x) & Dog(x) & TigerIsRed(x))\nTEXT: The tiger visits the dog.\nFOL: all x y. (Tiger(x) & Dog(x) & DogVisitsTiger(x, y))\nTEXT: If something is big then it does not visit the dog.\nFOL: all x y. (Big(x) & Dog(x) & DogDoesNotVisitDog(x))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x y. (Something(x) & Tiger(y) & TigerIsBig(x, y))\nTEXT: Kind things are big.\nFOL: all x. (Kind(x) & Big(x))\nTEXT: If something visits the tiger then it is kind.\nFOL: all x y. (Something(x) & Tiger(y) & Dog(x) & DogVisitsTiger(x, y))\nTEXT: If something sees the tiger then it sees the dog.\nFOL: all x y. (Something(x) & Tiger(y) & Dog(x) & DogVisitsTiger(x, y))\nTEXT: If something is green then it sees the dog.\nFOL: all x y. (Something(x) & Green(x) & Dog(x) & DogVisitsTiger(x, y))\nTEXT: If something visits the tiger and the tiger is not big then the tiger is not green.\nFOL: all x y. (Something(x) & Tiger(y) & Dog(x) & DogVisitsTiger(x, y) & TigerNotBig(x, y))\nTEXT: If something is red and it does not visit the dog then it chases the dog.\nFOL: all x y. (Something(x) & Red(x) & Dog(x) & DogDoesNotVisitDog(x))\nTEXT: The tiger does not chase the dog.\nFOL: all x y. (Tiger(x) & Dog(x) & DogDoesNotChaseTiger(x, y))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog chases the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & DogChasesTiger(x, y))\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> Green(x))\nTEXT: The dog is kind.\nFOL: all x. (Dog(x) -> Kind(x))\nTEXT: The dog is red.\nFOL: all x. (Dog(x) -> Red(x))\nTEXT: The dog does not see the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & DogDoesNotSeeTiger(x, y))\nTEXT: The dog visits the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & DogVisitsTiger(x, y))\nTEXT: The tiger does not chase the dog.\nFOL: all x y. (Tiger(x) & Dog(x) & DogDoesNotChaseTiger(x, y))\nTEXT: The tiger is green.\nFOL: all x y. (Tiger(x) & Dog(x) & TigerIsGreen(x))\nTEXT: The tiger is red.\nFOL: all x y. (Tiger(x) & Dog(x) & TigerIsRed(x))\nTEXT: The tiger visits the dog.\nFOL: all x y. (Tiger(x) & Dog(x) & DogVisitsTiger(x, y))\nTEXT: If something is big then it does not visit the dog.\nFOL: all x y. (Big(x) & Dog(x) & DogDoesNotVisitDog(x))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x y. (Something(x) & Tiger(y) & TigerIsBig(x, y))\nTEXT: Kind things are big.\nFOL: all x. (Kind(x) & Big(x))\nTEXT: If something visits the tiger then it is kind.\nFOL: all x y. (Something(x) & Tiger(y) & Dog(x) & DogVisitsTiger(x, y))\nTEXT: If something sees the tiger then it sees the dog.\nFOL: all x y. (Something(x) & Tiger(y) & Dog(x) & DogDoesNotSeeTiger(x, y))\nTEXT: If something is green then it sees the dog.\nFOL: all x y. (Something(x) & Green(x) & Dog(x) & DogDoesNotSeeTiger(x, y))\nTEXT: If something visits the tiger and the tiger is not big then the tiger is not green.\nFOL: all x y. (Something(x) & Tiger(y) & Dog(x) & TigerIsNotBig(x, y) & TigerIsNotGreen(x, y))\nTEXT: If something is red and it does not visit the dog then it chases the dog.\nFOL: all x y. (Something(x) & Red(x) & Dog(x) & DogDoesNotVisitDog(x))\nTEXT: The tiger does not chase the dog.\nFOL: all x y. (Tiger(x) & Dog(x) & DogDoesNotChaseTiger(x, y))",
   "<EVALUATE>\nTEXT: The dog chases the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & DogChasesTiger(x, y))\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> Green(x))\nTEXT: The dog is kind.\nFOL: all x. (Dog(x) -> Kind(x))\nTEXT: The dog is red.\nFOL: all x. (Dog(x) -> Red(x))\nTEXT: The dog does not see the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & DogDoesNotSeeTiger(x, y))\nTEXT: The dog visits the tiger.\nFOL: all x y. (Dog(x) & Tiger(y) & DogVisitsTiger(x, y))\nTEXT: The tiger does not chase the dog.\nFOL: all x y. (Tiger(x) & Dog(x) & DogDoesNotChaseTiger(x, y))\nTEXT: The tiger is green.\nFOL: all x y. (Tiger(x) & Dog(x) & TigerIsGreen(x))\nTEXT: The tiger is red.\nFOL: all x y. (Tiger(x) & Dog(x) & TigerIsRed(x))\nTEXT: The tiger visits the dog.\nFOL: all x y. (Tiger(x) & Dog(x) & DogVisitsTiger(x, y))\nTEXT: If something is big then it does not visit the dog.\nFOL: all x y. (Big(x) & Dog(x) & DogDoesNotVisitDog(x))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x y. (Something(x) & Tiger(y) & TigerIsBig(x, y))\nTEXT: Kind things are big.\nFOL: all x. (Kind(x) & Big(x))\nTEXT: If something visits the tiger then it is kind.\nFOL: all x y. (Something(x) & Tiger(y) & Dog(x) & DogVisitsTiger(x, y))\nTEXT: If something sees the tiger then it sees the dog.\nFOL: all x y. (Something(x) & Tiger(y) & Dog(x) & DogDoesNotSeeTiger(x, y))\nTEXT: If something is green then it sees the dog.\nFOL: all x y. (Something(x) & Green(x) & Dog(x) & DogDoesNotSeeTiger(x, y))\nTEXT: If something visits the tiger and the tiger is not big then the tiger is not green.\nFOL: all x y. (Something(x) & Tiger(y) & Dog(x) & TigerIsNotBig(x, y) & TigerIsNotGreen(x, y))\nTEXT: If something is red and it does not visit the dog then it chases the dog.\nFOL: all x y. (Something(x) & Red(x) & Dog(x) & DogDoesNotVisitDog(x))\nTEXT: The tiger does not chase the dog.\nFOL: -Tiger(x) & Dog(x) & DogDoesNotChaseTiger(x, y)\n</EVALUATE>"
  ]
 },
 {
  "index": 78,
  "responses": [
   "<EVALUATE>\nTEXT: The cow does not chase the dog.\nFOL: all x. (Cow(x) -> -ChaseDog(x))\nTEXT: The dog is kind.\nFOL: all x. (Dog(x) -> Kind(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> Round(x))\nTEXT: The tiger chases the dog.\nFOL: all x. (Tiger(x) -> ChaseDog(x))\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: If something is green then it chases the tiger.\nFOL: all x. (Green(x) -> ChaseTiger(x))\nTEXT: If the cow sees the dog then the dog sees the rabbit.\nFOL: all x. (Cow(x) -> -SeeDog(x))\nTEXT: The rabbit sees the rabbit.\nFOL: all x. (Rabbit(x) -> SeeRabbit(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow does not chase the dog.\nFOL: all x. (Cow(x) -> -ChaseDog(x))\nTEXT: The dog is kind.\nFOL: all x. (Dog(x) -> Kind(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> Round(x))\nTEXT: The tiger chases the dog.\nFOL: all x. (Tiger(x) -> ChaseDog(x))\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: If something is green then it chases the tiger.\nFOL: all x. (Green(x) -> ChaseTiger(x))\nTEXT: If the cow sees the dog then the dog sees the rabbit.\nFOL: all x. (Cow(x) -> -SeeDog(x))\nTEXT: The rabbit sees the rabbit.\nFOL: all x. (Rabbit(x) -> -SeeRabbit(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow does not chase the dog.\nFOL: all x. (Cow(x) -> -ChaseDog(x))\nTEXT: The dog is kind.\nFOL: all x. (Dog(x) -> Kind(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> -Round(x))\nTEXT: The tiger chases the dog.\nFOL: all x. (Tiger(x) -> ChaseDog(x))\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: If something is green then it chases the tiger.\nFOL: all x. (Green(x) -> ChaseTiger(x))\nTEXT: If the cow sees the dog then the dog sees the rabbit.\nFOL: all x. (Cow(x) -> -SeeDog(x))\nTEXT: The rabbit sees the rabbit.\nFOL: all x. (Rabbit(x) -> SeeRabbit(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow does not chase the dog.\nFOL: all x. (Cow(x) -> -ChaseDog(x))\nTEXT: The dog is kind.\nFOL: all x. (Dog(x) -> Kind(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> -Round(x))\nTEXT: The tiger chases the dog.\nFOL: all x. (Tiger(x) -> ChaseDog(x))\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: If something is green then it chases the tiger.\nFOL: all x. (Green(x) -> ChaseTiger(x))\nTEXT: If the cow sees the dog then the dog sees the rabbit.\nFOL: all x. (Cow(x) -> -SeeDog(x))\nTEXT: The rabbit sees the rabbit.\nFOL: all x. (Rabbit(x) -> -SeeRabbit(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow does not chase the dog.\nFOL: all x. (Cow(x) -> -ChaseDog(x))\nTEXT: The dog is kind.\nFOL: all x. (Dog(x) -> Kind(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> Round(x))\nTEXT: The tiger chases the dog.\nFOL: all x. (Tiger(x) -> ChaseDog(x))\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: If something is green then it chases the tiger.\nFOL: all x. (Green(x) -> ChaseTiger(x))\nTEXT: If the cow sees the dog then the dog sees the rabbit.\nFOL: all x. (Cow(x) -> (Dog(x) -> Rabbit(x)))\nTEXT: The rabbit sees the rabbit.\nFOL: all x. (Rabbit(x) -> Rabbit(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 79,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\nTEXT: Bob is nice.\nFOL: all x. (Bob(x) -> Nice(x))\nTEXT: Bob is quiet.\nFOL: all x. (Bob(x) -> Quiet(x))\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> Round(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Gary is rough.\nFOL: all x. (Gary(x) -> Rough(x))\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\nTEXT: Harry is nice.\nFOL: all x. (Harry(x) -> Nice(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\nTEXT: Round things are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If something is red and rough then it is big.\nFOL: (Red(x) & Rough(x) -> Big(x))\nTEXT: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\nTEXT: All big, round things are quiet.\nFOL: (Big(x) & Round(x) -> Quiet(x))\nTEXT: If something is nice and round then it is quiet.\nFOL: (Nice(x) & Round(x) -> Quiet(x))\nTEXT: All rough, quiet things are nice.\nFOL: (Rough(x) & Quiet(x) -> Nice(x))\nTEXT: Gary is young.\nFOL: all x. (Gary(x) -> Young(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\nTEXT: Bob is nice.\nFOL: all x. (Bob(x) -> Nice(x))\nTEXT: Bob is quiet.\nFOL: all x. (Bob(x) -> Quiet(x))\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> Round(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Gary is rough.\nFOL: all x. (Gary(x) -> Rough(x))\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\nTEXT: Harry is nice.\nFOL: all x. (Harry(x) -> Nice(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\nTEXT: Round things are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If something is red and rough then it is big.\nFOL: (Red(x) & Rough(x) -> Big(x))\nTEXT: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\nTEXT: All big, round things are quiet.\nFOL: all x. (Big(x) & Round(x) -> Quiet(x))\nTEXT: If something is nice and round then it is quiet.\nFOL: (Nice(x) & Round(x) -> Quiet(x))\nTEXT: All rough, quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\nTEXT: Gary is young.\nFOL: all x. (Gary(x) -> Young(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\nTEXT: Bob is nice.\nFOL: all x. (Bob(x) -> Nice(x))\nTEXT: Bob is quiet.\nFOL: all x. (Bob(x) -> Quiet(x))\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> Round(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Gary is rough.\nFOL: all x. (Gary(x) -> Rough(x))\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\nTEXT: Harry is nice.\nFOL: all x. (Harry(x) -> Nice(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\nTEXT: Round things are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If something is red and rough then it is big.\nFOL: (Red(x) & Rough(x) -> Big(x))\nTEXT: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\nTEXT: All big, round things are quiet.\nFOL: (Big(x) & Round(x) -> Quiet(x))\nTEXT: If something is nice and round then it is quiet.\nFOL: (Nice(x) & Round(x) -> Quiet(x))\nTEXT: All rough, quiet things are nice.\nFOL: (Rough(x) & Quiet(x) -> Nice(x))\nTEXT: Gary is young.\nFOL: all x. (Gary(x) -> Young(x))",
   "<EVALUATE>\n\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\n\nTEXT: Bob is nice.\nFOL: all x. (Bob(x) -> Nice(x))\n\nTEXT: Bob is quiet.\nFOL: all x. (Bob(x) -> Quiet(x))\n\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\n\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> Round(x))\n\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\n\nTEXT: Gary is rough.\nFOL: all x. (Gary(x) -> Rough(x))\n\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\n\nTEXT: Harry is nice.\nFOL: all x. (Harry(x) -> Nice(x))\n\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\n\nTEXT: Round things are big.\nFOL: all x. (Round(x) -> Big(x))\n\nTEXT: If something is red and rough then it is big.\nFOL: all x y. (Red(x) & Rough(x) & Big(x) -> x)\n\nTEXT: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\n\nTEXT: All big, round things are quiet.\nFOL: all x y. (Big(x) & Round(x) & Quiet(x) -> x)\n\nTEXT: If something is nice and round then it is quiet.\nFOL: all x y. (Nice(x) & Round(x) & Quiet(x) -> x)\n\nTEXT: All rough, quiet things are nice.\nFOL: all x y. (Rough(x) & Quiet(x) & Nice(x) -> x)\n\nTEXT: Gary is young.\nFOL: all x. (Gary(x) -> Young(x))\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\n\nTEXT: Bob is nice.\nFOL: all x. (Bob(x) -> Nice(x))\n\nTEXT: Bob is quiet.\nFOL: all x. (Bob(x) -> Quiet(x))\n\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\n\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> Round(x))\n\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\n\nTEXT: Gary is rough.\nFOL: all x. (Gary(x) -> Rough(x))\n\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\n\nTEXT: Harry is nice.\nFOL: all x. (Harry(x) -> Nice(x))\n\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\n\nTEXT: Round things are big.\nFOL: all x. (Round(x) -> Big(x))\n\nTEXT: If something is red and rough then it is big.\nFOL: all x y. (Red(x) & Rough(x) & Big(x) -> x)\n\nTEXT: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\n\nTEXT: All big, round things are quiet.\nFOL: all x. (Big(x) & Round(x) & Quiet(x) -> x)\n\nTEXT: If something is nice and round then it is quiet.\nFOL: all x y. (Nice(x) & Round(x) & Quiet(x) -> x)\n\nTEXT: All rough, quiet things are nice.\nFOL: all x y. (Rough(x) & Quiet(x) & Nice(x) -> x)\n\nTEXT: Gary is young.\nFOL: all x. (Gary(x) -> Young(x))\n\n</EVALUATE>"
  ]
 },
 {
  "index": 80,
  "responses": [
   "<EVALUATE>\nTEXT: The lion is rough.\nFOL: all x. (Lion(x) -> Rough(x))\nTEXT: The tiger chases the lion.\nFOL: all x. (Tiger(x) -> ChasesLion(x))\nTEXT: If the lion eats the tiger and the lion sees the tiger then the tiger is kind.\nFOL: all x y. (Lion(x) & Tiger(x) & Eat(x, y) & See(x, y) -> Kind(x, y))\nTEXT: If something eats the tiger then the tiger eats the lion.\nFOL: all x y. (Something(x) -> Eat(x, y) & Tiger(x) -> Eat(x, y))\nTEXT: If something sees the tiger then the tiger does not eat the lion.\nFOL: all x y. (Something(x) -> See(x, y) & Tiger(x) -> Eat(x, y))\nTEXT: If something is rough then it is red.\nFOL: all x. (Something(x) -> Rough(x) & Red(x))\nTEXT: If something chases the lion then the lion eats the tiger.\nFOL: all x y. (Something(x) -> ChasesLion(x) & Lion(x) -> Eat(x, y))\nTEXT: If something sees the tiger then the tiger sees the lion.\nFOL: all x y. (Something(x) -> See(x, y) & Tiger(x) -> See(x, y))\nTEXT: If something eats the lion then the lion chases the tiger.\nFOL: all x y. (Something(x) -> Eat(x, y) & Lion(x) -> ChasesLion(x))\nTEXT: If the lion is not rough then the lion is not kind.\nFOL: all x. (Lion(x) -> NotRough(x) & Lion(x) -> NotKind(x))\nTEXT: The tiger does not eat the lion.\nFOL: -Tiger(x) -> -Eat(x, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The lion is rough.\nFOL: all x. (Lion(x) -> Rough(x))\nTEXT: The tiger chases the lion.\nFOL: all x. (Tiger(x) -> ChasesLion(x))\nTEXT: If the lion eats the tiger and the lion sees the tiger then the tiger is kind.\nFOL: all x y. (Lion(x) & Tiger(x) & Eat(x, y) & See(x, y) -> Kind(x, y))\nTEXT: If something eats the tiger then the tiger eats the lion.\nFOL: all x y. (Something(x) -> Eat(x, y) & Tiger(x) -> Eat(x, y))\nTEXT: If something sees the tiger then the tiger does not eat the lion.\nFOL: all x y. (Something(x) -> See(x, y) & Tiger(x) -> Eat(x, y))\nTEXT: If something is rough then it is red.\nFOL: all x. (Something(x) -> Rough(x) & Red(x))\nTEXT: If something chases the lion then the lion eats the tiger.\nFOL: all x y. (Something(x) -> ChasesLion(x) & Lion(x) -> Eat(x, y))\nTEXT: If something sees the tiger then the tiger sees the lion.\nFOL: all x y. (Something(x) -> See(x, y) & Tiger(x) -> See(x, y))\nTEXT: If something eats the lion then the lion chases the tiger.\nFOL: all x y. (Something(x) -> Eat(x, y) & Lion(x) -> ChasesLion(x))\nTEXT: If the lion is not rough then the lion is not kind.\nFOL: all x. (Lion(x) -> NotRough(x) & Lion(x) -> NotKind(x))\nTEXT: The tiger does not eat the lion.\nFOL: -Tiger(x) & -Eat(x, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The lion is rough.\nFOL: all x. (Lion(x) -> Rough(x))\nTEXT: The tiger chases the lion.\nFOL: all x. (Tiger(x) -> ChasesLion(x))\nTEXT: If the lion eats the tiger and the lion sees the tiger then the tiger is kind.\nFOL: all x y. (Lion(x) & Tiger(x) & Eat(x, y) & See(x, y) -> Kind(x, y))\nTEXT: If something eats the tiger then the tiger eats the lion.\nFOL: all x y. (Something(x) -> Eat(x, y) & Tiger(x) -> Eat(x, y))\nTEXT: If something sees the tiger then the tiger does not eat the lion.\nFOL: all x y. (Something(x) -> See(x, y) & Tiger(x) -> Eat(x, y))\nTEXT: If something is rough then it is red.\nFOL: all x. (Something(x) -> Rough(x) & Red(x))\nTEXT: If something chases the lion then the lion eats the tiger.\nFOL: all x y. (Something(x) -> ChasesLion(x) & Lion(x) -> Eat(x, y))\nTEXT: If something sees the tiger then the tiger sees the lion.\nFOL: all x y. (Something(x) -> See(x, y) & Tiger(x) -> See(x, y))\nTEXT: If something eats the lion then the lion chases the tiger.\nFOL: all x y. (Something(x) -> Eat(x, y) & Lion(x) -> ChasesLion(x))\nTEXT: If the lion is not rough then the lion is not kind.\nFOL: all x. (Lion(x) -> NotRough(x) & Lion(x) -> NotKind(x))\nTEXT: The tiger does not eat the lion.\nFOL: -Eat(lion) & -Kind(lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The lion is rough.\nFOL: all x. (Lion(x) -> Rough(x))\nTEXT: The tiger chases the lion.\nFOL: all x. (Tiger(x) -> ChasesLion(x))\nTEXT: If the lion eats the tiger and the lion sees the tiger then the tiger is kind.\nFOL: all x y. (Lion(x) & Tiger(x) & Eat(x, y) & See(x, y) -> Kind(x, y))\nTEXT: If something eats the tiger then the tiger eats the lion.\nFOL: all x y. (Something(x) -> Eat(x, y) & Tiger(x) -> Eat(x, y))\nTEXT: If something sees the tiger then the tiger does not eat the lion.\nFOL: all x y. (Something(x) -> See(x, y) & Tiger(x) -> Eat(x, y))\nTEXT: If something is rough then it is red.\nFOL: all x. (Something(x) -> Rough(x) & Red(x))\nTEXT: If something chases the lion then the lion eats the tiger.\nFOL: all x y. (Something(x) -> ChasesLion(x) & Lion(x) -> Eat(x, y))\nTEXT: If something sees the tiger then the tiger sees the lion.\nFOL: all x y. (Something(x) -> See(x, y) & Tiger(x) -> See(x, y))\nTEXT: If something eats the lion then the lion chases the tiger.\nFOL: all x y. (Something(x) -> Eat(x, y) & Lion(x) -> ChasesLion(x))\nTEXT: If the lion is not rough then the lion is not kind.\nFOL: all x. (Lion(x) -> NotRough(x) & Lion(x) -> NotKind(x))\nTEXT: The tiger does not eat the lion.\nFOL: -Eat(tiger) & -Lion(lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The lion is rough.\nFOL: all x. (Lion(x) -> Rough(x))\nTEXT: The tiger chases the lion.\nFOL: all x. (Tiger(x) -> ChasesLion(x))\nTEXT: If the lion eats the tiger and the lion sees the tiger then the tiger is kind.\nFOL: all x y. (Lion(x) & Tiger(x) & Eat(x, y) & See(x, y) -> Kind(x, y))\nTEXT: If something eats the tiger then the tiger eats the lion.\nFOL: all x y. (Something(x) -> Eat(x, y) & Tiger(x) -> Eat(x, y))\nTEXT: If something sees the tiger then the tiger does not eat the lion.\nFOL: all x y. (Something(x) -> See(x, y) & Tiger(x) -> Eat(x, y))\nTEXT: If something is rough then it is red.\nFOL: all x. (Something(x) -> Rough(x) & Red(x))\nTEXT: If something chases the lion then the lion eats the tiger.\nFOL: all x y. (Something(x) -> ChasesLion(x) & Lion(x) -> Eat(x, y))\nTEXT: If something sees the tiger then the tiger sees the lion.\nFOL: all x y. (Something(x) -> See(x, y) & Tiger(x) -> See(x, y))\nTEXT: If something eats the lion then the lion chases the tiger.\nFOL: all x y. (Something(x) -> Eat(x, y) & Lion(x) -> ChasesLion(x))\nTEXT: If the lion is not rough then the lion is not kind.\nFOL: all x. (Lion(x) -> NotRough(x) & Lion(x) -> NotKind(x))\nTEXT: The tiger does not eat the lion.\nFOL: -Eats(x, y) & Lion(x) & NotEat(x, y)\n</EVALUATE>"
  ]
 },
 {
  "index": 81,
  "responses": [
   "<EVALUATE>\nTEXT: Erin is furry.\nFOL: all x. (Furry(x) -> Erin(x))\nTEXT: Erin is smart.\nFOL: all x. (Smart(x) -> Erin(x))\nTEXT: Fiona is green.\nFOL: all x. (Green(x) -> Fiona(x))\nTEXT: If something is kind then it is nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: If something is furry and white then it is rough.\nFOL: all x. (Furry(x) & White(x) -> Rough(x))\nTEXT: If something is kind and rough then it is nice.\nFOL: all x. (Kind(x) & Rough(x) -> Nice(x))\nTEXT: All nice things are white.\nFOL: all x. (Nice(x) -> White(x))\nTEXT: If Erin is smart then Erin is nice.\nFOL: all x. (Smart(x) -> Nice(x))\nTEXT: If something is green then it is rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: Erin is not rough.\nFOL: -Rough(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is furry.\nFOL: all x. (Furry(x) -> -Erin(x))\nTEXT: Erin is smart.\nFOL: all x. (Smart(x) -> -Erin(x))\nTEXT: Fiona is green.\nFOL: all x. (Green(x) -> -Fiona(x))\nTEXT: If something is kind then it is nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: If something is furry and white then it is rough.\nFOL: all x. (Furry(x) & White(x) -> Rough(x))\nTEXT: If something is kind and rough then it is nice.\nFOL: all x. (Kind(x) & Rough(x) -> Nice(x))\nTEXT: All nice things are white.\nFOL: all x. (Nice(x) -> White(x))\nTEXT: If Erin is smart then Erin is nice.\nFOL: all x. (Smart(x) -> Nice(x))\nTEXT: If something is green then it is rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: Erin is not rough.\nFOL: -Erin(x) & -Rough(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is furry.\nFOL: all x. (Furry(x) -> Erin(x))\nTEXT: Erin is smart.\nFOL: all x. (Smart(x) -> Erin(x))\nTEXT: Fiona is green.\nFOL: all x. (Green(x) -> Fiona(x))\nTEXT: If something is kind then it is nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: If something is furry and white then it is rough.\nFOL: all x. (Furry(x) & White(x) -> Rough(x))\nTEXT: If something is kind and rough then it is nice.\nFOL: all x. (Kind(x) & Rough(x) -> Nice(x))\nTEXT: All nice things are white.\nFOL: all x. (Nice(x) -> White(x))\nTEXT: If Erin is smart then Erin is nice.\nFOL: all x. (Smart(x) -> Nice(x))\nTEXT: If something is green then it is rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: Erin is not rough.\nFOL: -Rough(erin)",
   "<EVALUATE>\nTEXT: Erin is furry.\nFOL: all x. (Furry(x) -> -Erin(x))\nTEXT: Erin is smart.\nFOL: all x. (Smart(x) -> -Erin(x))\nTEXT: Fiona is green.\nFOL: all x. (Green(x) -> -Fiona(x))\nTEXT: If something is kind then it is nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: If something is furry and white then it is rough.\nFOL: all x. (Furry(x) & White(x) -> Rough(x))\nTEXT: If something is kind and rough then it is nice.\nFOL: all x. (Kind(x) & Rough(x) -> Nice(x))\nTEXT: All nice things are white.\nFOL: all x. (Nice(x) -> White(x))\nTEXT: If Erin is smart then Erin is nice.\nFOL: all x. (Smart(x) -> Nice(x))\nTEXT: If something is green then it is rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: Erin is not rough.\nFOL: -Rough(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is furry.\nFOL: all x. (Furry(x) -> -Erin(x))\nTEXT: Erin is smart.\nFOL: all x. (Smart(x) -> -Erin(x))\nTEXT: Fiona is green.\nFOL: all x. (Green(x) -> -Fiona(x))\nTEXT: If something is kind then it is nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: If something is furry and white then it is rough.\nFOL: all x. (Furry(x) & White(x) -> Rough(x))\nTEXT: If something is kind and rough then it is nice.\nFOL: all x. (Kind(x) & Rough(x) -> Nice(x))\nTEXT: All nice things are white.\nFOL: all x. (Nice(x) -> -White(x))\nTEXT: If Erin is smart then Erin is nice.\nFOL: all x. (Smart(x) -> Nice(x))\nTEXT: If something is green then it is rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: Erin is not rough.\nFOL: -Erin(x) & -Rough(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 82,
  "responses": [
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: all x. (Alan(x) -> Round(x))\nTEXT: Dave is kind and nice and looks green.\nFOL: all x. (Dave(x) -> Kind(x) & Nice(x) & LookGreen(x))\nTEXT: Even though Eric is round and big, he is very kind.\nFOL: all x. (Eric(x) -> Round(x) & Big(x) & Kind(x))\nTEXT: When Harry walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: all x. (Harry(x) -> Nice(x) & Kind(x) & -Blue(x) & -Red(x))\nTEXT: A green person that is red and blue are known for their rough skin.\nFOL: all x. (Green(x) & Red(x) & Blue(x) & -Rough(x))\nTEXT: Young people who are both nice and cold also tend to be rough.\nFOL: all x. (Young(x) & Nice(x) & Cold(x) & -Rough(x))\nTEXT: Nice people who feel blue often look green when ill.\nFOL: all x. (Nice(x) & FeelBlue(x) & LookGreen(x) & -Ill(x))\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) & -Red(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & Cold(x) & -Blue(x))\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: all x. (Green(x) & Nice(x) & -Rough(x) & Round(x))\nTEXT: Harry is not big.\nFOL: -Big(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: all x. (Alan(x) -> Round(x))\nTEXT: Dave is kind and nice and looks green.\nFOL: all x. (Dave(x) -> Kind(x) & Nice(x) & LookGreen(x))\nTEXT: Even though Eric is round and big, he is very kind.\nFOL: all x. (Eric(x) -> Round(x) & Big(x) & Kind(x))\nTEXT: When Harry walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: all x. (Harry(x) -> Nice(x) & Kind(x) & -Blue(x) & -Red(x))\nTEXT: A green person that is red and blue are known for their rough skin.\nFOL: all x. (Green(x) & Red(x) & Blue(x) & -Rough(x))\nTEXT: Young people who are both nice and cold also tend to be rough.\nFOL: all x. (Young(x) & Nice(x) & Cold(x) & -Rough(x))\nTEXT: Nice people who feel blue often look green when ill.\nFOL: all x. (Nice(x) & FeelBlue(x) & LookGreen(x) & -Ill(x))\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) & -Red(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & Cold(x) & -Blue(x))\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: all x. (Green(x) & Nice(x) & -Rough(x) & -Round(x))\nTEXT: Harry is not big.\nFOL: -Big(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: all x. (Alan(x) -> Round(x))\nTEXT: Dave is kind and nice and looks green.\nFOL: all x. (Dave(x) -> Kind(x) & Nice(x) & LookGreen(x))\nTEXT: Even though Eric is round and big, he is very kind.\nFOL: all x. (Eric(x) -> Round(x) & Big(x) & Kind(x))\nTEXT: When Harry walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: all x. (Harry(x) -> Nice(x) & Kind(x) & -Blue(x) & -Red(x))\nTEXT: A green person that is red and blue are known for their rough skin.\nFOL: all x. (Green(x) & Red(x) & Blue(x) & -Rough(x))\nTEXT: Young people who are both nice and cold also tend to be rough.\nFOL: all x. (Young(x) & Nice(x) & Cold(x) & -Rough(x))\nTEXT: Nice people who feel blue often look green when ill.\nFOL: all x. (Nice(x) & FeelBlue(x) & LookGreen(x) & -Ill(x))\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) & -Red(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & Cold(x) & -Blue(x))\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: all x. (Green(x) & Nice(x) & Rough(x) & -Round(x))\nTEXT: Harry is not big.\nFOL: -Big(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: all x. (Alan(x) -> Round(x))\nTEXT: Dave is kind and nice and looks green.\nFOL: all x. (Dave(x) -> Kind(x) & Nice(x) & LookGreen(x))\nTEXT: Even though Eric is round and big, he is very kind.\nFOL: all x. (Eric(x) -> Round(x) & Big(x) & Kind(x))\nTEXT: When Harry walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: all x. (Harry(x) -> Nice(x) & Kind(x) & -Blue(x) & -Red(x))\nTEXT: A green person that is red and blue are known for their rough skin.\nFOL: all x. (Green(x) & Red(x) & Blue(x) & -Rough(x))\nTEXT: Young people who are both nice and cold also tend to be rough.\nFOL: all x. (Young(x) & Nice(x) & Cold(x) & -Rough(x))\nTEXT: Nice people who feel blue often look green when ill.\nFOL: all x. (Nice(x) & FeelBlue(x) & LookGreen(x) & -Ill(x))\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) & -Red(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & -Cold(x) & -Blue(x))\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: all x. (Green(x) & Nice(x) & -Rough(x) & Round(x))\nTEXT: Harry is not big.\nFOL: -Big(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: all x. (Alan(x) -> Round(x))\nTEXT: Dave is kind and nice and looks green.\nFOL: all x. (Dave(x) -> Kind(x) & Nice(x) & LookGreen(x))\nTEXT: Even though Eric is round and big, he is very kind.\nFOL: all x. (Eric(x) -> Round(x) & Big(x) & Kind(x))\nTEXT: When Harry walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: all x. (Harry(x) -> Nice(x) & Kind(x) & -Blue(x) & -Red(x))\nTEXT: A green person that is red and blue are known for their rough skin.\nFOL: all x. (Green(x) & Red(x) & Blue(x) & -Rough(x))\nTEXT: Young people who are both nice and cold also tend to be rough.\nFOL: all x. (Young(x) & Nice(x) & Cold(x) & -Rough(x))\nTEXT: Nice people who feel blue often look green when ill.\nFOL: all x. (Nice(x) & FeelBlue(x) & LookGreen(x) & -Ill(x))\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) & -Red(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & Cold(x) & -Blue(x))\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: all x. (Green(x) & Nice(x) & -Rough(x) & Round(x))\nTEXT: Harry is not big.\nFOL: -Big(harry)"
  ]
 },
 {
  "index": 83,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> -Cold(x))\nTEXT: The bald eagle is rough.\nFOL: all x. (BaldEagle(x) -> -Rough(x))\nTEXT: The bald eagle likes the bear.\nFOL: all x. (BaldEagle(x) & Bear(x) -> Like(x, bear(x)))\nTEXT: The bald eagle likes the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> Like(x, tiger(x)))\nTEXT: The bald eagle visits the bear.\nFOL: all x. (BaldEagle(x) & Bear(x) -> Visit(x, bear(x)))\nTEXT: The bald eagle visits the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> Visit(x, tiger(x)))\nTEXT: The bear eats the bald eagle.\nFOL: all x. (Bear(x) & BaldEagle(x) -> Eat(x, baldEagle(x)))\nTEXT: The bear is big.\nFOL: all x. (Bear(x) -> -Big(x))\nTEXT: The bear is cold.\nFOL: all x. (Bear(x) -> -Cold(x))\nTEXT: The bear is not young.\nFOL: all x. (Bear(x) -> -Young(x))\nTEXT: The bear likes the bald eagle.\nFOL: all x. (Bear(x) & BaldEagle(x) -> Like(x, baldEagle(x)))\nTEXT: The bear likes the tiger.\nFOL: all x. (Bear(x) & Tiger(x) -> Like(x, tiger(x)))\nTEXT: The bear visits the bald eagle.\nFOL: all x. (Bear(x) & BaldEagle(x) -> Visit(x, baldEagle(x)))\nTEXT: The bear visits the tiger.\nFOL: all x. (Bear(x) & Tiger(x) -> Visit(x, tiger(x)))\nTEXT: The tiger eats the bear.\nFOL: all x. (Tiger(x) & Bear(x) -> Eat(x, bear(x)))\nTEXT: If someone eats the tiger then the tiger does not visit the bald eagle.\nFOL: all x. (Someone(x) & Tiger(x) -> -Visit(x, baldEagle(x)))\nTEXT: If the bear visits the bald eagle and the bear is cold then the bald eagle is big.\nFOL: all x. (Bear(x) & BaldEagle(x) & -Cold(x) -> Big(x, baldEagle(x)))\nTEXT: If someone likes the bear and they are big then they eat the tiger.\nFOL: all x. (Someone(x) & Bear(x) & -Big(x) -> Eat(x, tiger(x)))\nTEXT: If the tiger visits the bald eagle and the bear does not visit the tiger then the bald eagle is cold.\nFOL: all x. (Tiger(x) & BaldEagle(x) & -Bear(x) -> -Cold(x))\nTEXT: If someone visits the bald eagle and they are rough then the bald eagle is not cold.\nFOL: all x. (Someone(x) & BaldEagle(x) & -Rough(x) -> -Cold(x))\nTEXT: If the bald eagle eats the tiger and the tiger is young then the bald eagle visits the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) & -Young(x) -> Visit(x, tiger(x)))\nTEXT: The bear visits the tiger.\nFOL: all x. (Bear(x) & Tiger(x) -> Visit(x, tiger(x)))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> -Cold(x))\nTEXT: The bald eagle is rough.\nFOL: all x. (BaldEagle(x) -> -Rough(x))\nTEXT: The bald eagle likes the bear.\nFOL: all x. (BaldEagle(x) & Bear(x) -> Like(x, bear(x)))\nTEXT: The bald eagle likes the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> Like(x, tiger(x)))\nTEXT: The bald eagle visits the bear.\nFOL: all x. (BaldEagle(x) & Bear(x) -> Visit(x, bear(x)))\nTEXT: The bald eagle visits the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> Visit(x, tiger(x)))\nTEXT: The bear eats the bald eagle.\nFOL: all x. (Bear(x) & BaldEagle(x) -> Eat(x, baldEagle(x)))\nTEXT: The bear is big.\nFOL: all x. (Bear(x) -> -Big(x))\nTEXT: The bear is cold.\nFOL: all x. (Bear(x) -> -Cold(x))\nTEXT: The bear is not young.\nFOL: all x. (Bear(x) -> -Young(x))\nTEXT: The bear likes the bald eagle.\nFOL: all x. (Bear(x) & BaldEagle(x) -> Like(x, baldEagle(x)))\nTEXT: The bear likes the tiger.\nFOL: all x. (Bear(x) & Tiger(x) -> Like(x, tiger(x)))\nTEXT: The bear visits the bald eagle.\nFOL: all x. (Bear(x) & BaldEagle(x) -> Visit(x, baldEagle(x)))\nTEXT: The bear visits the tiger.\nFOL: all x. (Bear(x) & Tiger(x) -> Visit(x, tiger(x)))\nTEXT: The tiger eats the bear.\nFOL: all x. (Tiger(x) & Bear(x) -> Eat(x, bear(x)))\nTEXT: If someone eats the tiger then the tiger does not visit the bald eagle.\nFOL: all x. (Someone(x) & Tiger(x) -> -Visit(x, baldEagle(x)))\nTEXT: If the bear visits the bald eagle and the bear is cold then the bald eagle is big.\nFOL: all x. (Bear(x) & BaldEagle(x) & -Cold(x) -> -Big(x))\nTEXT: If someone likes the bear and they are big then they eat the tiger.\nFOL: all x. (Someone(x) & Bear(x) & -Big(x) -> Eat(x, tiger(x)))\nTEXT: If the tiger visits the bald eagle and the bear does not visit the tiger then the bald eagle is cold.\nFOL: all x. (Tiger(x) & BaldEagle(x) & -Bear(x) -> -Cold(x))\nTEXT: If someone visits the bald eagle and they are rough then the bald eagle is not cold.\nFOL: all x. (Someone(x) & BaldEagle(x) & -Rough(x) -> -Cold(x))\nTEXT: If the bald eagle eats the tiger and the tiger is young then the bald eagle visits the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) & -Young(x) -> -Visit(x, tiger(x)))\nTEXT: The bear visits the tiger.\nFOL: all x. (Bear(x) & Tiger(x) -> Visit(x, tiger(x)))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> -Cold(x))\nTEXT: The bald eagle is rough.\nFOL: all x. (BaldEagle(x) -> -Rough(x))\nTEXT: The bald eagle likes the bear.\nFOL: all x. (BaldEagle(x) & Bear(x) -> Like(x, bear(x)))\nTEXT: The bald eagle likes the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> Like(x, tiger(x)))\nTEXT: The bald eagle visits the bear.\nFOL: all x. (BaldEagle(x) & Bear(x) -> Visit(x, bear(x)))\nTEXT: The bald eagle visits the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> Visit(x, tiger(x)))\nTEXT: The bear eats the bald eagle.\nFOL: all x. (Bear(x) & BaldEagle(x) -> Eat(x, baldEagle(x)))\nTEXT: The bear is big.\nFOL: all x. (Bear(x) -> -Big(x))\nTEXT: The bear is cold.\nFOL: all x. (Bear(x) -> -Cold(x))\nTEXT: The bear is not young.\nFOL: all x. (Bear(x) -> -Young(x))\nTEXT: The bear likes the bald eagle.\nFOL: all x. (Bear(x) & BaldEagle(x) -> Like(x, baldEagle(x)))\nTEXT: The bear likes the tiger.\nFOL: all x. (Bear(x) & Tiger(x) -> Like(x, tiger(x)))\nTEXT: The bear visits the bald eagle.\nFOL: all x. (Bear(x) & BaldEagle(x) -> Visit(x, baldEagle(x)))\nTEXT: The bear visits the tiger.\nFOL: all x. (Bear(x) & Tiger(x) -> Visit(x, tiger(x)))\nTEXT: The tiger eats the bear.\nFOL: all x. (Tiger(x) & Bear(x) -> Eat(x, bear(x)))\nTEXT: If someone eats the tiger then the tiger does not visit the bald eagle.\nFOL: all x. (Someone(x) & Tiger(x) -> -Visit(x, baldEagle(x)))\nTEXT: If the bear visits the bald eagle and the bear is cold then the bald eagle is big.\nFOL: all x. (Bear(x) & BaldEagle(x) & -Cold(x) -> Big(x, baldEagle(x)))\nTEXT: If someone likes the bear and they are big then they eat the tiger.\nFOL: all x. (Someone(x) & Bear(x) & -Big(x) -> Eat(x, tiger(x)))\nTEXT: If the tiger visits the bald eagle and the bear does not visit the tiger then the bald eagle is cold.\nFOL: all x. (Tiger(x) & BaldEagle(x) & -Bear(x) -> -Cold(x))\nTEXT: If someone visits the bald eagle and they are rough then the bald eagle is not cold.\nFOL: all x. (Someone(x) & BaldEagle(x) & -Rough(x) -> -Cold(x))\nTEXT: If the bald eagle eats the tiger and the tiger is young then the bald eagle visits the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) & -Young(x) -> Visit(x, tiger(x)))\nTEXT: The bear visits the tiger.\nFOL: Bear(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> -Cold(x))\nTEXT: The bald eagle is rough.\nFOL: all x. (BaldEagle(x) -> -Rough(x))\nTEXT: The bald eagle likes the bear.\nFOL: all x. (BaldEagle(x) & Bear(x) -> Like(x, bear(x)))\nTEXT: The bald eagle likes the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> Like(x, tiger(x)))\nTEXT: The bald eagle visits the bear.\nFOL: all x. (BaldEagle(x) & Bear(x) -> Visit(x, bear(x)))\nTEXT: The bald eagle visits the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> Visit(x, tiger(x)))\nTEXT: The bear eats the bald eagle.\nFOL: all x. (Bear(x) & BaldEagle(x) -> Eat(x, baldEagle(x)))\nTEXT: The bear is big.\nFOL: all x. (Bear(x) -> -Big(x))\nTEXT: The bear is cold.\nFOL: all x. (Bear(x) -> -Cold(x))\nTEXT: The bear is not young.\nFOL: all x. (Bear(x) -> -Young(x))\nTEXT: The bear likes the bald eagle.\nFOL: all x. (Bear(x) & BaldEagle(x) -> Like(x, baldEagle(x)))\nTEXT: The bear likes the tiger.\nFOL: all x. (Bear(x) & Tiger(x) -> Like(x, tiger(x)))\nTEXT: The bear visits the bald eagle.\nFOL: all x. (Bear(x) & BaldEagle(x) -> Visit(x, baldEagle(x)))\nTEXT: The bear visits the tiger.\nFOL: all x. (Bear(x) & Tiger(x) -> Visit(x, tiger(x)))\nTEXT: The tiger eats the bear.\nFOL: all x. (Tiger(x) & Bear(x) -> Eat(x, bear(x)))\nTEXT: If someone eats the tiger then the tiger does not visit the bald eagle.\nFOL: all x. (Someone(x) & Tiger(x) -> -Visit(x, baldEagle(x)))\nTEXT: If the bear visits the bald eagle and the bear is cold then the bald eagle is big.\nFOL: all x. (Bear(x) & BaldEagle(x) & -Cold(x) -> -Big(x))\nTEXT: If someone likes the bear and they are big then they eat the tiger.\nFOL: all x. (Someone(x) & Bear(x) & -Big(x) -> Eat(x, tiger(x)))\nTEXT: If the tiger visits the bald eagle and the bear does not visit the tiger then the bald eagle is cold.\nFOL: all x. (Tiger(x) & BaldEagle(x) & -Bear(x) -> -Cold(x))\nTEXT: If someone visits the bald eagle and they are rough then the bald eagle is not cold.\nFOL: all x. (Someone(x) & BaldEagle(x) & -Rough(x) -> -Cold(x))\nTEXT: If the bald eagle eats the tiger and the tiger is young then the bald eagle visits the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) & -Young(x) -> Visit(x, tiger(x)))\nTEXT: The bear visits the tiger.\nFOL: all x. (Bear(x) & Tiger(x) -> Visit(x, tiger(x)))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> -Cold(x))\nTEXT: The bald eagle is rough.\nFOL: all x. (BaldEagle(x) -> -Rough(x))\nTEXT: The bald eagle likes the bear.\nFOL: all x. (BaldEagle(x) & Bear(x) -> Like(x, bear(x)))\nTEXT: The bald eagle likes the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> Like(x, tiger(x)))\nTEXT: The bald eagle visits the bear.\nFOL: all x. (BaldEagle(x) & Bear(x) -> Visit(x, bear(x)))\nTEXT: The bald eagle visits the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> Visit(x, tiger(x)))\nTEXT: The bear eats the bald eagle.\nFOL: all x. (Bear(x) & BaldEagle(x) -> Eat(x, baldEagle(x)))\nTEXT: The bear is big.\nFOL: all x. (Bear(x) -> -Big(x))\nTEXT: The bear is cold.\nFOL: all x. (Bear(x) -> -Cold(x))\nTEXT: The bear is not young.\nFOL: all x. (Bear(x) -> -Young(x))\nTEXT: The bear likes the bald eagle.\nFOL: all x. (Bear(x) & BaldEagle(x) -> Like(x, baldEagle(x)))\nTEXT: The bear likes the tiger.\nFOL: all x. (Bear(x) & Tiger(x) -> Like(x, tiger(x)))\nTEXT: The bear visits the bald eagle.\nFOL: all x. (Bear(x) & BaldEagle(x) -> Visit(x, baldEagle(x)))\nTEXT: The bear visits the tiger.\nFOL: all x. (Bear(x) & Tiger(x) -> Visit(x, tiger(x)))\nTEXT: The tiger eats the bear.\nFOL: all x. (Tiger(x) & Bear(x) -> Eat(x, bear(x)))\nTEXT: If someone eats the tiger then the tiger does not visit the bald eagle.\nFOL: all x. (Someone(x) & Tiger(x) -> -Visit(x, baldEagle(x)))\nTEXT: If the bear visits the bald eagle and the bear is cold then the bald eagle is big.\nFOL: all x. (Bear(x) & BaldEagle(x) & -Cold(x) -> -Big(x))\nTEXT: If someone likes the bear and they are big then they eat the tiger.\nFOL: all x. (Someone(x) & Bear(x) & -Big(x) -> Eat(x, tiger(x)))\nTEXT: If the tiger visits the bald eagle and the bear does not visit the tiger then the bald eagle is cold.\nFOL: all x. (Tiger(x) & BaldEagle(x) & -Bear(x) -> -Cold(x))\nTEXT: If someone visits the bald eagle and they are rough then the bald eagle is not cold.\nFOL: all x. (Someone(x) & BaldEagle(x) & -Rough(x) -> -Cold(x))\nTEXT: If the bald eagle eats the tiger and the tiger is young then the bald eagle visits the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) & -Young(x) -> -Visit(x, tiger(x)))\nTEXT: The bear visits the tiger.\nFOL: Bear(tiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 84,
  "responses": [
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: all x. (Bear(x) -> Nice(x))\nTEXT: The mouse needs the tiger.\nFOL: all x. (Mouse(x) -> Tiger(x) & Need(x))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) -> Kind(x))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) -> Green(x))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x y. (Need(x) & Tiger(x) -> Eat(x))\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x y. (Green(x) & Chases(x) & Rabbit(x) -> Tiger(x))\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x y. (Nice(x) & Chases(x) & Rabbit(x) -> Eat(x))\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x y. (Chases(x) & Bear(x) -> Eat(x))\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x y. (Chases(x) & Bear(x) -> Chases(x))\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: all x y. (Bear(x) & Rough(x) & Need(x) & Rabbit(x) -> Green(x))\nTEXT: If something is kind then it needs the mouse.\nFOL: all x y. (Kind(x) & Need(x) & Mouse(x))\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x y. (Eat(x) & Tiger(x) -> Chases(x))\nTEXT: The tiger chases the tiger.\nFOL: Tiger(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: all x. (Bear(x) -> Nice(x))\nTEXT: The mouse needs the tiger.\nFOL: all x. (Mouse(x) -> Tiger(x) & Need(x))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) -> Kind(x))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) -> Green(x))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x y. (Need(x) & Tiger(x) -> Eat(x))\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x y. (Green(x) & Chases(x) & Rabbit(x) -> Chases(x))\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x y. (Nice(x) & Chases(x) & Rabbit(x) -> Eat(x))\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x y. (Chases(x) & Bear(x) -> Eat(x))\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x y. (Chases(x) & Bear(x) -> Chases(x))\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: all x y. (Bear(x) & Rough(x) & Need(x) & Rabbit(x) -> Green(x))\nTEXT: If something is kind then it needs the mouse.\nFOL: all x y. (Kind(x) & Need(x) & Mouse(x))\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x y. (Eat(x) & Tiger(x) -> Chases(x))\nTEXT: The tiger chases the tiger.\nFOL: Tiger(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: all x. (Bear(x) -> Nice(x))\nTEXT: The mouse needs the tiger.\nFOL: all x. (Mouse(x) -> Tiger(x) & Need(x))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) -> Kind(x))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) -> Green(x))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x y. (Need(x) & Tiger(x) -> Eat(x))\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x y. (Green(x) & Chases(x) & Rabbit(x) -> Chases(x))\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x y. (Nice(x) & Chases(x) & Rabbit(x) -> Eat(x))\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x y. (Chases(x) & Bear(x) -> Eat(x))\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x y. (Chases(x) & Bear(x) -> Chases(x))\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: all x y. (Bear(x) & Need(x) & Rabbit(x) -> Green(x))\nTEXT: If something is kind then it needs the mouse.\nFOL: all x y. (Kind(x) & Need(x) & Mouse(x))\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x y. (Eat(x) & Tiger(x) -> Chases(x))\nTEXT: The tiger chases the tiger.\nFOL: Tiger(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: all x. (Bear(x) -> Nice(x))\nTEXT: The mouse needs the tiger.\nFOL: all x. (Mouse(x) -> Tiger(x) & Need(x))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) -> Kind(x))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) -> Green(x))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x y. (Need(x) & Tiger(x) -> Eat(x))\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x y. (Green(x) & Chases(x) & Rabbit(x) -> Tiger(x))\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x y. (Nice(x) & Chases(x) & Rabbit(x) -> Eat(x))\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x y. (Chases(x) & Bear(x) -> Eat(x))\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x y. (Chases(x) & Bear(x) -> Chases(x))\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: all x y. (Rough(x) & Bear(x) & Need(x) & Rabbit(x) -> Green(x))\nTEXT: If something is kind then it needs the mouse.\nFOL: all x y. (Kind(x) & Need(x) & Mouse(x))\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x y. (Eat(x) & Tiger(x) -> Chases(x))\nTEXT: The tiger chases the tiger.\nFOL: Tiger(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: all x. (Bear(x) -> Nice(x))\nTEXT: The mouse needs the tiger.\nFOL: all x. (Mouse(x) -> Tiger(x) & Need(x))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) -> Kind(x))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) -> Green(x))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x y. (Need(x) & Tiger(x) -> Eat(x))\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x y. (Green(x) & Chases(x) & Rabbit(x) -> Chases(x))\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x y. (Nice(x) & Chases(x) & Rabbit(x) -> Eat(x))\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x y. (Chases(x) & Bear(x) -> Eat(x))\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x y. (Chases(x) & Bear(x) -> Chases(x))\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: all x y. (Bear(x) & Rough(x) & Need(x) & Rabbit(x) -> Green(x))\nTEXT: If something is kind then it needs the mouse.\nFOL: all x y. (Kind(x) & Need(x) & Mouse(x))\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x y. (Eat(x) & Tiger(x) -> Chases(x))\nTEXT: The tiger chases the tiger.\nFOL: Tiger(x) & Tiger(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 85,
  "responses": [
   "<EVALUATE>\nTEXT: Erin is blue.\nFOL: all x. (Erin(x) -> Blue(x))\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: -Erin(x) -> -Red(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: -Erin(x) -> -Red(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: -Erin(x) -> -Red(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: -Erin(x) -> -Red(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: -Erin(x) -> -Red(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big",
   "<EVALUATE>\nTEXT: Erin is blue.\nFOL: all x. (Erin(x) -> Blue(x))\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: not Erin(x) & Red(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: not Erin(x) & Red(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: not Erin(x) & Red(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: not Erin(x) & Red(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: not Erin(x) & Red(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x",
   "<EVALUATE>\nTEXT: Erin is blue.\nFOL: all x. (Erin(x) -> Blue(x))\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: not Erin(x) & Red(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: not Erin(x) & Red(x)\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: not Erin(x) & Red(x)\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: not Erin(x) & Red(x)\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: not Erin(x) & Red(x)\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: not Erin(x) & Red(x)\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\n",
   "<EVALUATE>\nTEXT: Erin is blue.\nFOL: all x. (Erin(x) -> Blue(x))\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: -Erin(x) -> -Red(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Fiona is not red.\nFOL: -Fiona(x) -> -Red(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Gary is not red.\nFOL: -Gary(x) -> -Red(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Harry is not red.\nFOL: -Harry(x) -> -Red(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Fiona is not red.\nFOL: -Fiona(x) -> -Red(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Gary is not red.\nFOL: -Gary(x) -> -Red(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big",
   "<EVALUATE>\nTEXT: Erin is blue.\nFOL: all x. (Erin(x) -> Blue(x))\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: -Erin(x) -> -Red(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: -Erin(x) -> -Red(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: -Erin(x) -> -Red(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: -Erin(x) -> -Red(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> White(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: -Erin(x) -> -Red(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 86,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: all x. (BaldEagle(x) & Eat(x) & Rabbit(x))\nTEXT: The bald eagle is not blue.\nFOL: all x. (BaldEagle(x) & NotBlue(x))\nTEXT: The bald eagle sees the mouse.\nFOL: all x. (BaldEagle(x) & See(x) & Mouse(x))\nTEXT: The bald eagle sees the tiger.\nFOL: all x. (BaldEagle(x) & See(x) & Tiger(x))\nTEXT: The mouse is not kind.\nFOL: all x. (Mouse(x) & NotKind(x))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) & Kind(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) & Round(x))\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) & Blue(x))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) & Green(x))\nTEXT: The tiger sees the rabbit.\nFOL: all x. (Tiger(x) & See(x) & Rabbit(x))\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: all x. (Mouse(x) & Young(x) & Eat(x) & Rabbit(x))\nTEXT: If something is blue then it eats the mouse.\nFOL: all x. (Something(x) & Blue(x) & Eat(x))\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: all x. (Something(x) & Kind(x) & NotYoung(x) & Eat(x))\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: all x. (Something(x) & See(x) & Tiger(x) & Eat(x))\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: all x. (Something(x) & See(x) & Rabbit(x) & NotBlue(x))\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: all x. (Something(x) & Eat(x) & Mouse(x) & Blue(x))\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: all x. (Something(x) & Need(x) & Rabbit(x) & Eat(x) & Tiger(x) & See(x))\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: all x. (Something(x) & Eat(x) & Mouse(x) & Eat(x) & Tiger(x) & NotSee(x))\nTEXT: The bald eagle does not eat the mouse.\nFOL: not all x. (BaldEagle(x) & Eat(x) & Mouse(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: all x. (BaldEagle(x) & Eat(x) & Rabbit(x))\nTEXT: The bald eagle is not blue.\nFOL: all x. (BaldEagle(x) & NotBlue(x))\nTEXT: The bald eagle sees the mouse.\nFOL: all x. (BaldEagle(x) & See(x) & Mouse(x))\nTEXT: The bald eagle sees the tiger.\nFOL: all x. (BaldEagle(x) & See(x) & Tiger(x))\nTEXT: The mouse is not kind.\nFOL: all x. (Mouse(x) & NotKind(x))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) & Kind(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) & Round(x))\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) & Blue(x))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) & Green(x))\nTEXT: The tiger sees the rabbit.\nFOL: all x. (Tiger(x) & See(x) & Rabbit(x))\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: all x. (Mouse(x) & Young(x) & Eat(x) & Rabbit(x))\nTEXT: If something is blue then it eats the mouse.\nFOL: all x. (Something(x) & Blue(x) & Eat(x))\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: all x. (Something(x) & Kind(x) & NotYoung(x) & Eat(x))\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: all x. (Something(x) & See(x) & Tiger(x) & Eat(x))\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: all x. (Something(x) & See(x) & Rabbit(x) & NotBlue(x))\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: all x. (Something(x) & Eat(x) & Mouse(x) & Blue(x))\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: all x. (Something(x) & Need(x) & Rabbit(x) & Eat(x) & Tiger(x) & See(x))\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: all x. (Something(x) & Eat(x) & Mouse(x) & Eat(x) & Tiger(x) & NotSee(x))\nTEXT: The bald eagle does not eat the mouse.\nFOL: -Eat(x) & Mouse(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: all x. (BaldEagle(x) & Eat(x) & Rabbit(x))\nTEXT: The bald eagle is not blue.\nFOL: all x. (BaldEagle(x) & NotBlue(x))\nTEXT: The bald eagle sees the mouse.\nFOL: all x. (BaldEagle(x) & See(x) & Mouse(x))\nTEXT: The bald eagle sees the tiger.\nFOL: all x. (BaldEagle(x) & See(x) & Tiger(x))\nTEXT: The mouse is not kind.\nFOL: all x. (Mouse(x) & NotKind(x))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) & Kind(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) & Round(x))\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) & Blue(x))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) & Green(x))\nTEXT: The tiger sees the rabbit.\nFOL: all x. (Tiger(x) & See(x) & Rabbit(x))\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: all x. (Mouse(x) & Young(x) & Eat(x) & Rabbit(x))\nTEXT: If something is blue then it eats the mouse.\nFOL: all x. (Something(x) & Blue(x) & Eat(x))\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: all x. (Something(x) & Kind(x) & NotYoung(x) & Eat(x))\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: all x. (Something(x) & See(x) & Tiger(x) & Eat(x))\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: all x. (Something(x) & See(x) & Rabbit(x) & NotBlue(x))\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: all x. (Something(x) & Eat(x) & Mouse(x) & Blue(x))\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: all x. (Something(x) & Need(x) & Rabbit(x) & Eat(x) & Tiger(x) & See(x))\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: all x. (Something(x) & Eat(x) & Mouse(x) & Eat(x) & Tiger(x) & NotSee(x))\nTEXT: The bald eagle does not eat the mouse.\nFOL: -Eat(x) & NotEat(x) & Mouse(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: all x. (BaldEagle(x) & Eat(x) & Rabbit(x))\nTEXT: The bald eagle is not blue.\nFOL: all x. (BaldEagle(x) & NotBlue(x))\nTEXT: The bald eagle sees the mouse.\nFOL: all x. (BaldEagle(x) & See(x) & Mouse(x))\nTEXT: The bald eagle sees the tiger.\nFOL: all x. (BaldEagle(x) & See(x) & Tiger(x))\nTEXT: The mouse is not kind.\nFOL: all x. (Mouse(x) & NotKind(x))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) & Kind(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) & Round(x))\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) & Blue(x))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) & Green(x))\nTEXT: The tiger sees the rabbit.\nFOL: all x. (Tiger(x) & See(x) & Rabbit(x))\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: all x. (Mouse(x) & Young(x) & Eat(x) & Rabbit(x))\nTEXT: If something is blue then it eats the mouse.\nFOL: all x. (Something(x) & Blue(x) & Eat(x))\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: all x. (Something(x) & Kind(x) & NotYoung(x) & Eat(x))\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: all x. (Something(x) & See(x) & Tiger(x) & Eat(x))\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: all x. (Something(x) & See(x) & Rabbit(x) & NotBlue(x))\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: all x. (Something(x) & Eat(x) & Mouse(x) & Blue(x))\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: all x. (Something(x) & Need(x) & Rabbit(x) & Eat(x) & Tiger(x) & See(x))\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: all x. (Something(x) & Eat(x) & Mouse(x) & Eat(x) & Tiger(x) & NotSee(x))\nTEXT: The bald eagle does not eat the mouse.\nFOL: not all x. (BaldEagle(x) & Eat(x) & Mouse(x))",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: all x. (BaldEagle(x) & Eat(x) & Rabbit(x))\nTEXT: The bald eagle is not blue.\nFOL: all x. (BaldEagle(x) & NotBlue(x))\nTEXT: The bald eagle sees the mouse.\nFOL: all x. (BaldEagle(x) & See(x) & Mouse(x))\nTEXT: The bald eagle sees the tiger.\nFOL: all x. (BaldEagle(x) & See(x) & Tiger(x))\nTEXT: The mouse is not kind.\nFOL: all x. (Mouse(x) & NotKind(x))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) & Kind(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) & Round(x))\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) & Blue(x))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) & Green(x))\nTEXT: The tiger sees the rabbit.\nFOL: all x. (Tiger(x) & See(x) & Rabbit(x))\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: all x. (Mouse(x) & Young(x) & Eat(x) & Rabbit(x))\nTEXT: If something is blue then it eats the mouse.\nFOL: all x. (Something(x) & Blue(x) & Eat(x))\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: all x. (Something(x) & Kind(x) & NotYoung(x) & Eat(x))\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: all x. (Something(x) & See(x) & Tiger(x) & Eat(x))\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: all x. (Something(x) & See(x) & Rabbit(x) & NotBlue(x))\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: all x. (Something(x) & Eat(x) & Mouse(x) & Blue(x))\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: all x. (Something(x) & Need(x) & Rabbit(x) & Eat(x) & Tiger(x) & See(x) & Rabbit(x))\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: all x. (Something(x) & Eat(x) & Mouse(x) & Eat(x) & Tiger(x) & NotSee(x) & Rabbit(x))\nTEXT: The bald eagle does not eat the mouse.\nFOL: not all x. (BaldEagle(x) & Eat(x) & Mouse(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 87,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Fiona is cold.\nFOL: all x. (Fiona(x) -> -Cold(x))\nTEXT: All rough people are not furry.\nFOL: all x. (Rough(x) -> -Furry(x))\nTEXT: If someone is big then they are not furry.\nFOL: all x. (Big(x) -> -Furry(x))\nTEXT: If Fiona is smart then Fiona is furry.\nFOL: all x. (Smart(x) -> -Furry(x))\nTEXT: All furry people are cold.\nFOL: all x. (Furry(x) -> -Cold(x))\nTEXT: If someone is cold then they are smart.\nFOL: all x. (Cold(x) -> -Smart(x))\nTEXT: If someone is furry and smart then they are not green.\nFOL: all x. ((Furry(x) & Smart(x)) -> -Green(x))\nTEXT: Smart, big people are white.\nFOL: Smart(x) & Big(x) -> White(x)\nTEXT: If Dave is rough and Dave is not furry then Dave is not smart.\nFOL: -Rough(x) & -Furry(x) -> -Smart(x)\nTEXT: Dave is green.\nFOL: Dave(x) -> Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Fiona is cold.\nFOL: all x. (Fiona(x) -> -Cold(x))\nTEXT: All rough people are not furry.\nFOL: all x. (Rough(x) -> -Furry(x))\nTEXT: If someone is big then they are not furry.\nFOL: all x. (Big(x) -> -Furry(x))\nTEXT: If Fiona is smart then Fiona is furry.\nFOL: all x. (Smart(x) -> -Furry(x))\nTEXT: All furry people are cold.\nFOL: all x. (Furry(x) -> -Cold(x))\nTEXT: If someone is cold then they are smart.\nFOL: all x. (Cold(x) -> -Smart(x))\nTEXT: If someone is furry and smart then they are not green.\nFOL: all x. ((Furry(x) & Smart(x)) -> -Green(x))\nTEXT: Smart, big people are white.\nFOL: (Big(x) & Smart(x)) -> White(x)\nTEXT: If Dave is rough and Dave is not furry then Dave is not smart.\nFOL: -Rough(x) & -Furry(x) -> -Smart(x)\nTEXT: Dave is green.\nFOL: Dave(x) -> Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Fiona is cold.\nFOL: all x. (Fiona(x) -> -Cold(x))\nTEXT: All rough people are not furry.\nFOL: all x. (Rough(x) -> -Furry(x))\nTEXT: If someone is big then they are not furry.\nFOL: all x. (Big(x) -> -Furry(x))\nTEXT: If Fiona is smart then Fiona is furry.\nFOL: all x. (Smart(x) -> -Furry(x))\nTEXT: All furry people are cold.\nFOL: all x. (Furry(x) -> -Cold(x))\nTEXT: If someone is cold then they are smart.\nFOL: all x. (Cold(x) -> -Smart(x))\nTEXT: If someone is furry and smart then they are not green.\nFOL: all x. ((Furry(x) & Smart(x)) -> -Green(x))\nTEXT: Smart, big people are white.\nFOL: Smart(x) & Big(x) -> White(x)\nTEXT: If Dave is rough and Dave is not furry then Dave is not smart.\nFOL: -Rough(x) & -Furry(x) -> -Smart(x)\nTEXT: Dave is green.\nFOL: Dave(x) -> Green(x)",
   "<EVALUATE>\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Fiona is cold.\nFOL: all x. (Fiona(x) -> -Cold(x))\nTEXT: All rough people are not furry.\nFOL: all x. (Rough(x) -> -Furry(x))\nTEXT: If someone is big then they are not furry.\nFOL: all x. (Big(x) -> -Furry(x))\nTEXT: If Fiona is smart then Fiona is furry.\nFOL: all x. (Smart(x) -> -Furry(x))\nTEXT: All furry people are cold.\nFOL: all x. (Furry(x) -> -Cold(x))\nTEXT: If someone is cold then they are smart.\nFOL: all x. (Cold(x) -> -Smart(x))\nTEXT: If someone is furry and smart then they are not green.\nFOL: all x. ((Furry(x) & Smart(x)) -> -Green(x))\nTEXT: Smart, big people are white.\nFOL: Smart(x) & Big(x) -> White(x)\nTEXT: If Dave is rough and Dave is not furry then Dave is not smart.\nFOL: -Rough(x) & -Furry(x) -> -Smart(x))\nTEXT: Dave is green.\nFOL: Dave(x) -> Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Fiona is cold.\nFOL: all x. (Fiona(x) -> -Cold(x))\nTEXT: All rough people are not furry.\nFOL: all x. (Rough(x) -> -Furry(x))\nTEXT: If someone is big then they are not furry.\nFOL: all x. (Big(x) -> -Furry(x))\nTEXT: If Fiona is smart then Fiona is furry.\nFOL: all x. (Smart(x) -> -Furry(x))\nTEXT: All furry people are cold.\nFOL: all x. (Furry(x) -> -Cold(x))\nTEXT: If someone is cold then they are smart.\nFOL: all x. (Cold(x) -> -Smart(x))\nTEXT: If someone is furry and smart then they are not green.\nFOL: all x. ((Furry(x) & Smart(x)) -> -Green(x))\nTEXT: Smart, big people are white.\nFOL: Smart(x) & Big(x) -> White(x)\nTEXT: If Dave is rough and Dave is not furry then Dave is not smart.\nFOL: -Rough(x) & -Furry(x) & -Smart(x) -> -NotSmart(x)\nTEXT: Dave is green.\nFOL: Dave(x) -> Green(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 88,
  "responses": [
   "<EVALUATE>\n\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\n\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\n\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\n\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\n\nTEXT: If someone is green and smart then they are white.\nFOL: all x y. (Green(x) & Smart(x) -> White(x))\n\nTEXT: All white people are rough.\nFOL: all x. (White(x) -> Rough(x))\n\nTEXT: All smart people are green.\nFOL: all x. (Smart(x) -> Green(x))\n\nTEXT: If Dave is big and Dave is white then Dave is smart.\nFOL: all x y. (Big(x) & White(x) & Smart(x) -> Big(x) & Smart(x))\n\nTEXT: If someone is big and green then they are smart.\nFOL: all x y. (Big(x) & Green(x) -> Smart(x))\n\nTEXT: If someone is nice then they are smart.\nFOL: all x. (Nice(x) -> Smart(x))\n\nTEXT: All green, smart people are nice.\nFOL: all x. (Green(x) & Smart(x) -> Nice(x))\n\nTEXT: If Bob is not smart then Bob is round.\nFOL: all x. (Bob(x) & -Smart(x) -> Round(x))\n\nTEXT: Harry is not nice.\nFOL: -Nice(harry)\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\n\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\n\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\n\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\n\nTEXT: If someone is green and smart then they are white.\nFOL: all x y. (Green(x) & Smart(x) -> White(x))\n\nTEXT: All white people are rough.\nFOL: all x. (White(x) -> Rough(x))\n\nTEXT: All smart people are green.\nFOL: all x. (Smart(x) -> Green(x))\n\nTEXT: If Dave is big and Dave is white then Dave is smart.\nFOL: all x y. (Big(x) & White(x) & Smart(x) -> Big(x) & Smart(x))\n\nTEXT: If someone is big and green then they are smart.\nFOL: all x y. (Big(x) & Green(x) -> Smart(x))\n\nTEXT: If someone is nice then they are smart.\nFOL: all x. (Nice(x) -> Smart(x))\n\nTEXT: All green, smart people are nice.\nFOL: all x y. (Green(x) & Smart(x) -> Nice(x))\n\nTEXT: If Bob is not smart then Bob is round.\nFOL: all x. (Bob(x) & -Smart(x) -> Round(x))\n\nTEXT: Harry is not nice.\nFOL: -Nice(harry)\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\n\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\n\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\n\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\n\nTEXT: If someone is green and smart then they are white.\nFOL: all x y. (Green(x) & Smart(x) -> White(x))\n\nTEXT: All white people are rough.\nFOL: all x. (White(x) -> Rough(x))\n\nTEXT: All smart people are green.\nFOL: all x. (Smart(x) -> Green(x))\n\nTEXT: If Dave is big and Dave is white then Dave is smart.\nFOL: all x y. (Big(x) & White(x) & Smart(x) -> Big(x) & Smart(x))\n\nTEXT: If someone is big and green then they are smart.\nFOL: all x y. (Big(x) & Green(x) -> Smart(x))\n\nTEXT: If someone is nice then they are smart.\nFOL: all x. (Nice(x) -> Smart(x))\n\nTEXT: All green, smart people are nice.\nFOL: all x. (Green(x) & Smart(x) -> Nice(x))\n\nTEXT: If Bob is not smart then Bob is round.\nFOL: all x. (Bob(x) & -Smart(x) -> Round(x))\n\nTEXT: Harry is not nice.\nFOL: -Nice(harry)\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\n\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\n\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\n\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\n\nTEXT: If someone is green and smart then they are white.\nFOL: all x y. (Green(x) & Smart(x) -> White(x))\n\nTEXT: All white people are rough.\nFOL: all x. (White(x) -> Rough(x))\n\nTEXT: All smart people are green.\nFOL: all x. (Smart(x) -> Green(x))\n\nTEXT: If Dave is big and Dave is white then Dave is smart.\nFOL: all x y. (Big(x) & White(x) & Smart(x) -> Big(x) & Smart(x))\n\nTEXT: If someone is big and green then they are smart.\nFOL: all x y. (Big(x) & Green(x) -> Smart(x))\n\nTEXT: If someone is nice then they are smart.\nFOL: all x. (Nice(x) -> Smart(x))\n\nTEXT: All green, smart people are nice.\nFOL: all x. (Green(x) & Smart(x) -> Nice(x))\n\nTEXT: If Bob is not smart then Bob is round.\nFOL: all x. (Bob(x) & -Smart(x) -> Round(x))\n\nTEXT: Harry is not nice.\nFOL: Harry(x) & -Nice(x)\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\n\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\n\nTEXT: Gary is round.\nFOL: all x. (Gary(x) -> Round(x))\n\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\n\nTEXT: If someone is green and smart then they are white.\nFOL: all x y. (Green(x) & Smart(x) -> White(x))\n\nTEXT: All white people are rough.\nFOL: all x. (White(x) -> Rough(x))\n\nTEXT: All smart people are green.\nFOL: all x. (Smart(x) -> Green(x))\n\nTEXT: If Dave is big and Dave is white then Dave is smart.\nFOL: all x y. (Big(x) & White(x) & Smart(x) -> Big(x) & Smart(x))\n\nTEXT: If someone is big and green then they are smart.\nFOL: all x y. (Big(x) & Green(x) -> Smart(x))\n\nTEXT: If someone is nice then they are smart.\nFOL: all x. (Nice(x) -> Smart(x))\n\nTEXT: All green, smart people are nice.\nFOL: all x y. (Green(x) & Smart(x) -> Nice(x))\n\nTEXT: If Bob is not smart then Bob is round.\nFOL: all x. (Bob(x) & -Smart(x) -> Round(x))\n\nTEXT: Harry is not nice.\nFOL: Harry(x) & -Nice(x)\n\n</EVALUATE>"
  ]
 },
 {
  "index": 89,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle chases the cat.\nFOL: all x. (Eagle(x) & Cat(x) -> ChasesCat(x))\nTEXT: The cat sees the cow.\nFOL: all x. (Cat(x) & Cow(x) -> SeeCow(x))\nTEXT: The cow chases the cat.\nFOL: all x. (Cow(x) & ChasesCat(x) -> SeeCow(x))\nTEXT: The mouse chases the bald eagle.\nFOL: all x. (Mouse(x) & BaldEagle(x) -> ChasesBaldEagle(x))\nTEXT: If something visits the mouse then it chases the cat.\nFOL: all x. (Something(x) & Mouse(x) -> ChasesCat(x))\nTEXT: If something chases the cow then the cow sees the mouse.\nFOL: all x. (Something(x) & ChasesCow(x) -> SeeCow(x))\nTEXT: If the mouse chases the bald eagle then the bald eagle chases the cow.\nFOL: all x. ((Mouse(x) & ChasesBaldEagle(x)) -> (BaldEagle(x) & ChasesCow(x)))\nTEXT: The mouse does not chase the cat.\nFOL: -ChasesCat(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the cat.\nFOL: all x. (Eagle(x) & Cat(x) -> Chases(x, cat))\nTEXT: The cat sees the cow.\nFOL: all x. (Cat(x) & Cow(x) -> See(x, cow))\nTEXT: The cow chases the cat.\nFOL: all x. (Cow(x) & Chases(x, cat) -> See(x, cat))\nTEXT: The mouse chases the bald eagle.\nFOL: all x. (Mouse(x) & BaldEagle(x) -> Chases(x, eagle))\nTEXT: If something visits the mouse then it chases the cat.\nFOL: all x. (Something(x) & Mouse(x) -> Chases(x, cat))\nTEXT: If something chases the cow then the cow sees the mouse.\nFOL: all x. (Something(x) & Chases(x, cow) -> See(x, mouse))\nTEXT: If the mouse chases the bald eagle then the bald eagle chases the cow.\nFOL: all x. (Mouse(x) & Chases(x, eagle) -> Chases(x, cow))\nTEXT: The mouse does not chase the cat.\nFOL: not all x. (Mouse(x) & Chases(x, cat) -> Chases(x, cat))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the cat.\nFOL: all x. (Eagle(x) & Cat(x) -> Chases(x, cat))\nTEXT: The cat sees the cow.\nFOL: all x. (Cat(x) & Cow(x) -> See(x, cow))\nTEXT: The cow chases the cat.\nFOL: all x. (Cow(x) & Chases(x, cat) -> See(x, cat))\nTEXT: The mouse chases the bald eagle.\nFOL: all x. (Mouse(x) & BaldEagle(x) -> Chases(x, eagle))\nTEXT: If something visits the mouse then it chases the cat.\nFOL: all x. (Something(x) & Mouse(x) -> Chases(x, cat))\nTEXT: If something chases the cow then the cow sees the mouse.\nFOL: all x. (Something(x) & Chases(x, cow) -> See(x, mouse))\nTEXT: If the mouse chases the bald eagle then the bald eagle chases the cow.\nFOL: all x. ((Mouse(x) & Chases(x, eagle)) -> (BaldEagle(x) & Chases(x, cow)))\nTEXT: The mouse does not chase the cat.\nFOL: -Chases(x, cat) & -Mouse(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the cat.\nFOL: all x. (Eagle(x) & Cat(x) -> Chases(x, cat))\nTEXT: The cat sees the cow.\nFOL: all x. (Cat(x) & Cow(x) -> See(x, cow))\nTEXT: The cow chases the cat.\nFOL: all x. (Cow(x) & Chases(x, cat) -> See(x, cat))\nTEXT: The mouse chases the bald eagle.\nFOL: all x. (Mouse(x) & BaldEagle(x) -> Chases(x, eagle))\nTEXT: If something visits the mouse then it chases the cat.\nFOL: all x. (Something(x) & Mouse(x) -> Chases(x, cat))\nTEXT: If something chases the cow then the cow sees the mouse.\nFOL: all x. (Something(x) & Chases(x, cow) -> See(x, mouse))\nTEXT: If the mouse chases the bald eagle then the bald eagle chases the cow.\nFOL: all x. (Mouse(x) & Chases(x, eagle) -> Chases(x, cow))\nTEXT: The mouse does not chase the cat.\nFOL: -Chases(x, cat) & -Mouse(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the cat.\nFOL: all x. (Eagle(x) & Cat(x) -> Chases(x, cat))\nTEXT: The cat sees the cow.\nFOL: all x. (Cat(x) & Cow(x) -> See(x, cow))\nTEXT: The cow chases the cat.\nFOL: all x. (Cow(x) & Chases(x, cat) -> See(x, cat))\nTEXT: The mouse chases the bald eagle.\nFOL: all x. (Mouse(x) & BaldEagle(x) -> Chases(x, eagle))\nTEXT: If something visits the mouse then it chases the cat.\nFOL: all x. (Something(x) & Mouse(x) -> Chases(x, cat))\nTEXT: If something chases the cow then the cow sees the mouse.\nFOL: all x. (Something(x) & Chases(x, cow) -> See(x, mouse))\nTEXT: If the mouse chases the bald eagle then the bald eagle chases the cow.\nFOL: all x. (Mouse(x) & Chases(x, eagle) -> Chases(x, cow))\nTEXT: The mouse does not chase the cat.\nFOL: not all x. (Mouse(x) & Chases(x, cat) -> -Chases(x, cat))\n</EVALUATE>"
  ]
 },
 {
  "index": 90,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Dave is not green.\nFOL: all x. (Dave(x) -> -Green(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: If someone is round and white then they are green.\nFOL: all x y. (Round(x) & White(x) -> Green(x))\nTEXT: All smart, round people are green.\nFOL: all x y. (Smart(x) & Round(x) -> Green(x))\nTEXT: All cold, kind people are white.\nFOL: all x y. (Kind(x) & Cold(x) -> White(x))\nTEXT: All furry, white people are round.\nFOL: all x y. (Furry(x) & White(x) -> Round(x))\nTEXT: All green people are furry.\nFOL: all x y. (Green(x) & Furry(x) -> Round(x))\nTEXT: If Anne is smart then Anne is round.\nFOL: all x y. (Anne(x) -> (Smart(x) & Round(x)))\nTEXT: Anne is cold.\nFOL: Anne(x) -> -Cold(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Dave is not green.\nFOL: all x. (Dave(x) -> -Green(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: If someone is round and white then they are green.\nFOL: all x y. (Round(x) & White(x) -> Green(x))\nTEXT: All smart, round people are green.\nFOL: all x y. (Smart(x) & Round(x) -> Green(x))\nTEXT: All cold, kind people are white.\nFOL: all x y. (Kind(x) & Cold(x) -> White(x))\nTEXT: All furry, white people are round.\nFOL: all x y. (Furry(x) & White(x) -> Round(x))\nTEXT: All green people are furry.\nFOL: all x y. (Green(x) & Furry(x) -> Round(x))\nTEXT: If Anne is smart then Anne is round.\nFOL: all x y. (Anne(x) -> Smart(x) & Anne(x) -> Round(x))\nTEXT: Anne is cold.\nFOL: Anne(x) -> -Cold(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Dave is not green.\nFOL: all x. (Dave(x) -> -Green(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: If someone is round and white then they are green.\nFOL: all x y. (Round(x) & White(x) -> Green(x))\nTEXT: All smart, round people are green.\nFOL: all x y. (Smart(x) & Round(x) -> Green(x))\nTEXT: All cold, kind people are white.\nFOL: all x y. (Kind(x) & Cold(x) -> White(x))\nTEXT: All furry, white people are round.\nFOL: all x y. (Furry(x) & White(x) -> Round(x))\nTEXT: All green people are furry.\nFOL: all x y. (Green(x) & Furry(x) -> Round(x))\nTEXT: If Anne is smart then Anne is round.\nFOL: all x y. (Anne(x) -> Smart(x) & Round(x))\nTEXT: Anne is cold.\nFOL: Anne(x) -> -Cold(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Dave is not green.\nFOL: all x. (Dave(x) -> -Green(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: If someone is round and white then they are green.\nFOL: all x y. (Round(x) & White(x) -> Green(x))\nTEXT: All smart, round people are green.\nFOL: all x y. (Smart(x) & Round(x) -> Green(x))\nTEXT: All cold, kind people are white.\nFOL: all x y. (Kind(x) & Cold(x) -> White(x))\nTEXT: All furry, white people are round.\nFOL: all x y. (Furry(x) & White(x) -> Round(x))\nTEXT: All green people are furry.\nFOL: all x y. (Green(x) & Furry(x) -> Round(x))\nTEXT: If Anne is smart then Anne is round.\nFOL: all x y. (Anne(x) -> Smart(x) & x -> Round(x))\nTEXT: Anne is cold.\nFOL: Anne(x) -> -Cold(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Dave is not green.\nFOL: all x. (Dave(x) -> -Green(x))\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: If someone is round and white then they are green.\nFOL: all x y. (Round(x) & White(x) -> Green(x))\nTEXT: All smart, round people are green.\nFOL: all x y. (Smart(x) & Round(x) -> Green(x))\nTEXT: All cold, kind people are white.\nFOL: all x y. (Kind(x) & Cold(x) -> White(x))\nTEXT: All furry, white people are round.\nFOL: all x y. (Furry(x) & White(x) -> Round(x))\nTEXT: All green people are furry.\nFOL: all x y. (Green(x) & Furry(x) -> Round(x))\nTEXT: If Anne is smart then Anne is round.\nFOL: all x y. (Anne(x) -> Smart(x) & x -> Round(x))\nTEXT: Anne is cold.\nFOL: Anne(x) & -Cold(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 91,
  "responses": [
   "<EVALUATE>\nTEXT: The cat needs the mouse.\nFOL: all x. (Cat(x) -> NeedsMouse(x))\nTEXT: The cow does not see the cat.\nFOL: all x. (Cow(x) -> -SeeCat(x))\nTEXT: The mouse is big.\nFOL: all x. (Mouse(x) -> Big(x))\nTEXT: If something chases the cat then the cat is not nice.\nFOL: all x y. (Something(x) & Cat(x) & -Nice(x) -> CatNotNice(x))\nTEXT: If something needs the mouse then the mouse is not nice.\nFOL: all x y. (Something(x) & Mouse(x) & -Nice(x) -> MouseNotNice(x))\nTEXT: If something chases the cow and it is not nice then it sees the mouse.\nFOL: all x y. (Something(x) & Cow(x) & -Nice(x) & -SeeMouse(x) -> Mouse(x))\nTEXT: The mouse is not young.\nFOL: all x. (Mouse(x) -> -Young(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat needs the mouse.\nFOL: all x. (Cat(x) -> NeedsMouse(x))\nTEXT: The cow does not see the cat.\nFOL: all x. (Cow(x) -> -SeeCat(x))\nTEXT: The mouse is big.\nFOL: all x. (Mouse(x) -> Big(x))\nTEXT: If something chases the cat then the cat is not nice.\nFOL: all x y. (Something(x) & Cat(x) & -Nice(x) -> CatNotNice(x))\nTEXT: If something needs the mouse then the mouse is not nice.\nFOL: all x y. (Something(x) & NeedsMouse(x) & -Nice(x) -> MouseNotNice(x))\nTEXT: If something chases the cow and it is not nice then it sees the mouse.\nFOL: all x y. (Something(x) & Cat(x) & -Nice(x) & -SeeMouse(x) -> Mouse(x))\nTEXT: The mouse is not young.\nFOL: all x. (Mouse(x) -> -Young(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat needs the mouse.\nFOL: all x. (Cat(x) -> NeedsMouse(x))\nTEXT: The cow does not see the cat.\nFOL: all x. (Cow(x) -> -SeeCat(x))\nTEXT: The mouse is big.\nFOL: all x. (Mouse(x) -> Big(x))\nTEXT: If something chases the cat then the cat is not nice.\nFOL: all x y. (Something(x) & Cat(x) & -Nice(x) -> CatNotNice(x))\nTEXT: If something needs the mouse then the mouse is not nice.\nFOL: all x y. (Something(x) & NeedsMouse(x) & -Nice(x) -> MouseNotNice(x))\nTEXT: If something chases the cow and it is not nice then it sees the mouse.\nFOL: all x y z. (Something(x) & Cat(x) & -Nice(x) & Cow(x) & -SeeMouse(x) -> Mouse(x))\nTEXT: The mouse is not young.\nFOL: all x. (Mouse(x) -> -Young(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat needs the mouse.\nFOL: all x. (Cat(x) -> NeedsMouse(x))\nTEXT: The cow does not see the cat.\nFOL: all x. (Cow(x) -> -SeeCat(x))\nTEXT: The mouse is big.\nFOL: all x. (Mouse(x) -> Big(x))\nTEXT: If something chases the cat then the cat is not nice.\nFOL: all x y. (Something(x) & Cat(x) & -Nice(x) -> CatNotNice(x))\nTEXT: If something needs the mouse then the mouse is not nice.\nFOL: all x y. (Something(x) & NeedsMouse(x) & -Nice(x) -> MouseNotNice(x))\nTEXT: If something chases the cow and it is not nice then it sees the mouse.\nFOL: all x y z. (Something(x) & Cat(x) & -Nice(x) & Cow(x) & -SeeMouse(x) -> Mouse(x))\nTEXT: The mouse is not young.\nFOL: all x. (Mouse(x) -> -Young(x))",
   "<EVALUATE>\nTEXT: The cat needs the mouse.\nFOL: all x. (Cat(x) -> NeedsMouse(x))\nTEXT: The cow does not see the cat.\nFOL: all x. (Cow(x) -> -SeeCat(x))\nTEXT: The mouse is big.\nFOL: all x. (Mouse(x) -> Big(x))\nTEXT: If something chases the cat then the cat is not nice.\nFOL: all x y. (Something(x) & Cat(x) & -Nice(x) -> CatNotNice(x))\nTEXT: If something needs the mouse then the mouse is not nice.\nFOL: all x y. (Something(x) & Mouse(x) & -Nice(x) -> MouseNotNice(x))\nTEXT: If something chases the cow and it is not nice then it sees the mouse.\nFOL: all x y. (Something(x) & Cow(x) & -Nice(x) & -SeeMouse(x) -> Mouse(x))\nTEXT: The mouse is not young.\nFOL: all x. (Mouse(x) -> -Young(x))"
  ]
 },
 {
  "index": 92,
  "responses": [
   "<EVALUATE>\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> Green(x))\nTEXT: The mouse visits the dog.\nFOL: all x. (Mouse(x) -> Dog(x))\nTEXT: If something visits the dog then the dog is young.\nFOL: all x y. (Something(x) -> Dog(x) & Young(x) -> Dog(x))\nTEXT: If something is red and young then it does not need the mouse.\nFOL: all x y. (Something(x) -> Red(x) & Young(x) -> -NeedMouse(x))\nTEXT: If something eats the mouse then the mouse is not cold.\nFOL: all x y. (Something(x) -> Eat(x) & Mouse(x) -> NotCold(x))\nTEXT: If something needs the dog then it is green.\nFOL: all x y. (Something(x) -> NeedDog(x) & Dog(x) -> Green(x))\nTEXT: If something eats the mouse then the mouse needs the dog.\nFOL: all x y. (Something(x) -> Eat(x) & Mouse(x) -> NeedDog(x))\nTEXT: If something needs the mouse then the mouse needs the dog.\nFOL: all x y. (Something(x) -> NeedMouse(x) & Mouse(x) -> NeedDog(x))\nTEXT: If something is green and not young then it eats the mouse.\nFOL: all x y. (Something(x) -> Green(x) & Young(x) -> -EatMouse(x))\nTEXT: If something is green then it eats the mouse.\nFOL: Green(x) -> EatMouse(x)\nTEXT: The dog does not eat the mouse.\nFOL: -EatMouse(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> Green(x))\nTEXT: The mouse visits the dog.\nFOL: all x. (Mouse(x) -> Dog(x))\nTEXT: If something visits the dog then the dog is young.\nFOL: all x y. (Something(x) -> Dog(x) & Young(x) -> Dog(x))\nTEXT: If something is red and young then it does not need the mouse.\nFOL: all x y. (Something(x) -> Red(x) & Young(x) -> -NeedMouse(x))\nTEXT: If something eats the mouse then the mouse is not cold.\nFOL: all x y. (Something(x) -> Eat(x) & Mouse(x) -> NotCold(x))\nTEXT: If something needs the dog then it is green.\nFOL: all x y. (Something(x) -> NeedDog(x) & Dog(x) -> Green(x))\nTEXT: If something eats the mouse then the mouse needs the dog.\nFOL: all x y. (Something(x) -> Eat(x) & Mouse(x) -> NeedDog(x))\nTEXT: If something needs the mouse then the mouse needs the dog.\nFOL: all x y. (Something(x) -> NeedMouse(x) & Mouse(x) -> NeedDog(x))\nTEXT: If something is green and not young then it eats the mouse.\nFOL: all x y. (Something(x) -> Green(x) & Young(x) -> -EatsMouse(x))\nTEXT: If something is green then it eats the mouse.\nFOL: all x y. (Something(x) -> Green(x) & -EatsMouse(x))\nTEXT: The dog does not eat the mouse.\nFOL: -EatsMouse(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> Green(x))\nTEXT: The mouse visits the dog.\nFOL: all x. (Mouse(x) -> Dog(x))\nTEXT: If something visits the dog then the dog is young.\nFOL: all x y. (Something(x) -> Dog(x) & Young(x) -> Dog(x))\nTEXT: If something is red and young then it does not need the mouse.\nFOL: all x y. (Something(x) -> Red(x) & Young(x) -> -NeedMouse(x))\nTEXT: If something eats the mouse then the mouse is not cold.\nFOL: all x y. (Something(x) -> Eat(x) & Mouse(x) -> NotCold(x))\nTEXT: If something needs the dog then it is green.\nFOL: all x y. (Something(x) -> NeedDog(x) & Dog(x) -> Green(x))\nTEXT: If something eats the mouse then the mouse needs the dog.\nFOL: all x y. (Something(x) -> Eat(x) & Mouse(x) -> NeedDog(x))\nTEXT: If something needs the mouse then the mouse needs the dog.\nFOL: all x y. (Something(x) -> NeedMouse(x) & Mouse(x) -> NeedDog(x))\nTEXT: If something is green and not young then it eats the mouse.\nFOL: all x y. (Something(x) -> Green(x) & Young(x) -> -EatMouse(x))\nTEXT: If something is green then it eats the mouse.\nFOL: Green(x) -> EatMouse(x)\nTEXT: The dog does not eat the mouse.\nFOL: -EatMouse(the dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> Green(x))\nTEXT: The mouse visits the dog.\nFOL: all x. (Mouse(x) -> Dog(x))\nTEXT: If something visits the dog then the dog is young.\nFOL: all x y. (Something(x) & Dog(x) & Young(x) -> Dog(x))\nTEXT: If something is red and young then it does not need the mouse.\nFOL: all x y. (Something(x) & Red(x) & Young(x) & -NeedMouse(x))\nTEXT: If something eats the mouse then the mouse is not cold.\nFOL: all x y. (Something(x) & Mouse(x) & Eat(x) & -Cold(x))\nTEXT: If something needs the dog then it is green.\nFOL: all x y. (Something(x) & Dog(x) & Need(x) & Green(x))\nTEXT: If something eats the mouse then the mouse needs the dog.\nFOL: all x y. (Something(x) & Mouse(x) & Eat(x) & -NeedDog(x))\nTEXT: If something needs the mouse then the mouse needs the dog.\nFOL: all x y. (Something(x) & Mouse(x) & Need(x) & -NeedDog(x))\nTEXT: If something is green and not young then it eats the mouse.\nFOL: all x y. (Something(x) & Green(x) & -Young(x) & Eat(x))\nTEXT: If something is green then it eats the mouse.\nFOL: Green(x) & Eat(x)\nTEXT: The dog does not eat the mouse.\nFOL: -Eat(x) & -Mouse(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is green.\nFOL: all x. (Dog(x) -> Green(x))\nTEXT: The mouse visits the dog.\nFOL: all x. (Mouse(x) -> Dog(x))\nTEXT: If something visits the dog then the dog is young.\nFOL: all x y. (Something(x) -> Dog(x) & Young(x) -> Dog(x))\nTEXT: If something is red and young then it does not need the mouse.\nFOL: all x y. (Something(x) -> Red(x) & Young(x) -> -NeedMouse(x))\nTEXT: If something eats the mouse then the mouse is not cold.\nFOL: all x y. (Something(x) -> Eat(x) & Mouse(x) -> NotCold(x))\nTEXT: If something needs the dog then it is green.\nFOL: all x y. (Something(x) -> NeedDog(x) & Dog(x) -> Green(x))\nTEXT: If something eats the mouse then the mouse needs the dog.\nFOL: all x y. (Something(x) -> Eat(x) & Mouse(x) -> NeedDog(x))\nTEXT: If something needs the mouse then the mouse needs the dog.\nFOL: all x y. (Something(x) -> NeedMouse(x) & Mouse(x) -> NeedDog(x))\nTEXT: If something is green and not young then it eats the mouse.\nFOL: all x y. (Something(x) -> Green(x) & Young(x) -> -EatsMouse(x))\nTEXT: If something is green then it eats the mouse.\nFOL: all x y. (Something(x) -> Green(x) & -EatsMouse(x))\nTEXT: The dog does not eat the mouse.\nFOL: -Eat(mouse) & Dog(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 93,
  "responses": [
   "<EVALUATE>\n\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\n\nTEXT: If Fiona is kind then Fiona is young.\nFOL: all x y. (Fiona(x) & Kind(x) -> Young(x))\n\nTEXT: All big people are not green.\nFOL: all x. (Big(x) & -Green(x))\n\nTEXT: If someone is big and not red then they are green.\nFOL: all x y. (Big(x) & -Red(x) & Green(x))\n\nTEXT: All green people are rough.\nFOL: all x. (Green(x) & -Rough(x))\n\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) & Kind(x))\n\nTEXT: If someone is young then they are kind.\nFOL: all x y. (Young(x) & Kind(x))\n\nTEXT: Cold people are kind.\nFOL: all x. (Cold(x) & Kind(x))\n\nTEXT: If someone is red and young then they are not big.\nFOL: all x y. (Red(x) & Young(x) & -Big(x))\n\nTEXT: Fiona is not green.\nFOL: Fiona(x) & -Green(x)\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\n\nTEXT: If Fiona is kind then Fiona is young.\nFOL: all x y. (Fiona(x) & Kind(x) -> Young(x))\n\nTEXT: All big people are not green.\nFOL: all x. (Big(x) & -Green(x))\n\nTEXT: If someone is big and not red then they are green.\nFOL: all x y. (Big(x) & -Red(x) & Green(x))\n\nTEXT: All green people are rough.\nFOL: all x. (Green(x) & -Rough(x))\n\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) & Kind(x))\n\nTEXT: If someone is young then they are kind.\nFOL: all x y. (Young(x) & Kind(x))\n\nTEXT: Cold people are kind.\nFOL: all x. (Cold(x) & Kind(x))\n\nTEXT: If someone is red and young then they are not big.\nFOL: all x y. (Red(x) & Young(x) & -Big(x))\n\nTEXT: Fiona is not green.\nFOL: Fiona(x) & -Green(x)",
   "<EVALUATE>\n\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\n\nTEXT: If Fiona is kind then Fiona is young.\nFOL: all x y. (Fiona(x) & Kind(x) -> Young(x))\n\nTEXT: All big people are not green.\nFOL: all x. (Big(x) & -Green(x))\n\nTEXT: If someone is big and not red then they are green.\nFOL: all x y. (Big(x) & -Red(x) & Green(x))\n\nTEXT: All green people are rough.\nFOL: all x. (Green(x) & -Rough(x))\n\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) & Kind(x))\n\nTEXT: If someone is young then they are kind.\nFOL: all x y. (Young(x) & Kind(x))\n\nTEXT: Cold people are kind.\nFOL: all x. (Cold(x) & Kind(x))\n\nTEXT: If someone is red and young then they are not big.\nFOL: all x y. (Red(x) & Young(x) & -Big(x))\n\nTEXT: Fiona is not green.\nFOL: -Green(fiona)\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\n\nTEXT: If Fiona is kind then Fiona is young.\nFOL: all x y. (Fiona(x) & Kind(x) -> Young(x))\n\nTEXT: All big people are not green.\nFOL: all x. (Big(x) & -Green(x))\n\nTEXT: If someone is big and not red then they are green.\nFOL: all x y. (Big(x) & -Red(x) & Green(x))\n\nTEXT: All green people are rough.\nFOL: all x. (Green(x) & -Rough(x))\n\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) & Kind(x))\n\nTEXT: If someone is young then they are kind.\nFOL: all x y. (Young(x) & Kind(x))\n\nTEXT: Cold people are kind.\nFOL: all x. (Cold(x) & Kind(x))\n\nTEXT: If someone is red and young then they are not big.\nFOL: all x y. (Red(x) & Young(x) & -Big(x))\n\nTEXT: Fiona is not green.\nFOL: Fiona(x) -> -Green(x)\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Fiona is green.\nFOL: all x. (Fiona(x) -> Green(x))\n\nTEXT: If Fiona is kind then Fiona is young.\nFOL: all x y. (Fiona(x) & Kind(x) -> Young(x))\n\nTEXT: All big people are not green.\nFOL: all x. (Big(x) & -Green(x))\n\nTEXT: If someone is big and not red then they are green.\nFOL: all x y. (Big(x) & -Red(x) & Green(x))\n\nTEXT: All green people are rough.\nFOL: all x. (Green(x) & -Rough(x))\n\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) & Kind(x))\n\nTEXT: If someone is young then they are kind.\nFOL: all x y. (Young(x) & Kind(x))\n\nTEXT: Cold people are kind.\nFOL: all x. (Cold(x) & Kind(x))\n\nTEXT: If someone is red and young then they are not big.\nFOL: all x y. (Red(x) & Young(x) & -Big(x))\n\nTEXT: Fiona is not green.\nFOL: -Green(fiona)"
  ]
 },
 {
  "index": 94,
  "responses": [
   "<EVALUATE>\n\nTEXT: The bear is green.\nFOL: all x. (Bear(x) -> Green(x))\n\nTEXT: The bear is young.\nFOL: all x. (Bear(x) -> Young(x))\n\nTEXT: The bear sees the rabbit.\nFOL: all x. (Bear(x) & Rabbit(x) -> See(x))\n\nTEXT: The lion is cold.\nFOL: all x. (Lion(x) -> Cold(x))\n\nTEXT: The lion is young.\nFOL: all x. (Lion(x) -> Young(x))\n\nTEXT: The lion needs the bear.\nFOL: all x. (Lion(x) & Bear(x) -> Need(x))\n\nTEXT: The lion needs the rabbit.\nFOL: all x. (Lion(x) & Rabbit(x) -> Need(x))\n\nTEXT: The rabbit needs the bear.\nFOL: all x. (Rabbit(x) & Bear(x) -> Need(x))\n\nTEXT: The rabbit needs the lion.\nFOL: all x. (Rabbit(x) & Lion(x) -> Need(x))\n\nTEXT: The rabbit does not see the bear.\nFOL: all x. (Rabbit(x) & Bear(x) -> -See(x))\n\nTEXT: The rabbit visits the bear.\nFOL: all x. (Rabbit(x) & Bear(x) -> Visit(x))\n\nTEXT: The rabbit visits the lion.\nFOL: all x. (Rabbit(x) & Lion(x) -> Visit(x))\n\nTEXT: If someone visits the bear and the bear is not red then the bear sees the rabbit.\nFOL: all x. (Bear(x) & -Red(x) -> See(x))\n\nTEXT: If the lion is cold and the lion visits the bear then the lion sees the bear.\nFOL: all x. (Lion(x) & Cold(x) & Bear(x) -> See(x))\n\nTEXT: If someone visits the bear and they need the lion then the lion sees the bear.\nFOL: all x. (Bear(x) & Need(x) & Lion(x) -> See(x))\n\nTEXT: If the bear sees the lion then the bear is cold.\nFOL: all x. (Bear(x) & See(x) & Lion(x) -> Cold(x))\n\nTEXT: If someone is cold then they need the rabbit.\nFOL: all x. (Cold(x) & Need(x) -> Rabbit(x))\n\nTEXT: If someone needs the lion and the lion sees the bear then the bear sees the lion.\nFOL: all x. (Lion(x) & Need(x) & Bear(x) -> See(x))\n\nTEXT: The bear visits the lion.\nFOL: all x. (Bear(x) & Lion(x) -> Visit(x))\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: The bear is green.\nFOL: all x. (Bear(x) -> Green(x))\n\nTEXT: The bear is young.\nFOL: all x. (Bear(x) -> Young(x))\n\nTEXT: The bear sees the rabbit.\nFOL: all x. (Bear(x) & Rabbit(x) -> See(x))\n\nTEXT: The lion is cold.\nFOL: all x. (Lion(x) -> Cold(x))\n\nTEXT: The lion is young.\nFOL: all x. (Lion(x) -> Young(x))\n\nTEXT: The lion needs the bear.\nFOL: all x. (Lion(x) & Bear(x) -> Need(x))\n\nTEXT: The lion needs the rabbit.\nFOL: all x. (Lion(x) & Rabbit(x) -> Need(x))\n\nTEXT: The rabbit needs the bear.\nFOL: all x. (Rabbit(x) & Bear(x) -> Need(x))\n\nTEXT: The rabbit needs the lion.\nFOL: all x. (Rabbit(x) & Lion(x) -> Need(x))\n\nTEXT: The rabbit does not see the bear.\nFOL: all x. (Rabbit(x) & Bear(x) -> -See(x))\n\nTEXT: The rabbit visits the bear.\nFOL: all x. (Rabbit(x) & Bear(x) -> Visit(x))\n\nTEXT: The rabbit visits the lion.\nFOL: all x. (Rabbit(x) & Lion(x) -> Visit(x))\n\nTEXT: If someone visits the bear and the bear is not red then the bear sees the rabbit.\nFOL: all x. (Bear(x) & -Red(x) -> See(x))\n\nTEXT: If the lion is cold and the lion visits the bear then the lion sees the bear.\nFOL: all x. (Lion(x) & Cold(x) & Bear(x) -> See(x))\n\nTEXT: If someone visits the bear and they need the lion then the lion sees the bear.\nFOL: all x. (Bear(x) & Need(x) & Lion(x) -> See(x))\n\nTEXT: If the bear sees the lion then the bear is cold.\nFOL: all x. (Bear(x) & See(x) & Lion(x) -> Cold(x))\n\nTEXT: If someone is cold then they need the rabbit.\nFOL: all x. (Cold(x) & Need(x) -> Rabbit(x))\n\nTEXT: If someone needs the lion and the lion sees the bear then the bear sees the lion.\nFOL: all x. (Need(x) & Lion(x) & Bear(x) -> See(x))\n\nTEXT: The bear visits the lion.\nFOL: all x. (Bear(x) & Lion(x) -> Visit(x))\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: The bear is green.\nFOL: all x. (Bear(x) -> Green(x))\n\nTEXT: The bear is young.\nFOL: all x. (Bear(x) -> Young(x))\n\nTEXT: The bear sees the rabbit.\nFOL: all x. (Bear(x) & Rabbit(x) -> See(x))\n\nTEXT: The lion is cold.\nFOL: all x. (Lion(x) -> Cold(x))\n\nTEXT: The lion is young.\nFOL: all x. (Lion(x) -> Young(x))\n\nTEXT: The lion needs the bear.\nFOL: all x. (Lion(x) & Bear(x) -> Need(x))\n\nTEXT: The lion needs the rabbit.\nFOL: all x. (Lion(x) & Rabbit(x) -> Need(x))\n\nTEXT: The rabbit needs the bear.\nFOL: all x. (Rabbit(x) & Bear(x) -> Need(x))\n\nTEXT: The rabbit needs the lion.\nFOL: all x. (Rabbit(x) & Lion(x) -> Need(x))\n\nTEXT: The rabbit does not see the bear.\nFOL: all x. (Rabbit(x) & Bear(x) -> -See(x))\n\nTEXT: The rabbit visits the bear.\nFOL: all x. (Rabbit(x) & Bear(x) -> Visit(x))\n\nTEXT: The rabbit visits the lion.\nFOL: all x. (Rabbit(x) & Lion(x) -> Visit(x))\n\nTEXT: If someone visits the bear and the bear is not red then the bear sees the rabbit.\nFOL: all x. (Bear(x) & -Red(x) -> See(x))\n\nTEXT: If the lion is cold and the lion visits the bear then the lion sees the bear.\nFOL: all x. (Lion(x) & Cold(x) & Bear(x) -> See(x))\n\nTEXT: If someone visits the bear and they need the lion then the lion sees the bear.\nFOL: all x. (Bear(x) & Need(x) & Lion(x) -> See(x))\n\nTEXT: If the bear sees the lion then the bear is cold.\nFOL: all x. (Bear(x) & See(x) & Lion(x) -> Cold(x))\n\nTEXT: If someone is cold then they need the rabbit.\nFOL: all x. (Cold(x) & Need(x) -> Rabbit(x))\n\nTEXT: If someone needs the lion and the lion sees the bear then the bear sees the lion.\nFOL: all x. (Lion(x) & Need(x) & Bear(x) -> See(x))\n\nTEXT: The bear visits the lion.\nFOL: all x. (Bear(x) & Lion(x) -> Visit(x))",
   "<EVALUATE>\n\nTEXT: The bear is green.\nFOL: all x. (Bear(x) -> Green(x))\n\nTEXT: The bear is young.\nFOL: all x. (Bear(x) -> Young(x))\n\nTEXT: The bear sees the rabbit.\nFOL: all x. (Bear(x) & Rabbit(x) -> See(x))\n\nTEXT: The lion is cold.\nFOL: all x. (Lion(x) -> Cold(x))\n\nTEXT: The lion is young.\nFOL: all x. (Lion(x) -> Young(x))\n\nTEXT: The lion needs the bear.\nFOL: all x. (Lion(x) & Bear(x) -> Need(x))\n\nTEXT: The lion needs the rabbit.\nFOL: all x. (Lion(x) & Rabbit(x) -> Need(x))\n\nTEXT: The rabbit needs the bear.\nFOL: all x. (Rabbit(x) & Bear(x) -> Need(x))\n\nTEXT: The rabbit needs the lion.\nFOL: all x. (Rabbit(x) & Lion(x) -> Need(x))\n\nTEXT: The rabbit does not see the bear.\nFOL: all x. (Rabbit(x) & Bear(x) -> -See(x))\n\nTEXT: The rabbit visits the bear.\nFOL: all x. (Rabbit(x) & Bear(x) -> Visit(x))\n\nTEXT: The rabbit visits the lion.\nFOL: all x. (Rabbit(x) & Lion(x) -> Visit(x))\n\nTEXT: If someone visits the bear and the bear is not red then the bear sees the rabbit.\nFOL: all x. (Bear(x) & -Red(x) -> See(x))\n\nTEXT: If the lion is cold and the lion visits the bear then the lion sees the bear.\nFOL: all x. (Lion(x) & Cold(x) & Bear(x) -> See(x))\n\nTEXT: If someone visits the bear and they need the lion then the lion sees the bear.\nFOL: all x. (Bear(x) & Need(x) & Lion(x) -> See(x))\n\nTEXT: If the bear sees the lion then the bear is cold.\nFOL: all x. (Bear(x) & See(x) & Lion(x) -> Cold(x))\n\nTEXT: If someone is cold then they need the rabbit.\nFOL: all x. (Cold(x) & Need(x) -> Rabbit(x))\n\nTEXT: If someone needs the lion and the lion sees the bear then the bear sees the lion.\nFOL: all x. (Need(x) & Lion(x) & Bear(x) -> See(x))\n\nTEXT: The bear visits the lion.\nFOL: all x. (Bear(x) & Lion(x) -> Visit(x))",
   "<EVALUATE>\n\nTEXT: The bear is green.\nFOL: all x. (Bear(x) -> Green(x))\n\nTEXT: The bear is young.\nFOL: all x. (Bear(x) -> Young(x))\n\nTEXT: The bear sees the rabbit.\nFOL: all x. (Bear(x) & Rabbit(x) -> See(x))\n\nTEXT: The lion is cold.\nFOL: all x. (Lion(x) -> Cold(x))\n\nTEXT: The lion is young.\nFOL: all x. (Lion(x) -> Young(x))\n\nTEXT: The lion needs the bear.\nFOL: all x. (Lion(x) & Bear(x) -> Need(x))\n\nTEXT: The lion needs the rabbit.\nFOL: all x. (Lion(x) & Rabbit(x) -> Need(x))\n\nTEXT: The rabbit needs the bear.\nFOL: all x. (Rabbit(x) & Bear(x) -> Need(x))\n\nTEXT: The rabbit needs the lion.\nFOL: all x. (Rabbit(x) & Lion(x) -> Need(x))\n\nTEXT: The rabbit does not see the bear.\nFOL: all x. (Rabbit(x) & Bear(x) -> -See(x))\n\nTEXT: The rabbit visits the bear.\nFOL: all x. (Rabbit(x) & Bear(x) -> Visit(x))\n\nTEXT: The rabbit visits the lion.\nFOL: all x. (Rabbit(x) & Lion(x) -> Visit(x))\n\nTEXT: If someone visits the bear and the bear is not red then the bear sees the rabbit.\nFOL: all x. (Bear(x) & -Red(x) -> See(x))\n\nTEXT: If the lion is cold and the lion visits the bear then the lion sees the bear.\nFOL: all x. (Lion(x) & Cold(x) & Bear(x) -> See(x))\n\nTEXT: If someone visits the bear and they need the lion then the lion sees the bear.\nFOL: all x. (Bear(x) & Need(x) & Lion(x) -> See(x))\n\nTEXT: If the bear sees the lion then the bear is cold.\nFOL: all x. (Bear(x) & See(x) & Lion(x) -> Cold(x))\n\nTEXT: If someone is cold then they need the rabbit.\nFOL: all x. (Cold(x) & Need(x) -> Rabbit(x))\n\nTEXT: If someone needs the lion and the lion sees the bear then the bear sees the lion.\nFOL: all x. (Need(x) & See(x) & Lion(x) -> See(x))\n\nTEXT: The bear visits the lion.\nFOL: all x. (Bear(x) & Lion(x) -> Visit(x))\n\n</EVALUATE>"
  ]
 },
 {
  "index": 95,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is not blue.\nFOL: all x. (BaldEagle(x) -> NotBlue(x))\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> Cold(x))\nTEXT: The bald eagle does not need the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> -NeedTiger(x))\nTEXT: The bald eagle sees the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> See(x))\nTEXT: The bald eagle does not see the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> -See(x))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat visits the tiger.\nFOL: all x. (Cat(x) & Tiger(x) -> Visit(x))\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) -> Blue(x))\nTEXT: The tiger needs the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> -NeedCat(x))\nTEXT: The tiger sees the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> -See(x))\nTEXT: If the bald eagle does not need the tiger then the tiger does not see the bald eagle.\nFOL: -NeedTiger(baldEagle) -> -See(baldEagle, tiger)\nTEXT: The bald eagle does not need the cat.\nFOL: -NeedCat(baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is not blue.\nFOL: all x. (BaldEagle(x) -> NotBlue(x))\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> Cold(x))\nTEXT: The bald eagle does not need the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> -NeedTiger(x))\nTEXT: The bald eagle sees the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> See(x))\nTEXT: The bald eagle does not see the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> -See(x))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat visits the tiger.\nFOL: all x. (Cat(x) & Tiger(x) -> Visit(x))\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) -> Blue(x))\nTEXT: The tiger needs the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> NeedTiger(x))\nTEXT: The tiger sees the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> See(x))\nTEXT: If the bald eagle does not need the tiger then the tiger does not see the bald eagle.\nFOL: -NeedTiger(baldEagle) -> -See(baldEagle, tiger)\nTEXT: The bald eagle does not need the cat.\nFOL: -NeedTiger(baldEagle) -> -NeedCat(baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is not blue.\nFOL: all x. (BaldEagle(x) -> NotBlue(x))\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> Cold(x))\nTEXT: The bald eagle does not need the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> -NeedTiger(x))\nTEXT: The bald eagle sees the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> See(x))\nTEXT: The bald eagle does not see the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> -See(x))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat visits the tiger.\nFOL: all x. (Cat(x) & Tiger(x) -> Visit(x))\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) -> Blue(x))\nTEXT: The tiger needs the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> NeedTiger(x))\nTEXT: The tiger sees the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> See(x))\nTEXT: If the bald eagle does not need the tiger then the tiger does not see the bald eagle.\nFOL: -NeedTiger(baldEagle) -> -See(baldEagle, tiger)\nTEXT: The bald eagle does not need the cat.\nFOL: -NeedCat(baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is not blue.\nFOL: all x. (BaldEagle(x) -> -Blue(x))\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> -Cold(x))\nTEXT: The bald eagle does not need the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> -Need(x, tiger(x)))\nTEXT: The bald eagle sees the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> See(x, cat(x)))\nTEXT: The bald eagle does not see the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> -See(x, tiger(x)))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat visits the tiger.\nFOL: all x. (Cat(x) & Tiger(x) -> Visit(x, tiger(x)))\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) -> Blue(x))\nTEXT: The tiger needs the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> Need(x, cat(x)))\nTEXT: The tiger sees the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> See(x, cat(x)))\nTEXT: If the bald eagle does not need the tiger then the tiger does not see the bald eagle.\nFOL: -Need(x, tiger(x)) & -See(x, tiger(x)) & -See(x, baldEagle(x))\nTEXT: The bald eagle does not need the cat.\nFOL: -Need(x, cat(x)) & -Need(x, tiger(x)) & -See(x, cat(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is not blue.\nFOL: all x. (BaldEagle(x) -> -Blue(x))\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> -Cold(x))\nTEXT: The bald eagle does not need the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> -Need(x, tiger(x)))\nTEXT: The bald eagle sees the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> See(x, cat(x)))\nTEXT: The bald eagle does not see the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) -> -See(x, tiger(x)))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat visits the tiger.\nFOL: all x. (Cat(x) & Tiger(x) -> Visit(x, tiger(x)))\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) -> -Blue(x))\nTEXT: The tiger needs the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> -Need(x, cat(x)))\nTEXT: The tiger sees the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> -See(x, cat(x)))\nTEXT: If the bald eagle does not need the tiger then the tiger does not see the bald eagle.\nFOL: -Need(tiger, baldEagle) -> -See(tiger, baldEagle)\nTEXT: The bald eagle does not need the cat.\nFOL: -Need(baldEagle, cat) -> -Need(baldEagle, tiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 96,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: all x. (Furry(x) -> Anne(x))\nTEXT: Anne is not kind.\nFOL: all x. (Kind(x) -> -Anne(x))\nTEXT: Anne is red.\nFOL: all x. (Red(x) -> Anne(x))\nTEXT: Erin is cold.\nFOL: all x. (Cold(x) -> -Anne(x))\nTEXT: Erin is nice.\nFOL: all x. (Nice(x) -> Anne(x))\nTEXT: Erin is not quiet.\nFOL: all x. (Quiet(x) -> -Anne(x))\nTEXT: Erin is red.\nFOL: all x. (Red(x) -> Anne(x))\nTEXT: If Anne is red and Anne is not kind then Anne is quiet.\nFOL: (Red(x) & -Kind(x) -> Quiet(x))\nTEXT: Quiet, furry people are not nice.\nFOL: (Furry(x) & -Kind(x) -> -Nice(x))\nTEXT: If Anne is quiet and Anne is not nice then Anne is cold.\nFOL: (Quiet(x) & -Nice(x) -> -Cold(x))\nTEXT: Anne is kind.\nFOL: (Kind(x) -> -Cold(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: all x. (Furry(x) -> Anne(x))\nTEXT: Anne is not kind.\nFOL: all x. (Kind(x) -> -Anne(x))\nTEXT: Anne is red.\nFOL: all x. (Red(x) -> Anne(x))\nTEXT: Erin is cold.\nFOL: all x. (Cold(x) -> -Anne(x))\nTEXT: Erin is nice.\nFOL: all x. (Nice(x) -> Anne(x))\nTEXT: Erin is not quiet.\nFOL: all x. (Quiet(x) -> -Anne(x))\nTEXT: Erin is red.\nFOL: all x. (Red(x) -> Anne(x))\nTEXT: If Anne is red and Anne is not kind then Anne is quiet.\nFOL: (Red(x) & -Kind(x) -> Quiet(x))\nTEXT: Quiet, furry people are not nice.\nFOL: (Furry(x) & -Kind(x) -> -Nice(x))\nTEXT: If Anne is quiet and Anne is not nice then Anne is cold.\nFOL: (Quiet(x) & -Nice(x) -> -Cold(x))\nTEXT: Anne is kind.\nFOL: all x. (Kind(x) -> Anne(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: all x. (Furry(x) -> Anne(x))\nTEXT: Anne is not kind.\nFOL: all x. (Kind(x) -> -Anne(x))\nTEXT: Anne is red.\nFOL: all x. (Red(x) -> Anne(x))\nTEXT: Erin is cold.\nFOL: all x. (Cold(x) -> -Anne(x))\nTEXT: Erin is nice.\nFOL: all x. (Nice(x) -> Anne(x))\nTEXT: Erin is not quiet.\nFOL: all x. (Quiet(x) -> -Anne(x))\nTEXT: Erin is red.\nFOL: all x. (Red(x) -> Anne(x))\nTEXT: If Anne is red and Anne is not kind then Anne is quiet.\nFOL: (Red(x) & -Kind(x) -> Quiet(x))\nTEXT: Quiet, furry people are not nice.\nFOL: (Furry(x) & -Kind(x) -> -Nice(x))\nTEXT: If Anne is quiet and Anne is not nice then Anne is cold.\nFOL: (Quiet(x) & -Nice(x) -> -Cold(x))\nTEXT: Anne is kind.\nFOL: (Kind(x) -> Anne(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: all x. (Furry(x) -> Anne(x))\nTEXT: Anne is not kind.\nFOL: all x. (Kind(x) -> -Anne(x))\nTEXT: Anne is red.\nFOL: all x. (Red(x) -> Anne(x))\nTEXT: Erin is cold.\nFOL: all x. (Cold(x) -> -Anne(x))\nTEXT: Erin is nice.\nFOL: all x. (Nice(x) -> Anne(x))\nTEXT: Erin is not quiet.\nFOL: all x. (Quiet(x) -> -Anne(x))\nTEXT: Erin is red.\nFOL: all x. (Red(x) -> Anne(x))\nTEXT: If Anne is red and Anne is not kind then Anne is quiet.\nFOL: (Red(x) & -Kind(x) -> Quiet(x))\nTEXT: Quiet, furry people are not nice.\nFOL: (Furry(x) & -Kind(x) -> -Nice(x))\nTEXT: If Anne is quiet and Anne is not nice then Anne is cold.\nFOL: (Quiet(x) & -Nice(x) -> Cold(x))\nTEXT: Anne is kind.\nFOL: (Kind(x) -> -Anne(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: all x. (Furry(x) -> Anne(x))\nTEXT: Anne is not kind.\nFOL: all x. (Kind(x) -> -Anne(x))\nTEXT: Anne is red.\nFOL: all x. (Red(x) -> Anne(x))\nTEXT: Erin is cold.\nFOL: all x. (Cold(x) -> -Anne(x))\nTEXT: Erin is nice.\nFOL: all x. (Nice(x) -> Anne(x))\nTEXT: Erin is not quiet.\nFOL: all x. (Quiet(x) -> -Anne(x))\nTEXT: Erin is red.\nFOL: all x. (Red(x) -> Anne(x))\nTEXT: If Anne is red and Anne is not kind then Anne is quiet.\nFOL: (Red(x) & -Kind(x) -> Quiet(x))\nTEXT: Quiet, furry people are not nice.\nFOL: (Furry(x) & -Kind(x) -> -Nice(x))\nTEXT: If Anne is quiet and Anne is not nice then Anne is cold.\nFOL: (Quiet(x) & -Nice(x) -> Cold(x))\nTEXT: Anne is kind.\nFOL: (Kind(x) -> Anne(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 97,
  "responses": [
   "<EVALUATE>\nTEXT: The mouse is rough.\nFOL: all x. (Rough(x) -> -Kind(x))\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The mouse is rough.\nFOL: all x. (Rough(x) -> -Kind(x))\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The mouse is rough.\nFOL: all x. (Rough(x) -> -Kind(x))\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The mouse is rough.\nFOL: all x. (Rough(x) -> -Kind(x))\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The mouse is rough.\nFOL: all x. (Rough(x) -> -Kind(x))\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The mouse is rough.\nFOL: all x. (Rough(x) -> -Kind(x))\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The mouse is rough.\nFOL: all x. (Rough(x) -> -Kind(x))\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The mouse is rough.\nFOL: all x. (Rough(x) -> -Kind(x))\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) ->",
   "<EVALUATE>\nTEXT: The mouse is rough.\nFOL: all x. (Rough(x) -> -Kind(x))\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: All rough, red things are kind.\nFOL: all x.",
   "<EVALUATE>\nTEXT: The mouse is rough.\nFOL: all x. (Rough(x) -> -Kind(x))\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: If something is kind then it is green.\nFOL: all x",
   "<EVALUATE>\nTEXT: The mouse is rough.\nFOL: all x. (Rough(x) -> -Kind(x))\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The mouse is rough.\nFOL: all x. (Rough(x) -> -Kind(x))\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The mouse is rough.\nFOL: all x. (Rough(x) -> -Kind(x))\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The mouse is rough.\nFOL: all x. (Rough(x) -> -Kind(x))\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The mouse is rough.\nFOL: all x. (Rough(x) -> -Kind(x))\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The mouse is rough.\nFOL: all x. (Rough(x) -> -Kind(x))\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The mouse is rough.\nFOL: all x. (Rough(x) -> -Kind(x))\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse is rough.\nFOL: all x. (Rough(x) -> -Kind(x))\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: -Rough(mouse)\n</E"
  ]
 },
 {
  "index": 98,
  "responses": [
   "<EVALUATE>\nTEXT: Round, nice Bob felt as blue and big as he had ever been.\nFOL: all x. (Round(x) & Nice(x) & -Blue(x) & -Big(x))\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Young(x) & -Cold(x) & -Name(x))\nTEXT: That guy Eric sure is nice.\nFOL: all x. (Guy(x) & -Cold(x) & -Nice(x))\nTEXT: That guy Fred sure is nice.\nFOL: all x. (Guy(x) & -Cold(x) & -Nice(x))\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: all x. (Big(x) & Kind(x) & -Cold(x) & -Red(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: all x. (Big(x) & -Blue(x) & -Size(x) & -Cold(x))\nTEXT: You must be aware of big, red, young people being rough.\nFOL: all x. (Big(x) & Red(x) & Young(x) & -Rough(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: all x. (Big(x) & -Cold(x) & -Kind(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & Red(x) & -Size(x))\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) & -Kind(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Round, nice Bob felt as blue and big as he had ever been.\nFOL: all x. (Round(x) & Nice(x) & -Blue(x) & -Big(x))\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Young(x) & -Cold(x) & -Name(x))\nTEXT: That guy Eric sure is nice.\nFOL: all x. (Guy(x) & -Cold(x) & -Nice(x))\nTEXT: That guy Fred sure is nice.\nFOL: all x. (Guy(x) & -Cold(x) & -Nice(x))\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: all x. (Big(x) & Kind(x) & -Cold(x) & -Red(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: all x. (Big(x) & -Blue(x) & -Size(x) & -Cold(x))\nTEXT: You must be aware of big, red, young people being rough.\nFOL: all x. (Big(x) & Red(x) & -Young(x) & -Rough(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: all x. (Big(x) & -Cold(x) & -Kind(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & Red(x) & -Face(x) & -Size(x))\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) & -Kind(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Round, nice Bob felt as blue and big as he had ever been.\nFOL: all x. (Round(x) & Nice(x) & -Blue(x) & -Big(x))\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Young(x) & -Cold(x) & -Name(x))\nTEXT: That guy Eric sure is nice.\nFOL: all x. (Guy(x) & -Cold(x) & -Nice(x))\nTEXT: That guy Fred sure is nice.\nFOL: all x. (Guy(x) & -Cold(x) & -Nice(x))\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: all x. (Big(x) & Kind(x) & -Cold(x) & -Red(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: all x. (Big(x) & -Blue(x) & -Size(x) & -Cold(x))\nTEXT: You must be aware of big, red, young people being rough.\nFOL: all x. (Big(x) & -Red(x) & -Young(x) & -Rough(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: all x. (Big(x) & -Cold(x) & -Kind(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & Red(x) & -Face(x) & -Size(x))\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) & -Kind(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Round, nice Bob felt as blue and big as he had ever been.\nFOL: all x. (Round(x) & Nice(x) & -Blue(x) & -Big(x))\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Young(x) & -Cold(x) & -Name(x))\nTEXT: That guy Eric sure is nice.\nFOL: all x. (Guy(x) & -Cold(x) & -Nice(x))\nTEXT: That guy Fred sure is nice.\nFOL: all x. (Guy(x) & -Cold(x) & -Nice(x))\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: all x. (Big(x) & Kind(x) & -Cold(x) & -Red(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: all x. (Big(x) & -Blue(x) & -Size(x) & -Cold(x))\nTEXT: You must be aware of big, red, young people being rough.\nFOL: all x. (Big(x) & -Red(x) & -Young(x) & -Rough(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: all x. (Big(x) & -Cold(x) & -Kind(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & -Red(x) & -Face(x) & -Size(x))\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) & -Kind(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Round, nice Bob felt as blue and big as he had ever been.\nFOL: all x. (Round(x) & Nice(x) & -Blue(x) & -Big(x))\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Young(x) & -Cold(x) & -Name(x))\nTEXT: That guy Eric sure is nice.\nFOL: all x. (Guy(x) & -Cold(x) & -Nice(x))\nTEXT: That guy Fred sure is nice.\nFOL: all x. (Guy(x) & -Cold(x) & -Nice(x))\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: all x. (Big(x) & Kind(x) & -Cold(x) & -Red(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: all x. (Big(x) & -Blue(x) & -Size(x) & -Cold(x))\nTEXT: You must be aware of big, red, young people being rough.\nFOL: all x. (Big(x) & -Red(x) & -Young(x) & -Rough(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: all x. (Big(x) & -Cold(x) & -Kind(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & Red(x) & -Face(x) & -Size(x))\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) & -Kind(x))"
  ]
 },
 {
  "index": 99,
  "responses": [
   "<EVALUATE>\nTEXT: The cat eats the dog.\nFOL: all x y. (Cat(x) & Dog(x) & Eat(x, y) -> Rough(x, y))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat is rough.\nFOL: all x. (Cat(x) -> Rough(x))\nTEXT: The dog eats the mouse.\nFOL: all x y. (Dog(x) & Mouse(x) & Eat(x, y) -> Rough(x, y))\nTEXT: The dog needs the cat.\nFOL: all x y. (Dog(x) & Cat(x) & Need(x, y) -> Rough(x, y))\nTEXT: The dog sees the cat.\nFOL: all x y. (Dog(x) & Cat(x) & See(x, y) -> Rough(x, y))\nTEXT: The dog sees the mouse.\nFOL: all x y. (Dog(x) & Mouse(x) & See(x, y) -> Rough(x, y))\nTEXT: The mouse eats the dog.\nFOL: all x y. (Mouse(x) & Dog(x) & Eat(x, y) -> Rough(x, y))\nTEXT: The mouse is rough.\nFOL: all x. (Mouse(x) -> Rough(x))\nTEXT: The mouse is young.\nFOL: all x. (Mouse(x) -> Young(x))\nTEXT: The mouse needs the dog.\nFOL: all x y. (Mouse(x) & Dog(x) & Need(x, y) -> Rough(x, y))\nTEXT: The mouse sees the dog.\nFOL: all x y. (Mouse(x) & Dog(x) & See(x, y) -> Rough(x, y))\nTEXT: If something needs the mouse and the mouse sees the dog then the mouse is red.\nFOL: all x y. (Need(x, y) & See(x, y) & Mouse(x) -> Red(x))\nTEXT: If something sees the cat then the cat sees the dog.\nFOL: all x y. (See(x, y) & Cat(x) & See(x, y) -> See(x, y))\nTEXT: If something is young then it sees the dog.\nFOL: all x. (Young(x) & See(x, y) -> See(x, y))\nTEXT: If something needs the cat then the cat needs the mouse.\nFOL: all x y. (Need(x, y) & Cat(x) & Need(x, y) -> Need(x, y))\nTEXT: If something is rough and it eats the mouse then it sees the cat.\nFOL: all x y. (Rough(x) & Eat(x, y) & See(x, y) & Cat(x) -> See(x, y))\nTEXT: If something is red then it needs the cat.\nFOL: all x. (Red(x) & Need(x, y) -> Need(x, y))\nTEXT: If the dog is young and the dog is red then the dog is rough.\nFOL: all x. (Young(x) & Red(x) & Rough(x) -> Rough(x))\nTEXT: If something eats the dog and it is nice then it sees the dog.\nFOL: all x y. (Eat(x, y) & Nice(x) & See(x, y) -> See(x, y))\nTEXT: The mouse is not red.\nFOL: -Red(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the dog.\nFOL: all x y. (Cat(x) & Dog(x) & Eat(x, y) -> Rough(x, y))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat is rough.\nFOL: all x. (Cat(x) -> Rough(x))\nTEXT: The dog eats the mouse.\nFOL: all x y. (Dog(x) & Mouse(x) & Eat(x, y) -> Rough(x, y))\nTEXT: The dog needs the cat.\nFOL: all x y. (Dog(x) & Cat(x) & Need(x, y) -> Rough(x, y))\nTEXT: The dog sees the cat.\nFOL: all x y. (Dog(x) & Cat(x) & See(x, y) -> Rough(x, y))\nTEXT: The dog sees the mouse.\nFOL: all x y. (Dog(x) & Mouse(x) & See(x, y) -> Rough(x, y))\nTEXT: The mouse eats the dog.\nFOL: all x y. (Mouse(x) & Dog(x) & Eat(x, y) -> Rough(x, y))\nTEXT: The mouse is rough.\nFOL: all x. (Mouse(x) -> Rough(x))\nTEXT: The mouse is young.\nFOL: all x. (Mouse(x) -> Young(x))\nTEXT: The mouse needs the dog.\nFOL: all x y. (Mouse(x) & Dog(x) & Need(x, y) -> Rough(x, y))\nTEXT: The mouse sees the dog.\nFOL: all x y. (Mouse(x) & Dog(x) & See(x, y) -> Rough(x, y))\nTEXT: If something needs the mouse and the mouse sees the dog then the mouse is red.\nFOL: all x y. (Need(x, y) & See(x, y) & Mouse(x) -> Red(x))\nTEXT: If something sees the cat then the cat sees the dog.\nFOL: all x y. (See(x, y) & Cat(x) & See(x, y) -> See(x, y))\nTEXT: If something is young then it sees the dog.\nFOL: all x. (Young(x) & See(x, y) -> See(x, y))\nTEXT: If something needs the cat then the cat needs the mouse.\nFOL: all x y. (Need(x, y) & Cat(x) -> Need(x, y))\nTEXT: If something is rough and it eats the mouse then it sees the cat.\nFOL: all x y. (Rough(x) & Eat(x, y) & See(x, y) & Cat(x))\nTEXT: If something is red then it needs the cat.\nFOL: all x. (Red(x) & Need(x, y) -> Need(x, y))\nTEXT: If the dog is young and the dog is red then the dog is rough.\nFOL: all x. (Young(x) & Red(x) & Rough(x))\nTEXT: If something eats the dog and it is nice then it sees the dog.\nFOL: all x y. (Eat(x, y) & Nice(x) & See(x, y))\nTEXT: The mouse is not red.\nFOL: -Red(x)",
   "<EVALUATE>\nTEXT: The cat eats the dog.\nFOL: all x y. (Cat(x) & Dog(x) & Eat(x, y) -> Rough(x, y))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat is rough.\nFOL: all x. (Cat(x) -> Rough(x))\nTEXT: The dog eats the mouse.\nFOL: all x y. (Dog(x) & Mouse(x) & Eat(x, y) -> Rough(x, y))\nTEXT: The dog needs the cat.\nFOL: all x y. (Dog(x) & Cat(x) & Need(x, y) -> Rough(x, y))\nTEXT: The dog sees the cat.\nFOL: all x y. (Dog(x) & Cat(x) & See(x, y) -> Rough(x, y))\nTEXT: The dog sees the mouse.\nFOL: all x y. (Dog(x) & Mouse(x) & See(x, y) -> Rough(x, y))\nTEXT: The mouse eats the dog.\nFOL: all x y. (Mouse(x) & Dog(x) & Eat(x, y) -> Rough(x, y))\nTEXT: The mouse is rough.\nFOL: all x. (Mouse(x) -> Rough(x))\nTEXT: The mouse is young.\nFOL: all x. (Mouse(x) -> Young(x))\nTEXT: The mouse needs the dog.\nFOL: all x y. (Mouse(x) & Dog(x) & Need(x, y) -> Rough(x, y))\nTEXT: The mouse sees the dog.\nFOL: all x y. (Mouse(x) & Dog(x) & See(x, y) -> Rough(x, y))\nTEXT: If something needs the mouse and the mouse sees the dog then the mouse is red.\nFOL: all x y. (Need(x, y) & See(x, y) & Mouse(x) -> Red(x))\nTEXT: If something sees the cat then the cat sees the dog.\nFOL: all x y. (See(x, y) & Cat(x) & See(x, y) -> See(x, y))\nTEXT: If something is young then it sees the dog.\nFOL: all x. (Young(x) & See(x, y) -> See(x, y))\nTEXT: If something needs the cat then the cat needs the mouse.\nFOL: all x y. (Need(x, y) & Cat(x) -> Need(x, y))\nTEXT: If something is rough and it eats the mouse then it sees the cat.\nFOL: all x y. (Rough(x) & Eat(x, y) & See(x, y) & Cat(x))\nTEXT: If something is red then it needs the cat.\nFOL: all x. (Red(x) & Need(x, y) -> Need(x, y))\nTEXT: If the dog is young and the dog is red then the dog is rough.\nFOL: all x. (Young(x) & Red(x) & Rough(x))\nTEXT: If something eats the dog and it is nice then it sees the dog.\nFOL: all x y. (Eat(x, y) & Nice(x) & See(x, y))\nTEXT: The mouse is not red.\nFOL: -Red(mouse)",
   "<EVALUATE>\nTEXT: The cat eats the dog.\nFOL: all x y. (Cat(x) & Dog(x) & Eat(x, y) -> Rough(x, y))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat is rough.\nFOL: all x. (Cat(x) -> Rough(x))\nTEXT: The dog eats the mouse.\nFOL: all x y. (Dog(x) & Mouse(x) & Eat(x, y) -> Rough(x, y))\nTEXT: The dog needs the cat.\nFOL: all x y. (Dog(x) & Cat(x) & Need(x, y) -> Rough(x, y))\nTEXT: The dog sees the cat.\nFOL: all x y. (Dog(x) & Cat(x) & See(x, y) -> Rough(x, y))\nTEXT: The dog sees the mouse.\nFOL: all x y. (Dog(x) & Mouse(x) & See(x, y) -> Rough(x, y))\nTEXT: The mouse eats the dog.\nFOL: all x y. (Mouse(x) & Dog(x) & Eat(x, y) -> Rough(x, y))\nTEXT: The mouse is rough.\nFOL: all x. (Mouse(x) -> Rough(x))\nTEXT: The mouse is young.\nFOL: all x. (Mouse(x) -> Young(x))\nTEXT: The mouse needs the dog.\nFOL: all x y. (Mouse(x) & Dog(x) & Need(x, y) -> Rough(x, y))\nTEXT: The mouse sees the dog.\nFOL: all x y. (Mouse(x) & Dog(x) & See(x, y) -> Rough(x, y))\nTEXT: If something needs the mouse and the mouse sees the dog then the mouse is red.\nFOL: all x y. (Need(x, y) & See(x, y) & Mouse(x) -> Red(x))\nTEXT: If something sees the cat then the cat sees the dog.\nFOL: all x y. (See(x, y) & Cat(x) & See(x, y) -> See(x, y))\nTEXT: If something is young then it sees the dog.\nFOL: all x. (Young(x) & See(x, y) -> See(x, y))\nTEXT: If something needs the cat then the cat needs the mouse.\nFOL: all x y. (Need(x, y) & Cat(x) & Need(x, y) -> Need(x, y))\nTEXT: If something is rough and it eats the mouse then it sees the cat.\nFOL: all x y. (Rough(x) & Eat(x, y) & See(x, y) & Cat(x) -> See(x, y))\nTEXT: If something is red then it needs the cat.\nFOL: all x. (Red(x) & Need(x, y) -> Need(x, y))\nTEXT: If the dog is young and the dog is red then the dog is rough.\nFOL: all x. (Young(x) & Red(x) & Rough(x) -> Rough(x))\nTEXT: If something eats the dog and it is nice then it sees the dog.\nFOL: all x y. (Eat(x, y) & Nice(x) & See(x, y) -> See(x, y))\nTEXT: The mouse is not red.\nFOL: not Red(x)",
   "<EVALUATE>\nTEXT: The cat eats the dog.\nFOL: all x y. (Cat(x) & Dog(x) & Eat(x, y) -> Rough(x, y))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat is rough.\nFOL: all x. (Cat(x) -> Rough(x))\nTEXT: The dog eats the mouse.\nFOL: all x y. (Dog(x) & Mouse(x) & Eat(x, y) -> Rough(x, y))\nTEXT: The dog needs the cat.\nFOL: all x y. (Dog(x) & Cat(x) & Need(x, y) -> Rough(x, y))\nTEXT: The dog sees the cat.\nFOL: all x y. (Dog(x) & Cat(x) & See(x, y) -> Rough(x, y))\nTEXT: The dog sees the mouse.\nFOL: all x y. (Dog(x) & Mouse(x) & See(x, y) -> Rough(x, y))\nTEXT: The mouse eats the dog.\nFOL: all x y. (Mouse(x) & Dog(x) & Eat(x, y) -> Rough(x, y))\nTEXT: The mouse is rough.\nFOL: all x. (Mouse(x) -> Rough(x))\nTEXT: The mouse is young.\nFOL: all x. (Mouse(x) -> Young(x))\nTEXT: The mouse needs the dog.\nFOL: all x y. (Mouse(x) & Dog(x) & Need(x, y) -> Rough(x, y))\nTEXT: The mouse sees the dog.\nFOL: all x y. (Mouse(x) & Dog(x) & See(x, y) -> Rough(x, y))\nTEXT: If something needs the mouse and the mouse sees the dog then the mouse is red.\nFOL: all x y. (Need(x, y) & See(x, y) & Mouse(x) -> Red(x))\nTEXT: If something sees the cat then the cat sees the dog.\nFOL: all x y. (See(x, y) & Cat(x) & See(x, y) -> See(x, y))\nTEXT: If something is young then it sees the dog.\nFOL: all x. (Young(x) & See(x, y) -> See(x, y))\nTEXT: If something needs the cat then the cat needs the mouse.\nFOL: all x y. (Need(x, y) & Cat(x) & Need(x, y) -> Need(x, y))\nTEXT: If something is rough and it eats the mouse then it sees the cat.\nFOL: all x y. (Rough(x) & Eat(x, y) & See(x, y) & Cat(x) -> See(x, y))\nTEXT: If something is red then it needs the cat.\nFOL: all x. (Red(x) & Need(x, y) -> Need(x, y))\nTEXT: If the dog is young and the dog is red then the dog is rough.\nFOL: all x. (Young(x) & Red(x) & Rough(x) -> Rough(x))\nTEXT: If something eats the dog and it is nice then it sees the dog.\nFOL: all x y. (Eat(x, y) & Nice(x) & See(x, y) -> See(x, y))\nTEXT: The mouse is not red.\nFOL: -Red(mouse)"
  ]
 },
 {
  "index": 100,
  "responses": [
   "<EVALUATE>\n\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\n\nTEXT: Kind, round things are not red.\nFOL: all x. (Kind(x) & Round(x) & -Red(x))\n\nTEXT: All young, red things are not kind.\nFOL: all x. (Young(x) & Red(x) & -Kind(x))\n\nTEXT: All red, rough things are round.\nFOL: all x. (Red(x) & Rough(x) & Round(x))\n\nTEXT: All rough things are round.\nFOL: all x. (Rough(x) & Round(x))\n\nTEXT: If the cow is young and the cow is kind then the cow is round.\nFOL: all x y. (Young(x) & Kind(x) & -Round(x) -> Round(x))\n\nTEXT: If something is red then it is rough.\nFOL: all x. (Red(x) & -Rough(x))\n\nTEXT: If something is round and young then it is rough.\nFOL: all x y. (Round(x) & Young(x) & -Rough(x))\n\nTEXT: If something is rough then it is young.\nFOL: all x. (Rough(x) & Young(x))\n\nTEXT: The cow needs the cow.\nFOL: all x. (Cow(x) & -Cow(x))\n\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\nTEXT: Kind, round things are not red.\nFOL: all x. (Kind(x) & Round(x) & -Red(x))\nTEXT: All young, red things are not kind.\nFOL: all x. (Young(x) & Red(x) & -Kind(x))\nTEXT: All red, rough things are round.\nFOL: all x. (Red(x) & Rough(x) & Round(x))\nTEXT: All rough things are round.\nFOL: all x. (Rough(x) & Round(x))\nTEXT: If the cow is young and the cow is kind then the cow is round.\nFOL: all x y. (Young(x) & Kind(x) & -Round(x) -> Round(x))\nTEXT: If something is red then it is rough.\nFOL: all x. (Red(x) & -Rough(x))\nTEXT: If something is round and young then it is rough.\nFOL: all x y. (Round(x) & Young(x) & -Rough(x) -> Rough(x))\nTEXT: If something is rough then it is young.\nFOL: all x. (Rough(x) & Young(x))\nTEXT: The cow needs the cow.\nFOL: all x. (Cow(x) & -Cow(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\nTEXT: Kind, round things are not red.\nFOL: all x. (Kind(x) & Round(x) & -Red(x))\nTEXT: All young, red things are not kind.\nFOL: all x. (Young(x) & Red(x) & -Kind(x))\nTEXT: All red, rough things are round.\nFOL: all x. (Red(x) & Rough(x) & Round(x))\nTEXT: All rough things are round.\nFOL: all x. (Rough(x) & Round(x))\nTEXT: If the cow is young and the cow is kind then the cow is round.\nFOL: all x y. (Young(x) & Kind(x) & -Round(x) -> Round(x))\nTEXT: If something is red then it is rough.\nFOL: all x. (Red(x) & -Rough(x))\nTEXT: If something is round and young then it is rough.\nFOL: all x y. (Round(x) & Young(x) & -Rough(x) -> Rough(x))\nTEXT: If something is rough then it is young.\nFOL: all x. (Rough(x) & Young(x))\nTEXT: The cow needs the cow.\nFOL: -Cow(x) & Cow(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\nTEXT: Kind, round things are not red.\nFOL: all x. (Kind(x) & Round(x) & -Red(x))\nTEXT: All young, red things are not kind.\nFOL: all x. (Young(x) & Red(x) & -Kind(x))\nTEXT: All red, rough things are round.\nFOL: all x. (Red(x) & Rough(x) & Round(x))\nTEXT: All rough things are round.\nFOL: all x. (Rough(x) & Round(x))\nTEXT: If the cow is young and the cow is kind then the cow is round.\nFOL: all x y. (Young(x) & Kind(x) & -Round(x) -> Round(x))\nTEXT: If something is red then it is rough.\nFOL: all x. (Red(x) & -Rough(x))\nTEXT: If something is round and young then it is rough.\nFOL: all x y. (Round(x) & Young(x) & -Rough(x) -> Rough(x))\nTEXT: If something is rough then it is young.\nFOL: all x. (Rough(x) & Young(x))\nTEXT: The cow needs the cow.\nFOL: all x. (Cow(x) & Cow(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> Red(x))\nTEXT: Kind, round things are not red.\nFOL: all x. (Kind(x) & Round(x) & -Red(x))\nTEXT: All young, red things are not kind.\nFOL: all x. (Young(x) & Red(x) & -Kind(x))\nTEXT: All red, rough things are round.\nFOL: all x. (Red(x) & Rough(x) & Round(x))\nTEXT: All rough things are round.\nFOL: all x. (Rough(x) & Round(x))\nTEXT: If the cow is young and the cow is kind then the cow is round.\nFOL: all x y. (Young(x) & Kind(x) & -Round(x) -> Round(x))\nTEXT: If something is red then it is rough.\nFOL: all x. (Red(x) & -Rough(x))\nTEXT: If something is round and young then it is rough.\nFOL: all x y. (Round(x) & Young(x) & -Rough(x) -> Rough(x))\nTEXT: If something is rough then it is young.\nFOL: all x. (Rough(x) & Young(x))\nTEXT: The cow needs the cow.\nFOL: all x. (Cow(x) & -Cow(x))"
  ]
 },
 {
  "index": 101,
  "responses": [
   "<EVALUATE>\nTEXT: The cow eats the squirrel.\nFOL: all x. (Cow(x) & Squirrel(x) & Eat(x, squirrel))\nTEXT: The squirrel eats the cow.\nFOL: all x. (Squirrel(x) & Cow(x) & Eat(x, squirrel))\nTEXT: The tiger likes the cow.\nFOL: all x. (Tiger(x) & Cow(x) & Like(x, tiger))\nTEXT: If something likes the tiger and it is nice then it eats the tiger.\nFOL: all x. (Like(x, tiger) & Nice(x) & Eat(x, tiger))\nTEXT: If something eats the cow then it likes the squirrel.\nFOL: all x. (Eat(x, cow) & Like(x, squirrel) & Like(x, tiger))\nTEXT: If something visits the squirrel then the squirrel visits the cow.\nFOL: all x. (Visit(x, squirrel) & Squirrel(x) & Visit(x, cow))\nTEXT: If the cow eats the tiger and the tiger visits the squirrel then the cow eats the squirrel.\nFOL: all x. (Eat(x, tiger) & Tiger(x) & Visit(x, squirrel) & Eat(x, squirrel))\nTEXT: If something visits the tiger and it eats the tiger then it is blue.\nFOL: all x. (Visit(x, tiger) & Eat(x, tiger) & Blue(x))\nTEXT: If something likes the squirrel then it visits the squirrel.\nFOL: all x. (Like(x, squirrel) & Visit(x, squirrel))\nTEXT: The cow eats the tiger.\nFOL: all x. (Cow(x) & Tiger(x) & Eat(x, tiger))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow eats the squirrel.\nFOL: all x. (Cow(x) & Squirrel(x) & Eat(x, squirrel))\nTEXT: The squirrel eats the cow.\nFOL: all x. (Squirrel(x) & Cow(x) & Eat(x, squirrel))\nTEXT: The tiger likes the cow.\nFOL: all x. (Tiger(x) & Cow(x) & Like(x, tiger))\nTEXT: If something likes the tiger and it is nice then it eats the tiger.\nFOL: all x. (Like(x, tiger) & Nice(x) & Eat(x, tiger))\nTEXT: If something eats the cow then it likes the squirrel.\nFOL: all x. (Eat(x, cow) & Like(x, squirrel) & Like(x, tiger))\nTEXT: If something visits the squirrel then the squirrel visits the cow.\nFOL: all x. (Visit(x, squirrel) & Squirrel(x) & Visit(x, cow))\nTEXT: If the cow eats the tiger and the tiger visits the squirrel then the cow eats the squirrel.\nFOL: all x. (Eat(x, tiger) & Tiger(x) & Visit(x, squirrel) & Eat(x, squirrel))\nTEXT: If something visits the tiger and it eats the tiger then it is blue.\nFOL: all x. (Visit(x, tiger) & Eat(x, tiger) & IsBlue(x))\nTEXT: If something likes the squirrel then it visits the squirrel.\nFOL: all x. (Like(x, squirrel) & Visit(x, squirrel))\nTEXT: The cow eats the tiger.\nFOL: all x. (Cow(x) & Tiger(x) & Eat(x, tiger))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow eats the squirrel.\nFOL: all x. (Cow(x) & Squirrel(x) -> Eat(x, cow))\nTEXT: The squirrel eats the cow.\nFOL: all x. (Squirrel(x) & Cow(x) -> Eat(x, squirrel))\nTEXT: The tiger likes the cow.\nFOL: all x. (Tiger(x) & Cow(x) -> Like(x, tiger))\nTEXT: If something likes the tiger and it is nice then it eats the tiger.\nFOL: all x. ((Like(x, tiger) & Nice(x)) -> Eat(x, tiger))\nTEXT: If something eats the cow then it likes the squirrel.\nFOL: all x. (Eat(x, cow) -> Like(x, squirrel))\nTEXT: If something visits the squirrel then the squirrel visits the cow.\nFOL: all x. (Visit(x, squirrel) -> Visit(x, cow))\nTEXT: If the cow eats the tiger and the tiger visits the squirrel then the cow eats the squirrel.\nFOL: all x. ((Eat(x, tiger) & Visit(x, squirrel)) -> Eat(x, cow))\nTEXT: If something visits the tiger and it eats the tiger then it is blue.\nFOL: all x. (Visit(x, tiger) & Eat(x, tiger) -> Blue(x))\nTEXT: If something likes the squirrel then it visits the squirrel.\nFOL: all x. (Like(x, squirrel) -> Visit(x, squirrel))\nTEXT: The cow eats the tiger.\nFOL: all x. (Cow(x) & Tiger(x) -> Eat(x, tiger))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow eats the squirrel.\nFOL: all x. (Cow(x) & Squirrel(x) & Eat(x, squirrel))\nTEXT: The squirrel eats the cow.\nFOL: all x. (Squirrel(x) & Cow(x) & Eat(x, squirrel))\nTEXT: The tiger likes the cow.\nFOL: all x. (Tiger(x) & Cow(x) & Like(x, tiger))\nTEXT: If something likes the tiger and it is nice then it eats the tiger.\nFOL: all x. (Like(x, tiger) & Nice(x) & Eat(x, tiger))\nTEXT: If something eats the cow then it likes the squirrel.\nFOL: all x. (Eat(x, cow) & Like(x, squirrel) & Like(x, tiger))\nTEXT: If something visits the squirrel then the squirrel visits the cow.\nFOL: all x. (Visit(x, squirrel) & Squirrel(x) & Visit(x, cow))\nTEXT: If the cow eats the tiger and the tiger visits the squirrel then the cow eats the squirrel.\nFOL: all x. (Eat(x, tiger) & Tiger(x) & Visit(x, squirrel) & Eat(x, squirrel))\nTEXT: If something visits the tiger and it eats the tiger then it is blue.\nFOL: all x. (Visit(x, tiger) & Eat(x, tiger) & Blue(x))\nTEXT: If something likes the squirrel then it visits the squirrel.\nFOL: all x. (Like(x, squirrel) & Visit(x, squirrel))\nTEXT: The cow eats the tiger.\nFOL: all x. (Cow(x) & Tiger(x) & Eat(x, tiger))",
   "<EVALUATE>\nTEXT: The cow eats the squirrel.\nFOL: all x. (Cow(x) & Squirrel(x) & Eat(x, squirrel))\nTEXT: The squirrel eats the cow.\nFOL: all x. (Squirrel(x) & Cow(x) & Eat(x, squirrel))\nTEXT: The tiger likes the cow.\nFOL: all x. (Tiger(x) & Cow(x) & Like(x, tiger))\nTEXT: If something likes the tiger and it is nice then it eats the tiger.\nFOL: all x. (Like(x, tiger) & Nice(x) & Eat(x, tiger))\nTEXT: If something eats the cow then it likes the squirrel.\nFOL: all x. (Eat(x, cow) & Like(x, squirrel) & Like(x, tiger))\nTEXT: If something visits the squirrel then the squirrel visits the cow.\nFOL: all x. (Visit(x, squirrel) & Squirrel(x) & Visit(x, cow))\nTEXT: If the cow eats the tiger and the tiger visits the squirrel then the cow eats the squirrel.\nFOL: all x. (Eat(x, tiger) & Tiger(x) & Visit(x, squirrel) & Eat(x, squirrel))\nTEXT: If something visits the tiger and it eats the tiger then it is blue.\nFOL: all x. (Visit(x, tiger) & Eat(x, tiger) & Blue(x))\nTEXT: If something likes the squirrel then it visits the squirrel.\nFOL: all x. (Like(x, squirrel) & Squirrel(x) & Visit(x))\nTEXT: The cow eats the tiger.\nFOL: all x. (Cow(x) & Tiger(x) & Eat(x, tiger))\n</EVALUATE>"
  ]
 },
 {
  "index": 102,
  "responses": [
   "<EVALUATE>\nTEXT: The cow visits the lion.\nFOL: all x y. (Cow(x) & Lion(y) & Visit(x, y) -> Lion(x, y))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion visits the cow.\nFOL: all x y. (Lion(x) & Cow(y) & Visit(x, y) -> Cow(x, y))\nTEXT: The rabbit eats the squirrel.\nFOL: all x y. (Rabbit(x) & Squirrel(y) & Eat(x, y) -> Squirrel(x, y))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) -> Kind(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> Round(x))\nTEXT: The rabbit visits the lion.\nFOL: all x y. (Rabbit(x) & Lion(y) & Visit(x, y) -> Lion(x, y))\nTEXT: The squirrel is big.\nFOL: all x. (Squirrel(x) -> Big(x))\nTEXT: The squirrel is green.\nFOL: all x. (Squirrel(x) -> Green(x))\nTEXT: The squirrel is round.\nFOL: all x. (Squirrel(x) -> Round(x))\nTEXT: If something needs the lion then it eats the squirrel.\nFOL: all x y. (Something(x) & Lion(y) & Need(x, y) & Eat(x, y) -> Squirrel(x, y))\nTEXT: If something eats the cow and the cow visits the rabbit then the cow needs the rabbit.\nFOL: all x y z. (Something(x) & Cow(y) & Visit(x, y) & Rabbit(z) & Need(x, y, z) -> Cow(x, y, z))\nTEXT: If something eats the squirrel and it is big then the squirrel visits the lion.\nFOL: all x y z. (Something(x) & Squirrel(y) & Big(z) & Lion(x, y, z) & Visit(x, y, z))\nTEXT: If something needs the squirrel then it is big.\nFOL: all x y z. (Something(x) & Squirrel(y) & Need(x, y, z) & Big(z))\nTEXT: If something needs the cow then it is nice.\nFOL: all x y z. (Something(x) & Cow(y) & Need(x, y, z) & Nice(z))\nTEXT: If something eats the lion and it eats the squirrel then it is green.\nFOL: all x y z. (Something(x) & Lion(y) & Eat(x, y) & Squirrel(z) & Green(z))\nTEXT: If something is round and nice then it needs the squirrel.\nFOL: all x y z. (Something(x) & Round(y) & Nice(z) & Squirrel(x, y, z))\nTEXT: If something eats the squirrel then it is nice.\nFOL: all x y z. (Something(x) & Squirrel(y) & Eat(x, y) & Nice(z))\nTEXT: The rabbit needs the squirrel.\nFOL: all x y z. (Rabbit(x) & Squirrel(y) & Need(x, y, z))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow visits the lion.\nFOL: all x y. (Cow(x) & Lion(y) & Visit(x, y) -> Lion(x, y))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion visits the cow.\nFOL: all x y. (Lion(x) & Cow(y) & Visit(x, y) -> Cow(x, y))\nTEXT: The rabbit eats the squirrel.\nFOL: all x y. (Rabbit(x) & Squirrel(y) & Eat(x, y) -> Squirrel(x, y))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) -> Kind(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> Round(x))\nTEXT: The rabbit visits the lion.\nFOL: all x y. (Rabbit(x) & Lion(y) & Visit(x, y) -> Lion(x, y))\nTEXT: The squirrel is big.\nFOL: all x. (Squirrel(x) -> Big(x))\nTEXT: The squirrel is green.\nFOL: all x. (Squirrel(x) -> Green(x))\nTEXT: The squirrel is round.\nFOL: all x. (Squirrel(x) -> Round(x))\nTEXT: If something needs the lion then it eats the squirrel.\nFOL: all x y. (Something(x) & Lion(y) & Need(x, y) & Eat(x, y) -> Squirrel(x, y))\nTEXT: If something eats the cow and the cow visits the rabbit then the cow needs the rabbit.\nFOL: all x y z. (Something(x) & Cow(y) & Visit(x, y) & Rabbit(z) & Need(x, y, z) -> Cow(x, y, z))\nTEXT: If something eats the squirrel and it is big then the squirrel visits the lion.\nFOL: all x y z. (Something(x) & Squirrel(y) & Big(z) & Lion(x, y, z) & Visit(x, y, z))\nTEXT: If something needs the squirrel then it is big.\nFOL: all x y z. (Something(x) & Squirrel(y) & Need(x, y, z) & Big(z))\nTEXT: If something needs the cow then it is nice.\nFOL: all x y z. (Something(x) & Cow(y) & Need(x, y, z) & Nice(z))\nTEXT: If something eats the lion and it eats the squirrel then it is green.\nFOL: all x y z. (Something(x) & Lion(y) & Eat(x, y) & Squirrel(z) & Green(z))\nTEXT: If something is round and nice then it needs the squirrel.\nFOL: all x y z. (Something(x) & Round(y) & Nice(z) & Squirrel(z))\nTEXT: If something eats the squirrel then it is nice.\nFOL: all x y z. (Something(x) & Squirrel(y) & Eat(x, y) & Nice(z))\nTEXT: The rabbit needs the squirrel.\nFOL: all x y z. (Rabbit(x) & Squirrel(y) & Need(x, y, z))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow visits the lion.\nFOL: all x y. (Cow(x) & Lion(y) & Visit(x, y) -> Lion(x, y))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion visits the cow.\nFOL: all x y. (Lion(x) & Cow(y) & Visit(x, y) -> Cow(x, y))\nTEXT: The rabbit eats the squirrel.\nFOL: all x y. (Rabbit(x) & Squirrel(y) & Eat(x, y) -> Squirrel(x, y))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) -> Kind(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> Round(x))\nTEXT: The rabbit visits the lion.\nFOL: all x y. (Rabbit(x) & Lion(y) & Visit(x, y) -> Lion(x, y))\nTEXT: The squirrel is big.\nFOL: all x. (Squirrel(x) -> Big(x))\nTEXT: The squirrel is green.\nFOL: all x. (Squirrel(x) -> Green(x))\nTEXT: The squirrel is round.\nFOL: all x. (Squirrel(x) -> Round(x))\nTEXT: If something needs the lion then it eats the squirrel.\nFOL: all x y. (Something(x) & Lion(y) & Need(x, y) & Eat(x, y) -> Squirrel(x, y))\nTEXT: If something eats the cow and the cow visits the rabbit then the cow needs the rabbit.\nFOL: all x y z. (Something(x) & Cow(y) & Visit(x, y) & Rabbit(z) & Need(x, y, z) -> Cow(x, y, z))\nTEXT: If something eats the squirrel and it is big then the squirrel visits the lion.\nFOL: all x y z. (Something(x) & Squirrel(y) & Big(z) & Lion(x, y, z) & Visit(x, y, z))\nTEXT: If something needs the squirrel then it is big.\nFOL: all x y z. (Something(x) & Squirrel(y) & Need(x, y, z) & Big(z))\nTEXT: If something needs the cow then it is nice.\nFOL: all x y z. (Something(x) & Cow(y) & Need(x, y, z) & Nice(z))\nTEXT: If something eats the lion and it eats the squirrel then it is green.\nFOL: all x y z. (Something(x) & Lion(y) & Eat(x, y) & Squirrel(z) & Green(z))\nTEXT: If something is round and nice then it needs the squirrel.\nFOL: all x y z. (Something(x) & Round(y) & Nice(z) & Squirrel(x, y, z))\nTEXT: If something eats the squirrel then it is nice.\nFOL: all x y z. (Something(x) & Squirrel(y) & Eat(x, y) & Nice(z))\nTEXT: The rabbit needs the squirrel.\nFOL: all x y z. (Rabbit(x) & Squirrel(y) & Need(x, y, z))",
   "<EVALUATE>\nTEXT: The cow visits the lion.\nFOL: all x y. (Cow(x) & Lion(y) & Visit(x, y) -> Lion(x, y))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion visits the cow.\nFOL: all x y. (Lion(x) & Cow(y) & Visit(x, y) -> Cow(x, y))\nTEXT: The rabbit eats the squirrel.\nFOL: all x y. (Rabbit(x) & Squirrel(y) & Eat(x, y) -> Squirrel(x, y))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) -> Kind(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> Round(x))\nTEXT: The rabbit visits the lion.\nFOL: all x y. (Rabbit(x) & Lion(y) & Visit(x, y) -> Lion(x, y))\nTEXT: The squirrel is big.\nFOL: all x. (Squirrel(x) -> Big(x))\nTEXT: The squirrel is green.\nFOL: all x. (Squirrel(x) -> Green(x))\nTEXT: The squirrel is round.\nFOL: all x. (Squirrel(x) -> Round(x))\nTEXT: If something needs the lion then it eats the squirrel.\nFOL: all x y. (Something(x) & Lion(y) & Need(x, y) & Eat(x, y) -> Squirrel(x, y))\nTEXT: If something eats the cow and the cow visits the rabbit then the cow needs the rabbit.\nFOL: all x y z. (Something(x) & Cow(y) & Visit(x, y) & Rabbit(z) & Need(x, y, z) -> Cow(x, y, z))\nTEXT: If something eats the squirrel and it is big then the squirrel visits the lion.\nFOL: all x y z. (Something(x) & Squirrel(y) & Big(z) & Lion(x, y, z) & Visit(x, y, z))\nTEXT: If something needs the squirrel then it is big.\nFOL: all x y. (Something(x) & Squirrel(y) & Need(x, y) & Big(x, y))\nTEXT: If something needs the cow then it is nice.\nFOL: all x y. (Something(x) & Cow(y) & Need(x, y) & Nice(x, y))\nTEXT: If something eats the lion and it eats the squirrel then it is green.\nFOL: all x y z. (Something(x) & Lion(y) & Eat(x, y) & Squirrel(z) & Eat(x, y, z) & Green(x, y, z))\nTEXT: If something is round and nice then it needs the squirrel.\nFOL: all x y. (Something(x) & Round(y) & Nice(x, y) & Need(x, y))\nTEXT: If something eats the squirrel then it is nice.\nFOL: all x y. (Something(x) & Squirrel(y) & Eat(x, y) & Nice(x, y))\nTEXT: The rabbit needs the squirrel.\nFOL: all x y. (Rabbit(x) & Squirrel(y) & Need(x, y))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow visits the lion.\nFOL: all x y. (Cow(x) & Lion(y) & Visit(x, y) -> Lion(x, y))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion visits the cow.\nFOL: all x y. (Lion(x) & Cow(y) & Visit(x, y) -> Cow(x, y))\nTEXT: The rabbit eats the squirrel.\nFOL: all x y. (Rabbit(x) & Squirrel(y) & Eat(x, y) -> Squirrel(x, y))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) -> Kind(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> Round(x))\nTEXT: The rabbit visits the lion.\nFOL: all x y. (Rabbit(x) & Lion(y) & Visit(x, y) -> Lion(x, y))\nTEXT: The squirrel is big.\nFOL: all x. (Squirrel(x) -> Big(x))\nTEXT: The squirrel is green.\nFOL: all x. (Squirrel(x) -> Green(x))\nTEXT: The squirrel is round.\nFOL: all x. (Squirrel(x) -> Round(x))\nTEXT: If something needs the lion then it eats the squirrel.\nFOL: all x y. (Something(x) & Lion(y) & Need(x, y) & Eat(x, y) -> Squirrel(x, y))\nTEXT: If something eats the cow and the cow visits the rabbit then the cow needs the rabbit.\nFOL: all x y z. (Something(x) & Cow(y) & Visit(x, y) & Rabbit(z) & Need(x, y, z) -> Cow(x, y, z))\nTEXT: If something eats the squirrel and it is big then the squirrel visits the lion.\nFOL: all x y z. (Something(x) & Squirrel(y) & Big(z) & Lion(x, y, z) & Visit(x, y, z))\nTEXT: If something needs the squirrel then it is big.\nFOL: all x y z. (Something(x) & Squirrel(y) & Need(x, y, z) & Big(z))\nTEXT: If something needs the cow then it is nice.\nFOL: all x y z. (Something(x) & Cow(y) & Need(x, y, z) & Nice(z))\nTEXT: If something eats the lion and it eats the squirrel then it is green.\nFOL: all x y z. (Something(x) & Lion(y) & Eat(x, y) & Squirrel(z) & Green(z))\nTEXT: If something is round and nice then it needs the squirrel.\nFOL: all x y z. (Something(x) & Round(y) & Nice(z) & Squirrel(x, y, z))\nTEXT: If something eats the squirrel then it is nice.\nFOL: all x y z. (Something(x) & Squirrel(y) & Eat(x, y) & Nice(z))\nTEXT: The rabbit needs the squirrel.\nFOL: all x y. (Rabbit(x) & Squirrel(y) & Need(x, y))\n</EVALUATE>"
  ]
 },
 {
  "index": 103,
  "responses": [
   "<EVALUATE>\nTEXT: Even though Bob is big and rough he is sometimes round and kind.\nFOL: all x. (Big(x) & Rough(x) & (Round(x) & -Kind(x)))\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: all x. (Wet(x) & -Cold(x))\nTEXT: He also looks green but big.\nFOL: all x. (Green(x) & -Big(x))\nTEXT: Eric is somehow red and kind and also green.\nFOL: all x. (Red(x) & Kind(x) & Green(x))\nTEXT: Gary is green and cold too.\nFOL: all x. (Green(x) & -Cold(x))\nTEXT: A big, rough person who is green in color is definitely young aged.\nFOL: all x. (Big(x) & Rough(x) & Green(x) & -Young(x))\nTEXT: Big, kind folks are green ones.\nFOL: all x. (Big(x) & Kind(x) & Green(x))\nTEXT: A nice but rough person will also be green and cold.\nFOL: all x. (Nice(x) & Rough(x) & Green(x) & -Cold(x))\nTEXT: A big round young person is often blue.\nFOL: all x. (Big(x) & Round(x) & Young(x) & -Blue(x))\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: all x. (Cold(x) & Rough(x) & Red(x) & -Kind(x))\nTEXT: People who are young are also blue.\nFOL: all x. (Young(x) & -Blue(x))\nTEXT: A person who is rough and young while being kind tends to be red.\nFOL: all x. (Young(x) & Rough(x) & Kind(x) & -Red(x))\nTEXT: Gary is not kind.\nFOL: -Kind(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Even though Bob is big and rough he is sometimes round and kind.\nFOL: all x. (Big(x) & Rough(x) & (Round(x) & -Kind(x)))\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: all x. (Wet(x) & -Cold(x))\nTEXT: He also looks green but big.\nFOL: all x. (Green(x) & -Big(x))\nTEXT: Eric is somehow red and kind and also green.\nFOL: all x. (Red(x) & Kind(x) & Green(x))\nTEXT: Gary is green and cold too.\nFOL: all x. (Green(x) & -Cold(x))\nTEXT: A big, rough person who is green in color is definitely young aged.\nFOL: all x. (Big(x) & Rough(x) & Green(x) & -Young(x))\nTEXT: Big, kind folks are green ones.\nFOL: all x. (Big(x) & Kind(x) & Green(x))\nTEXT: A nice but rough person will also be green and cold.\nFOL: all x. (Nice(x) & Rough(x) & Green(x) & -Cold(x))\nTEXT: A big round young person is often blue.\nFOL: all x. (Big(x) & Round(x) & Young(x) & -Blue(x))\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: all x. (Cold(x) & Rough(x) & Red(x) & Kind(x))\nTEXT: People who are young are also blue.\nFOL: all x. (Young(x) & -Blue(x))\nTEXT: A person who is rough and young while being kind tends to be red.\nFOL: all x. (Young(x) & Rough(x) & Kind(x) & Red(x))\nTEXT: Gary is not kind.\nFOL: -Kind(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Even though Bob is big and rough he is sometimes round and kind.\nFOL: all x. (Big(x) & Rough(x) & (Round(x) & -Kind(x)))\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: all x. (Wet(x) & -Cold(x))\nTEXT: He also looks green but big.\nFOL: all x. (Green(x) & -Big(x))\nTEXT: Eric is somehow red and kind and also green.\nFOL: all x. (Red(x) & Kind(x) & Green(x))\nTEXT: Gary is green and cold too.\nFOL: all x. (Green(x) & -Cold(x))\nTEXT: A big, rough person who is green in color is definitely young aged.\nFOL: all x. (Big(x) & Rough(x) & Green(x) & -Young(x))\nTEXT: Big, kind folks are green ones.\nFOL: all x. (Big(x) & Kind(x) & Green(x))\nTEXT: A nice but rough person will also be green and cold.\nFOL: all x. (Nice(x) & Rough(x) & Green(x) & -Cold(x))\nTEXT: A big round young person is often blue.\nFOL: all x. (Big(x) & Round(x) & Young(x) & Blue(x))\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: all x. (Cold(x) & Rough(x) & Red(x) & Kind(x))\nTEXT: People who are young are also blue.\nFOL: all x. (Young(x) & -Blue(x))\nTEXT: A person who is rough and young while being kind tends to be red.\nFOL: all x. (Young(x) & Rough(x) & Kind(x) & Red(x))\nTEXT: Gary is not kind.\nFOL: -Kind(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Even though Bob is big and rough he is sometimes round and kind.\nFOL: all x. (Big(x) & Rough(x) & (Round(x) & -Kind(x)))\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: all x. (Wet(x) & -Cold(x))\nTEXT: He also looks green but big.\nFOL: all x. (Green(x) & -Big(x))\nTEXT: Eric is somehow red and kind and also green.\nFOL: all x. (Red(x) & Kind(x) & Green(x))\nTEXT: Gary is green and cold too.\nFOL: all x. (Green(x) & -Cold(x))\nTEXT: A big, rough person who is green in color is definitely young aged.\nFOL: all x. (Big(x) & Rough(x) & Green(x) & -Young(x))\nTEXT: Big, kind folks are green ones.\nFOL: all x. (Big(x) & Kind(x) & Green(x))\nTEXT: A nice but rough person will also be green and cold.\nFOL: all x. (Nice(x) & Rough(x) & Green(x) & -Cold(x))\nTEXT: A big round young person is often blue.\nFOL: all x. (Big(x) & Round(x) & Young(x) & -Blue(x))\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: all x. (Cold(x) & Rough(x) & Red(x) & -Kind(x))\nTEXT: People who are young are also blue.\nFOL: all x. (Young(x) & -Blue(x))\nTEXT: A person who is rough and young while being kind tends to be red.\nFOL: all x. (Young(x) & Rough(x) & -Kind(x) & Red(x))\nTEXT: Gary is not kind.\nFOL: -Kind(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Even though Bob is big and rough he is sometimes round and kind.\nFOL: all x. (Big(x) & Rough(x) & (Round(x) & -Kind(x)))\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: all x. (Wet(x) & -Cold(x))\nTEXT: He also looks green but big.\nFOL: all x. (Green(x) & -Big(x))\nTEXT: Eric is somehow red and kind and also green.\nFOL: all x. (Red(x) & Kind(x) & Green(x))\nTEXT: Gary is green and cold too.\nFOL: all x. (Green(x) & -Cold(x))\nTEXT: A big, rough person who is green in color is definitely young aged.\nFOL: all x. (Big(x) & Rough(x) & Green(x) & -Young(x))\nTEXT: Big, kind folks are green ones.\nFOL: all x. (Big(x) & Kind(x) & Green(x))\nTEXT: A nice but rough person will also be green and cold.\nFOL: all x. (Nice(x) & Rough(x) & Green(x) & -Cold(x))\nTEXT: A big round young person is often blue.\nFOL: all x. (Big(x) & Round(x) & Young(x) & -Blue(x))\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: all x. (Cold(x) & Rough(x) & Red(x) & Kind(x))\nTEXT: People who are young are also blue.\nFOL: all x. (Young(x) & -Blue(x))\nTEXT: A person who is rough and young while being kind tends to be red.\nFOL: all x. (Young(x) & Rough(x) & Kind(x) & Red(x))\nTEXT: Gary is not kind.\nFOL: -Kind(gary)"
  ]
 },
 {
  "index": 104,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is nice.\nFOL: all x. (Bob(x) -> Nice(x))\nTEXT: Bob is quiet.\nFOL: all x. (Bob(x) -> -Quiet(x))\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> -Big(x))\nTEXT: Dave is not nice.\nFOL: all x. (Dave(x) -> -Nice(x))\nTEXT: Erin is furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Erin is nice.\nFOL: all x. (Erin(x) -> Nice(x))\nTEXT: Erin is red.\nFOL: all x. (Erin(x) -> -Red(x))\nTEXT: Erin is round.\nFOL: all x. (Erin(x) -> -Round(x))\nTEXT: Erin is smart.\nFOL: all x. (Erin(x) -> -Smart(x))\nTEXT: Harry is not big.\nFOL: all x. (Harry(x) -> -Big(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> -Furry(x))\nTEXT: Harry is nice.\nFOL: all x. (Harry(x) -> Nice(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> -Quiet(x))\nTEXT: Harry is red.\nFOL: all x. (Harry(x) -> -Red(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> -Round(x))\nTEXT: If someone is furry then they are quiet.\nFOL: -Furry(x) -> -Quiet(x)\nTEXT: All round people are quiet.\nFOL: -Round(x) -> -Quiet(x)\nTEXT: All furry, quiet people are round.\nFOL: -Furry(x) & -Quiet(x) -> -Round(x)\nTEXT: If Dave is big then Dave is furry.\nFOL: -Big(x) -> -Furry(x)\nTEXT: Round, smart people are nice.\nFOL: -Smart(x) -> -Nice(x)\nTEXT: Smart, quiet people are red.\nFOL: -Smart(x) & -Quiet(x) -> -Red(x)\nTEXT: If someone is furry and not big then they are smart.\nFOL: -Furry(x) & -Big(x) -> -Smart(x)\nTEXT: If someone is nice and not round then they are smart.\nFOL: -Nice(x) & -Round(x) -> -Smart(x)\nTEXT: Dave is not quiet.\nFOL: -Quiet(x) -> -NotQuiet(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is nice.\nFOL: all x. (Bob(x) -> Nice(x))\nTEXT: Bob is quiet.\nFOL: all x. (Bob(x) -> -Quiet(x))\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> -Big(x))\nTEXT: Dave is not nice.\nFOL: all x. (Dave(x) -> -Nice(x))\nTEXT: Erin is furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Erin is nice.\nFOL: all x. (Erin(x) -> Nice(x))\nTEXT: Erin is red.\nFOL: all x. (Erin(x) -> -Red(x))\nTEXT: Erin is round.\nFOL: all x. (Erin(x) -> -Round(x))\nTEXT: Erin is smart.\nFOL: all x. (Erin(x) -> -Smart(x))\nTEXT: Harry is not big.\nFOL: all x. (Harry(x) -> -Big(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> -Furry(x))\nTEXT: Harry is nice.\nFOL: all x. (Harry(x) -> Nice(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> -Quiet(x))\nTEXT: Harry is red.\nFOL: all x. (Harry(x) -> -Red(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> -Round(x))\nTEXT: If someone is furry then they are quiet.\nFOL: -Furry(x) -> -Quiet(x)\nTEXT: All round people are quiet.\nFOL: -Round(x) -> -Quiet(x)\nTEXT: All furry, quiet people are round.\nFOL: -Furry(x) & -Quiet(x) -> -Round(x)\nTEXT: If Dave is big then Dave is furry.\nFOL: -Big(x) -> -Furry(x)\nTEXT: Round, smart people are nice.\nFOL: -Round(x) -> -Smart(x)\nTEXT: Smart, quiet people are red.\nFOL: -Smart(x) -> -Quiet(x)\nTEXT: If someone is furry and not big then they are smart.\nFOL: -Furry(x) & -Big(x) -> -Smart(x)\nTEXT: If someone is nice and not round then they are smart.\nFOL: -Nice(x) & -Round(x) -> -Smart(x)\nTEXT: Dave is not quiet.\nFOL: -Quiet(x) -> -NotQuiet(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is nice.\nFOL: all x. (Bob(x) -> Nice(x))\nTEXT: Bob is quiet.\nFOL: all x. (Bob(x) -> -Quiet(x))\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> -Big(x))\nTEXT: Dave is not nice.\nFOL: all x. (Dave(x) -> -Nice(x))\nTEXT: Erin is furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Erin is nice.\nFOL: all x. (Erin(x) -> Nice(x))\nTEXT: Erin is red.\nFOL: all x. (Erin(x) -> -Red(x))\nTEXT: Erin is round.\nFOL: all x. (Erin(x) -> -Round(x))\nTEXT: Erin is smart.\nFOL: all x. (Erin(x) -> -Smart(x))\nTEXT: Harry is not big.\nFOL: all x. (Harry(x) -> -Big(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> -Furry(x))\nTEXT: Harry is nice.\nFOL: all x. (Harry(x) -> Nice(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> -Quiet(x))\nTEXT: Harry is red.\nFOL: all x. (Harry(x) -> -Red(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> -Round(x))\nTEXT: If someone is furry then they are quiet.\nFOL: all x. (Furry(x) -> -Quiet(x))\nTEXT: All round people are quiet.\nFOL: all x. (Round(x) -> -Quiet(x))\nTEXT: All furry, quiet people are round.\nFOL: all x. (Furry(x) & Quiet(x) -> Round(x))\nTEXT: If Dave is big then Dave is furry.\nFOL: all x. (Big(x) -> -Furry(x))\nTEXT: Round, smart people are nice.\nFOL: all x. (Round(x) & Smart(x) -> Nice(x))\nTEXT: Smart, quiet people are red.\nFOL: all x. (Smart(x) & Quiet(x) -> -Red(x))\nTEXT: If someone is furry and not big then they are smart.\nFOL: all x. (Furry(x) & -Big(x) -> Smart(x))\nTEXT: If someone is nice and not round then they are smart.\nFOL: all x. (Nice(x) & -Round(x) -> Smart(x))\nTEXT: Dave is not quiet.\nFOL: -Quiet(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is nice.\nFOL: all x. (Bob(x) -> Nice(x))\nTEXT: Bob is quiet.\nFOL: all x. (Bob(x) -> -Quiet(x))\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> -Big(x))\nTEXT: Dave is not nice.\nFOL: all x. (Dave(x) -> -Nice(x))\nTEXT: Erin is furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Erin is nice.\nFOL: all x. (Erin(x) -> Nice(x))\nTEXT: Erin is red.\nFOL: all x. (Erin(x) -> -Red(x))\nTEXT: Erin is round.\nFOL: all x. (Erin(x) -> -Round(x))\nTEXT: Erin is smart.\nFOL: all x. (Erin(x) -> -Smart(x))\nTEXT: Harry is not big.\nFOL: all x. (Harry(x) -> -Big(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> -Furry(x))\nTEXT: Harry is nice.\nFOL: all x. (Harry(x) -> Nice(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> -Quiet(x))\nTEXT: Harry is red.\nFOL: all x. (Harry(x) -> -Red(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> -Round(x))\nTEXT: If someone is furry then they are quiet.\nFOL: -Furry(x) -> -Quiet(x)\nTEXT: All round people are quiet.\nFOL: -Round(x) -> -Quiet(x)\nTEXT: All furry, quiet people are round.\nFOL: -Furry(x) & -Quiet(x) -> -Round(x)\nTEXT: If Dave is big then Dave is furry.\nFOL: -Big(x) -> -Furry(x)\nTEXT: Round, smart people are nice.\nFOL: -Smart(x) -> -Nice(x)\nTEXT: Smart, quiet people are red.\nFOL: -Smart(x) -> -Quiet(x) & -Red(x)\nTEXT: If someone is furry and not big then they are smart.\nFOL: -Furry(x) & -Big(x) -> -Smart(x)\nTEXT: If someone is nice and not round then they are smart.\nFOL: -Nice(x) & -Round(x) -> -Smart(x)\nTEXT: Dave is not quiet.\nFOL: -Quiet(x) -> -NotQuiet(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is nice.\nFOL: all x. (Bob(x) -> Nice(x))\nTEXT: Bob is quiet.\nFOL: all x. (Bob(x) -> -Quiet(x))\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> -Big(x))\nTEXT: Dave is not nice.\nFOL: all x. (Dave(x) -> -Nice(x))\nTEXT: Erin is furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Erin is nice.\nFOL: all x. (Erin(x) -> Nice(x))\nTEXT: Erin is red.\nFOL: all x. (Erin(x) -> -Red(x))\nTEXT: Erin is round.\nFOL: all x. (Erin(x) -> -Round(x))\nTEXT: Erin is smart.\nFOL: all x. (Erin(x) -> -Smart(x))\nTEXT: Harry is not big.\nFOL: all x. (Harry(x) -> -Big(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> -Furry(x))\nTEXT: Harry is nice.\nFOL: all x. (Harry(x) -> Nice(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> -Quiet(x))\nTEXT: Harry is red.\nFOL: all x. (Harry(x) -> -Red(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> -Round(x))\nTEXT: If someone is furry then they are quiet.\nFOL: all x. (Furry(x) -> -Quiet(x))\nTEXT: All round people are quiet.\nFOL: all x. (Round(x) -> -Quiet(x))\nTEXT: All furry, quiet people are round.\nFOL: all x. (Furry(x) & Quiet(x) -> Round(x))\nTEXT: If Dave is big then Dave is furry.\nFOL: all x. (Big(x) -> -Furry(x))\nTEXT: Round, smart people are nice.\nFOL: all x. (Round(x) & Smart(x) -> Nice(x))\nTEXT: Smart, quiet people are red.\nFOL: all x. (Smart(x) & Quiet(x) -> -Red(x))\nTEXT: If someone is furry and not big then they are smart.\nFOL: all x. (Furry(x) & -Big(x) -> Smart(x))\nTEXT: If someone is nice and not round then they are smart.\nFOL: all x. (Nice(x) & -Round(x) -> Smart(x))\nTEXT: Dave is not quiet.\nFOL: -Quiet(dave)"
  ]
 },
 {
  "index": 105,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: all x y. (BaldEagle(x) & Dog(x) & -Chase(x, y) -> y)\nTEXT: The bald eagle eats the squirrel.\nFOL: all x y. (BaldEagle(x) & Squirrel(x) & -Eat(x, y) -> y)\nTEXT: The bald eagle is young.\nFOL: all x y. (BaldEagle(x) & Young(x) -> y)\nTEXT: The dog chases the bald eagle.\nFOL: all x y. (Dog(x) & BaldEagle(x) & -Chase(x, y) -> y)\nTEXT: The dog chases the squirrel.\nFOL: all x y. (Dog(x) & Squirrel(x) & -Chase(x, y) -> y)\nTEXT: The squirrel chases the dog.\nFOL: all x y. (Squirrel(x) & Dog(x) & -Chase(x, y) -> y)\nTEXT: The squirrel eats the bald eagle.\nFOL: all x y. (Squirrel(x) & BaldEagle(x) & -Eat(x, y) -> y)\nTEXT: The squirrel is nice.\nFOL: all x y. (Squirrel(x) & Nice(x) -> y)\nTEXT: The squirrel is red.\nFOL: all x y. (Squirrel(x) & Red(x) -> y)\nTEXT: The squirrel visits the bald eagle.\nFOL: all x y. (Squirrel(x) & BaldEagle(x) & -Visit(x, y) -> y)\nTEXT: If something chases the dog and it visits the dog then the dog visits the squirrel.\nFOL: all x y. (Chase(x, dog) & Visit(x, dog) & -Visit(x, y) -> y)\nTEXT: If something is kind and it visits the dog then the dog is nice.\nFOL: all x y. (IsKind(x) & Visit(x, dog) & -Visit(x, y) -> y)\nTEXT: If the squirrel is kind then the squirrel is nice.\nFOL: all x y. (IsKind(x) & Nice(x) -> y)\nTEXT: If something is red then it is nice.\nFOL: all x y. (IsRed(x) & Nice(x) -> y)\nTEXT: If something visits the bald eagle then the bald eagle visits the squirrel.\nFOL: all x y. (Visit(x, baldEagle) & -Visit(x, y) -> y)\nTEXT: If something visits the dog then the dog chases the squirrel.\nFOL: all x y. (Visit(x, dog) & -Visit(x, y) -> y)\nTEXT: If something chases the dog and the dog is young then it visits the dog.\nFOL: all x y. (Chase(x, dog) & Young(x) & -Visit(x, y) -> y)\nTEXT: If something is kind then it visits the dog.\nFOL: all x y. (IsKind(x) & -Visit(x, y) -> y)\nTEXT: The bald eagle does not visit the squirrel.\nFOL: -Visit(baldEagle, squirrel)",
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: all x y. (BaldEagle(x) & Dog(x) & -Chase(x, y) -> y)\nTEXT: The bald eagle eats the squirrel.\nFOL: all x y. (BaldEagle(x) & Squirrel(x) & -Eat(x, y) -> y)\nTEXT: The bald eagle is young.\nFOL: all x y. (BaldEagle(x) & Young(x) -> y)\nTEXT: The dog chases the bald eagle.\nFOL: all x y. (Dog(x) & BaldEagle(x) & -Chase(x, y) -> y)\nTEXT: The dog chases the squirrel.\nFOL: all x y. (Dog(x) & Squirrel(x) & -Chase(x, y) -> y)\nTEXT: The squirrel chases the dog.\nFOL: all x y. (Squirrel(x) & Dog(x) & -Chase(x, y) -> y)\nTEXT: The squirrel eats the bald eagle.\nFOL: all x y. (Squirrel(x) & BaldEagle(x) & -Eat(x, y) -> y)\nTEXT: The squirrel is nice.\nFOL: all x y. (Squirrel(x) & Nice(x) -> y)\nTEXT: The squirrel is red.\nFOL: all x y. (Squirrel(x) & Red(x) -> y)\nTEXT: The squirrel visits the bald eagle.\nFOL: all x y. (Squirrel(x) & BaldEagle(x) & -Visit(x, y) -> y)\nTEXT: If something chases the dog and it visits the dog then the dog visits the squirrel.\nFOL: all x y. (Chase(x, dog) & Visit(x, dog) & -Visit(x, y) -> y)\nTEXT: If something is kind and it visits the dog then the dog is nice.\nFOL: all x y. (Kind(x) & Visit(x, dog) & -Nice(x, y) -> y)\nTEXT: If the squirrel is kind then the squirrel is nice.\nFOL: all x y. (Kind(x) & Nice(x) -> y)\nTEXT: If something is red then it is nice.\nFOL: all x y. (Red(x) & Nice(x) -> y)\nTEXT: If something visits the bald eagle then the bald eagle visits the squirrel.\nFOL: all x y. (Visit(x, baldEagle) & -Visit(x, y) -> y)\nTEXT: If something visits the dog then the dog chases the squirrel.\nFOL: all x y. (Visit(x, dog) & -Visit(x, y) -> y)\nTEXT: If something chases the dog and the dog is young then it visits the dog.\nFOL: all x y. (Chase(x, dog) & Young(x) & -Visit(x, y) -> y)\nTEXT: If something is kind then it visits the dog.\nFOL: all x y. (Kind(x) & -Visit(x, y) -> y)\nTEXT: The bald eagle does not visit the squirrel.\nFOL: -Visit(baldEagle, squirrel)",
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: all x y. (BaldEagle(x) & Dog(x) & -Chase(x, y) -> y)\nTEXT: The bald eagle eats the squirrel.\nFOL: all x y. (BaldEagle(x) & Squirrel(x) & -Eat(x, y) -> y)\nTEXT: The bald eagle is young.\nFOL: all x y. (BaldEagle(x) & Young(x) -> y)\nTEXT: The dog chases the bald eagle.\nFOL: all x y. (Dog(x) & BaldEagle(x) & -Chase(x, y) -> y)\nTEXT: The dog chases the squirrel.\nFOL: all x y. (Dog(x) & Squirrel(x) & -Chase(x, y) -> y)\nTEXT: The squirrel chases the dog.\nFOL: all x y. (Squirrel(x) & Dog(x) & -Chase(x, y) -> y)\nTEXT: The squirrel eats the bald eagle.\nFOL: all x y. (Squirrel(x) & BaldEagle(x) & -Eat(x, y) -> y)\nTEXT: The squirrel is nice.\nFOL: all x y. (Squirrel(x) & Nice(x) -> y)\nTEXT: The squirrel is red.\nFOL: all x y. (Squirrel(x) & Red(x) -> y)\nTEXT: The squirrel visits the bald eagle.\nFOL: all x y. (Squirrel(x) & BaldEagle(x) & -Visit(x, y) -> y)\nTEXT: If something chases the dog and it visits the dog then the dog visits the squirrel.\nFOL: all x y. (Chase(x, dog) & Visit(x, dog) & -Visit(x, y) -> y)\nTEXT: If something is kind and it visits the dog then the dog is nice.\nFOL: all x y. (IsKind(x) & Visit(x, dog) & -Nice(x, y) -> y)\nTEXT: If the squirrel is kind then the squirrel is nice.\nFOL: all x y. (IsKind(x) & Nice(x) -> y)\nTEXT: If something is red then it is nice.\nFOL: all x y. (IsRed(x) & Nice(x) -> y)\nTEXT: If something visits the bald eagle then the bald eagle visits the squirrel.\nFOL: all x y. (Visit(x, baldEagle) & -Visit(x, y) -> y)\nTEXT: If something visits the dog then the dog chases the squirrel.\nFOL: all x y. (Visit(x, dog) & -Visit(x, y) -> y)\nTEXT: If something chases the dog and the dog is young then it visits the dog.\nFOL: all x y. (Chase(x, dog) & Young(x) & -Visit(x, y) -> y)\nTEXT: If something is kind then it visits the dog.\nFOL: all x y. (IsKind(x) & -Visit(x, y) -> y)\nTEXT: The bald eagle does not visit the squirrel.\nFOL: -Visit(baldEagle, squirrel)",
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: all x y. (BaldEagle(x) & Dog(x) & -Chase(x, y) -> y)\nTEXT: The bald eagle eats the squirrel.\nFOL: all x y. (BaldEagle(x) & Squirrel(x) & -Eat(x, y) -> y)\nTEXT: The bald eagle is young.\nFOL: all x y. (BaldEagle(x) & Young(x) -> y)\nTEXT: The dog chases the bald eagle.\nFOL: all x y. (Dog(x) & BaldEagle(x) & -Chase(x, y) -> y)\nTEXT: The dog chases the squirrel.\nFOL: all x y. (Dog(x) & Squirrel(x) & -Chase(x, y) -> y)\nTEXT: The squirrel chases the dog.\nFOL: all x y. (Squirrel(x) & Dog(x) & -Chase(x, y) -> y)\nTEXT: The squirrel eats the bald eagle.\nFOL: all x y. (Squirrel(x) & BaldEagle(x) & -Eat(x, y) -> y)\nTEXT: The squirrel is nice.\nFOL: all x y. (Squirrel(x) & Nice(x) -> y)\nTEXT: The squirrel is red.\nFOL: all x y. (Squirrel(x) & Red(x) -> y)\nTEXT: The squirrel visits the bald eagle.\nFOL: all x y. (Squirrel(x) & BaldEagle(x) & -Visit(x, y) -> y)\nTEXT: If something chases the dog and it visits the dog then the dog visits the squirrel.\nFOL: all x y. (Chase(x, dog) & Visit(x, dog) & -Visit(x, y) -> y)\nTEXT: If something is kind and it visits the dog then the dog is nice.\nFOL: all x y. (IsKind(x) & Visit(x, dog) & -Nice(x, y) -> y)\nTEXT: If the squirrel is kind then the squirrel is nice.\nFOL: all x y. (IsKind(x) & Nice(x) -> y)\nTEXT: If something is red then it is nice.\nFOL: all x y. (IsRed(x) & Nice(x) -> y)\nTEXT: If something visits the bald eagle then the bald eagle visits the squirrel.\nFOL: all x y. (Visit(x, baldEagle) & -Visit(x, y) -> y)\nTEXT: If something visits the dog then the dog chases the squirrel.\nFOL: all x y. (Visit(x, dog) & -Visit(x, y) -> y)\nTEXT: If something chases the dog and the dog is young then it visits the dog.\nFOL: all x y. (Chase(x, dog) & Young(x) & -Visit(x, y) -> y)\nTEXT: If something is kind then it visits the dog.\nFOL: all x y. (IsKind(x) & Visit(x, dog) -> y)\nTEXT: The bald eagle does not visit the squirrel.\nFOL: -Visit(baldEagle, squirrel)",
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: all x y. (BaldEagle(x) & Dog(x) & -Chase(x, y) -> y)\nTEXT: The bald eagle eats the squirrel.\nFOL: all x y. (BaldEagle(x) & Squirrel(x) & -Eat(x, y) -> y)\nTEXT: The bald eagle is young.\nFOL: all x y. (BaldEagle(x) & Young(x) -> y)\nTEXT: The dog chases the bald eagle.\nFOL: all x y. (Dog(x) & BaldEagle(x) & -Chase(x, y) -> y)\nTEXT: The dog chases the squirrel.\nFOL: all x y. (Dog(x) & Squirrel(x) & -Chase(x, y) -> y)\nTEXT: The squirrel chases the dog.\nFOL: all x y. (Squirrel(x) & Dog(x) & -Chase(x, y) -> y)\nTEXT: The squirrel eats the bald eagle.\nFOL: all x y. (Squirrel(x) & BaldEagle(x) & -Eat(x, y) -> y)\nTEXT: The squirrel is nice.\nFOL: all x y. (Squirrel(x) & Nice(x) -> y)\nTEXT: The squirrel is red.\nFOL: all x y. (Squirrel(x) & Red(x) -> y)\nTEXT: The squirrel visits the bald eagle.\nFOL: all x y. (Squirrel(x) & BaldEagle(x) & -Visit(x, y) -> y)\nTEXT: If something chases the dog and it visits the dog then the dog visits the squirrel.\nFOL: all x y. (Chase(x, dog) & Visit(x, dog) & -Visit(x, y) -> y)\nTEXT: If something is kind and it visits the dog then the dog is nice.\nFOL: all x y. (IsKind(x) & Visit(x, dog) & -Visit(x, y) -> y)\nTEXT: If the squirrel is kind then the squirrel is nice.\nFOL: all x y. (IsKind(x) & Nice(x) -> y)\nTEXT: If something is red then it is nice.\nFOL: all x y. (IsRed(x) & Nice(x) -> y)\nTEXT: If something visits the bald eagle then the bald eagle visits the squirrel.\nFOL: all x y. (Visit(x, baldEagle) & -Visit(x, y) -> y)\nTEXT: If something visits the dog then the dog chases the squirrel.\nFOL: all x y. (Visit(x, dog) & -Visit(x, y) -> y)\nTEXT: If something chases the dog and the dog is young then it visits the dog.\nFOL: all x y. (Chase(x, dog) & Young(x) & -Visit(x, y) -> y)\nTEXT: If something is kind then it visits the dog.\nFOL: all x y. (IsKind(x) & Visit(x, dog) -> y)\nTEXT: The bald eagle does not visit the squirrel.\nFOL: -Visit(baldEagle, squirrel)"
  ]
 },
 {
  "index": 106,
  "responses": [
   "<EVALUATE>\nTEXT: The cat eats the cow.\nFOL: all x. (Cat(x) & Eat(x) & Cow(x))\nTEXT: The cow chases the cat.\nFOL: all x. (Cow(x) & Chases(x) & Cat(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) & -IsBlue(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) & -IsRed(x))\nTEXT: The cow visits the cat.\nFOL: all x. (Cow(x) & Visit(x) & Cat(x))\nTEXT: The lion visits the cat.\nFOL: all x. (Lion(x) & Visit(x) & Cat(x))\nTEXT: The lion visits the cow.\nFOL: all x. (Lion(x) & Visit(x) & Cow(x))\nTEXT: If the lion chases the cat and the cat eats the lion then the cat visits the cow.\nFOL: all x y. (Lion(x) & Chases(x) & Cat(x) & Eat(x) & Cat(x) & Visit(x) & Cow(x))\nTEXT: If someone visits the lion then they visit the cow.\nFOL: all x y. (Someone(x) & Visit(x) & Lion(x) & Visit(x) & Cow(x))\nTEXT: If someone eats the cow and the cow chases the cat then they visit the lion.\nFOL: all x y. (Someone(x) & Eat(x) & Cow(x) & Chases(x) & Cat(x) & Visit(x) & Lion(x))\nTEXT: If someone visits the cow and the cow visits the cat then they chase the cow.\nFOL: all x y. (Someone(x) & Visit(x) & Cow(x) & Visit(x) & Cat(x) & Chases(x) & Cow(x))\nTEXT: If someone chases the lion then the lion eats the cat.\nFOL: all x y. (Someone(x) & Chases(x) & Lion(x) & Eat(x) & Cat(x))\nTEXT: If someone visits the lion and the lion chases the cow then they are green.\nFOL: all x y. (Someone(x) & Visit(x) & Lion(x) & Chases(x) & Cow(x) & Green(x))\nTEXT: The cow is rough.\nFOL: all x. (Cow(x) & -IsRough(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the cow.\nFOL: all x. (Cat(x) & Eat(x) & Cow(x))\nTEXT: The cow chases the cat.\nFOL: all x. (Cow(x) & Chase(x) & Cat(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) & -Blue(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) & -Red(x))\nTEXT: The cow visits the cat.\nFOL: all x. (Cow(x) & Visit(x) & Cat(x))\nTEXT: The lion visits the cat.\nFOL: all x. (Lion(x) & Visit(x) & Cat(x))\nTEXT: The lion visits the cow.\nFOL: all x. (Lion(x) & Visit(x) & Cow(x))\nTEXT: If the lion chases the cat and the cat eats the lion then the cat visits the cow.\nFOL: all x y. (Lion(x) & Chase(x) & Cat(x) & Eat(x) & Cat(x) & Visit(x) & Cow(x))\nTEXT: If someone visits the lion then they visit the cow.\nFOL: all x. (Someone(x) & Visit(x) & Lion(x) & Visit(x) & Cow(x))\nTEXT: If someone eats the cow and the cow chases the cat then they visit the lion.\nFOL: all x y. (Someone(x) & Eat(x) & Cow(x) & Chase(x) & Cat(x) & Visit(x) & Lion(x))\nTEXT: If someone visits the cow and the cow visits the cat then they chase the cow.\nFOL: all x y. (Someone(x) & Visit(x) & Cow(x) & Visit(x) & Cat(x) & Chase(x) & Cow(x))\nTEXT: If someone chases the lion then the lion eats the cat.\nFOL: all x y. (Someone(x) & Chase(x) & Lion(x) & Eat(x) & Cat(x))\nTEXT: If someone visits the lion and the lion chases the cow then they are green.\nFOL: all x y. (Someone(x) & Visit(x) & Lion(x) & Chase(x) & Cow(x) & Green(x))\nTEXT: The cow is rough.\nFOL: all x. (Cow(x) & -Rough(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the cow.\nFOL: all x. (Cat(x) & Eat(x) & Cow(x))\nTEXT: The cow chases the cat.\nFOL: all x. (Cow(x) & Chases(x) & Cat(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) & -IsBlue(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) & -IsRed(x))\nTEXT: The cow visits the cat.\nFOL: all x. (Cow(x) & Visit(x) & Cat(x))\nTEXT: The lion visits the cat.\nFOL: all x. (Lion(x) & Visit(x) & Cat(x))\nTEXT: The lion visits the cow.\nFOL: all x. (Lion(x) & Visit(x) & Cow(x))\nTEXT: If the lion chases the cat and the cat eats the lion then the cat visits the cow.\nFOL: all x y. (Lion(x) & Chases(x) & Cat(x) & Eat(x) & Cat(x) & Visit(x) & Cow(x))\nTEXT: If someone visits the lion then they visit the cow.\nFOL: all x. (Someone(x) & Visit(x) & Lion(x) & Visit(x) & Cow(x))\nTEXT: If someone eats the cow and the cow chases the cat then they visit the lion.\nFOL: all x y. (Someone(x) & Eat(x) & Cow(x) & Chases(x) & Cat(x) & Visit(x) & Lion(x))\nTEXT: If someone visits the cow and the cow visits the cat then they chase the cow.\nFOL: all x y. (Someone(x) & Visit(x) & Cow(x) & Visit(x) & Cat(x) & Chases(x) & Cow(x))\nTEXT: If someone chases the lion then the lion eats the cat.\nFOL: all x y. (Someone(x) & Chases(x) & Lion(x) & Eat(x) & Cat(x))\nTEXT: If someone visits the lion and the lion chases the cow then they are green.\nFOL: all x y. (Someone(x) & Visit(x) & Lion(x) & Chases(x) & Cow(x) & Green(x))\nTEXT: The cow is rough.\nFOL: all x. (Cow(x) & -IsRough(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the cow.\nFOL: all x. (Cat(x) & Eat(x) & Cow(x))\nTEXT: The cow chases the cat.\nFOL: all x. (Cow(x) & Chase(x) & Cat(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) & -Blue(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) & -Red(x))\nTEXT: The cow visits the cat.\nFOL: all x. (Cow(x) & Visit(x) & Cat(x))\nTEXT: The lion visits the cat.\nFOL: all x. (Lion(x) & Visit(x) & Cat(x))\nTEXT: The lion visits the cow.\nFOL: all x. (Lion(x) & Visit(x) & Cow(x))\nTEXT: If the lion chases the cat and the cat eats the lion then the cat visits the cow.\nFOL: all x y. (Lion(x) & Chase(x) & Cat(x) & Eat(x) & Cat(x) & Visit(x) & Cow(x))\nTEXT: If someone visits the lion then they visit the cow.\nFOL: all x. (Someone(x) & Visit(x) & Lion(x) & Visit(x) & Cow(x))\nTEXT: If someone eats the cow and the cow chases the cat then they visit the lion.\nFOL: all x y. (Someone(x) & Eat(x) & Cow(x) & Chase(x) & Cat(x) & Visit(x) & Lion(x))\nTEXT: If someone visits the cow and the cow visits the cat then they chase the cow.\nFOL: all x y. (Someone(x) & Visit(x) & Cow(x) & Visit(x) & Cat(x) & Chase(x) & Cow(x))\nTEXT: If someone chases the lion then the lion eats the cat.\nFOL: all x y. (Someone(x) & Chase(x) & Lion(x) & Eat(x) & Cat(x))\nTEXT: If someone visits the lion and the lion chases the cow then they are green.\nFOL: all x y. (Someone(x) & Visit(x) & Lion(x) & Chase(x) & Cow(x) & Green(x))\nTEXT: The cow is rough.\nFOL: all x. (Cow(x) & -Rough(x))",
   "<EVALUATE>\nTEXT: The cat eats the cow.\nFOL: all x. (Cat(x) & Eat(x) & Cow(x))\nTEXT: The cow chases the cat.\nFOL: all x. (Cow(x) & Chases(x) & Cat(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) & -IsBlue(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) & -IsRed(x))\nTEXT: The cow visits the cat.\nFOL: all x. (Cow(x) & Visit(x) & Cat(x))\nTEXT: The lion visits the cat.\nFOL: all x. (Lion(x) & Visit(x) & Cat(x))\nTEXT: The lion visits the cow.\nFOL: all x. (Lion(x) & Visit(x) & Cow(x))\nTEXT: If the lion chases the cat and the cat eats the lion then the cat visits the cow.\nFOL: all x y. (Lion(x) & Chases(x) & Cat(x) & Eat(x) & Cat(x) & Visit(x) & Cow(x))\nTEXT: If someone visits the lion then they visit the cow.\nFOL: all x y. (Someone(x) & Visit(x) & Lion(x) & Visit(x) & Cow(x))\nTEXT: If someone eats the cow and the cow chases the cat then they visit the lion.\nFOL: all x y. (Someone(x) & Eat(x) & Cow(x) & Chases(x) & Cat(x) & Visit(x) & Lion(x))\nTEXT: If someone visits the cow and the cow visits the cat then they chase the cow.\nFOL: all x y. (Someone(x) & Visit(x) & Cow(x) & Visit(x) & Cat(x) & Chases(x) & Cow(x))\nTEXT: If someone chases the lion then the lion eats the cat.\nFOL: all x y. (Someone(x) & Chases(x) & Lion(x) & Eat(x) & Cat(x))\nTEXT: If someone visits the lion and the lion chases the cow then they are green.\nFOL: all x y. (Someone(x) & Visit(x) & Lion(x) & Chases(x) & Cow(x) & Green(x))\nTEXT: The cow is rough.\nFOL: all x. (Cow(x) & -IsRough(x))"
  ]
 },
 {
  "index": 107,
  "responses": [
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: all x. (Bear(x) -> Nice(x))\nTEXT: The mouse needs the tiger.\nFOL: all x. (Mouse(x) -> Tiger(x) & Need(x))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) -> Kind(x))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) -> Green(x))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x y. (Need(x) & Tiger(x) -> Eat(x))\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x y. (Green(x) & Chases(x) & Rabbit(x) -> Tiger(x))\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x y. (Nice(x) & Chases(x) & Rabbit(x) -> Eat(x))\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x y. (Chases(x) & Bear(x) -> Eat(x))\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x y. (Chases(x) & Bear(x) -> Chases(x))\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: all x y. (Bear(x) & Rough(x) & Need(x) & Rabbit(x) -> Green(x))\nTEXT: If something is kind then it needs the mouse.\nFOL: all x y. (Kind(x) & Need(x) & Mouse(x))\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x y. (Eat(x) & Tiger(x) -> Chases(x))\nTEXT: The mouse does not chase the bear.\nFOL: -Chases(mouse, bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: all x. (Bear(x) -> Nice(x))\nTEXT: The mouse needs the tiger.\nFOL: all x. (Mouse(x) -> Tiger(x) & Need(x))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) -> Kind(x))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) -> Green(x))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x y. (Need(x) & Tiger(x) -> Eat(x))\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x y. (Green(x) & Chases(x) & Rabbit(x) -> Chases(x))\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x y. (Nice(x) & Chases(x) & Rabbit(x) -> Eat(x))\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x y. (Chases(x) & Bear(x) -> Eat(x))\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x y. (Chases(x) & Bear(x) -> Chases(x))\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: all x y. (Bear(x) & Rough(x) & Need(x) & Rabbit(x) -> Green(x))\nTEXT: If something is kind then it needs the mouse.\nFOL: all x y. (Kind(x) & Need(x) & Mouse(x))\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x y. (Eat(x) & Tiger(x) -> Chases(x))\nTEXT: The mouse does not chase the bear.\nFOL: -Chases(mouse, bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: all x. (Bear(x) -> Nice(x))\nTEXT: The mouse needs the tiger.\nFOL: all x. (Mouse(x) -> Tiger(x) & Need(x))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) -> Kind(x))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) -> Green(x))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x y. (Need(x) & Tiger(x) -> Eat(x))\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x y. (Green(x) & Chases(x) & Rabbit(x) -> Tiger(x))\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x y. (Nice(x) & Chases(x) & Rabbit(x) -> Eat(x))\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x y. (Chases(x) & Bear(x) -> Eat(x))\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x y. (Chases(x) & Bear(x) -> Chases(x))\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: all x y. (Rough(x) & Bear(x) & Need(x) & Rabbit(x) -> Green(x))\nTEXT: If something is kind then it needs the mouse.\nFOL: all x y. (Kind(x) & Need(x) & Mouse(x))\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x y. (Eat(x) & Tiger(x) -> Chases(x))\nTEXT: The mouse does not chase the bear.\nFOL: -Chases(mouse, bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: all x. (Bear(x) -> Nice(x))\nTEXT: The mouse needs the tiger.\nFOL: all x. (Mouse(x) -> Tiger(x) & Need(x))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) -> Kind(x))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) -> Green(x))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x y. (Need(x) & Tiger(x) -> Eat(x))\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x y. (Green(x) & Chases(x) & Rabbit(x) -> Tiger(x))\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x y. (Nice(x) & Chases(x) & Rabbit(x) -> Eat(x))\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x y. (Chases(x) & Bear(x) -> Eat(x))\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x y. (Chases(x) & Bear(x) -> Chases(x))\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: all x y. (Bear(x) & Rough(x) & Need(x) & Rabbit(x) -> Green(x))\nTEXT: If something is kind then it needs the mouse.\nFOL: all x y. (Kind(x) & Need(x) & Mouse(x))\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x y. (Eat(x) & Tiger(x) -> Chases(x))\nTEXT: The mouse does not chase the bear.\nFOL: -Chases(mouse) & -Chases(bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: all x. (Bear(x) -> Nice(x))\nTEXT: The mouse needs the tiger.\nFOL: all x. (Mouse(x) -> Tiger(x) & Need(x))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) -> Kind(x))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) -> Green(x))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x y. (Need(x) & Tiger(x) -> Eat(x))\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x y. (Green(x) & Chases(x) & Rabbit(x) -> Chases(x))\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x y. (Nice(x) & Chases(x) & Rabbit(x) -> Eat(x))\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x y. (Chases(x) & Bear(x) -> Eat(x))\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x y. (Chases(x) & Bear(x) -> Chases(x))\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: all x y. (Bear(x) & Rough(x) & Need(x) & Rabbit(x) -> Green(x))\nTEXT: If something is kind then it needs the mouse.\nFOL: all x y. (Kind(x) & Need(x) & Mouse(x))\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x y. (Eat(x) & Tiger(x) -> Chases(x))\nTEXT: The mouse does not chase the bear.\nFOL: -Chases(mouse) & -Chases(bear)\n</EVALUATE>"
  ]
 },
 {
  "index": 108,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> Chases(x, dog))\nTEXT: The dog chases the squirrel.\nFOL: all x. (Dog(x) & Squirrel(x) -> Chases(x, squirrel))\nTEXT: The squirrel is rough.\nFOL: all x. (Squirrel(x) -> -Rough(x))\nTEXT: If something sees the squirrel then the squirrel sees the dog.\nFOL: all x y. (Something(x) & Squirrel(x) & Dog(x) -> Squirrel(x) & Dog(x))\nTEXT: If something sees the squirrel then the squirrel does not need the dog.\nFOL: all x y. (Something(x) & Squirrel(x) & Dog(x) -> -Squirrel(x) & Dog(x))\nTEXT: If something is nice then it does not see the bald eagle.\nFOL: all x y. (Something(x) & Nice(x) & BaldEagle(x) -> -Squirrel(x))\nTEXT: If something needs the bald eagle and the bald eagle needs the squirrel then it needs the squirrel.\nFOL: all x y. (Something(x) & BaldEagle(x) & Squirrel(x) -> Squirrel(x))\nTEXT: If something needs the squirrel then the squirrel chases the bald eagle.\nFOL: all x y. (Something(x) & Squirrel(x) & BaldEagle(x) -> Squirrel(x) & Chases(x, baldEagle))\nTEXT: If something chases the bald eagle then the bald eagle is cold.\nFOL: all x y. (Something(x) & BaldEagle(x) & Chases(x, baldEagle) -> BaldEagle(x) & -Cold(x))\nTEXT: If the dog chases the squirrel then the dog needs the squirrel.\nFOL: all x y. (Dog(x) & Squirrel(x) & Chases(x, squirrel) -> Dog(x) & -Squirrel(x))\nTEXT: If something is kind and not nice then it chases the squirrel.\nFOL: all x y. (Something(x) & Nice(x) & NotNice(x) & Squirrel(x) -> Squirrel(x) & Chases(x, squirrel))\nTEXT: The dog chases the squirrel.\nFOL: Dog(x) & Squirrel(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> Chases(x, dog))\nTEXT: The dog chases the squirrel.\nFOL: all x. (Dog(x) & Squirrel(x) -> Chases(x, squirrel))\nTEXT: The squirrel is rough.\nFOL: all x. (Squirrel(x) -> -Rough(x))\nTEXT: If something sees the squirrel then the squirrel sees the dog.\nFOL: all x y. (Something(x) & Squirrel(x) & Dog(x) -> Squirrel(x) & Dog(x))\nTEXT: If something sees the squirrel then the squirrel does not need the dog.\nFOL: all x y. (Something(x) & Squirrel(x) & Dog(x) -> -Squirrel(x) & Dog(x))\nTEXT: If something is nice then it does not see the bald eagle.\nFOL: all x y. (Something(x) & Nice(x) & BaldEagle(x) -> -Squirrel(x))\nTEXT: If something needs the bald eagle and the bald eagle needs the squirrel then it needs the squirrel.\nFOL: all x y. (Something(x) & BaldEagle(x) & Squirrel(x) -> Squirrel(x))\nTEXT: If something needs the squirrel then the squirrel chases the bald eagle.\nFOL: all x y. (Something(x) & Squirrel(x) & BaldEagle(x) -> Squirrel(x) & Chases(x, baldEagle))\nTEXT: If something chases the bald eagle then the bald eagle is cold.\nFOL: all x y. (Something(x) & BaldEagle(x) & Chases(x, baldEagle) -> BaldEagle(x) & -Cold(x))\nTEXT: If the dog chases the squirrel then the dog needs the squirrel.\nFOL: all x y. (Dog(x) & Squirrel(x) & Chases(x, squirrel) -> Dog(x) & Squirrel(x))\nTEXT: If something is kind and not nice then it chases the squirrel.\nFOL: all x y. (Something(x) & Nice(x) & NotNice(x) & Squirrel(x) -> Squirrel(x) & Chases(x, squirrel))\nTEXT: The dog chases the squirrel.\nFOL: Dog(x) & Squirrel(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> Chases(x, dog))\nTEXT: The dog chases the squirrel.\nFOL: all x. (Dog(x) & Squirrel(x) -> Chases(x, squirrel))\nTEXT: The squirrel is rough.\nFOL: all x. (Squirrel(x) -> -Rough(x))\nTEXT: If something sees the squirrel then the squirrel sees the dog.\nFOL: all x y. (Something(x) & Squirrel(x) & Dog(x) -> Squirrel(x) & Dog(x))\nTEXT: If something sees the squirrel then the squirrel does not need the dog.\nFOL: all x y. (Something(x) & Squirrel(x) & Dog(x) -> -Squirrel(x) & Dog(x))\nTEXT: If something is nice then it does not see the bald eagle.\nFOL: all x y. (Something(x) & Nice(x) & BaldEagle(x) -> -Squirrel(x))\nTEXT: If something needs the bald eagle and the bald eagle needs the squirrel then it needs the squirrel.\nFOL: all x y. (Something(x) & BaldEagle(x) & Squirrel(x) -> Squirrel(x))\nTEXT: If something needs the squirrel then the squirrel chases the bald eagle.\nFOL: all x y. (Something(x) & Squirrel(x) & BaldEagle(x) -> Squirrel(x) & Chases(x, baldEagle))\nTEXT: If something chases the bald eagle then the bald eagle is cold.\nFOL: all x y. (Something(x) & BaldEagle(x) & Chases(x, baldEagle) -> BaldEagle(x) & -Cold(x))\nTEXT: If the dog chases the squirrel then the dog needs the squirrel.\nFOL: all x y. (Dog(x) & Squirrel(x) & Chases(x, squirrel) -> Dog(x) & Squirrel(x))\nTEXT: If something is kind and not nice then it chases the squirrel.\nFOL: all x y. (Something(x) & Nice(x) & NotNice(x) & Squirrel(x) -> Squirrel(x))\nTEXT: The dog chases the squirrel.\nFOL: Dog(x) & Squirrel(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> Chases(x, dog))\nTEXT: The dog chases the squirrel.\nFOL: all x. (Dog(x) & Squirrel(x) -> Chases(x, squirrel))\nTEXT: The squirrel is rough.\nFOL: all x. (Squirrel(x) -> -Rough(x))\nTEXT: If something sees the squirrel then the squirrel sees the dog.\nFOL: all x y. (Something(x) & Squirrel(x) & Dog(x) -> Squirrel(x) & Dog(x))\nTEXT: If something sees the squirrel then the squirrel does not need the dog.\nFOL: all x y. (Something(x) & Squirrel(x) & Dog(x) -> -Squirrel(x) & Dog(x))\nTEXT: If something is nice then it does not see the bald eagle.\nFOL: all x y. (Something(x) & Nice(x) & BaldEagle(x) -> -Squirrel(x))\nTEXT: If something needs the bald eagle and the bald eagle needs the squirrel then it needs the squirrel.\nFOL: all x y. (Something(x) & BaldEagle(x) & Squirrel(x) -> Squirrel(x))\nTEXT: If something needs the squirrel then the squirrel chases the bald eagle.\nFOL: all x y. (Something(x) & Squirrel(x) & BaldEagle(x) -> Squirrel(x) & Chases(x, baldEagle))\nTEXT: If something chases the bald eagle then the bald eagle is cold.\nFOL: all x y. (Something(x) & BaldEagle(x) & Chases(x, baldEagle) -> BaldEagle(x) & -Cold(x))\nTEXT: If the dog chases the squirrel then the dog needs the squirrel.\nFOL: all x y. (Dog(x) & Squirrel(x) & Chases(x, squirrel) -> Dog(x) & -Squirrel(x))\nTEXT: If something is kind and not nice then it chases the squirrel.\nFOL: all x y. (Something(x) & Nice(x) & NotNice(x) & Squirrel(x) -> Squirrel(x) & Chases(x, squirrel))\nTEXT: The dog chases the squirrel.\nFOL: Dog(squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> Chases(x, dog))\nTEXT: The dog chases the squirrel.\nFOL: all x. (Dog(x) & Squirrel(x) -> Chases(x, squirrel))\nTEXT: The squirrel is rough.\nFOL: all x. (Squirrel(x) -> -Rough(x))\nTEXT: If something sees the squirrel then the squirrel sees the dog.\nFOL: all x y. (Something(x) & Squirrel(x) & Dog(x) -> Squirrel(x) & Dog(x))\nTEXT: If something sees the squirrel then the squirrel does not need the dog.\nFOL: all x y. (Something(x) & Squirrel(x) & Dog(x) -> -Squirrel(x) & Dog(x))\nTEXT: If something is nice then it does not see the bald eagle.\nFOL: all x y. (Something(x) & Nice(x) & BaldEagle(x) -> -Squirrel(x))\nTEXT: If something needs the bald eagle and the bald eagle needs the squirrel then it needs the squirrel.\nFOL: all x y. (Something(x) & BaldEagle(x) & Squirrel(x) -> Squirrel(x))\nTEXT: If something needs the squirrel then the squirrel chases the bald eagle.\nFOL: all x y. (Something(x) & Squirrel(x) & BaldEagle(x) -> Squirrel(x) & Chases(x, baldEagle))\nTEXT: If something chases the bald eagle then the bald eagle is cold.\nFOL: all x y. (Something(x) & BaldEagle(x) & Chases(x, baldEagle) -> BaldEagle(x) & -Cold(x))\nTEXT: If the dog chases the squirrel then the dog needs the squirrel.\nFOL: all x y. (Dog(x) & Squirrel(x) & Chases(x, squirrel) -> Dog(x) & -Squirrel(x))\nTEXT: If something is kind and not nice then it chases the squirrel.\nFOL: all x y. (Something(x) & Nice(x) & -Squirrel(x) -> Chases(x, squirrel))\nTEXT: The dog chases the squirrel.\nFOL: Dog(squirrel)\n</EVALUATE>"
  ]
 },
 {
  "index": 109,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is not green.\nFOL: all x. (Bob(x) -> -Green(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> Red(x))\nTEXT: Bob is not smart.\nFOL: all x. (Bob(x) -> -Smart(x))\nTEXT: Charlie is not rough.\nFOL: all x. (Charlie(x) -> -Rough(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Erin is big.\nFOL: all x. (Erin(x) -> Big(x))\nTEXT: Erin is not quiet.\nFOL: all x. (Erin(x) -> -Quiet(x))\nTEXT: If someone is big and not red then they are smart.\nFOL: all x y. (Big(x) & -Red(x) & Smart(x) -> Smart(x))\nTEXT: Cold, quiet people are not green.\nFOL: all x y. (Quiet(x) & -Green(x) & -Red(x) -> -Green(x))\nTEXT: If someone is big and quiet then they are green.\nFOL: all x y. (Big(x) & Quiet(x) & Green(x) -> Green(x))\nTEXT: If Erin is green and Erin is rough then Erin is quiet.\nFOL: all x y. (Green(x) & Rough(x) & Quiet(x) & Erin(x) -> Quiet(x))\nTEXT: If someone is cold and big then they are not quiet.\nFOL: all x y. (Cold(x) & Big(x) & -Quiet(x) & x(x) -> -Quiet(x))\nTEXT: If someone is big then they are rough.\nFOL: all x y. (Big(x) & -Rough(x) & x(x) -> -Rough(x))\nTEXT: If someone is rough then they are not cold.\nFOL: all x y. (Rough(x) & -Cold(x) & x(x) -> -Cold(x))\nTEXT: Red people are big.\nFOL: all x. (Red(x) -> Big(x))\nTEXT: Erin is not smart.\nFOL: all x. (Erin(x) -> -Smart(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is not green.\nFOL: all x. (Bob(x) -> -Green(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> Red(x))\nTEXT: Bob is not smart.\nFOL: all x. (Bob(x) -> -Smart(x))\nTEXT: Charlie is not rough.\nFOL: all x. (Charlie(x) -> -Rough(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Erin is big.\nFOL: all x. (Erin(x) -> Big(x))\nTEXT: Erin is not quiet.\nFOL: all x. (Erin(x) -> -Quiet(x))\nTEXT: If someone is big and not red then they are smart.\nFOL: all x y. (Big(x) & -Red(x) & Smart(x) -> Smart(x))\nTEXT: Cold, quiet people are not green.\nFOL: all x y. (Quiet(x) & -Green(x) & -Red(x) -> -Green(x))\nTEXT: If someone is big and quiet then they are green.\nFOL: all x y. (Big(x) & Quiet(x) & Green(x) -> Green(x))\nTEXT: If Erin is green and Erin is rough then Erin is quiet.\nFOL: all x y. (Green(x) & Rough(x) & Quiet(x) & Erin(x) -> Erin(x))\nTEXT: If someone is cold and big then they are not quiet.\nFOL: all x y. (Cold(x) & Big(x) & -Quiet(x) -> -Quiet(x))\nTEXT: If someone is big then they are rough.\nFOL: all x y. (Big(x) & -Rough(x) -> Rough(x))\nTEXT: If someone is rough then they are not cold.\nFOL: all x y. (Rough(x) & -Cold(x) -> -Cold(x))\nTEXT: Red people are big.\nFOL: all x. (Red(x) -> Big(x))\nTEXT: Erin is not smart.\nFOL: all x. (Erin(x) -> -Smart(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is not green.\nFOL: all x. (Bob(x) -> -Green(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> Red(x))\nTEXT: Bob is not smart.\nFOL: all x. (Bob(x) -> -Smart(x))\nTEXT: Charlie is not rough.\nFOL: all x. (Charlie(x) -> -Rough(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Erin is big.\nFOL: all x. (Erin(x) -> Big(x))\nTEXT: Erin is not quiet.\nFOL: all x. (Erin(x) -> -Quiet(x))\nTEXT: If someone is big and not red then they are smart.\nFOL: all x y. (Big(x) & -Red(x) & Smart(x) -> Smart(x))\nTEXT: Cold, quiet people are not green.\nFOL: all x y. (Quiet(x) & -Green(x) & -Red(x) -> -Green(x))\nTEXT: If someone is big and quiet then they are green.\nFOL: all x y. (Big(x) & Quiet(x) & Green(x) -> Green(x))\nTEXT: If Erin is green and Erin is rough then Erin is quiet.\nFOL: all x y. (Green(x) & Rough(x) & Quiet(x) & Erin(x) -> Erin(x))\nTEXT: If someone is cold and big then they are not quiet.\nFOL: all x y. (Cold(x) & Big(x) & -Quiet(x) & Erin(x) -> -Quiet(x))\nTEXT: If someone is big then they are rough.\nFOL: all x y. (Big(x) & -Rough(x) & Erin(x) -> -Rough(x))\nTEXT: If someone is rough then they are not cold.\nFOL: all x y. (Rough(x) & -Cold(x) & Erin(x) -> -Cold(x))\nTEXT: Red people are big.\nFOL: all x. (Red(x) -> Big(x))\nTEXT: Erin is not smart.\nFOL: all x. (Erin(x) -> -Smart(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is not green.\nFOL: all x. (Bob(x) -> -Green(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> Red(x))\nTEXT: Bob is not smart.\nFOL: all x. (Bob(x) -> -Smart(x))\nTEXT: Charlie is not rough.\nFOL: all x. (Charlie(x) -> -Rough(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Erin is big.\nFOL: all x. (Erin(x) -> Big(x))\nTEXT: Erin is not quiet.\nFOL: all x. (Erin(x) -> -Quiet(x))\nTEXT: If someone is big and not red then they are smart.\nFOL: all x y. (Big(x) & -Red(x) & Smart(x) -> Smart(x))\nTEXT: Cold, quiet people are not green.\nFOL: all x y. (Quiet(x) & -Green(x) & -Red(x) -> -Green(x))\nTEXT: If someone is big and quiet then they are green.\nFOL: all x y. (Big(x) & Quiet(x) & Green(x) -> Green(x))\nTEXT: If Erin is green and Erin is rough then Erin is quiet.\nFOL: all x y. (Green(x) & Rough(x) & Quiet(x) & Erin(x) -> Erin(x))\nTEXT: If someone is cold and big then they are not quiet.\nFOL: all x y. (Cold(x) & Big(x) & -Quiet(x) -> -Quiet(x))\nTEXT: If someone is big then they are rough.\nFOL: all x y. (Big(x) & -Rough(x) -> -Rough(x))\nTEXT: If someone is rough then they are not cold.\nFOL: all x y. (Rough(x) & -Cold(x) -> -Cold(x))\nTEXT: Red people are big.\nFOL: all x. (Red(x) -> Big(x))\nTEXT: Erin is not smart.\nFOL: all x. (Erin(x) -> -Smart(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is not green.\nFOL: all x. (Bob(x) -> -Green(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> Red(x))\nTEXT: Bob is not smart.\nFOL: all x. (Bob(x) -> -Smart(x))\nTEXT: Charlie is not rough.\nFOL: all x. (Charlie(x) -> -Rough(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Erin is big.\nFOL: all x. (Erin(x) -> Big(x))\nTEXT: Erin is not quiet.\nFOL: all x. (Erin(x) -> -Quiet(x))\nTEXT: If someone is big and not red then they are smart.\nFOL: all x y. (Big(x) & -Red(x) & Smart(x) -> Smart(x))\nTEXT: Cold, quiet people are not green.\nFOL: all x y. (Quiet(x) & -Green(x) & -Red(x) -> -Green(x))\nTEXT: If someone is big and quiet then they are green.\nFOL: all x y. (Big(x) & Quiet(x) & Green(x) -> Green(x))\nTEXT: If Erin is green and Erin is rough then Erin is quiet.\nFOL: all x y. (Green(x) & Rough(x) & Quiet(x) & Erin(x) -> Erin(x))\nTEXT: If someone is cold and big then they are not quiet.\nFOL: all x y. (Cold(x) & Big(x) & -Quiet(x) -> -Quiet(x))\nTEXT: If someone is big then they are rough.\nFOL: all x y. (Big(x) & -Rough(x) -> Rough(x))\nTEXT: If someone is rough then they are not cold.\nFOL: all x y. (Rough(x) & -Cold(x) -> -Cold(x))\nTEXT: Red people are big.\nFOL: all x. (Red(x) -> Big(x))\nTEXT: Erin is not smart.\nFOL: -Smart(erin)\n</EVALUATE>"
  ]
 },
 {
  "index": 110,
  "responses": [
   "<EVALUATE>\n\nTEXT: Dave is red.\nFOL: all x. (Dave(x) -> Red(x))\n\nTEXT: Dave is round.\nFOL: all x. (Dave(x) -> Round(x))\n\nTEXT: Erin is quiet.\nFOL: all x. (Erin(x) -> Quiet(x))\n\nTEXT: Erin is rough.\nFOL: all x. (Erin(x) -> Rough(x))\n\nTEXT: Erin is round.\nFOL: all x. (Erin(x) -> Round(x))\n\nTEXT: Erin is young.\nFOL: all x. (Erin(x) -> Young(x))\n\nTEXT: Fiona is red.\nFOL: all x. (Fiona(x) -> Red(x))\n\nTEXT: Fiona is rough.\nFOL: all x. (Fiona(x) -> Rough(x))\n\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\n\nTEXT: Gary is blue.\nFOL: all x. (Gary(x) -> Blue(x))\n\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\n\nTEXT: Gary is smart.\nFOL: all x. (Gary(x) -> Smart(x))\n\nTEXT: If someone is red and round then they are rough.\nFOL: all x y. (Red(x) & Round(y) -> Rough(x, y))\n\nTEXT: All smart people are round.\nFOL: all x. (Smart(x) -> Round(x))\n\nTEXT: If Erin is young then Erin is rough.\nFOL: all x. (Young(x) -> Rough(x))\n\nTEXT: Young, red people are quiet.\nFOL: all x y. (Young(x) & Red(y) -> Quiet(x, y))\n\nTEXT: All blue, smart people are rough.\nFOL: all x. (Blue(x) & Smart(x) -> Rough(x))\n\nTEXT: Round people are young.\nFOL: all x. (Round(x) -> Young(x))\n\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Dave is red.\nFOL: all x. (Dave(x) -> Red(x))\n\nTEXT: Dave is round.\nFOL: all x. (Dave(x) -> Round(x))\n\nTEXT: Erin is quiet.\nFOL: all x. (Erin(x) -> Quiet(x))\n\nTEXT: Erin is rough.\nFOL: all x. (Erin(x) -> Rough(x))\n\nTEXT: Erin is round.\nFOL: all x. (Erin(x) -> Round(x))\n\nTEXT: Erin is young.\nFOL: all x. (Erin(x) -> Young(x))\n\nTEXT: Fiona is red.\nFOL: all x. (Fiona(x) -> Red(x))\n\nTEXT: Fiona is rough.\nFOL: all x. (Fiona(x) -> Rough(x))\n\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\n\nTEXT: Gary is blue.\nFOL: all x. (Gary(x) -> Blue(x))\n\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\n\nTEXT: Gary is smart.\nFOL: all x. (Gary(x) -> Smart(x))\n\nTEXT: If someone is red and round then they are rough.\nFOL: all x y. (Red(x) & Round(y) -> Rough(x, y))\n\nTEXT: All smart people are round.\nFOL: all x. (Smart(x) -> Round(x))\n\nTEXT: If Erin is young then Erin is rough.\nFOL: all x. (Young(x) -> Rough(x))\n\nTEXT: Young, red people are quiet.\nFOL: all x y. (Young(x) & Red(y) -> Quiet(x, y))\n\nTEXT: All blue, smart people are rough.\nFOL: all x. (Blue(x) & Smart(x) -> Rough(x))\n\nTEXT: Round people are young.\nFOL: all x. (Round(x) -> Young(x))\n\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))",
   "<EVALUATE>\nTEXT: Dave is red.\nFOL: all x. (Dave(x) -> Red(x))\nTEXT: Dave is round.\nFOL: all x. (Dave(x) -> Round(x))\nTEXT: Erin is quiet.\nFOL: all x. (Erin(x) -> Quiet(x))\nTEXT: Erin is rough.\nFOL: all x. (Erin(x) -> Rough(x))\nTEXT: Erin is round.\nFOL: all x. (Erin(x) -> Round(x))\nTEXT: Erin is young.\nFOL: all x. (Erin(x) -> Young(x))\nTEXT: Fiona is red.\nFOL: all x. (Fiona(x) -> Red(x))\nTEXT: Fiona is rough.\nFOL: all x. (Fiona(x) -> Rough(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Gary is blue.\nFOL: all x. (Gary(x) -> Blue(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Gary is smart.\nFOL: all x. (Gary(x) -> Smart(x))\nTEXT: If someone is red and round then they are rough.\nFOL: if (Red(x) & Round(x)) -> Rough(x)\nTEXT: All smart people are round.\nFOL: all x. (Smart(x) -> Round(x))\nTEXT: If Erin is young then Erin is rough.\nFOL: if (Young(x) -> Rough(x))\nTEXT: Young, red people are quiet.\nFOL: Young(x) & Red(x) -> Quiet(x)\nTEXT: All blue, smart people are rough.\nFOL: all x. (Smart(x) -> Rough(x)) & Blue(x) -> Rough(x)\nTEXT: Round people are young.\nFOL: Round(x) -> Young(x)\nTEXT: Dave is smart.\nFOL: Dave(x) -> Smart(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is red.\nFOL: all x. (Dave(x) -> Red(x))\nTEXT: Dave is round.\nFOL: all x. (Dave(x) -> Round(x))\nTEXT: Erin is quiet.\nFOL: all x. (Erin(x) -> Quiet(x))\nTEXT: Erin is rough.\nFOL: all x. (Erin(x) -> Rough(x))\nTEXT: Erin is round.\nFOL: all x. (Erin(x) -> Round(x))\nTEXT: Erin is young.\nFOL: all x. (Erin(x) -> Young(x))\nTEXT: Fiona is red.\nFOL: all x. (Fiona(x) -> Red(x))\nTEXT: Fiona is rough.\nFOL: all x. (Fiona(x) -> Rough(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Gary is blue.\nFOL: all x. (Gary(x) -> Blue(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Gary is smart.\nFOL: all x. (Gary(x) -> Smart(x))\nTEXT: If someone is red and round then they are rough.\nFOL: if (Red(x) & Round(x)) -> Rough(x)\nTEXT: All smart people are round.\nFOL: all x. (Smart(x) -> Round(x))\nTEXT: If Erin is young then Erin is rough.\nFOL: if (Young(x) -> Rough(x))\nTEXT: Young, red people are quiet.\nFOL: Young(x) & Red(x) -> Quiet(x)\nTEXT: All blue, smart people are rough.\nFOL: all x. (Blue(x) & Smart(x) -> Rough(x))\nTEXT: Round people are young.\nFOL: Round(x) -> Young(x)\nTEXT: Dave is smart.\nFOL: Dave(x) -> Smart(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is red.\nFOL: all x. (Dave(x) -> Red(x))\nTEXT: Dave is round.\nFOL: all x. (Dave(x) -> Round(x))\nTEXT: Erin is quiet.\nFOL: all x. (Erin(x) -> Quiet(x))\nTEXT: Erin is rough.\nFOL: all x. (Erin(x) -> Rough(x))\nTEXT: Erin is round.\nFOL: all x. (Erin(x) -> Round(x))\nTEXT: Erin is young.\nFOL: all x. (Erin(x) -> Young(x))\nTEXT: Fiona is red.\nFOL: all x. (Fiona(x) -> Red(x))\nTEXT: Fiona is rough.\nFOL: all x. (Fiona(x) -> Rough(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Gary is blue.\nFOL: all x. (Gary(x) -> Blue(x))\nTEXT: Gary is red.\nFOL: all x. (Gary(x) -> Red(x))\nTEXT: Gary is smart.\nFOL: all x. (Gary(x) -> Smart(x))\nTEXT: If someone is red and round then they are rough.\nFOL: if (Red(x) & Round(x)) -> Rough(x)\nTEXT: All smart people are round.\nFOL: all x. (Smart(x) -> Round(x))\nTEXT: If Erin is young then Erin is rough.\nFOL: if (Young(x) -> Rough(x))\nTEXT: Young, red people are quiet.\nFOL: Young(x) & Red(x) -> Quiet(x)\nTEXT: All blue, smart people are rough.\nFOL: all x. (Smart(x) -> Round(x)) & Blue(x) -> Rough(x)\nTEXT: Round people are young.\nFOL: Round(x) -> Young(x)\nTEXT: Dave is smart.\nFOL: Dave(x) -> Smart(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 111,
  "responses": [
   "<EVALUATE>\nTEXT: The cat is big.\nFOL: all x. (Cat(x) -> Big(x))\nTEXT: The cat is kind.\nFOL: all x. (Cat(x) -> Kind(x))\nTEXT: The cat needs the tiger.\nFOL: all x. (Cat(x) & Tiger(x) -> Needs(x,tiger))\nTEXT: The cat visits the rabbit.\nFOL: all x. (Cat(x) & Rabbit(x) -> Visits(x,rabbit))\nTEXT: The rabbit eats the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> Eat(x,rabbit))\nTEXT: The rabbit eats the tiger.\nFOL: all x. (Rabbit(x) & Tiger(x) -> Eat(x,rabbit))\nTEXT: The rabbit is rough.\nFOL: all x. (Rabbit(x) -> Rough(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> Round(x))\nTEXT: The rabbit needs the tiger.\nFOL: all x. (Rabbit(x) & Tiger(x) -> Needs(x,tiger))\nTEXT: The rabbit visits the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> Visits(x,cat))\nTEXT: The tiger is rough.\nFOL: all x. (Tiger(x) -> Rough(x))\nTEXT: The tiger is round.\nFOL: all x. (Tiger(x) -> Round(x))\nTEXT: The tiger needs the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> Needs(x,tiger))\nTEXT: The tiger visits the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> Visits(x,cat))\nTEXT: The tiger eats the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> Eat(x,cat))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is big.\nFOL: all x. (Cat(x) -> Big(x))\nTEXT: The cat is kind.\nFOL: all x. (Cat(x) -> Kind(x))\nTEXT: The cat needs the tiger.\nFOL: all x. (Cat(x) & Tiger(x) -> Needs(x,tiger))\nTEXT: The cat visits the rabbit.\nFOL: all x. (Cat(x) & Rabbit(x) -> Visits(x,rabbit))\nTEXT: The rabbit eats the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> Eat(x,rabbit))\nTEXT: The rabbit eats the tiger.\nFOL: all x. (Rabbit(x) & Tiger(x) -> Eat(x,rabbit))\nTEXT: The rabbit is rough.\nFOL: all x. (Rabbit(x) -> Rough(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> Round(x))\nTEXT: The rabbit needs the tiger.\nFOL: all x. (Rabbit(x) & Tiger(x) -> Needs(x,tiger))\nTEXT: The rabbit visits the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> Visits(x,cat))\nTEXT: The tiger is rough.\nFOL: all x. (Tiger(x) -> Rough(x))\nTEXT: The tiger is round.\nFOL: all x. (Tiger(x) -> Round(x))\nTEXT: The tiger needs the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> Needs(x,tiger))\nTEXT: The tiger visits the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> Visits(x,cat))\nTEXT: The tiger visits the rabbit.\nFOL: all x. (Tiger(x) & Rabbit(x) -> Visits(x,rabbit))\nTEXT: If someone needs the cat then the cat eats the tiger.\nFOL: if all x. (Cat(x) & Needs(x,tiger) -> Eat(x,tiger))\nTEXT: If someone is cold then they eat the tiger.\nFOL: if all x. (Person(x) & Cold(x) -> Eat(x,tiger))\nTEXT: Round people are cold.\nFOL: all x. (Person(x) -> Cold(x))\nTEXT: If someone eats the tiger and the tiger eats the cat then they are rough.\nFOL: if all x. (Tiger(x) & Eat(x,tiger) & Eat(x,cat) -> Rough(x))\nTEXT: If someone eats the tiger then they need the tiger.\nFOL: if all x. (Tiger(x) & Eat(x,tiger) -> Needs(x,tiger))\nTEXT: If someone is round then they eat the cat.\nFOL: if all x. (Person(x) & Round(x) -> Eat(x,cat))\nTEXT: If someone is cold and they need the tiger then they need the rabbit.\nFOL: if all x. (Person(x) & Cold(x) & Needs(x,tiger) -> Needs(x,rabbit))\nTEXT: If someone eats the tiger and the tiger eats the rabbit then the tiger visits the cat.\nFOL: if all x. (Tiger(x) & Eat(x,tiger) & Tiger(x) & Eat(x,rabbit) -> Visits(x,cat))\nTEXT: The cat eats the tiger.\nFOL: Eat(x,tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is big.\nFOL: all x. (Cat(x) -> Big(x))\nTEXT: The cat is kind.\nFOL: all x. (Cat(x) -> Kind(x))\nTEXT: The cat needs the tiger.\nFOL: all x. (Cat(x) & Tiger(x) -> Needs(x,tiger))\nTEXT: The cat visits the rabbit.\nFOL: all x. (Cat(x) & Rabbit(x) -> Visits(x,rabbit))\nTEXT: The rabbit eats the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> Eat(x,rabbit))\nTEXT: The rabbit eats the tiger.\nFOL: all x. (Rabbit(x) & Tiger(x) -> Eat(x,rabbit))\nTEXT: The rabbit is rough.\nFOL: all x. (Rabbit(x) -> Rough(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> Round(x))\nTEXT: The rabbit needs the tiger.\nFOL: all x. (Rabbit(x) & Tiger(x) -> Needs(x,tiger))\nTEXT: The rabbit visits the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> Visits(x,cat))\nTEXT: The tiger is rough.\nFOL: all x. (Tiger(x) -> Rough(x))\nTEXT: The tiger is round.\nFOL: all x. (Tiger(x) -> Round(x))\nTEXT: The tiger needs the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> Needs(x,tiger))\nTEXT: The tiger visits the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> Visits(x,cat))\nTEXT: The tiger visits the rabbit.\nFOL: all x. (Tiger(x) & Rabbit(x) -> Visits(x,rabbit))\nTEXT: If someone needs the cat then the cat eats the tiger.\nFOL: if all x. (Cat(x) & Needs(x,tiger) -> Eat(x,tiger))\nTEXT: If someone is cold then they eat the tiger.\nFOL: if all x. (Person(x) & Cold(x) -> Eat(x,tiger))\nTEXT: Round people are cold.\nFOL: all x. (Person(x) & Cold(x) -> Round(x))\nTEXT: If someone eats the tiger and the tiger eats the cat then they are rough.\nFOL: if all x. (Tiger(x) & Eat(x,tiger) & Eat(x,cat) -> Rough(x))\nTEXT: If someone eats the tiger then they need the tiger.\nFOL: if all x. (Tiger(x) & Eat(x,tiger) -> Needs(x,tiger))\nTEXT: If someone is round then they eat the cat.\nFOL: if all x. (Person(x) & Round(x) -> Eat(x,cat))\nTEXT: If someone is cold and they need the tiger then they need the rabbit.\nFOL: if all x. (Person(x) & Cold(x) & Needs(x,tiger) -> Needs(x,rabbit))\nTEXT: If someone eats the tiger and the tiger eats the rabbit then the tiger visits the cat.\nFOL: if all x. (Tiger(x) & Eat(x,tiger) & Tiger(x) & Eat(x,rabbit) -> Visits(x,cat))\nTEXT: The cat eats the tiger.\nFOL: Eat(x,tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is big.\nFOL: all x. (Cat(x) -> Big(x))\nTEXT: The cat is kind.\nFOL: all x. (Cat(x) -> Kind(x))\nTEXT: The cat needs the tiger.\nFOL: all x. (Cat(x) & Tiger(x) -> Needs(x,tiger))\nTEXT: The cat visits the rabbit.\nFOL: all x. (Cat(x) & Rabbit(x) -> Visits(x,rabbit))\nTEXT: The rabbit eats the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> Eat(x,rabbit))\nTEXT: The rabbit eats the tiger.\nFOL: all x. (Rabbit(x) & Tiger(x) -> Eat(x,rabbit))\nTEXT: The rabbit is rough.\nFOL: all x. (Rabbit(x) -> Rough(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> Round(x))\nTEXT: The rabbit needs the tiger.\nFOL: all x. (Rabbit(x) & Tiger(x) -> Needs(x,tiger))\nTEXT: The rabbit visits the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> Visits(x,cat))\nTEXT: The tiger is rough.\nFOL: all x. (Tiger(x) -> Rough(x))\nTEXT: The tiger is round.\nFOL: all x. (Tiger(x) -> Round(x))\nTEXT: The tiger needs the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> Needs(x,tiger))\nTEXT: The tiger visits the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> Visits(x,cat))\nTEXT: The tiger visits the rabbit.\nFOL: all x. (Tiger(x) & Rabbit(x) -> Visits(x,rabbit))\nTEXT: If someone needs the cat then the cat eats the tiger.\nFOL: if all x. (Cat(x) & Needs(x,tiger) -> Eat(x,tiger))\nTEXT: If someone is cold then they eat the tiger.\nFOL: if all x. (Person(x) & Cold(x) -> Eat(x,tiger))\nTEXT: Round people are cold.\nFOL: all x. (Person(x) & Cold(x) -> Round(x))\nTEXT: If someone eats the tiger and the tiger eats the cat then they are rough.\nFOL: if all x. (Tiger(x) & Eat(x,tiger) & Tiger(x) & Eat(x,cat) -> Rough(x))\nTEXT: If someone eats the tiger then they need the tiger.\nFOL: if all x. (Tiger(x) & Eat(x,tiger) -> Needs(x,tiger))\nTEXT: If someone is round then they eat the cat.\nFOL: if all x. (Person(x) & Round(x) -> Eat(x,cat))\nTEXT: If someone is cold and they need the tiger then they need the rabbit.\nFOL: if all x. (Person(x) & Cold(x) & Needs(x,tiger) -> Needs(x,rabbit))\nTEXT: If someone eats the tiger and the tiger eats the rabbit then the tiger visits the cat.\nFOL: if all x. (Tiger(x) & Eat(x,tiger) & Tiger(x) & Eat(x,rabbit) -> Visits(x,cat))\nTEXT: The cat eats the tiger.\nFOL: Eat(x,tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is big.\nFOL: all x. (Cat(x) -> Big(x))\nTEXT: The cat is kind.\nFOL: all x. (Cat(x) -> Kind(x))\nTEXT: The cat needs the tiger.\nFOL: all x. (Cat(x) & Tiger(x) -> Needs(x,tiger))\nTEXT: The cat visits the rabbit.\nFOL: all x. (Cat(x) & Rabbit(x) -> Visits(x,rabbit))\nTEXT: The rabbit eats the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> Eat(x,rabbit))\nTEXT: The rabbit eats the tiger.\nFOL: all x. (Rabbit(x) & Tiger(x) -> Eat(x,rabbit))\nTEXT: The rabbit is rough.\nFOL: all x. (Rabbit(x) -> Rough(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> Round(x))\nTEXT: The rabbit needs the tiger.\nFOL: all x. (Rabbit(x) & Tiger(x) -> Needs(x,tiger))\nTEXT: The rabbit visits the cat.\nFOL: all x. (Rabbit(x) & Cat(x) -> Visits(x,cat))\nTEXT: The tiger is rough.\nFOL: all x. (Tiger(x) -> Rough(x))\nTEXT: The tiger is round.\nFOL: all x. (Tiger(x) -> Round(x))\nTEXT: The tiger needs the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> Needs(x,tiger))\nTEXT: The tiger visits the cat.\nFOL: all x. (Tiger(x) & Cat(x) -> Visits(x,cat))\nTEXT: The tiger visits the rabbit.\nFOL: all x. (Tiger(x) & Rabbit(x) -> Visits(x,rabbit))\nTEXT: If someone needs the cat then the cat eats the tiger.\nFOL: if all x. (Cat(x) & Needs(x,tiger) -> Eat(x,tiger))\nTEXT: If someone is cold then they eat the tiger.\nFOL: if all x. (Person(x) & Cold(x) -> Eat(x,tiger))\nTEXT: Round people are cold.\nFOL: all x. (Person(x) & Cold(x) -> Round(x))\nTEXT: If someone eats the tiger and the tiger eats the cat then they are rough.\nFOL: if all x. (Tiger(x) & Eat(x,tiger) & Tiger(x) & Eat(x,cat) -> Rough(x))\nTEXT: If someone eats the tiger then they need the tiger.\nFOL: if all x. (Tiger(x) & Eat(x,tiger) -> Needs(x,tiger))\nTEXT: If someone is round then they eat the cat.\nFOL: if all x. (Person(x) & Round(x) -> Eat(x,cat))\nTEXT: If someone is cold and they need the tiger then they need the rabbit.\nFOL: if all x. (Person(x) & Cold(x) & Needs(x,tiger) -> Needs(x,rabbit))\nTEXT: If someone eats the tiger and the tiger eats the rabbit then the tiger visits the cat.\nFOL: if all x. (Tiger(x) & Eat(x,tiger) & Tiger(x) & Eat(x,rabbit) -> Visits(x,cat))\nTEXT: The cat eats the tiger.\nFOL: all x. (Cat(x) & Tiger(x) -> Eat(x,tiger))\n</EVALUATE>"
  ]
 },
 {
  "index": 112,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x. (FurryDave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is rough.\nFOL: all x. (Dave(x) -> Rough(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x. (FurryDave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is rough.\nFOL: RoughDave(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x. (FurryDave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is rough.\nFOL: all x. (FurryDave(x) -> RoughDave(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x. (FurryDave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is rough.\nFOL: all x. (FurryDave(x) -> Rough(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: all x. (Dave(x) -> White(x))\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: all x y. (FurryDave(x) & Dave(x) -> RoughDave(x))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is rough.\nFOL: all x. (Dave(x) -> Rough(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 113,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: all x. (Anne(x) -> -Rough(x))\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> -Furry(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> -Kind(x))\nTEXT: White people are rough.\nFOL: all x. (White(x) -> -Rough(x))\nTEXT: All furry, kind people are white.\nFOL: all x. (Furry(x) & Kind(x) -> White(x))\nTEXT: All furry people are kind.\nFOL: all x. (Furry(x) -> -Kind(x))\nTEXT: Gary is not furry.\nFOL: -Furry(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: all x. (Anne(x) -> Rough(x))\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> Kind(x))\nTEXT: White people are rough.\nFOL: all x. (White(x) -> Rough(x))\nTEXT: All furry, kind people are white.\nFOL: all x. (Fur(x) & Kind(x) -> White(x))\nTEXT: All furry people are kind.\nFOL: all x. (Fur(x) -> Kind(x))\nTEXT: Gary is not furry.\nFOL: -Fur(x) & Gary(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: all x. (Anne(x) -> Rough(x))\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> Kind(x))\nTEXT: White people are rough.\nFOL: all x. (White(x) -> Rough(x))\nTEXT: All furry, kind people are white.\nFOL: all x. (Fur(x) & Kind(x) -> White(x))\nTEXT: All furry people are kind.\nFOL: all x. (Fur(x) -> Kind(x))\nTEXT: Gary is not furry.\nFOL: -Fur(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: all x. (Anne(x) -> Rough(x))\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> Kind(x))\nTEXT: White people are rough.\nFOL: all x. (White(x) -> Rough(x))\nTEXT: All furry, kind people are white.\nFOL: all x. (Fur(x) & Kind(x) -> White(x))\nTEXT: All furry people are kind.\nFOL: all x. (Fur(x) & Kind(x) -> White(x))\nTEXT: Gary is not furry.\nFOL: -Fur(x) & Gary(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: all x. (Anne(x) -> Rough(x))\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Fur(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> Kind(x))\nTEXT: White people are rough.\nFOL: all x. (WhitePerson(x) -> Rough(x))\nTEXT: All furry, kind people are white.\nFOL: all x. (Fur(x) & Kind(x) -> White(x))\nTEXT: All furry people are kind.\nFOL: all x. (Fur(x) -> Kind(x))\nTEXT: Gary is not furry.\nFOL: -Fur(x) & Gary(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 114,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> -Cold(x))\nTEXT: Anne is nice.\nFOL: all x. (Anne(x) -> Nice(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Anne is white.\nFOL: all x. (Anne(x) -> -White(x))\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> -Round(x))\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> -White(x))\nTEXT: All round, red people are cold.\nFOL: all x. (Round(x) & Red(x) & -Cold(x))\nTEXT: White, round people are cold.\nFOL: all x. (Round(x) & White(x) & -Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x. (Nice(x) & Round(x) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x. (Smart(x) & -Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: White people are round.\nFOL: all x. (White(x) -> -Round(x))\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> -Cold(x))\nTEXT: Anne is nice.\nFOL: all x. (Anne(x) -> Nice(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Anne is white.\nFOL: all x. (Anne(x) -> -White(x))\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> -Round(x))\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> -White(x))\nTEXT: All round, red people are cold.\nFOL: all x. (Round(x) & Red(x) & -Cold(x))\nTEXT: White, round people are cold.\nFOL: all x. (Round(x) & White(x) & -Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x. (Nice(x) & Round(x) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x. (Smart(x) & -Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: White people are round.\nFOL: all x. (White(x) -> -Round(x))\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> -Big(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> -Cold(x))\nTEXT: Anne is nice.\nFOL: all x. (Anne(x) -> Nice(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Anne is white.\nFOL: all x. (Anne(x) -> -White(x))\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> -Round(x))\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> -White(x))\nTEXT: All round, red people are cold.\nFOL: all x. (Round(x) & Red(x) & -Cold(x))\nTEXT: White, round people are cold.\nFOL: all x. (Round(x) & White(x) & -Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x. (Nice(x) & Round(x) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x. (Smart(x) & -Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: White people are round.\nFOL: all x. (White(x) -> -Round(x))\nTEXT: Bob is big.\nFOL: -Big(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> -Cold(x))\nTEXT: Anne is nice.\nFOL: all x. (Anne(x) -> Nice(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Anne is white.\nFOL: all x. (Anne(x) -> -White(x))\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> -Round(x))\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> -White(x))\nTEXT: All round, red people are cold.\nFOL: all x y. (Round(x) & Red(x) & -Cold(x) & -White(x) -> Cold(x))\nTEXT: White, round people are cold.\nFOL: all x y. (White(x) & Round(x) & -Cold(x) & -White(x) -> Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x y. (Nice(x) & Round(x) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x y. (Smart(x) & -Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: all x y. (Anne(x) & Round(x) -> -Cold(x))\nTEXT: White people are round.\nFOL: all x y. (White(x) & Round(x) -> -Round(x))\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> -Cold(x))\nTEXT: Anne is nice.\nFOL: all x. (Anne(x) -> Nice(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Anne is white.\nFOL: all x. (Anne(x) -> -White(x))\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> -Round(x))\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> -White(x))\nTEXT: All round, red people are cold.\nFOL: all x y. (Round(x) & Red(x) & -Cold(x) & -White(x) -> Cold(x))\nTEXT: White, round people are cold.\nFOL: all x y. (White(x) & Round(x) & -Cold(x) & -White(x) -> Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x y. (Nice(x) & Round(x) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x y. (Smart(x) & -Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: all x y. (Anne(x) & -Round(x) -> -Cold(x))\nTEXT: White people are round.\nFOL: all x y. (White(x) & -Round(x) -> -Round(x))\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\nTEXT: </EVALUATE>"
  ]
 },
 {
  "index": 115,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: all x. (Anne(x) -> Green(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Bob is green.\nFOL: all x. (Bob(x) -> Green(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> Round(x))\nTEXT: Dave is red.\nFOL: all x. (Dave(x) -> Red(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Dave is young.\nFOL: all x. (Dave(x) -> Young(x))\nTEXT: If Dave is white then Dave is round.\nFOL: all x y. (Dave(x) & White(x) & -Round(x) -> Round(x))\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: If Dave is smart then Dave is white.\nFOL: all x y. (Dave(x) & Smart(x) & -White(x) -> White(x))\nTEXT: If someone is red and not smart then they are not blue.\nFOL: all x y. (Red(x) & -Smart(x) & -Blue(x) -> -Blue(x))\nTEXT: Round people are blue.\nFOL: all x. (Round(x) -> Blue(x))\nTEXT: If someone is red and not blue then they are green.\nFOL: all x y. (Red(x) & -Blue(x) & -Green(x) -> Green(x))\nTEXT: Anne is not smart.\nFOL: -Smart(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: all x. (Anne(x) -> Green(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Bob is green.\nFOL: all x. (Bob(x) -> Green(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> Round(x))\nTEXT: Dave is red.\nFOL: all x. (Dave(x) -> Red(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Dave is young.\nFOL: all x. (Dave(x) -> Young(x))\nTEXT: If Dave is white then Dave is round.\nFOL: all x y. (Dave(x) & White(x) & -Round(x) -> Round(x))\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: If Dave is smart then Dave is white.\nFOL: all x y. (Dave(x) & Smart(x) & -White(x) -> White(x))\nTEXT: If someone is red and not smart then they are not blue.\nFOL: all x y. (Red(x) & -Smart(x) & -Blue(x) -> NotBlue(x))\nTEXT: Round people are blue.\nFOL: all x. (Round(x) -> Blue(x))\nTEXT: If someone is red and not blue then they are green.\nFOL: all x y. (Red(x) & -Blue(x) & -Green(x) -> Green(x))\nTEXT: Anne is not smart.\nFOL: -Smart(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: all x. (Anne(x) -> Green(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Bob is green.\nFOL: all x. (Bob(x) -> Green(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> Round(x))\nTEXT: Dave is red.\nFOL: all x. (Dave(x) -> Red(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Dave is young.\nFOL: all x. (Dave(x) -> Young(x))\nTEXT: If Dave is white then Dave is round.\nFOL: all x y. (Dave(x) & White(x) & -Round(x) -> Round(x))\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: If Dave is smart then Dave is white.\nFOL: all x y. (Dave(x) & Smart(x) & -White(x) -> White(x))\nTEXT: If someone is red and not smart then they are not blue.\nFOL: all x y. (Red(x) & -Smart(x) & -Blue(x) -> -Blue(x))\nTEXT: Round people are blue.\nFOL: all x. (Round(x) -> Blue(x))\nTEXT: If someone is red and not blue then they are green.\nFOL: all x y. (Red(x) & -Blue(x) & -Green(x) -> Green(x))\nTEXT: Anne is not smart.\nFOL: -Smart(anne)",
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: all x. (Anne(x) -> Green(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Bob is green.\nFOL: all x. (Bob(x) -> Green(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> Round(x))\nTEXT: Dave is red.\nFOL: all x. (Dave(x) -> Red(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Dave is young.\nFOL: all x. (Dave(x) -> Young(x))\nTEXT: If Dave is white then Dave is round.\nFOL: all x y. (Dave(x) & White(x) & -Round(x) -> Round(x))\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: If Dave is smart then Dave is white.\nFOL: all x y. (Dave(x) & Smart(x) & -White(x) -> White(x))\nTEXT: If someone is red and not smart then they are not blue.\nFOL: all x y. (Red(x) & -Smart(x) & -Blue(x) -> NotBlue(x))\nTEXT: Round people are blue.\nFOL: all x. (Round(x) -> Blue(x))\nTEXT: If someone is red and not blue then they are green.\nFOL: all x y. (Red(x) & -Blue(x) & -Green(x) -> Green(x))\nTEXT: Anne is not smart.\nFOL: -Smart(anne)",
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: all x. (Anne(x) -> Green(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Bob is green.\nFOL: all x. (Bob(x) -> Green(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> Round(x))\nTEXT: Dave is red.\nFOL: all x. (Dave(x) -> Red(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Dave is young.\nFOL: all x. (Dave(x) -> Young(x))\nTEXT: If Dave is white then Dave is round.\nFOL: all x y. (Dave(x) & White(x) & -Round(x) -> Round(x))\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: If Dave is smart then Dave is white.\nFOL: all x y. (Dave(x) & Smart(x) & -White(x) -> White(x))\nTEXT: If someone is red and not smart then they are not blue.\nFOL: all x y. (Red(x) & -Smart(x) & -Blue(x) -> -Blue(x))\nTEXT: Round people are blue.\nFOL: all x. (Round(x) -> Blue(x))\nTEXT: If someone is red and not blue then they are green.\nFOL: all x y. (Red(x) & -Blue(x) & -Green(x) -> Green(x))\nTEXT: Anne is not smart.\nFOL: -Smart(Anne)\n</EVALUATE>"
  ]
 },
 {
  "index": 116,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> Blue(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\nTEXT: Charlie is rough.\nFOL: all x. (Charlie(x) -> Rough(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Charlie is young.\nFOL: all x. (Charlie(x) -> Young(x))\nTEXT: Gary is rough.\nFOL: all x. (Gary(x) -> Rough(x))\nTEXT: Gary is not white.\nFOL: all x. (Gary(x) -> -White(x))\nTEXT: Gary is young.\nFOL: all x. (Gary(x) -> Young(x))\nTEXT: If someone is round and not white then they are not blue.\nFOL: ((Round(x) & -White(x)) | (-Round(x) & White(x))) -> -Blue(x)\nTEXT: If someone is white and red then they are blue.\nFOL: all x. (White(x) & Red(x) -> Blue(x))\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: All round people are red.\nFOL: all x. (Round(x) -> Red(x))\nTEXT: If someone is red then they are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\nTEXT: If someone is rough and not red then they are young.\nFOL: ((Rough(x) & -Red(x)) | (-Rough(x) & Red(x))) -> Young(x)\nTEXT: If someone is round and not blue then they are young.\nFOL: ((Round(x) & -Blue(x)) | (-Round(x) & Blue(x))) -> Young(x)\nTEXT: Blue, white people are young.\nFOL: Blue(x) & White(x) -> Young(x)\nTEXT: Gary is not red.\nFOL: -Red(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> Blue(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\nTEXT: Charlie is rough.\nFOL: all x. (Charlie(x) -> Rough(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Charlie is young.\nFOL: all x. (Charlie(x) -> Young(x))\nTEXT: Gary is rough.\nFOL: all x. (Gary(x) -> Rough(x))\nTEXT: Gary is not white.\nFOL: all x. (Gary(x) -> -White(x))\nTEXT: Gary is young.\nFOL: all x. (Gary(x) -> Young(x))\nTEXT: If someone is round and not white then they are not blue.\nFOL: ((Round(x) & -White(x)) | (-Round(x) & White(x))) -> -Blue(x)\nTEXT: If someone is white and red then they are blue.\nFOL: all x. (White(x) & Red(x) -> Blue(x))\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: All round people are red.\nFOL: all x. (Round(x) -> Red(x))\nTEXT: If someone is red then they are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\nTEXT: If someone is rough and not red then they are young.\nFOL: ((Red(x) & -Rough(x)) | (-Red(x) & Rough(x))) -> Young(x)\nTEXT: If someone is round and not blue then they are young.\nFOL: ((Round(x) & -Blue(x)) | (-Round(x) & Blue(x))) -> Young(x)\nTEXT: Blue, white people are young.\nFOL: Blue(x) & White(x) -> Young(x)\nTEXT: Gary is not red.\nFOL: -Red(gary)\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\n\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\n\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> Blue(x))\n\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\n\nTEXT: Charlie is rough.\nFOL: all x. (Charlie(x) -> Rough(x))\n\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\n\nTEXT: Charlie is young.\nFOL: all x. (Charlie(x) -> Young(x))\n\nTEXT: Gary is rough.\nFOL: all x. (Gary(x) -> Rough(x))\n\nTEXT: Gary is not white.\nFOL: all x. (Gary(x) -> -White(x))\n\nTEXT: Gary is young.\nFOL: all x. (Gary(x) -> Young(x))\n\nTEXT: If someone is round and not white then they are not blue.\nFOL: all x y. (Round(x) & -White(x) & -Blue(x) -> -Round(x))\n\nTEXT: If someone is white and red then they are blue.\nFOL: all x y. (White(x) & Red(x) & -Blue(x) -> -White(x))\n\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\n\nTEXT: All round people are red.\nFOL: all x. (Round(x) -> Red(x))\n\nTEXT: If someone is red then they are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\n\nTEXT: If someone is rough and not red then they are young.\nFOL: all x y. (Rough(x) & -Red(x) & Young(x) -> -Rough(x))\n\nTEXT: If someone is round and not blue then they are young.\nFOL: all x y. (Round(x) & -Blue(x) & Young(x))\n\nTEXT: Blue, white people are young.\nFOL: all x y. (Blue(x) & White(x) & Young(x))\n\nTEXT: Gary is not red.\nFOL: -Red(gary)\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\n\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\n\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> Blue(x))\n\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\n\nTEXT: Charlie is rough.\nFOL: all x. (Charlie(x) -> Rough(x))\n\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\n\nTEXT: Charlie is young.\nFOL: all x. (Charlie(x) -> Young(x))\n\nTEXT: Gary is rough.\nFOL: all x. (Gary(x) -> Rough(x))\n\nTEXT: Gary is not white.\nFOL: all x. (Gary(x) -> -White(x))\n\nTEXT: Gary is young.\nFOL: all x. (Gary(x) -> Young(x))\n\nTEXT: If someone is round and not white then they are not blue.\nFOL: all x y. (Round(x) & -White(x) & -Blue(x) -> -Round(x))\n\nTEXT: If someone is white and red then they are blue.\nFOL: all x y. (White(x) & Red(x) & -Blue(x) -> -White(x))\n\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\n\nTEXT: All round people are red.\nFOL: all x. (Round(x) -> Red(x))\n\nTEXT: If someone is red then they are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\n\nTEXT: If someone is rough and not red then they are young.\nFOL: all x y. (Rough(x) & -Red(x) & Young(x) -> -Rough(x))\n\nTEXT: If someone is round and not blue then they are young.\nFOL: all x y. (Round(x) & -Blue(x) & Young(x))\n\nTEXT: Blue, white people are young.\nFOL: all x. (Blue(x) & White(x) & Young(x))\n\nTEXT: Gary is not red.\nFOL: -Red(gary)\n\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> Blue(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\nTEXT: Charlie is rough.\nFOL: all x. (Charlie(x) -> Rough(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Charlie is young.\nFOL: all x. (Charlie(x) -> Young(x))\nTEXT: Gary is rough.\nFOL: all x. (Gary(x) -> Rough(x))\nTEXT: Gary is not white.\nFOL: all x. (Gary(x) -> -White(x))\nTEXT: Gary is young.\nFOL: all x. (Gary(x) -> Young(x))\nTEXT: If someone is round and not white then they are not blue.\nFOL: ((Round(x) & -White(x)) | (-Round(x) & White(x))) -> -Blue(x)\nTEXT: If someone is white and red then they are blue.\nFOL: all x. (White(x) & Red(x) -> Blue(x))\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: All round people are red.\nFOL: all x. (Round(x) -> Red(x))\nTEXT: If someone is red then they are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\nTEXT: If someone is rough and not red then they are young.\nFOL: ((Rough(x) & -Red(x)) | (-Rough(x) & Red(x))) -> Young(x)\nTEXT: If someone is round and not blue then they are young.\nFOL: ((Round(x) & -Blue(x)) | (-Round(x) & Blue(x))) -> Young(x)\nTEXT: Blue, white people are young.\nFOL: Blue(x) & White(x) -> Young(x)\nTEXT: Gary is not red.\nFOL: -Red(x) -> -White(x) & -Blue(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 117,
  "responses": [
   "<EVALUATE>\nTEXT: The bear is big.\nFOL: all x. (Bear(x) -> Big(x))\nTEXT: The bear is blue.\nFOL: all x. (Bear(x) -> Blue(x))\nTEXT: The bear is nice.\nFOL: all x. (Bear(x) -> Nice(x))\nTEXT: The bear is red.\nFOL: all x. (Bear(x) -> Red(x))\nTEXT: The bear visits the lion.\nFOL: all x. (Bear(x) -> VisitsLion(x))\nTEXT: The lion chases the bear.\nFOL: all x. (Lion(x) -> ChasesBear(x))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is not green.\nFOL: all x. (Lion(x) -> NotGreen(x))\nTEXT: The lion sees the bear.\nFOL: all x. (Lion(x) -> SeesBear(x))\nTEXT: The lion visits the bear.\nFOL: all x. (Lion(x) -> VisitsBear(x))\nTEXT: If the lion sees the bear then the bear is blue.\nFOL: if (Lion(x) -> SeesBear(x)) then (Bear(x) -> Blue(x))\nTEXT: If something chases the bear then the bear is blue.\nFOL: if (Something(x) -> ChasesBear(x)) then (Bear(x) -> Blue(x))\nTEXT: If the bear chases the lion then the lion is big.\nFOL: if (Bear(x) -> ChasesLion(x)) then (Lion(x) -> Big(x))\nTEXT: If something chases the lion then it sees the lion.\nFOL: if (Something(x) -> ChasesLion(x)) then (Lion(x) -> SeesLion(x))\nTEXT: If something visits the lion and the lion does not chase the bear then the bear chases the lion.\nFOL: if (Something(x) -> VisitsLion(x)) & (Lion(x) -> NotChasesBear(x)) then (Bear(x) -> ChasesLion(x))\nTEXT: If something visits the bear then the bear does not chase the lion.\nFOL: if (Something(x) -> VisitsBear(x)) & (Bear(x) -> NotChasesLion(x)) then (Bear(x) -> NotChasesLion(x))\nTEXT: If something sees the bear and the bear does not chase the lion then the bear does not see the lion.\nFOL: if (Something(x) -> SeesBear(x)) & (Bear(x) -> NotChasesLion(x)) then (Bear(x) -> NotSeesLion(x))\nTEXT: If something is red and it does not see the lion then the lion is blue.\nFOL: if (Something(x) -> Red(x)) & (Lion(x) -> NotSeesLion(x)) then (Lion(x) -> Blue(x))\nTEXT: The bear sees the bear.\nFOL: all x. (Bear(x) -> SeesBear(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is big.\nFOL: all x. (Bear(x) -> Big(x))\nTEXT: The bear is blue.\nFOL: all x. (Bear(x) -> Blue(x))\nTEXT: The bear is nice.\nFOL: all x. (Bear(x) -> Nice(x))\nTEXT: The bear is red.\nFOL: all x. (Bear(x) -> Red(x))\nTEXT: The bear visits the lion.\nFOL: all x. (Bear(x) -> VisitsLion(x))\nTEXT: The lion chases the bear.\nFOL: all x. (Lion(x) -> ChasesBear(x))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is not green.\nFOL: all x. (Lion(x) -> NotGreen(x))\nTEXT: The lion sees the bear.\nFOL: all x. (Lion(x) -> SeesBear(x))\nTEXT: The lion visits the bear.\nFOL: all x. (Lion(x) -> VisitsBear(x))\nTEXT: If the lion sees the bear then the bear is blue.\nFOL: if (Lion(x) -> SeesBear(x)) then (Bear(x) -> Blue(x))\nTEXT: If something chases the bear then the bear is blue.\nFOL: if (Something(x) -> ChasesBear(x)) then (Bear(x) -> Blue(x))\nTEXT: If the bear chases the lion then the lion is big.\nFOL: if (Bear(x) -> ChasesLion(x)) then (Lion(x) -> Big(x))\nTEXT: If something chases the lion then it sees the lion.\nFOL: if (Something(x) -> ChasesLion(x)) then (Lion(x) -> SeesLion(x))\nTEXT: If something visits the lion and the lion does not chase the bear then the bear chases the lion.\nFOL: if (Something(x) -> VisitsLion(x)) & (Lion(x) -> NotChasesBear(x)) -> (Bear(x) -> ChasesLion(x))\nTEXT: If something visits the bear then the bear does not chase the lion.\nFOL: if (Something(x) -> VisitsBear(x)) & (Bear(x) -> NotChasesLion(x)) -> (Lion(x) -> NotChasesBear(x))\nTEXT: If something sees the bear and the bear does not chase the lion then the bear does not see the lion.\nFOL: if (Something(x) -> SeesBear(x)) & (Bear(x) -> NotChasesLion(x)) -> (Bear(x) -> NotSeesLion(x))\nTEXT: If something is red and it does not see the lion then the lion is blue.\nFOL: if (Something(x) -> Red(x)) & (Lion(x) -> NotSeesLion(x)) -> (Lion(x) -> Blue(x))\nTEXT: The bear sees the bear.\nFOL: all x. (Bear(x) -> SeesBear(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is big.\nFOL: all x. (Bear(x) -> Big(x))\nTEXT: The bear is blue.\nFOL: all x. (Bear(x) -> Blue(x))\nTEXT: The bear is nice.\nFOL: all x. (Bear(x) -> Nice(x))\nTEXT: The bear is red.\nFOL: all x. (Bear(x) -> Red(x))\nTEXT: The bear visits the lion.\nFOL: all x. (Bear(x) -> VisitsLion(x))\nTEXT: The lion chases the bear.\nFOL: all x. (Lion(x) -> ChasesBear(x))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is not green.\nFOL: all x. (Lion(x) -> NotGreen(x))\nTEXT: The lion sees the bear.\nFOL: all x. (Lion(x) -> SeesBear(x))\nTEXT: The lion visits the bear.\nFOL: all x. (Lion(x) -> VisitsBear(x))\nTEXT: If the lion sees the bear then the bear is blue.\nFOL: if (Lion(x) -> SeesBear(x)) then (Bear(x) -> Blue(x))\nTEXT: If something chases the bear then the bear is blue.\nFOL: if (Something(x) -> ChasesBear(x)) then (Bear(x) -> Blue(x))\nTEXT: If the bear chases the lion then the lion is big.\nFOL: if (Bear(x) -> ChasesLion(x)) then (Lion(x) -> Big(x))\nTEXT: If something chases the lion then it sees the lion.\nFOL: if (Something(x) -> ChasesLion(x)) then (Lion(x) -> SeesLion(x))\nTEXT: If something visits the lion and the lion does not chase the bear then the bear chases the lion.\nFOL: if (Something(x) -> VisitsLion(x) & -ChasesLion(x)) then (Bear(x) -> ChasesLion(x))\nTEXT: If something visits the bear then the bear does not chase the lion.\nFOL: if (Something(x) -> VisitsBear(x)) then (Bear(x) -> NotChasesLion(x))\nTEXT: If something sees the bear and the bear does not chase the lion then the bear does not see the lion.\nFOL: if (Something(x) -> SeesBear(x) & -ChasesLion(x)) then (Bear(x) -> NotSeesLion(x))\nTEXT: If something is red and it does not see the lion then the lion is blue.\nFOL: if (Something(x) -> Red(x) & -SeesLion(x)) then (Lion(x) -> Blue(x))\nTEXT: The bear sees the bear.\nFOL: all x. (Bear(x) -> SeesBear(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is big.\nFOL: all x. (Bear(x) -> Big(x))\nTEXT: The bear is blue.\nFOL: all x. (Bear(x) -> Blue(x))\nTEXT: The bear is nice.\nFOL: all x. (Bear(x) -> Nice(x))\nTEXT: The bear is red.\nFOL: all x. (Bear(x) -> Red(x))\nTEXT: The bear visits the lion.\nFOL: all x. (Bear(x) -> VisitsLion(x))\nTEXT: The lion chases the bear.\nFOL: all x. (Lion(x) -> ChasesBear(x))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is not green.\nFOL: all x. (Lion(x) -> NotGreen(x))\nTEXT: The lion sees the bear.\nFOL: all x. (Lion(x) -> SeesBear(x))\nTEXT: The lion visits the bear.\nFOL: all x. (Lion(x) -> VisitsBear(x))\nTEXT: If the lion sees the bear then the bear is blue.\nFOL: if (Lion(x) -> SeesBear(x)) then (Bear(x) -> Blue(x))\nTEXT: If something chases the bear then the bear is blue.\nFOL: if (Something(x) -> ChasesBear(x)) then (Bear(x) -> Blue(x))\nTEXT: If the bear chases the lion then the lion is big.\nFOL: if (Bear(x) -> ChasesLion(x)) then (Lion(x) -> Big(x))\nTEXT: If something chases the lion then it sees the lion.\nFOL: if (Something(x) -> ChasesLion(x)) then (Lion(x) -> SeesLion(x))\nTEXT: If something visits the lion and the lion does not chase the bear then the bear chases the lion.\nFOL: if (Something(x) -> VisitsLion(x)) & (Lion(x) -> NotChasesBear(x)) then (Bear(x) -> ChasesLion(x))\nTEXT: If something visits the bear then the bear does not chase the lion.\nFOL: if (Something(x) -> VisitsBear(x)) & (Bear(x) -> NotChasesLion(x)) then (Bear(x) -> NotChasesLion(x))\nTEXT: If something sees the bear and the bear does not chase the lion then the bear does not see the lion.\nFOL: if (Something(x) -> SeesBear(x)) & (Bear(x) -> NotChasesLion(x)) then (Bear(x) -> NotSeesLion(x))\nTEXT: If something is red and it does not see the lion then the lion is blue.\nFOL: if (Something(x) -> Red(x)) & (NotSomething(x) -> SeesLion(x)) then (Lion(x) -> Blue(x))\nTEXT: The bear sees the bear.\nFOL: all x. (Bear(x) -> SeesBear(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is big.\nFOL: all x. (Bear(x) -> Big(x))\nTEXT: The bear is blue.\nFOL: all x. (Bear(x) -> Blue(x))\nTEXT: The bear is nice.\nFOL: all x. (Bear(x) -> Nice(x))\nTEXT: The bear is red.\nFOL: all x. (Bear(x) -> Red(x))\nTEXT: The bear visits the lion.\nFOL: all x. (Bear(x) -> VisitsLion(x))\nTEXT: The lion chases the bear.\nFOL: all x. (Lion(x) -> ChasesBear(x))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is not green.\nFOL: all x. (Lion(x) -> NotGreen(x))\nTEXT: The lion sees the bear.\nFOL: all x. (Lion(x) -> SeesBear(x))\nTEXT: The lion visits the bear.\nFOL: all x. (Lion(x) -> VisitsBear(x))\nTEXT: If the lion sees the bear then the bear is blue.\nFOL: if (Lion(x) -> SeesBear(x)) then (Bear(x) -> Blue(x))\nTEXT: If something chases the bear then the bear is blue.\nFOL: if (Something(x) -> ChasesBear(x)) then (Bear(x) -> Blue(x))\nTEXT: If the bear chases the lion then the lion is big.\nFOL: if (Bear(x) -> ChasesLion(x)) then (Lion(x) -> Big(x))\nTEXT: If something chases the lion then it sees the lion.\nFOL: if (Something(x) -> ChasesLion(x)) then (Lion(x) -> SeesLion(x))\nTEXT: If something visits the lion and the lion does not chase the bear then the bear chases the lion.\nFOL: if (Something(x) -> VisitsLion(x)) & (Lion(x) -> NotChasesBear(x)) then (Bear(x) -> ChasesLion(x))\nTEXT: If something visits the bear then the bear does not chase the lion.\nFOL: if (Something(x) -> VisitsBear(x)) & (Bear(x) -> NotChasesLion(x)) then (Bear(x) -> NotChasesLion(x))\nTEXT: If something sees the bear and the bear does not chase the lion then the bear does not see the lion.\nFOL: if (Something(x) -> SeesBear(x)) & (Bear(x) -> NotChasesLion(x)) then (Bear(x) -> NotSeesLion(x))\nTEXT: If something is red and it does not see the lion then the lion is blue.\nFOL: if (Something(x) -> NotSeesLion(x)) & (Lion(x) -> Red(x)) then (Lion(x) -> Blue(x))\nTEXT: The bear sees the bear.\nFOL: all x. (Bear(x) -> SeesBear(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 118,
  "responses": [
   "<EVALUATE>\nTEXT: Alan may be young but he is nice, wears green shoes and is cold.\nFOL: all x. (Nice(x) & Young(x) & -Cold(x))\nTEXT: Bob is green with envy, and rough with his kids, but overall is just a nice, round individual.\nFOL: all x. (Green(x) & Envy(x) & -Rough(x) & Round(x) & -Nice(x))\nTEXT: That guy Dave sure is nice.\nFOL: -Nice(dave)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: all x. (Green(x) & Job(x) & -Cold(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) & -Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) & -Rough(x))\nTEXT: If a person has a rough and round shape and is nice, then they will be big too.\nFOL: all x. (Rough(x) & Round(x) & Nice(x) & -Big(x))\nTEXT: Truth be told, every big, rough person out there that is green, will also be colored blue.\nFOL: all x. (Big(x) & Rough(x) & Green(x) & -Blue(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. (Blue(x) & Green(x) & -Red(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Round(x) & Nice(x) & -Big(x))\nTEXT: If a person is blue and red and big, then that person is cold.\nFOL: all x. (Blue(x) & Red(x) & Big(x) & -Cold(x))\nTEXT: Bob is blue.\nFOL: -Blue(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan may be young but he is nice, wears green shoes and is cold.\nFOL: all x. (Nice(x) & Young(x) & -Cold(x))\nTEXT: Bob is green with envy, and rough with his kids, but overall is just a nice, round individual.\nFOL: all x. (Green(x) & Envy(x) & -Rough(x) & Round(x) & -Nice(x))\nTEXT: That guy Dave sure is nice.\nFOL: -Nice(dave)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: all x. (Green(x) & Job(x) & -Cold(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) & -Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) & -Rough(x))\nTEXT: If a person has a rough and round shape and is nice, then they will be big too.\nFOL: all x. (Rough(x) & Round(x) & Nice(x) & -Big(x))\nTEXT: Truth be told, every big, rough person out there that is green, will also be colored blue.\nFOL: all x. (Big(x) & Rough(x) & Green(x) & -Blue(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. (Blue(x) & Green(x) & -Red(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Round(x) & Nice(x) & -Big(x))\nTEXT: If a person is blue and red and big, then that person is cold.\nFOL: all x. (Blue(x) & Red(x) & Big(x) & -Cold(x))\nTEXT: Bob is blue.\nFOL: -Blue(bob)",
   "<EVALUATE>\nTEXT: Alan may be young but he is nice, wears green shoes and is cold.\nFOL: all x. (Nice(x) & Young(x) & -Cold(x))\nTEXT: Bob is green with envy, and rough with his kids, but overall is just a nice, round individual.\nFOL: all x. (Green(x) & Envy(x) & -Rough(x) & Round(x) & -Nice(x))\nTEXT: That guy Dave sure is nice.\nFOL: -Nice(dave)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: all x. (Green(x) & Job(x) & -Cold(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) & -Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) & -Rough(x))\nTEXT: If a person has a rough and round shape and is nice, then they will be big too.\nFOL: all x. (Rough(x) & Round(x) & Nice(x) & -Big(x))\nTEXT: Truth be told, every big, rough person out there that is green, will also be colored blue.\nFOL: all x. (Big(x) & Rough(x) & Green(x) & -Blue(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. (Blue(x) & Green(x) & -Red(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Round(x) & Nice(x) & -Big(x))\nTEXT: If a person is blue and red and big, then that person is cold.\nFOL: all x. (Blue(x) & Red(x) & Big(x) & -Cold(x))\nTEXT: Bob is blue.\nFOL: all x. (Blue(x) & -Nice(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan may be young but he is nice, wears green shoes and is cold.\nFOL: all x. (Nice(x) & Young(x) & -Cold(x))\nTEXT: Bob is green with envy, and rough with his kids, but overall is just a nice, round individual.\nFOL: all x. (Green(x) & Envy(x) & -Rough(x) & Round(x) & -Nice(x))\nTEXT: That guy Dave sure is nice.\nFOL: -Nice(dave)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: all x. (Green(x) & Job(x) & -Cold(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) & -Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) & -Rough(x))\nTEXT: If a person has a rough and round shape and is nice, then they will be big too.\nFOL: all x. (Rough(x) & Round(x) & Nice(x) & -Big(x))\nTEXT: Truth be told, every big, rough person out there that is green, will also be colored blue.\nFOL: all x. (Big(x) & Rough(x) & Green(x) & -Blue(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. (Blue(x) & Green(x) & -Red(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Round(x) & Nice(x) & -Big(x))\nTEXT: If a person is blue and red and big, then that person is cold.\nFOL: all x. (Blue(x) & Red(x) & Big(x) & -Cold(x))\nTEXT: Bob is blue.\nFOL: all x. (Blue(x) & -Bob(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan may be young but he is nice, wears green shoes and is cold.\nFOL: all x. (Nice(x) & Young(x) & -Cold(x))\nTEXT: Bob is green with envy, and rough with his kids, but overall is just a nice, round individual.\nFOL: all x. (Green(x) & Envy(x) & -Rough(x) & Round(x) & -Nice(x))\nTEXT: That guy Dave sure is nice.\nFOL: -Nice(dave)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: all x. (Green(x) & Job(x) & -Cold(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) & -Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) & -Rough(x))\nTEXT: If a person has a rough and round shape and is nice, then they will be big too.\nFOL: all x. (Rough(x) & Round(x) & Nice(x) & -Big(x))\nTEXT: Truth be told, every big, rough person out there that is green, will also be colored blue.\nFOL: all x. (Big(x) & Rough(x) & Green(x) & -Blue(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. (Blue(x) & Green(x) & -Red(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Round(x) & Nice(x) & -Big(x))\nTEXT: If a person is blue and red and big, then that person is cold.\nFOL: all x. (Blue(x) & Red(x) & Big(x) & -Cold(x))\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) & -Blue(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 119,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Charlie is cold.\nFOL: all x. (Charlie(x) -> -Cold(x))\nTEXT: Gary is quiet.\nFOL: all x. (Gary(x) -> -Quiet(x))\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\nTEXT: Cold, quiet people are smart.\nFOL: all x. (Quiet(x) -> Smart(x))\nTEXT: All smart people are white.\nFOL: all x. (Smart(x) -> White(x))\nTEXT: If Charlie is cold then Charlie is quiet.\nFOL: all x y. (Charlie(x) & -Cold(x) -> -Quiet(x))\nTEXT: Charlie is not white.\nFOL: -Charlie(x) & -White(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Charlie is cold.\nFOL: all x. (Charlie(x) -> -Cold(x))\nTEXT: Gary is quiet.\nFOL: all x. (Gary(x) -> -Quiet(x))\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\nTEXT: Cold, quiet people are smart.\nFOL: all x. (Quiet(x) -> Smart(x))\nTEXT: All smart people are white.\nFOL: all x. (Smart(x) -> White(x))\nTEXT: If Charlie is cold then Charlie is quiet.\nFOL: all x y. (Charlie(x) & -Cold(x) -> -Quiet(x))\nTEXT: Charlie is not white.\nFOL: -Charlie(x) -> -White(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Charlie is cold.\nFOL: all x. (Charlie(x) -> -Cold(x))\nTEXT: Gary is quiet.\nFOL: all x. (Gary(x) -> -Quiet(x))\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\nTEXT: Cold, quiet people are smart.\nFOL: all x. (Quiet(x) & -Smart(x) -> Smart(x))\nTEXT: All smart people are white.\nFOL: all x. (Smart(x) -> White(x))\nTEXT: If Charlie is cold then Charlie is quiet.\nFOL: all x y. (Charlie(x) & -Cold(x) -> -Quiet(x))\nTEXT: Charlie is not white.\nFOL: -Charlie(x) & -White(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Charlie is cold.\nFOL: all x. (Charlie(x) -> -Cold(x))\nTEXT: Gary is quiet.\nFOL: all x. (Gary(x) -> -Quiet(x))\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\nTEXT: Cold, quiet people are smart.\nFOL: all x. (Quiet(x) & -Smart(x) -> Smart(x))\nTEXT: All smart people are white.\nFOL: all x. (Smart(x) -> White(x))\nTEXT: If Charlie is cold then Charlie is quiet.\nFOL: all x y. (Charlie(x) & -Cold(x) -> -Quiet(x))\nTEXT: Charlie is not white.\nFOL: -Charlie(x) -> -White(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Charlie is cold.\nFOL: all x. (Charlie(x) -> -Cold(x))\nTEXT: Gary is quiet.\nFOL: all x. (Gary(x) -> -Quiet(x))\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\nTEXT: Cold, quiet people are smart.\nFOL: all x. (Quiet(x) -> Smart(x))\nTEXT: All smart people are white.\nFOL: all x. (Smart(x) -> White(x))\nTEXT: If Charlie is cold then Charlie is quiet.\nFOL: all x y. (Charlie(x) & -Cold(x) -> -Quiet(x))\nTEXT: Charlie is not white.\nFOL: -Charlie(x) & -White(x)"
  ]
 },
 {
  "index": 120,
  "responses": [
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: all x. (Cat(x) -> Rough(x))\nTEXT: The cat is round.\nFOL: all x. (Cat(x) -> Round(x))\nTEXT: The dog does not chase the lion.\nFOL: all x. (Dog(x) -> -ChaseTheLion(x))\nTEXT: The dog eats the cat.\nFOL: all x. (Dog(x) -> EatCat(x))\nTEXT: The dog does not like the cat.\nFOL: all x. (Dog(x) -> -LikeCat(x))\nTEXT: The lion chases the dog.\nFOL: all x. (Lion(x) -> ChaseDog(x))\nTEXT: The lion is green.\nFOL: all x. (Lion(x) -> Green(x))\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x. (Green(x) & LikeLion(x) -> EatDog(x))\nTEXT: If someone is round then they chase the lion.\nFOL: all x. (Round(x) -> ChaseLion(x))\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x. (ChaseLion(x) -> LikeDog(x))\nTEXT: If someone eats the dog then they are not round.\nFOL: all x. (EatDog(x) -> -Round(x))\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: all x. (Dog(x) -> -LikeLion(x) & Lion(x) -> Red(x))\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x. (LikeLion(x) & LikeCat(x) -> ChaseDog(x))\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x. (LikeLion(x) & LikeCat(x) -> Round(x))\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x. (LikeDog(x) -> EatLion(x))\nTEXT: The cat does not eat the dog.\nFOL: -EatDog(cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: all x. (Cat(x) -> Rough(x))\nTEXT: The cat is round.\nFOL: all x. (Cat(x) -> Round(x))\nTEXT: The dog does not chase the lion.\nFOL: all x. (Dog(x) -> -ChaseTheLion(x))\nTEXT: The dog eats the cat.\nFOL: all x. (Dog(x) -> EatCat(x))\nTEXT: The dog does not like the cat.\nFOL: all x. (Dog(x) -> -LikeCat(x))\nTEXT: The lion chases the dog.\nFOL: all x. (Lion(x) -> ChaseDog(x))\nTEXT: The lion is green.\nFOL: all x. (Lion(x) -> Green(x))\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x. (Green(x) & LikeLion(x) -> EatDog(x))\nTEXT: If someone is round then they chase the lion.\nFOL: all x. (Round(x) -> ChaseLion(x))\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x. (ChaseLion(x) -> LikeDog(x))\nTEXT: If someone eats the dog then they are not round.\nFOL: all x. (EatDog(x) -> -Round(x))\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: all x. (Dog(x) -> -LikeLion(x) & Lion(x) -> Red(x))\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x. (LikeLion(x) & LikeCat(x) -> ChaseDog(x))\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x. (LikeLion(x) & LikeCat(x) & Green(x) -> Round(x))\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x. (LikeDog(x) -> EatLion(x))\nTEXT: The cat does not eat the dog.\nFOL: -EatDog(cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: all x. (Cat(x) -> Rough(x))\nTEXT: The cat is round.\nFOL: all x. (Cat(x) -> Round(x))\nTEXT: The dog does not chase the lion.\nFOL: all x. (Dog(x) -> -ChaseTheLion(x))\nTEXT: The dog eats the cat.\nFOL: all x. (Dog(x) -> EatCat(x))\nTEXT: The dog does not like the cat.\nFOL: all x. (Dog(x) -> -LikeCat(x))\nTEXT: The lion chases the dog.\nFOL: all x. (Lion(x) -> ChaseDog(x))\nTEXT: The lion is green.\nFOL: all x. (Lion(x) -> Green(x))\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x. (Green(x) & LikeLion(x) -> EatDog(x))\nTEXT: If someone is round then they chase the lion.\nFOL: all x. (Round(x) -> ChaseLion(x))\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x. (ChaseLion(x) -> LikeDog(x))\nTEXT: If someone eats the dog then they are not round.\nFOL: all x. (EatDog(x) -> -Round(x))\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: all x. (Dog(x) -> -LikeLion(x) & Lion(x) -> Red(x))\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x. (LikeLion(x) & LikeCat(x) -> ChaseDog(x))\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x. (LikeLion(x) & Green(x) -> Round(x))\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x. (LikeDog(x) -> EatLion(x))\nTEXT: The cat does not eat the dog.\nFOL: -EatDog(cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: all x. (Cat(x) -> Rough(x))\nTEXT: The cat is round.\nFOL: all x. (Cat(x) -> Round(x))\nTEXT: The dog does not chase the lion.\nFOL: all x. (Dog(x) -> -ChaseTheLion(x))\nTEXT: The dog eats the cat.\nFOL: all x. (Dog(x) -> EatCat(x))\nTEXT: The dog does not like the cat.\nFOL: all x. (Dog(x) -> -LikeCat(x))\nTEXT: The lion chases the dog.\nFOL: all x. (Lion(x) -> ChaseDog(x))\nTEXT: The lion is green.\nFOL: all x. (Lion(x) -> Green(x))\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x. (Green(x) & LikeLion(x) -> EatDog(x))\nTEXT: If someone is round then they chase the lion.\nFOL: all x. (Round(x) -> ChaseLion(x))\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x. (ChaseLion(x) -> LikeDog(x))\nTEXT: If someone eats the dog then they are not round.\nFOL: all x. (EatDog(x) -> -Round(x))\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: all x. (Dog(x) -> -LikeLion(x) & Lion(x) -> Red(x))\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x. (LikeLion(x) & LikeCat(x) -> ChaseDog(x))\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x. (LikeLion(x) & LikeCat(x) & Green(x) -> Round(x))\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x. (LikeDog(x) -> EatLion(x))\nTEXT: The cat does not eat the dog.\nFOL: -LikeDog(cat) & -EatLion(cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: all x. (Cat(x) -> Rough(x))\nTEXT: The cat is round.\nFOL: all x. (Cat(x) -> Round(x))\nTEXT: The dog does not chase the lion.\nFOL: all x. (Dog(x) -> -ChaseTheLion(x))\nTEXT: The dog eats the cat.\nFOL: all x. (Dog(x) -> EatCat(x))\nTEXT: The dog does not like the cat.\nFOL: all x. (Dog(x) -> -LikeCat(x))\nTEXT: The lion chases the dog.\nFOL: all x. (Lion(x) -> ChaseDog(x))\nTEXT: The lion is green.\nFOL: all x. (Lion(x) -> Green(x))\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x. (Green(x) & LikeLion(x) -> EatDog(x))\nTEXT: If someone is round then they chase the lion.\nFOL: all x. (Round(x) -> ChaseLion(x))\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x. (ChaseLion(x) -> LikeDog(x))\nTEXT: If someone eats the dog then they are not round.\nFOL: all x. (EatDog(x) -> -Round(x))\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: all x. (Dog(x) -> -LikeLion(x) & Lion(x) -> Red(x))\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x. (LikeLion(x) & LikeCat(x) -> ChaseDog(x))\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x. (LikeLion(x) & LikeCat(x) & Green(x) -> Round(x))\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x. (LikeDog(x) -> EatLion(x))\nTEXT: The cat does not eat the dog.\nFOL: -LikeDog(cat) & -EatLion(dog)\n</EVALUATE>"
  ]
 },
 {
  "index": 121,
  "responses": [
   "<EVALUATE>\nTEXT: The mouse is round.\nFOL: all x. (Mouse(x) -> Round(x))\nTEXT: Round things are not kind.\nFOL: all x. (Round(x) -> -Kind(x))\nTEXT: If something is round and not kind then it is young.\nFOL: all x. (Round(x) & -Kind(x) -> Young(x))\nTEXT: If something is young and round then it is not red.\nFOL: all x. (Young(x) & Round(x) -> -Red(x))\nTEXT: The mouse is kind.\nFOL: all x. (Mouse(x) -> Kind(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse is round.\nFOL: all x. (Mouse(x) -> Round(x))\nTEXT: Round things are not kind.\nFOL: all x. (Round(x) -> -Kind(x))\nTEXT: If something is round and not kind then it is young.\nFOL: all x y. (Round(x) & -Kind(x) -> Young(x))\nTEXT: If something is young and round then it is not red.\nFOL: all x y. (Young(x) & Round(x) -> -Red(x))\nTEXT: The mouse is kind.\nFOL: all x. (Mouse(x) -> Kind(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse is round.\nFOL: all x. (Mouse(x) -> Round(x))\nTEXT: Round things are not kind.\nFOL: all x. (Round(x) -> -Kind(x))\nTEXT: If something is round and not kind then it is young.\nFOL: all x y. (Round(x) & -Kind(x) -> Young(x, y))\nTEXT: If something is young and round then it is not red.\nFOL: all x y. (Young(x) & Round(x) -> -Red(x, y))\nTEXT: The mouse is kind.\nFOL: all x. (Mouse(x) -> Kind(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse is round.\nFOL: all x. (Mouse(x) -> Round(x))\nTEXT: Round things are not kind.\nFOL: all x. (Round(x) -> -Kind(x))\nTEXT: If something is round and not kind then it is young.\nFOL: all x. (Round(x) & -Kind(x) -> Young(x))\nTEXT: If something is young and round then it is not red.\nFOL: all x. (Young(x) & Round(x) -> -Red(x))\nTEXT: The mouse is kind.\nFOL: all x. (Mouse(x) -> -Kind(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse is round.\nFOL: all x. (Mouse(x) -> Round(x))\nTEXT: Round things are not kind.\nFOL: all x. (Round(x) -> -Kind(x))\nTEXT: If something is round and not kind then it is young.\nFOL: all x y. (Round(x) & -Kind(x) -> Young(x, y))\nTEXT: If something is young and round then it is not red.\nFOL: all x y. (Young(x) & Round(x) & -Red(x) -> NotRed(x, y))\nTEXT: The mouse is kind.\nFOL: all x. (Mouse(x) -> Kind(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 122,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> Cold(x))\nTEXT: The bald eagle is kind.\nFOL: all x. (BaldEagle(x) -> Kind(x))\nTEXT: The bald eagle is young.\nFOL: all x. (BaldEagle(x) -> Young(x))\nTEXT: The bald eagle sees the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> See(x))\nTEXT: The bald eagle visits the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> Visit(x))\nTEXT: The bald eagle visits the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> Visit(x))\nTEXT: The cat is kind.\nFOL: all x. (Cat(x) -> Kind(x))\nTEXT: The cat sees the dog.\nFOL: all x. (Cat(x) & Dog(x) -> See(x))\nTEXT: The dog eats the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> Eat(x))\nTEXT: The dog eats the cat.\nFOL: all x. (Dog(x) & Cat(x) -> Eat(x))\nTEXT: The dog is cold.\nFOL: all x. (Dog(x) -> Cold(x))\nTEXT: The dog is round.\nFOL: all x. (Dog(x) -> Round(x))\nTEXT: The dog sees the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> See(x))\nTEXT: The dog sees the cat.\nFOL: all x. (Dog(x) & Cat(x) -> See(x))\nTEXT: The dog visits the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> Visit(x))\nTEXT: The dog visits the cat.\nFOL: all x. (Dog(x) & Cat(x) -> Visit(x))\nTEXT: If the dog visits the cat then the cat eats the dog.\nFOL: all x. (Dog(x) & Cat(x) -> Eat(x) & Cat(x) -> Eat(x))\nTEXT: If something is kind then it sees the dog.\nFOL: all x. (x -> Kind(x) & See(x))\nTEXT: If the bald eagle sees the dog then the dog is cold.\nFOL: all x. (BaldEagle(x) & Dog(x) -> Cold(x) & Dog(x) -> Cold(x))\nTEXT: If something visits the cat and the cat eats the dog then the dog is kind.\nFOL: all x. (x -> Visit(x) & Cat(x) & Eat(x) & Cat(x) -> Kind(x))\nTEXT: If something eats the cat and it is round then the cat is rough.\nFOL: all x. (x -> Eat(x) & Cat(x) & Round(x) & Cat(x) -> Rough(x))\nTEXT: If something visits the cat and the cat visits the bald eagle then the cat visits the dog.\nFOL: all x. (x -> Visit(x) & Cat(x) & Visit(x) & Dog(x))\nTEXT: The cat does not eat the dog.\nFOL: -Eat(x) & Cat(x) & -Eat(x) & Dog(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> Cold(x))\nTEXT: The bald eagle is kind.\nFOL: all x. (BaldEagle(x) -> Kind(x))\nTEXT: The bald eagle is young.\nFOL: all x. (BaldEagle(x) -> Young(x))\nTEXT: The bald eagle sees the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> See(x))\nTEXT: The bald eagle visits the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> Visit(x))\nTEXT: The bald eagle visits the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> Visit(x))\nTEXT: The cat is kind.\nFOL: all x. (Cat(x) -> Kind(x))\nTEXT: The cat sees the dog.\nFOL: all x. (Cat(x) & Dog(x) -> See(x))\nTEXT: The dog eats the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> Eat(x))\nTEXT: The dog eats the cat.\nFOL: all x. (Dog(x) & Cat(x) -> Eat(x))\nTEXT: The dog is cold.\nFOL: all x. (Dog(x) -> Cold(x))\nTEXT: The dog is round.\nFOL: all x. (Dog(x) -> Round(x))\nTEXT: The dog sees the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> See(x))\nTEXT: The dog sees the cat.\nFOL: all x. (Dog(x) & Cat(x) -> See(x))\nTEXT: The dog visits the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> Visit(x))\nTEXT: The dog visits the cat.\nFOL: all x. (Dog(x) & Cat(x) -> Visit(x))\nTEXT: If the dog visits the cat then the cat eats the dog.\nFOL: all x. (Dog(x) & Cat(x) -> Eat(x) & Cat(x) -> Eat(x))\nTEXT: If something is kind then it sees the dog.\nFOL: all x. (Kind(x) -> See(x))\nTEXT: If the bald eagle sees the dog then the dog is cold.\nFOL: all x. (See(x) & Dog(x) -> Cold(x))\nTEXT: If something visits the cat and the cat eats the dog then the dog is kind.\nFOL: all x. (Visit(x) & Cat(x) & Eat(x) & Cat(x) -> Kind(x))\nTEXT: If something eats the cat and it is round then the cat is rough.\nFOL: all x. (Eat(x) & Cat(x) & Round(x) & Cat(x) -> Rough(x))\nTEXT: If something visits the cat and the cat visits the bald eagle then the cat visits the dog.\nFOL: all x. (Visit(x) & Cat(x) & BaldEagle(x) & Cat(x) -> Visit(x))\nTEXT: The cat does not eat the dog.\nFOL: -Eat(x) & Dog(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> Cold(x))\nTEXT: The bald eagle is kind.\nFOL: all x. (BaldEagle(x) -> Kind(x))\nTEXT: The bald eagle is young.\nFOL: all x. (BaldEagle(x) -> Young(x))\nTEXT: The bald eagle sees the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> See(x))\nTEXT: The bald eagle visits the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> Visit(x))\nTEXT: The bald eagle visits the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> Visit(x))\nTEXT: The cat is kind.\nFOL: all x. (Cat(x) -> Kind(x))\nTEXT: The cat sees the dog.\nFOL: all x. (Cat(x) & Dog(x) -> See(x))\nTEXT: The dog eats the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> Eat(x))\nTEXT: The dog eats the cat.\nFOL: all x. (Dog(x) & Cat(x) -> Eat(x))\nTEXT: The dog is cold.\nFOL: all x. (Dog(x) -> Cold(x))\nTEXT: The dog is round.\nFOL: all x. (Dog(x) -> Round(x))\nTEXT: The dog sees the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> See(x))\nTEXT: The dog sees the cat.\nFOL: all x. (Dog(x) & Cat(x) -> See(x))\nTEXT: The dog visits the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> Visit(x))\nTEXT: The dog visits the cat.\nFOL: all x. (Dog(x) & Cat(x) -> Visit(x))\nTEXT: If the dog visits the cat then the cat eats the dog.\nFOL: all x. (Dog(x) & Cat(x) -> Eat(x) & Cat(x) -> Eat(x))\nTEXT: If something is kind then it sees the dog.\nFOL: all x. (x -> Kind(x) & See(x))\nTEXT: If the bald eagle sees the dog then the dog is cold.\nFOL: all x. (BaldEagle(x) & Dog(x) -> Cold(x) & Dog(x) -> Cold(x))\nTEXT: If something visits the cat and the cat eats the dog then the dog is kind.\nFOL: all x. (x -> Visit(x) & Cat(x) & Eat(x) & Cat(x) -> Kind(x))\nTEXT: If something eats the cat and it is round then the cat is rough.\nFOL: all x. (x -> Eat(x) & Cat(x) & Round(x) & Cat(x) -> Rough(x))\nTEXT: If something visits the cat and the cat visits the bald eagle then the cat visits the dog.\nFOL: all x. (x -> Visit(x) & Cat(x) & Visit(x) & Dog(x))\nTEXT: The cat does not eat the dog.\nFOL: not all x. (Cat(x) & Eat(x) & Dog(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> Cold(x))\nTEXT: The bald eagle is kind.\nFOL: all x. (BaldEagle(x) -> Kind(x))\nTEXT: The bald eagle is young.\nFOL: all x. (BaldEagle(x) -> Young(x))\nTEXT: The bald eagle sees the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> See(x))\nTEXT: The bald eagle visits the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> Visit(x))\nTEXT: The bald eagle visits the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> Visit(x))\nTEXT: The cat is kind.\nFOL: all x. (Cat(x) -> Kind(x))\nTEXT: The cat sees the dog.\nFOL: all x. (Cat(x) & Dog(x) -> See(x))\nTEXT: The dog eats the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> Eat(x))\nTEXT: The dog eats the cat.\nFOL: all x. (Dog(x) & Cat(x) -> Eat(x))\nTEXT: The dog is cold.\nFOL: all x. (Dog(x) -> Cold(x))\nTEXT: The dog is round.\nFOL: all x. (Dog(x) -> Round(x))\nTEXT: The dog sees the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> See(x))\nTEXT: The dog sees the cat.\nFOL: all x. (Dog(x) & Cat(x) -> See(x))\nTEXT: The dog visits the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> Visit(x))\nTEXT: The dog visits the cat.\nFOL: all x. (Dog(x) & Cat(x) -> Visit(x))\nTEXT: If the dog visits the cat then the cat eats the dog.\nFOL: all x. (Dog(x) & Cat(x) -> Eat(x) & Cat(x) -> Eat(x))\nTEXT: If something is kind then it sees the dog.\nFOL: all x. (x -> Kind(x) & See(x))\nTEXT: If the bald eagle sees the dog then the dog is cold.\nFOL: all x. (BaldEagle(x) & Dog(x) -> Cold(x) & Dog(x) -> Cold(x))\nTEXT: If something visits the cat and the cat eats the dog then the dog is kind.\nFOL: all x. (x -> Visit(x) & Cat(x) & Eat(x) & Cat(x) -> Kind(x))\nTEXT: If something eats the cat and it is round then the cat is rough.\nFOL: all x. (x -> Eat(x) & Cat(x) & Round(x) & Cat(x) -> Rough(x))\nTEXT: If something visits the cat and the cat visits the bald eagle then the cat visits the dog.\nFOL: all x. (x -> Visit(x) & Cat(x) & Visit(x) & Dog(x))\nTEXT: The cat does not eat the dog.\nFOL: -Eat(x) & Cat(x) & -Eat(x) & Dog(x)",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: all x. (BaldEagle(x) -> Cold(x))\nTEXT: The bald eagle is kind.\nFOL: all x. (BaldEagle(x) -> Kind(x))\nTEXT: The bald eagle is young.\nFOL: all x. (BaldEagle(x) -> Young(x))\nTEXT: The bald eagle sees the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> See(x))\nTEXT: The bald eagle visits the cat.\nFOL: all x. (BaldEagle(x) & Cat(x) -> Visit(x))\nTEXT: The bald eagle visits the dog.\nFOL: all x. (BaldEagle(x) & Dog(x) -> Visit(x))\nTEXT: The cat is kind.\nFOL: all x. (Cat(x) -> Kind(x))\nTEXT: The cat sees the dog.\nFOL: all x. (Cat(x) & Dog(x) -> See(x))\nTEXT: The dog eats the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> Eat(x))\nTEXT: The dog eats the cat.\nFOL: all x. (Dog(x) & Cat(x) -> Eat(x))\nTEXT: The dog is cold.\nFOL: all x. (Dog(x) -> Cold(x))\nTEXT: The dog is round.\nFOL: all x. (Dog(x) -> Round(x))\nTEXT: The dog sees the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> See(x))\nTEXT: The dog sees the cat.\nFOL: all x. (Dog(x) & Cat(x) -> See(x))\nTEXT: The dog visits the bald eagle.\nFOL: all x. (Dog(x) & BaldEagle(x) -> Visit(x))\nTEXT: The dog visits the cat.\nFOL: all x. (Dog(x) & Cat(x) -> Visit(x))\nTEXT: If the dog visits the cat then the cat eats the dog.\nFOL: all x. (Dog(x) & Cat(x) -> Eat(x) & Cat(x) -> Eat(x))\nTEXT: If something is kind then it sees the dog.\nFOL: all x. (x -> Kind(x) & See(x))\nTEXT: If the bald eagle sees the dog then the dog is cold.\nFOL: all x. (BaldEagle(x) & Dog(x) -> Cold(x) & Dog(x) -> Cold(x))\nTEXT: If something visits the cat and the cat eats the dog then the dog is kind.\nFOL: all x. (x -> Visit(x) & Cat(x) & Eat(x) & Cat(x) -> Kind(x))\nTEXT: If something eats the cat and it is round then the cat is rough.\nFOL: all x. (x -> Eat(x) & Cat(x) & Round(x) & Cat(x) -> Rough(x))\nTEXT: If something visits the cat and the cat visits the bald eagle then the cat visits the dog.\nFOL: all x. (x -> Visit(x) & Cat(x) & BaldEagle(x) & Dog(x) -> Visit(x))\nTEXT: The cat does not eat the dog.\nFOL: -Eat(x) & Cat(x) & Dog(x)"
  ]
 },
 {
  "index": 123,
  "responses": [
   "<EVALUATE>\n\nTEXT: The cat is rough.\nFOL: all x. (Cat(x) -> Rough(x))\n\nTEXT: The cat is round.\nFOL: all x. (Cat(x) -> Round(x))\n\nTEXT: The dog does not chase the lion.\nFOL: all x y. (Dog(x) & Lion(x) & -Chase(x, y) -> NotChase(x, y))\n\nTEXT: The dog eats the cat.\nFOL: all x y. (Dog(x) & Cat(x) & -Eats(x, y) -> Eat(x, y))\n\nTEXT: The dog does not like the cat.\nFOL: all x y. (Dog(x) & Cat(x) & -Like(x, y) -> NotLike(x, y))\n\nTEXT: The lion chases the dog.\nFOL: all x y. (Lion(x) & Dog(x) & -Chase(x, y) -> Chase(x, y))\n\nTEXT: The lion is green.\nFOL: all x. (Lion(x) -> Green(x))\n\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x y. (Green(x) & Like(x, y) & -Eat(x, y) -> Eat(x, y))\n\nTEXT: If someone is round then they chase the lion.\nFOL: all x y. (Round(x) & -Chase(x, y) -> Chase(x, y))\n\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x y. (Chase(x, y) & -Like(x, y) -> Like(x, y))\n\nTEXT: If someone eats the dog then they are not round.\nFOL: all x y. (Eat(x, y) & -Round(x, y) -> NotRound(x, y))\n\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: all x y. (Dog(x) & -Like(x, y) & Lion(x) -> Red(x, y))\n\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x y. (Like(x, y) & Like(x, y) & -Chase(x, y) -> Chase(x, y))\n\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x y. (Like(x, y) & Like(x, y) & Green(x) -> Round(x, y))\n\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x y. (Like(x, y) & -Eat(x, y) -> Eat(x, y))\n\nTEXT: The cat likes the lion.\nFOL: all x y. (Cat(x) & -Like(x, y) -> Like(x, y))\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: The cat is rough.\nFOL: all x. (Cat(x) -> Rough(x))\n\nTEXT: The cat is round.\nFOL: all x. (Cat(x) -> Round(x))\n\nTEXT: The dog does not chase the lion.\nFOL: all x y. (Dog(x) & Lion(x) & -Chase(x, y) -> NotChase(x, y))\n\nTEXT: The dog eats the cat.\nFOL: all x y. (Dog(x) & Cat(x) & -Eats(x, y) -> Eat(x, y))\n\nTEXT: The dog does not like the cat.\nFOL: all x y. (Dog(x) & Cat(x) & -Like(x, y) -> NotLike(x, y))\n\nTEXT: The lion chases the dog.\nFOL: all x y. (Lion(x) & Dog(x) & -Chase(x, y) -> Chase(x, y))\n\nTEXT: The lion is green.\nFOL: all x. (Lion(x) -> Green(x))\n\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x y. (Green(x) & Like(x, y) & -Eat(x, y) -> Eat(x, y))\n\nTEXT: If someone is round then they chase the lion.\nFOL: all x y. (Round(x) & -Chase(x, y) -> Chase(x, y))\n\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x y. (Chase(x, y) & -Like(x, y) -> Like(x, y))\n\nTEXT: If someone eats the dog then they are not round.\nFOL: all x y. (Eat(x, y) & -Round(x, y) -> -Round(x, y))\n\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: all x y. (Dog(x) & -Like(x, y) & Lion(x) -> Red(x, y))\n\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x y. (Like(x, y) & Like(x, y) & -Chase(x, y) -> Chase(x, y))\n\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x y. (Like(x, y) & Like(x, y) & Green(x) -> Round(x, y))\n\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x y. (Like(x, y) & -Eat(x, y) -> Eat(x, y))\n\nTEXT: The cat likes the lion.\nFOL: all x y. (Cat(x) & -Like(x, y) -> Like(x, y))\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: The cat is rough.\nFOL: all x. (Cat(x) -> Rough(x))\n\nTEXT: The cat is round.\nFOL: all x. (Cat(x) -> Round(x))\n\nTEXT: The dog does not chase the lion.\nFOL: all x y. (Dog(x) & Lion(x) & -Chase(x, y) -> NotChase(x, y))\n\nTEXT: The dog eats the cat.\nFOL: all x y. (Dog(x) & Cat(x) & -Eats(x, y) -> Eat(x, y))\n\nTEXT: The dog does not like the cat.\nFOL: all x y. (Dog(x) & Cat(x) & -Like(x, y) -> NotLike(x, y))\n\nTEXT: The lion chases the dog.\nFOL: all x y. (Lion(x) & Dog(x) & -Chase(x, y) -> Chase(x, y))\n\nTEXT: The lion is green.\nFOL: all x. (Lion(x) -> Green(x))\n\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x y. (Green(x) & Like(x, y) & -Eat(x, y) -> Eat(x, y))\n\nTEXT: If someone is round then they chase the lion.\nFOL: all x y. (Round(x) & -Chase(x, y) -> Chase(x, y))\n\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x y. (Chase(x, y) & -Like(x, y) -> Like(x, y))\n\nTEXT: If someone eats the dog then they are not round.\nFOL: all x y. (Eat(x, y) & -Round(x, y) -> NotRound(x, y))\n\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: all x y. (Dog(x) & -Like(x, y) & Lion(x) -> Red(x, y))\n\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x y. (Like(x, y) & Like(x, y) & -Chase(x, y) -> Chase(x, y))\n\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x y. (Like(x, y) & Like(x, y) & Green(x) -> Round(x, y))\n\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x y. (Like(x, y) & -Eat(x, y) -> Eat(x, y))\n\nTEXT: The cat likes the lion.\nFOL: all x y. (Cat(x) & Like(x, y) & -Chase(x, y))\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: The cat is rough.\nFOL: all x. (Cat(x) -> Rough(x))\n\nTEXT: The cat is round.\nFOL: all x. (Cat(x) -> Round(x))\n\nTEXT: The dog does not chase the lion.\nFOL: all x y. (Dog(x) & Lion(x) & -Chase(x, y) -> NotChase(x, y))\n\nTEXT: The dog eats the cat.\nFOL: all x y. (Dog(x) & Cat(x) & -Eats(x, y) -> Eat(x, y))\n\nTEXT: The dog does not like the cat.\nFOL: all x y. (Dog(x) & Cat(x) & -Like(x, y) -> NotLike(x, y))\n\nTEXT: The lion chases the dog.\nFOL: all x y. (Lion(x) & Dog(x) & -Chase(x, y) -> Chase(x, y))\n\nTEXT: The lion is green.\nFOL: all x. (Lion(x) -> Green(x))\n\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x y. (Green(x) & Like(x, y) & -Eat(x, y) -> Eat(x, y))\n\nTEXT: If someone is round then they chase the lion.\nFOL: all x y. (Round(x) & -Chase(x, y) -> Chase(x, y))\n\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x y. (Chase(x, y) & -Like(x, y) -> Like(x, y))\n\nTEXT: If someone eats the dog then they are not round.\nFOL: all x y. (Eat(x, y) & -Round(x, y) -> -Round(x, y))\n\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: all x y. (Dog(x) & -Like(x, y) & Lion(x) -> Red(x, y))\n\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x y. (Like(x, y) & Like(x, y) & -Chase(x, y) -> Chase(x, y))\n\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x y. (Like(x, y) & Like(x, y) & Green(x) -> Round(x, y))\n\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x y. (Like(x, y) & -Eat(x, y) -> Eat(x, y))\n\nTEXT: The cat likes the lion.\nFOL: all x y. (Cat(x) & Like(x, y) & -Chase(x, y))\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: The cat is rough.\nFOL: all x. (Cat(x) -> Rough(x))\n\nTEXT: The cat is round.\nFOL: all x. (Cat(x) -> Round(x))\n\nTEXT: The dog does not chase the lion.\nFOL: all x y. (Dog(x) & Lion(x) & -Chase(x, y) -> NotChase(x, y))\n\nTEXT: The dog eats the cat.\nFOL: all x y. (Dog(x) & Cat(x) & -Eats(x, y) -> Eat(x, y))\n\nTEXT: The dog does not like the cat.\nFOL: all x y. (Dog(x) & Cat(x) & -Like(x, y) -> NotLike(x, y))\n\nTEXT: The lion chases the dog.\nFOL: all x y. (Lion(x) & Dog(x) & -Chase(x, y) -> Chase(x, y))\n\nTEXT: The lion is green.\nFOL: all x. (Lion(x) -> Green(x))\n\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x y. (Green(x) & Like(x, y) & -Eat(x, y) -> Eat(x, y))\n\nTEXT: If someone is round then they chase the lion.\nFOL: all x y. (Round(x) & -Chase(x, y) -> Chase(x, y))\n\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x y. (Chase(x, y) & -Like(x, y) -> Like(x, y))\n\nTEXT: If someone eats the dog then they are not round.\nFOL: all x y. (Eat(x, y) & -Round(x, y) -> NotRound(x, y))\n\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: all x y. (Dog(x) & -Like(x, y) & Lion(x) -> Red(x, y))\n\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x y. (Like(x, y) & Like(x, y) & -Chase(x, y) -> Chase(x, y))\n\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x y. (Like(x, y) & Like(x, y) & Green(x, y) -> Round(x, y))\n\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x y. (Like(x, y) & -Eat(x, y) -> Eat(x, y))\n\nTEXT: The cat likes the lion.\nFOL: all x y. (Cat(x) & Like(x, y) & -Chase(x, y))\n\n</EVALUATE>"
  ]
 },
 {
  "index": 124,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> Blue(x))\nTEXT: Charlie is smart.\nFOL: all x. (Charlie(x) -> Smart(x))\nTEXT: If Bob is furry then Bob is cold.\nFOL: all x y. (Bob(x) & furry(x) -> Bob(x) & Cold(x))\nTEXT: If Bob is furry then Bob is kind.\nFOL: all x y. (Bob(x) & furry(x) -> Bob(x) & Kind(x))\nTEXT: All smart people are furry.\nFOL: all x. (Smart(x) -> furry(x))\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If someone is cold and not smart then they are kind.\nFOL: all x y. (Cold(x) & -Smart(x) -> Kind(x))\nTEXT: All smart, cold people are white.\nFOL: all x. (Smart(x) & Cold(x) -> White(x))\nTEXT: Kind, cold people are white.\nFOL: all x. (Kind(x) & Cold(x) -> White(x))\nTEXT: If someone is smart and not cold then they are not white.\nFOL: all x y. (Smart(x) & -Cold(x) -> -White(x))\nTEXT: Charlie is not big.\nFOL: -Big(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> Blue(x))\nTEXT: Charlie is smart.\nFOL: all x. (Charlie(x) -> Smart(x))\nTEXT: If Bob is furry then Bob is cold.\nFOL: all x y. (Bob(x) & Furry(x) -> Bob(x) & Cold(x))\nTEXT: If Bob is furry then Bob is kind.\nFOL: all x y. (Bob(x) & Furry(x) -> Bob(x) & Kind(x))\nTEXT: All smart people are furry.\nFOL: all x. (Smart(x) -> Furry(x))\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If someone is cold and not smart then they are kind.\nFOL: all x y. (Cold(x) & NotSmart(x) -> Kind(x))\nTEXT: All smart, cold people are white.\nFOL: all x. (Smart(x) & Cold(x) -> White(x))\nTEXT: Kind, cold people are white.\nFOL: all x. (Kind(x) & Cold(x) -> White(x))\nTEXT: If someone is smart and not cold then they are not white.\nFOL: all x y. (Smart(x) & NotCold(x) -> NotWhite(x))\nTEXT: Charlie is not big.\nFOL: -Big(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> Blue(x))\nTEXT: Charlie is smart.\nFOL: all x. (Charlie(x) -> Smart(x))\nTEXT: If Bob is furry then Bob is cold.\nFOL: all x y. (Bob(x) & Furry(x) -> Bob(x) & Cold(x))\nTEXT: If Bob is furry then Bob is kind.\nFOL: all x y. (Bob(x) & Furry(x) -> Bob(x) & Kind(x))\nTEXT: All smart people are furry.\nFOL: all x. (Smart(x) -> Furry(x))\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If someone is cold and not smart then they are kind.\nFOL: all x y. (Cold(x) & -Smart(x) -> Kind(x))\nTEXT: All smart, cold people are white.\nFOL: all x. (Smart(x) & Cold(x) -> White(x))\nTEXT: Kind, cold people are white.\nFOL: all x. (Kind(x) & Cold(x) -> White(x))\nTEXT: If someone is smart and not cold then they are not white.\nFOL: all x y. (Smart(x) & -Cold(x) -> -White(x))\nTEXT: Charlie is not big.\nFOL: -Big(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> Blue(x))\nTEXT: Charlie is smart.\nFOL: all x. (Charlie(x) -> Smart(x))\nTEXT: If Bob is furry then Bob is cold.\nFOL: all x y. (Bob(x) & Furry(x) -> Bob(x) & Cold(x))\nTEXT: If Bob is furry then Bob is kind.\nFOL: all x y. (Bob(x) & Furry(x) -> Bob(x) & Kind(x))\nTEXT: All smart people are furry.\nFOL: all x. (Smart(x) -> Furry(x))\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If someone is cold and not smart then they are kind.\nFOL: all x y. (Cold(x) & NotSmart(x) -> Kind(x))\nTEXT: All smart, cold people are white.\nFOL: all x. (Smart(x) & Cold(x) -> White(x))\nTEXT: Kind, cold people are white.\nFOL: all x. (Kind(x) & Cold(x) -> White(x))\nTEXT: If someone is smart and not cold then they are not white.\nFOL: all x y. (Smart(x) & NotCold(x) -> -White(x))\nTEXT: Charlie is not big.\nFOL: -Big(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> Blue(x))\nTEXT: Charlie is smart.\nFOL: all x. (Charlie(x) -> Smart(x))\nTEXT: If Bob is furry then Bob is cold.\nFOL: all x y. (Bob(x) & Furry(x) -> Bob(x) & Cold(x))\nTEXT: If Bob is furry then Bob is kind.\nFOL: all x y. (Bob(x) & Furry(x) -> Bob(x) & Kind(x))\nTEXT: All smart people are furry.\nFOL: all x. (Smart(x) -> Furry(x))\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If someone is cold and not smart then they are kind.\nFOL: all x y. (Cold(x) & -Smart(x) -> Kind(x))\nTEXT: All smart, cold people are white.\nFOL: all x. (Smart(x) & Cold(x) -> White(x))\nTEXT: Kind, cold people are white.\nFOL: all x. (Kind(x) & Cold(x) -> White(x))\nTEXT: If someone is smart and not cold then they are not white.\nFOL: all x y. (Smart(x) & -Cold(x) -> -White(x))\nTEXT: Charlie is not big.\nFOL: -Big(charlie)"
  ]
 },
 {
  "index": 125,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Bob is green.\nFOL: all x. (Bob(x) -> Green(x))\nTEXT: Erin is not blue.\nFOL: all x. (Erin(x) -> -Blue(x))\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\nTEXT: Erin is not nice.\nFOL: all x. (Erin(x) -> -Nice(x))\nTEXT: Gary is not green.\nFOL: all x. (Gary(x) -> -Green(x))\nTEXT: Gary is smart.\nFOL: all x. (Gary(x) -> Smart(x))\nTEXT: If someone is green and blue then they are round.\nFOL: all x y. (Green(x) & Blue(x) & MorePointsInGameBetween(x, y) -> Round(x, y))\nTEXT: If Erin is not green then Erin is blue.\nFOL: all x y. (Erin(x) & -Green(x) & -Blue(x) & MorePointsInGameBetween(x, y) -> Blue(x, y))\nTEXT: If someone is green and round then they are not cold.\nFOL: all x y. (Green(x) & Round(x) & -Cold(x) & MorePointsInGameBetween(x, y) -> NotCold(x, y))\nTEXT: If someone is red then they are not blue.\nFOL: all x y. (Red(x) & -Blue(x) & MorePointsInGameBetween(x, y) -> NotBlue(x, y))\nTEXT: If Bob is not green then Bob is nice.\nFOL: all x y. (Bob(x) & -Green(x) & -Nice(x) & MorePointsInGameBetween(x, y) -> Nice(x, y))\nTEXT: If someone is blue and not cold then they are nice.\nFOL: all x y. (Blue(x) & -Cold(x) & -Nice(x) & MorePointsInGameBetween(x, y) -> Nice(x, y))\nTEXT: If Erin is nice then Erin is not smart.\nFOL: all x y. (Erin(x) & Nice(x) & -Smart(x) & MorePointsInGameBetween(x, y) -> NotSmart(x, y))\nTEXT: If Erin is red then Erin is smart.\nFOL: all x y. (Erin(x) & Red(x) & Smart(x) & MorePointsInGameBetween(x, y) -> Smart(x, y))\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Bob is green.\nFOL: all x. (Bob(x) -> Green(x))\nTEXT: Erin is not blue.\nFOL: all x. (Erin(x) -> -Blue(x))\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\nTEXT: Erin is not nice.\nFOL: all x. (Erin(x) -> -Nice(x))\nTEXT: Gary is not green.\nFOL: all x. (Gary(x) -> -Green(x))\nTEXT: Gary is smart.\nFOL: all x. (Gary(x) -> Smart(x))\nTEXT: If someone is green and blue then they are round.\nFOL: all x y. (Green(x) & Blue(x) & MorePointsInGameBetween(x, y) -> Round(x, y))\nTEXT: If Erin is not green then Erin is blue.\nFOL: all x y. (Erin(x) & -Green(x) & -Blue(x) & MorePointsInGameBetween(x, y) -> Blue(x, y))\nTEXT: If someone is green and round then they are not cold.\nFOL: all x y. (Green(x) & Round(x) & -Cold(x) & MorePointsInGameBetween(x, y) -> NotCold(x, y))\nTEXT: If someone is red then they are not blue.\nFOL: all x y. (Red(x) & -Blue(x) & MorePointsInGameBetween(x, y) -> NotBlue(x, y))\nTEXT: If Bob is not green then Bob is nice.\nFOL: all x y. (Bob(x) & -Green(x) & -Nice(x) & MorePointsInGameBetween(x, y) -> Nice(x, y))\nTEXT: If someone is blue and not cold then they are nice.\nFOL: all x y. (Blue(x) & -Cold(x) & -Nice(x) & MorePointsInGameBetween(x, y) -> Nice(x, y))\nTEXT: If Erin is nice then Erin is not smart.\nFOL: all x y. (Erin(x) & Nice(x) & -Smart(x) & MorePointsInGameBetween(x, y) -> NotSmart(x, y))\nTEXT: If Erin is red then Erin is smart.\nFOL: all x y. (Erin(x) & -Red(x) & Smart(x) & MorePointsInGameBetween(x, y) -> Smart(x, y))\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Bob is green.\nFOL: all x. (Bob(x) -> Green(x))\nTEXT: Erin is not blue.\nFOL: all x. (Erin(x) -> -Blue(x))\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\nTEXT: Erin is not nice.\nFOL: all x. (Erin(x) -> -Nice(x))\nTEXT: Gary is not green.\nFOL: all x. (Gary(x) -> -Green(x))\nTEXT: Gary is smart.\nFOL: all x. (Gary(x) -> Smart(x))\nTEXT: If someone is green and blue then they are round.\nFOL: all x y. (Green(x) & Blue(x) & MorePointsInGameBetween(x, y) -> Round(x, y))\nTEXT: If Erin is not green then Erin is blue.\nFOL: all x y. (Erin(x) & -Green(x) & -Blue(x) & MorePointsInGameBetween(x, y) -> Blue(x, y))\nTEXT: If someone is green and round then they are not cold.\nFOL: all x y. (Green(x) & Round(x) & -Cold(x) & MorePointsInGameBetween(x, y) -> NotCold(x, y))\nTEXT: If someone is red then they are not blue.\nFOL: all x y. (Red(x) & -Blue(x) & MorePointsInGameBetween(x, y) -> NotBlue(x, y))\nTEXT: If Bob is not green then Bob is nice.\nFOL: all x y. (Bob(x) & -Green(x) & -Nice(x) & MorePointsInGameBetween(x, y) -> Nice(x, y))\nTEXT: If someone is blue and not cold then they are nice.\nFOL: all x y. (Blue(x) & -Cold(x) & -Nice(x) & MorePointsInGameBetween(x, y) -> Nice(x, y))\nTEXT: If Erin is nice then Erin is not smart.\nFOL: all x y. (Nice(x) & -Smart(x) & MorePointsInGameBetween(x, y) -> NotSmart(x, y))\nTEXT: If Erin is red then Erin is smart.\nFOL: all x y. (Red(x) & -Smart(x) & MorePointsInGameBetween(x, y) -> Smart(x, y))\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Bob is green.\nFOL: all x. (Bob(x) -> Green(x))\nTEXT: Erin is not blue.\nFOL: all x. (Erin(x) -> -Blue(x))\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\nTEXT: Erin is not nice.\nFOL: all x. (Erin(x) -> -Nice(x))\nTEXT: Gary is not green.\nFOL: all x. (Gary(x) -> -Green(x))\nTEXT: Gary is smart.\nFOL: all x. (Gary(x) -> Smart(x))\nTEXT: If someone is green and blue then they are round.\nFOL: all x y. (Green(x) & Blue(x) & MorePointsInGameBetween(x, y) -> Round(x, y))\nTEXT: If Erin is not green then Erin is blue.\nFOL: all x y. (Erin(x) & -Green(x) & -Blue(x) & MorePointsInGameBetween(x, y) -> Blue(x, y))\nTEXT: If someone is green and round then they are not cold.\nFOL: all x y. (Green(x) & Round(x) & -Cold(x) & MorePointsInGameBetween(x, y) -> NotCold(x, y))\nTEXT: If someone is red then they are not blue.\nFOL: all x y. (Red(x) & -Blue(x) & MorePointsInGameBetween(x, y) -> NotBlue(x, y))\nTEXT: If Bob is not green then Bob is nice.\nFOL: all x y. (Bob(x) & -Green(x) & -Nice(x) & MorePointsInGameBetween(x, y) -> Nice(x, y))\nTEXT: If someone is blue and not cold then they are nice.\nFOL: all x y. (Blue(x) & -Cold(x) & -Nice(x) & MorePointsInGameBetween(x, y) -> Nice(x, y))\nTEXT: If Erin is nice then Erin is not smart.\nFOL: all x y. (Nice(x) & Erin(x) & -Smart(x) & MorePointsInGameBetween(x, y) -> NotSmart(x, y))\nTEXT: If Erin is red then Erin is smart.\nFOL: all x y. (Red(x) & Erin(x) & Smart(x) & MorePointsInGameBetween(x, y) -> Smart(x, y))\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Bob is green.\nFOL: all x. (Bob(x) -> Green(x))\nTEXT: Erin is not blue.\nFOL: all x. (Erin(x) -> -Blue(x))\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\nTEXT: Erin is not nice.\nFOL: all x. (Erin(x) -> -Nice(x))\nTEXT: Gary is not green.\nFOL: all x. (Gary(x) -> -Green(x))\nTEXT: Gary is smart.\nFOL: all x. (Gary(x) -> Smart(x))\nTEXT: If someone is green and blue then they are round.\nFOL: all x y. (Green(x) & Blue(x) & MorePointsInGameBetween(x, y) -> Round(x, y))\nTEXT: If Erin is not green then Erin is blue.\nFOL: all x y. (Erin(x) & -Green(x) & -Blue(x) & MorePointsInGameBetween(x, y) -> Blue(x, y))\nTEXT: If someone is green and round then they are not cold.\nFOL: all x y. (Green(x) & Round(x) & -Cold(x) & MorePointsInGameBetween(x, y) -> NotCold(x, y))\nTEXT: If someone is red then they are not blue.\nFOL: all x y. (Red(x) & -Blue(x) & MorePointsInGameBetween(x, y) -> NotBlue(x, y))\nTEXT: If Bob is not green then Bob is nice.\nFOL: all x y. (Bob(x) & -Green(x) & -Nice(x) & MorePointsInGameBetween(x, y) -> Nice(x, y))\nTEXT: If someone is blue and not cold then they are nice.\nFOL: all x y. (Blue(x) & -Cold(x) & -Nice(x) & MorePointsInGameBetween(x, y) -> Nice(x, y))\nTEXT: If Erin is nice then Erin is not smart.\nFOL: all x y. (Erin(x) & Nice(x) & -Smart(x) & MorePointsInGameBetween(x, y) -> NotSmart(x, y))\nTEXT: If Erin is red then Erin is smart.\nFOL: all x y. (Erin(x) & Red(x) & Smart(x) & -Good(x) & MorePointsInGameBetween(x, y) -> Good(x, y))\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 126,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & Cold(x) & -Big(x) -> NotBig(x))\nTEXT: Fiona is not big.\nFOL: -Big(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & Cold(x) & -Big(x) -> NotBig(x))\nTEXT: Fiona is not big.\nFOL: -Big(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & Cold(x) & -Big(x) -> NotBig(x))\nTEXT: Fiona is not big.\nFOL: -Big(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & Cold(x) & -Big(x) -> NotBig(x))\nTEXT: Fiona is not big.\nFOL: -Big(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & Cold(x) & -Big(x) -> NotBig(x))\nTEXT: Fiona is not big.\nFOL: -Big(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & Cold(x) & -Big(x) -> NotBig(x))\nTEXT: Fiona is not big.\nFOL: -Big(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & Cold(x) & -Big(x) -> NotBig(x))\nTEXT: Fiona is not big.\nFOL: -Big(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & Cold(x) & -Big(x) -> NotBig(x))\nTEXT: Fiona is not big.\nFOL: -Big(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> -Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> -Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & -Cold(x) & -Big(x) -> -NotBig(x))\nTEXT: Fiona is not big.\nFOL: all x. (Fiona(x) -> -Big(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> -Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> -Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & -Cold(x) & -Big(x) -> -NotBig(x))\nTEXT: Fiona is not big.\nFOL: all x. (Fiona(x) -> -Big(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> -Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> -Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & -Cold(x) & -Big(x) -> -NotBig(x))\nTEXT: Fiona is not big.\nFOL: all x. (Fiona(x) -> -Big(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> -Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> -Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & -Cold(x) & -Big(x) -> -NotBig(x))\nTEXT: Fiona is not big.\nFOL: all x. (Fiona(x) -> -Big(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> -Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> -Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & -Cold(x) & -Big(x) -> -NotBig(x))\nTEXT: Fiona is not big.\nFOL: all x. (Fiona(x) -> -Big(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> -Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> -Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & -Cold(x) & -Big(x) -> -NotBig(x))\nTEXT: Fiona is not big.\nFOL: all x. (Fiona(x) -> -Big(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> -Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> -Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & -Cold(x) & -Big(x) -> -NotBig(x))\nTEXT: Fiona is not big.\nFOL: all x. (Fiona(x) -> -Big(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> -Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Harry",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & Cold(x) & -Big(x) -> NotBig(x))\nTEXT: Fiona is not big.\nFOL: not all x. (Fiona(x) -> -Big(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & Cold(x) & -Big(x) -> NotBig(x))\nTEXT: Fiona is not big.\nFOL: not all x. (Fiona(x) -> -Big(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & Cold(x) & -Big(x) -> NotBig(x))\nTEXT: Fiona is not big.\nFOL: not all x. (Fiona(x) -> -Big(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & Cold(x) & -Big(x) -> NotBig(x))\nTEXT: Fiona is not big.\nFOL: not all x. (Fiona(x) -> -Big(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & Cold(x) & -Big(x) -> NotBig(x))\nTEXT: Fiona is not big.\nFOL: not all x. (Fiona(x) -> -Big(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & Cold(x) & -Big(x) -> NotBig(x))\nTEXT: Fiona is not big.\nFOL: not all x. (Fiona(x) -> -Big(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & Cold(x) & -Big(x) -> NotBig(x))\nTEXT: Fiona is not big.\nFOL: not all x. (Fiona(x) -> -Big(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: If someone is blue and cold then they are not big",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & Cold(x) & -Big(x) -> NotBig(x))\nTEXT: Fiona is not big.\nFOL: -Big(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & Cold(x) & -Big(x) -> -NotBig(x))\nTEXT: Fiona is not big.\nFOL: -Big(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & Cold(x) & -Big(x) -> -NotBig(x))\nTEXT: Fiona is not big.\nFOL: -Big(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & Cold(x) & -Big(x) -> -NotBig(x))\nTEXT: Fiona is not big.\nFOL: -Big(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & Cold(x) & -Big(x) -> -NotBig(x))\nTEXT: Fiona is not big.\nFOL: -Big(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & Cold(x) & -Big(x) -> -NotBig(x))\nTEXT: Fiona is not big.\nFOL: -Big(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & Cold(x) & -Big(x) -> -NotBig(x))\nTEXT: Fiona is not big.\nFOL: -Big(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & Cold(x) & -Big(x) -> -NotBig(x))\nTEXT: Fiona is not big.\nFOL: -Big(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> -Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> -Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & -Cold(x) & -Big(x) -> -NotBig(x))\nTEXT: Fiona is not big.\nFOL: -Fiona(x) & -Big(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> -Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> -Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & -Cold(x) & -Big(x) -> -NotBig(x))\nTEXT: Fiona is not big.\nFOL: -Fiona(x) & -Big(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> -Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> -Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & -Cold(x) & -Big(x) -> -NotBig(x))\nTEXT: Fiona is not big.\nFOL: -Fiona(x) & -Big(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> -Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> -Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & -Cold(x) & -Big(x) -> -NotBig(x))\nTEXT: Fiona is not big.\nFOL: -Fiona(x) & -Big(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> -Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> -Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & -Cold(x) & -Big(x) -> -NotBig(x))\nTEXT: Fiona is not big.\nFOL: -Fiona(x) & -Big(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> -Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> -Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & -Cold(x) & -Big(x) -> -NotBig(x))\nTEXT: Fiona is not big.\nFOL: -Fiona(x) & -Big(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> -Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> -Big(x))\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x y. (Blue(x) & -Cold(x) & -Big(x) -> -NotBig(x))\nTEXT: Fiona is not big.\nFOL: -Fiona(x) & -Big(x)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> -Blue(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> -Big(x))\nTEXT: If"
  ]
 },
 {
  "index": 127,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle does not chase the cow.\nFOL: all x. (BaldEagle(x) & -ChaseCow(x))\nTEXT: The bald eagle is not kind.\nFOL: all x. (BaldEagle(x) & -Kind(x))\nTEXT: The bald eagle is not red.\nFOL: all x. (BaldEagle(x) & -Red(x))\nTEXT: The bald eagle likes the cow.\nFOL: all x. (BaldEagle(x) & -LikesCow(x))\nTEXT: The bald eagle likes the mouse.\nFOL: all x. (BaldEagle(x) & -LikesMouse(x))\nTEXT: The cow chases the bald eagle.\nFOL: all x. (Cow(x) & -ChaseBaldEagle(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) & -Red(x))\nTEXT: The cow likes the mouse.\nFOL: all x. (Cow(x) & -LikesMouse(x))\nTEXT: The cow visits the mouse.\nFOL: all x. (Cow(x) & -VisitsMouse(x))\nTEXT: The mouse chases the cow.\nFOL: all x. (Mouse(x) & -ChaseCow(x))\nTEXT: The mouse is blue.\nFOL: all x. (Mouse(x) & -Blue(x))\nTEXT: The mouse does not like the cow.\nFOL: all x. (Mouse(x) & -LikesCow(x))\nTEXT: If the mouse chases the bald eagle and the mouse is kind then the mouse does not like the cow.\nFOL: all x. (Mouse(x) & -ChaseBaldEagle(x) & -Kind(x) -> -LikesCow(x))\nTEXT: If the mouse is young then the mouse likes the cow.\nFOL: all x. (Mouse(x) & -Young(x) -> -LikesCow(x))\nTEXT: If someone chases the mouse then the mouse likes the cow.\nFOL: all x. (Someone(x) & -ChaseMouse(x) -> -LikesCow(x))\nTEXT: If someone is red and not green then they do not chase the cow.\nFOL: all x. (Someone(x) & -Red(x) & -Green(x) -> -ChaseCow(x))\nTEXT: If someone visits the mouse then the mouse likes the bald eagle.\nFOL: all x. (Someone(x) & -VisitsMouse(x) -> -LikesBaldEagle(x))\nTEXT: If someone likes the bald eagle then they are red.\nFOL: all x. (Someone(x) & -LikesBaldEagle(x) -> -Red(x))\nTEXT: If someone visits the bald eagle then the bald eagle does not chase the mouse.\nFOL: all x. (Someone(x) & -VisitsBaldEagle(x) -> -ChaseMouse(x))\nTEXT: If someone is red then they visit the cow.\nFOL: all x. (Someone(x) & -Red(x) -> -VisitsCow(x))\nTEXT: The mouse likes the bald eagle.\nFOL: all x. (Mouse(x) & -LikesBaldEagle(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle does not chase the cow.\nFOL: all x. (BaldEagle(x) & -ChaseCow(x))\nTEXT: The bald eagle is not kind.\nFOL: all x. (BaldEagle(x) & -Kind(x))\nTEXT: The bald eagle is not red.\nFOL: all x. (BaldEagle(x) & -Red(x))\nTEXT: The bald eagle likes the cow.\nFOL: all x. (BaldEagle(x) & -LikesCow(x))\nTEXT: The bald eagle likes the mouse.\nFOL: all x. (BaldEagle(x) & -LikesMouse(x))\nTEXT: The cow chases the bald eagle.\nFOL: all x. (Cow(x) & -ChaseBaldEagle(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) & -Red(x))\nTEXT: The cow likes the mouse.\nFOL: all x. (Cow(x) & -LikesMouse(x))\nTEXT: The cow visits the mouse.\nFOL: all x. (Cow(x) & -VisitsMouse(x))\nTEXT: The mouse chases the cow.\nFOL: all x. (Mouse(x) & -ChaseCow(x))\nTEXT: The mouse is blue.\nFOL: all x. (Mouse(x) & -IsBlue(x))\nTEXT: The mouse does not like the cow.\nFOL: all x. (Mouse(x) & -LikesCow(x))\nTEXT: If the mouse chases the bald eagle and the mouse is kind then the mouse does not like the cow.\nFOL: all x. (Mouse(x) & -ChaseBaldEagle(x) & -Kind(x) -> -LikesCow(x))\nTEXT: If the mouse is young then the mouse likes the cow.\nFOL: all x. (Mouse(x) & -Young(x) -> -LikesCow(x))\nTEXT: If someone chases the mouse then the mouse likes the cow.\nFOL: all x. (Someone(x) & -ChaseMouse(x) -> -LikesCow(x))\nTEXT: If someone is red and not green then they do not chase the cow.\nFOL: all x. (Someone(x) & -Red(x) & -Green(x) -> -ChaseCow(x))\nTEXT: If someone visits the mouse then the mouse likes the bald eagle.\nFOL: all x. (Someone(x) & -VisitsMouse(x) -> -LikesBaldEagle(x))\nTEXT: If someone likes the bald eagle then they are red.\nFOL: all x. (Someone(x) & -LikesBaldEagle(x) -> -Red(x))\nTEXT: If someone visits the bald eagle then the bald eagle does not chase the mouse.\nFOL: all x. (Someone(x) & -VisitsBaldEagle(x) -> -ChaseMouse(x))\nTEXT: If someone is red then they visit the cow.\nFOL: all x. (Someone(x) & -Red(x) -> -VisitsCow(x))\nTEXT: The mouse likes the bald eagle.\nFOL: all x. (Mouse(x) & -LikesBaldEagle(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle does not chase the cow.\nFOL: all x. (BaldEagle(x) & -ChaseCow(x))\nTEXT: The bald eagle is not kind.\nFOL: all x. (BaldEagle(x) & -Kind(x))\nTEXT: The bald eagle is not red.\nFOL: all x. (BaldEagle(x) & -Red(x))\nTEXT: The bald eagle likes the cow.\nFOL: all x. (BaldEagle(x) & -LikesCow(x))\nTEXT: The bald eagle likes the mouse.\nFOL: all x. (BaldEagle(x) & -LikesMouse(x))\nTEXT: The cow chases the bald eagle.\nFOL: all x. (Cow(x) & -ChaseBaldEagle(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) & -Red(x))\nTEXT: The cow likes the mouse.\nFOL: all x. (Cow(x) & -LikesMouse(x))\nTEXT: The cow visits the mouse.\nFOL: all x. (Cow(x) & -VisitsMouse(x))\nTEXT: The mouse chases the cow.\nFOL: all x. (Mouse(x) & -ChaseCow(x))\nTEXT: The mouse is blue.\nFOL: all x. (Mouse(x) & -Blue(x))\nTEXT: The mouse does not like the cow.\nFOL: all x. (Mouse(x) & -LikesCow(x))\nTEXT: If the mouse chases the bald eagle and the mouse is kind then the mouse does not like the cow.\nFOL: all x. (Mouse(x) & -ChaseBaldEagle(x) & -Kind(x)) -> -LikesCow(x)\nTEXT: If the mouse is young then the mouse likes the cow.\nFOL: all x. (Mouse(x) & -Young(x)) -> -LikesCow(x)\nTEXT: If someone chases the mouse then the mouse likes the cow.\nFOL: all x. (Someone(x) & -ChaseMouse(x)) -> -LikesCow(x)\nTEXT: If someone is red and not green then they do not chase the cow.\nFOL: all x. (Someone(x) & -Red(x) & -Green(x)) -> -ChaseCow(x)\nTEXT: If someone visits the mouse then the mouse likes the bald eagle.\nFOL: all x. (Someone(x) & -VisitsMouse(x)) -> -LikesBaldEagle(x)\nTEXT: If someone likes the bald eagle then they are red.\nFOL: all x. (Someone(x) & -LikesBaldEagle(x)) -> -Red(x)\nTEXT: If someone visits the bald eagle then the bald eagle does not chase the mouse.\nFOL: all x. (Someone(x) & -VisitsBaldEagle(x)) -> -ChaseMouse(x)\nTEXT: If someone is red then they visit the cow.\nFOL: all x. (Someone(x) & -Red(x)) -> -VisitsCow(x)\nTEXT: The mouse likes the bald eagle.\nFOL: all x. (Mouse(x) & -LikesBaldEagle(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle does not chase the cow.\nFOL: all x. (BaldEagle(x) & -ChaseCow(x))\nTEXT: The bald eagle is not kind.\nFOL: all x. (BaldEagle(x) & -Kind(x))\nTEXT: The bald eagle is not red.\nFOL: all x. (BaldEagle(x) & -Red(x))\nTEXT: The bald eagle likes the cow.\nFOL: all x. (BaldEagle(x) & -LikesCow(x))\nTEXT: The bald eagle likes the mouse.\nFOL: all x. (BaldEagle(x) & -LikesMouse(x))\nTEXT: The cow chases the bald eagle.\nFOL: all x. (Cow(x) & -ChaseBaldEagle(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) & -Red(x))\nTEXT: The cow likes the mouse.\nFOL: all x. (Cow(x) & -LikesMouse(x))\nTEXT: The cow visits the mouse.\nFOL: all x. (Cow(x) & -VisitsMouse(x))\nTEXT: The mouse chases the cow.\nFOL: all x. (Mouse(x) & -ChaseCow(x))\nTEXT: The mouse is blue.\nFOL: all x. (Mouse(x) & -Blue(x))\nTEXT: The mouse does not like the cow.\nFOL: all x. (Mouse(x) & -LikesCow(x))\nTEXT: If the mouse chases the bald eagle and the mouse is kind then the mouse does not like the cow.\nFOL: all x. (Mouse(x) & -ChaseBaldEagle(x) & -Kind(x) -> -LikesCow(x))\nTEXT: If the mouse is young then the mouse likes the cow.\nFOL: all x. (Mouse(x) & -Young(x) & -LikesCow(x))\nTEXT: If someone chases the mouse then the mouse likes the cow.\nFOL: all x. (Someone(x) & -ChaseMouse(x) & -LikesCow(x))\nTEXT: If someone is red and not green then they do not chase the cow.\nFOL: all x. (Someone(x) & -Red(x) & -NotGreen(x) -> -ChaseCow(x))\nTEXT: If someone visits the mouse then the mouse likes the bald eagle.\nFOL: all x. (Someone(x) & -VisitsMouse(x) & -LikesBaldEagle(x))\nTEXT: If someone likes the bald eagle then they are red.\nFOL: all x. (Someone(x) & -LikesBaldEagle(x) -> -Red(x))\nTEXT: If someone visits the bald eagle then the bald eagle does not chase the mouse.\nFOL: all x. (Someone(x) & -VisitsBaldEagle(x) -> -ChaseMouse(x))\nTEXT: If someone is red then they visit the cow.\nFOL: all x. (Someone(x) & -Red(x) -> -VisitsCow(x))\nTEXT: The mouse likes the bald eagle.\nFOL: all x. (Mouse(x) & -LikesBaldEagle(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle does not chase the cow.\nFOL: all x. (BaldEagle(x) & -ChaseCow(x))\nTEXT: The bald eagle is not kind.\nFOL: all x. (BaldEagle(x) & -Kind(x))\nTEXT: The bald eagle is not red.\nFOL: all x. (BaldEagle(x) & -Red(x))\nTEXT: The bald eagle likes the cow.\nFOL: all x. (BaldEagle(x) & -LikesCow(x))\nTEXT: The bald eagle likes the mouse.\nFOL: all x. (BaldEagle(x) & -LikesMouse(x))\nTEXT: The cow chases the bald eagle.\nFOL: all x. (Cow(x) & -ChaseBaldEagle(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) & -Red(x))\nTEXT: The cow likes the mouse.\nFOL: all x. (Cow(x) & -LikesMouse(x))\nTEXT: The cow visits the mouse.\nFOL: all x. (Cow(x) & -VisitsMouse(x))\nTEXT: The mouse chases the cow.\nFOL: all x. (Mouse(x) & -ChaseCow(x))\nTEXT: The mouse is blue.\nFOL: all x. (Mouse(x) & -Blue(x))\nTEXT: The mouse does not like the cow.\nFOL: all x. (Mouse(x) & -LikesCow(x))\nTEXT: If the mouse chases the bald eagle and the mouse is kind then the mouse does not like the cow.\nFOL: all x. (Mouse(x) & -ChaseBaldEagle(x) & -Kind(x) -> -LikesCow(x))\nTEXT: If the mouse is young then the mouse likes the cow.\nFOL: all x. (Mouse(x) & -Young(x) -> -LikesCow(x))\nTEXT: If someone chases the mouse then the mouse likes the cow.\nFOL: all x. (Someone(x) & -ChaseMouse(x) -> -LikesCow(x))\nTEXT: If someone is red and not green then they do not chase the cow.\nFOL: all x. (Someone(x) & -Red(x) & -Green(x) -> -ChaseCow(x))\nTEXT: If someone visits the mouse then the mouse likes the bald eagle.\nFOL: all x. (Someone(x) & -VisitsMouse(x) -> -LikesBaldEagle(x))\nTEXT: If someone likes the bald eagle then they are red.\nFOL: all x. (Someone(x) & -LikesBaldEagle(x) -> -Red(x))\nTEXT: If someone visits the bald eagle then the bald eagle does not chase the mouse.\nFOL: all x. (Someone(x) & -VisitsBaldEagle(x) -> -ChaseMouse(x))\nTEXT: If someone is red then they visit the cow.\nFOL: all x. (Someone(x) & -Red(x) -> -VisitsCow(x))\nTEXT: The mouse likes the bald eagle.\nFOL: -LikesBaldEagle(mouse)\n</EVALUATE>"
  ]
 },
 {
  "index": 128,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is quiet.\nFOL: all x. (Quiet(x) -> -Anne(x))\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Anne is quiet.\nFOL: all x. (Quiet(x) -> -Anne(x))\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Anne is quiet.\nFOL: all x. (Quiet(x) -> -Anne(x))\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Anne is quiet.\nFOL: all x. (Quiet(x) -> -Anne(x))\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Anne is quiet.\nFOL: all x. (Quiet(x) -> -Anne(x))\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Anne is quiet.\nFOL: all x. (Quiet(x) -> -Anne(x))\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x",
   "<EVALUATE>\nTEXT: Anne is quiet.\nFOL: all x. (Quiet(x) -> -Anne(x))\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Anne is quiet.\nFOL: all x. (Quiet(x) -> -Anne(x))\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet",
   "<EVALUATE>\nTEXT: Anne is quiet.\nFOL: all x. (Quiet(x) -> -Anne(x))\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Anne is quiet.\nFOL: all x. (Quiet(x) -> -Anne(x))\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Anne is quiet.\nFOL: all x. (Quiet(x) -> -Anne(x))\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind",
   "<EVALUATE>\nTEXT: Anne is quiet.\nFOL: all x. (Quiet(x) -> -Anne(x))\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Anne is quiet.\nFOL: all x. (Quiet(x) -> -Anne(x))\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Anne is quiet.\nFOL: all x. (Quiet(x) -> -Anne(x))\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Anne is blue.\nFOL: all x. (Blue(x) -> -Anne(x))\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Anne is blue.\nFOL: all x. (Blue(x) -> -Anne(x))\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Anne is blue.\nFOL: all x. (Blue(x) -> -Anne(x))\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x",
   "<EVALUATE>\nTEXT: Anne is quiet.\nFOL: all x. (Quiet(x) -> -Anne(x))\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Anne is quiet.\nFOL: all x. (Quiet(x) -> -Anne(x))\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -Charlie(x))\nTEXT: Charlie is kind.\nFOL: all x. (Kind(x) -> -Charlie(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Quiet(x) -> -Charlie(x))\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Fiona is kind.\nFOL: all x. (Kind(x) -> -Fiona(x))\nTEXT: Fiona is smart.\nFOL: all x. (Smart(x) -> -Fiona(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Quiet(x) -> -Fiona(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Charlie is blue.\nFOL: all x. (Blue(x) -> -"
  ]
 },
 {
  "index": 129,
  "responses": [
   "<EVALUATE>\nTEXT: The cat is blue.\nFOL: all x. (Cat(x) -> Blue(x))\nTEXT: The cat is green.\nFOL: all x. (Cat(x) -> Green(x))\nTEXT: The cat is kind.\nFOL: all x. (Cat(x) -> Kind(x))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat is young.\nFOL: all x. (Cat(x) -> Young(x))\nTEXT: The cat likes the mouse.\nFOL: all x. (Cat(x) -> Likes(x, Mouse(x)))\nTEXT: The cat sees the mouse.\nFOL: all x. (Cat(x) -> Sees(x, Mouse(x)))\nTEXT: The cat visits the mouse.\nFOL: all x. (Cat(x) -> Visits(x, Mouse(x)))\nTEXT: The mouse is blue.\nFOL: all x. (Mouse(x) -> Blue(x))\nTEXT: The mouse likes the cat.\nFOL: all x. (Mouse(x) -> Likes(x, Cat(x)))\nTEXT: The mouse sees the cat.\nFOL: all x. (Mouse(x) -> Sees(x, Cat(x)))\nTEXT: The mouse visits the cat.\nFOL: all x. (Mouse(x) -> Visits(x, Cat(x)))\nTEXT: If someone is green then they like the cat.\nFOL: all x. (Green(x) -> Likes(x, Cat(x)))\nTEXT: If someone is kind then they like the mouse.\nFOL: all x. (Kind(x) -> Likes(x, Mouse(x)))\nTEXT: If someone sees the cat and the cat sees the mouse then the mouse is blue.\nFOL: all x. (Cat(x) -> Sees(x, Mouse(x)) & Mouse(x) -> Blue(x))\nTEXT: If someone likes the mouse and the mouse is blue then they visit the mouse.\nFOL: all x. (Mouse(x) -> Likes(x, Cat(x)) & Blue(x) -> Visits(x, Mouse(x)))\nTEXT: If the mouse likes the cat then the mouse is kind.\nFOL: all x. (Mouse(x) -> Likes(x, Cat(x)) & Cat(x) -> Kind(x))\nTEXT: If someone likes the cat then they visit the cat.\nFOL: all x. (Cat(x) -> Likes(x, Cat(x)) & Cat(x) -> Visits(x, Cat(x)))\nTEXT: The mouse is nice.\nFOL: all x. (Mouse(x) -> Nice(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is blue.\nFOL: all x. (Cat(x) -> Blue(x))\nTEXT: The cat is green.\nFOL: all x. (Cat(x) -> Green(x))\nTEXT: The cat is kind.\nFOL: all x. (Cat(x) -> Kind(x))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat is young.\nFOL: all x. (Cat(x) -> Young(x))\nTEXT: The cat likes the mouse.\nFOL: all x. (Cat(x) -> Likes(x, Mouse(x)))\nTEXT: The cat sees the mouse.\nFOL: all x. (Cat(x) -> Sees(x, Mouse(x)))\nTEXT: The cat visits the mouse.\nFOL: all x. (Cat(x) -> Visits(x, Mouse(x)))\nTEXT: The mouse is blue.\nFOL: all x. (Mouse(x) -> Blue(x))\nTEXT: The mouse likes the cat.\nFOL: all x. (Mouse(x) -> Likes(x, Cat(x)))\nTEXT: The mouse sees the cat.\nFOL: all x. (Mouse(x) -> Sees(x, Cat(x)))\nTEXT: The mouse visits the cat.\nFOL: all x. (Mouse(x) -> Visits(x, Cat(x)))\nTEXT: If someone is green then they like the cat.\nFOL: all x. (Green(x) -> Likes(x, Cat(x)))\nTEXT: If someone is kind then they like the mouse.\nFOL: all x. (Kind(x) -> Likes(x, Mouse(x)))\nTEXT: If someone sees the cat and the cat sees the mouse then the mouse is blue.\nFOL: all x. (Cat(x) & Sees(x, Mouse(x)) & Mouse(x) -> Blue(x))\nTEXT: If someone likes the mouse and the mouse is blue then they visit the mouse.\nFOL: all x. (Mouse(x) & Likes(x, Mouse(x)) & Mouse(x) -> Visits(x, Mouse(x)))\nTEXT: If the mouse likes the cat then the mouse is kind.\nFOL: all x. (Mouse(x) & Likes(x, Cat(x)) & Mouse(x) -> Kind(x))\nTEXT: If someone likes the cat then they visit the cat.\nFOL: all x. (Cat(x) & Likes(x, Cat(x)) & Cat(x) -> Visits(x, Cat(x)))\nTEXT: The mouse is nice.\nFOL: all x. (Mouse(x) -> Nice(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is blue.\nFOL: all x. (Cat(x) -> Blue(x))\nTEXT: The cat is green.\nFOL: all x. (Cat(x) -> Green(x))\nTEXT: The cat is kind.\nFOL: all x. (Cat(x) -> Kind(x))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat is young.\nFOL: all x. (Cat(x) -> Young(x))\nTEXT: The cat likes the mouse.\nFOL: all x. (Cat(x) -> Likes(x, Mouse(x)))\nTEXT: The cat sees the mouse.\nFOL: all x. (Cat(x) -> Sees(x, Mouse(x)))\nTEXT: The cat visits the mouse.\nFOL: all x. (Cat(x) -> Visits(x, Mouse(x)))\nTEXT: The mouse is blue.\nFOL: all x. (Mouse(x) -> Blue(x))\nTEXT: The mouse likes the cat.\nFOL: all x. (Mouse(x) -> Likes(x, Cat(x)))\nTEXT: The mouse sees the cat.\nFOL: all x. (Mouse(x) -> Sees(x, Cat(x)))\nTEXT: The mouse visits the cat.\nFOL: all x. (Mouse(x) -> Visits(x, Cat(x)))\nTEXT: If someone is green then they like the cat.\nFOL: all x. (Green(x) -> Likes(x, Cat(x)))\nTEXT: If someone is kind then they like the mouse.\nFOL: all x. (Kind(x) -> Likes(x, Mouse(x)))\nTEXT: If someone sees the cat and the cat sees the mouse then the mouse is blue.\nFOL: all x. ((Cat(x) & Sees(x, Mouse(x))) & (Cat(x) & Sees(x, Mouse(x))) -> Blue(x))\nTEXT: If someone likes the mouse and the mouse is blue then they visit the mouse.\nFOL: all x. (Likes(x, Mouse(x)) & Mouse(x) -> Visits(x, Mouse(x)))\nTEXT: If the mouse likes the cat then the mouse is kind.\nFOL: all x. (Likes(x, Cat(x)) & Cat(x) -> Kind(x))\nTEXT: If someone likes the cat then they visit the cat.\nFOL: all x. (Likes(x, Cat(x)) & Cat(x) -> Visits(x, Cat(x)))\nTEXT: The mouse is nice.\nFOL: all x. (Mouse(x) -> Nice(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is blue.\nFOL: all x. (Cat(x) -> Blue(x))\nTEXT: The cat is green.\nFOL: all x. (Cat(x) -> Green(x))\nTEXT: The cat is kind.\nFOL: all x. (Cat(x) -> Kind(x))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat is young.\nFOL: all x. (Cat(x) -> Young(x))\nTEXT: The cat likes the mouse.\nFOL: all x. (Cat(x) -> Likes(x, Mouse(x)))\nTEXT: The cat sees the mouse.\nFOL: all x. (Cat(x) -> Sees(x, Mouse(x)))\nTEXT: The cat visits the mouse.\nFOL: all x. (Cat(x) -> Visits(x, Mouse(x)))\nTEXT: The mouse is blue.\nFOL: all x. (Mouse(x) -> Blue(x))\nTEXT: The mouse likes the cat.\nFOL: all x. (Mouse(x) -> Likes(x, Cat(x)))\nTEXT: The mouse sees the cat.\nFOL: all x. (Mouse(x) -> Sees(x, Cat(x)))\nTEXT: The mouse visits the cat.\nFOL: all x. (Mouse(x) -> Visits(x, Cat(x)))\nTEXT: If someone is green then they like the cat.\nFOL: all x. (Green(x) -> Likes(x, Cat(x)))\nTEXT: If someone is kind then they like the mouse.\nFOL: all x. (Kind(x) -> Likes(x, Mouse(x)))\nTEXT: If someone sees the cat and the cat sees the mouse then the mouse is blue.\nFOL: all x. ((Cat(x) & Sees(x, Mouse(x))) & (Cat(x) & Sees(x, Mouse(x))) -> Blue(x))\nTEXT: If someone likes the mouse and the mouse is blue then they visit the mouse.\nFOL: all x. (Likes(x, Mouse(x)) & Mouse(x) -> Visits(x, Mouse(x)))\nTEXT: If the mouse likes the cat then the mouse is kind.\nFOL: all x. (Likes(x, Cat(x)) & Cat(x) -> Kind(x))\nTEXT: If someone likes the cat then they visit the cat.\nFOL: all x. (Likes(x, Cat(x)) & Cat(x) -> Visits(x, Cat(x)))\nTEXT: The mouse is nice.\nFOL: all x. (Mouse(x) -> Nice(x))",
   "<EVALUATE>\nTEXT: The cat is blue.\nFOL: all x. (Cat(x) -> Blue(x))\nTEXT: The cat is green.\nFOL: all x. (Cat(x) -> Green(x))\nTEXT: The cat is kind.\nFOL: all x. (Cat(x) -> Kind(x))\nTEXT: The cat is nice.\nFOL: all x. (Cat(x) -> Nice(x))\nTEXT: The cat is young.\nFOL: all x. (Cat(x) -> Young(x))\nTEXT: The cat likes the mouse.\nFOL: all x. (Cat(x) -> Likes(x, Mouse(x)))\nTEXT: The cat sees the mouse.\nFOL: all x. (Cat(x) -> Sees(x, Mouse(x)))\nTEXT: The cat visits the mouse.\nFOL: all x. (Cat(x) -> Visits(x, Mouse(x)))\nTEXT: The mouse is blue.\nFOL: all x. (Mouse(x) -> Blue(x))\nTEXT: The mouse likes the cat.\nFOL: all x. (Mouse(x) -> Likes(x, Cat(x)))\nTEXT: The mouse sees the cat.\nFOL: all x. (Mouse(x) -> Sees(x, Cat(x)))\nTEXT: The mouse visits the cat.\nFOL: all x. (Mouse(x) -> Visits(x, Cat(x)))\nTEXT: If someone is green then they like the cat.\nFOL: all x. (Green(x) -> Likes(x, Cat(x)))\nTEXT: If someone is kind then they like the mouse.\nFOL: all x. (Kind(x) -> Likes(x, Mouse(x)))\nTEXT: If someone sees the cat and the cat sees the mouse then the mouse is blue.\nFOL: all x. ((Cat(x) & Sees(x, Mouse(x))) & (Cat(x) & Sees(x, Mouse(x))) -> Blue(x))\nTEXT: If someone likes the mouse and the mouse is blue then they visit the mouse.\nFOL: all x. (Likes(x, Mouse(x)) & Mouse(x) -> Visits(x, Mouse(x)))\nTEXT: If the mouse likes the cat then the mouse is kind.\nFOL: all x. (Likes(x, Cat(x)) & Cat(x) -> Kind(x))\nTEXT: If someone likes the cat then they visit the cat.\nFOL: all x. (Likes(x, Cat(x)) -> Visits(x, Cat(x)))\nTEXT: The mouse is nice.\nFOL: all x. (Mouse(x) -> Nice(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 130,
  "responses": [
   "<EVALUATE>\nTEXT: The rabbit is green.\nFOL: all x. (Rabbit(x) -> Green(x))\nTEXT: If someone is nice then they are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: All nice people are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\nTEXT: If the rabbit is cold and the rabbit is not green then the rabbit is not big.\nFOL: -Cold(x) & -Green(x) & -Big(x) -> -Big(x)\nTEXT: If someone is cold and green then they are nice.\nFOL: all x. (Cold(x) & Green(x) -> Nice(x))\nTEXT: All big, young people are nice.\nFOL: all x. (Big(x) & Young(x) -> Nice(x))\nTEXT: All green people are cold.\nFOL: all x. (Green(x) -> -Cold(x))\nTEXT: The rabbit does not eat the rabbit.\nFOL: -Eats(x, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The rabbit is green.\nFOL: all x. (Green(x) -> Rabbit(x))\nTEXT: If someone is nice then they are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: All nice people are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\nTEXT: If the rabbit is cold and the rabbit is not green then the rabbit is not big.\nFOL: all x. (Cold(x) & Green(x) & -Big(x) -> -Big(x))\nTEXT: If someone is cold and green then they are nice.\nFOL: all x. (Cold(x) & Green(x) -> Nice(x))\nTEXT: All big, young people are nice.\nFOL: all x. (Big(x) & Young(x) -> Nice(x))\nTEXT: All green people are cold.\nFOL: all x. (Green(x) -> -Cold(x))\nTEXT: The rabbit does not eat the rabbit.\nFOL: -EatTheRabbit(rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The rabbit is green.\nFOL: all x. (Green(x) -> Rabbit(x))\nTEXT: If someone is nice then they are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: All nice people are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\nTEXT: If the rabbit is cold and the rabbit is not green then the rabbit is not big.\nFOL: all x. (Cold(x) & Green(x) & -Big(x) -> -Big(x))\nTEXT: If someone is cold and green then they are nice.\nFOL: all x. (Cold(x) & Green(x) -> Nice(x))\nTEXT: All big, young people are nice.\nFOL: all x. (Big(x) & Young(x) -> Nice(x))\nTEXT: All green people are cold.\nFOL: all x. (Green(x) -> -Cold(x))\nTEXT: The rabbit does not eat the rabbit.\nFOL: -Eats(x, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The rabbit is green.\nFOL: all x. (Rabbit(x) -> Green(x))\nTEXT: If someone is nice then they are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: All nice people are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\nTEXT: If the rabbit is cold and the rabbit is not green then the rabbit is not big.\nFOL: -Cold(x) & -Green(x) & -Big(x) -> -Big(x)\nTEXT: If someone is cold and green then they are nice.\nFOL: all x. (Cold(x) & Green(x) -> Nice(x))\nTEXT: All big, young people are nice.\nFOL: all x. (Big(x) & Young(x) -> Nice(x))\nTEXT: All green people are cold.\nFOL: all x. (Green(x) -> -Cold(x))\nTEXT: The rabbit does not eat the rabbit.\nFOL: -Eat(x, rabbit)",
   "<EVALUATE>\nTEXT: The rabbit is green.\nFOL: all x. (Rabbit(x) -> Green(x))\nTEXT: If someone is nice then they are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: All nice people are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\nTEXT: If the rabbit is cold and the rabbit is not green then the rabbit is not big.\nFOL: -Cold(x) & -Green(x) & -Big(x) -> -Big(x)\nTEXT: If someone is cold and green then they are nice.\nFOL: all x. (Cold(x) & Green(x) -> Nice(x))\nTEXT: All big, young people are nice.\nFOL: all x. (Big(x) & Young(x) -> Nice(x))\nTEXT: All green people are cold.\nFOL: all x. (Green(x) -> -Cold(x))\nTEXT: The rabbit does not eat the rabbit.\nFOL: -Eats(x, rabbit)"
  ]
 },
 {
  "index": 131,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is green to the job, which is why he turned blue from being so cold.\nFOL: all x y. (Bob(x) & Green(x) & Job(x) & Cold(x) -> Blue(x))\nTEXT: Green, big and red are qualities which all describe Charlie.\nFOL: all x y. (Green(x) & Big(x) & Red(x) & Charlie(x))\nTEXT: Dave is a kind person and he is also often cold.\nFOL: all x y. (Dave(x) & Kind(x) & Cold(x) -> Dave(x))\nTEXT: Gary is a really nice guy with a big round body, usually wearing red.\nFOL: all x y. (Gary(x) & Nice(x) & Big(x) & Round(x) & Red(x))\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: all x y. (Big(x) & Round(x) & Kind(x) & Naive(x) -> Rough(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: all x y. (Big(x) & Cold(x) -> Blue(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: all x y. (Big(x) & Cold(x) -> Kind(x))\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: all x y. (Big(x) & Red(x) & Blue(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x y. (Cold(x) & Red(x) & Kind(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: all x y. (Cold(x) & Red(x) & Blue(x) & Big(x))\nTEXT: Charlie is big.\nFOL: Big(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green to the job, which is why he turned blue from being so cold.\nFOL: all x y. (Bob(x) & Green(x) & Job(x) & Cold(x) -> Blue(x))\nTEXT: Green, big and red are qualities which all describe Charlie.\nFOL: all x y. (Green(x) & Big(x) & Red(x) & Charlie(x))\nTEXT: Dave is a kind person and he is also often cold.\nFOL: all x y. (Dave(x) & Kind(x) & Cold(x) -> Dave(x))\nTEXT: Gary is a really nice guy with a big round body, usually wearing red.\nFOL: all x y. (Gary(x) & Nice(x) & Big(x) & Round(x) & Red(x))\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: all x y. (Big(x) & Round(x) & Kind(x) & Naive(x) -> Rough(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: all x y. (Big(x) & Cold(x) -> Blue(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: all x y. (Big(x) & Cold(x) -> Kind(x))\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: all x y. (Big(x) & Red(x) & Blue(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x y. (Cold(x) & Red(x) & Kind(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: all x y. (Cold(x) & Red(x) & Blue(x) & Big(x))\nTEXT: Charlie is big.\nFOL: all x. (Charlie(x) -> Big(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green to the job, which is why he turned blue from being so cold.\nFOL: all x y. (Bob(x) & Green(x) & Job(x) & Cold(x) -> Blue(x))\nTEXT: Green, big and red are qualities which all describe Charlie.\nFOL: all x y. (Green(x) & Big(x) & Red(x) & Charlie(x))\nTEXT: Dave is a kind person and he is also often cold.\nFOL: all x y. (Dave(x) & Kind(x) & Cold(x) -> Dave(x))\nTEXT: Gary is a really nice guy with a big round body, usually wearing red.\nFOL: all x y. (Gary(x) & Nice(x) & Big(x) & Round(x) & Red(x))\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: all x y. (Big(x) & Round(x) & Kind(x) & Naive(x) -> Rough(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: all x y. (Big(x) & Cold(x) -> Blue(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: all x y. (Big(x) & Cold(x) -> Kind(x))\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: all x y. (Big(x) & Red(x) & Blue(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x y. (Cold(x) & Red(x) & Kind(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: all x y. (Cold(x) & Red(x) & Blue(x) & Big(x))\nTEXT: Charlie is big.\nFOL: all x. (Big(x) & Charlie(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green to the job, which is why he turned blue from being so cold.\nFOL: all x y. (Bob(x) & Green(x) & Job(x) & Cold(x) -> Blue(x))\nTEXT: Green, big and red are qualities which all describe Charlie.\nFOL: all x y. (Green(x) & Big(x) & Red(x) & Charlie(x))\nTEXT: Dave is a kind person and he is also often cold.\nFOL: all x y. (Dave(x) & Kind(x) & Cold(x) -> Dave(x))\nTEXT: Gary is a really nice guy with a big round body, usually wearing red.\nFOL: all x y. (Gary(x) & Nice(x) & Big(x) & Round(x) & Red(x))\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: all x y. (Big(x) & Round(x) & Kind(x) & Naive(x) -> Rough(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: all x y. (Big(x) & Cold(x) -> Blue(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: all x y. (Big(x) & Cold(x) -> Kind(x))\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: all x y. (Big(x) & Red(x) & Blue(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x y. (Cold(x) & Red(x) & Kind(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: all x y. (Cold(x) & Red(x) & Blue(x) & Big(x))\nTEXT: Charlie is big.\nFOL: all x y. (Charlie(x) & Big(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green to the job, which is why he turned blue from being so cold.\nFOL: all x y. (Bob(x) & Green(x) & Job(x) & Cold(x) -> Blue(x))\nTEXT: Green, big and red are qualities which all describe Charlie.\nFOL: all x y. (Green(x) & Big(x) & Red(x) & Charlie(x))\nTEXT: Dave is a kind person and he is also often cold.\nFOL: all x y. (Dave(x) & Kind(x) & Cold(x) -> Dave(x))\nTEXT: Gary is a really nice guy with a big round body, usually wearing red.\nFOL: all x y. (Gary(x) & Nice(x) & Big(x) & Round(x) & Red(x))\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: all x y. (Big(x) & Round(x) & Kind(x) & Naive(x) -> Rough(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: all x y. (Big(x) & Cold(x) -> Blue(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: all x y. (Big(x) & Cold(x) -> Kind(x))\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: all x y. (Big(x) & Red(x) & Blue(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x y. (Cold(x) & Red(x) & Kind(x) -> Others(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: all x y. (Cold(x) & Red(x) & Blue(x) & Big(x))\nTEXT: Charlie is big.\nFOL: all x. (Charlie(x) -> Big(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 132,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle sees the rabbit.\nFOL: all x. (Eagle(x) & Rabbit(x) -> See(x))\nTEXT: The lion is not big.\nFOL: all x. (Lion(x) & -Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) & Kind(x))\nTEXT: The lion likes the bald eagle.\nFOL: all x. (Lion(x) & Like(x) & Eagle(x))\nTEXT: The lion likes the bald eagle.\nFOL: all x. (Lion(x) & Like(x) & Eagle(x))\nTEXT: The lion sees the squirrel.\nFOL: all x. (Lion(x) & See(x) & Squirrel(x))\nTEXT: The lion sees the squirrel.\nFOL: all x. (Lion(x) & See(x) & Squirrel(x))\nTEXT: The rabbit is not big.\nFOL: all x. (Rabbit(x) & -Big(x))\nTEXT: The rabbit is not big.\nFOL: all x. (Rabbit(x) & -Big(x))\nTEXT: The squirrel is not green.\nFOL: all x. (Squirrel(x) & -Green(x))\nTEXT: The squirrel is not green.\nFOL: all x. (Squirrel(x) & -Green(x))\nTEXT: The squirrel is red.\nFOL: all x. (Squirrel(x) & Red(x))\nTEXT: The squirrel is red.\nFOL: all x. (Squirrel(x) & Red(x))\nTEXT: The squirrel does not like the lion.\nFOL: all x. (Squirrel(x) & -Like(x) & Lion(x))\nTEXT: The squirrel does not like the lion.\nFOL: all x. (Squirrel(x) & -Like(x) & Lion(x))\nTEXT: The squirrel sees the rabbit.\nFOL: all x. (Squirrel(x) & See(x) & Rabbit(x))\nTEXT: The squirrel sees the rabbit.\nFOL: all x. (Squirrel(x) & See(x) & Rabbit(x))\nTEXT: If something likes the squirrel and it likes the rabbit then it does not see the bald eagle.\nFOL: all x. ((Like(x) & Squirrel(x)) & Like(x) & Eagle(x)) -> -See(x)\nTEXT: If something likes the squirrel and it likes the rabbit then it does not see the bald eagle.\nFOL: all x. ((Like(x) & Squirrel(x)) & Like(x) & Eagle(x)) -> -See(x)\nTEXT: If something likes the rabbit then it chases the lion.\nFOL: all x. (Like(x) & Rabbit(x) -> Chase(x))\nTEXT: If something likes the rabbit then it chases the lion.\nFOL: all x. (Like(x) & Rabbit(x) -> Chase(x))\nTEXT: If something likes the lion then the lion sees the bald eagle.\nFOL: all x. (Like(x) & Lion(x) -> See(x))\nTEXT: If something likes the lion then the lion sees the bald eagle.\nFOL: all x. (Like(x) & Lion(x) -> See(x))\nTEXT: If something is nice and it chases the rabbit then the rabbit likes the lion.\nFOL: all x. (Nice(x) & Chase(x) & Rabbit(x) -> Like(x))\nTEXT: If something is nice and it chases the rabbit then the rabbit likes the lion.\nFOL: all x. (Nice(x) & Chase(x) & Rabbit(x) -> Like(x))\nTEXT: If something chases the lion then it is nice.\nFOL: all x. (Chase(x) & Lion(x) -> Nice(x))\nTEXT: If something is red then it likes the rabbit.\nFOL: all x. (Red(x) & Like(x) & Rabbit(x))\nTEXT: The squirrel is nice.\nFOL: all x. (Red(x) & Like(x) & Squirrel(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle sees the rabbit.\nFOL: all x. (Eagle(x) & Rabbit(x) -> See(x))\nTEXT: The lion is not big.\nFOL: all x. (Lion(x) & -Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) & Kind(x))\nTEXT: The lion likes the bald eagle.\nFOL: all x. (Lion(x) & Like(x) & Eagle(x))\nTEXT: The lion likes the bald eagle.\nFOL: all x. (Lion(x) & Like(x) & Eagle(x))\nTEXT: The lion sees the squirrel.\nFOL: all x. (Lion(x) & See(x) & Squirrel(x))\nTEXT: The lion sees the squirrel.\nFOL: all x. (Lion(x) & See(x) & Squirrel(x))\nTEXT: The rabbit is not big.\nFOL: all x. (Rabbit(x) & -Big(x))\nTEXT: The rabbit is not big.\nFOL: all x. (Rabbit(x) & -Big(x))\nTEXT: The squirrel is not green.\nFOL: all x. (Squirrel(x) & -Green(x))\nTEXT: The squirrel is not green.\nFOL: all x. (Squirrel(x) & -Green(x))\nTEXT: The squirrel is red.\nFOL: all x. (Squirrel(x) & Red(x))\nTEXT: The squirrel is red.\nFOL: all x. (Squirrel(x) & Red(x))\nTEXT: The squirrel does not like the lion.\nFOL: all x. (Squirrel(x) & -Like(x) & Lion(x))\nTEXT: The squirrel does not like the lion.\nFOL: all x. (Squirrel(x) & -Like(x) & Lion(x))\nTEXT: The squirrel sees the rabbit.\nFOL: all x. (Squirrel(x) & See(x) & Rabbit(x))\nTEXT: The squirrel sees the rabbit.\nFOL: all x. (Squirrel(x) & See(x) & Rabbit(x))\nTEXT: If something likes the squirrel and it likes the rabbit then it does not see the bald eagle.\nFOL: all x. ((Like(x) & Squirrel(x)) & Like(x) & Eagle(x)) -> -See(x)\nTEXT: If something likes the squirrel and it likes the rabbit then it does not see the bald eagle.\nFOL: all x. ((Like(x) & Squirrel(x)) & Like(x) & Eagle(x)) -> -See(x)\nTEXT: If something likes the rabbit then it chases the lion.\nFOL: all x. (Like(x) & Rabbit(x) -> Chase(x))\nTEXT: If something likes the rabbit then it chases the lion.\nFOL: all x. (Like(x) & Rabbit(x) -> Chase(x))\nTEXT: If something likes the lion then the lion sees the bald eagle.\nFOL: all x. (Like(x) & Lion(x) -> See(x))\nTEXT: If something likes the lion then the lion sees the bald eagle.\nFOL: all x. (Like(x) & Lion(x) -> See(x))\nTEXT: If something is nice and it chases the rabbit then the rabbit likes the lion.\nFOL: all x. (Nice(x) & Chase(x) & Rabbit(x) -> Like(x))\nTEXT: If something is nice and it chases the rabbit then the rabbit likes the lion.\nFOL: all x. (Nice(x) & Chase(x) & Rabbit(x) -> Like(x))\nTEXT: If something chases the lion then it is nice.\nFOL: all x. (Chase(x) & Lion(x) -> Nice(x))\nTEXT: If something is red then it likes the rabbit.\nFOL: all x. (Red(x) & Like(x) & Rabbit(x))\nTEXT: The squirrel is nice.\nFOL: nice(squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle sees the rabbit.\nFOL: all x. (Eagle(x) & Rabbit(x) -> See(x))\nTEXT: The lion is not big.\nFOL: all x. (Lion(x) & -Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) & Kind(x))\nTEXT: The lion likes the bald eagle.\nFOL: all x. (Lion(x) & Like(x) & Eagle(x))\nTEXT: The lion likes the bald eagle.\nFOL: all x. (Lion(x) & Like(x) & Eagle(x))\nTEXT: The lion sees the squirrel.\nFOL: all x. (Lion(x) & See(x) & Squirrel(x))\nTEXT: The lion sees the squirrel.\nFOL: all x. (Lion(x) & See(x) & Squirrel(x))\nTEXT: The rabbit is not big.\nFOL: all x. (Rabbit(x) & -Big(x))\nTEXT: The rabbit is not big.\nFOL: all x. (Rabbit(x) & -Big(x))\nTEXT: The squirrel is not green.\nFOL: all x. (Squirrel(x) & -Green(x))\nTEXT: The squirrel is not green.\nFOL: all x. (Squirrel(x) & -Green(x))\nTEXT: The squirrel is red.\nFOL: all x. (Squirrel(x) & Red(x))\nTEXT: The squirrel is red.\nFOL: all x. (Squirrel(x) & Red(x))\nTEXT: The squirrel does not like the lion.\nFOL: all x. (Squirrel(x) & -Like(x) & Lion(x))\nTEXT: The squirrel does not like the lion.\nFOL: all x. (Squirrel(x) & -Like(x) & Lion(x))\nTEXT: The squirrel sees the rabbit.\nFOL: all x. (Squirrel(x) & See(x) & Rabbit(x))\nTEXT: The squirrel sees the rabbit.\nFOL: all x. (Squirrel(x) & See(x) & Rabbit(x))\nTEXT: If something likes the squirrel and it likes the rabbit then it does not see the bald eagle.\nFOL: all x. ((Like(x) & Squirrel(x)) & Like(x) & Eagle(x)) -> -See(x)\nTEXT: If something likes the squirrel and it likes the rabbit then it does not see the bald eagle.\nFOL: all x. ((Like(x) & Squirrel(x)) & Like(x) & Eagle(x)) -> -See(x)\nTEXT: If something likes the rabbit then it chases the lion.\nFOL: all x. (Like(x) & Rabbit(x) -> Chase(x))\nTEXT: If something likes the rabbit then it chases the lion.\nFOL: all x. (Like(x) & Rabbit(x) -> Chase(x))\nTEXT: If something likes the lion then the lion sees the bald eagle.\nFOL: all x. (Like(x) & Lion(x) -> See(x))\nTEXT: If something likes the lion then the lion sees the bald eagle.\nFOL: all x. (Like(x) & Lion(x) -> See(x))\nTEXT: If something is nice and it chases the rabbit then the rabbit likes the lion.\nFOL: all x. (Nice(x) & Chase(x) -> Like(x))\nTEXT: If something is nice and it chases the lion then the rabbit likes the lion.\nFOL: all x. (Nice(x) & Chase(x) -> Like(x))\nTEXT: If something chases the lion then it is nice.\nFOL: all x. (Chase(x) & Nice(x))\nTEXT: If something is red then it likes the rabbit.\nFOL: all x. (Red(x) & Like(x) & Rabbit(x))\nTEXT: The squirrel is nice.\nFOL: all x. (Red(x) & Like(x) & Squirrel(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle sees the rabbit.\nFOL: all x. (Eagle(x) & Rabbit(x) -> See(x))\nTEXT: The lion is not big.\nFOL: all x. (Lion(x) & -Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) & Kind(x))\nTEXT: The lion likes the bald eagle.\nFOL: all x. (Lion(x) & Like(x) & Eagle(x))\nTEXT: The lion likes the bald eagle.\nFOL: all x. (Lion(x) & Like(x) & Eagle(x))\nTEXT: The lion sees the squirrel.\nFOL: all x. (Lion(x) & See(x) & Squirrel(x))\nTEXT: The lion sees the squirrel.\nFOL: all x. (Lion(x) & See(x) & Squirrel(x))\nTEXT: The rabbit is not big.\nFOL: all x. (Rabbit(x) & -Big(x))\nTEXT: The rabbit is not big.\nFOL: all x. (Rabbit(x) & -Big(x))\nTEXT: The squirrel is not green.\nFOL: all x. (Squirrel(x) & -Green(x))\nTEXT: The squirrel is not green.\nFOL: all x. (Squirrel(x) & -Green(x))\nTEXT: The squirrel is red.\nFOL: all x. (Squirrel(x) & Red(x))\nTEXT: The squirrel is red.\nFOL: all x. (Squirrel(x) & Red(x))\nTEXT: The squirrel does not like the lion.\nFOL: all x. (Squirrel(x) & -Like(x) & Lion(x))\nTEXT: The squirrel does not like the lion.\nFOL: all x. (Squirrel(x) & -Like(x) & Lion(x))\nTEXT: The squirrel sees the rabbit.\nFOL: all x. (Squirrel(x) & See(x) & Rabbit(x))\nTEXT: The squirrel sees the rabbit.\nFOL: all x. (Squirrel(x) & See(x) & Rabbit(x))\nTEXT: If something likes the squirrel and it likes the rabbit then it does not see the bald eagle.\nFOL: all x. ((Like(x) & Squirrel(x)) & Like(x) & Eagle(x)) -> -See(x)\nTEXT: If something likes the squirrel and it likes the rabbit then it does not see the bald eagle.\nFOL: all x. ((Like(x) & Squirrel(x)) & Like(x) & Eagle(x)) -> -See(x)\nTEXT: If something likes the rabbit then it chases the lion.\nFOL: all x. (Like(x) & Rabbit(x) -> Chase(x))\nTEXT: If something likes the rabbit then it chases the lion.\nFOL: all x. (Like(x) & Rabbit(x) -> Chase(x))\nTEXT: If something likes the lion then the lion sees the bald eagle.\nFOL: all x. (Like(x) & Lion(x) -> See(x))\nTEXT: If something likes the lion then the lion sees the bald eagle.\nFOL: all x. (Like(x) & Lion(x) -> See(x))\nTEXT: If something is nice and it chases the rabbit then the rabbit likes the lion.\nFOL: all x. (Nice(x) & Chase(x) & Rabbit(x) -> Like(x))\nTEXT: If something is nice and it chases the rabbit then the rabbit likes the lion.\nFOL: all x. (Nice(x) & Chase(x) & Rabbit(x) -> Like(x))\nTEXT: If something chases the lion then it is nice.\nFOL: all x. (Chase(x) & Lion(x) -> Nice(x))\nTEXT: If something is red then it likes the rabbit.\nFOL: all x. (Red(x) & Like(x) & Rabbit(x))\nTEXT: The squirrel is nice.\nFOL: nice(squirrel)",
   "<EVALUATE>\nTEXT: The bald eagle sees the rabbit.\nFOL: all x. (Eagle(x) & Rabbit(x) -> See(x))\nTEXT: The lion is not big.\nFOL: all x. (Lion(x) & -Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) & Kind(x))\nTEXT: The lion likes the bald eagle.\nFOL: all x. (Lion(x) & Like(x) & Eagle(x))\nTEXT: The lion likes the bald eagle.\nFOL: all x. (Lion(x) & Like(x) & Eagle(x))\nTEXT: The lion sees the squirrel.\nFOL: all x. (Lion(x) & See(x) & Squirrel(x))\nTEXT: The lion sees the squirrel.\nFOL: all x. (Lion(x) & See(x) & Squirrel(x))\nTEXT: The rabbit is not big.\nFOL: all x. (Rabbit(x) & -Big(x))\nTEXT: The rabbit is not big.\nFOL: all x. (Rabbit(x) & -Big(x))\nTEXT: The squirrel is not green.\nFOL: all x. (Squirrel(x) & -Green(x))\nTEXT: The squirrel is not green.\nFOL: all x. (Squirrel(x) & -Green(x))\nTEXT: The squirrel is red.\nFOL: all x. (Squirrel(x) & Red(x))\nTEXT: The squirrel is red.\nFOL: all x. (Squirrel(x) & Red(x))\nTEXT: The squirrel does not like the lion.\nFOL: all x. (Squirrel(x) & -Like(x) & Lion(x))\nTEXT: The squirrel does not like the lion.\nFOL: all x. (Squirrel(x) & -Like(x) & Lion(x))\nTEXT: The squirrel sees the rabbit.\nFOL: all x. (Squirrel(x) & See(x) & Rabbit(x))\nTEXT: The squirrel sees the rabbit.\nFOL: all x. (Squirrel(x) & See(x) & Rabbit(x))\nTEXT: If something likes the squirrel and it likes the rabbit then it does not see the bald eagle.\nFOL: all x. ((Like(x) & Squirrel(x)) & Like(x) & Eagle(x)) -> -See(x)\nTEXT: If something likes the squirrel and it likes the rabbit then it does not see the bald eagle.\nFOL: all x. ((Like(x) & Squirrel(x)) & Like(x) & Eagle(x)) -> -See(x)\nTEXT: If something likes the rabbit then it chases the lion.\nFOL: all x. (Like(x) & Rabbit(x) -> Chase(x))\nTEXT: If something likes the rabbit then it chases the lion.\nFOL: all x. (Like(x) & Rabbit(x) -> Chase(x))\nTEXT: If something likes the lion then the lion sees the bald eagle.\nFOL: all x. (Like(x) & Lion(x) -> See(x))\nTEXT: If something likes the lion then the lion sees the bald eagle.\nFOL: all x. (Like(x) & Lion(x) -> See(x))\nTEXT: If something is nice and it chases the rabbit then the rabbit likes the lion.\nFOL: all x. (Nice(x) & Chase(x) & Rabbit(x) -> Like(x))\nTEXT: If something is nice and it chases the rabbit then the rabbit likes the lion.\nFOL: all x. (Nice(x) & Chase(x) & Rabbit(x) -> Like(x))\nTEXT: If something chases the lion then it is nice.\nFOL: all x. (Chase(x) & Lion(x) -> Nice(x))\nTEXT: If something is red then it likes the rabbit.\nFOL: all x. (Red(x) & Like(x) & Rabbit(x))\nTEXT: The squirrel is nice.\nFOL: all x. (Red(x) & Like(x) & Squirrel(x))"
  ]
 },
 {
  "index": 133,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: all x. (BaldEagle(x) & Rabbit(x) & Eat(x))\nTEXT: The bald eagle is green.\nFOL: all x. (BaldEagle(x) & Green(x))\nTEXT: The bald eagle is kind.\nFOL: all x. (BaldEagle(x) & Kind(x))\nTEXT: The bald eagle needs the tiger.\nFOL: all x. (BaldEagle(x) & Tiger(x) & Need(x))\nTEXT: The cat is green.\nFOL: all x. (Cat(x) & Green(x))\nTEXT: The cat needs the rabbit.\nFOL: all x. (Cat(x) & Rabbit(x) & Need(x))\nTEXT: The rabbit chases the cat.\nFOL: all x. (Rabbit(x) & Cat(x) & Chase(x))\nTEXT: The rabbit eats the cat.\nFOL: all x. (Rabbit(x) & Cat(x) & Eat(x))\nTEXT: The rabbit eats the tiger.\nFOL: all x. (Rabbit(x) & Tiger(x) & Eat(x))\nTEXT: The rabbit needs the tiger.\nFOL: all x. (Rabbit(x) & Tiger(x) & Need(x))\nTEXT: The tiger chases the cat.\nFOL: all x. (Tiger(x) & Cat(x) & Chase(x))\nTEXT: The tiger needs the bald eagle.\nFOL: all x. (Tiger(x) & BaldEagle(x) & Need(x))\nTEXT: If something needs the rabbit and it is kind then it eats the rabbit.\nFOL: all x. (Need(x) & Kind(x) & Eat(x))\nTEXT: If something needs the bald eagle and it chases the cat then the cat is young.\nFOL: all x. (Need(x) & BaldEagle(x) & Chase(x) & Young(x))\nTEXT: If the tiger chases the cat then the cat is round.\nFOL: all x. (Chase(x) & Cat(x) & Round(x))\nTEXT: If something chases the cat then it needs the rabbit.\nFOL: all x. (Chase(x) & Cat(x) & Need(x))\nTEXT: If something needs the rabbit then it eats the cat.\nFOL: all x. (Need(x) & Rabbit(x) & Eat(x))\nTEXT: If something eats the cat then it chases the tiger.\nFOL: all x. (Eat(x) & Cat(x) & Chase(x))\nTEXT: The cat needs the tiger.\nFOL: all x. (Cat(x) & Tiger(x) & Need(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: all x. (BaldEagle(x) & Eat(x) & Rabbit(x))\nTEXT: The bald eagle is green.\nFOL: all x. (BaldEagle(x) & Green(x))\nTEXT: The bald eagle is kind.\nFOL: all x. (BaldEagle(x) & Kind(x))\nTEXT: The bald eagle needs the tiger.\nFOL: all x. (BaldEagle(x) & Needs(x) & Tiger(x))\nTEXT: The cat is green.\nFOL: all x. (Cat(x) & Green(x))\nTEXT: The cat needs the rabbit.\nFOL: all x. (Cat(x) & Needs(x) & Rabbit(x))\nTEXT: The rabbit chases the cat.\nFOL: all x. (Rabbit(x) & Chases(x) & Cat(x))\nTEXT: The rabbit eats the cat.\nFOL: all x. (Rabbit(x) & Eat(x) & Cat(x))\nTEXT: The rabbit eats the tiger.\nFOL: all x. (Rabbit(x) & Eat(x) & Tiger(x))\nTEXT: The rabbit needs the tiger.\nFOL: all x. (Rabbit(x) & Needs(x) & Tiger(x))\nTEXT: The tiger chases the cat.\nFOL: all x. (Tiger(x) & Chases(x) & Cat(x))\nTEXT: The tiger needs the bald eagle.\nFOL: all x. (Tiger(x) & Needs(x) & BaldEagle(x))\nTEXT: If something needs the rabbit and it is kind then it eats the rabbit.\nFOL: all x. (Needs(x) & Kind(x) & Eat(x) & Rabbit(x))\nTEXT: If something needs the bald eagle and it chases the cat then the cat is young.\nFOL: all x. (Needs(x) & Chases(x) & BaldEagle(x) & Cat(x) & Young(x))\nTEXT: If the tiger chases the cat then the cat is round.\nFOL: all x. (Chases(x) & Cat(x) & Round(x))\nTEXT: If something chases the cat then it needs the rabbit.\nFOL: all x. (Chases(x) & Cat(x) & Needs(x) & Rabbit(x))\nTEXT: If something needs the rabbit then it eats the cat.\nFOL: all x. (Needs(x) & Rabbit(x) & Eat(x) & Cat(x))\nTEXT: If something eats the cat then it chases the tiger.\nFOL: all x. (Eat(x) & Cat(x) & Chases(x) & Tiger(x))\nTEXT: The cat needs the tiger.\nFOL: all x. (Cat(x) & Needs(x) & Tiger(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: all x. (BaldEagle(x) & Eat(x) & Rabbit(x))\nTEXT: The bald eagle is green.\nFOL: all x. (BaldEagle(x) & Green(x))\nTEXT: The bald eagle is kind.\nFOL: all x. (BaldEagle(x) & Kind(x))\nTEXT: The bald eagle needs the tiger.\nFOL: all x. (BaldEagle(x) & Needs(x) & Tiger(x))\nTEXT: The cat is green.\nFOL: all x. (Cat(x) & Green(x))\nTEXT: The cat needs the rabbit.\nFOL: all x. (Cat(x) & Needs(x) & Rabbit(x))\nTEXT: The rabbit chases the cat.\nFOL: all x. (Rabbit(x) & Chases(x) & Cat(x))\nTEXT: The rabbit eats the cat.\nFOL: all x. (Rabbit(x) & Eat(x) & Cat(x))\nTEXT: The rabbit eats the tiger.\nFOL: all x. (Rabbit(x) & Eat(x) & Tiger(x))\nTEXT: The rabbit needs the tiger.\nFOL: all x. (Rabbit(x) & Needs(x) & Tiger(x))\nTEXT: The tiger chases the cat.\nFOL: all x. (Tiger(x) & Chases(x) & Cat(x))\nTEXT: The tiger needs the bald eagle.\nFOL: all x. (Tiger(x) & Needs(x) & BaldEagle(x))\nTEXT: If something needs the rabbit and it is kind then it eats the rabbit.\nFOL: all x. (Needs(x) & Rabbit(x) & Kind(x) & Eat(x))\nTEXT: If something needs the bald eagle and it chases the cat then the cat is young.\nFOL: all x. (Needs(x) & BaldEagle(x) & Chases(x) & Cat(x) & Young(x))\nTEXT: If the tiger chases the cat then the cat is round.\nFOL: all x. (Chases(x) & Cat(x) & Round(x))\nTEXT: If something chases the cat then it needs the rabbit.\nFOL: all x. (Chases(x) & Cat(x) & Needs(x) & Rabbit(x))\nTEXT: If something needs the rabbit then it eats the cat.\nFOL: all x. (Needs(x) & Rabbit(x) & Eat(x))\nTEXT: If something eats the cat then it chases the tiger.\nFOL: all x. (Eat(x) & Cat(x) & Chases(x) & Tiger(x))\nTEXT: The cat needs the tiger.\nFOL: all x. (Cat(x) & Needs(x) & Tiger(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: all x. (BaldEagle(x) & Eat(x) & Rabbit(x))\nTEXT: The bald eagle is green.\nFOL: all x. (BaldEagle(x) & Green(x))\nTEXT: The bald eagle is kind.\nFOL: all x. (BaldEagle(x) & Kind(x))\nTEXT: The bald eagle needs the tiger.\nFOL: all x. (BaldEagle(x) & Needs(x) & Tiger(x))\nTEXT: The cat is green.\nFOL: all x. (Cat(x) & Green(x))\nTEXT: The cat needs the rabbit.\nFOL: all x. (Cat(x) & Needs(x) & Rabbit(x))\nTEXT: The rabbit chases the cat.\nFOL: all x. (Rabbit(x) & Chases(x) & Cat(x))\nTEXT: The rabbit eats the cat.\nFOL: all x. (Rabbit(x) & Eat(x) & Cat(x))\nTEXT: The rabbit eats the tiger.\nFOL: all x. (Rabbit(x) & Eat(x) & Tiger(x))\nTEXT: The rabbit needs the tiger.\nFOL: all x. (Rabbit(x) & Needs(x) & Tiger(x))\nTEXT: The tiger chases the cat.\nFOL: all x. (Tiger(x) & Chases(x) & Cat(x))\nTEXT: The tiger needs the bald eagle.\nFOL: all x. (Tiger(x) & Needs(x) & BaldEagle(x))\nTEXT: If something needs the rabbit and it is kind then it eats the rabbit.\nFOL: all x. (Needs(x) & Kind(x) & Eat(x) & Rabbit(x))\nTEXT: If something needs the bald eagle and it chases the cat then the cat is young.\nFOL: all x. (Needs(x) & Chases(x) & BaldEagle(x) & Cat(x) & Young(x))\nTEXT: If the tiger chases the cat then the cat is round.\nFOL: all x. (Chases(x) & Cat(x) & Round(x))\nTEXT: If something chases the cat then it needs the rabbit.\nFOL: all x. (Chases(x) & Cat(x) & Needs(x) & Rabbit(x))\nTEXT: If something needs the rabbit then it eats the cat.\nFOL: all x. (Needs(x) & Eat(x) & Rabbit(x) & Cat(x))\nTEXT: If something eats the cat then it chases the tiger.\nFOL: all x. (Eat(x) & Cat(x) & Chases(x) & Tiger(x))\nTEXT: The cat needs the tiger.\nFOL: all x. (Cat(x) & Needs(x) & Tiger(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: all x. (BaldEagle(x) & Eat(x) & Rabbit(x))\nTEXT: The bald eagle is green.\nFOL: all x. (BaldEagle(x) & Green(x))\nTEXT: The bald eagle is kind.\nFOL: all x. (BaldEagle(x) & Kind(x))\nTEXT: The bald eagle needs the tiger.\nFOL: all x. (BaldEagle(x) & Needs(x) & Tiger(x))\nTEXT: The cat is green.\nFOL: all x. (Cat(x) & Green(x))\nTEXT: The cat needs the rabbit.\nFOL: all x. (Cat(x) & Needs(x) & Rabbit(x))\nTEXT: The rabbit chases the cat.\nFOL: all x. (Rabbit(x) & Chases(x) & Cat(x))\nTEXT: The rabbit eats the cat.\nFOL: all x. (Rabbit(x) & Eat(x) & Cat(x))\nTEXT: The rabbit eats the tiger.\nFOL: all x. (Rabbit(x) & Eat(x) & Tiger(x))\nTEXT: The rabbit needs the tiger.\nFOL: all x. (Rabbit(x) & Needs(x) & Tiger(x))\nTEXT: The tiger chases the cat.\nFOL: all x. (Tiger(x) & Chases(x) & Cat(x))\nTEXT: The tiger needs the bald eagle.\nFOL: all x. (Tiger(x) & Needs(x) & BaldEagle(x))\nTEXT: If something needs the rabbit and it is kind then it eats the rabbit.\nFOL: all x. (Needs(x) & Kind(x) & Eat(x) & Rabbit(x))\nTEXT: If something needs the bald eagle and it chases the cat then the cat is young.\nFOL: all x. (Needs(x) & Chases(x) & BaldEagle(x) & Cat(x) & Young(x))\nTEXT: If the tiger chases the cat then the cat is round.\nFOL: all x. (Chases(x) & Cat(x) & Round(x))\nTEXT: If something chases the cat then it needs the rabbit.\nFOL: all x. (Chases(x) & Cat(x) & Needs(x) & Rabbit(x))\nTEXT: If something needs the rabbit then it eats the cat.\nFOL: all x. (Needs(x) & Rabbit(x) & Eat(x) & Cat(x))\nTEXT: If something eats the cat then it chases the tiger.\nFOL: all x. (Eat(x) & Cat(x) & Chases(x) & Tiger(x))\nTEXT: The cat needs the tiger.\nFOL: needs(x) & Tiger(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 134,
  "responses": [
   "<EVALUATE>\nTEXT: No one knows Bob like me and he is a kind guy, very round in the belly and green as grass.\nFOL: all x y. (NoOneKnowsBob(x) & x = me & x = kindGuy(x) & x = veryRoundInTheBelly(x) & x = greenAsGrass(x) -> x = Bob(x))\nTEXT: That guy Charlie sure is nice.\nFOL: all x y. (ThatGuyCharlie(x) -> Nice(x))\nTEXT: Dave is shaped big and round like a balloon.\nFOL: all x y. (Dave(x) -> (Big(x) & Round(x) & Balloon(x)))\nTEXT: His red color shows how kind he is.\nFOL: all x y. (His(x) -> (Red(x) & Kind(x)))\nTEXT: Young Gary here is always rough but nice and yes he is big.\nFOL: all x y. (YoungGary(x) -> (Rough(x) & Nice(x) & yes(x) & Big(x)))\nTEXT: Young, red people are usually quite blue too.\nFOL: all x y. (Young(x) & Red(x) -> (Quite(x) & Blue(x)))\nTEXT: A nice but rough person will also be green and cold.\nFOL: all x y. (Nice(x) & Rough(x) -> (Green(x) & Cold(x)))\nTEXT: Most young kind people tend to be red too.\nFOL: all x y. (Young(x) & Kind(x) -> (Red(x) & Blue(x)))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x y. (EveryRoundPersonThatIsBlue(x) -> (Young(x) & Blue(x)))\nTEXT: Young and red people look round.\nFOL: all x y. (Young(x) & Red(x) -> (Round(x)))\nTEXT: I bet anyone who is round and kind is also pretty young.\nFOL: all x y. (I(x) -> (Round(x) & Kind(x) & pretty(x)))\nTEXT: Dave is not cold.\nFOL: -Cold(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: No one knows Bob like me and he is a kind guy, very round in the belly and green as grass.\nFOL: all x y. (NoOneKnowsBob(x) & x = me & x = kindGuy(x) & x = veryRoundInTheBelly(x) & x = greenAsGrass(x) -> x = Bob(x))\nTEXT: That guy Charlie sure is nice.\nFOL: all x y. (ThatGuyCharlie(x) -> Nice(x))\nTEXT: Dave is shaped big and round like a balloon.\nFOL: all x y. (Dave(x) -> (Big(x) & Round(x) & Balloon(x)))\nTEXT: His red color shows how kind he is.\nFOL: all x y. (His(x) -> (Red(x) & Kind(x)))\nTEXT: Young Gary here is always rough but nice and yes he is big.\nFOL: all x y. (YoungGary(x) -> (Rough(x) & Nice(x) & yes(x) & Big(x)))\nTEXT: Young, red people are usually quite blue too.\nFOL: all x y. (Young(x) & Red(x) -> (Quite(x) & Blue(x)))\nTEXT: A nice but rough person will also be green and cold.\nFOL: all x y. (Nice(x) & Rough(x) -> (Green(x) & Cold(x)))\nTEXT: Most young kind people tend to be red too.\nFOL: all x y. (Young(x) & Kind(x) -> (Red(x) & Blue(x)))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x y. (EveryRoundPersonThatIsBlue(x) -> (Young(x) & Blue(x)))\nTEXT: Young and red people look round.\nFOL: all x y. (Young(x) & Red(x) -> (Round(x)))\nTEXT: I bet anyone who is round and kind is also pretty young.\nFOL: all x y. (I(x) -> (Round(x) & Kind(x) & Pretty(x)))\nTEXT: Dave is not cold.\nFOL: -Cold(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: No one knows Bob like me and he is a kind guy, very round in the belly and green as grass.\nFOL: all x y. (NoOneKnowsBob(x) & x = me & x = kindGuy(x) & x = veryRoundInTheBelly(x) & x = greenAsGrass(x) -> x = Bob(x))\nTEXT: That guy Charlie sure is nice.\nFOL: all x y. (ThatGuyCharlie(x) -> Nice(x))\nTEXT: Dave is shaped big and round like a balloon.\nFOL: all x y. (Dave(x) -> (Big(x) & Round(x) & Balloon(x)))\nTEXT: His red color shows how kind he is.\nFOL: all x y. (His(x) -> (Red(x) & Kind(x)))\nTEXT: Young Gary here is always rough but nice and yes he is big.\nFOL: all x y. (YoungGary(x) -> (Rough(x) & Nice(x) & yes(x) & Big(x)))\nTEXT: Young, red people are usually quite blue too.\nFOL: all x y. (Young(x) & Red(x) -> (Quite(x) & Blue(x)))\nTEXT: A nice but rough person will also be green and cold.\nFOL: all x y. (Nice(x) & Rough(x) -> (Green(x) & Cold(x)))\nTEXT: Most young kind people tend to be red too.\nFOL: all x y. (Young(x) & Kind(x) -> (Red(x) & Blue(x)))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x y. (EveryRoundPersonThatIsBlue(x) -> (Young(x) & Blue(x)))\nTEXT: Young and red people look round.\nFOL: all x y. (Young(x) & Red(x) -> (Round(x)))\nTEXT: I bet anyone who is round and kind is also pretty young.\nFOL: all x y. (I(x) -> (Round(x) & Kind(x) & pretty(x)))\nTEXT: Dave is not cold.\nFOL: -ColdDave(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: No one knows Bob like me and he is a kind guy, very round in the belly and green as grass.\nFOL: all x y. (NoOneKnowsBob(x) & x = me & x = kindGuy(x) & x = veryRoundInTheBelly(x) & x = greenAsGrass(x) -> x = Bob(x))\nTEXT: That guy Charlie sure is nice.\nFOL: all x y. (ThatGuyCharlie(x) -> Nice(x))\nTEXT: Dave is shaped big and round like a balloon.\nFOL: all x y. (Dave(x) -> (Big(x) & Round(x) & Balloon(x)))\nTEXT: His red color shows how kind he is.\nFOL: all x y. (His(x) -> (Red(x) & Kind(x)))\nTEXT: Young Gary here is always rough but nice and yes he is big.\nFOL: all x y. (YoungGary(x) -> (Rough(x) & Nice(x) & yes(x) & Big(x)))\nTEXT: Young, red people are usually quite blue too.\nFOL: all x y. (Young(x) & Red(x) -> (Quite(x) & Blue(x)))\nTEXT: A nice but rough person will also be green and cold.\nFOL: all x y. (Nice(x) & Rough(x) -> (Green(x) & Cold(x)))\nTEXT: Most young kind people tend to be red too.\nFOL: all x y. (Young(x) & Kind(x) -> (Red(x) & Blue(x)))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x y. (EveryRoundPersonThatIsBlue(x) -> (Young(x) & Blue(x)))\nTEXT: Young and red people look round.\nFOL: all x y. (Young(x) & Red(x) -> (Round(x)))\nTEXT: I bet anyone who is round and kind is also pretty young.\nFOL: all x y. (I(x) & Round(x) & Kind(x) -> (Pretty(x) & Young(x)))\nTEXT: Dave is not cold.\nFOL: -Cold(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: No one knows Bob like me and he is a kind guy, very round in the belly and green as grass.\nFOL: all x y. (NoOneKnowsBob(x) & x = me & x = kindGuy(x) & x = veryRoundInTheBelly(x) & x = greenAsGrass(x) -> x = Bob(x))\nTEXT: That guy Charlie sure is nice.\nFOL: all x y. (ThatGuyCharlie(x) -> Nice(x))\nTEXT: Dave is shaped big and round like a balloon.\nFOL: all x y. (Dave(x) -> (Big(x) & Round(x) & Balloon(x)))\nTEXT: His red color shows how kind he is.\nFOL: all x y. (His(x) -> (Red(x) & Kind(x)))\nTEXT: Young Gary here is always rough but nice and yes he is big.\nFOL: all x y. (YoungGary(x) -> (Rough(x) & Nice(x) & yes(x) & Big(x)))\nTEXT: Young, red people are usually quite blue too.\nFOL: all x y. (Young(x) & Red(x) -> (Quite(x) & Blue(x)))\nTEXT: A nice but rough person will also be green and cold.\nFOL: all x y. (Nice(x) & Rough(x) -> (Green(x) & Cold(x)))\nTEXT: Most young kind people tend to be red too.\nFOL: all x y. (Young(x) & Kind(x) -> (Red(x) & Blue(x)))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x y. (EveryRoundPersonThatIsBlue(x) -> (Young(x) & Blue(x)))\nTEXT: Young and red people look round.\nFOL: all x y. (Young(x) & Red(x) -> (Round(x)))\nTEXT: I bet anyone who is round and kind is also pretty young.\nFOL: all x y. (I(x) & Round(x) & Kind(x) -> (Pretty(x) & Young(x)))\nTEXT: Dave is not cold.\nFOL: -ColdDave(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 135,
  "responses": [
   "<EVALUATE>\nTEXT: The dog is red.\nFOL: all x. (Dog(x) -> Red(x))\nTEXT: The squirrel is cold.\nFOL: all x. (Squirrel(x) -> Cold(x))\nTEXT: The tiger eats the dog.\nFOL: all x. (Tiger(x) -> EatDog(x))\nTEXT: If someone eats the dog then the dog sees the squirrel.\nFOL: all x y. (EatDog(x) & Dog(x) -> SeeSquirrel(x))\nTEXT: If someone sees the tiger then the tiger eats the dog.\nFOL: all x y. (SeeTiger(x) & Tiger(x) -> EatDog(x))\nTEXT: If someone eats the tiger then they chase the dog.\nFOL: all x y. (EatTiger(x) & Tiger(x) -> ChaseDog(x))\nTEXT: If someone chases the dog and they are kind then they are cold.\nFOL: all x y. (ChaseDog(x) & Kind(x) -> Cold(x))\nTEXT: If someone is kind and they chase the squirrel then the squirrel eats the dog.\nFOL: all x y. (Kind(x) & ChaseSquirrel(x) -> EatDog(x))\nTEXT: If someone sees the squirrel then the squirrel eats the tiger.\nFOL: all x y. (SeeSquirrel(x) & Tiger(x) -> EatDog(x))\nTEXT: The squirrel chases the dog.\nFOL: SeeSquirrel(squirrel) & ChaseDog(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is red.\nFOL: all x. (Dog(x) -> Red(x))\nTEXT: The squirrel is cold.\nFOL: all x. (Squirrel(x) -> Cold(x))\nTEXT: The tiger eats the dog.\nFOL: all x. (Tiger(x) -> EatDog(x))\nTEXT: If someone eats the dog then the dog sees the squirrel.\nFOL: all x y. (EatDog(x) & Dog(x) -> SeeSquirrel(x))\nTEXT: If someone sees the tiger then the tiger eats the dog.\nFOL: all x y. (SeeTiger(x) & Tiger(x) -> EatDog(x))\nTEXT: If someone eats the tiger then they chase the dog.\nFOL: all x y. (EatTiger(x) & Tiger(x) -> ChaseDog(x))\nTEXT: If someone chases the dog and they are kind then they are cold.\nFOL: all x y. (ChaseDog(x) & Kind(x) -> Cold(x))\nTEXT: If someone is kind and they chase the squirrel then the squirrel eats the dog.\nFOL: all x y. (Kind(x) & ChaseSquirrel(x) -> EatDog(x))\nTEXT: If someone sees the squirrel then the squirrel eats the tiger.\nFOL: all x y. (SeeSquirrel(x) & Tiger(x) -> EatDog(x))\nTEXT: The squirrel chases the dog.\nFOL: SeeSquirrel(squirrel) & ChaseDog(squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is red.\nFOL: all x. (Dog(x) -> Red(x))\nTEXT: The squirrel is cold.\nFOL: all x. (Squirrel(x) -> Cold(x))\nTEXT: The tiger eats the dog.\nFOL: all x. (Tiger(x) -> EatDog(x))\nTEXT: If someone eats the dog then the dog sees the squirrel.\nFOL: all x y. (EatDog(x) & Dog(x) -> SeeSquirrel(x))\nTEXT: If someone sees the tiger then the tiger eats the dog.\nFOL: all x y. (SeeTiger(x) & Tiger(x) -> EatDog(x))\nTEXT: If someone eats the tiger then they chase the dog.\nFOL: all x y. (EatTiger(x) & Tiger(x) -> ChaseDog(x))\nTEXT: If someone chases the dog and they are kind then they are cold.\nFOL: all x y. (ChaseDog(x) & -Kind(x) -> Cold(x))\nTEXT: If someone is kind and they chase the squirrel then the squirrel eats the dog.\nFOL: all x y. (Kind(x) & ChaseSquirrel(x) -> EatDog(x))\nTEXT: If someone sees the squirrel then the squirrel eats the tiger.\nFOL: all x y. (SeeSquirrel(x) & Tiger(x) -> EatDog(x))\nTEXT: The squirrel chases the dog.\nFOL: SeeSquirrel(squirrel) & ChaseDog(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is red.\nFOL: all x. (Dog(x) -> Red(x))\nTEXT: The squirrel is cold.\nFOL: all x. (Squirrel(x) -> Cold(x))\nTEXT: The tiger eats the dog.\nFOL: all x. (Tiger(x) -> EatDog(x))\nTEXT: If someone eats the dog then the dog sees the squirrel.\nFOL: all x y. (EatDog(x) & Dog(x) -> SeeSquirrel(x))\nTEXT: If someone sees the tiger then the tiger eats the dog.\nFOL: all x y. (SeeTiger(x) & Tiger(x) -> EatDog(x))\nTEXT: If someone eats the tiger then they chase the dog.\nFOL: all x y. (EatDog(x) & Tiger(x) -> ChaseDog(x))\nTEXT: If someone chases the dog and they are kind then they are cold.\nFOL: all x y. (ChaseDog(x) & Kind(x) -> Cold(x))\nTEXT: If someone is kind and they chase the squirrel then the squirrel eats the dog.\nFOL: all x y. (Kind(x) & ChaseSquirrel(x) -> EatDog(x))\nTEXT: If someone sees the squirrel then the squirrel eats the tiger.\nFOL: all x y. (SeeSquirrel(x) & Tiger(x) -> EatDog(x))\nTEXT: The squirrel chases the dog.\nFOL: SeeSquirrel(squirrel) & ChaseDog(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is red.\nFOL: all x. (Dog(x) -> Red(x))\nTEXT: The squirrel is cold.\nFOL: all x. (Squirrel(x) -> Cold(x))\nTEXT: The tiger eats the dog.\nFOL: all x. (Tiger(x) -> EatDog(x))\nTEXT: If someone eats the dog then the dog sees the squirrel.\nFOL: all x y. (EatDog(x) & Dog(x) -> SeeSquirrel(x))\nTEXT: If someone sees the tiger then the tiger eats the dog.\nFOL: all x y. (SeeTiger(x) & Tiger(x) -> EatDog(x))\nTEXT: If someone eats the tiger then they chase the dog.\nFOL: all x y. (EatTiger(x) & Tiger(x) -> ChaseDog(x))\nTEXT: If someone chases the dog and they are kind then they are cold.\nFOL: all x y. (ChaseDog(x) & Kind(x) -> Cold(x))\nTEXT: If someone is kind and they chase the squirrel then the squirrel eats the dog.\nFOL: all x y. (Kind(x) & ChaseSquirrel(x) -> EatDog(x))\nTEXT: If someone sees the squirrel then the squirrel eats the tiger.\nFOL: all x y. (SeeSquirrel(x) & Tiger(x) -> EatDog(x))\nTEXT: The squirrel chases the dog.\nFOL: all x y. (SeeSquirrel(x) & ChaseDog(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 136,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is rough.\nFOL: all x. (Person(x) -> Rough(x))\nTEXT: Dave is cold.\nFOL: all x. (Person(x) -> Cold(x))\nTEXT: Round people are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If someone is cold and round then they are green.\nFOL: all x y. (Cold(x) & Round(x) -> Green(x))\nTEXT: All blue people are rough.\nFOL: all x. (Blue(x) -> Rough(x))\nTEXT: If someone is round then they are nice.\nFOL: all x y. (Round(x) -> Nice(x))\nTEXT: If someone is big and round then they are cold.\nFOL: all x y. (Big(x) & Round(x) -> Cold(x))\nTEXT: If someone is rough then they are round.\nFOL: all x y. (Rough(x) -> Round(x))\nTEXT: Nice, big people are green.\nFOL: Nice(x) & Big(x) & Green(x)\nTEXT: If Bob is green and Bob is rough then Bob is nice.\nFOL: Bob(x) & Green(x) & Rough(x) -> Nice(x)\nTEXT: Dave is not blue.\nFOL: -Blue(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Dave is cold.\nFOL: all x. (Dave(x) -> Cold(x))\nTEXT: Round people are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If someone is cold and round then they are green.\nFOL: all x y. (Cold(x) & Round(x) -> Green(x))\nTEXT: All blue people are rough.\nFOL: all x. (Blue(x) -> Rough(x))\nTEXT: If someone is round then they are nice.\nFOL: all x y. (Round(x) -> Nice(x))\nTEXT: If someone is big and round then they are cold.\nFOL: all x y. (Big(x) & Round(x) -> Cold(x))\nTEXT: If someone is rough then they are round.\nFOL: all x y. (Rough(x) -> Round(x))\nTEXT: Nice, big people are green.\nFOL: Nice(x) & Big(x) & Green(x)\nTEXT: If Bob is green and Bob is rough then Bob is nice.\nFOL: Bob(x) & Green(x) & Rough(x) -> Nice(x)\nTEXT: Dave is not blue.\nFOL: -Blue(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is rough.\nFOL: all x. (Person(x) -> Rough(x))\nTEXT: Dave is cold.\nFOL: all x. (Person(x) -> Cold(x))\nTEXT: Round people are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If someone is cold and round then they are green.\nFOL: all x y. (Cold(x) & Round(x) -> Green(x))\nTEXT: All blue people are rough.\nFOL: all x. (Blue(x) -> Rough(x))\nTEXT: If someone is round then they are nice.\nFOL: all x y. (Round(x) -> Nice(x))\nTEXT: If someone is big and round then they are cold.\nFOL: all x y. (Big(x) & Round(x) -> Cold(x))\nTEXT: If someone is rough then they are round.\nFOL: all x y. (Rough(x) -> Round(x))\nTEXT: Nice, big people are green.\nFOL: Nice(x) & Big(x) & Green(x)\nTEXT: If Bob is green and Bob is rough then Bob is nice.\nFOL: Bob(x) & Green(x) & Rough(x) -> Nice(x)\nTEXT: Dave is not blue.\nFOL: -Blue(x) & Dave(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Dave is cold.\nFOL: all x. (Dave(x) -> Cold(x))\nTEXT: Round people are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If someone is cold and round then they are green.\nFOL: all x y. (Cold(x) & Round(x) -> Green(x))\nTEXT: All blue people are rough.\nFOL: all x. (Blue(x) -> Rough(x))\nTEXT: If someone is round then they are nice.\nFOL: all x y. (Round(x) -> Nice(x))\nTEXT: If someone is big and round then they are cold.\nFOL: all x y. (Big(x) & Round(x) -> Cold(x))\nTEXT: If someone is rough then they are round.\nFOL: all x y. (Rough(x) -> Round(x))\nTEXT: Nice, big people are green.\nFOL: Nice(x) & Big(x) & Green(x)\nTEXT: If Bob is green and Bob is rough then Bob is nice.\nFOL: Bob(x) & Green(x) & Rough(x) -> Nice(x)\nTEXT: Dave is not blue.\nFOL: -Blue(x) & Dave(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is rough.\nFOL: all x. (Person(x) -> Rough(x))\nTEXT: Dave is cold.\nFOL: all x. (Person(x) -> Cold(x))\nTEXT: Round people are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If someone is cold and round then they are green.\nFOL: all x y. (Cold(x) & Round(x) -> Green(x))\nTEXT: All blue people are rough.\nFOL: all x. (Blue(x) -> Rough(x))\nTEXT: If someone is round then they are nice.\nFOL: all x y. (Round(x) -> Nice(x))\nTEXT: If someone is big and round then they are cold.\nFOL: all x y. (Big(x) & Round(x) -> Cold(x))\nTEXT: If someone is rough then they are round.\nFOL: all x y. (Rough(x) -> Round(x))\nTEXT: Nice, big people are green.\nFOL: Nice(x) & Big(x) & Green(x)\nTEXT: If Bob is green and Bob is rough then Bob is nice.\nFOL: Bob(x) & Green(x) & Rough(x) -> Nice(x)\nTEXT: Dave is not blue.\nFOL: -Blue(dave)"
  ]
 },
 {
  "index": 137,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Erin is young.\nFOL: all x. (Erin(x) -> Young(x))\nTEXT: Gary is white.\nFOL: all x. (Gary(x) -> White(x))\nTEXT: All white, young things are not smart.\nFOL: all x. (White(x) & Young(x) -> -Smart(x))\nTEXT: All rough things are not smart.\nFOL: all x. (Rough(x) & -Smart(x) -> -NotSmart(x))\nTEXT: Green things are cold.\nFOL: all x. (Green(x) -> -Cold(x))\nTEXT: If something is rough then it is not green.\nFOL: -Rough(x) -> -Green(x)\nTEXT: Young things are green.\nFOL: Young(x) -> Green(x)\nTEXT: Rough, young things are blue.\nFOL: Rough(x) & Young(x) -> Blue(x)\nTEXT: White things are young.\nFOL: White(x) -> Young(x)\nTEXT: If something is white and not rough then it is young.\nFOL: White(x) & -Rough(x) -> Young(x)\nTEXT: Erin is not white.\nFOL: -White(x) -> -NotWhite(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Erin is young.\nFOL: all x. (Erin(x) -> Young(x))\nTEXT: Gary is white.\nFOL: all x. (Gary(x) -> White(x))\nTEXT: All white, young things are not smart.\nFOL: all x. (White(x) & Young(x) & -Smart(x))\nTEXT: All rough things are not smart.\nFOL: all x. (Rough(x) & -Smart(x))\nTEXT: Green things are cold.\nFOL: all x. (Green(x) & -Cold(x))\nTEXT: If something is rough then it is not green.\nFOL: -Rough(x) & -Green(x) & -Cold(x)\nTEXT: Young things are green.\nFOL: Young(x) & Green(x)\nTEXT: Rough, young things are blue.\nFOL: Rough(x) & Young(x) & -Blue(x)\nTEXT: White things are young.\nFOL: White(x) & Young(x)\nTEXT: If something is white and not rough then it is young.\nFOL: White(x) & -Rough(x) & Young(x)\nTEXT: Erin is not white.\nFOL: -White(x) & -Rough(x) & -Young(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Erin is young.\nFOL: all x. (Erin(x) -> Young(x))\nTEXT: Gary is white.\nFOL: all x. (Gary(x) -> White(x))\nTEXT: All white, young things are not smart.\nFOL: all x. (White(x) & Young(x) & -Smart(x))\nTEXT: All rough things are not smart.\nFOL: all x. (Rough(x) & -Smart(x))\nTEXT: Green things are cold.\nFOL: all x. (Green(x) & -Cold(x))\nTEXT: If something is rough then it is not green.\nFOL: -Rough(x) -> -Green(x)\nTEXT: Young things are green.\nFOL: Young(x) -> Green(x)\nTEXT: Rough, young things are blue.\nFOL: Rough(x) & Young(x) -> Blue(x)\nTEXT: White things are young.\nFOL: White(x) -> Young(x)\nTEXT: If something is white and not rough then it is young.\nFOL: White(x) & -Rough(x) -> Young(x)\nTEXT: Erin is not white.\nFOL: -White(x) -> -NotWhite(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Erin is young.\nFOL: all x. (Erin(x) -> Young(x))\nTEXT: Gary is white.\nFOL: all x. (Gary(x) -> White(x))\nTEXT: All white, young things are not smart.\nFOL: all x. (White(x) & Young(x) & -Smart(x))\nTEXT: All rough things are not smart.\nFOL: all x. (Rough(x) & -Smart(x))\nTEXT: Green things are cold.\nFOL: all x. (Green(x) & -Cold(x))\nTEXT: If something is rough then it is not green.\nFOL: -Rough(x) & -Green(x) & -Cold(x)\nTEXT: Young things are green.\nFOL: Young(x) & Green(x)\nTEXT: Rough, young things are blue.\nFOL: Rough(x) & Young(x) & -Blue(x)\nTEXT: White things are young.\nFOL: White(x) & Young(x)\nTEXT: If something is white and not rough then it is young.\nFOL: White(x) & -Rough(x) & Young(x)\nTEXT: Erin is not white.\nFOL: -White(x) & -Rough(x) & -Young(x)",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Erin is young.\nFOL: all x. (Erin(x) -> Young(x))\nTEXT: Gary is white.\nFOL: all x. (Gary(x) -> White(x))\nTEXT: All white, young things are not smart.\nFOL: all x. (White(x) & Young(x) -> -Smart(x))\nTEXT: All rough things are not smart.\nFOL: all x. (Rough(x) & -Smart(x) -> -NotSmart(x))\nTEXT: Green things are cold.\nFOL: all x. (Green(x) -> -Cold(x))\nTEXT: If something is rough then it is not green.\nFOL: -Rough(x) -> -Green(x)\nTEXT: Young things are green.\nFOL: Young(x) -> Green(x)\nTEXT: Rough, young things are blue.\nFOL: Rough(x) & Young(x) -> Blue(x)\nTEXT: White things are young.\nFOL: White(x) -> Young(x)\nTEXT: If something is white and not rough then it is young.\nFOL: White(x) & -Rough(x) -> Young(x)\nTEXT: Erin is not white.\nFOL: -White(x) -> -NotWhite(x)"
  ]
 },
 {
  "index": 138,
  "responses": [
   "<EVALUATE>\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is kind.\nFOL: all x. (Charlie(x) -> Kind(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\nTEXT: Charlie is white.\nFOL: all x. (Charlie(x) -> White(x))\nTEXT: Dave is furry.\nFOL: all x. (Dave(x) -> Furry(x))\nTEXT: Dave is quiet.\nFOL: all x. (Dave(x) -> Quiet(x))\nTEXT: Dave is rough.\nFOL: all x. (Dave(x) -> Rough(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Erin is quiet.\nFOL: all x. (Erin(x) -> Quiet(x))\nTEXT: Gary is furry.\nFOL: all x. (Gary(x) -> Furry(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> Kind(x))\nTEXT: Gary is rough.\nFOL: all x. (Gary(x) -> Rough(x))\nTEXT: All furry, rough people are quiet.\nFOL: ((Furry(x) & Rough(x)) -> Quiet(x))\nTEXT: If someone is green and smart then they are quiet.\nFOL: (Green(x) & Smart(x) -> Quiet(x))\nTEXT: All furry, quiet people are kind.\nFOL: ((Furry(x) & Quiet(x)) -> Kind(x))\nTEXT: All white, furry people are kind.\nFOL: ((Furry(x) & White(x)) -> Kind(x))\nTEXT: If Dave is white and Dave is kind then Dave is green.\nFOL: (White(x) & Kind(x) -> Green(x))\nTEXT: If someone is quiet then they are kind.\nFOL: (Quiet(x) -> Kind(x))\nTEXT: All kind people are white.\nFOL: all x. (Kind(x) -> White(x))\nTEXT: White, green people are smart.\nFOL: (White(x) & Green(x) -> Smart(x))\nTEXT: Gary is smart.\nFOL: Gary(x) -> Smart(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is kind.\nFOL: all x. (Charlie(x) -> Kind(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\nTEXT: Charlie is white.\nFOL: all x. (Charlie(x) -> White(x))\nTEXT: Dave is furry.\nFOL: all x. (Dave(x) -> Furry(x))\nTEXT: Dave is quiet.\nFOL: all x. (Dave(x) -> Quiet(x))\nTEXT: Dave is rough.\nFOL: all x. (Dave(x) -> Rough(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Erin is quiet.\nFOL: all x. (Erin(x) -> Quiet(x))\nTEXT: Gary is furry.\nFOL: all x. (Gary(x) -> Furry(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> Kind(x))\nTEXT: Gary is rough.\nFOL: all x. (Gary(x) -> Rough(x))\nTEXT: All furry, rough people are quiet.\nFOL: ((Furry(x) & Rough(x)) -> Quiet(x))\nTEXT: If someone is green and smart then they are quiet.\nFOL: (Green(x) & Smart(x) -> Quiet(x))\nTEXT: All furry, quiet people are kind.\nFOL: ((Furry(x) & Quiet(x)) -> Kind(x))\nTEXT: All white, furry people are kind.\nFOL: ((Furry(x) & White(x)) -> Kind(x))\nTEXT: If Dave is white and Dave is kind then Dave is green.\nFOL: (White(x) & Kind(x) -> Green(x))\nTEXT: If someone is quiet then they are kind.\nFOL: (Quiet(x) -> Kind(x))\nTEXT: All kind people are white.\nFOL: (Kind(x) -> White(x))\nTEXT: White, green people are smart.\nFOL: (White(x) & Green(x) -> Smart(x))\nTEXT: Gary is smart.\nFOL: Gary(x) -> Smart(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is kind.\nFOL: all x. (Charlie(x) -> Kind(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\nTEXT: Charlie is white.\nFOL: all x. (Charlie(x) -> White(x))\nTEXT: Dave is furry.\nFOL: all x. (Dave(x) -> Furry(x))\nTEXT: Dave is quiet.\nFOL: all x. (Dave(x) -> Quiet(x))\nTEXT: Dave is rough.\nFOL: all x. (Dave(x) -> Rough(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Erin is quiet.\nFOL: all x. (Erin(x) -> Quiet(x))\nTEXT: Gary is furry.\nFOL: all x. (Gary(x) -> Furry(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> Kind(x))\nTEXT: Gary is rough.\nFOL: all x. (Gary(x) -> Rough(x))\nTEXT: All furry, rough people are quiet.\nFOL: ((Furry(x) & Rough(x)) -> Quiet(x))\nTEXT: If someone is green and smart then they are quiet.\nFOL: (Green(x) & Smart(x) -> Quiet(x))\nTEXT: All furry, quiet people are kind.\nFOL: ((Furry(x) & Quiet(x)) -> Kind(x))\nTEXT: All white, furry people are kind.\nFOL: ((Furry(x) & White(x)) -> Kind(x))\nTEXT: If Dave is white and Dave is kind then Dave is green.\nFOL: (White(x) & Kind(x) -> Green(x))\nTEXT: If someone is quiet then they are kind.\nFOL: (Quiet(x) -> Kind(x))\nTEXT: All kind people are white.\nFOL: all x. (Kind(x) -> White(x))\nTEXT: White, green people are smart.\nFOL: ((White(x) & Green(x)) -> Smart(x))\nTEXT: Gary is smart.\nFOL: Gary(x) -> Smart(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is kind.\nFOL: all x. (Charlie(x) -> Kind(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\nTEXT: Charlie is white.\nFOL: all x. (Charlie(x) -> White(x))\nTEXT: Dave is furry.\nFOL: all x. (Dave(x) -> Furry(x))\nTEXT: Dave is quiet.\nFOL: all x. (Dave(x) -> Quiet(x))\nTEXT: Dave is rough.\nFOL: all x. (Dave(x) -> Rough(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Erin is quiet.\nFOL: all x. (Erin(x) -> Quiet(x))\nTEXT: Gary is furry.\nFOL: all x. (Gary(x) -> Furry(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> Kind(x))\nTEXT: Gary is rough.\nFOL: all x. (Gary(x) -> Rough(x))\nTEXT: All furry, rough people are quiet.\nFOL: ((Furry(x) & Rough(x)) -> Quiet(x))\nTEXT: If someone is green and smart then they are quiet.\nFOL: (Green(x) & Smart(x) -> Quiet(x))\nTEXT: All furry, quiet people are kind.\nFOL: ((Furry(x) & Quiet(x)) -> Kind(x))\nTEXT: All white, furry people are kind.\nFOL: ((Furry(x) & White(x)) -> Kind(x))\nTEXT: If Dave is white and Dave is kind then Dave is green.\nFOL: (White(x) & Kind(x) -> Green(x))\nTEXT: If someone is quiet then they are kind.\nFOL: (Quiet(x) -> Kind(x))\nTEXT: All kind people are white.\nFOL: all x. (Kind(x) -> White(x))\nTEXT: White, green people are smart.\nFOL: (White(x) & Green(x) -> Smart(x))\nTEXT: Gary is smart.\nFOL: Gary is smart\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is kind.\nFOL: all x. (Charlie(x) -> Kind(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\nTEXT: Charlie is white.\nFOL: all x. (Charlie(x) -> White(x))\nTEXT: Dave is furry.\nFOL: all x. (Dave(x) -> Furry(x))\nTEXT: Dave is quiet.\nFOL: all x. (Dave(x) -> Quiet(x))\nTEXT: Dave is rough.\nFOL: all x. (Dave(x) -> Rough(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Erin is quiet.\nFOL: all x. (Erin(x) -> Quiet(x))\nTEXT: Gary is furry.\nFOL: all x. (Gary(x) -> Furry(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> Kind(x))\nTEXT: Gary is rough.\nFOL: all x. (Gary(x) -> Rough(x))\nTEXT: All furry, rough people are quiet.\nFOL: ((Furry(x) & Rough(x)) -> Quiet(x))\nTEXT: If someone is green and smart then they are quiet.\nFOL: (Green(x) & Smart(x) -> Quiet(x))\nTEXT: All furry, quiet people are kind.\nFOL: ((Furry(x) & Quiet(x)) -> Kind(x))\nTEXT: All white, furry people are kind.\nFOL: ((Furry(x) & White(x)) -> Kind(x))\nTEXT: If Dave is white and Dave is kind then Dave is green.\nFOL: (White(x) & Kind(x) -> Green(x))\nTEXT: If someone is quiet then they are kind.\nFOL: (Quiet(x) -> Kind(x))\nTEXT: All kind people are white.\nFOL: (Kind(x) -> White(x))\nTEXT: White, green people are smart.\nFOL: (White(x) & Green(x) -> Smart(x))\nTEXT: Gary is smart.\nFOL: (Smart(x) -> Gary(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 139,
  "responses": [
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: Bob is kind and nice and looks green.\nFOL: all x. (Bob(x) -> Nice(x) & Green(x))\nTEXT: Harry is a young man who is rather round and kind.\nFOL: all x. (Harry(x) -> Young(x) & Round(x) & Nice(x))\nTEXT: Harry is feeling blue because he has a sunburn that is making him rather red and he is also rather ill which makes him appear green.\nFOL: all x. (Harry(x) -> Feeling(x) & Sunburn(x) & Red(x) & Nice(x) & Green(x))\nTEXT: A very nice person who is also green is certainly kind.\nFOL: all x. (Nice(x) & Green(x) -> Kind(x))\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: all x. (Nice(x) & Round(x) -> Big(x))\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: all x. (Nice(x) & Cold(x) & Blue(x) -> Big(x))\nTEXT: A person who is kind and rough and blue is young.\nFOL: all x. (Nice(x) & Rough(x) & Blue(x) -> Young(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Blue(x) -> Green(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: all x. (Blue(x) & Nice(x) -> Cold(x))\nTEXT: A nice and green man or woman is also red in color.\nFOL: all x. (Nice(x) & Green(x) -> Red(x))\nTEXT: Alan is round.\nFOL: all x. (Alan(x) -> Round(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: Bob is kind and nice and looks green.\nFOL: all x. (Bob(x) -> Nice(x) & Green(x))\nTEXT: Harry is a young man who is rather round and kind.\nFOL: all x. (Harry(x) -> Young(x) & Round(x) & Nice(x))\nTEXT: Harry is feeling blue because he has a sunburn that is making him rather red and he is also rather ill which makes him appear green.\nFOL: all x. (Harry(x) -> Feeling(x) & Sunburn(x) & Red(x) & Nice(x) & Green(x))\nTEXT: A very nice person who is also green is certainly kind.\nFOL: all x. (Nice(x) & Green(x) -> Kind(x))\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: all x. (Nice(x) & Round(x) -> Big(x))\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: all x. (Nice(x) & Cold(x) & Blue(x) -> Big(x))\nTEXT: A person who is kind and rough and blue is young.\nFOL: all x. (Nice(x) & Rough(x) & Blue(x) -> Young(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Blue(x) -> Green(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: all x. (Blue(x) & Nice(x) -> Cold(x))\nTEXT: A nice and green man or woman is also red in color.\nFOL: all x. (Nice(x) & Green(x) -> Red(x))\nTEXT: Alan is round.\nFOL: Alan(x) -> Round(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: Bob is kind and nice and looks green.\nFOL: all x. (Bob(x) -> Nice(x) & Green(x))\nTEXT: Harry is a young man who is rather round and kind.\nFOL: all x. (Harry(x) -> Young(x) & Round(x) & Nice(x))\nTEXT: Harry is feeling blue because he has a sunburn that is making him rather red and he is also rather ill which makes him appear green.\nFOL: all x. (Harry(x) -> Feeling(x) & Sunburn(x) & Red(x) & Nice(x) & Green(x))\nTEXT: A very nice person who is also green is certainly kind.\nFOL: all x. (Nice(x) & Green(x) -> Kind(x))\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: all x. (Nice(x) & Round(x) -> Big(x))\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: all x. (Nice(x) & Cold(x) & Blue(x) -> Big(x))\nTEXT: A person who is kind and rough and blue is young.\nFOL: all x. (Nice(x) & Rough(x) & Blue(x) -> Young(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Blue(x) -> Green(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: all x. (Blue(x) & Nice(x) -> Cold(x))\nTEXT: A nice and green man or woman is also red in color.\nFOL: all x. (Nice(x) & Green(x) -> Red(x))\nTEXT: Alan is round.\nFOL: Round(alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: Bob is kind and nice and looks green.\nFOL: all x. (Bob(x) -> Nice(x) & Green(x))\nTEXT: Harry is a young man who is rather round and kind.\nFOL: all x. (Harry(x) -> Young(x) & Round(x) & Nice(x))\nTEXT: Harry is feeling blue because he has a sunburn that is making him rather red and he is also rather ill which makes him appear green.\nFOL: all x. (Harry(x) -> Feeling(x) & Sunburn(x) & Red(x) & Nice(x) & Green(x))\nTEXT: A very nice person who is also green is certainly kind.\nFOL: all x. (Nice(x) & Green(x) -> Kind(x))\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: all x. (Nice(x) & Round(x) -> Big(x))\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: all x. (Nice(x) & Cold(x) & Blue(x) -> Big(x))\nTEXT: A person who is kind and rough and blue is young.\nFOL: all x. (Nice(x) & Rough(x) & Blue(x) -> Young(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Blue(x) -> Green(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: all x. (Blue(x) & Nice(x) -> Cold(x))\nTEXT: A nice and green man or woman is also red in color.\nFOL: all x. (Nice(x) & Green(x) -> Red(x))\nTEXT: Alan is round.\nFOL: all x. (Alan(x) -> Round(x))",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: Bob is kind and nice and looks green.\nFOL: all x. (Bob(x) -> Nice(x) & Green(x))\nTEXT: Harry is a young man who is rather round and kind.\nFOL: all x. (Harry(x) -> Young(x) & Round(x) & Nice(x))\nTEXT: Harry is feeling blue because he has a sunburn that is making him rather red and he is also rather ill which makes him appear green.\nFOL: all x. (Harry(x) -> Feeling(x) & Sunburn(x) & Red(x) & Nice(x) & Green(x))\nTEXT: A very nice person who is also green is certainly kind.\nFOL: all x. (Nice(x) & Green(x) -> Kind(x))\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: all x. (Nice(x) & Round(x) -> Big(x))\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: all x. (Nice(x) & Cold(x) & Blue(x) -> Big(x))\nTEXT: A person who is kind and rough and blue is young.\nFOL: all x. (Nice(x) & Rough(x) & Blue(x) -> Young(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Blue(x) -> Green(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: all x. (Blue(x) & Nice(x) -> Cold(x))\nTEXT: A nice and green man or woman is also red in color.\nFOL: Nice(x) & Green(x) -> Red(x))\nTEXT: Alan is round.\nFOL: Alan(x) -> Round(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 140,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle visits the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & Visit(x, y) -> x == y)\nTEXT: The rabbit chases the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & -Visit(x, y) & -Chase(x, y) -> x == y)\nTEXT: The rabbit visits the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & Visit(x, y) -> x == y)\nTEXT: If something chases the bald eagle and it visits the bald eagle then it sees the bald eagle.\nFOL: all x y. (Chase(x) & Visit(x, y) & -Chase(x, y) & -Visit(x, y) & x == y)\nTEXT: If something sees the rabbit then the rabbit chases the bald eagle.\nFOL: all x y. (See(x) & Rabbit(y) & -Chase(x, y) & -Visit(x, y) & x == y)\nTEXT: If something is red and it chases the rabbit then the rabbit is big.\nFOL: all x y. (Red(x) & Chase(x, y) & -Red(x) & Rabbit(y) & -Chase(x, y) & x == y)\nTEXT: The rabbit visits the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & Visit(x, y) -> x == y)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle visits the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & Visit(x, y) -> x == y)\nTEXT: The rabbit chases the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & -Visit(x, y) & -Chase(x, y) -> x == y)\nTEXT: The rabbit visits the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & Visit(x, y) -> x == y)\nTEXT: If something chases the bald eagle and it visits the bald eagle then it sees the bald eagle.\nFOL: all x y. (Chase(x) & Visit(x, y) & -Chase(x, y) & -Visit(x, y) & x == y)\nTEXT: If something sees the rabbit then the rabbit chases the bald eagle.\nFOL: all x y. (See(x) & Rabbit(y) & -Chase(x, y) & -Visit(x, y) & x == y)\nTEXT: If something is red and it chases the rabbit then the rabbit is big.\nFOL: all x y. (Red(x) & Chase(x, y) & -Red(y) & -Chase(x, y) & x == y)\nTEXT: The rabbit visits the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & Visit(x, y) -> x == y)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle visits the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & Visit(x, y) -> x == y)\nTEXT: The rabbit chases the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & -Visit(x, y) & -Chase(x, y) -> x == y)\nTEXT: The rabbit visits the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & Visit(x, y) -> x == y)\nTEXT: If something chases the bald eagle and it visits the bald eagle then it sees the bald eagle.\nFOL: all x y. (Chase(x) & Visit(x, y) & -Chase(x, y) & -Visit(x, y) & x == y)\nTEXT: If something sees the rabbit then the rabbit chases the bald eagle.\nFOL: all x y. (See(x) & Rabbit(y) & -See(x, y) & -Chase(x, y) -> x == y)\nTEXT: If something is red and it chases the rabbit then the rabbit is big.\nFOL: all x y. (Red(x) & Chase(x, y) & -Red(x) & -Chase(x, y) & x == y)\nTEXT: The rabbit visits the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & Visit(x, y) -> x == y)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle visits the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & Visit(x, y) -> x == y)\nTEXT: The rabbit chases the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & -Visit(x, y) & -Chase(x, y) -> x == y)\nTEXT: The rabbit visits the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & Visit(x, y) -> x == y)\nTEXT: If something chases the bald eagle and it visits the bald eagle then it sees the bald eagle.\nFOL: all x y. (Chase(x) & Visit(x, y) & -Chase(x, y) & -Visit(x, y) & x == y)\nTEXT: If something sees the rabbit then the rabbit chases the bald eagle.\nFOL: all x y. (See(x) & Rabbit(y) & -Chase(x, y) & -Visit(x, y) & x == y)\nTEXT: If something is red and it chases the rabbit then the rabbit is big.\nFOL: all x y. (IsRed(x) & Chase(x, y) & -IsRed(y) & -Chase(x, y) & x == y)\nTEXT: The rabbit visits the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & Visit(x, y) -> x == y)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle visits the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & Visit(x, y) -> x == y)\nTEXT: The rabbit chases the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & -Visit(x, y) & -Chase(x, y) -> x == y)\nTEXT: The rabbit visits the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & Visit(x, y) -> x == y)\nTEXT: If something chases the bald eagle and it visits the bald eagle then it sees the bald eagle.\nFOL: all x y. (Chase(x) & Visit(x, y) & -Chase(x, y) & -Visit(x, y) & x == y)\nTEXT: If something sees the rabbit then the rabbit chases the bald eagle.\nFOL: all x y. (See(x) & Rabbit(y) & -Chase(x, y) & -Visit(x, y) & x == y)\nTEXT: If something is red and it chases the rabbit then the rabbit is big.\nFOL: all x y. (Red(x) & Chase(x, y) & -Red(x) & -Chase(x, y) & x == y)\nTEXT: The rabbit visits the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & Visit(x, y) -> x == y)\n</EVALUATE>"
  ]
 },
 {
  "index": 141,
  "responses": [
   "<EVALUATE>\nTEXT: Charlie is round but he is also nice and kind.\nFOL: all x y. (Charlie(x) & Round(x) & Nice(x) & Kind(x))\nTEXT: Dave is both young and red, but is nice and kind but he can be cold.\nFOL: all x y. (Dave(x) & Young(x) & Red(x) & Nice(x) & Kind(x) & -Cold(x))\nTEXT: The young person who is always feeling cold is named Fred.\nFOL: all x y. (Young(x) & -Cold(x) & Named(x) & Fred(x))\nTEXT: Gary may be round, but he is also kind.\nFOL: all x y. (Gary(x) & Round(x) & Nice(x))\nTEXT: Young people that are turning blue from being cold will be rough looking.\nFOL: all x y. (Young(x) & Blue(x) & -Cold(x) & Rough(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x y. (Nice(x) & Kind(x) & -Cold(x) & -Blue(x))\nTEXT: A person that is both nice and rough is someone who is also big.\nFOL: all x y. (Nice(x) & Rough(x) & Big(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x y. (Kind(x) & Round(x) & Big(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x y. (Cold(x) & Red(x) & Nice(x) & -Others(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: all x y. (Cold(x) & Blue(x) & Rough(x) & Nice(x))\nTEXT: Dave is rough.\nFOL: all x y. (Dave(x) & Rough(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is round but he is also nice and kind.\nFOL: all x y. (Charlie(x) & Round(x) & Nice(x) & Kind(x))\nTEXT: Dave is both young and red, but is nice and kind but he can be cold.\nFOL: all x y. (Dave(x) & Young(x) & Red(x) & Nice(x) & Kind(x) & -Cold(x))\nTEXT: The young person who is always feeling cold is named Fred.\nFOL: all x y. (Young(x) & -Cold(x) & Named(x) & Fred(x))\nTEXT: Gary may be round, but he is also kind.\nFOL: all x y. (Gary(x) & Round(x) & Nice(x))\nTEXT: Young people that are turning blue from being cold will be rough looking.\nFOL: all x y. (Young(x) & -Cold(x) & TurningBlue(x) & Rough(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x y. (Nice(x) & Kind(x) & -Blue(x) & -FeelBlue(x))\nTEXT: A person that is both nice and rough is someone who is also big.\nFOL: all x y. (Nice(x) & Rough(x) & Big(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x y. (Kind(x) & Round(x) & Big(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x y. (Cold(x) & Red(x) & Nice(x) & -Others(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: all x y. (Cold(x) & Blue(x) & Rough(x) & Nice(x))\nTEXT: Dave is rough.\nFOL: all x y. (Dave(x) & Rough(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is round but he is also nice and kind.\nFOL: all x y. (Charlie(x) & Round(x) & Nice(x) & Kind(x))\nTEXT: Dave is both young and red, but is nice and kind but he can be cold.\nFOL: all x y. (Dave(x) & Young(x) & Red(x) & Nice(x) & Kind(x) & -Cold(x))\nTEXT: The young person who is always feeling cold is named Fred.\nFOL: all x y. (Young(x) & -Cold(x) & Named(x) & Fred(x))\nTEXT: Gary may be round, but he is also kind.\nFOL: all x y. (Gary(x) & Round(x) & Nice(x))\nTEXT: Young people that are turning blue from being cold will be rough looking.\nFOL: all x y. (Young(x) & Blue(x) & -Cold(x) & Rough(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x y. (Nice(x) & Kind(x) & -Cold(x) & -Blue(x))\nTEXT: A person that is both nice and rough is someone who is also big.\nFOL: all x y. (Nice(x) & Rough(x) & Big(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x y. (Kind(x) & Round(x) & Big(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x y. (Cold(x) & Red(x) & Nice(x) & -Others(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: all x y. (Cold(x) & Blue(x) & Rough(x) & Nice(x))\nTEXT: Dave is rough.\nFOL: all x y. (Dave(x) & Rough(x))",
   "<EVALUATE>\nTEXT: Charlie is round but he is also nice and kind.\nFOL: all x y. (Charlie(x) & Round(x) & Nice(x) & Kind(x))\nTEXT: Dave is both young and red, but is nice and kind but he can be cold.\nFOL: all x y. (Dave(x) & Young(x) & Red(x) & Nice(x) & Kind(x) & -Cold(x))\nTEXT: The young person who is always feeling cold is named Fred.\nFOL: all x y. (Young(x) & -Cold(x) & Named(x) & Fred(x))\nTEXT: Gary may be round, but he is also kind.\nFOL: all x y. (Gary(x) & Round(x) & Nice(x))\nTEXT: Young people that are turning blue from being cold will be rough looking.\nFOL: all x y. (Young(x) & Blue(x) & -Cold(x) & Rough(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x y. (Nice(x) & Kind(x) & -Cold(x) & -Blue(x))\nTEXT: A person that is both nice and rough is someone who is also big.\nFOL: all x y. (Nice(x) & Rough(x) & -Cold(x) & -Blue(x) & Big(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x y. (Kind(x) & Round(x) & -Cold(x) & -Blue(x) & Big(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x y. (Cold(x) & Red(x) & -Nice(x) & -Blue(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: all x y. (Cold(x) & Blue(x) & -Nice(x) & -Blue(x) & Rough(x))\nTEXT: Dave is rough.\nFOL: all x y. (Dave(x) & Rough(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is round but he is also nice and kind.\nFOL: all x y. (Charlie(x) & Round(x) & Nice(x) & Kind(x))\nTEXT: Dave is both young and red, but is nice and kind but he can be cold.\nFOL: all x y. (Dave(x) & Young(x) & Red(x) & Nice(x) & Kind(x) & -Cold(x))\nTEXT: The young person who is always feeling cold is named Fred.\nFOL: all x y. (Young(x) & -Cold(x) & Named(x) & Fred(x))\nTEXT: Gary may be round, but he is also kind.\nFOL: all x y. (Gary(x) & Round(x) & Nice(x))\nTEXT: Young people that are turning blue from being cold will be rough looking.\nFOL: all x y. (Young(x) & -Cold(x) & TurningBlue(x) & Rough(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x y. (Nice(x) & Kind(x) & -Blue(x) & -FeelBlue(x))\nTEXT: A person that is both nice and rough is someone who is also big.\nFOL: all x y. (Nice(x) & Rough(x) & Big(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x y. (Kind(x) & Round(x) & Big(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x y. (Cold(x) & Red(x) & Nice(x) & -Others(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: all x y. (Cold(x) & Blue(x) & Rough(x) & Nice(x))\nTEXT: Dave is rough.\nFOL: all x y. (Dave(x) & Rough(x))"
  ]
 },
 {
  "index": 142,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> Big(x))\nTEXT: Dave is quiet.\nFOL: all x. (Dave(x) -> Quiet(x))\nTEXT: Dave is rough.\nFOL: all x. (Dave(x) -> Rough(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Fiona is kind.\nFOL: all x. (Fiona(x) -> Kind(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Fiona(x) -> Quiet(x))\nTEXT: Gary is green.\nFOL: all x. (Gary(x) -> Green(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> Kind(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> Furry(x))\nTEXT: Harry is kind.\nFOL: all x. (Harry(x) -> Kind(x))\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\nTEXT: Quiet, furry things are green.\nFOL: (Quiet(x) & Furry(x) -> Green(x))\nTEXT: All furry, rough things are quiet.\nFOL: (Furry(x) & Rough(x) -> Quiet(x))\nTEXT: If Fiona is quiet then Fiona is furry.\nFOL: (Quiet(x) -> Furry(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> Big(x))\nTEXT: Dave is quiet.\nFOL: all x. (Dave(x) -> Quiet(x))\nTEXT: Dave is rough.\nFOL: all x. (Dave(x) -> Rough(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Fiona is kind.\nFOL: all x. (Fiona(x) -> Kind(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Fiona(x) -> Quiet(x))\nTEXT: Gary is green.\nFOL: all x. (Gary(x) -> Green(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> Kind(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> Furry(x))\nTEXT: Harry is kind.\nFOL: all x. (Harry(x) -> Kind(x))\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\nTEXT: Quiet, furry things are green.\nFOL: (Quiet(x) & Furry(x) -> Green(x))\nTEXT: All furry, rough things are quiet.\nFOL: (Furry(x) & Rough(x) -> Quiet(x))\nTEXT: If Fiona is quiet then Fiona is furry.\nFOL: if Fiona(x) -> Fiona(x) & Furry(x)\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> Big(x))\nTEXT: Dave is quiet.\nFOL: all x. (Dave(x) -> Quiet(x))\nTEXT: Dave is rough.\nFOL: all x. (Dave(x) -> Rough(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Fiona is kind.\nFOL: all x. (Fiona(x) -> Kind(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Fiona(x) -> Quiet(x))\nTEXT: Gary is green.\nFOL: all x. (Gary(x) -> Green(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> Kind(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> Furry(x))\nTEXT: Harry is kind.\nFOL: all x. (Harry(x) -> Kind(x))\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\nTEXT: Quiet, furry things are green.\nFOL: all x. (Quiet(x) & Furry(x) -> Green(x))\nTEXT: All furry, rough things are quiet.\nFOL: all x. (Furry(x) & Rough(x) -> Quiet(x))\nTEXT: If Fiona is quiet then Fiona is furry.\nFOL: if Fiona(x) -> Fiona(x) & Furry(x)\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> Big(x))\nTEXT: Dave is quiet.\nFOL: all x. (Dave(x) -> Quiet(x))\nTEXT: Dave is rough.\nFOL: all x. (Dave(x) -> Rough(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Fiona is kind.\nFOL: all x. (Fiona(x) -> Kind(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Fiona(x) -> Quiet(x))\nTEXT: Gary is green.\nFOL: all x. (Gary(x) -> Green(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> Kind(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> Furry(x))\nTEXT: Harry is kind.\nFOL: all x. (Harry(x) -> Kind(x))\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\nTEXT: Quiet, furry things are green.\nFOL: (Quiet(x) & Furry(x) -> Green(x))\nTEXT: All furry, rough things are quiet.\nFOL: (Furry(x) & Rough(x) -> Quiet(x))\nTEXT: If Fiona is quiet then Fiona is furry.\nFOL: (Quiet(x) -> Furry(x))\nTEXT: Dave is smart.\nFOL: (Big(x) -> Smart(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> Big(x))\nTEXT: Dave is quiet.\nFOL: all x. (Dave(x) -> Quiet(x))\nTEXT: Dave is rough.\nFOL: all x. (Dave(x) -> Rough(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\nTEXT: Fiona is kind.\nFOL: all x. (Fiona(x) -> Kind(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Fiona(x) -> Quiet(x))\nTEXT: Gary is green.\nFOL: all x. (Gary(x) -> Green(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> Kind(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> Furry(x))\nTEXT: Harry is kind.\nFOL: all x. (Harry(x) -> Kind(x))\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\nTEXT: Quiet, furry things are green.\nFOL: (Quiet(x) & Furry(x) -> Green(x))\nTEXT: All furry, rough things are quiet.\nFOL: (Furry(x) & Rough(x) -> Quiet(x))\nTEXT: If Fiona is quiet then Fiona is furry.\nFOL: (Quiet(x) -> Furry(x) & Fiona(x) -> Furry(x))\nTEXT: Dave is smart.\nFOL: all x. (Dave(x) -> Smart(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 143,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & Eat(x, y) -> True)\nTEXT: The bald eagle is not blue.\nFOL: all x. (BaldEagle(x) -> NotBlue(x))\nTEXT: The bald eagle sees the mouse.\nFOL: all x y. (BaldEagle(x) & Mouse(y) & See(x, y) -> True)\nTEXT: The bald eagle sees the tiger.\nFOL: all x y. (BaldEagle(x) & Tiger(y) & See(x, y) -> True)\nTEXT: The mouse is not kind.\nFOL: all x. (Mouse(x) -> NotKind(x))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) -> Kind(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> Round(x))\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) -> Blue(x))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) -> Green(x))\nTEXT: The tiger sees the rabbit.\nFOL: all x y. (Tiger(x) & Rabbit(y) & See(x, y) -> True)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: all x y z. (Mouse(x) & Young(x) & Eat(x, y) & Rabbit(z) & Need(x, y, z) -> True)\nTEXT: If something is blue then it eats the mouse.\nFOL: all x y. (Something(x) & Blue(y) & Eat(x, y) -> True)\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: all x y. (Something(x) & Kind(x) & NotYoung(x) & Eat(x, y) -> True)\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: all x y z. (Something(x) & Tiger(y) & See(x, y) & Rabbit(z) & Eat(x, y, z) -> True)\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: all x y z. (Something(x) & Rabbit(y) & See(x, y) & Rabbit(z) & NotBlue(z) -> True)\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: all x y z. (Something(x) & Mouse(y) & Eat(x, y) & Mouse(z) & Blue(z) -> True)\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: all x y z. (Something(x) & Rabbit(y) & Eat(x, y) & Rabbit(z) & Need(x, y, z) & See(x, y, z) -> True)\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: all x y z. (Something(x) & Mouse(y) & Eat(x, y) & Mouse(z) & Eat(x, y, z) & NotSee(x, y, z) -> True)\nTEXT: The tiger is round.\nFOL: all x. (Tiger(x) -> Round(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & Eat(x, y) -> True)\nTEXT: The bald eagle is not blue.\nFOL: all x. (BaldEagle(x) -> NotBlue(x))\nTEXT: The bald eagle sees the mouse.\nFOL: all x y. (BaldEagle(x) & Mouse(y) & See(x, y) -> True)\nTEXT: The bald eagle sees the tiger.\nFOL: all x y. (BaldEagle(x) & Tiger(y) & See(x, y) -> True)\nTEXT: The mouse is not kind.\nFOL: all x. (Mouse(x) -> NotKind(x))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) -> Kind(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> Round(x))\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) -> Blue(x))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) -> Green(x))\nTEXT: The tiger sees the rabbit.\nFOL: all x y. (Tiger(x) & Rabbit(y) & See(x, y) -> True)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: all x y z. (Mouse(x) & Young(x) & Eat(x, y) & Rabbit(z) & Need(x, y, z) -> True)\nTEXT: If something is blue then it eats the mouse.\nFOL: all x y. (Something(x) & Blue(y) & Eat(x, y) -> True)\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: all x y. (Something(x) & Kind(x) & NotYoung(x) & Eat(x, y) -> True)\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: all x y z. (Something(x) & Tiger(y) & See(x, y) & Rabbit(z) & Eat(x, y, z) -> True)\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: all x y z. (Something(x) & Rabbit(y) & See(x, y) & Rabbit(z) & NotBlue(x, y, z) -> True)\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: all x y z. (Something(x) & Mouse(y) & Eat(x, y) & Mouse(z) & Blue(x, y, z) -> True)\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: all x y z. (Something(x) & Rabbit(y) & Eat(x, y) & Rabbit(z) & Need(x, y, z) & See(x, y, z) -> True)\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: all x y z. (Something(x) & Mouse(y) & Eat(x, y) & Mouse(z) & Eat(x, y, z) & NotSee(x, y, z) -> True)\nTEXT: The tiger is round.\nFOL: all x. (Tiger(x) -> Round(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & Eat(x, y) -> True)\nTEXT: The bald eagle is not blue.\nFOL: all x. (BaldEagle(x) -> NotBlue(x))\nTEXT: The bald eagle sees the mouse.\nFOL: all x y. (BaldEagle(x) & Mouse(y) & See(x, y) -> True)\nTEXT: The bald eagle sees the tiger.\nFOL: all x y. (BaldEagle(x) & Tiger(y) & See(x, y) -> True)\nTEXT: The mouse is not kind.\nFOL: all x. (Mouse(x) -> NotKind(x))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) -> Kind(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> Round(x))\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) -> Blue(x))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) -> Green(x))\nTEXT: The tiger sees the rabbit.\nFOL: all x y. (Tiger(x) & Rabbit(y) & See(x, y) -> True)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: all x y z. (Mouse(x) & Young(x) & Eat(x, y) & Rabbit(z) & Need(x, y, z) -> True)\nTEXT: If something is blue then it eats the mouse.\nFOL: all x y. (Something(x) & Blue(y) & Eat(x, y) -> True)\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: all x y. (Something(x) & Kind(x) & NotYoung(x) & Eat(x, y) -> True)\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: all x y z. (Something(x) & Tiger(y) & See(x, y) & Rabbit(z) & Eat(x, y, z) -> True)\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: all x y z. (Something(x) & Rabbit(y) & See(x, y) & Rabbit(z) & NotBlue(x, y, z) -> True)\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: all x y z. (Something(x) & Mouse(y) & Eat(x, y) & Mouse(z) & Blue(x, y, z) -> True)\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: all x y z. (Something(x) & Rabbit(y) & Need(x, y, z) & Rabbit(z) & See(x, y, z) -> True)\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: all x y z. (Something(x) & Mouse(y) & Eat(x, y) & Mouse(z) & Eat(x, y, z) & NotSee(x, y, z) -> True)\nTEXT: The tiger is round.\nFOL: all x. (Tiger(x) -> Round(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & Eat(x, y) -> True)\nTEXT: The bald eagle is not blue.\nFOL: all x. (BaldEagle(x) -> NotBlue(x))\nTEXT: The bald eagle sees the mouse.\nFOL: all x y. (BaldEagle(x) & Mouse(y) & See(x, y) -> True)\nTEXT: The bald eagle sees the tiger.\nFOL: all x y. (BaldEagle(x) & Tiger(y) & See(x, y) -> True)\nTEXT: The mouse is not kind.\nFOL: all x. (Mouse(x) -> NotKind(x))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) -> Kind(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> Round(x))\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) -> Blue(x))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) -> Green(x))\nTEXT: The tiger sees the rabbit.\nFOL: all x y. (Tiger(x) & Rabbit(y) & See(x, y) -> True)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: all x y z. (Mouse(x) & Young(x) & Eat(x, y) & Rabbit(z) & Need(x, y, z) -> True)\nTEXT: If something is blue then it eats the mouse.\nFOL: all x y. (Something(x) & Blue(y) & Eat(x, y) -> True)\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: all x y. (Something(x) & Kind(x) & NotYoung(x) & Eat(x, y) -> True)\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: all x y z. (Something(x) & Tiger(y) & See(x, y) & Rabbit(z) & Eat(x, y, z) -> True)\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: all x y z. (Something(x) & Rabbit(y) & See(x, y) & Rabbit(z) & NotBlue(z) -> True)\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: all x y z. (Something(x) & Mouse(y) & Eat(x, y) & Mouse(z) & Blue(z) -> True)\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: all x y z. (Something(x) & Rabbit(y) & Eat(x, y) & Rabbit(z) & Need(x, y, z) & See(x, y, z) -> True)\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: all x y z. (Something(x) & Mouse(y) & Eat(x, y) & Mouse(z) & Eat(x, z) & NotSee(x, y, z) -> True)\nTEXT: The tiger is round.\nFOL: all x. (Tiger(x) -> Round(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & Eat(x, y) -> True)\nTEXT: The bald eagle is not blue.\nFOL: all x. (BaldEagle(x) -> NotBlue(x))\nTEXT: The bald eagle sees the mouse.\nFOL: all x y. (BaldEagle(x) & Mouse(y) & See(x, y) -> True)\nTEXT: The bald eagle sees the tiger.\nFOL: all x y. (BaldEagle(x) & Tiger(y) & See(x, y) -> True)\nTEXT: The mouse is not kind.\nFOL: all x. (Mouse(x) -> NotKind(x))\nTEXT: The rabbit is kind.\nFOL: all x. (Rabbit(x) -> Kind(x))\nTEXT: The rabbit is round.\nFOL: all x. (Rabbit(x) -> Round(x))\nTEXT: The tiger is blue.\nFOL: all x. (Tiger(x) -> Blue(x))\nTEXT: The tiger is green.\nFOL: all x. (Tiger(x) -> Green(x))\nTEXT: The tiger sees the rabbit.\nFOL: all x y. (Tiger(x) & Rabbit(y) & See(x, y) -> True)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: all x y z. (Mouse(x) & Young(x) & Eat(x, y) & Rabbit(z) & Need(x, y, z) -> True)\nTEXT: If something is blue then it eats the mouse.\nFOL: all x y. (Something(x) & Blue(y) & Eat(x, y) -> True)\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: all x y. (Something(x) & Kind(x) & NotYoung(x) & Eat(x, y) -> True)\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: all x y z. (Something(x) & Tiger(y) & See(x, y) & Rabbit(z) & Eat(x, y, z) -> True)\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: all x y z. (Something(x) & Rabbit(y) & See(x, y) & Rabbit(z) & NotBlue(z) -> True)\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: all x y z. (Something(x) & Mouse(y) & Eat(x, y) & Mouse(z) & Blue(z) -> True)\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: all x y z. (Something(x) & Rabbit(y) & Eat(x, y) & Rabbit(z) & Need(x, y, z) & See(x, y, z) -> True)\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: all x y z. (Something(x) & Mouse(y) & Eat(x, y) & Mouse(z) & Eat(x, y, z) & NotSee(x, y, z) -> True)\nTEXT: The tiger is round.\nFOL: all x. (Tiger(x) -> Round(x))"
  ]
 },
 {
  "index": 144,
  "responses": [
   "<EVALUATE>\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Fiona(x) -> Quiet(x))\nTEXT: All furry things are nice.\nFOL: all x. (Fur(x) -> Nice(x))\nTEXT: If something is quiet and furry then it is rough.\nFOL: if (Quiet(x) & Fur(x)) -> Rough(x)\nTEXT: If Fiona is big and Fiona is white then Fiona is quiet.\nFOL: if (Big(x) & White(x)) -> Quiet(x)\nTEXT: If something is white then it is smart.\nFOL: if (White(x) -> Smart(x))\nTEXT: If Fiona is nice then Fiona is big.\nFOL: if (Nice(x) -> Big(x))\nTEXT: If Fiona is rough then Fiona is white.\nFOL: if (Rough(x) -> White(x))\nTEXT: Fiona is not smart.\nFOL: -Smart(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Fiona(x) -> Quiet(x))\nTEXT: All furry things are nice.\nFOL: all x. (Fur(x) -> Nice(x))\nTEXT: If something is quiet and furry then it is rough.\nFOL: if (Quiet(x) & Fur(x)) -> Rough(x)\nTEXT: If Fiona is big and Fiona is white then Fiona is quiet.\nFOL: if (Big(x) & White(x) & Quiet(x)) -> Fiona(x)\nTEXT: If something is white then it is smart.\nFOL: if (White(x) -> Smart(x))\nTEXT: If Fiona is nice then Fiona is big.\nFOL: if (Nice(x) -> Big(x))\nTEXT: If Fiona is rough then Fiona is white.\nFOL: if (Rough(x) -> White(x))\nTEXT: Fiona is not smart.\nFOL: -Smart(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Fiona(x) -> Quiet(x))\nTEXT: All furry things are nice.\nFOL: all x. (Fur(x) -> Nice(x))\nTEXT: If something is quiet and furry then it is rough.\nFOL: if (Quiet(x) & Fur(x)) -> Rough(x)\nTEXT: If Fiona is big and Fiona is white then Fiona is quiet.\nFOL: if (Big(x) & White(x)) -> Quiet(x)\nTEXT: If something is white then it is smart.\nFOL: if (White(x) -> Smart(x))\nTEXT: If Fiona is nice then Fiona is big.\nFOL: if (Nice(x) -> Big(x))\nTEXT: If Fiona is rough then Fiona is white.\nFOL: if (Rough(x) -> White(x))\nTEXT: Fiona is not smart.\nFOL: not Smart(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Fiona(x) -> Quiet(x))\nTEXT: All furry things are nice.\nFOL: all x. (Fur(x) -> Nice(x))\nTEXT: If something is quiet and furry then it is rough.\nFOL: if (Quiet(x) & Fur(x)) -> Rough(x)\nTEXT: If Fiona is big and Fiona is white then Fiona is quiet.\nFOL: if (Big(x) & White(x) & Quiet(x)) -> Fiona(x)\nTEXT: If something is white then it is smart.\nFOL: if (White(x) -> Smart(x))\nTEXT: If Fiona is nice then Fiona is big.\nFOL: if (Nice(x) -> Big(x))\nTEXT: If Fiona is rough then Fiona is white.\nFOL: if (Rough(x) -> White(x))\nTEXT: Fiona is not smart.\nFOL: not Smart(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is quiet.\nFOL: all x. (Fiona(x) -> Quiet(x))\nTEXT: All furry things are nice.\nFOL: all x. (Fur(x) -> Nice(x))\nTEXT: If something is quiet and furry then it is rough.\nFOL: if (Quiet(x) & Fur(x)) -> Rough(x)\nTEXT: If Fiona is big and Fiona is white then Fiona is quiet.\nFOL: if (Big(x) & White(x)) -> Quiet(x)\nTEXT: If something is white then it is smart.\nFOL: if (White(x)) -> Smart(x))\nTEXT: If Fiona is nice then Fiona is big.\nFOL: if (Nice(x) -> Big(x))\nTEXT: If Fiona is rough then Fiona is white.\nFOL: if (Rough(x) -> White(x))\nTEXT: Fiona is not smart.\nFOL: -Smart(fiona)\n</EVALUATE>"
  ]
 },
 {
  "index": 145,
  "responses": [
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Young(x) & FeelCold(x) -> NamedCharlie(x))\nTEXT: Eric is kind.\nFOL: all x. (Kind(x) -> -NamedCharlie(x))\nTEXT: He is also very cold and blue.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: Fred seems to be round.\nFOL: all x. (Round(x) -> -NamedCharlie(x))\nTEXT: Harry is green and cold too.\nFOL: all x. (Green(x) & Cold(x) & -NamedCharlie(x))\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Young(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: when x. (Blue(x) & -NamedCharlie(x) & -Kind(x) -> -Cold(x))\nTEXT: Harry is not young.\nFOL: -Young(harry)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Young(x) & FeelCold(x) -> NamedCharlie(x))\nTEXT: Eric is kind.\nFOL: all x. (Kind(x) -> -NamedCharlie(x))\nTEXT: He is also very cold and blue.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: Fred seems to be round.\nFOL: all x. (Round(x) -> -NamedCharlie(x))\nTEXT: Harry is green and cold too.\nFOL: all x. (Green(x) & Cold(x) & -NamedCharlie(x))\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Young(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: when x. (Blue(x) & -NamedCharlie(x) & -Kind(x) -> -Cold(x))\nTEXT: Harry is not young.\nFOL: -Young(harry)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Young(x) & FeelCold(x) -> NamedCharlie(x))\nTEXT: Eric is kind.\nFOL: all x. (Kind(x) -> -NamedCharlie(x))\nTEXT: He is also very cold and blue.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: Fred seems to be round.\nFOL: all x. (Round(x) -> -NamedCharlie(x))\nTEXT: Harry is green and cold too.\nFOL: all x. (Green(x) & Cold(x) & -NamedCharlie(x))\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Young(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: when x. (Blue(x) & -NamedCharlie(x) & -Kind(x) -> -Cold(x))\nTEXT",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Young(x) & FeelCold(x) -> NamedCharlie(x))\nTEXT: Eric is kind.\nFOL: all x. (Kind(x) -> -NamedCharlie(x))\nTEXT: He is also very cold and blue.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: Fred seems to be round.\nFOL: all x. (Round(x) -> -NamedCharlie(x))\nTEXT: Harry is green and cold too.\nFOL: all x. (Green(x) & Cold(x) -> -NamedCharlie(x))\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) & Kind(x) -> -NamedCharlie(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Young(x) & Looking(x) -> -NamedCharlie(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: all x. (Cold(x) & -NamedCharlie(x) & Red(x) -> -NamedCharlie(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: all x. (Blue(x) & Kind(x) & -NamedCharlie(x) -> Cold(x))\nTEXT: Harry is not young.\nFOL: -Young(harry)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Young(x) & FeelCold(x) -> NamedCharlie(x))\nTEXT: Eric is kind.\nFOL: all x. (Kind(x) -> -NamedCharlie(x))\nTEXT: He is also very cold and blue.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: Fred seems to be round.\nFOL: all x. (Round(x) -> -NamedCharlie(x))\nTEXT: Harry is green and cold too.\nFOL: all x. (Green(x) & Cold(x) -> -NamedCharlie(x))\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) & Kind(x) -> -NamedCharlie(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Young(x) & Looking(x) -> -NamedCharlie(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: all x. (Cold(x) & -NamedCharlie(x) & Red(x) -> -NamedCharlie(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: all x. (Blue(x) & Kind(x) & -NamedCharlie(x) -> Cold(x))\nTEXT: Harry is not young.\nFOL: -Young(harry)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Young(x) & FeelCold(x) -> NamedCharlie(x))\nTEXT: Eric is kind.\nFOL: all x. (Kind(x) -> -NamedCharlie(x))\nTEXT: He is also very cold and blue.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: Fred seems to be round.\nFOL: all x. (Round(x) -> -NamedCharlie(x))\nTEXT: Harry is green and cold too.\nFOL: all x. (Green(x) & Cold(x) -> -NamedCharlie(x))\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) & Kind(x) -> -NamedCharlie(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Young(x) & Looking(x) -> -NamedCharlie(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: all x. (Cold(x) & -NamedCharlie(x) & Red(x) -> -NamedCharlie(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: all x. (Blue(x) & Kind(x) & -NamedCharlie(x) -> Cold",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Young(x) & FeelCold(x) -> NamedCharlie(x))\nTEXT: Eric is kind.\nFOL: all x. (Kind(x) -> -NamedCharlie(x))\nTEXT: He is also very cold and blue.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: Fred seems to be round.\nFOL: all x. (Round(x) -> -NamedCharlie(x))\nTEXT: Harry is green and cold too.\nFOL: all x. (Green(x) & Cold(x) -> -NamedCharlie(x))\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) & Kind(x) -> -NamedCharlie(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Young(x) & Looking(x) -> -NamedCharlie(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: all x. (Cold(x) & -NamedCharlie(x) & Red(x) -> -NamedCharlie(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: all x. (Blue(x) & Kind(x) & -NamedCharlie(x) -> -Cold(x))\nTEXT: Harry is not young.\nFOL: -Young(harry)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Young(x) & FeelCold(x) -> NamedCharlie(x))\nTEXT: Eric is kind.\nFOL: all x. (Kind(x) -> -NamedCharlie(x))\nTEXT: He is also very cold and blue.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: Fred seems to be round.\nFOL: all x. (Round(x) -> -NamedCharlie(x))\nTEXT: Harry is green and cold too.\nFOL: all x. (Green(x) & Cold(x) -> -NamedCharlie(x))\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) & Kind(x) -> -NamedCharlie(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Young(x) & Looking(x) -> -NamedCharlie(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: all x. (Cold(x) & -NamedCharlie(x) & Red(x) -> -NamedCharlie(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: all x. (Blue(x) & Kind(x) & -NamedCharlie(x) -> -Cold(x))\nTEXT: Harry is not young.\nFOL: -Young(harry)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Young(x) & FeelCold(x) -> NamedCharlie(x))\nTEXT: Eric is kind.\nFOL: all x. (Kind(x) -> -NamedCharlie(x))\nTEXT: He is also very cold and blue.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: Fred seems to be round.\nFOL: all x. (Round(x) -> -NamedCharlie(x))\nTEXT: Harry is green and cold too.\nFOL: all x. (Green(x) & Cold(x) -> -NamedCharlie(x))\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) & Kind(x) -> -NamedCharlie(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Young(x) & Looking(x) -> -NamedCharlie(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: all x. (Cold(x) & -NamedCharlie(x) & Red(x) -> -NamedCharlie(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: all x. (Blue(x) & Kind(x) & -NamedCharlie(x)",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Young(x) & FeelCold(x) -> NamedCharlie(x))\nTEXT: Eric is kind.\nFOL: all x. (Kind(x) -> -NamedCharlie(x))\nTEXT: He is also very cold and blue.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: Fred seems to be round.\nFOL: all x. (Round(x) -> -NamedCharlie(x))\nTEXT: Harry is green and cold too.\nFOL: all x. (Green(x) & Cold(x) & -NamedCharlie(x))\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Young(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: when x. (Blue(x) & -NamedCharlie(x) & -Kind(x) -> -Cold(x))\nTEXT: Harry is not young.\nFOL: -Young(harry)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Young(x) & FeelCold(x) -> NamedCharlie(x))\nTEXT: Eric is kind.\nFOL: all x. (Kind(x) -> -NamedCharlie(x))\nTEXT: He is also very cold and blue.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: Fred seems to be round.\nFOL: all x. (Round(x) -> -NamedCharlie(x))\nTEXT: Harry is green and cold too.\nFOL: all x. (Green(x) & Cold(x) & -NamedCharlie(x))\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Young(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: when x. (Blue(x) & -NamedCharlie(x) & -Kind(x) -> -Cold(x))\nTEXT: Harry is not young.\nFOL: -Young(harry)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Young(x) & FeelCold(x) -> -NamedCharlie(x))\nTEXT: Eric is kind.\nFOL: all x. (Kind(x) -> -NamedCharlie(x))\nTEXT: He is also very cold and blue.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: Fred seems to be round.\nFOL: all x. (Round(x) -> -NamedCharlie(x))\nTEXT: Harry is green and cold too.\nFOL: all x. (Green(x) & Cold(x) & -NamedCharlie(x))\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Young(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: when x. (Blue(x) & -NamedCharlie(x) & -Kind(x) -> -Cold(x))\n",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Young(x) & FeelCold(x) -> NamedCharlie(x))\nTEXT: Eric is kind.\nFOL: all x. (Kind(x) -> -NamedCharlie(x))\nTEXT: He is also very cold and blue.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: Fred seems to be round.\nFOL: all x. (Round(x) -> -NamedCharlie(x))\nTEXT: Harry is green and cold too.\nFOL: all x. (Green(x) & Cold(x) & -NamedCharlie(x))\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Young(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: when x. (Blue(x) & -NamedCharlie(x) & -Kind(x) -> -Cold(x))\nTEXT: Harry is not young.\nFOL: -Young(harry)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Young(x) & -FeelCold(x) -> NamedCharlie(x))\nTEXT: Eric is kind.\nFOL: all x. (Kind(x) -> -NamedCharlie(x))\nTEXT: He is also very cold and blue.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: Fred seems to be round.\nFOL: all x. (Round(x) -> -NamedCharlie(x))\nTEXT: Harry is green and cold too.\nFOL: all x. (Green(x) & Cold(x) & -NamedCharlie(x))\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Young(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: when x. (Blue(x) & -NamedCharlie(x) & -Kind(x) -> -Cold(x))\nTEXT: Harry is not young.\nFOL: -Young(harry)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Young(x) & -FeelCold(x) -> NamedCharlie(x))\nTEXT: Eric is kind.\nFOL: all x. (Kind(x) -> -NamedCharlie(x))\nTEXT: He is also very cold and blue.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: Fred seems to be round.\nFOL: all x. (Round(x) -> -NamedCharlie(x))\nTEXT: Harry is green and cold too.\nFOL: all x. (Green(x) & Cold(x) & -NamedCharlie(x))\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> -NamedCharlie(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Young(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & -NamedCharlie(x) -> -Kind(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: when x. (Blue(x) & -NamedCharlie(x) & -Kind(x) -> -Cold(x"
  ]
 },
 {
  "index": 146,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: all x. (Anne(x) -> Nice(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> Red(x))\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\nTEXT: Charlie is red.\nFOL: all x. (Charlie(x) -> Red(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If Harry is nice then Harry is big.\nFOL: all x y. (Nice(x) & Big(x) -> Harry(x))\nTEXT: All young, white people are round.\nFOL: all x y. (Young(x) & White(x) & Round(x) -> Harry(x))\nTEXT: Red people are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If Charlie is nice and Charlie is round then Charlie is red.\nFOL: all x y z. (Nice(x) & Round(x) & Harry(x) -> Red(x))\nTEXT: Rough, red people are big.\nFOL: all x y. (Red(x) & Rough(x) -> Big(x))\nTEXT: All big people are white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: Harry is not big.\nFOL: -Big(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: all x. (Anne(x) -> Nice(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> Red(x))\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\nTEXT: Charlie is red.\nFOL: all x. (Charlie(x) -> Red(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If Harry is nice then Harry is big.\nFOL: all x y. (Nice(x) & Big(x) -> Harry(x))\nTEXT: All young, white people are round.\nFOL: all x y. (Young(x) & White(x) & Round(x) -> Harry(x))\nTEXT: Red people are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If Charlie is nice and Charlie is round then Charlie is red.\nFOL: all x y. (Nice(x) & Round(x) -> Red(x) & Charlie(x))\nTEXT: Rough, red people are big.\nFOL: all x y. (Red(x) & Rough(x) -> Big(x) & Red(x))\nTEXT: All big people are white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: Harry is not big.\nFOL: -Big(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: all x. (Anne(x) -> Nice(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> Red(x))\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\nTEXT: Charlie is red.\nFOL: all x. (Charlie(x) -> Red(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If Harry is nice then Harry is big.\nFOL: all x y. (Nice(x) & Big(x) -> Harry(x))\nTEXT: All young, white people are round.\nFOL: all x y. (Young(x) & White(x) & Round(x) -> Harry(x))\nTEXT: Red people are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If Charlie is nice and Charlie is round then Charlie is red.\nFOL: all x y z. (Nice(x) & Round(x) & Harry(x) -> Red(x))\nTEXT: Rough, red people are big.\nFOL: all x y z. (Red(x) & Rough(x) & Harry(x) -> Big(x))\nTEXT: All big people are white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: Harry is not big.\nFOL: -Big(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: all x. (Anne(x) -> Nice(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> Red(x))\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\nTEXT: Charlie is red.\nFOL: all x. (Charlie(x) -> Red(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If Harry is nice then Harry is big.\nFOL: all x y. (Nice(x) & Big(x) -> Harry(x))\nTEXT: All young, white people are round.\nFOL: all x y. (Young(x) & White(x) & Round(x) -> Harry(x))\nTEXT: Red people are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If Charlie is nice and Charlie is round then Charlie is red.\nFOL: all x y z. (Nice(x) & Round(x) & Harry(x) -> Red(x))\nTEXT: Rough, red people are big.\nFOL: all x y. (Red(x) & Rough(x) -> Big(x))\nTEXT: All big people are white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: Harry is not big.\nFOL: -Big(x) -> -White(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: all x. (Anne(x) -> Nice(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> Red(x))\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\nTEXT: Charlie is red.\nFOL: all x. (Charlie(x) -> Red(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: If Harry is nice then Harry is big.\nFOL: all x y. (Nice(x) & Big(x) -> Harry(x))\nTEXT: All young, white people are round.\nFOL: all x y. (Young(x) & White(x) & Round(x) -> Harry(x))\nTEXT: Red people are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If Charlie is nice and Charlie is round then Charlie is red.\nFOL: all x y z. (Nice(x) & Round(x) & Harry(x) -> Red(x))\nTEXT: Rough, red people are big.\nFOL: all x y z. (Red(x) & Rough(x) & Harry(x) -> Big(x))\nTEXT: All big people are white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: Harry is not big.\nFOL: -Big(x) -> -White(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 147,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> Big(x))\nTEXT: Dave is cold.\nFOL: all x. (Dave(x) -> -Cold(x))\nTEXT: Dave is furry.\nFOL: all x. (Dave(x) -> Furry(x))\nTEXT: Dave is not red.\nFOL: -RedDave(x)\nTEXT: Dave is round.\nFOL: all x. (Dave(x) -> Round(x))\nTEXT: Fiona is not red.\nFOL: -RedFiona(x)\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: If someone is red and not blue then they are big.\nFOL: all x y. (Red(x) & -Blue(x) & Big(x) -> HigherRank(x, y))\nTEXT: All furry people are big.\nFOL: all x. (Furry(x) -> Big(x))\nTEXT: If someone is kind and not red then they are furry.\nFOL: all x y. (Kind(x) & -Red(x) & Furry(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x y. (Red(x) & -Kind(x) & -Cold(x) -> HigherRank(x, y))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: Dave is not red.\nFOL: -RedDave(x)\nTEXT: Fiona is not red.\nFOL: -RedFiona(x)\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x y. (Red(x) & -Kind(x) & -Cold(x) -> HigherRank(x, y))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: Dave is not red.\nFOL: -RedDave(x)\nTEXT: Fiona is not red.\nFOL: -RedFiona(x)\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x y. (Red(x) & -Kind(x) & -Cold(x) -> HigherRank(x, y))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: Dave is not red.\nFOL: -RedDave(x)\nTEXT: Fiona is not red.\nFOL: -RedFiona(x)\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x y. (Red(x) & -Kind(x) & -Cold(x) -> HigherRank(x, y))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: Dave is not red.\nFOL: -RedDave(x)\nTEXT: Fiona is not red.\nFOL: -RedFiona(x)\nTEXT: If Fiona is round then",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> Big(x))\nTEXT: Dave is cold.\nFOL: all x. (Dave(x) -> Cold(x))\nTEXT: Dave is furry.\nFOL: all x. (Dave(x) -> Furry(x))\nTEXT: Dave is not red.\nFOL: -RedDave(x)\nTEXT: Dave is round.\nFOL: all x. (Dave(x) -> Round(x))\nTEXT: Fiona is not red.\nFOL: -RedFiona(x)\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: If someone is red and not blue then they are big.\nFOL: all x y. (Red(x) & -Blue(x) & Big(x) -> HigherRank(x, y))\nTEXT: All furry people are big.\nFOL: all x. (Furry(x) -> Big(x))\nTEXT: If someone is kind and not red then they are furry.\nFOL: all x y. (Kind(x) & -Red(x) & Furry(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x y. (Red(x) & -Kind(x) & Cold(x) -> HigherRank(x, y))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: Dave is not red.\nFOL: -RedDave(x)\nTEXT: Fiona is not red.\nFOL: -RedFiona(x)\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x y. (Red(x) & -Kind(x) & Cold(x) -> HigherRank(x, y))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: Dave is not red.\nFOL: -RedDave(x)\nTEXT: Fiona is not red.\nFOL: -RedFiona(x)\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x y. (Red(x) & -Kind(x) & Cold(x) -> HigherRank(x, y))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: Dave is not red.\nFOL: -RedDave(x)\nTEXT: Fiona is not red.\nFOL: -RedFiona(x)\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x y. (Red(x) & -Kind(x) & Cold(x) -> HigherRank(x, y))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: Dave is not red.\nFOL: -RedDave(x)\nTEXT: Fiona is not red.\nFOL: -RedFiona(x)\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> Big(x))\nTEXT: Dave is cold.\nFOL: all x. (Dave(x) -> -Cold(x))\nTEXT: Dave is furry.\nFOL: all x. (Dave(x) -> Furry(x))\nTEXT: Dave is not red.\nFOL: -RedDave(x)\nTEXT: Dave is round.\nFOL: all x. (Dave(x) -> Round(x))\nTEXT: Fiona is not red.\nFOL: -RedFiona(x)\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: If someone is red and not blue then they are big.\nFOL: all x y. (Red(x) & -Blue(x) & Big(x) -> HigherRank(x, y))\nTEXT: All furry people are big.\nFOL: all x. (Furry(x) -> Big(x))\nTEXT: If someone is kind and not red then they are furry.\nFOL: all x y. (Kind(x) & -Red(x) & Furry(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x y. (Red(x) & -Kind(x) & -Cold(x) -> HigherRank(x, y))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: Dave is not red.\nFOL: -RedDave(x)\nTEXT: Fiona is not red.\nFOL: -RedFiona(x)\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x y. (Red(x) & -Kind(x) & -Cold(x) -> HigherRank(x, y))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: Dave is not red.\nFOL: -RedDave(x)\nTEXT: Fiona is not red.\nFOL: -RedFiona(x)\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x y. (Red(x) & -Kind(x) & -Cold(x) -> HigherRank(x, y))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: Dave is not red.\nFOL: -RedDave(x)\nTEXT: Fiona is not red.\nFOL: -RedFiona(x)\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x y. (Red(x) & -Kind(x) & -Cold(x) -> HigherRank(x, y))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: Dave is not red.\nFOL: -RedDave(x)\nTEXT: Fiona is not red.\nFOL: -RedFiona(x)",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> Big(x))\nTEXT: Dave is cold.\nFOL: all x. (Dave(x) -> -Cold(x))\nTEXT: Dave is furry.\nFOL: all x. (Dave(x) -> Furry(x))\nTEXT: Dave is not red.\nFOL: -RedDave(x)\nTEXT: Dave is round.\nFOL: all x. (Dave(x) -> Round(x))\nTEXT: Fiona is not red.\nFOL: -RedFiona(x)\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: If someone is red and not blue then they are big.\nFOL: all x y. (Red(x) & -Blue(x) & Big(x) -> HigherRank(x, y))\nTEXT: All furry people are big.\nFOL: all x. (Furry(x) -> Big(x))\nTEXT: If someone is kind and not red then they are furry.\nFOL: all x y. (Kind(x) & -Red(x) & Furry(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x y. (Red(x) & -Kind(x) & -Cold(x) -> HigherRank(x, y))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: Dave is not red.\nFOL: -RedDave(x)\nTEXT: Fiona is not red.\nFOL: -RedFiona(x)\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x y. (Red(x) & -Kind(x) & -Cold(x) -> HigherRank(x, y))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: Dave is not red.\nFOL: -RedDave(x)\nTEXT: Fiona is not red.\nFOL: -RedFiona(x)\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x y. (Red(x) & -Kind(x) & -Cold(x) -> HigherRank(x, y))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: Dave is not red.\nFOL: -RedDave(x)\nTEXT: Fiona is not red.\nFOL: -RedFiona(x)\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x y. (Red(x) & -Kind(x) & -Cold(x) -> HigherRank(x, y))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> -Cold(x))",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: all x. (Dave(x) -> Big(x))\nTEXT: Dave is cold.\nFOL: all x. (Dave(x) -> -Cold(x))\nTEXT: Dave is furry.\nFOL: all x. (Dave(x) -> Furry(x))\nTEXT: Dave is not red.\nFOL: -RedDave(x)\nTEXT: Dave is round.\nFOL: all x. (Dave(x) -> Round(x))\nTEXT: Fiona is not red.\nFOL: -RedFiona(x)\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> Round(x))\nTEXT: If someone is red and not blue then they are big.\nFOL: all x y. (Red(x) & -Blue(x) & Big(x) -> HigherRank(x, y))\nTEXT: All furry people are big.\nFOL: all x. (Furry(x) -> Big(x))\nTEXT: If someone is kind and not red then they are furry.\nFOL: all x y. (Kind(x) & -Red(x) & Furry(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) & Fiona(x) -> HigherRank(x, y))\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x y. (Red(x) & -Kind(x) & -Cold(x) -> HigherRank(x, y))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: Dave is not red.\nFOL: -RedDave(x)\nTEXT: Fiona is not red.\nFOL: -RedFiona(x)\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) -> HigherRank(x, y))\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x y. (Red(x) & -Kind(x) & -Cold(x) -> HigherRank(x, y))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: Dave is not red.\nFOL: -RedDave(x)\nTEXT: Fiona is not red.\nFOL: -RedFiona(x)\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) -> HigherRank(x, y))\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x y. (Red(x) & -Kind(x) & -Cold(x) -> HigherRank(x, y))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: Dave is not red.\nFOL: -RedDave(x)\nTEXT: Fiona is not red.\nFOL: -RedFiona(x)\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) -> HigherRank(x, y))\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) -> HigherRank(x, y))\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x y. (Red(x) & -Kind(x) & -Cold(x) -> HigherRank(x, y))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: Dave is not red.\nFOL: -RedDave(x)\nTEXT: Fiona is not red.\nFOL: -RedFiona(x)\nTEXT: If Fiona is round then Fiona is cold.\nFOL: all x y. (Round(x) & -Cold(x) -> HigherRank(x"
  ]
 },
 {
  "index": 148,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is kind.\nFOL: all x. (Anne(x) -> Kind(x))\nTEXT: Fiona is blue.\nFOL: all x. (Fiona(x) -> Blue(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is not round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> -Young(x))\nTEXT: Gary is blue.\nFOL: all x. (Gary(x) -> Blue(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> Nice(x))\nTEXT: Gary is quiet.\nFOL: all x. (Gary(x) -> -Quiet(x))\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> -Round(x))\nTEXT: If something is blue then it is white.\nFOL: all x y. (Blue(x) & White(x) -> x -> y)\nTEXT: Nice, quiet things are white.\nFOL: all x y. (Nice(x) & Quiet(x) -> White(x))\nTEXT: If something is blue then it is white.\nFOL: all x y. (Blue(x) & White(x) -> x -> y)\nTEXT: If something is round then it is white.\nFOL: all x y. (Round(x) & White(x) -> x -> y)\nTEXT: All white, quiet things are kind.\nFOL: all x y. (White(x) & Quiet(x) & Nice(x) -> Kind(x))\nTEXT: If Gary is kind then Gary is not young.\nFOL: all x y. (Gary(x) -> Kind(x) & Gary(x) -> -Young(x))\nTEXT: Anne is not blue.\nFOL: -Blue(anne)\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Anne is kind.\nFOL: all x. (Anne(x) -> Kind(x))\n\nTEXT: Fiona is blue.\nFOL: all x. (Fiona(x) -> Blue(x))\n\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\n\nTEXT: Fiona is not round.\nFOL: all x. (Fiona(x) -> -Round(x))\n\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\n\nTEXT: Gary is blue.\nFOL: all x. (Gary(x) -> Blue(x))\n\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> Nice(x))\n\nTEXT: Gary is quiet.\nFOL: all x. (Gary(x) -> Quiet(x))\n\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\n\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\n\nTEXT: If something is blue then it is white.\nFOL: all x y. (Blue(x) & White(x) -> x -> y)\n\nTEXT: Nice, quiet things are white.\nFOL: all x y. (Nice(x) & Quiet(x) & White(x) -> x)\n\nTEXT: If something is blue then it is white.\nFOL: all x y. (Blue(x) & White(x) -> x)\n\nTEXT: If something is round then it is white.\nFOL: all x y. (Round(x) & White(x) -> x)\n\nTEXT: All white, quiet things are kind.\nFOL: all x y. (White(x) & Quiet(x) & Kind(x) -> x)\n\nTEXT: If Gary is kind then Gary is not young.\nFOL: all x y. (Gary(x) -> Kind(x) & x -> -Young(x))\n\nTEXT: Anne is not blue.\nFOL: all x. (Anne(x) -> -Blue(x))\n\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is kind.\nFOL: all x. (Anne(x) -> Kind(x))\nTEXT: Fiona is blue.\nFOL: all x. (Fiona(x) -> Blue(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is not round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> -Young(x))\nTEXT: Gary is blue.\nFOL: all x. (Gary(x) -> Blue(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> Nice(x))\nTEXT: Gary is quiet.\nFOL: all x. (Gary(x) -> -Quiet(x))\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> -Round(x))\nTEXT: If something is blue then it is white.\nFOL: all x y. (Blue(x) & White(x) -> x -> y)\nTEXT: Nice, quiet things are white.\nFOL: all x y. (Nice(x) & Quiet(x) -> White(x))\nTEXT: If something is blue then it is white.\nFOL: all x y. (Blue(x) & White(x) -> x -> y)\nTEXT: If something is round then it is white.\nFOL: all x y. (Round(x) & White(x) -> x -> y)\nTEXT: All white, quiet things are kind.\nFOL: all x y. (White(x) & Quiet(x) & Nice(x) -> Kind(x))\nTEXT: If Gary is kind then Gary is not young.\nFOL: all x y. (Gary(x) -> Kind(x) & Gary(x) -> -Young(x))\nTEXT: Anne is not blue.\nFOL: -Blue(Anne)\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Anne is kind.\nFOL: all x. (Anne(x) -> Kind(x))\n\nTEXT: Fiona is blue.\nFOL: all x. (Fiona(x) -> Blue(x))\n\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\n\nTEXT: Fiona is not round.\nFOL: all x. (Fiona(x) -> -Round(x))\n\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\n\nTEXT: Gary is blue.\nFOL: all x. (Gary(x) -> Blue(x))\n\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> Nice(x))\n\nTEXT: Gary is quiet.\nFOL: all x. (Gary(x) -> Quiet(x))\n\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\n\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\n\nTEXT: If something is blue then it is white.\nFOL: all x y. (Blue(x) & White(x) -> x -> y)\n\nTEXT: Nice, quiet things are white.\nFOL: all x y. (Nice(x) & Quiet(x) & White(x) -> x)\n\nTEXT: If something is blue then it is white.\nFOL: all x y. (Blue(x) & White(x) -> x)\n\nTEXT: If something is round then it is white.\nFOL: all x y. (Round(x) & White(x) -> x)\n\nTEXT: All white, quiet things are kind.\nFOL: all x y. (White(x) & Quiet(x) & Kind(x) -> x)\n\nTEXT: If Gary is kind then Gary is not young.\nFOL: all x y. (Gary(x) -> Kind(x) & x -> -Young(x))\n\nTEXT: Anne is not blue.\nFOL: all x. (Anne(x) -> NotBlue(x))\n\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Anne is kind.\nFOL: all x. (Anne(x) -> Kind(x))\n\nTEXT: Fiona is blue.\nFOL: all x. (Fiona(x) -> Blue(x))\n\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\n\nTEXT: Fiona is not round.\nFOL: all x. (Fiona(x) -> -Round(x))\n\nTEXT: Fiona is young.\nFOL: all x. (Fiona(x) -> Young(x))\n\nTEXT: Gary is blue.\nFOL: all x. (Gary(x) -> Blue(x))\n\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> Nice(x))\n\nTEXT: Gary is quiet.\nFOL: all x. (Gary(x) -> Quiet(x))\n\nTEXT: Harry is blue.\nFOL: all x. (Harry(x) -> Blue(x))\n\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\n\nTEXT: If something is blue then it is white.\nFOL: all x y. (Blue(x) & White(x) -> x -> y)\n\nTEXT: Nice, quiet things are white.\nFOL: all x y. (Nice(x) & Quiet(x) -> White(x))\n\nTEXT: If something is blue then it is white.\nFOL: all x y. (Blue(x) & White(x) -> x -> y)\n\nTEXT: If something is round then it is white.\nFOL: all x y. (Round(x) & White(x) -> x -> y)\n\nTEXT: All white, quiet things are kind.\nFOL: all x y. (White(x) & Quiet(x) & Nice(x) -> Kind(x))\n\nTEXT: If Gary is kind then Gary is not young.\nFOL: all x y. (Gary(x) -> Kind(x) & Young(x) -> -Gary(x))\n\nTEXT: Anne is not blue.\nFOL: all x. (Anne(x) -> -Blue(x))\n\n</EVALUATE>"
  ]
 },
 {
  "index": 149,
  "responses": [
   "<EVALUATE>\nTEXT: The bear needs the cat.\nFOL: all x y. (Bear(x) & Cat(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The cat needs the bear.\nFOL: all x y. (Cat(x) & Bear(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The lion chases the bear.\nFOL: all x y. (Lion(x) & Bear(y) & -Chase(x, y) -> -Chase(y, x))\nTEXT: The lion needs the bear.\nFOL: all x y. (Lion(x) & Bear(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The lion needs the cat.\nFOL: all x y. (Lion(x) & Cat(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The lion sees the bear.\nFOL: all x y. (Lion(x) & Bear(y) & -See(x, y) -> -See(y, x))\nTEXT: The lion sees the cat.\nFOL: all x y. (Lion(x) & Cat(y) & -See(x, y) -> -See(y, x))\nTEXT: If something is round and it needs the lion then the lion sees the bear.\nFOL: all x y. (Round(x) & Need(x, y) & -See(x, y) -> -See(y, x))\nTEXT: If the lion needs the bear and the lion sees the bear then the bear is blue.\nFOL: all x y. (Need(x, y) & -See(x, y) & Bear(y) -> Blue(x))\nTEXT: If the lion needs the cat and the lion sees the cat then the bear is blue.\nFOL: all x y. (Need(x, y) & -See(x, y) & Cat(y) -> Blue(x))\nTEXT: If the lion sees the bear and it is cold then it is not round.\nFOL: all x y. (See(x, y) & -Round(x) & Bear(y) -> -Round(x))\nTEXT: If something sees the lion and the lion sees the cat then the lion chases the bear.\nFOL: all x y. (See(x, y) & -Chase(x, y) & Cat(y) -> -Chase(x, y))\nTEXT: If something chases the lion then the lion does not chase the bear.\nFOL: all x y. (Chase(x, y) & -Chase(x, y) & Lion(x) -> -Chase(x, y))\nTEXT: If something sees the bear and it is cold then it is not round.\nFOL: all x y. (See(x, y) & -Round(x) & Bear(y) -> -Round(x))\nTEXT: If something needs the cat then it is round.\nFOL: all x y. (Need(x, y) & -Round(x) & Cat(y) -> Round(x))\nTEXT: If something chases the bear and the bear sees the lion then the bear chases the lion.\nFOL: all x y. (Chase(x, y) & -See(x, y) & Bear(y) -> -See(x, y))\nTEXT: The bear does not chase the lion.\nFOL: -See(lion, bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear needs the cat.\nFOL: all x y. (Bear(x) & Cat(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The cat needs the bear.\nFOL: all x y. (Cat(x) & Bear(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The lion chases the bear.\nFOL: all x y. (Lion(x) & Bear(y) & -Chase(x, y) -> -Chase(y, x))\nTEXT: The lion needs the bear.\nFOL: all x y. (Lion(x) & Bear(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The lion needs the cat.\nFOL: all x y. (Lion(x) & Cat(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The lion sees the bear.\nFOL: all x y. (Lion(x) & Bear(y) & -See(x, y) -> -See(y, x))\nTEXT: The lion sees the cat.\nFOL: all x y. (Lion(x) & Cat(y) & -See(x, y) -> -See(y, x))\nTEXT: If something is round and it needs the lion then the lion sees the bear.\nFOL: all x y. (Round(x) & Need(x, y) & -See(x, y) -> -See(y, x))\nTEXT: If the lion needs the bear and the lion sees the bear then the bear is blue.\nFOL: all x y. (Need(x, y) & -See(x, y) & Bear(y) -> Blue(x))\nTEXT: If the lion needs the cat and the lion sees the cat then the bear is blue.\nFOL: all x y. (Need(x, y) & -See(x, y) & Cat(y) -> Blue(x))\nTEXT: If the lion sees the bear and it is cold then it is not round.\nFOL: all x y. (See(x, y) & -Round(x) & Bear(y) -> -Round(x))\nTEXT: If something sees the lion and the lion sees the cat then the lion chases the bear.\nFOL: all x y. (See(x, y) & -Chase(x, y) & Cat(y) -> -Chase(x, y))\nTEXT: If something chases the lion then the lion does not chase the bear.\nFOL: all x y. (Chase(x, y) & -Chase(x, y) & Lion(x) -> -Chase(x, y))\nTEXT: If something sees the bear and it is cold then it is not round.\nFOL: all x y. (See(x, y) & -Round(x) & Bear(y) -> -Round(x))\nTEXT: If something needs the cat then it is round.\nFOL: all x y. (Need(x, y) & -Round(x) & Cat(y) -> Round(x))\nTEXT: If something chases the bear and the bear sees the lion then the bear chases the lion.\nFOL: all x y. (Chase(x, y) & -See(x, y) & Bear(y) -> -See(x, y))\nTEXT: The bear does not chase the lion.\nFOL: -See(bear, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear needs the cat.\nFOL: all x y. (Bear(x) & Cat(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The cat needs the bear.\nFOL: all x y. (Cat(x) & Bear(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The lion chases the bear.\nFOL: all x y. (Lion(x) & Bear(y) & -Chase(x, y) -> -Chase(y, x))\nTEXT: The lion needs the bear.\nFOL: all x y. (Lion(x) & Bear(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The lion needs the cat.\nFOL: all x y. (Lion(x) & Cat(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The lion sees the bear.\nFOL: all x y. (Lion(x) & Bear(y) & -See(x, y) -> -See(y, x))\nTEXT: The lion sees the cat.\nFOL: all x y. (Lion(x) & Cat(y) & -See(x, y) -> -See(y, x))\nTEXT: If something is round and it needs the lion then the lion sees the bear.\nFOL: all x y. (Round(x) & Need(x, y) & -See(x, y) -> -See(y, x))\nTEXT: If the lion needs the bear and the lion sees the bear then the bear is blue.\nFOL: all x y. (Need(x, y) & -See(x, y) & Bear(x) -> Blue(x))\nTEXT: If the lion needs the cat and the lion sees the cat then the bear is blue.\nFOL: all x y. (Need(x, y) & -See(x, y) & Cat(x) -> Blue(x))\nTEXT: If the lion sees the bear and it is cold then it is not round.\nFOL: all x y. (See(x, y) & -Round(x) & Bear(x) -> -Round(y))\nTEXT: If something sees the lion and the lion sees the cat then the lion chases the bear.\nFOL: all x y. (See(x, y) & -Chase(x, y) & Cat(x) -> -Chase(y, x))\nTEXT: If something chases the lion then the lion does not chase the bear.\nFOL: all x y. (Chase(x, y) & -Chase(x, y) & Lion(x) -> -Chase(y, x))\nTEXT: If something sees the bear and it is cold then it is not round.\nFOL: all x y. (See(x, y) & -Round(x) & Bear(x) -> -Round(y))\nTEXT: If something needs the cat then it is round.\nFOL: all x y. (Need(x, y) & -Round(x) & Cat(x) -> Round(y))\nTEXT: If something chases the bear and the bear sees the lion then the bear chases the lion.\nFOL: all x y. (Chase(x, y) & -See(x, y) & Bear(x) -> -See(y, x))\nTEXT: The bear does not chase the lion.\nFOL: -See(lion, bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear needs the cat.\nFOL: all x y. (Bear(x) & Cat(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The cat needs the bear.\nFOL: all x y. (Cat(x) & Bear(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The lion chases the bear.\nFOL: all x y. (Lion(x) & Bear(y) & -Chase(x, y) -> -Chase(y, x))\nTEXT: The lion needs the bear.\nFOL: all x y. (Lion(x) & Bear(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The lion needs the cat.\nFOL: all x y. (Lion(x) & Cat(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The lion sees the bear.\nFOL: all x y. (Lion(x) & Bear(y) & -See(x, y) -> -See(y, x))\nTEXT: The lion sees the cat.\nFOL: all x y. (Lion(x) & Cat(y) & -See(x, y) -> -See(y, x))\nTEXT: If something is round and it needs the lion then the lion sees the bear.\nFOL: all x y. (Round(x) & Need(x, y) & -See(x, y) -> -See(y, x))\nTEXT: If the lion needs the bear and the lion sees the bear then the bear is blue.\nFOL: all x y. (Need(x, y) & -See(x, y) & Bear(y) -> Blue(x))\nTEXT: If the lion needs the cat and the lion sees the cat then the bear is blue.\nFOL: all x y. (Need(x, y) & -See(x, y) & Cat(y) -> Blue(x))\nTEXT: If the lion sees the bear and it is cold then it is not round.\nFOL: all x y. (See(x, y) & -Round(x) & Bear(y) -> -Round(x))\nTEXT: If something sees the lion and the lion sees the cat then the lion chases the bear.\nFOL: all x y. (See(x, y) & -Chase(x, y) & Cat(y) -> -Chase(x, y))\nTEXT: If something chases the lion then the lion does not chase the bear.\nFOL: all x y. (Chase(x, y) & -Chase(x, y) & Lion(x) -> -Chase(x, y))\nTEXT: If something sees the bear and it is cold then it is not round.\nFOL: all x y. (See(x, y) & -Round(x) & Bear(y) -> -Round(x))\nTEXT: If something needs the cat then it is round.\nFOL: all x y. (Need(x, y) & -Round(x) & Cat(y) -> Round(x))\nTEXT: If something chases the bear and the bear sees the lion then the bear chases the lion.\nFOL: all x y. (Chase(x, y) & -See(x, y) & Bear(y) -> -See(x, y))\nTEXT: The bear does not chase the lion.\nFOL: -See(lion, bear)",
   "<EVALUATE>\nTEXT: The bear needs the cat.\nFOL: all x y. (Bear(x) & Cat(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The cat needs the bear.\nFOL: all x y. (Cat(x) & Bear(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The lion chases the bear.\nFOL: all x y. (Lion(x) & Bear(y) & -Chase(x, y) -> -Chase(y, x))\nTEXT: The lion needs the bear.\nFOL: all x y. (Lion(x) & Bear(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The lion needs the cat.\nFOL: all x y. (Lion(x) & Cat(y) & -Need(x, y) -> -Need(y, x))\nTEXT: The lion sees the bear.\nFOL: all x y. (Lion(x) & Bear(y) & -See(x, y) -> -See(y, x))\nTEXT: The lion sees the cat.\nFOL: all x y. (Lion(x) & Cat(y) & -See(x, y) -> -See(y, x))\nTEXT: If something is round and it needs the lion then the lion sees the bear.\nFOL: all x y. (Round(x) & Need(x, y) & -See(x, y) -> -See(y, x))\nTEXT: If the lion needs the bear and the lion sees the bear then the bear is blue.\nFOL: all x y. (Need(x, y) & -See(x, y) & Bear(y) -> Blue(x))\nTEXT: If the lion needs the cat and the lion sees the cat then the bear is blue.\nFOL: all x y. (Need(x, y) & -See(x, y) & Cat(y) -> Blue(x))\nTEXT: If the lion sees the bear and it is cold then it is not round.\nFOL: all x y. (See(x, y) & -Round(x) & Bear(y) -> -Round(x))\nTEXT: If something sees the lion and the lion sees the cat then the lion chases the bear.\nFOL: all x y. (See(x, y) & -Chase(x, y) & Cat(y) -> -Chase(x, y))\nTEXT: If something chases the lion then the lion does not chase the bear.\nFOL: all x y. (Chase(x, y) & -Chase(x, y) & Lion(x) -> -Chase(x, y))\nTEXT: If something sees the bear and it is cold then it is not round.\nFOL: all x y. (See(x, y) & -Round(x) & Bear(y) -> -Round(x))\nTEXT: If something needs the cat then it is round.\nFOL: all x y. (Need(x, y) & -Round(x) & Cat(y) -> Round(x))\nTEXT: If something chases the bear and the bear sees the lion then the bear chases the lion.\nFOL: all x y. (Chase(x, y) & -See(x, y) & Bear(y) -> -See(x, y))\nTEXT: The bear does not chase the lion.\nFOL: -See(bear, lion)"
  ]
 },
 {
  "index": 150,
  "responses": [
   "<EVALUATE>\nTEXT: The bear does not chase the mouse.\nFOL: all x. (Bear(x) -> -ChaseMouse(x))\nTEXT: The bear eats the lion.\nFOL: all x. (Bear(x) -> EatLion(x))\nTEXT: The bear is green.\nFOL: all x. (Bear(x) -> Green(x))\nTEXT: The bear is round.\nFOL: all x. (Bear(x) -> Round(x))\nTEXT: The bear is young.\nFOL: all x. (Bear(x) -> Young(x))\nTEXT: The bear does not need the mouse.\nFOL: all x. (Bear(x) -> -NeedMouse(x))\nTEXT: The lion does not chase the mouse.\nFOL: all x. (Lion(x) -> -ChaseMouse(x))\nTEXT: The lion eats the tiger.\nFOL: all x. (Lion(x) -> EatTiger(x))\nTEXT: The mouse chases the bear.\nFOL: all x. (Mouse(x) -> ChaseBear(x))\nTEXT: The mouse does not eat the lion.\nFOL: all x. (Mouse(x) -> -EatLion(x))\nTEXT: The mouse is young.\nFOL: all x. (Mouse(x) -> Young(x))\nTEXT: The mouse does not need the bear.\nFOL: all x. (Mouse(x) -> -NeedBear(x))\nTEXT: The mouse needs the lion.\nFOL: all x. (Mouse(x) -> NeedLion(x))\nTEXT: The tiger chases the mouse.\nFOL: all x. (Tiger(x) -> ChaseMouse(x))\nTEXT: The tiger eats the bear.\nFOL: all x. (Tiger(x) -> EatBear(x))\nTEXT: The tiger is round.\nFOL: all x. (Tiger(x) -> Round(x))\nTEXT: If the tiger eats the mouse and the mouse is young then the mouse is red.\nFOL: all x. (Tiger(x) -> EatMouse(x) & Mouse(x) -> Young(x) & Mouse(x) -> Red(x))\nTEXT: If someone is young then they need the tiger.\nFOL: all x. (Young(x) -> -NeedTiger(x))\nTEXT: If someone needs the tiger and they are not young then they are red.\nFOL: all x. (NeedTiger(x) & -Young(x) -> Red(x))\nTEXT: If someone is red then they chase the mouse.\nFOL: all x. (Red(x) -> -ChaseMouse(x))\nTEXT: If the tiger is young and the tiger is red then the tiger needs the mouse.\nFOL: all x. (Tiger(x) -> Young(x) & Tiger(x) -> Red(x) & -NeedMouse(x))\nTEXT: If someone is round then they eat the mouse.\nFOL: all x. (Round(x) -> EatMouse(x))\nTEXT: If the tiger needs the bear and the tiger does not chase the lion then the bear eats the lion.\nFOL: all x. (NeedBear(x) & -Tiger(x) -> Bear(x) -> EatLion(x))\nTEXT: If the bear is not red and the bear does not need the mouse then the bear chases the mouse.\nFOL: all x. (Bear(x) -> -Red(x) & Bear(x) -> -NeedMouse(x) -> Bear(x) -> ChaseMouse(x))\nTEXT: The bear eats the mouse.\nFOL: all x. (Bear(x) -> EatMouse(x))",
   "<EVALUATE>\nTEXT: The bear does not chase the mouse.\nFOL: all x. (Bear(x) -> -ChaseMouse(x))\nTEXT: The bear eats the lion.\nFOL: all x. (Bear(x) -> EatLion(x))\nTEXT: The bear is green.\nFOL: all x. (Bear(x) -> Green(x))\nTEXT: The bear is round.\nFOL: all x. (Bear(x) -> Round(x))\nTEXT: The bear is young.\nFOL: all x. (Bear(x) -> Young(x))\nTEXT: The bear does not need the mouse.\nFOL: all x. (Bear(x) -> -NeedMouse(x))\nTEXT: The lion does not chase the mouse.\nFOL: all x. (Lion(x) -> -ChaseMouse(x))\nTEXT: The lion eats the tiger.\nFOL: all x. (Lion(x) -> EatTiger(x))\nTEXT: The mouse chases the bear.\nFOL: all x. (Mouse(x) -> ChaseBear(x))\nTEXT: The mouse does not eat the lion.\nFOL: all x. (Mouse(x) -> -EatLion(x))\nTEXT: The mouse is young.\nFOL: all x. (Mouse(x) -> Young(x))\nTEXT: The mouse does not need the bear.\nFOL: all x. (Mouse(x) -> -NeedBear(x))\nTEXT: The mouse needs the lion.\nFOL: all x. (Mouse(x) -> NeedLion(x))\nTEXT: The tiger chases the mouse.\nFOL: all x. (Tiger(x) -> ChaseMouse(x))\nTEXT: The tiger eats the bear.\nFOL: all x. (Tiger(x) -> EatBear(x))\nTEXT: The tiger is round.\nFOL: all x. (Tiger(x) -> Round(x))\nTEXT: If the tiger eats the mouse and the mouse is young then the mouse is red.\nFOL: all x. (Tiger(x) -> EatMouse(x) & Mouse(x) -> Young(x) & Mouse(x) -> Red(x))\nTEXT: If someone is young then they need the tiger.\nFOL: all x. (Young(x) -> -NeedTiger(x))\nTEXT: If someone needs the tiger and they are not young then they are red.\nFOL: all x. (NeedTiger(x) & -Young(x) -> Red(x))\nTEXT: If someone is red then they chase the mouse.\nFOL: all x. (Red(x) -> -ChaseMouse(x))\nTEXT: If the tiger is young and the tiger is red then the tiger needs the mouse.\nFOL: all x. (Tiger(x) -> Young(x) & Tiger(x) -> Red(x) & -NeedMouse(x))\nTEXT: If someone is round then they eat the mouse.\nFOL: all x. (Round(x) -> EatMouse(x))\nTEXT: If the tiger needs the bear and the tiger does not chase the lion then the bear eats the lion.\nFOL: all x. (NeedBear(x) & -ChaseMouse(x) & Bear(x) -> EatLion(x))\nTEXT: If the bear is not red and the bear does not need the mouse then the bear chases the mouse.\nFOL: all x. (Bear(x) -> -Red(x) & Bear(x) -> -NeedMouse(x) -> ChaseMouse(x))\nTEXT: The bear eats the mouse.\nFOL: all x. (Bear(x) -> EatMouse(x))",
   "<EVALUATE>\nTEXT: The bear does not chase the mouse.\nFOL: all x. (Bear(x) -> -ChaseMouse(x))\nTEXT: The bear eats the lion.\nFOL: all x. (Bear(x) -> EatLion(x))\nTEXT: The bear is green.\nFOL: all x. (Bear(x) -> Green(x))\nTEXT: The bear is round.\nFOL: all x. (Bear(x) -> Round(x))\nTEXT: The bear is young.\nFOL: all x. (Bear(x) -> Young(x))\nTEXT: The bear does not need the mouse.\nFOL: all x. (Bear(x) -> -NeedMouse(x))\nTEXT: The lion does not chase the mouse.\nFOL: all x. (Lion(x) -> -ChaseMouse(x))\nTEXT: The lion eats the tiger.\nFOL: all x. (Lion(x) -> EatTiger(x))\nTEXT: The mouse chases the bear.\nFOL: all x. (Mouse(x) -> ChaseBear(x))\nTEXT: The mouse does not eat the lion.\nFOL: all x. (Mouse(x) -> -EatLion(x))\nTEXT: The mouse is young.\nFOL: all x. (Mouse(x) -> Young(x))\nTEXT: The mouse does not need the bear.\nFOL: all x. (Mouse(x) -> -NeedBear(x))\nTEXT: The mouse needs the lion.\nFOL: all x. (Mouse(x) -> NeedLion(x))\nTEXT: The tiger chases the mouse.\nFOL: all x. (Tiger(x) -> ChaseMouse(x))\nTEXT: The tiger eats the bear.\nFOL: all x. (Tiger(x) -> EatBear(x))\nTEXT: The tiger is round.\nFOL: all x. (Tiger(x) -> Round(x))\nTEXT: If the tiger eats the mouse and the mouse is young then the mouse is red.\nFOL: all x. (Tiger(x) -> EatMouse(x) & Mouse(x) -> Young(x) & Mouse(x) -> Red(x))\nTEXT: If someone is young then they need the tiger.\nFOL: all x. (Young(x) -> -NeedTiger(x))\nTEXT: If someone needs the tiger and they are not young then they are red.\nFOL: all x. (NeedTiger(x) & -Young(x) -> Red(x))\nTEXT: If someone is red then they chase the mouse.\nFOL: all x. (Red(x) -> -ChaseMouse(x))\nTEXT: If the tiger is young and the tiger is red then the tiger needs the mouse.\nFOL: all x. (Tiger(x) -> Young(x) & Tiger(x) -> Red(x) & -NeedMouse(x))\nTEXT: If someone is round then they eat the mouse.\nFOL: all x. (Round(x) -> EatMouse(x))\nTEXT: If the tiger needs the bear and the tiger does not chase the lion then the bear eats the lion.\nFOL: all x. (NeedBear(x) & -Tiger(x) -> Bear(x) -> EatLion(x))\nTEXT: If the bear is not red and the bear does not need the mouse then the bear chases the mouse.\nFOL: all x. (Bear(x) -> -Red(x) & Bear(x) -> -NeedMouse(x) -> Bear(x) -> ChaseMouse(x))\nTEXT: The bear eats the mouse.\nFOL: all x. (Bear(x) -> EatMouse(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear does not chase the mouse.\nFOL: all x. (Bear(x) -> -ChaseMouse(x))\nTEXT: The bear eats the lion.\nFOL: all x. (Bear(x) -> EatLion(x))\nTEXT: The bear is green.\nFOL: all x. (Bear(x) -> Green(x))\nTEXT: The bear is round.\nFOL: all x. (Bear(x) -> Round(x))\nTEXT: The bear is young.\nFOL: all x. (Bear(x) -> Young(x))\nTEXT: The bear does not need the mouse.\nFOL: all x. (Bear(x) -> -NeedMouse(x))\nTEXT: The lion does not chase the mouse.\nFOL: all x. (Lion(x) -> -ChaseMouse(x))\nTEXT: The lion eats the tiger.\nFOL: all x. (Lion(x) -> EatTiger(x))\nTEXT: The mouse chases the bear.\nFOL: all x. (Mouse(x) -> ChaseBear(x))\nTEXT: The mouse does not eat the lion.\nFOL: all x. (Mouse(x) -> -EatLion(x))\nTEXT: The mouse is young.\nFOL: all x. (Mouse(x) -> Young(x))\nTEXT: The mouse does not need the bear.\nFOL: all x. (Mouse(x) -> -NeedBear(x))\nTEXT: The mouse needs the lion.\nFOL: all x. (Mouse(x) -> NeedLion(x))\nTEXT: The tiger chases the mouse.\nFOL: all x. (Tiger(x) -> -ChaseMouse(x))\nTEXT: The tiger eats the bear.\nFOL: all x. (Tiger(x) -> EatBear(x))\nTEXT: The tiger is round.\nFOL: all x. (Tiger(x) -> Round(x))\nTEXT: If the tiger eats the mouse and the mouse is young then the mouse is red.\nFOL: all x. (Tiger(x) -> EatMouse(x) & Mouse(x) -> Young(x) & Mouse(x) -> Red(x))\nTEXT: If someone is young then they need the tiger.\nFOL: all x. (Young(x) -> -NeedTiger(x))\nTEXT: If someone needs the tiger and they are not young then they are red.\nFOL: all x. (NeedTiger(x) & -Young(x) -> Red(x))\nTEXT: If someone is red then they chase the mouse.\nFOL: all x. (Red(x) -> -ChaseMouse(x))\nTEXT: If the tiger is young and the tiger is red then the tiger needs the mouse.\nFOL: all x. (Tiger(x) -> Young(x) & Tiger(x) -> Red(x) & -NeedMouse(x))\nTEXT: If someone is round then they eat the mouse.\nFOL: all x. (Round(x) -> EatMouse(x))\nTEXT: If the tiger needs the bear and the tiger does not chase the lion then the bear eats the lion.\nFOL: all x. (NeedBear(x) & -Tiger(x) -> Bear(x) -> EatLion(x))\nTEXT: If the bear is not red and the bear does not need the mouse then the bear chases the mouse.\nFOL: all x. (Bear(x) -> -Red(x) & Bear(x) -> -NeedMouse(x) -> Bear(x) -> ChaseMouse(x))\nTEXT: The bear eats the mouse.\nFOL: all x. (Bear(x) -> EatMouse(x))",
   "<EVALUATE>\nTEXT: The bear does not chase the mouse.\nFOL: all x. (Bear(x) -> -ChaseMouse(x))\nTEXT: The bear eats the lion.\nFOL: all x. (Bear(x) -> EatLion(x))\nTEXT: The bear is green.\nFOL: all x. (Bear(x) -> Green(x))\nTEXT: The bear is round.\nFOL: all x. (Bear(x) -> Round(x))\nTEXT: The bear is young.\nFOL: all x. (Bear(x) -> Young(x))\nTEXT: The bear does not need the mouse.\nFOL: all x. (Bear(x) -> -NeedMouse(x))\nTEXT: The lion does not chase the mouse.\nFOL: all x. (Lion(x) -> -ChaseMouse(x))\nTEXT: The lion eats the tiger.\nFOL: all x. (Lion(x) -> EatTiger(x))\nTEXT: The mouse chases the bear.\nFOL: all x. (Mouse(x) -> ChaseBear(x))\nTEXT: The mouse does not eat the lion.\nFOL: all x. (Mouse(x) -> -EatLion(x))\nTEXT: The mouse is young.\nFOL: all x. (Mouse(x) -> Young(x))\nTEXT: The mouse does not need the bear.\nFOL: all x. (Mouse(x) -> -NeedBear(x))\nTEXT: The mouse needs the lion.\nFOL: all x. (Mouse(x) -> NeedLion(x))\nTEXT: The tiger chases the mouse.\nFOL: all x. (Tiger(x) -> -ChaseMouse(x))\nTEXT: The tiger eats the bear.\nFOL: all x. (Tiger(x) -> EatBear(x))\nTEXT: The tiger is round.\nFOL: all x. (Tiger(x) -> Round(x))\nTEXT: If the tiger eats the mouse and the mouse is young then the mouse is red.\nFOL: all x. (Tiger(x) -> EatMouse(x) & Mouse(x) -> Young(x) & Mouse(x) -> Red(x))\nTEXT: If someone is young then they need the tiger.\nFOL: all x. (Young(x) -> -NeedTiger(x))\nTEXT: If someone needs the tiger and they are not young then they are red.\nFOL: all x. (NeedTiger(x) & -Young(x) -> Red(x))\nTEXT: If someone is red then they chase the mouse.\nFOL: all x. (Red(x) -> -ChaseMouse(x))\nTEXT: If the tiger is young and the tiger is red then the tiger needs the mouse.\nFOL: all x. (Tiger(x) -> Young(x) & Tiger(x) -> Red(x) & -NeedMouse(x))\nTEXT: If someone is round then they eat the mouse.\nFOL: all x. (Round(x) -> EatMouse(x))\nTEXT: If the tiger needs the bear and the tiger does not chase the lion then the bear eats the lion.\nFOL: all x. (NeedBear(x) & -ChaseMouse(x) & Bear(x) -> EatLion(x))\nTEXT: If the bear is not red and the bear does not need the mouse then the bear chases the mouse.\nFOL: all x. (Bear(x) -> -Red(x) & Bear(x) -> -NeedMouse(x) -> ChaseMouse(x))\nTEXT: The bear eats the mouse.\nFOL: all x. (Bear(x) -> EatMouse(x))"
  ]
 },
 {
  "index": 151,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & -Chase(x, y) -> x == y)\nTEXT: The bald eagle needs the cat.\nFOL: all x y. (BaldEagle(x) & Cat(y) & -Need(x, y) -> x == y)\nTEXT: The bald eagle needs the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & -Need(x, y) -> x == y)\nTEXT: The bald eagle visits the cat.\nFOL: all x y. (BaldEagle(x) & Cat(y) & -Visit(x, y) -> x == y)\nTEXT: The cat is big.\nFOL: all x y. (Cat(x) & Big(y) & x == y)\nTEXT: The cat is kind.\nFOL: all x y. (Cat(x) & Kind(y) & x == y)\nTEXT: The cat needs the bald eagle.\nFOL: all x y. (Cat(x) & BaldEagle(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & Big(y) & x == y)\nTEXT: The rabbit is cold.\nFOL: all x y. (Rabbit(x) & Cold(y) & x == y)\nTEXT: The rabbit needs the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit visits the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & -Visit(x, y) -> x == y)\nTEXT: The cat is big.\nFOL: all x y. (Cat(x) & Big(y) & x == y)\nTEXT: The cat is kind.\nFOL: all x y. (Cat(x) & Kind(y) & x == y)\nTEXT: The cat needs the bald eagle.\nFOL: all x y. (Cat(x) & BaldEagle(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & Big(y) & x == y)\nTEXT: The rabbit is cold.\nFOL: all x y. (Rabbit(x) & Cold(y) & x == y)\nTEXT: The rabbit needs the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit visits the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & -Visit(x, y) -> x == y)\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Visit(x, y) -> x == y)\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x y. (Something(x) & Cat(y) & -Visit(x, y) & -Need(x, y) -> x == y)\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x y. (Something(x) & Rabbit(y) & -Visit(x, y) & -Visit(y, x) -> x == y)\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x y. (Something(x) & Cat(y) & -Visit(x, y) & -Visit(y, x) & -Visit(x, y) -> x == y)\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x y. (Something(x) & Cat(y) & -Need(x, y) & -Need(y, x) -> x == y)\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x y. (Something(x) & BaldEagle(y) & -Need(x, y) & -Need(y, x) -> x == y)\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: all x y. (Rabbit(x) & Kind(y) & -Need(x, y) & -Need(y, x) -> x == y)\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x y. (Something(x) & Kind(y) & -Need(x, y) & -Need(y, x) -> x == y)\nTEXT: If something needs the rabbit then it visits the rabbit.\nF",
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & -Chase(x, y) -> x == y)\nTEXT: The bald eagle needs the cat.\nFOL: all x y. (BaldEagle(x) & Cat(y) & -Need(x, y) -> x == y)\nTEXT: The bald eagle needs the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & -Need(x, y) -> x == y)\nTEXT: The bald eagle visits the cat.\nFOL: all x y. (BaldEagle(x) & Cat(y) & -Visit(x, y) -> x == y)\nTEXT: The cat is big.\nFOL: all x y. (Cat(x) & Big(y) & x == y)\nTEXT: The cat is kind.\nFOL: all x y. (Cat(x) & Kind(y) & x == y)\nTEXT: The cat needs the bald eagle.\nFOL: all x y. (Cat(x) & BaldEagle(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & Big(y) & x == y)\nTEXT: The rabbit is cold.\nFOL: all x y. (Rabbit(x) & Cold(y) & x == y)\nTEXT: The rabbit needs the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit visits the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & -Visit(x, y) -> x == y)\nTEXT: The cat is big.\nFOL: all x y. (Cat(x) & Big(y) & x == y)\nTEXT: The cat is kind.\nFOL: all x y. (Cat(x) & Kind(y) & x == y)\nTEXT: The cat needs the bald eagle.\nFOL: all x y. (Cat(x) & BaldEagle(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & Big(y) & x == y)\nTEXT: The rabbit is cold.\nFOL: all x y. (Rabbit(x) & Cold(y) & x == y)\nTEXT: The rabbit needs the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit visits the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & -Visit(x, y) -> x == y)\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Visit(x, y) -> x == y)\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x y. (Something(x) & Cat(y) & -Visit(x, y) & -Need(x, y) -> x == y)\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x y. (Something(x) & Rabbit(y) & -Visit(x, y) & -Visit(y, x) -> x == y)\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x y. (Something(x) & Cat(y) & -Visit(x, y) & -Visit(y, x) & -Visit(x, y) -> x == y)\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x y. (Something(x) & Cat(y) & -Need(x, y) & -Need(y, x) -> x == y)\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x y. (Something(x) & BaldEagle(y) & -Need(x, y) & -Need(y, x) -> x == y)\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: all x y. (Rabbit(x) & Kind(y) & Cat(y) & -Need(x, y) & -Need(y, x) -> x == y)\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x y. (Something(x) & Kind(y) & Rabbit(y) & -Need(x, y) & -Need(y, x) -> x == y)\nTEXT: If something needs the",
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & -Chase(x, y) -> x == y)\nTEXT: The bald eagle needs the cat.\nFOL: all x y. (BaldEagle(x) & Cat(y) & -Need(x, y) -> x == y)\nTEXT: The bald eagle needs the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & -Need(x, y) -> x == y)\nTEXT: The bald eagle visits the cat.\nFOL: all x y. (BaldEagle(x) & Cat(y) & -Visit(x, y) -> x == y)\nTEXT: The cat is big.\nFOL: all x y. (Cat(x) & Big(y) & x == y)\nTEXT: The cat is kind.\nFOL: all x y. (Cat(x) & Kind(y) & x == y)\nTEXT: The cat needs the bald eagle.\nFOL: all x y. (Cat(x) & BaldEagle(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & Big(y) & x == y)\nTEXT: The rabbit is cold.\nFOL: all x y. (Rabbit(x) & Cold(y) & x == y)\nTEXT: The rabbit needs the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit visits the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & -Visit(x, y) -> x == y)\nTEXT: The cat is big.\nFOL: all x y. (Cat(x) & Big(y) & x == y)\nTEXT: The cat is kind.\nFOL: all x y. (Cat(x) & Kind(y) & x == y)\nTEXT: The cat needs the bald eagle.\nFOL: all x y. (Cat(x) & BaldEagle(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & Big(y) & x == y)\nTEXT: The rabbit is cold.\nFOL: all x y. (Rabbit(x) & Cold(y) & x == y)\nTEXT: The rabbit needs the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit visits the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & -Visit(x, y) -> x == y)\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Visit(x, y) -> x == y)\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x y. (Something(x) & Cat(y) & -Visit(x, y) & -Need(x, y) -> x == y)\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x y. (Something(x) & Rabbit(y) & -Visit(x, y) & -Visit(y, x) -> y == x)\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x y. (Something(x) & Cat(y) & -Visit(x, y) & -Visit(y, x) & -Visit(x, y) -> y == x)\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x y. (Something(x) & Cat(y) & -Need(x, y) -> -Need(y, x))\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x y. (Something(x) & BaldEagle(y) & -Need(x, y) -> -Visit(x, y))\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: all x y. (Rabbit(x) & Kind(y) & -Need(x, y) & -Need(y, x) -> -Need(x, y))\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x y. (Something(x) & Kind(y) & -Need(x, y) & -Need(y, x) -> -Visit(x, y))\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x y.",
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & -Chase(x, y) -> x == y)\nTEXT: The bald eagle needs the cat.\nFOL: all x y. (BaldEagle(x) & Cat(y) & -Need(x, y) -> x == y)\nTEXT: The bald eagle needs the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & -Need(x, y) -> x == y)\nTEXT: The bald eagle visits the cat.\nFOL: all x y. (BaldEagle(x) & Cat(y) & -Visit(x, y) -> x == y)\nTEXT: The cat is big.\nFOL: all x y. (Cat(x) & Big(y) & x == y)\nTEXT: The cat is kind.\nFOL: all x y. (Cat(x) & Kind(y) & x == y)\nTEXT: The cat needs the bald eagle.\nFOL: all x y. (Cat(x) & BaldEagle(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & Big(y) & x == y)\nTEXT: The rabbit is cold.\nFOL: all x y. (Rabbit(x) & Cold(y) & x == y)\nTEXT: The rabbit needs the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit visits the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & -Visit(x, y) -> x == y)\nTEXT: The cat is big.\nFOL: all x y. (Cat(x) & Big(y) & x == y)\nTEXT: The cat is kind.\nFOL: all x y. (Cat(x) & Kind(y) & x == y)\nTEXT: The cat needs the bald eagle.\nFOL: all x y. (Cat(x) & BaldEagle(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & Big(y) & x == y)\nTEXT: The rabbit is cold.\nFOL: all x y. (Rabbit(x) & Cold(y) & x == y)\nTEXT: The rabbit needs the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit visits the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & -Visit(x, y) -> x == y)\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Visit(x, y) -> x == y)\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x y. (Something(x) & Cat(y) & -Visit(x, y) & -Need(x, y) -> x == y)\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x y. (Something(x) & Rabbit(y) & -Visit(x, y) & -Visit(y, x) -> x == y)\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x y. (Something(x) & Cat(y) & -Visit(x, y) & -Visit(y, x) & -Visit(x, y) -> x == y)\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x y. (Something(x) & Cat(y) & -Need(x, y) & -Need(y, x) -> x == y)\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x y. (Something(x) & BaldEagle(y) & -Need(x, y) & -Need(y, x) -> x == y)\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: all x y. (Rabbit(x) & Kind(y) & -Need(x, y) & -Need(y, x) & -Need(x, y) -> x == y)\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x y. (Something(x) & Kind(y) & -Need(x, y) & -Need(y, x) & -Visit(x, y) -> x == y)\n",
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & -Chase(x, y) -> x == y)\nTEXT: The bald eagle needs the cat.\nFOL: all x y. (BaldEagle(x) & Cat(y) & -Need(x, y) -> x == y)\nTEXT: The bald eagle needs the rabbit.\nFOL: all x y. (BaldEagle(x) & Rabbit(y) & -Need(x, y) -> x == y)\nTEXT: The bald eagle visits the cat.\nFOL: all x y. (BaldEagle(x) & Cat(y) & -Visit(x, y) -> x == y)\nTEXT: The cat is big.\nFOL: all x y. (Cat(x) & Big(y) & x == y)\nTEXT: The cat is kind.\nFOL: all x y. (Cat(x) & Kind(y) & x == y)\nTEXT: The cat needs the bald eagle.\nFOL: all x y. (Cat(x) & BaldEagle(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & Big(y) & x == y)\nTEXT: The rabbit is cold.\nFOL: all x y. (Rabbit(x) & Cold(y) & x == y)\nTEXT: The rabbit needs the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit visits the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & -Visit(x, y) -> x == y)\nTEXT: The cat is big.\nFOL: all x y. (Cat(x) & Big(y) & x == y)\nTEXT: The cat is kind.\nFOL: all x y. (Cat(x) & Kind(y) & x == y)\nTEXT: The cat needs the bald eagle.\nFOL: all x y. (Cat(x) & BaldEagle(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit is big.\nFOL: all x y. (Rabbit(x) & Big(y) & x == y)\nTEXT: The rabbit is cold.\nFOL: all x y. (Rabbit(x) & Cold(y) & x == y)\nTEXT: The rabbit needs the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Need(x, y) -> x == y)\nTEXT: The rabbit visits the bald eagle.\nFOL: all x y. (Rabbit(x) & BaldEagle(y) & -Visit(x, y) -> x == y)\nTEXT: The rabbit visits the cat.\nFOL: all x y. (Rabbit(x) & Cat(y) & -Visit(x, y) -> x == y)\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x y. (Something(x) & Cat(y) & -Visit(x, y) & -Need(x, y) -> x == y)\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x y. (Something(x) & Rabbit(y) & -Visit(x, y) & -Visit(y, x) -> y == x)\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x y. (Something(x) & Cat(y) & -Visit(x, y) & -Visit(y, x) & -Visit(x, y) -> y == x)\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x y. (Something(x) & Cat(y) & -Need(x, y) -> -Need(y, x))\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x y. (Something(x) & BaldEagle(y) & -Need(x, y) -> -Visit(x, y))\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: all x y. (Rabbit(x) & Kind(y) & -Need(x, y) & -Need(y, x) -> -Need(x, y))\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x y. (Something(x) & Kind(y) & -Need(x, y) & -Need(y, x) -> -Visit(y, x))\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x y."
  ]
 },
 {
  "index": 152,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is red.\nFOL: all x. (Anne(x) -> Red(x))\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) -> Kind(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> Round(x))\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: If Anne is kind then Anne is red.\nFOL: all x y. (Kind(x) & Anne(x) -> Red(x))\nTEXT: Red, smart people are white.\nFOL: all x y. (Red(x) & Smart(x) -> White(x))\nTEXT: If Bob is white then Bob is kind.\nFOL: all x y. (White(x) & Kind(x) -> Bob(x))\nTEXT: If someone is big and red then they are kind.\nFOL: all x y z. (Big(x) & Red(x) & Kind(x) -> Bob(x))\nTEXT: All white, round people are smart.\nFOL: all x y z. (White(x) & Round(x) & Smart(x) -> Bob(x))\nTEXT: All kind people are round.\nFOL: all x y z. (Kind(x) & Round(x) -> Bob(x))\nTEXT: All round, blue people are white.\nFOL: all x y z. (Round(x) & Blue(x) & White(x) -> Bob(x))\nTEXT: Big people are blue.\nFOL: all x. (Big(x) -> Blue(x))\nTEXT: Anne is white.\nFOL: all x. (Anne(x) -> White(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is red.\nFOL: all x. (Anne(x) -> Red(x))\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) -> Kind(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> Round(x))\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: If Anne is kind then Anne is red.\nFOL: all x y. (Kind(x) & Anne(x) -> Red(x))\nTEXT: Red, smart people are white.\nFOL: all x y. (Red(x) & Smart(x) -> White(x))\nTEXT: If Bob is white then Bob is kind.\nFOL: all x y. (White(x) & Bob(x) -> Kind(x))\nTEXT: If someone is big and red then they are kind.\nFOL: all x y. (Big(x) & Red(x) & Kind(x))\nTEXT: All white, round people are smart.\nFOL: all x y. (White(x) & Round(x) & Smart(x))\nTEXT: All kind people are round.\nFOL: all x y. (Kind(x) & Round(x) -> Round(x))\nTEXT: All round, blue people are white.\nFOL: all x y. (Round(x) & Blue(x) & White(x))\nTEXT: Big people are blue.\nFOL: Big(x) & Blue(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is red.\nFOL: all x. (Anne(x) -> Red(x))\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) -> Kind(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> Round(x))\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: If Anne is kind then Anne is red.\nFOL: all x y. (Kind(x) & Anne(x) -> Red(x))\nTEXT: Red, smart people are white.\nFOL: all x y. (Red(x) & Smart(x) -> White(x))\nTEXT: If Bob is white then Bob is kind.\nFOL: all x y. (White(x) & Kind(x) -> Bob(x))\nTEXT: If someone is big and red then they are kind.\nFOL: all x y. (Big(x) & Red(x) & Kind(x) -> Bob(x))\nTEXT: All white, round people are smart.\nFOL: all x y. (White(x) & Round(x) & Smart(x))\nTEXT: All kind people are round.\nFOL: all x y. (Kind(x) & Round(x) -> Bob(x))\nTEXT: All round, blue people are white.\nFOL: all x y. (Round(x) & Blue(x) & White(x))\nTEXT: Big people are blue.\nFOL: all x. (Big(x) -> Blue(x))\nTEXT: Anne is white.\nFOL: all x. (Anne(x) -> White(x))",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is red.\nFOL: all x. (Anne(x) -> Red(x))\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) -> Kind(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> Round(x))\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: If Anne is kind then Anne is red.\nFOL: all x y. (Kind(x) & Anne(x) -> Red(x))\nTEXT: Red, smart people are white.\nFOL: all x y. (Red(x) & Smart(x) -> White(x))\nTEXT: If Bob is white then Bob is kind.\nFOL: all x y. (White(x) & Kind(x) -> Bob(x))\nTEXT: If someone is big and red then they are kind.\nFOL: all x y. (Big(x) & Red(x) & Kind(x) -> Bob(x))\nTEXT: All white, round people are smart.\nFOL: all x y. (White(x) & Round(x) & Smart(x))\nTEXT: All kind people are round.\nFOL: all x y. (Kind(x) & Round(x) -> Bob(x))\nTEXT: All round, blue people are white.\nFOL: all x y. (Round(x) & Blue(x) & White(x))\nTEXT: Big people are blue.\nFOL: Big(x) & Blue(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is red.\nFOL: all x. (Anne(x) -> Red(x))\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\nTEXT: Bob is kind.\nFOL: all x. (Bob(x) -> Kind(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> Round(x))\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: If Anne is kind then Anne is red.\nFOL: all x y. (Kind(x) & Anne(x) -> Red(x))\nTEXT: Red, smart people are white.\nFOL: all x y. (Red(x) & Smart(x) -> White(x))\nTEXT: If Bob is white then Bob is kind.\nFOL: all x y. (White(x) & Kind(x) -> Bob(x))\nTEXT: If someone is big and red then they are kind.\nFOL: all x y. (Big(x) & Red(x) & Kind(x) -> Bob(x))\nTEXT: All white, round people are smart.\nFOL: all x y. (White(x) & Round(x) & Smart(x))\nTEXT: All kind people are round.\nFOL: all x y. (Kind(x) & Round(x) -> Bob(x))\nTEXT: All round, blue people are white.\nFOL: all x y. (Round(x) & Blue(x) & White(x))\nTEXT: Big people are blue.\nFOL: all x. (Big(x) -> Blue(x))\nTEXT: Anne is white.\nFOL: all x. (Anne(x) -> White(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 153,
  "responses": [
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: all x. (Dog(x) -> Big(x))\nTEXT: The dog is not green.\nFOL: all x. (Dog(x) -> NotGreen(x))\nTEXT: The dog is not red.\nFOL: all x. (Dog(x) -> NotRed(x))\nTEXT: The dog is round.\nFOL: all x. (Dog(x) -> Round(x))\nTEXT: The dog needs the lion.\nFOL: all x. (Dog(x) -> NeedsLion(x))\nTEXT: The dog sees the lion.\nFOL: all x. (Dog(x) -> SeeLion(x))\nTEXT: The dog visits the lion.\nFOL: all x. (Dog(x) -> VisitLion(x))\nTEXT: The lion is not big.\nFOL: all x. (Lion(x) -> NotBig(x))\nTEXT: The lion is green.\nFOL: all x. (Lion(x) -> Green(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is red.\nFOL: all x. (Lion(x) -> Red(x))\nTEXT: The lion is round.\nFOL: all x. (Lion(x) -> Round(x))\nTEXT: The lion needs the dog.\nFOL: all x. (Lion(x) -> NeedsDog(x))\nTEXT: The lion sees the dog.\nFOL: all x. (Lion(x) -> SeeDog(x))\nTEXT: The lion visits the dog.\nFOL: all x. (Lion(x) -> VisitDog(x))\nTEXT: If the lion visits the dog and the dog visits the lion then the lion sees the dog.\nFOL: (VisitDog(lion) & VisitDog(dog) -> SeeDog(lion, dog))\nTEXT: If something visits the lion then it does not see the dog.\nFOL: -VisitLion(x) -> -SeeDog(x)\nTEXT: If something needs the lion and it does not visit the lion then the lion needs the dog.\nFOL: -NeedsLion(x) -> NeedsDog(x)\nTEXT: The dog is kind.\nFOL: all x. (Dog(x) -> Kind(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: all x. (Dog(x) -> Big(x))\nTEXT: The dog is not green.\nFOL: all x. (Dog(x) -> NotGreen(x))\nTEXT: The dog is not red.\nFOL: all x. (Dog(x) -> NotRed(x))\nTEXT: The dog is round.\nFOL: all x. (Dog(x) -> Round(x))\nTEXT: The dog needs the lion.\nFOL: all x. (Dog(x) -> NeedsLion(x))\nTEXT: The dog sees the lion.\nFOL: all x. (Dog(x) -> SeeLion(x))\nTEXT: The dog visits the lion.\nFOL: all x. (Dog(x) -> VisitLion(x))\nTEXT: The lion is not big.\nFOL: all x. (Lion(x) -> NotBig(x))\nTEXT: The lion is green.\nFOL: all x. (Lion(x) -> Green(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is red.\nFOL: all x. (Lion(x) -> Red(x))\nTEXT: The lion is round.\nFOL: all x. (Lion(x) -> Round(x))\nTEXT: The lion needs the dog.\nFOL: all x. (Lion(x) -> NeedsDog(x))\nTEXT: The lion sees the dog.\nFOL: all x. (Lion(x) -> SeeDog(x))\nTEXT: The lion visits the dog.\nFOL: all x. (Lion(x) -> VisitDog(x))\nTEXT: If the lion visits the dog and the dog visits the lion then the lion sees the dog.\nFOL: (VisitDog(lion) & VisitDog(dog) -> SeeDog(lion, dog))\nTEXT: If something visits the lion then it does not see the dog.\nFOL: -VisitLion(x) -> -SeeDog(x)\nTEXT: If something needs the lion and it does not visit the lion then the lion needs the dog.\nFOL: -NeedsLion(x) -> -VisitDog(x)\nTEXT: The dog is kind.\nFOL: all x. (Dog(x) -> Kind(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: all x. (Dog(x) -> Big(x))\nTEXT: The dog is not green.\nFOL: all x. (Dog(x) -> NotGreen(x))\nTEXT: The dog is not red.\nFOL: all x. (Dog(x) -> NotRed(x))\nTEXT: The dog is round.\nFOL: all x. (Dog(x) -> Round(x))\nTEXT: The dog needs the lion.\nFOL: all x. (Dog(x) -> NeedsLion(x))\nTEXT: The dog sees the lion.\nFOL: all x. (Dog(x) -> SeeLion(x))\nTEXT: The dog visits the lion.\nFOL: all x. (Dog(x) -> VisitLion(x))\nTEXT: The lion is not big.\nFOL: all x. (Lion(x) -> NotBig(x))\nTEXT: The lion is green.\nFOL: all x. (Lion(x) -> Green(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is red.\nFOL: all x. (Lion(x) -> Red(x))\nTEXT: The lion is round.\nFOL: all x. (Lion(x) -> Round(x))\nTEXT: The lion needs the dog.\nFOL: all x. (Lion(x) -> NeedsDog(x))\nTEXT: The lion sees the dog.\nFOL: all x. (Lion(x) -> SeeDog(x))\nTEXT: The lion visits the dog.\nFOL: all x. (Lion(x) -> VisitDog(x))\nTEXT: If the lion visits the dog and the dog visits the lion then the lion sees the dog.\nFOL: (VisitDog(lion) & VisitDog(dog) -> SeeDog(lion, dog))\nTEXT: If something visits the lion then it does not see the dog.\nFOL: -VisitLion(x) -> -SeeDog(lion, dog)\nTEXT: If something needs the lion and it does not visit the lion then the lion needs the dog.\nFOL: -NeedsLion(x) -> NeedsDog(x)\nTEXT: The dog is kind.\nFOL: all x. (Dog(x) -> Kind(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: all x. (Dog(x) -> Big(x))\nTEXT: The dog is not green.\nFOL: all x. (Dog(x) -> NotGreen(x))\nTEXT: The dog is not red.\nFOL: all x. (Dog(x) -> NotRed(x))\nTEXT: The dog is round.\nFOL: all x. (Dog(x) -> Round(x))\nTEXT: The dog needs the lion.\nFOL: all x. (Dog(x) -> NeedsLion(x))\nTEXT: The dog sees the lion.\nFOL: all x. (Dog(x) -> SeeLion(x))\nTEXT: The dog visits the lion.\nFOL: all x. (Dog(x) -> VisitLion(x))\nTEXT: The lion is not big.\nFOL: all x. (Lion(x) -> NotBig(x))\nTEXT: The lion is green.\nFOL: all x. (Lion(x) -> Green(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is red.\nFOL: all x. (Lion(x) -> Red(x))\nTEXT: The lion is round.\nFOL: all x. (Lion(x) -> Round(x))\nTEXT: The lion needs the dog.\nFOL: all x. (Lion(x) -> NeedsDog(x))\nTEXT: The lion sees the dog.\nFOL: all x. (Lion(x) -> SeeDog(x))\nTEXT: The lion visits the dog.\nFOL: all x. (Lion(x) -> VisitDog(x))\nTEXT: If the lion visits the dog and the dog visits the lion then the lion sees the dog.\nFOL: (VisitDog(lion) & VisitDog(dog) -> SeeDog(lion, dog))\nTEXT: If something visits the lion then it does not see the dog.\nFOL: -VisitLion(x) -> -SeeDog(x)\nTEXT: If something needs the lion and it does not visit the lion then the lion needs the dog.\nFOL: (NeedsLion(x) & -VisitLion(x) -> NeedsDog(x))\nTEXT: The dog is kind.\nFOL: all x. (Dog(x) -> Kind(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: all x. (Dog(x) -> Big(x))\nTEXT: The dog is not green.\nFOL: all x. (Dog(x) -> NotGreen(x))\nTEXT: The dog is not red.\nFOL: all x. (Dog(x) -> NotRed(x))\nTEXT: The dog is round.\nFOL: all x. (Dog(x) -> Round(x))\nTEXT: The dog needs the lion.\nFOL: all x. (Dog(x) -> NeedsLion(x))\nTEXT: The dog sees the lion.\nFOL: all x. (Dog(x) -> SeeLion(x))\nTEXT: The dog visits the lion.\nFOL: all x. (Dog(x) -> VisitLion(x))\nTEXT: The lion is not big.\nFOL: all x. (Lion(x) -> NotBig(x))\nTEXT: The lion is green.\nFOL: all x. (Lion(x) -> Green(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is red.\nFOL: all x. (Lion(x) -> Red(x))\nTEXT: The lion is round.\nFOL: all x. (Lion(x) -> Round(x))\nTEXT: The lion needs the dog.\nFOL: all x. (Lion(x) -> NeedsDog(x))\nTEXT: The lion sees the dog.\nFOL: all x. (Lion(x) -> SeeDog(x))\nTEXT: The lion visits the dog.\nFOL: all x. (Lion(x) -> VisitDog(x))\nTEXT: If the lion visits the dog and the dog visits the lion then the lion sees the dog.\nFOL: (VisitDog(lion) & VisitDog(dog) -> SeeDog(lion, dog))\nTEXT: If something visits the lion then it does not see the dog.\nFOL: -VisitLion(x) -> -SeeDog(x)\nTEXT: If something needs the lion and it does not visit the lion then the lion needs the dog.\nFOL: (NeedsLion(x) & -VisitLion(x)) -> NeedsDog(x)\nTEXT: The dog is kind.\nFOL: all x. (Dog(x) -> Kind(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 154,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is green.\nFOL: all x. (BaldEagle(x) -> Green(x))\nTEXT: The bald eagle is red.\nFOL: all x. (BaldEagle(x) -> Red(x))\nTEXT: The tiger is red.\nFOL: all x. (Tiger(x) -> Red(x))\nTEXT: If something visits the bald eagle and it is blue then the bald eagle likes the tiger.\nFOL: all x y. (Something(x) & VisitBaldEagle(x) & IsBlue(x) -> LikesTiger(x, y))\nTEXT: If something visits the bald eagle and it is red then the bald eagle needs the tiger.\nFOL: all x y. (Something(x) & VisitBaldEagle(x) & IsRed(x) -> NeedsTiger(x, y))\nTEXT: If something needs the bald eagle and the bald eagle is red then the bald eagle likes the tiger.\nFOL: all x y. (NeedsBaldEagle(x) & BaldEagle(x) -> LikesTiger(x, y))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Something(x) -> NeedsBaldEagle(x))\nTEXT: If something visits the bald eagle then the bald eagle visits the tiger.\nFOL: all x y. (Something(x) & VisitBaldEagle(x) -> VisitTiger(x, y))\nTEXT: If something is blue and it likes the tiger then the tiger likes the bald eagle.\nFOL: all x y. (Something(x) & IsBlue(x) & LikesTiger(x, y))\nTEXT: The bald eagle visits the bald eagle.\nFOL: VisitBaldEagle(baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is green.\nFOL: all x. (BaldEagle(x) -> Green(x))\nTEXT: The bald eagle is red.\nFOL: all x. (BaldEagle(x) -> Red(x))\nTEXT: The tiger is red.\nFOL: all x. (Tiger(x) -> Red(x))\nTEXT: If something visits the bald eagle and it is blue then the bald eagle likes the tiger.\nFOL: all x y. (Something(x) & VisitBaldEagle(x) & IsBlue(x) -> LikesTiger(x, y))\nTEXT: If something visits the bald eagle and it is red then the bald eagle needs the tiger.\nFOL: all x y. (Something(x) & VisitBaldEagle(x) & IsRed(x) -> NeedsTiger(x, y))\nTEXT: If something needs the bald eagle and the bald eagle is red then the bald eagle likes the tiger.\nFOL: all x y. (NeedsBaldEagle(x) & BaldEagle(x) -> LikesTiger(x, y))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Something(x) -> NeedsBaldEagle(x))\nTEXT: If something visits the bald eagle then the bald eagle visits the tiger.\nFOL: all x y. (Something(x) & VisitBaldEagle(x) -> VisitTiger(x, y))\nTEXT: If something is blue and it likes the tiger then the tiger likes the bald eagle.\nFOL: all x y. (Something(x) & IsBlue(x) & LikesTiger(x, y))\nTEXT: The bald eagle visits the bald eagle.\nFOL: VisitBaldEagle(theBaldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is green.\nFOL: all x. (BaldEagle(x) -> Green(x))\nTEXT: The bald eagle is red.\nFOL: all x. (BaldEagle(x) -> Red(x))\nTEXT: The tiger is red.\nFOL: all x. (Tiger(x) -> Red(x))\nTEXT: If something visits the bald eagle and it is blue then the bald eagle likes the tiger.\nFOL: all x y. (Something(x) & VisitBaldEagle(x) & IsBlue(x) -> LikesTiger(x))\nTEXT: If something visits the bald eagle and it is red then the bald eagle needs the tiger.\nFOL: all x y. (Something(x) & VisitBaldEagle(x) & IsRed(x) -> NeedsTiger(x))\nTEXT: If something needs the bald eagle and the bald eagle is red then the bald eagle likes the tiger.\nFOL: all x y. (NeedsBaldEagle(x) & BaldEagle(x) -> LikesTiger(x))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Something(x) -> NeedsBaldEagle(x))\nTEXT: If something visits the bald eagle then the bald eagle visits the tiger.\nFOL: all x y. (Something(x) & VisitBaldEagle(x) -> VisitTiger(x))\nTEXT: If something is blue and it likes the tiger then the tiger likes the bald eagle.\nFOL: all x y. (Something(x) & IsBlue(x) & LikesTiger(x) -> LikesBaldEagle(x))\nTEXT: The bald eagle visits the bald eagle.\nFOL: VisitBaldEagle(theBaldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is green.\nFOL: all x. (BaldEagle(x) -> Green(x))\nTEXT: The bald eagle is red.\nFOL: all x. (BaldEagle(x) -> Red(x))\nTEXT: The tiger is red.\nFOL: all x. (Tiger(x) -> Red(x))\nTEXT: If something visits the bald eagle and it is blue then the bald eagle likes the tiger.\nFOL: all x y. (Something(x) & VisitBaldEagle(x) & IsBlue(x) -> LikesTiger(x, y))\nTEXT: If something visits the bald eagle and it is red then the bald eagle needs the tiger.\nFOL: all x y. (Something(x) & VisitBaldEagle(x) & IsRed(x) -> NeedsTiger(x, y))\nTEXT: If something needs the bald eagle and the bald eagle is red then the bald eagle likes the tiger.\nFOL: all x y. (NeedsBaldEagle(x) & BaldEagle(x) -> LikesTiger(x, y))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Something(x) -> NeedsBaldEagle(x))\nTEXT: If something visits the bald eagle then the bald eagle visits the tiger.\nFOL: all x y. (Something(x) & VisitBaldEagle(x) -> VisitTiger(x, y))\nTEXT: If something is blue and it likes the tiger then the tiger likes the bald eagle.\nFOL: all x y. (Something(x) & LikesTiger(x, y) & IsBlue(x) -> LikesTiger(x, y))\nTEXT: The bald eagle visits the bald eagle.\nFOL: VisitBaldEagle(theBaldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is green.\nFOL: all x. (BaldEagle(x) -> Green(x))\nTEXT: The bald eagle is red.\nFOL: all x. (BaldEagle(x) -> Red(x))\nTEXT: The tiger is red.\nFOL: all x. (Tiger(x) -> Red(x))\nTEXT: If something visits the bald eagle and it is blue then the bald eagle likes the tiger.\nFOL: all x y. (Something(x) & VisitBaldEagle(x) & IsBlue(x) -> LikesTiger(x, y))\nTEXT: If something visits the bald eagle and it is red then the bald eagle needs the tiger.\nFOL: all x y. (Something(x) & VisitBaldEagle(x) & IsRed(x) -> NeedsTiger(x, y))\nTEXT: If something needs the bald eagle and the bald eagle is red then the bald eagle likes the tiger.\nFOL: all x y. (NeedsBaldEagle(x) & BaldEagle(x) -> LikesTiger(x, y))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Something(x) -> NeedsBaldEagle(x))\nTEXT: If something visits the bald eagle then the bald eagle visits the tiger.\nFOL: all x y. (Something(x) & VisitBaldEagle(x) -> VisitTiger(x, y))\nTEXT: If something is blue and it likes the tiger then the tiger likes the bald eagle.\nFOL: all x y. (Something(x) & LikesTiger(x, y) & IsBlue(x) -> LikesTiger(x, y))\nTEXT: The bald eagle visits the bald eagle.\nFOL: -VisitBaldEagle(theBaldEagle)\n</EVALUATE>"
  ]
 },
 {
  "index": 155,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle eats the lion.\nFOL: all x y. (BaldEagle(x) & Lion(x) & MorePoints(x, y) -> Eats(x, y))\nTEXT: The bald eagle eats the tiger.\nFOL: all x y. (BaldEagle(x) & Tiger(x) & MorePoints(x, y) -> Eats(x, y))\nTEXT: The bald eagle is green.\nFOL: all x. (BaldEagle(x) -> Green(x))\nTEXT: The bald eagle needs the mouse.\nFOL: all x. (BaldEagle(x) & Mouse(x) & MorePoints(x, y) -> Needs(x, y))\nTEXT: The bald eagle sees the mouse.\nFOL: all x y. (BaldEagle(x) & Mouse(x) & MorePoints(x, y) -> Sees(x, y))\nTEXT: The bald eagle sees the tiger.\nFOL: all x y. (BaldEagle(x) & Tiger(x) & MorePoints(x, y) -> Sees(x, y))\nTEXT: The lion eats the bald eagle.\nFOL: all x y. (Lion(x) & BaldEagle(x) & MorePoints(x, y) -> Eats(x, y))\nTEXT: The lion eats the mouse.\nFOL: all x y. (Lion(x) & Mouse(x) & MorePoints(x, y) -> Eats(x, y))\nTEXT: The lion is red.\nFOL: all x. (Lion(x) & MorePoints(x, y) -> Red(x))\nTEXT: The lion needs the mouse.\nFOL: all x. (Lion(x) & Mouse(x) & MorePoints(x, y) -> Needs(x, y))\nTEXT: The mouse is red.\nFOL: all x. (Mouse(x) & MorePoints(x, y) -> Red(x))\nTEXT: The mouse is round.\nFOL: all x. (Mouse(x) & MorePoints(x, y) -> Round(x))\nTEXT: The mouse needs the lion.\nFOL: all x. (Mouse(x) & Lion(x) & MorePoints(x, y) -> Needs(x, y))\nTEXT: The mouse sees the bald eagle.\nFOL: all x y. (Mouse(x) & BaldEagle(x) & MorePoints(x, y) -> Sees(x, y))\nTEXT: The mouse sees the lion.\nFOL: all x y. (Mouse(x) & Lion(x) & MorePoints(x, y) -> Sees(x, y))\nTEXT: The tiger needs the lion.\nFOL: all x. (Tiger(x) & Lion(x) & MorePoints(x, y) -> Needs(x, y))\nTEXT: If someone needs the mouse and they need the tiger then the mouse is green.\nFOL: all x y z. (Need(x, y) & Need(x, z) & MorePoints(x, y, z) -> Green(x))\nTEXT: If someone is nice and they need the mouse then they eat the mouse.\nFOL: all x y z. (Nice(x) & Need(x, y) & MorePoints(x, y, z) -> Eat(x, y))\nTEXT: If someone is green and they see the tiger then the tiger needs the bald eagle.\nFOL: all x y z. (Green(x) & See(x, y) & MorePoints(x, y, z) -> Needs(x, y))\nTEXT: If someone is round and they see the tiger then the tiger is red.\nFOL: all x y z. (Round(x) & See(x, y) & MorePoints(x, y, z) -> Red(x))\nTEXT: If someone sees the bald eagle then the bald eagle is cold.\nFOL: all x y z. (See(x, y) & BaldEagle(x) & MorePoints(x, y, z) -> Cold(x))\nTEXT: If someone is green then they need the tiger.\nFOL: all x y z. (Green(x) & Need(x, y) & MorePoints(x, y, z) -> Needs(x, y))\nTEXT: The mouse does not need the tiger.\nFOL: not all x. (Mouse(x) & Need(x, y) & MorePoints(x, y, z) -> Needs(x, y))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the lion.\nFOL: all x y. (BaldEagle(x) & Lion(x) & MorePoints(x, y) -> Eats(x, y))\nTEXT: The bald eagle eats the tiger.\nFOL: all x y. (BaldEagle(x) & Tiger(x) & MorePoints(x, y) -> Eats(x, y))\nTEXT: The bald eagle is green.\nFOL: all x. (BaldEagle(x) -> Green(x))\nTEXT: The bald eagle needs the mouse.\nFOL: all x. (BaldEagle(x) & Mouse(x) & MorePoints(x, y) -> Needs(x, y))\nTEXT: The bald eagle sees the mouse.\nFOL: all x y. (BaldEagle(x) & Mouse(x) & MorePoints(x, y) -> Sees(x, y))\nTEXT: The bald eagle sees the tiger.\nFOL: all x y. (BaldEagle(x) & Tiger(x) & MorePoints(x, y) -> Sees(x, y))\nTEXT: The lion eats the bald eagle.\nFOL: all x y. (Lion(x) & BaldEagle(x) & MorePoints(x, y) -> Eats(x, y))\nTEXT: The lion eats the mouse.\nFOL: all x y. (Lion(x) & Mouse(x) & MorePoints(x, y) -> Eats(x, y))\nTEXT: The lion is red.\nFOL: all x. (Lion(x) & MorePoints(x, y) -> Red(x))\nTEXT: The lion needs the mouse.\nFOL: all x. (Lion(x) & Mouse(x) & MorePoints(x, y) -> Needs(x, y))\nTEXT: The mouse is red.\nFOL: all x. (Mouse(x) & MorePoints(x, y) -> Red(x))\nTEXT: The mouse is round.\nFOL: all x. (Mouse(x) & MorePoints(x, y) -> Round(x))\nTEXT: The mouse needs the lion.\nFOL: all x. (Mouse(x) & Lion(x) & MorePoints(x, y) -> Needs(x, y))\nTEXT: The mouse sees the bald eagle.\nFOL: all x y. (Mouse(x) & BaldEagle(x) & MorePoints(x, y) -> Sees(x, y))\nTEXT: The mouse sees the lion.\nFOL: all x y. (Mouse(x) & Lion(x) & MorePoints(x, y) -> Sees(x, y))\nTEXT: The tiger needs the lion.\nFOL: all x. (Tiger(x) & Lion(x) & MorePoints(x, y) -> Needs(x, y))\nTEXT: If someone needs the mouse and they need the tiger then the mouse is green.\nFOL: all x y z. (Need(x, y) & Need(x, z) & MorePoints(x, y, z) -> Green(x))\nTEXT: If someone is nice and they need the mouse then they eat the mouse.\nFOL: all x y z. (Nice(x) & Need(x, y) & MorePoints(x, y, z) -> Eat(x, y))\nTEXT: If someone is green and they see the tiger then the tiger needs the bald eagle.\nFOL: all x y z. (Green(x) & See(x, y) & MorePoints(x, y, z) -> Needs(x, y))\nTEXT: If someone is round and they see the tiger then the tiger is red.\nFOL: all x y z. (Round(x) & See(x, y) & MorePoints(x, y, z) -> Red(x))\nTEXT: If someone sees the bald eagle then the bald eagle is cold.\nFOL: all x y z. (See(x, y) & BaldEagle(x) & MorePoints(x, y, z) -> Cold(x))\nTEXT: If someone is green then they need the tiger.\nFOL: all x y z. (Green(x) & Need(x, y) & MorePoints(x, y, z) -> Needs(x, y))\nTEXT: The mouse does not need the tiger.\nFOL: -Need(x, y) & -Tiger(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the lion.\nFOL: all x y. (BaldEagle(x) & Lion(x) & MorePoints(x, y) -> Eats(x, y))\nTEXT: The bald eagle eats the tiger.\nFOL: all x y. (BaldEagle(x) & Tiger(x) & MorePoints(x, y) -> Eats(x, y))\nTEXT: The bald eagle is green.\nFOL: all x. (BaldEagle(x) -> Green(x))\nTEXT: The bald eagle needs the mouse.\nFOL: all x. (BaldEagle(x) & Mouse(x) & MorePoints(x, y) -> Needs(x, y))\nTEXT: The bald eagle sees the mouse.\nFOL: all x y. (BaldEagle(x) & Mouse(x) & MorePoints(x, y) -> Sees(x, y))\nTEXT: The bald eagle sees the tiger.\nFOL: all x y. (BaldEagle(x) & Tiger(x) & MorePoints(x, y) -> Sees(x, y))\nTEXT: The lion eats the bald eagle.\nFOL: all x y. (Lion(x) & BaldEagle(x) & MorePoints(x, y) -> Eats(x, y))\nTEXT: The lion eats the mouse.\nFOL: all x y. (Lion(x) & Mouse(x) & MorePoints(x, y) -> Eats(x, y))\nTEXT: The lion is red.\nFOL: all x. (Lion(x) & MorePoints(x, y) -> Red(x))\nTEXT: The lion needs the mouse.\nFOL: all x. (Lion(x) & Mouse(x) & MorePoints(x, y) -> Needs(x, y))\nTEXT: The mouse is red.\nFOL: all x. (Mouse(x) & MorePoints(x, y) -> Red(x))\nTEXT: The mouse is round.\nFOL: all x. (Mouse(x) & MorePoints(x, y) -> Round(x))\nTEXT: The mouse needs the lion.\nFOL: all x. (Mouse(x) & Lion(x) & MorePoints(x, y) -> Needs(x, y))\nTEXT: The mouse sees the bald eagle.\nFOL: all x y. (Mouse(x) & BaldEagle(x) & MorePoints(x, y) -> Sees(x, y))\nTEXT: The mouse sees the lion.\nFOL: all x y. (Mouse(x) & Lion(x) & MorePoints(x, y) -> Sees(x, y))\nTEXT: The tiger needs the lion.\nFOL: all x. (Tiger(x) & Lion(x) & MorePoints(x, y) -> Needs(x, y))\nTEXT: If someone needs the mouse and they need the tiger then the mouse is green.\nFOL: all x y z. (Need(x, y) & Need(x, z) & MorePoints(x, y, z) -> Green(x))\nTEXT: If someone is nice and they need the mouse then they eat the mouse.\nFOL: all x y z. (Nice(x) & Need(x, y) & MorePoints(x, y, z) -> Eat(x, y))\nTEXT: If someone is green and they see the tiger then the tiger needs the bald eagle.\nFOL: all x y z. (Green(x) & See(x, y) & MorePoints(x, y, z) -> Needs(x, y))\nTEXT: If someone is round and they see the tiger then the tiger is red.\nFOL: all x y z. (Round(x) & See(x, y) & MorePoints(x, y, z) -> Red(x))\nTEXT: If someone sees the bald eagle then the bald eagle is cold.\nFOL: all x y z. (See(x, y) & BaldEagle(x) & MorePoints(x, y, z) -> Cold(x))\nTEXT: If someone is green then they need the tiger.\nFOL: all x y z. (Green(x) & Need(x, y) & MorePoints(x, y, z) -> Needs(x, y))\nTEXT: The mouse does not need the tiger.\nFOL: not all x. (Mouse(x) & Need(x, y) & MorePoints(x, y, z) -> Needs(x, y))",
   "<EVALUATE>\nTEXT: The bald eagle eats the lion.\nFOL: all x y. (BaldEagle(x) & Lion(x) & MorePoints(x, y) -> Eats(x, y))\nTEXT: The bald eagle eats the tiger.\nFOL: all x y. (BaldEagle(x) & Tiger(x) & MorePoints(x, y) -> Eats(x, y))\nTEXT: The bald eagle is green.\nFOL: all x. (BaldEagle(x) -> Green(x))\nTEXT: The bald eagle needs the mouse.\nFOL: all x. (BaldEagle(x) & Mouse(x) & MorePoints(x, y) -> Needs(x, y))\nTEXT: The bald eagle sees the mouse.\nFOL: all x y. (BaldEagle(x) & Mouse(x) & MorePoints(x, y) -> Sees(x, y))\nTEXT: The bald eagle sees the tiger.\nFOL: all x y. (BaldEagle(x) & Tiger(x) & MorePoints(x, y) -> Sees(x, y))\nTEXT: The lion eats the bald eagle.\nFOL: all x y. (Lion(x) & BaldEagle(x) & MorePoints(x, y) -> Eats(x, y))\nTEXT: The lion eats the mouse.\nFOL: all x y. (Lion(x) & Mouse(x) & MorePoints(x, y) -> Eats(x, y))\nTEXT: The lion is red.\nFOL: all x. (Lion(x) & MorePoints(x, y) -> Red(x))\nTEXT: The lion needs the mouse.\nFOL: all x. (Lion(x) & Mouse(x) & MorePoints(x, y) -> Needs(x, y))\nTEXT: The mouse is red.\nFOL: all x. (Mouse(x) & MorePoints(x, y) -> Red(x))\nTEXT: The mouse is round.\nFOL: all x. (Mouse(x) & MorePoints(x, y) -> Round(x))\nTEXT: The mouse needs the lion.\nFOL: all x. (Mouse(x) & Lion(x) & MorePoints(x, y) -> Needs(x, y))\nTEXT: The mouse sees the bald eagle.\nFOL: all x y. (Mouse(x) & BaldEagle(x) & MorePoints(x, y) -> Sees(x, y))\nTEXT: The mouse sees the lion.\nFOL: all x y. (Mouse(x) & Lion(x) & MorePoints(x, y) -> Sees(x, y))\nTEXT: The tiger needs the lion.\nFOL: all x. (Tiger(x) & Lion(x) & MorePoints(x, y) -> Needs(x, y))\nTEXT: If someone needs the mouse and they need the tiger then the mouse is green.\nFOL: all x y z. (Need(x, y) & Need(x, z) & MorePoints(x, y, z) -> Green(x))\nTEXT: If someone is nice and they need the mouse then they eat the mouse.\nFOL: all x y z. (Nice(x) & Need(x, y) & MorePoints(x, y, z) -> Eat(x, y))\nTEXT: If someone is green and they see the tiger then the tiger needs the bald eagle.\nFOL: all x y z. (Green(x) & See(x, y) & MorePoints(x, y, z) -> Needs(x, y))\nTEXT: If someone is round and they see the tiger then the tiger is red.\nFOL: all x y z. (Round(x) & See(x, y) & MorePoints(x, y, z) -> Red(x))\nTEXT: If someone sees the bald eagle then the bald eagle is cold.\nFOL: all x y z. (See(x, y) & BaldEagle(x) & MorePoints(x, y, z) -> Cold(x))\nTEXT: If someone is green then they need the tiger.\nFOL: all x y z. (Green(x) & Need(x, y) & MorePoints(x, y, z) -> Needs(x, y))\nTEXT: The mouse does not need the tiger.\nFOL: all x y z. (Mouse(x) & Need(x, y) & MorePoints(x, y, z) -> NotNeeds(x, y))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the lion.\nFOL: all x y. (BaldEagle(x) & Lion(x) & MorePoints(x, y) -> Eats(x, y))\nTEXT: The bald eagle eats the tiger.\nFOL: all x y. (BaldEagle(x) & Tiger(x) & MorePoints(x, y) -> Eats(x, y))\nTEXT: The bald eagle is green.\nFOL: all x. (BaldEagle(x) -> Green(x))\nTEXT: The bald eagle needs the mouse.\nFOL: all x. (BaldEagle(x) & Mouse(x) & MorePoints(x, y) -> Needs(x, y))\nTEXT: The bald eagle sees the mouse.\nFOL: all x y. (BaldEagle(x) & Mouse(x) & MorePoints(x, y) -> Sees(x, y))\nTEXT: The bald eagle sees the tiger.\nFOL: all x y. (BaldEagle(x) & Tiger(x) & MorePoints(x, y) -> Sees(x, y))\nTEXT: The lion eats the bald eagle.\nFOL: all x y. (Lion(x) & BaldEagle(x) & MorePoints(x, y) -> Eats(x, y))\nTEXT: The lion eats the mouse.\nFOL: all x y. (Lion(x) & Mouse(x) & MorePoints(x, y) -> Eats(x, y))\nTEXT: The lion is red.\nFOL: all x. (Lion(x) & MorePoints(x, y) -> Red(x))\nTEXT: The lion needs the mouse.\nFOL: all x. (Lion(x) & Mouse(x) & MorePoints(x, y) -> Needs(x, y))\nTEXT: The mouse is red.\nFOL: all x. (Mouse(x) & MorePoints(x, y) -> Red(x))\nTEXT: The mouse is round.\nFOL: all x. (Mouse(x) & MorePoints(x, y) -> Round(x))\nTEXT: The mouse needs the lion.\nFOL: all x. (Mouse(x) & Lion(x) & MorePoints(x, y) -> Needs(x, y))\nTEXT: The mouse sees the bald eagle.\nFOL: all x y. (Mouse(x) & BaldEagle(x) & MorePoints(x, y) -> Sees(x, y))\nTEXT: The mouse sees the lion.\nFOL: all x y. (Mouse(x) & Lion(x) & MorePoints(x, y) -> Sees(x, y))\nTEXT: The tiger needs the lion.\nFOL: all x. (Tiger(x) & Lion(x) & MorePoints(x, y) -> Needs(x, y))\nTEXT: If someone needs the mouse and they need the tiger then the mouse is green.\nFOL: all x y z. (Need(x, y) & Need(x, z) & MorePoints(x, y, z) -> Green(x))\nTEXT: If someone is nice and they need the mouse then they eat the mouse.\nFOL: all x y z. (Nice(x) & Need(x, y) & MorePoints(x, y, z) -> Eat(x, y))\nTEXT: If someone is green and they see the tiger then the tiger needs the bald eagle.\nFOL: all x y z. (Green(x) & See(x, y) & MorePoints(x, y, z) -> Needs(x, y))\nTEXT: If someone is round and they see the tiger then the tiger is red.\nFOL: all x y z. (Round(x) & See(x, y) & MorePoints(x, y, z) -> Red(x))\nTEXT: If someone sees the bald eagle then the bald eagle is cold.\nFOL: all x y z. (See(x, y) & BaldEagle(x) & MorePoints(x, y, z) -> Cold(x))\nTEXT: If someone is green then they need the tiger.\nFOL: all x y z. (Green(x) & Need(x, y) & MorePoints(x, y, z) -> Needs(x, y))\nTEXT: The mouse does not need the tiger.\nFOL: not all x y z. (Mouse(x) & Need(x, y) & MorePoints(x, y, z) -> Needs(x, y))\n</EVALUATE>"
  ]
 },
 {
  "index": 156,
  "responses": [
   "<EVALUATE>\nTEXT: Charlie is a really nice guy with a big round body, usually wearing red.\nFOL: all x. (Person(x) -> Nice(x) & Body(x) -> Round(x) & WearRed(x))\nTEXT: Dave seems to be round.\nFOL: all x. (Person(x) -> -Round(x))\nTEXT: That guy Eric sure is nice.\nFOL: all x. (Person(x) -> Eric(x) -> Nice(x))\nTEXT: Fred is still young, which explains why he is round and cold, however, most people still think Fred is nice.\nFOL: all x. (Person(x) -> Fred(x) -> Nice(x) & Young(x) -> Round(x) & Cold(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: all x. (Person(x) -> -Cold(x) & Nice(x) & -Red(x))\nTEXT: Rough people who are red in color and big are usally round in shape.\nFOL: all x. (Person(x) -> -Red(x) & -Color(x) & Big(x) & Round(x))\nTEXT: I've noticed that nice people who have rough, green skin have a tendancy to be round.\nFOL: all x. (Person(x) -> Nice(x) & Skin(x) -> Rough(x) & Green(x) & Round(x))\nTEXT: Having cold and red qualities means a person will also have a rough quality.\nFOL: all x. (Person(x) -> -Cold(x) & -Red(x) & Rough(x))\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: all x. (Person(x) -> -Cold(x) & -Red(x) & Nice(x) & Young(x))\nTEXT: Red people, who are also round and young, are often quite blue as well.\nFOL: all x. (Person(x) -> -Red(x) & -Round(x) & Young(x) & Blue(x))\nTEXT: When someone is blue, nice and young they will also be as big as the sun.\nFOL: all x. (Person(x) -> Blue(x) & Nice(x) & Young(x) & Big(x) & Sun(x))\nTEXT: Charlie is not blue.\nFOL: -Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is a really nice guy with a big round body, usually wearing red.\nFOL: all x. (Person(x) -> Nice(x) & Body(x) -> Round(x) & WearRed(x))\nTEXT: Dave seems to be round.\nFOL: all x. (Person(x) -> -Round(x))\nTEXT: That guy Eric sure is nice.\nFOL: all x. (Person(x) -> Eric(x) -> Nice(x))\nTEXT: Fred is still young, which explains why he is round and cold, however, most people still think Fred is nice.\nFOL: all x. (Person(x) -> Fred(x) -> Nice(x) & Young(x) -> Round(x) & Cold(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: all x. (Person(x) -> -Cold(x) & Nice(x) & -Red(x))\nTEXT: Rough people who are red in color and big are usally round in shape.\nFOL: all x. (Person(x) -> -Red(x) & -Color(x) & Big(x) & Round(x))\nTEXT: I've noticed that nice people who have rough, green skin have a tendancy to be round.\nFOL: all x. (Person(x) -> Nice(x) & Skin(x) -> Rough(x) & Green(x) & Round(x))\nTEXT: Having cold and red qualities means a person will also have a rough quality.\nFOL: all x. (Person(x) -> -Cold(x) & -Red(x) & Rough(x))\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: all x. (Person(x) -> -Cold(x) & -Red(x) & Nice(x) & Young(x))\nTEXT: Red people, who are also round and young, are often quite blue as well.\nFOL: all x. (Person(x) -> -Red(x) & -Round(x) & Young(x) & Blue(x))\nTEXT: When someone is blue, nice and young they will also be as big as the sun.\nFOL: all x. (Person(x) -> Blue(x) & Nice(x) & Young(x) & Big(x) & Sun(x))\nTEXT: Charlie is not blue.\nFOL: not all x. (Person(x) -> -Blue(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is a really nice guy with a big round body, usually wearing red.\nFOL: all x. (Person(x) -> Nice(x) & Body(x) -> Round(x) & WearRed(x))\nTEXT: Dave seems to be round.\nFOL: all x. (Person(x) -> -Round(x))\nTEXT: That guy Eric sure is nice.\nFOL: all x. (Person(x) -> Eric(x) -> Nice(x))\nTEXT: Fred is still young, which explains why he is round and cold, however, most people still think Fred is nice.\nFOL: all x. (Person(x) -> Fred(x) -> Nice(x) & Young(x) -> Round(x) & Cold(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: all x. (Person(x) -> -Cold(x) & Nice(x) & -Red(x))\nTEXT: Rough people who are red in color and big are usally round in shape.\nFOL: all x. (Person(x) -> -Red(x) & -Color(x) & -Big(x) & Round(x))\nTEXT: I've noticed that nice people who have rough, green skin have a tendancy to be round.\nFOL: all x. (Person(x) -> Nice(x) & -Green(x) & -Rough(x) & Round(x))\nTEXT: Having cold and red qualities means a person will also have a rough quality.\nFOL: all x. (Person(x) -> -Cold(x) & -Red(x) & -Rough(x))\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: all x. (Person(x) -> -Cold(x) & -Red(x) & Nice(x) & Young(x))\nTEXT: Red people, who are also round and young, are often quite blue as well.\nFOL: all x. (Person(x) -> -Red(x) & -Round(x) & Young(x) & -Blue(x))\nTEXT: When someone is blue, nice and young they will also be as big as the sun.\nFOL: all x. (Person(x) -> -Blue(x) & Nice(x) & Young(x) & -Big(x))\nTEXT: Charlie is not blue.\nFOL: -Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is a really nice guy with a big round body, usually wearing red.\nFOL: all x. (Person(x) -> Nice(x) & Body(x) -> Round(x) & WearRed(x))\nTEXT: Dave seems to be round.\nFOL: all x. (Person(x) -> -Round(x))\nTEXT: That guy Eric sure is nice.\nFOL: all x. (Person(x) -> Eric(x) -> Nice(x))\nTEXT: Fred is still young, which explains why he is round and cold, however, most people still think Fred is nice.\nFOL: all x. (Person(x) -> Fred(x) -> Nice(x) & Young(x) -> Round(x) & Cold(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: all x. (Person(x) -> -Cold(x) & Nice(x) & -Red(x))\nTEXT: Rough people who are red in color and big are usally round in shape.\nFOL: all x. (Person(x) -> -Red(x) & -Color(x) & -Big(x) & Round(x))\nTEXT: I've noticed that nice people who have rough, green skin have a tendancy to be round.\nFOL: all x. (Person(x) -> Nice(x) & -Green(x) & -Rough(x) & Round(x))\nTEXT: Having cold and red qualities means a person will also have a rough quality.\nFOL: all x. (Person(x) -> -Cold(x) & -Red(x) & -Rough(x))\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: all x. (Person(x) -> -Cold(x) & -Red(x) & Nice(x) & Young(x))\nTEXT: Red people, who are also round and young, are often quite blue as well.\nFOL: all x. (Person(x) -> -Red(x) & -Round(x) & Young(x) & -Blue(x))\nTEXT: When someone is blue, nice and young they will also be as big as the sun.\nFOL: all x. (Person(x) -> -Blue(x) & Nice(x) & Young(x) & -Big(x))\nTEXT: Charlie is not blue.\nFOL: not all x. (Person(x) -> -Blue(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is a really nice guy with a big round body, usually wearing red.\nFOL: all x. (Person(x) -> Nice(x) & Body(x) -> Round(x) & WearRed(x))\nTEXT: Dave seems to be round.\nFOL: all x. (Person(x) -> -Round(x))\nTEXT: That guy Eric sure is nice.\nFOL: all x. (Person(x) -> Eric(x) -> Nice(x))\nTEXT: Fred is still young, which explains why he is round and cold, however, most people still think Fred is nice.\nFOL: all x. (Person(x) -> Fred(x) -> Nice(x) & Young(x) -> Round(x) & Cold(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: all x. (Person(x) -> -Cold(x) & Nice(x) & -Red(x))\nTEXT: Rough people who are red in color and big are usally round in shape.\nFOL: all x. (Person(x) -> -Red(x) & -Color(x) & Big(x) & Round(x))\nTEXT: I've noticed that nice people who have rough, green skin have a tendancy to be round.\nFOL: all x. (Person(x) -> Nice(x) & Skin(x) -> Rough(x) & Green(x) & Round(x))\nTEXT: Having cold and red qualities means a person will also have a rough quality.\nFOL: all x. (Person(x) -> -Cold(x) & -Red(x) & Rough(x))\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: all x. (Person(x) -> -Cold(x) & -Red(x) & Nice(x) & Young(x))\nTEXT: Red people, who are also round and young, are often quite blue as well.\nFOL: all x. (Person(x) -> -Red(x) & -Round(x) & Young(x) & Blue(x))\nTEXT: When someone is blue, nice and young they will also be as big as the sun.\nFOL: all x. (Person(x) -> Blue(x) & Nice(x) & Young(x) & Big(x) & Sun(x))\nTEXT: Charlie is not blue.\nFOL: not all x. (Person(x) -> Blue(x) & Nice(x) & Young(x) & Big(x) & Sun(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 157,
  "responses": [
   "<EVALUATE>\nTEXT: Bob may be young but he is nice, wears green shoes and is cold.\nFOL: all x. (Nice(x) & -Young(x) & WearGreenShoes(x) & -Cold(x))\nTEXT: Eric was proud of being round, yet rough.\nFOL: all x. (Round(x) & -Rough(x))\nTEXT: His red cheeks glowed.\nFOL: all x. (Red(x) & Glowed(x))\nTEXT: Fred is feeling cold -- he is also feeling quite rough, red, nice and round.\nFOL: all x. (Cold(x) & -Rough(x) & Red(x) & Nice(x) & Round(x))\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: all x. (Rough(x) & Tumble(x) & Gentle(x) & Kind(x) & Blue(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) & -Rough(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) & -Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: all x. (Nice(x) & Green(x) & Big(x) & -Young(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: all x. (Cold(x) & Red(x) & Blue(x) & Big(x))\nTEXT: Fred is not blue.\nFOL: -Blue(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob may be young but he is nice, wears green shoes and is cold.\nFOL: all x. (Nice(x) & -Young(x) & WearGreenShoes(x) & -Cold(x))\nTEXT: Eric was proud of being round, yet rough.\nFOL: all x. (Round(x) & -Rough(x))\nTEXT: His red cheeks glowed.\nFOL: all x. (Red(x) & Glowed(x))\nTEXT: Fred is feeling cold -- he is also feeling quite rough, red, nice and round.\nFOL: all x. (Cold(x) & -Rough(x) & Red(x) & Nice(x) & Round(x))\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: all x. (Rough(x) & Tumble(x) & Gentle(x) & Kind(x) & Blue(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) & -Rough(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) & -Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: all x. (Nice(x) & Green(x) & Big(x) & Young(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: all x. (Cold(x) & Red(x) & Blue(x) & Big(x))\nTEXT: Fred is not blue.\nFOL: -Blue(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob may be young but he is nice, wears green shoes and is cold.\nFOL: all x. (Nice(x) & -Young(x) & WearGreenShoes(x) & -Cold(x))\nTEXT: Eric was proud of being round, yet rough.\nFOL: all x. (Round(x) & -Rough(x))\nTEXT: His red cheeks glowed.\nFOL: all x. (Red(x) & Glowed(x))\nTEXT: Fred is feeling cold -- he is also feeling quite rough, red, nice and round.\nFOL: all x. (Cold(x) & -Rough(x) & Red(x) & Nice(x) & -Round(x))\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: all x. (Rough(x) & Tumble(x) & Gentle(x) & Kind(x) & -Blue(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) & -Rough(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) & -Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: all x. (Nice(x) & Green(x) & Big(x) & -Young(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: all x. (Cold(x) & Red(x) & Blue(x) & -Big(x))\nTEXT: Fred is not blue.\nFOL: -Blue(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob may be young but he is nice, wears green shoes and is cold.\nFOL: all x. (Nice(x) & -Young(x) & WearGreenShoes(x) & -Cold(x))\nTEXT: Eric was proud of being round, yet rough.\nFOL: all x. (Round(x) & -Rough(x))\nTEXT: His red cheeks glowed.\nFOL: all x. (Red(x) & Glowed(x))\nTEXT: Fred is feeling cold -- he is also feeling quite rough, red, nice and round.\nFOL: all x. (Cold(x) & -Rough(x) & Red(x) & Nice(x) & -Round(x))\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: all x. (Rough(x) & Tumble(x) & Gentle(x) & Kind(x) & Blue(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) & -Rough(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) & -Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: all x. (Nice(x) & Green(x) & Big(x) & -Young(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: all x. (Cold(x) & Red(x) & Blue(x) & -Big(x))\nTEXT: Fred is not blue.\nFOL: -Blue(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob may be young but he is nice, wears green shoes and is cold.\nFOL: all x. (Nice(x) & -Young(x) & WearGreenShoes(x) & -Cold(x))\nTEXT: Eric was proud of being round, yet rough.\nFOL: all x. (Round(x) & -Rough(x))\nTEXT: His red cheeks glowed.\nFOL: all x. (Red(x) & Glowed(x))\nTEXT: Fred is feeling cold -- he is also feeling quite rough, red, nice and round.\nFOL: all x. (Cold(x) & -Rough(x) & Red(x) & Nice(x) & -Round(x))\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: all x. (Rough(x) & Tumble(x) & Gentle(x) & Kind(x) & Blue(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) & -Rough(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) & -Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: all x. (Nice(x) & Green(x) & Big(x) & -Young(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: all x. (Cold(x) & Red(x) & Blue(x) & Big(x))\nTEXT: Fred is not blue.\nFOL: -Blue(fred)\n</EVALUATE>"
  ]
 },
 {
  "index": 158,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Furry(x))\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\nTEXT: Charlie is rough.\nFOL: all x. (Charlie(x) -> Rough(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Charlie is young.\nFOL: all x. (Charlie(x) -> Young(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> Furry(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\nTEXT: Round things are white.\nFOL: all x. (Round(x) -> White(x))\nTEXT: If something is rough then it is furry.\nFOL: if all x. (Rough(x) -> Furry(x)) then all x. (Furry(x) -> Rough(x))\nTEXT: All rough things are furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: Charlie is young.\nFOL: all x. (Charlie(x) -> Young(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Furry(x))\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\nTEXT: Charlie is rough.\nFOL: all x. (Charlie(x) -> Rough(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Charlie is young.\nFOL: all x. (Charlie(x) -> Young(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> Furry(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\nTEXT: Round things are white.\nFOL: all x. (Round(x) -> White(x))\nTEXT: If something is rough then it is furry.\nFOL: if all x. (Rough(x) -> Furry(x)) then all x. (Furry(x) -> Rough(x))\nTEXT: All rough things are furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: Charlie is young.\nFOL: all x. (Charlie(x) -> Young(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Furry(x))\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\nTEXT: Charlie is rough.\nFOL: all x. (Charlie(x) -> Rough(x))\n",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Furry(x))\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\nTEXT: Charlie is rough.\nFOL: all x. (Charlie(x) -> Rough(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Charlie is young.\nFOL: all x. (Charlie(x) -> Young(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> Furry(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\nTEXT: Round things are white.\nFOL: all x. (Round(x) -> White(x))\nTEXT: If something is rough then it is furry.\nFOL: if all x. (Rough(x) -> Furry(x)) then all x. (Furry(x) -> Rough(x))\nTEXT: All rough things are furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: Charlie is young.\nFOL: all x. (Charlie(x) -> Young(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Furry(x))\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\nTEXT: Charlie is rough.\nFOL: all x. (Charlie(x) -> Rough(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Charlie is young.\nFOL: all x. (Charlie(x) -> Young(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> Furry(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\nTEXT: Round things are white.\nFOL: all x. (Round(x) -> White(x))\nTEXT: If something is rough then it is furry.\nFOL: if all x. (Rough(x) -> Furry(x)) then all x. (Furry(x) -> Rough(x))\nTEXT: All rough things are furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: Charlie is young.\nFOL: all x. (Charlie(x) -> Young(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\nTEXT: Charlie is rough.\nFOL: all x. (Charlie(x) -> Rough(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Furry(x))\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\nTEXT: Charlie is rough.\nFOL: all x. (Charlie(x) -> Rough(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Charlie is young.\nFOL: all x. (Charlie(x) -> Young(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> Furry(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\nTEXT: Round things are white.\nFOL: all x. (Round(x) -> White(x))\nTEXT: If something is rough then it is furry.\nFOL: if all x. (Rough(x) -> Furry(x)) then all x. (Furry(x) -> Rough(x))\nTEXT: All rough things are furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: Charlie is young.\nFOL: all x. (Charlie(x) -> Young(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Furry(x))\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\nTEXT: Charlie is rough.\nFOL: all x. (Charlie(x) -> Rough(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Charlie is young.\nFOL: all x. (Charlie(x) -> Young(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> Furry(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\nTEXT: Round things are white.\nFOL: all x. (Round(x) -> White(x))\nTEXT: If something is rough then it is furry.\nFOL: if all x. (Rough(x) -> Furry(x)) then all x. (Furry(x) -> Rough(x))\nTEXT: All rough things are furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: Charlie is young.\nFOL: all x. (Charlie(x) -> Young(x))\n</EVALUATE>\n\n&EVALUATE>\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Furry(x))\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\nTEXT: Charlie is rough.\nFOL: all x. (Charlie(x) -> Rough(x))\n",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Furry(x))\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\nTEXT: Charlie is rough.\nFOL: all x. (Charlie(x) -> Rough(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Charlie is young.\nFOL: all x. (Charlie(x) -> Young(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> Furry(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\nTEXT: Round things are white.\nFOL: all x. (Round(x) -> White(x))\nTEXT: If something is rough then it is furry.\nFOL: if all x. (Rough(x) -> Furry(x)) then all x. (Furry(x) -> Rough(x))\nTEXT: All rough things are furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: Charlie is young.\nFOL: all x. (Charlie(x) -> Young(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Furry(x))\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\nTEXT: Charlie is rough.\nFOL: all x. (Charlie(x) -> Rough(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Charlie is young.\nFOL: all x. (Charlie(x) -> Young(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> Furry(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\nTEXT: Round things are white.\nFOL: all x. (Round(x) -> White(x))\nTEXT: If something is rough then it is furry.\nFOL: if all x. (Rough(x) -> Furry(x)) then all x. (Furry(x) -> Rough(x))\nTEXT: All rough things are furry.\nFOL: all x. (Rough(x) -> Furry(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Furry(x))\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\nTEXT: Charlie is rough.\nFOL: all x. (Charlie(x) -> Rough(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\n",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Furry(x))\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\nTEXT: Charlie is rough.\nFOL: all x. (Charlie(x) -> Rough(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Charlie is young.\nFOL: all x. (Charlie(x) -> Young(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> Furry(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\nTEXT: Round things are white.\nFOL: all x. (Round(x) -> White(x))\nTEXT: If something is rough then it is furry.\nFOL: if all x. (Rough(x) -> Furry(x)) then all x. (Furry(x) -> Rough(x))\nTEXT: All rough things are furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: Charlie is young.\nFOL: all x. (Charlie(x) -> Young(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Furry(x))\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\nTEXT: Charlie is rough.\nFOL: all x. (Charlie(x) -> Rough(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\nTEXT: Charlie is young.\nFOL: all x. (Charlie(x) -> Young(x))\nTEXT: Harry is furry.\nFOL: all x. (Harry(x) -> Furry(x))\nTEXT: Harry is green.\nFOL: all x. (Harry(x) -> Green(x))\nTEXT: Harry is quiet.\nFOL: all x. (Harry(x) -> Quiet(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> Rough(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Harry is white.\nFOL: all x. (Harry(x) -> White(x))\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\nTEXT: Round things are white.\nFOL: all x. (Round(x) -> White(x))\nTEXT: If something is rough then it is furry.\nFOL: if all x. (Rough(x) -> Furry(x)) then all x. (Furry(x) -> Rough(x))\nTEXT: All rough things are furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: Charlie is young.\nFOL: all x. (Charlie(x) -> Young(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is furry.\nFOL: all x. (Bob(x) -> Furry(x))\nTEXT: Bob is rough.\nFOL: all x. (Bob(x) -> Rough(x))\nTEXT: Bob is white.\nFOL: all x. (Bob(x) -> White(x))\nTEXT: Bob is young.\nFOL: all x. (Bob(x) -> Young(x))\nTEXT: Charlie is green.\nFOL: all x. (Charlie(x) -> Green(x))\nTEXT: Charlie is quiet.\nFOL: all x. (Charlie(x) -> Quiet(x))\nTEXT: Charlie is round.\nFOL: all x. (Charlie(x) -> Round(x))\n"
  ]
 },
 {
  "index": 159,
  "responses": [
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: all x. (Dog(x) -> Big(x))\nTEXT: If the dog is young then the dog is blue.\nFOL: all x y. (Dog(x) & Young(x) -> Dog(x) & Blue(x))\nTEXT: Big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: The dog is not cold.\nFOL: all x. (Dog(x) -> -Cold(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: all x. (Dog(x) -> Big(x))\nTEXT: If the dog is young then the dog is blue.\nFOL: all x y. (Dog(x) & Young(x) -> Dog(y) & Blue(x))\nTEXT: Big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: The dog is not cold.\nFOL: all x. (Dog(x) -> -Cold(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: all x. (Dog(x) -> Big(x))\nTEXT: If the dog is young then the dog is blue.\nFOL: all x y. (Dog(x) & Young(x) -> Dog(x) & Blue(x))\nTEXT: Big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: The dog is not cold.\nFOL: not Dog(x) & -Cold(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: all x. (Dog(x) -> Big(x))\nTEXT: If the dog is young then the dog is blue.\nFOL: all x y. (Dog(x) & Young(x) -> Dog(x) & Blue(x))\nTEXT: Big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: The dog is not cold.\nFOL: all x. (Dog(x) -> NotCold(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: all x. (Dog(x) -> Big(x))\nTEXT: If the dog is young then the dog is blue.\nFOL: all x y. (Dog(x) & Young(x) -> Dog(x) & Blue(x))\nTEXT: Big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: The dog is not cold.\nFOL: -Cold(x) & Dog(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 160,
  "responses": [
   "<EVALUATE>\nTEXT: The rabbit is cold.\nFOL: all x. (Cold(x) -> -Rabbit(x))\nTEXT: If something is rough and kind then it is blue.\nFOL: all x. (Rough(x) & Kind(x) -> Blue(x))\nTEXT: Nice, rough things are kind.\nFOL: all x. (Nice(x) & Rough(x) -> Kind(x))\nTEXT: If the rabbit is cold then the rabbit is nice.\nFOL: all x. (Cold(x) -> -Nice(x))\nTEXT: Kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: Cold things are kind.\nFOL: all x. (Cold(x) -> -Kind(x))\nTEXT: All nice things are rough.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: The rabbit is nice.\nFOL: -Rabbit(x) -> Nice(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The rabbit is cold.\nFOL: all x. (Cold(x) -> -Rabbit(x))\nTEXT: If something is rough and kind then it is blue.\nFOL: all x y. (Rough(x) & Kind(x) -> Blue(x))\nTEXT: Nice, rough things are kind.\nFOL: all x. (Rough(x) & Kind(x) -> x)\nTEXT: If the rabbit is cold then the rabbit is nice.\nFOL: all x y. (Cold(x) & Rabbit(x) -> Nice(x))\nTEXT: Kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: Cold things are kind.\nFOL: all x. (Cold(x) -> Kind(x))\nTEXT: All nice things are rough.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: The rabbit is nice.\nFOL: Rabbit(x) -> Nice(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The rabbit is cold.\nFOL: all x. (Cold(x) -> -Rabbit(x))\nTEXT: If something is rough and kind then it is blue.\nFOL: all x. (Rough(x) & Kind(x) -> Blue(x))\nTEXT: Nice, rough things are kind.\nFOL: all x. (Nice(x) & Rough(x) -> Kind(x))\nTEXT: If the rabbit is cold then the rabbit is nice.\nFOL: -Cold(x) -> -Nice(x)\nTEXT: Kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: Cold things are kind.\nFOL: all x. (Cold(x) -> Kind(x))\nTEXT: All nice things are rough.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: The rabbit is nice.\nFOL: -Cold(x) -> -Nice(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The rabbit is cold.\nFOL: all x. (Cold(x) -> -Rabbit(x))\nTEXT: If something is rough and kind then it is blue.\nFOL: all x. (Rough(x) & Kind(x) -> Blue(x))\nTEXT: Nice, rough things are kind.\nFOL: all x. (Nice(x) & Rough(x) -> Kind(x))\nTEXT: If the rabbit is cold then the rabbit is nice.\nFOL: all x. (Cold(x) -> -Nice(x))\nTEXT: Kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: Cold things are kind.\nFOL: all x. (Cold(x) -> -Kind(x))\nTEXT: All nice things are rough.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: The rabbit is nice.\nFOL: -Rabbit(x) & Nice(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The rabbit is cold.\nFOL: all x. (Cold(x) -> -Rabbit(x))\nTEXT: If something is rough and kind then it is blue.\nFOL: all x. (Rough(x) & Kind(x) -> Blue(x))\nTEXT: Nice, rough things are kind.\nFOL: all x. (Nice(x) & Rough(x) -> Kind(x))\nTEXT: If the rabbit is cold then the rabbit is nice.\nFOL: all x. (Cold(x) -> -Nice(x))\nTEXT: Kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: Cold things are kind.\nFOL: all x. (Cold(x) -> -Kind(x))\nTEXT: All nice things are rough.\nFOL: all x. (Nice(x) -> -Rough(x))\nTEXT: The rabbit is nice.\nFOL: -Rabbit(x) & Nice(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 161,
  "responses": [
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: Bob is cold but nice with red hair and dresses green.\nFOL: all x. (Bob(x) -> (Cold(x) & Nice(x) & Hair(x) = RedHair(x) & Dress(x) = Green(x)))\nTEXT: Young Dave here is always rough but nice and yes he is big.\nFOL: all x. (Dave(x) -> (Rough(x) & Nice(x) & Big(x)))\nTEXT: Eric seems to be round.\nFOL: all x. (Eric(x) -> Round(x))\nTEXT: If you run across a young person with rough skin and a round figure, you can count on them being kind.\nFOL: all x y. (Young(x) & Rough(x) & Skin(x) & Round(x) -> Kind(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x y. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) & Rough(x) -> -Red(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> -Blue(x))\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: all x. (Big(x) & Blue(x) & Red(x) & Rough(x) -> -Skin(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: all x. (Big(x) & Rough(x) & Big(x) & Round(x))\nTEXT: People who are round and green while being cold are also red.\nFOL: all x. (Round(x) & Green(x) & Cold(x) & Red(x))\nTEXT: Alan is not big.\nFOL: -Big(alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: Bob is cold but nice with red hair and dresses green.\nFOL: all x. (Bob(x) -> (Cold(x) & Nice(x) & Hair(x) = RedHair(x) & Dress(x) = Green(x)))\nTEXT: Young Dave here is always rough but nice and yes he is big.\nFOL: all x. (Dave(x) -> (Rough(x) & Nice(x) & Big(x)))\nTEXT: Eric seems to be round.\nFOL: all x. (Eric(x) -> Round(x))\nTEXT: If you run across a young person with rough skin and a round figure, you can count on them being kind.\nFOL: all x y. (Young(x) & Rough(x) & Skin(x) & Round(x) -> Kind(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x y. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) & Rough(x) -> Red(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: all x. (Big(x) & Blue(x) & Red(x) & Rough(x) -> Skin(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: all x. (Big(x) & Rough(x) & Big(x) & Round(x))\nTEXT: People who are round and green while being cold are also red.\nFOL: all x. (Round(x) & Green(x) & Cold(x) & Red(x))\nTEXT: Alan is not big.\nFOL: -Big(alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: Bob is cold but nice with red hair and dresses green.\nFOL: all x. (Bob(x) -> (Cold(x) & Nice(x) & Hair(x) = RedHair(x) & Dress(x) = Green(x)))\nTEXT: Young Dave here is always rough but nice and yes he is big.\nFOL: all x. (Dave(x) -> (Rough(x) & Nice(x) & Big(x)))\nTEXT: Eric seems to be round.\nFOL: all x. (Eric(x) -> Round(x))\nTEXT: If you run across a young person with rough skin and a round figure, you can count on them being kind.\nFOL: all x y. (Young(x) & Rough(x) & Skin(x) & Round(x) -> Kind(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x y. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) & Rough(x) -> -Red(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> -Blue(x))\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: all x. (Big(x) & Blue(x) & Red(x) & Rough(x) -> -Skin(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: all x. (Big(x) & Rough(x) & Big(x) & Round(x))\nTEXT: People who are round and green while being cold are also red.\nFOL: all x. (Round(x) & Green(x) & Cold(x) & Red(x))\nTEXT: Alan is not big.\nFOL: not Big(alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: Bob is cold but nice with red hair and dresses green.\nFOL: all x. (Bob(x) -> (Cold(x) & Nice(x) & Hair(x) = RedHair(x) & Dress(x) = Green(x)))\nTEXT: Young Dave here is always rough but nice and yes he is big.\nFOL: all x. (Dave(x) -> (Rough(x) & Nice(x) & Big(x)))\nTEXT: Eric seems to be round.\nFOL: all x. (Eric(x) -> Round(x))\nTEXT: If you run across a young person with rough skin and a round figure, you can count on them being kind.\nFOL: all x y. (Young(x) & Rough(x) & Skin(x) & Round(x) -> Kind(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x y. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) & Rough(x) -> Red(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: all x. (Big(x) & Blue(x) & Red(x) & Rough(x) -> Skin(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: all x. (Big(x) & Rough(x) & Big(x) & Round(x))\nTEXT: People who are round and green while being cold are also red.\nFOL: all x. (Round(x) & Green(x) & Cold(x) & Red(x))\nTEXT: Alan is not big.\nFOL: not Big(alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: Bob is cold but nice with red hair and dresses green.\nFOL: all x. (Bob(x) -> (Cold(x) & Nice(x) & Hair(x) = RedHair(x) & Dress(x) = Green(x)))\nTEXT: Young Dave here is always rough but nice and yes he is big.\nFOL: all x. (Dave(x) -> (Rough(x) & Nice(x) & Big(x)))\nTEXT: Eric seems to be round.\nFOL: all x. (Eric(x) -> Round(x))\nTEXT: If you run across a young person with rough skin and a round figure, you can count on them being kind.\nFOL: all x y. (Young(x) & Rough(x) & Skin(x) & Round(x) -> Kind(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x y. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x y. (Young(x) & Rough(x) -> Red(x))\nTEXT: Rough, cold people are blue.\nFOL: all x y. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: all x y. (Big(x) & Blue(x) & Red(x) & Rough(x) -> Skin(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: all x y. (Big(x) & Rough(x) & Big(x) & Round(x))\nTEXT: People who are round and green while being cold are also red.\nFOL: all x y. (Round(x) & Green(x) & Cold(x) & Red(x))\nTEXT: Alan is not big.\nFOL: not Big(alan)\n</EVALUATE>"
  ]
 },
 {
  "index": 162,
  "responses": [
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: all x. (Cow(x) -> -Cold(x))\nTEXT: The cow is kind.\nFOL: all x. (Cow(x) -> -Kind(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> -Red(x))\nTEXT: The cow is rough.\nFOL: all x. (Cow(x) -> -Rough(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> -Round(x))\nTEXT: All cold people are red.\nFOL: all x. (Cold(x) -> -Red(x))\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) -> -Kind(x))\nTEXT: If someone is kind and round then they are cold.\nFOL: -Kind(x) & -Round(x) -> -Cold(x)\nTEXT: All kind people are cold.\nFOL: all x. (Kind(x) -> -Cold(x))\nTEXT: If someone is rough then they are red.\nFOL: -Rough(x) -> -Red(x))\nTEXT: All cold people are round.\nFOL: -Cold(x) -> -Round(x))\nTEXT: The cow is round.\nFOL: -Round(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: all x. (Cow(x) -> -Cold(x))\nTEXT: The cow is kind.\nFOL: all x. (Cow(x) -> -Kind(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> -Red(x))\nTEXT: The cow is rough.\nFOL: all x. (Cow(x) -> -Rough(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> -Round(x))\nTEXT: All cold people are red.\nFOL: all x. (Cold(x) -> -Red(x))\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) -> -Kind(x))\nTEXT: If someone is kind and round then they are cold.\nFOL: if (Kind(x) & Round(x)) -> -Cold(x)\nTEXT: All kind people are cold.\nFOL: all x. (Kind(x) -> -Cold(x))\nTEXT: If someone is rough then they are red.\nFOL: if (Rough(x)) -> -Red(x))\nTEXT: All cold people are round.\nFOL: all x. (Cold(x) -> -Round(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> -Round(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: all x. (Cow(x) -> -Cold(x))\nTEXT: The cow is kind.\nFOL: all x. (Cow(x) -> -Kind(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> -Red(x))\nTEXT: The cow is rough.\nFOL: all x. (Cow(x) -> -Rough(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> -Round(x))\nTEXT: All cold people are red.\nFOL: all x. (Cold(x) -> -Red(x))\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) -> -Kind(x))\nTEXT: If someone is kind and round then they are cold.\nFOL: -Kind(x) & -Round(x) -> -Cold(x)\nTEXT: All kind people are cold.\nFOL: all x. (Kind(x) -> -Cold(x))\nTEXT: If someone is rough then they are red.\nFOL: -Rough(x) -> -Red(x))\nTEXT: All cold people are round.\nFOL: -Cold(x) -> -Round(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: all x. (Cow(x) -> -Cold(x))\nTEXT: The cow is kind.\nFOL: all x. (Cow(x) -> -Kind(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> -Red(x))\nTEXT: The cow is rough.\nFOL: all x. (Cow(x) -> -Rough(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> -Round(x))\nTEXT: All cold people are red.\nFOL: all x. (Cold(x) -> -Red(x))\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) -> -Kind(x))\nTEXT: If someone is kind and round then they are cold.\nFOL: -Kind(x) & -Round(x) -> -Cold(x)\nTEXT: All kind people are cold.\nFOL: all x. (Kind(x) -> -Cold(x))\nTEXT: If someone is rough then they are red.\nFOL: -Rough(x) -> -Red(x))\nTEXT: All cold people are round.\nFOL: -Cold(x) -> -Round(x))\nTEXT: The cow is round.\nFOL: -Round(x) -> -Cow(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: all x. (Cow(x) -> -Cold(x))\nTEXT: The cow is kind.\nFOL: all x. (Cow(x) -> -Kind(x))\nTEXT: The cow is red.\nFOL: all x. (Cow(x) -> -Red(x))\nTEXT: The cow is rough.\nFOL: all x. (Cow(x) -> -Rough(x))\nTEXT: The cow is round.\nFOL: all x. (Cow(x) -> -Round(x))\nTEXT: All cold people are red.\nFOL: all x. (Cold(x) -> -Red(x))\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) -> -Kind(x))\nTEXT: If someone is kind and round then they are cold.\nFOL: -Kind(x) & -Round(x) -> -Cold(x)\nTEXT: All kind people are cold.\nFOL: all x. (Kind(x) -> -Cold(x))\nTEXT: If someone is rough then they are red.\nFOL: -Rough(x) -> -Red(x)\nTEXT: All cold people are round.\nFOL: -Cold(x) -> -Round(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 163,
  "responses": [
   "<EVALUATE>\nTEXT: The mouse chases the squirrel.\nFOL: all x y. (Mouse(x) & Squirrel(y) & MouseChasesSquirrel(x, y))\nTEXT: The mouse is big.\nFOL: all x. (Mouse(x) -> Big(x))\nTEXT: The mouse is blue.\nFOL: all x. (Mouse(x) -> Blue(x))\nTEXT: The mouse is young.\nFOL: all x. (Mouse(x) -> Young(x))\nTEXT: The mouse sees the squirrel.\nFOL: all x y. (Mouse(x) & Squirrel(y) & Mouse(x, y))\nTEXT: The squirrel is big.\nFOL: all x. (Squirrel(x) -> Big(x))\nTEXT: The squirrel is blue.\nFOL: all x. (Squirrel(x) -> Blue(x))\nTEXT: The squirrel is round.\nFOL: all x. (Squirrel(x) -> Round(x))\nTEXT: The squirrel sees the mouse.\nFOL: all x y. (Squirrel(x) & Mouse(y) & Squirrel(x, y))\nTEXT: The squirrel visits the mouse.\nFOL: all x y. (Squirrel(x) & Mouse(y) & Squirrel(x, y))\nTEXT: If something visits the mouse then the mouse chases the squirrel.\nFOL: all x y. (Something(x) & Mouse(y) & MouseChasesSquirrel(x, y))\nTEXT: If the squirrel sees the mouse and the squirrel is young then the squirrel is round.\nFOL: all x y. (Squirrel(x) & Mouse(y) & Young(x) & Squirrel(x, y) & Squirrel(x, y) -> Round(x, y))\nTEXT: If something is nice then it visits the mouse.\nFOL: all x y. (Something(x) & Mouse(y) & Nice(x) & Mouse(x, y))\nTEXT: If something is big and it chases the squirrel then it visits the squirrel.\nFOL: all x y. (Something(x) & Big(x) & Mouse(x, y) & Squirrel(x, y) & Squirrel(x, y) -> Mouse(x, y))\nTEXT: If the squirrel visits the mouse and the mouse visits the squirrel then the mouse is nice.\nFOL: all x y. (Squirrel(x) & Mouse(y) & Mouse(x, y) & Mouse(x, y) & Mouse(x, y) -> Nice(x, y))\nTEXT: If something chases the squirrel and the squirrel chases the mouse then it visits the squirrel.\nFOL: all x y. (Something(x) & Squirrel(x) & Mouse(x, y) & Squirrel(x, y) & Squirrel(x, y) -> Mouse(x, y))\nTEXT: The mouse visits the squirrel.\nFOL: all x y. (Mouse(x) & Squirrel(y) & Mouse(x, y))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse chases the squirrel.\nFOL: all x y. (Mouse(x) & Squirrel(y) & MouseChasesSquirrel(x, y))\nTEXT: The mouse is big.\nFOL: all x. (Mouse(x) -> Big(x))\nTEXT: The mouse is blue.\nFOL: all x. (Mouse(x) -> Blue(x))\nTEXT: The mouse is young.\nFOL: all x. (Mouse(x) -> Young(x))\nTEXT: The mouse sees the squirrel.\nFOL: all x y. (Mouse(x) & Squirrel(y) & Mouse(x, y))\nTEXT: The squirrel is big.\nFOL: all x. (Squirrel(x) -> Big(x))\nTEXT: The squirrel is blue.\nFOL: all x. (Squirrel(x) -> Blue(x))\nTEXT: The squirrel is round.\nFOL: all x. (Squirrel(x) -> Round(x))\nTEXT: The squirrel sees the mouse.\nFOL: all x y. (Squirrel(x) & Mouse(y) & Mouse(x, y))\nTEXT: The squirrel visits the mouse.\nFOL: all x y. (Squirrel(x) & Mouse(y) & Mouse(x, y))\nTEXT: If something visits the mouse then the mouse chases the squirrel.\nFOL: all x y. (Something(x) & Mouse(x) & MouseChasesSquirrel(x, y))\nTEXT: If the squirrel sees the mouse and the squirrel is young then the squirrel is round.\nFOL: all x y. (Squirrel(x) & Mouse(x) & Young(x) & Squirrel(x, y) & Squirrel(x, y) -> Round(x, y))\nTEXT: If something is nice then it visits the mouse.\nFOL: all x y. (Something(x) & Mouse(x) & Nice(x) & Mouse(x, y))\nTEXT: If something is big and it chases the squirrel then it visits the squirrel.\nFOL: all x y. (Something(x) & Big(x) & Mouse(x) & Squirrel(x) & Mouse(x, y) & Squirrel(x, y) -> Mouse(x, y))\nTEXT: If the squirrel visits the mouse and the mouse visits the squirrel then the mouse is nice.\nFOL: all x y. (Squirrel(x) & Mouse(x) & Mouse(x, y) & Mouse(x, y) & Mouse(x, y) -> Nice(x, y))\nTEXT: If something chases the squirrel and the squirrel chases the mouse then it visits the squirrel.\nFOL: all x y. (Something(x) & Squirrel(x) & Squirrel(x) & Mouse(x) & Mouse(x, y) & Mouse(x, y) -> Mouse(x, y))\nTEXT: The mouse visits the squirrel.\nFOL: all x y. (Mouse(x) & Squirrel(x) & Mouse(x, y))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse chases the squirrel.\nFOL: all x y. (Mouse(x) & Squirrel(y) & MouseChasesSquirrel(x, y))\nTEXT: The mouse is big.\nFOL: all x. (Mouse(x) -> Big(x))\nTEXT: The mouse is blue.\nFOL: all x. (Mouse(x) -> Blue(x))\nTEXT: The mouse is young.\nFOL: all x. (Mouse(x) -> Young(x))\nTEXT: The mouse sees the squirrel.\nFOL: all x y. (Mouse(x) & Squirrel(y) & Mouse(x, y))\nTEXT: The squirrel is big.\nFOL: all x. (Squirrel(x) -> Big(x))\nTEXT: The squirrel is blue.\nFOL: all x. (Squirrel(x) -> Blue(x))\nTEXT: The squirrel is round.\nFOL: all x. (Squirrel(x) -> Round(x))\nTEXT: The squirrel sees the mouse.\nFOL: all x y. (Squirrel(x) & Mouse(y) & Mouse(x, y))\nTEXT: The squirrel visits the mouse.\nFOL: all x y. (Squirrel(x) & Mouse(y) & Mouse(x, y))\nTEXT: If something visits the mouse then the mouse chases the squirrel.\nFOL: all x y. (Something(x) & Mouse(x) & MouseChasesSquirrel(x, y))\nTEXT: If the squirrel sees the mouse and the squirrel is young then the squirrel is round.\nFOL: all x y. (Squirrel(x) & Mouse(x) & Young(x) & Squirrel(x, y) & Squirrel(x, y) -> Round(x, y))\nTEXT: If something is nice then it visits the mouse.\nFOL: all x y. (Something(x) & Mouse(x) & Nice(x) & Mouse(x, y))\nTEXT: If something is big and it chases the squirrel then it visits the squirrel.\nFOL: all x y. (Something(x) & Big(x) & Mouse(x) & MouseChasesSquirrel(x, y) & Mouse(x, y) -> Mouse(x, y))\nTEXT: If the squirrel visits the mouse and the mouse visits the squirrel then the mouse is nice.\nFOL: all x y. (Squirrel(x) & Mouse(x) & Mouse(x, y) & Mouse(x, y) & Mouse(x, y) -> Nice(x, y))\nTEXT: If something chases the squirrel and the squirrel chases the mouse then it visits the squirrel.\nFOL: all x y. (Something(x) & Mouse(x) & Mouse(x, y) & Mouse(x, y) & Mouse(x, y) -> Mouse(x, y))\nTEXT: The mouse visits the squirrel.\nFOL: all x y. (Mouse(x) & Squirrel(y) & Mouse(x, y))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse chases the squirrel.\nFOL: all x y. (Mouse(x) & Squirrel(y) & MouseChasesSquirrel(x, y))\nTEXT: The mouse is big.\nFOL: all x. (Mouse(x) -> Big(x))\nTEXT: The mouse is blue.\nFOL: all x. (Mouse(x) -> Blue(x))\nTEXT: The mouse is young.\nFOL: all x. (Mouse(x) -> Young(x))\nTEXT: The mouse sees the squirrel.\nFOL: all x y. (Mouse(x) & Squirrel(y) & Mouse(x, y))\nTEXT: The squirrel is big.\nFOL: all x. (Squirrel(x) -> Big(x))\nTEXT: The squirrel is blue.\nFOL: all x. (Squirrel(x) -> Blue(x))\nTEXT: The squirrel is round.\nFOL: all x. (Squirrel(x) -> Round(x))\nTEXT: The squirrel sees the mouse.\nFOL: all x y. (Squirrel(x) & Mouse(y) & Mouse(x, y))\nTEXT: The squirrel visits the mouse.\nFOL: all x y. (Squirrel(x) & Mouse(y) & Mouse(x, y))\nTEXT: If something visits the mouse then the mouse chases the squirrel.\nFOL: all x y. (Something(x) & Mouse(x) & MouseChasesSquirrel(x, y))\nTEXT: If the squirrel sees the mouse and the squirrel is young then the squirrel is round.\nFOL: all x y. (Squirrel(x) & Mouse(x) & Young(x) & Squirrel(x, y) & Squirrel(x, y) -> Round(x, y))\nTEXT: If something is nice then it visits the mouse.\nFOL: all x y. (Something(x) & Mouse(x) & Nice(x) & Mouse(x, y))\nTEXT: If something is big and it chases the squirrel then it visits the squirrel.\nFOL: all x y. (Something(x) & Big(x) & Mouse(x) & Squirrel(x) & Mouse(x, y) & Squirrel(x, y) -> Mouse(x, y))\nTEXT: If the squirrel visits the mouse and the mouse visits the squirrel then the mouse is nice.\nFOL: all x y. (Squirrel(x) & Mouse(x) & Mouse(x, y) & Mouse(x, y) & Mouse(x, y) -> Nice(x, y))\nTEXT: If something chases the squirrel and the squirrel chases the mouse then it visits the squirrel.\nFOL: all x y. (Something(x) & Squirrel(x) & Squirrel(x) & Mouse(x) & Mouse(x, y) & Squirrel(x, y) -> Mouse(x, y))\nTEXT: The mouse visits the squirrel.\nFOL: all x y. (Mouse(x) & Squirrel(x) & Mouse(x, y))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse chases the squirrel.\nFOL: all x y. (Mouse(x) & Squirrel(y) & MouseChasesSquirrel(x, y))\nTEXT: The mouse is big.\nFOL: all x. (Mouse(x) -> Big(x))\nTEXT: The mouse is blue.\nFOL: all x. (Mouse(x) -> Blue(x))\nTEXT: The mouse is young.\nFOL: all x. (Mouse(x) -> Young(x))\nTEXT: The mouse sees the squirrel.\nFOL: all x y. (Mouse(x) & Squirrel(y) & Mouse(x, y))\nTEXT: The squirrel is big.\nFOL: all x. (Squirrel(x) -> Big(x))\nTEXT: The squirrel is blue.\nFOL: all x. (Squirrel(x) -> Blue(x))\nTEXT: The squirrel is round.\nFOL: all x. (Squirrel(x) -> Round(x))\nTEXT: The squirrel sees the mouse.\nFOL: all x y. (Squirrel(x) & Mouse(y) & Squirrel(x, y))\nTEXT: The squirrel visits the mouse.\nFOL: all x y. (Squirrel(x) & Mouse(y) & Squirrel(x, y))\nTEXT: If something visits the mouse then the mouse chases the squirrel.\nFOL: all x y. (Something(x) & Mouse(y) & MouseChasesSquirrel(x, y))\nTEXT: If the squirrel sees the mouse and the squirrel is young then the squirrel is round.\nFOL: all x y. (Squirrel(x) & Mouse(y) & Young(x) & Squirrel(x, y) & Squirrel(x, y) -> Round(x, y))\nTEXT: If something is nice then it visits the mouse.\nFOL: all x y. (Something(x) & Mouse(y) & Nice(x) & Mouse(x, y))\nTEXT: If something is big and it chases the squirrel then it visits the squirrel.\nFOL: all x y. (Something(x) & Big(x) & Mouse(x, y) & Squirrel(x, y) & Squirrel(x, y) -> Mouse(x, y))\nTEXT: If the squirrel visits the mouse and the mouse visits the squirrel then the mouse is nice.\nFOL: all x y. (Squirrel(x) & Mouse(y) & Mouse(x, y) & Mouse(x, y) & Mouse(x, y) -> Nice(x, y))\nTEXT: If something chases the squirrel and the squirrel chases the mouse then it visits the squirrel.\nFOL: all x y. (Something(x) & Squirrel(y) & Squirrel(x, y) & Mouse(x, y) & Mouse(x, y) -> Squirrel(x, y))\nTEXT: The mouse visits the squirrel.\nFOL: all x y. (Mouse(x) & Squirrel(y) & Mouse(x, y))\n</EVALUATE>"
  ]
 },
 {
  "index": 164,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Erin is blue.\nFOL: all x. (Erin(x) -> Blue(x))\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\nTEXT: Erin is red.\nFOL: all x. (Erin(x) -> Red(x))\nTEXT: Erin is rough.\nFOL: all x. (Erin(x) -> Rough(x))\nTEXT: Harry is red.\nFOL: all x. (Harry(x) -> Red(x))\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\nTEXT: Furry things are smart.\nFOL: all x. (FurryThing(x) -> Smart(x))\nTEXT: If something is smart and green then it is furry.\nFOL: all x y. (Smart(x) & Green(x) -> Furry(x))\nTEXT: Harry is not furry.\nFOL: -FurryThing(harry)",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Erin is blue.\nFOL: all x. (Erin(x) -> Blue(x))\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\nTEXT: Erin is red.\nFOL: all x. (Erin(x) -> Red(x))\nTEXT: Erin is rough.\nFOL: all x. (Erin(x) -> Rough(x))\nTEXT: Harry is red.\nFOL: all x. (Harry(x) -> Red(x))\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\nTEXT: Furry things are smart.\nFOL: all x. (FurryThing(x) -> Smart(x))\nTEXT: If something is smart and green then it is furry.\nFOL: all x y. (Smart(x) & Green(x) -> FurryThing(x))\nTEXT: Harry is not furry.\nFOL: -FurryThing(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Erin is blue.\nFOL: all x. (Erin(x) -> Blue(x))\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\nTEXT: Erin is red.\nFOL: all x. (Erin(x) -> Red(x))\nTEXT: Erin is rough.\nFOL: all x. (Erin(x) -> Rough(x))\nTEXT: Harry is red.\nFOL: all x. (Harry(x) -> Red(x))\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\nTEXT: Furry things are smart.\nFOL: all x. (FurryThing(x) -> Smart(x))\nTEXT: If something is smart and green then it is furry.\nFOL: all x y. (Smart(x) & Green(x) -> Furry(x))\nTEXT: Harry is not furry.\nFOL: -FurryThing(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Erin is blue.\nFOL: all x. (Erin(x) -> Blue(x))\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\nTEXT: Erin is red.\nFOL: all x. (Erin(x) -> Red(x))\nTEXT: Erin is rough.\nFOL: all x. (Erin(x) -> Rough(x))\nTEXT: Harry is red.\nFOL: all x. (Harry(x) -> Red(x))\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\nTEXT: Furry things are smart.\nFOL: all x. (FurryThing(x) -> Smart(x))\nTEXT: If something is smart and green then it is furry.\nFOL: all x. ((Smart(x) & Green(x)) -> FurryThing(x))\nTEXT: Harry is not furry.\nFOL: -FurryThing(harry)\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\n\nTEXT: Erin is blue.\nFOL: all x. (Erin(x) -> Blue(x))\n\nTEXT: Erin is green.\nFOL: all x. (Erin(x) -> Green(x))\n\nTEXT: Erin is red.\nFOL: all x. (Erin(x) -> Red(x))\n\nTEXT: Erin is rough.\nFOL: all x. (Erin(x) -> Rough(x))\n\nTEXT: Harry is red.\nFOL: all x. (Harry(x) -> Red(x))\n\nTEXT: Harry is smart.\nFOL: all x. (Harry(x) -> Smart(x))\n\nTEXT: Furry things are smart.\nFOL: all x. (FurryThing(x) -> Smart(x))\n\nTEXT: If something is smart and green then it is furry.\nFOL: all x y. (Smart(x) & Green(x) -> Furry(x))\n\nTEXT: Harry is not furry.\nFOL: -Furry(x) & Harry(x)\n\n</EVALUATE>"
  ]
 },
 {
  "index": 165,
  "responses": [
   "<EVALUATE>\nTEXT: Alan is big, rough and red, but that's because he's often blue.\nFOL: all x. (Big(x) & Rough(x) & Red(x) & -Blue(x))\nTEXT: Really, his is nice and kind.\nFOL: all x. (Nice(x) & Kind(x))\nTEXT: Dave is cold to his ex-wife.\nFOL: all x. (Cold(x) & -Exwife(x))\nTEXT: She knows he is round and red.\nFOL: all x. (Round(x) & Red(x) & -Exwife(x))\nTEXT: He is kind to everyone else.\nFOL: all x. (Kind(x) & -Exwife(x))\nTEXT: Fred is green and cold too.\nFOL: all x. (Green(x) & Cold(x) & -Exwife(x))\nTEXT: If a person is described as being nice, cold and young it usually follow that they are red.\nFOL: all x. (Nice(x) & Cold(x) & Young(x) & -Red(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: all x. (Blue(x) & Red(x) & Nice(x) & Young(x))\nTEXT: It's pretty typical of red, rough, and cold people to be round.\nFOL: all x. (Red(x) & Rough(x) & Cold(x) & -Round(x))\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: all x. (Young(x) & Aged(x) & Blue(x) & -Cold(x))\nTEXT: A kind person will certainly be young.\nFOL: all x. (Kind(x) & Young(x))\nTEXT: Eric is young.\nFOL: all x. (Young(x) & -Exwife(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is big, rough and red, but that's because he's often blue.\nFOL: all x. (Big(x) & Rough(x) & Red(x) & -Blue(x))\nTEXT: Really, his is nice and kind.\nFOL: all x. (Nice(x) & Kind(x))\nTEXT: Dave is cold to his ex-wife.\nFOL: all x. (Cold(x) & -Ex-wife(x))\nTEXT: She knows he is round and red.\nFOL: all x. (Round(x) & Red(x) & -Ex-wife(x))\nTEXT: He is kind to everyone else.\nFOL: all x. (Kind(x) & -Ex-wife(x))\nTEXT: Fred is green and cold too.\nFOL: all x. (Green(x) & Cold(x) & -Ex-wife(x))\nTEXT: If a person is described as being nice, cold and young it usually follow that they are red.\nFOL: all x. (Nice(x) & Cold(x) & Young(x) & -Red(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: all x. (Blue(x) & Red(x) & Nice(x) & Young(x))\nTEXT: It's pretty typical of red, rough, and cold people to be round.\nFOL: all x. (Red(x) & Rough(x) & Cold(x) & -Round(x))\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: all x. (Young(x) & Aged(x) & Blue(x) & -Cold(x))\nTEXT: A kind person will certainly be young.\nFOL: all x. (Kind(x) & Young(x))\nTEXT: Eric is young.\nFOL: all x. (Young(x) & -Ex-wife(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is big, rough and red, but that's because he's often blue.\nFOL: all x. (Big(x) & Rough(x) & Red(x) & -Blue(x))\nTEXT: Really, his is nice and kind.\nFOL: all x. (Nice(x) & Kind(x))\nTEXT: Dave is cold to his ex-wife.\nFOL: all x. (Cold(x) & -Exwife(x))\nTEXT: She knows he is round and red.\nFOL: all x. (Round(x) & Red(x) & -Exwife(x))\nTEXT: He is kind to everyone else.\nFOL: all x. (Kind(x) & -Exwife(x))\nTEXT: Fred is green and cold too.\nFOL: all x. (Green(x) & Cold(x) & -Exwife(x))\nTEXT: If a person is described as being nice, cold and young it usually follow that they are red.\nFOL: all x. (Nice(x) & Cold(x) & Young(x) & -Red(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: all x. (Blue(x) & Red(x) & Nice(x) & Young(x))\nTEXT: It's pretty typical of red, rough, and cold people to be round.\nFOL: all x. (Red(x) & Rough(x) & Cold(x) & -Round(x))\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: all x. (Young(x) & Aged(x) & Blue(x) & -Cold(x))\nTEXT: A kind person will certainly be young.\nFOL: all x. (Kind(x) & -Young(x))\nTEXT: Eric is young.\nFOL: all x. (Young(x) & -Exwife(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is big, rough and red, but that's because he's often blue.\nFOL: all x. (Big(x) & Rough(x) & Red(x) & -Blue(x))\nTEXT: Really, his is nice and kind.\nFOL: all x. (Nice(x) & Kind(x))\nTEXT: Dave is cold to his ex-wife.\nFOL: all x. (Cold(x) & -Ex-wife(x))\nTEXT: She knows he is round and red.\nFOL: all x. (Round(x) & Red(x) & -Ex-wife(x))\nTEXT: He is kind to everyone else.\nFOL: all x. (Kind(x) & -Ex-wife(x))\nTEXT: Fred is green and cold too.\nFOL: all x. (Green(x) & Cold(x) & -Ex-wife(x))\nTEXT: If a person is described as being nice, cold and young it usually follow that they are red.\nFOL: all x. (Nice(x) & Cold(x) & Young(x) & -Red(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: all x. (Blue(x) & Red(x) & Nice(x) & Young(x))\nTEXT: It's pretty typical of red, rough, and cold people to be round.\nFOL: all x. (Red(x) & Rough(x) & Cold(x) & -Round(x))\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: all x. (Young(x) & Aged(x) & Blue(x) & -Cold(x))\nTEXT: A kind person will certainly be young.\nFOL: all x. (Kind(x) & -Young(x))\nTEXT: Eric is young.\nFOL: all x. (Young(x) & -Ex-wife(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is big, rough and red, but that's because he's often blue.\nFOL: all x. (Big(x) & Rough(x) & Red(x) & -Blue(x))\nTEXT: Really, his is nice and kind.\nFOL: all x. (Nice(x) & Kind(x))\nTEXT: Dave is cold to his ex-wife.\nFOL: all x. (Cold(x) & -Exwife(x))\nTEXT: She knows he is round and red.\nFOL: all x. (Round(x) & Red(x) & -Exwife(x))\nTEXT: He is kind to everyone else.\nFOL: all x. (Kind(x) & -Exwife(x))\nTEXT: Fred is green and cold too.\nFOL: all x. (Green(x) & Cold(x) & -Exwife(x))\nTEXT: If a person is described as being nice, cold and young it usually follow that they are red.\nFOL: all x. (Nice(x) & Cold(x) & Young(x) & -Red(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: all x. (Blue(x) & Red(x) & Nice(x) & Young(x))\nTEXT: It's pretty typical of red, rough, and cold people to be round.\nFOL: all x. (Red(x) & Rough(x) & -Cold(x))\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: all x. (Young(x) & Aged(x) & Blue(x) & -Cold(x))\nTEXT: A kind person will certainly be young.\nFOL: all x. (Kind(x) & Young(x))\nTEXT: Eric is young.\nFOL: all x. (Young(x) & -Exwife(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 166,
  "responses": [
   "<EVALUATE>\nTEXT: The bear eats the squirrel.\nFOL: all x y. (Bear(x) & Squirrel(y) & Eat(x, y) -> BearEatsSquirrel(x, y))\nTEXT: The bear is cold.\nFOL: all x. (Bear(x) -> -Cold(x))\nTEXT: The bear is nice.\nFOL: all x. (Bear(x) -> Nice(x))\nTEXT: The bear needs the tiger.\nFOL: all x y. (Bear(x) & Tiger(y) & Need(x, y) -> BearNeedsTiger(x, y))\nTEXT: The bear needs the tiger.\nFOL: all x y. (Bear(x) & Tiger(y) & Need(x, y) -> BearNeedsTiger(x, y))\nTEXT: The squirrel chases the bear.\nFOL: all x y. (Squirrel(x) & Bear(y) & Chase(x, y) -> SquirrelChasesBear(x, y))\nTEXT: The squirrel is cold.\nFOL: all x. (Squirrel(x) -> -Cold(x))\nTEXT: The squirrel is young.\nFOL: all x. (Squirrel(x) -> Young(x))\nTEXT: The squirrel needs the bear.\nFOL: all x y. (Squirrel(x) & Bear(y) & Need(x, y) -> BearNeedsSquirrel(x, y))\nTEXT: The tiger does not eat the bear.\nFOL: all x y. (Tiger(x) & Bear(y) & Eat(x, y) -> NotEat(x, y))\nTEXT: The tiger is young.\nFOL: all x. (Tiger(x) -> Young(x))\nTEXT: If the bear chases the tiger and the tiger does not eat the squirrel then the tiger chases the bear.\nFOL: all x y z. (Bear(x) & Tiger(y) & NotEat(z, y) & Chase(x, y, z) -> Chase(x, y, z))\nTEXT: If something eats the tiger then it chases the squirrel.\nFOL: all x y. (Something(x) & Tiger(y) & Eat(x, y) -> Chase(x, y))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x y. (Something(x) & Tiger(y) & Need(x, y) -> Eat(x, y))\nTEXT: All blue things are nice.\nFOL: all x. (Blue(x) & Nice(x))\nTEXT: If something eats the squirrel then it is blue.\nFOL: all x y. (Something(x) & Squirrel(y) & Eat(x, y) -> Blue(x))\nTEXT: If something eats the squirrel and the squirrel chases the bear then the squirrel needs the tiger.\nFOL: all x y z. (Something(x) & Squirrel(y) & Eat(x, y) & Chase(x, y, z) -> Need(x, y, z))\nTEXT: If the tiger chases the squirrel and the squirrel does not eat the tiger then the squirrel is not green.\nFOL: all x y z. (Tiger(x) & Squirrel(y) & Chase(x, y, z) & NotEat(x, y, z) -> NotGreen(x, y, z))\nTEXT: If something is nice and it does not chase the bear then it needs the squirrel.\nFOL: all x y. (Something(x) & Nice(x) & NotChase(x, y) -> Need(x, y))\nTEXT: The tiger is cold.\nFOL: all x. (Tiger(x) -> -Cold(x))",
   "<EVALUATE>\nTEXT: The bear eats the squirrel.\nFOL: all x y. (Bear(x) & Squirrel(y) & Eat(x, y) -> BearEatsSquirrel(x, y))\nTEXT: The bear is cold.\nFOL: all x. (Bear(x) -> -Cold(x))\nTEXT: The bear is nice.\nFOL: all x. (Bear(x) -> Nice(x))\nTEXT: The bear needs the tiger.\nFOL: all x y. (Bear(x) & Tiger(y) & Need(x, y) -> BearNeedsTiger(x, y))\nTEXT: The bear needs the tiger.\nFOL: all x y. (Bear(x) & Tiger(y) & Need(x, y) -> BearNeedsTiger(x, y))\nTEXT: The squirrel chases the bear.\nFOL: all x y. (Squirrel(x) & Bear(y) & Chase(x, y) -> SquirrelChasesBear(x, y))\nTEXT: The squirrel is cold.\nFOL: all x. (Squirrel(x) -> -Cold(x))\nTEXT: The squirrel is young.\nFOL: all x. (Squirrel(x) -> Young(x))\nTEXT: The squirrel needs the bear.\nFOL: all x y. (Squirrel(x) & Bear(y) & Need(x, y) -> BearNeedsSquirrel(x, y))\nTEXT: The tiger does not eat the bear.\nFOL: all x y. (Tiger(x) & Bear(y) & Eat(x, y) -> NotEat(x, y))\nTEXT: The tiger is young.\nFOL: all x. (Tiger(x) -> Young(x))\nTEXT: If the bear chases the tiger and the tiger does not eat the squirrel then the tiger chases the bear.\nFOL: all x y z. (Bear(x) & Tiger(y) & NotEat(z, y) & Chase(x, y, z) -> Chase(x, y, z))\nTEXT: If something eats the tiger then it chases the squirrel.\nFOL: all x y. (Something(x) & Tiger(y) & Eat(x, y) -> Chase(x, y))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x y. (Something(x) & Tiger(y) & Need(x, y) -> Eat(x, y))\nTEXT: All blue things are nice.\nFOL: all x. (Blue(x) & Nice(x))\nTEXT: If something eats the squirrel then it is blue.\nFOL: all x y. (Something(x) & Squirrel(y) & Eat(x, y) -> Blue(x))\nTEXT: If something eats the squirrel and the squirrel chases the bear then the squirrel needs the tiger.\nFOL: all x y z. (Something(x) & Squirrel(y) & Eat(x, y) & Chase(x, y, z) -> Need(x, y, z))\nTEXT: If the tiger chases the squirrel and the squirrel does not eat the tiger then the squirrel is not green.\nFOL: all x y z. (Tiger(x) & Squirrel(y) & Chase(x, y, z) & NotEat(x, y, z) -> NotGreen(x, y, z))\nTEXT: If something is nice and it does not chase the bear then it needs the squirrel.\nFOL: all x y z. (Something(x) & Nice(x) & NotChase(x, y, z) -> Need(x, y, z))\nTEXT: The tiger is cold.\nFOL: all x. (Tiger(x) -> -Cold(x))",
   "<EVALUATE>\nTEXT: The bear eats the squirrel.\nFOL: all x y. (Bear(x) & Squirrel(y) & Eat(x, y) -> BearEatsSquirrel(x, y))\nTEXT: The bear is cold.\nFOL: all x. (Bear(x) -> -Cold(x))\nTEXT: The bear is nice.\nFOL: all x. (Bear(x) -> Nice(x))\nTEXT: The bear needs the tiger.\nFOL: all x y. (Bear(x) & Tiger(y) & Need(x, y) -> BearNeedsTiger(x, y))\nTEXT: The bear needs the tiger.\nFOL: all x y. (Bear(x) & Tiger(y) & Need(x, y) -> BearNeedsTiger(x, y))\nTEXT: The squirrel chases the bear.\nFOL: all x y. (Squirrel(x) & Bear(y) & Chase(x, y) -> SquirrelChasesBear(x, y))\nTEXT: The squirrel is cold.\nFOL: all x. (Squirrel(x) -> -Cold(x))\nTEXT: The squirrel is young.\nFOL: all x. (Squirrel(x) -> Young(x))\nTEXT: The squirrel needs the bear.\nFOL: all x y. (Squirrel(x) & Bear(y) & Need(x, y) -> BearNeedsSquirrel(x, y))\nTEXT: The tiger does not eat the bear.\nFOL: all x y. (Tiger(x) & Bear(y) & Eat(x, y) -> NotEat(x, y))\nTEXT: The tiger is young.\nFOL: all x. (Tiger(x) -> Young(x))\nTEXT: If the bear chases the tiger and the tiger does not eat the squirrel then the tiger chases the bear.\nFOL: all x y z. (Bear(x) & Tiger(y) & NotEat(z, y) & Chase(x, y, z) -> Chase(x, y, z))\nTEXT: If something eats the tiger then it chases the squirrel.\nFOL: all x y. (Something(x) & Tiger(y) & Eat(x, y) -> Chase(x, y))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x y. (Something(x) & Tiger(y) & Need(x, y) -> Eat(x, y))\nTEXT: All blue things are nice.\nFOL: all x. (Blue(x) & Nice(x))\nTEXT: If something eats the squirrel then it is blue.\nFOL: all x y. (Something(x) & Squirrel(y) & Eat(x, y) -> Blue(x))\nTEXT: If something eats the squirrel and the squirrel chases the bear then the squirrel needs the tiger.\nFOL: all x y z. (Something(x) & Squirrel(y) & Eat(x, y) & Chase(x, y, z) -> Need(x, y, z))\nTEXT: If the tiger chases the squirrel and the squirrel does not eat the tiger then the squirrel is not green.\nFOL: all x y z. (Tiger(x) & Squirrel(y) & Chase(x, y, z) & NotEat(x, y, z) -> NotGreen(x, y, z))\nTEXT: If something is nice and it does not chase the bear then it needs the squirrel.\nFOL: all x y z. (Something(x) & Nice(x) & NotChase(x, y, z) -> Need(x, y, z))\nTEXT: The tiger is cold.\nFOL: all x. (Tiger(x) -> -Cold(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear eats the squirrel.\nFOL: all x y. (Bear(x) & Squirrel(y) & Eat(x, y) -> BearEatsSquirrel(x, y))\nTEXT: The bear is cold.\nFOL: all x. (Bear(x) -> -Cold(x))\nTEXT: The bear is nice.\nFOL: all x. (Bear(x) -> Nice(x))\nTEXT: The bear needs the tiger.\nFOL: all x y. (Bear(x) & Tiger(y) & Need(x, y) -> BearNeedsTiger(x, y))\nTEXT: The bear needs the tiger.\nFOL: all x y. (Bear(x) & Tiger(y) & Need(x, y) -> BearNeedsTiger(x, y))\nTEXT: The squirrel chases the bear.\nFOL: all x y. (Squirrel(x) & Bear(y) & Chase(x, y) -> SquirrelChasesBear(x, y))\nTEXT: The squirrel is cold.\nFOL: all x. (Squirrel(x) -> -Cold(x))\nTEXT: The squirrel is young.\nFOL: all x. (Squirrel(x) -> Young(x))\nTEXT: The squirrel needs the bear.\nFOL: all x y. (Squirrel(x) & Bear(y) & Need(x, y) -> BearNeedsSquirrel(x, y))\nTEXT: The tiger does not eat the bear.\nFOL: all x y. (Tiger(x) & Bear(y) & Eat(x, y) -> NotEat(x, y))\nTEXT: The tiger is young.\nFOL: all x. (Tiger(x) -> Young(x))\nTEXT: If the bear chases the tiger and the tiger does not eat the squirrel then the tiger chases the bear.\nFOL: all x y z. (Bear(x) & Tiger(y) & NotEat(z, y) & Chase(x, y, z) -> Chase(x, y, z))\nTEXT: If something eats the tiger then it chases the squirrel.\nFOL: all x y. (Something(x) & Tiger(y) & Eat(x, y) -> Chase(x, y))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x y. (Something(x) & Tiger(y) & Need(x, y) -> Eat(x, y))\nTEXT: All blue things are nice.\nFOL: all x. (Blue(x) & Nice(x))\nTEXT: If something eats the squirrel then it is blue.\nFOL: all x y. (Something(x) & Squirrel(y) & Eat(x, y) -> Blue(x))\nTEXT: If something eats the squirrel and the squirrel chases the bear then the squirrel needs the tiger.\nFOL: all x y z. (Something(x) & Squirrel(y) & Eat(x, y) & Chase(x, y, z) -> Need(x, y, z))\nTEXT: If the tiger chases the squirrel and the squirrel does not eat the tiger then the squirrel is not green.\nFOL: all x y z. (Tiger(x) & Squirrel(y) & Chase(x, y, z) & NotEat(x, y, z) -> NotGreen(x, y, z))\nTEXT: If something is nice and it does not chase the bear then it needs the squirrel.\nFOL: all x y. (Something(x) & Nice(x) & NotChase(x, y) -> Need(x, y))\nTEXT: The tiger is cold.\nFOL: all x. (Tiger(x) -> -Cold(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear eats the squirrel.\nFOL: all x y. (Bear(x) & Squirrel(y) & Eat(x, y) -> BearEatsSquirrel(x, y))\nTEXT: The bear is cold.\nFOL: all x. (Bear(x) -> -Cold(x))\nTEXT: The bear is nice.\nFOL: all x. (Bear(x) -> Nice(x))\nTEXT: The bear needs the tiger.\nFOL: all x y. (Bear(x) & Tiger(y) & Need(x, y) -> BearNeedsTiger(x, y))\nTEXT: The bear needs the tiger.\nFOL: all x y. (Bear(x) & Tiger(y) & Need(x, y) -> BearNeedsTiger(x, y))\nTEXT: The squirrel chases the bear.\nFOL: all x y. (Squirrel(x) & Bear(y) & Chase(x, y) -> SquirrelChasesBear(x, y))\nTEXT: The squirrel is cold.\nFOL: all x. (Squirrel(x) -> -Cold(x))\nTEXT: The squirrel is young.\nFOL: all x. (Squirrel(x) -> Young(x))\nTEXT: The squirrel needs the bear.\nFOL: all x y. (Squirrel(x) & Bear(y) & Need(x, y) -> BearNeedsSquirrel(x, y))\nTEXT: The tiger does not eat the bear.\nFOL: all x y. (Tiger(x) & Bear(y) & Eat(x, y) -> NotEat(x, y))\nTEXT: The tiger is young.\nFOL: all x. (Tiger(x) -> Young(x))\nTEXT: If the bear chases the tiger and the tiger does not eat the squirrel then the tiger chases the bear.\nFOL: all x y z. (Bear(x) & Tiger(y) & NotEat(z, y) & Chase(x, y, z) -> Chase(x, y, z))\nTEXT: If something eats the tiger then it chases the squirrel.\nFOL: all x y. (Something(x) & Tiger(y) & Eat(x, y) -> Chase(x, y))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x y. (Something(x) & Tiger(y) & Need(x, y) -> Eat(x, y))\nTEXT: All blue things are nice.\nFOL: all x. (Blue(x) & Nice(x))\nTEXT: If something eats the squirrel then it is blue.\nFOL: all x y. (Something(x) & Squirrel(y) & Eat(x, y) -> Blue(x))\nTEXT: If something eats the squirrel and the squirrel chases the bear then the squirrel needs the tiger.\nFOL: all x y z. (Something(x) & Squirrel(y) & Eat(x, y) & Chase(x, y, z) -> Need(x, y, z))\nTEXT: If the tiger chases the squirrel and the squirrel does not eat the tiger then the squirrel is not green.\nFOL: all x y z. (Tiger(x) & Squirrel(y) & Chase(x, y, z) & NotEat(x, y, z) -> NotGreen(x, y, z))\nTEXT: If something is nice and it does not chase the bear then it needs the squirrel.\nFOL: all x y. (Something(x) & Nice(x) & -Chase(x, y) -> Need(x, y))\nTEXT: The tiger is cold.\nFOL: all x. (Tiger(x) -> -Cold(x))"
  ]
 },
 {
  "index": 167,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Bob is nice.\nFOL: all x. (Bob(x) -> Nice(x))\nTEXT: Fiona is cold.\nFOL: all x. (Fiona(x) -> Cold(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is not rough.\nFOL: all x. (Fiona(x) -> -Rough(x))\nTEXT: Gary is blue.\nFOL: all x. (Gary(x) -> Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> Nice(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> Nice(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is cold.\nFOL: all x. (Harry(x) -> Cold(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> -Rough(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: If Gary is big and Gary is not kind then Gary is blue.\nFOL: all x. ((Big(x) & -Kind(x)) -> Blue(x))\nTEXT: Big, cold things are red.\nFOL: Big(x) & Cold(x) -> Red(x)\nTEXT: All big things are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: All rough, blue things are nice.\nFOL: all x. ((Blue(x) & -Rough(x)) -> Nice(x))\nTEXT: If something is nice and blue then it is rough.\nFOL: Nice(x) & Blue(x) -> Rough(x)\nTEXT: Fiona is nice.\nFOL: Fiona(x) -> Nice(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Bob is nice.\nFOL: all x. (Bob(x) -> Nice(x))\nTEXT: Fiona is cold.\nFOL: all x. (Fiona(x) -> Cold(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is not rough.\nFOL: all x. (Fiona(x) -> -Rough(x))\nTEXT: Gary is blue.\nFOL: all x. (Gary(x) -> Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> Nice(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> Nice(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is cold.\nFOL: all x. (Harry(x) -> Cold(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> -Rough(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: If Gary is big and Gary is not kind then Gary is blue.\nFOL: ((Big(gary) & -Kind(gary)) | (-Big(gary) & Kind(gary)))\nTEXT: Big, cold things are red.\nFOL: all x. (Big(x) & Cold(x) -> Red(x))\nTEXT: All big things are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: All rough, blue things are nice.\nFOL: all x. (Rough(x) & Blue(x) -> Nice(x))\nTEXT: If something is nice and blue then it is rough.\nFOL: Nice(x) & Blue(x) -> Rough(x)\nTEXT: Fiona is nice.\nFOL: Fiona(x) -> Nice(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Bob is nice.\nFOL: all x. (Bob(x) -> Nice(x))\nTEXT: Fiona is cold.\nFOL: all x. (Fiona(x) -> Cold(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is not rough.\nFOL: all x. (Fiona(x) -> -Rough(x))\nTEXT: Gary is blue.\nFOL: all x. (Gary(x) -> Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> Nice(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> Nice(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is cold.\nFOL: all x. (Harry(x) -> Cold(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> -Rough(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: If Gary is big and Gary is not kind then Gary is blue.\nFOL: ((Big(gary) & -Kind(gary)) | (-Big(gary) & Kind(gary)))\nTEXT: Big, cold things are red.\nFOL: all x. (Big(x) & Cold(x) -> Red(x))\nTEXT: All big things are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: All rough, blue things are nice.\nFOL: all x. (Rough(x) & Blue(x) -> Nice(x))\nTEXT: If something is nice and blue then it is rough.\nFOL: Nice(x) & Blue(x) -> Rough(x)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Bob is nice.\nFOL: all x. (Bob(x) -> Nice(x))\nTEXT: Fiona is cold.\nFOL: all x. (Fiona(x) -> Cold(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is not rough.\nFOL: all x. (Fiona(x) -> -Rough(x))\nTEXT: Gary is blue.\nFOL: all x. (Gary(x) -> Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> Nice(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> Nice(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is cold.\nFOL: all x. (Harry(x) -> Cold(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> -Rough(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: If Gary is big and Gary is not kind then Gary is blue.\nFOL: all x. ((Big(x) & -Kind(x)) -> Blue(x))\nTEXT: Big, cold things are red.\nFOL: Big(x) & Cold(x) -> Red(x)\nTEXT: All big things are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: All rough, blue things are nice.\nFOL: all x. ((Blue(x) & -Rough(x)) -> Nice(x))\nTEXT: If something is nice and blue then it is rough.\nFOL: all x. (Nice(x) & Blue(x) -> -Rough(x))\nTEXT: Fiona is nice.\nFOL: Fiona(x) -> Nice(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\nTEXT: Bob is blue.\nFOL: all x. (Bob(x) -> Blue(x))\nTEXT: Bob is nice.\nFOL: all x. (Bob(x) -> Nice(x))\nTEXT: Fiona is cold.\nFOL: all x. (Fiona(x) -> Cold(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is not rough.\nFOL: all x. (Fiona(x) -> -Rough(x))\nTEXT: Gary is blue.\nFOL: all x. (Gary(x) -> Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> Nice(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> Nice(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is cold.\nFOL: all x. (Harry(x) -> Cold(x))\nTEXT: Harry is rough.\nFOL: all x. (Harry(x) -> -Rough(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: If Gary is big and Gary is not kind then Gary is blue.\nFOL: ((Big(gary) & -Kind(gary)) | (-Big(gary) & Kind(gary)))\nTEXT: Big, cold things are red.\nFOL: all x. (Big(x) & Cold(x) -> Red(x))\nTEXT: All big things are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: All rough, blue things are nice.\nFOL: all x. (Rough(x) & Blue(x) -> Nice(x))\nTEXT: If something is nice and blue then it is rough.\nFOL: (Nice(x) & Blue(x) -> Rough(x))\nTEXT: Fiona is nice.\nFOL: Fiona is nice\n</EVALUATE>"
  ]
 },
 {
  "index": 168,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is red.\nFOL: all x. (Anne(x) -> Red(x))\nTEXT: Anne is young.\nFOL: all x. (Anne(x) -> Young(x))\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is smart.\nFOL: all x. (Fiona(x) -> Smart(x))\nTEXT: Gary is cold.\nFOL: all x. (Gary(x) -> Cold(x))\nTEXT: Gary is smart.\nFOL: all x. (Gary(x) -> Smart(x))\nTEXT: If someone is blue then they are nice.\nFOL: all x y. (Someone(x) & Blue(x) -> Nice(x))\nTEXT: If someone is nice then they are red.\nFOL: all x y. (Someone(x) & Nice(x) -> Red(x))\nTEXT: Nice, smart people are young.\nFOL: all x y. (Nice(x) & Smart(x) & Young(x))\nTEXT: All furry people are blue.\nFOL: all x. (Fur(x) -> Blue(x))\nTEXT: If someone is blue then they are red.\nFOL: all x y. (Someone(x) & Blue(x) -> Red(x))\nTEXT: If Fiona is cold then Fiona is smart.\nFOL: all x y. (Fiona(x) & Cold(x) -> Smart(x))\nTEXT: If someone is furry then they are smart.\nFOL: all x y. (Someone(x) & Fur(x) -> Smart(x))\nTEXT: Red, furry people are smart.\nFOL: Red(x) & Fur(x) -> Smart(x)\nTEXT: Anne is not nice.\nFOL: -Nice(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is red.\nFOL: all x. (Anne(x) -> Red(x))\nTEXT: Anne is young.\nFOL: all x. (Anne(x) -> Young(x))\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is smart.\nFOL: all x. (Fiona(x) -> Smart(x))\nTEXT: Gary is cold.\nFOL: all x. (Gary(x) -> Cold(x))\nTEXT: Gary is smart.\nFOL: all x. (Gary(x) -> Smart(x))\nTEXT: If someone is blue then they are nice.\nFOL: all x y. (Someone(x) & Blue(x) -> Nice(x))\nTEXT: If someone is nice then they are red.\nFOL: all x y. (Someone(x) & Nice(x) -> Red(x))\nTEXT: Nice, smart people are young.\nFOL: all x y. (Nice(x) & Smart(x) & Young(x))\nTEXT: All furry people are blue.\nFOL: all x. (Fur(x) -> Blue(x))\nTEXT: If someone is blue then they are red.\nFOL: all x y. (Someone(x) & Blue(x) -> Red(x))\nTEXT: If Fiona is cold then Fiona is smart.\nFOL: all x y. (Fiona(x) & Cold(x) -> Smart(x))\nTEXT: If someone is furry then they are smart.\nFOL: all x y. (Someone(x) & Fur(x) -> Smart(x))\nTEXT: Red, furry people are smart.\nFOL: Red(x) & Fur(x) -> Smart(x)\nTEXT: Anne is not nice.\nFOL: -Nice(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is red.\nFOL: all x. (Anne(x) -> Red(x))\nTEXT: Anne is young.\nFOL: all x. (Anne(x) -> Young(x))\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is smart.\nFOL: all x. (Fiona(x) -> Smart(x))\nTEXT: Gary is cold.\nFOL: all x. (Gary(x) -> Cold(x))\nTEXT: Gary is smart.\nFOL: all x. (Gary(x) -> Smart(x))\nTEXT: If someone is blue then they are nice.\nFOL: all x y. (Someone(x) & Blue(x) -> Nice(x))\nTEXT: If someone is nice then they are red.\nFOL: all x y. (Someone(x) & Nice(x) -> Red(x))\nTEXT: Nice, smart people are young.\nFOL: all x y. (Nice(x) & Smart(x) & Young(x))\nTEXT: All furry people are blue.\nFOL: all x. (Fur(x) -> Blue(x))\nTEXT: If someone is blue then they are red.\nFOL: all x y. (Someone(x) & Blue(x) -> Red(x))\nTEXT: If Fiona is cold then Fiona is smart.\nFOL: all x y. (Fiona(x) & Cold(x) -> Smart(x))\nTEXT: If someone is furry then they are smart.\nFOL: all x y. (Someone(x) & Fur(x) -> Smart(x))\nTEXT: Red, furry people are smart.\nFOL: all x. (Red(x) & Fur(x) -> Smart(x))\nTEXT: Anne is not nice.\nFOL: -Nice(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is red.\nFOL: all x. (Anne(x) -> Red(x))\nTEXT: Anne is young.\nFOL: all x. (Anne(x) -> Young(x))\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is smart.\nFOL: all x. (Fiona(x) -> Smart(x))\nTEXT: Gary is cold.\nFOL: all x. (Gary(x) -> Cold(x))\nTEXT: Gary is smart.\nFOL: all x. (Gary(x) -> Smart(x))\nTEXT: If someone is blue then they are nice.\nFOL: all x y. (Someone(x) & Blue(x) -> Nice(x))\nTEXT: If someone is nice then they are red.\nFOL: all x y. (Someone(x) & Nice(x) -> Red(x))\nTEXT: Nice, smart people are young.\nFOL: all x y. (Nice(x) & Smart(x) & Young(x))\nTEXT: All furry people are blue.\nFOL: all x. (Fur(x) & Blue(x))\nTEXT: If someone is blue then they are red.\nFOL: all x y. (Someone(x) & Blue(x) -> Red(x))\nTEXT: If Fiona is cold then Fiona is smart.\nFOL: all x y. (Fiona(x) & Cold(x) -> Smart(x))\nTEXT: If someone is furry then they are smart.\nFOL: all x y. (Someone(x) & Fur(x) -> Smart(x))\nTEXT: Red, furry people are smart.\nFOL: Red(x) & Fur(x) -> Smart(x)\nTEXT: Anne is not nice.\nFOL: -Nice(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is red.\nFOL: all x. (Anne(x) -> Red(x))\nTEXT: Anne is young.\nFOL: all x. (Anne(x) -> Young(x))\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is smart.\nFOL: all x. (Fiona(x) -> Smart(x))\nTEXT: Gary is cold.\nFOL: all x. (Gary(x) -> Cold(x))\nTEXT: Gary is smart.\nFOL: all x. (Gary(x) -> Smart(x))\nTEXT: If someone is blue then they are nice.\nFOL: all x y. (Someone(x) & Blue(x) -> Nice(x))\nTEXT: If someone is nice then they are red.\nFOL: all x y. (Someone(x) & Nice(x) -> Red(x))\nTEXT: Nice, smart people are young.\nFOL: all x y. (Nice(x) & Smart(x) & Young(x))\nTEXT: All furry people are blue.\nFOL: all x. (Fur(x) -> Blue(x))\nTEXT: If someone is blue then they are red.\nFOL: all x y. (Someone(x) & Blue(x) -> Red(x))\nTEXT: If Fiona is cold then Fiona is smart.\nFOL: all x y. (Fiona(x) & Cold(x) -> Smart(x))\nTEXT: If someone is furry then they are smart.\nFOL: all x y. (Someone(x) & Fur(x) -> Smart(x))\nTEXT: Red, furry people are smart.\nFOL: all x. (Red(x) & Fur(x) -> Smart(x))\nTEXT: Anne is not nice.\nFOL: not all x. (Anne(x) -> Nice(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 169,
  "responses": [
   "<EVALUATE>\nTEXT: Charlie is big.\nFOL: all x. (Charlie(x) -> Big(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> Blue(x))\nTEXT: Fiona is not blue.\nFOL: not all x. (Fiona(x) -> -Blue(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is red.\nFOL: all x. (Fiona(x) -> Red(x))\nTEXT: Fiona is not round.\nFOL: not all x. (Fiona(x) -> -Round(x))\nTEXT: Gary is not big.\nFOL: not all x. (Gary(x) -> -Big(x))\nTEXT: Gary is cold.\nFOL: all x. (Gary(x) -> Cold(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is red.\nFOL: all x. (Harry(x) -> Red(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\nTEXT: Blue things are young.\nFOL: all x. (Blue(x) -> Young(x))\nTEXT: If Gary is round and Gary is cold then Gary is not furry.\nFOL: (Gary(x) & -Round(x) & -Cold(x) -> -Fur(x))\nTEXT: Young, cold things are furry.\nFOL: (Young(x) & Cold(x) -> Fur(x))\nTEXT: All young things are furry.\nFOL: all x. (Young(x) -> Fur(x))\nTEXT: If something is furry and not young then it is red.\nFOL: (Fur(x) & -Young(x) -> Red(x))\nTEXT: All furry things are red.\nFOL: all x. (Fur(x) -> Red(x))\nTEXT: Gary is not furry.\nFOL: not all x. (Gary(x) -> -Fur(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is big.\nFOL: all x. (Charlie(x) -> Big(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> Blue(x))\nTEXT: Fiona is not blue.\nFOL: not all x. (Fiona(x) -> -Blue(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is red.\nFOL: all x. (Fiona(x) -> Red(x))\nTEXT: Fiona is not round.\nFOL: not all x. (Fiona(x) -> -Round(x))\nTEXT: Gary is not big.\nFOL: not all x. (Gary(x) -> -Big(x))\nTEXT: Gary is cold.\nFOL: all x. (Gary(x) -> Cold(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is red.\nFOL: all x. (Harry(x) -> Red(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\nTEXT: Blue things are young.\nFOL: all x. (Blue(x) -> Young(x))\nTEXT: If Gary is round and Gary is cold then Gary is not furry.\nFOL: (Gary(x) & -Round(x) & -Cold(x) -> -Fur(x))\nTEXT: Young, cold things are furry.\nFOL: Young(x) & Cold(x) -> Fur(x)\nTEXT: All young things are furry.\nFOL: all x. (Young(x) -> Fur(x))\nTEXT: If something is furry and not young then it is red.\nFOL: (Fur(x) & -Young(x) -> Red(x))\nTEXT: All furry things are red.\nFOL: all x. (Fur(x) -> Red(x))\nTEXT: Gary is not furry.\nFOL: not all x. (Gary(x) -> -Fur(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is big.\nFOL: all x. (Charlie(x) -> Big(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> Blue(x))\nTEXT: Fiona is not blue.\nFOL: not all x. (Fiona(x) -> -Blue(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is red.\nFOL: all x. (Fiona(x) -> Red(x))\nTEXT: Fiona is not round.\nFOL: not all x. (Fiona(x) -> -Round(x))\nTEXT: Gary is not big.\nFOL: not all x. (Gary(x) -> -Big(x))\nTEXT: Gary is cold.\nFOL: all x. (Gary(x) -> Cold(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is red.\nFOL: all x. (Harry(x) -> Red(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\nTEXT: Blue things are young.\nFOL: all x. (Blue(x) -> Young(x))\nTEXT: If Gary is round and Gary is cold then Gary is not furry.\nFOL: (Gary(x) & -Round(x) & -Cold(x) -> -Fur(x))\nTEXT: Young, cold things are furry.\nFOL: Young(x) & Cold(x) -> Fur(x)\nTEXT: All young things are furry.\nFOL: all x. (Young(x) -> Fur(x))\nTEXT: If something is furry and not young then it is red.\nFOL: (Fur(x) & -Young(x) -> -Red(x))\nTEXT: All furry things are red.\nFOL: all x. (Fur(x) -> Red(x))\nTEXT: Gary is not furry.\nFOL: not all x. (Gary(x) -> -Fur(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is big.\nFOL: all x. (Charlie(x) -> Big(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> Blue(x))\nTEXT: Fiona is not blue.\nFOL: not all x. (Fiona(x) -> -Blue(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is red.\nFOL: all x. (Fiona(x) -> Red(x))\nTEXT: Fiona is not round.\nFOL: not all x. (Fiona(x) -> -Round(x))\nTEXT: Gary is not big.\nFOL: not all x. (Gary(x) -> -Big(x))\nTEXT: Gary is cold.\nFOL: all x. (Gary(x) -> Cold(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is red.\nFOL: all x. (Harry(x) -> Red(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\nTEXT: Blue things are young.\nFOL: all x. (Blue(x) -> Young(x))\nTEXT: If Gary is round and Gary is cold then Gary is not furry.\nFOL: (Gary(x) & -Round(x) & -Cold(x) -> -Fur(x))\nTEXT: Young, cold things are furry.\nFOL: (Young(x) & Cold(x) -> Fur(x))\nTEXT: All young things are furry.\nFOL: all x. (Young(x) -> Fur(x))\nTEXT: If something is furry and not young then it is red.\nFOL: (Fur(x) & -Young(x) -> Red(x))\nTEXT: All furry things are red.\nFOL: all x. (Fur(x) -> Red(x))\nTEXT: Gary is not furry.\nFOL: -Fur(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is big.\nFOL: all x. (Charlie(x) -> Big(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> Blue(x))\nTEXT: Fiona is not blue.\nFOL: not all x. (Fiona(x) -> -Blue(x))\nTEXT: Fiona is furry.\nFOL: all x. (Fiona(x) -> Fur(x))\nTEXT: Fiona is red.\nFOL: all x. (Fiona(x) -> Red(x))\nTEXT: Fiona is not round.\nFOL: not all x. (Fiona(x) -> -Round(x))\nTEXT: Gary is not big.\nFOL: not all x. (Gary(x) -> -Big(x))\nTEXT: Gary is cold.\nFOL: all x. (Gary(x) -> Cold(x))\nTEXT: Harry is big.\nFOL: all x. (Harry(x) -> Big(x))\nTEXT: Harry is red.\nFOL: all x. (Harry(x) -> Red(x))\nTEXT: Harry is round.\nFOL: all x. (Harry(x) -> Round(x))\nTEXT: Harry is young.\nFOL: all x. (Harry(x) -> Young(x))\nTEXT: Blue things are young.\nFOL: all x. (Blue(x) -> Young(x))\nTEXT: If Gary is round and Gary is cold then Gary is not furry.\nFOL: (Gary(x) & -Round(x) & -Cold(x) -> -Fur(x))\nTEXT: Young, cold things are furry.\nFOL: Young(x) & Cold(x) -> Fur(x)\nTEXT: All young things are furry.\nFOL: all x. (Young(x) -> Fur(x))\nTEXT: If something is furry and not young then it is red.\nFOL: (Fur(x) & -Young(x) -> Red(x))\nTEXT: All furry things are red.\nFOL: all x. (Fur(x) -> Red(x))\nTEXT: Gary is not furry.\nFOL: -Fur(gary)\n</EVALUATE>"
  ]
 },
 {
  "index": 170,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is big.\nFOL: all x. (BaldEagle(x) -> Big(x))\nTEXT: The bear needs the cat.\nFOL: all x. (Bear(x) -> Cat(x))\nTEXT: The cat does not chase the bald eagle.\nFOL: all x. (Cat(x) -> -ChaseBaldEagle(x))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: If someone is kind then they do not eat the lion.\nFOL: all x. (Kind(x) -> -EatLion(x))\nTEXT: If the bald eagle is big then the bald eagle needs the lion.\nFOL: all x. (Big(x) -> NeedsLion(x))\nTEXT: If someone is rough and they chase the bear then they do not need the bear.\nFOL: all x. (Rough(x) & ChaseBear(x) -> -NeedBear(x))\nTEXT: If someone needs the lion then the lion is kind.\nFOL: all x. (NeedsLion(x) -> Kind(x))\nTEXT: If someone needs the bear then they chase the lion.\nFOL: all x. (NeedsBear(x) -> ChaseLion(x))\nTEXT: If someone chases the bear and they are kind then the bear chases the bald eagle.\nFOL: all x. (ChaseBear(x) & Kind(x) -> ChaseBaldEagle(x))\nTEXT: The bald eagle is rough.\nFOL: all x. (BaldEagle(x) -> Rough(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is big.\nFOL: all x. (BaldEagle(x) -> Big(x))\nTEXT: The bear needs the cat.\nFOL: all x. (Bear(x) -> Cat(x))\nTEXT: The cat does not chase the bald eagle.\nFOL: all x. (Cat(x) -> -ChaseBaldEagle(x))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: If someone is kind then they do not eat the lion.\nFOL: all x. (Kind(x) -> -EatLion(x))\nTEXT: If the bald eagle is big then the bald eagle needs the lion.\nFOL: all x. (Big(x) -> NeedsLion(x))\nTEXT: If someone is rough and they chase the bear then they do not need the bear.\nFOL: all x. (Rough(x) & ChaseBear(x) -> -NeedBear(x))\nTEXT: If someone needs the lion then the lion is kind.\nFOL: all x. (NeedsLion(x) -> Kind(x))\nTEXT: If someone needs the bear then they chase the lion.\nFOL: all x. (NeedsBear(x) -> ChaseLion(x))\nTEXT: If someone chases the bear and they are kind then the bear chases the bald eagle.\nFOL: all x. (ChaseBear(x) & Kind(x) -> ChaseBaldEagle(x))\nTEXT: The bald eagle is rough.\nFOL: all x. (BaldEagle(x) -> Rough(x))",
   "<EVALUATE>\nTEXT: The bald eagle is big.\nFOL: all x. (BaldEagle(x) -> Big(x))\nTEXT: The bear needs the cat.\nFOL: all x. (Bear(x) -> Cat(x))\nTEXT: The cat does not chase the bald eagle.\nFOL: all x. (Cat(x) -> -ChaseBaldEagle(x))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: If someone is kind then they do not eat the lion.\nFOL: all x. (Kind(x) -> -EatLion(x))\nTEXT: If the bald eagle is big then the bald eagle needs the lion.\nFOL: all x. (Big(x) -> NeedsLion(x))\nTEXT: If someone is rough and they chase the bear then they do not need the bear.\nFOL: all x. (Rough(x) & ChaseBear(x) -> -NeedBear(x))\nTEXT: If someone needs the lion then the lion is kind.\nFOL: all x. (NeedsLion(x) -> Kind(x))\nTEXT: If someone needs the bear then they chase the lion.\nFOL: all x. (NeedsBear(x) -> ChaseLion(x))\nTEXT: If someone chases the bear and they are kind then the bear chases the bald eagle.\nFOL: all x. (ChaseBear(x) & Kind(x) -> ChaseBaldEagle(x))\nTEXT: The bald eagle is rough.\nFOL: all x. (BaldEagle(x) -> -Rough(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is big.\nFOL: all x. (BaldEagle(x) -> Big(x))\nTEXT: The bear needs the cat.\nFOL: all x. (Bear(x) -> Cat(x))\nTEXT: The cat does not chase the bald eagle.\nFOL: all x. (Cat(x) -> -ChaseBaldEagle(x))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: If someone is kind then they do not eat the lion.\nFOL: all x. (Kind(x) -> -EatLion(x))\nTEXT: If the bald eagle is big then the bald eagle needs the lion.\nFOL: all x. (Big(x) -> NeedsLion(x))\nTEXT: If someone is rough and they chase the bear then they do not need the bear.\nFOL: all x. (Rough(x) & ChaseBear(x) -> -NeedBear(x))\nTEXT: If someone needs the lion then the lion is kind.\nFOL: all x. (NeedsLion(x) -> Kind(x))\nTEXT: If someone needs the bear then they chase the lion.\nFOL: all x. (NeedsBear(x) -> ChaseLion(x))\nTEXT: If someone chases the bear and they are kind then the bear chases the bald eagle.\nFOL: all x. (ChaseBear(x) & Kind(x) -> ChaseBaldEagle(x))\nTEXT: The bald eagle is rough.\nFOL: all x. (BaldEagle(x) -> -Rough(x))",
   "<EVALUATE>\nTEXT: The bald eagle is big.\nFOL: all x. (BaldEagle(x) -> Big(x))\nTEXT: The bear needs the cat.\nFOL: all x. (Bear(x) -> Cat(x))\nTEXT: The cat does not chase the bald eagle.\nFOL: all x. (Cat(x) -> -ChaseBaldEagle(x))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: If someone is kind then they do not eat the lion.\nFOL: all x. (Kind(x) -> -EatLion(x))\nTEXT: If the bald eagle is big then the bald eagle needs the lion.\nFOL: all x. (Big(x) -> NeedsLion(x))\nTEXT: If someone is rough and they chase the bear then they do not need the bear.\nFOL: all x. (Rough(x) & ChaseBear(x) -> -NeedBear(x))\nTEXT: If someone needs the lion then the lion is kind.\nFOL: all x. (NeedsLion(x) -> Kind(x))\nTEXT: If someone needs the bear then they chase the lion.\nFOL: all x. (NeedsBear(x) -> ChaseLion(x))\nTEXT: If someone chases the bear and they are kind then the bear chases the bald eagle.\nFOL: all x. ((ChaseBear(x) & Kind(x)) -> ChaseBaldEagle(x))\nTEXT: The bald eagle is rough.\nFOL: all x. (BaldEagle(x) -> Rough(x))"
  ]
 },
 {
  "index": 171,
  "responses": [
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & Eat(x, y) -> Round(x, y))\nTEXT: The rabbit eats the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & Eat(x, y) -> Round(x, y))\nTEXT: The tiger sees the cat.\nFOL: all x y. (Tiger(x) & Cat(y) & See(x, y) -> Round(x, y))\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: all x y. (Tiger(x) & Rabbit(y) & -See(x, y) & Round(x, y))\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: all x y. (Cat(x) & Tiger(y) & -Need(x, y) & Round(x, y))\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: all x y. (Cat(x) & Need(x, y) & -Need(x, y) & NotNeed(x, y))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x y. (Something(x) & Tiger(y) & See(x, y) & -Big(x, y))\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: all x y. (Tiger(x) & Round(x) & -Need(x, y) & Rabbit(y))\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: all x y. (Something(x) & Rabbit(y) & Eat(x, y) & -Need(x, y))\nTEXT: The tiger does not see the cat.\nFOL: -See(cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & Eat(x, y) -> Round(x, y))\nTEXT: The rabbit eats the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & Eat(x, y) -> Round(x, y))\nTEXT: The tiger sees the cat.\nFOL: all x y. (Tiger(x) & Cat(y) & See(x, y) -> Round(x, y))\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: all x y. (Tiger(x) & Rabbit(y) & -See(x, y) & Round(x, y))\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: all x y. (Cat(x) & Tiger(y) & -Need(x, y) & Round(x, y))\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: all x y. (Need(x, y) & Cat(x) & -Need(x, y) & -Cat(x))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x y. (See(x, y) & Tiger(x) & -Big(x, y) & Tiger(x))\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: all x y. (Tiger(x) & Round(x) & -Need(x, y) & Rabbit(y))\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: all x y. (Eat(x, y) & Rabbit(y) & -Need(x, y) & Tiger(x))\nTEXT: The tiger does not see the cat.\nFOL: -See(cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & Eat(x, y) -> Round(x, y))\nTEXT: The rabbit eats the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & Eat(x, y) -> Round(x, y))\nTEXT: The tiger sees the cat.\nFOL: all x y. (Tiger(x) & Cat(y) & See(x, y) -> Round(x, y))\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: all x y. (Tiger(x) & Rabbit(y) & -See(x, y) & Round(x, y))\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: all x y. (Cat(x) & Tiger(y) & -Need(x, y) & Round(x, y))\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: all x y. (Need(x, y) & Cat(x) & -Need(x, y) & -Cat(x))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x y. (See(x, y) & Tiger(x) & Big(x, y))\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: all x y. (Tiger(x) & Round(x, y) & -Need(x, y))\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: all x y. (Eat(x, y) & Rabbit(y) & -Need(x, y))\nTEXT: The tiger does not see the cat.\nFOL: -See(cat, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & Eat(x, y) -> Round(x, y))\nTEXT: The rabbit eats the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & Eat(x, y) -> Round(x, y))\nTEXT: The tiger sees the cat.\nFOL: all x y. (Tiger(x) & Cat(y) & See(x, y) -> Round(x, y))\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: all x y. (Tiger(x) & Rabbit(y) & -See(x, y) & Round(x, y))\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: all x y. (Cat(x) & Tiger(y) & -Need(x, y) & Round(x, y))\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: all x y. (Need(x, y) & Cat(x) & -Need(x, y) & -Cat(x))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x y. (See(x, y) & Tiger(x) & -Big(x, y) & Round(x, y))\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: all x y. (Tiger(x) & Round(x, y) & -Need(x, y) & Rabbit(y))\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: all x y. (Eat(x, y) & Rabbit(y) & -Need(x, y) & Tiger(x))\nTEXT: The tiger does not see the cat.\nFOL: -See(cat, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & Eat(x, y) -> Round(x, y))\nTEXT: The rabbit eats the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & Eat(x, y) -> Round(x, y))\nTEXT: The tiger sees the cat.\nFOL: all x y. (Tiger(x) & Cat(y) & See(x, y) -> Round(x, y))\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: all x y. (Tiger(x) & Rabbit(y) & -See(x, y) & Round(x, y))\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: all x y. (Cat(x) & Tiger(y) & -Need(x, y) & Round(x, y))\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: all x y. (Need(x, y) & Cat(x) & -Need(x, y) & -Cat(x))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x y. (See(x, y) & Tiger(x) & -Big(x, y) & Tiger(x))\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: all x y. (Tiger(x) & Round(x) & -Need(x, y) & Rabbit(y))\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: all x y. (Eat(x, y) & Rabbit(y) & -Need(x, y) & Tiger(x))\nTEXT: The tiger does not see the cat.\nFOL: -See(cat)"
  ]
 },
 {
  "index": 172,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\nTEXT: Erin is not furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Gary is not blue.\nFOL: all x. (Gary(x) -> -Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> -Kind(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> -Nice(x))\nTEXT: If something is big and red then it is furry.\nFOL: all x y. (Big(x) & Red(x) & -Furry(x) -> Furry(x))\nTEXT: If something is cold then it is blue.\nFOL: all x y. (Cold(x) & -Blue(x) -> Furry(x))\nTEXT: Blue things are big.\nFOL: all x y. (Blue(x) & -Big(x) -> Furry(x))\nTEXT: Charlie is not blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\nTEXT: Erin is not furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Gary is not blue.\nFOL: all x. (Gary(x) -> -Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> -Kind(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> -Nice(x))\nTEXT: If something is big and red then it is furry.\nFOL: all x y. (Big(x) & Red(x) & -Furry(x) -> Furry(x))\nTEXT: If something is cold then it is blue.\nFOL: all x y. (Cold(x) & -Blue(x) -> Furry(x))\nTEXT: Blue things are big.\nFOL: all x y. (Blue(x) & -Big(x) -> Furry(x))\nTEXT: Charlie is not blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\nTEXT: Erin is not furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Gary is not blue.\nFOL: all x. (Gary(x) -> -Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> -Kind(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> -Nice(x))\nTEXT: If something is big and red then it is furry.\nFOL: all x y. (Big(x) & Red(x) & -Furry(x) -> Furry(x))\nTEXT: If something is cold then it is blue.\nFOL: all x y. (Cold(x) & -Blue(x) -> Furry(x))\nTEXT: Blue things are big.\nFOL: all x y. (Blue(x) & -Big(x) -> Furry(x))\nTEXT: Charlie is not blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\nTEXT: Erin is not furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Gary is not blue.\nFOL: all x. (Gary(x) -> -Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> -Kind(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> -Nice(x))\nTEXT: If something is big and red then it is furry.\nFOL: all x y",
   "<EVALUATE>\nTEXT: Bob is cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\nTEXT: Erin is not furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Gary is not blue.\nFOL: all x. (Gary(x) -> -Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> -Kind(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> -Nice(x))\nTEXT: If something is big and red then it is furry.\nFOL: all x y. (Big(x) & Red(x) & -Furry(x) -> Furry(x))\nTEXT: If something is cold then it is blue.\nFOL: all x y. (Cold(x) & -Blue(x) & -Furry(x) -> Furry(x))\nTEXT: Blue things are big.\nFOL: all x y. (Blue(x) & -Big(x) & -Furry(x) -> Furry(x))\nTEXT: Charlie is not blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\nTEXT: Erin is not furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Gary is not blue.\nFOL: all x. (Gary(x) -> -Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> -Kind(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> -Nice(x))\nTEXT: If something is big and red then it is furry.\nFOL: all x y. (Big(x) & Red(x) & -Furry(x) -> Furry(x))\nTEXT: If something is cold then it is blue.\nFOL: all x y. (Cold(x) & -Blue(x) & -Furry(x) -> Furry(x))\nTEXT: Blue things are big.\nFOL: all x y. (Blue(x) & -Big(x) & -Furry(x) -> Furry(x))\nTEXT: Charlie is not blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\nTEXT: Erin is not furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Gary is not blue.\nFOL: all x. (Gary(x) -> -Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> -Kind(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> -Nice(x))\nTEXT: If something is big and red then it is furry.\nFOL: all x y. (Big(x) & Red(x) & -Furry(x) -> Furry(x))\nTEXT: If something is cold then it is blue.\nFOL: all x y. (Cold(x) & -Blue(x) & -Furry(x) -> Furry(x))\nTEXT: Blue things are big.\nFOL: all x y. (Blue(x) & -Big(x) & -Furry(x) -> Furry(x))\nTEXT: Charlie is not blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\nTEXT: Erin is not furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Gary is not blue.\nFOL: all x. (Gary(x) -> -Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> -Kind(x))\nTEXT: Gary is",
   "<EVALUATE>\nTEXT: Bob is cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\nTEXT: Erin is not furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Gary is not blue.\nFOL: all x. (Gary(x) -> -Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> -Kind(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> -Nice(x))\nTEXT: If something is big and red then it is furry.\nFOL: all x y. (Big(x) & Red(x) & -Furry(x) -> Furry(x))\nTEXT: If something is cold then it is blue.\nFOL: all x y. (Cold(x) & -Blue(x) -> Furry(x))\nTEXT: Blue things are big.\nFOL: all x y. (Blue(x) & -Big(x) -> Furry(x))\nTEXT: Charlie is not blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\nTEXT: Erin is not furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Gary is not blue.\nFOL: all x. (Gary(x) -> -Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> -Kind(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> -Nice(x))\nTEXT: If something is big and red then it is furry.\nFOL: all x y. (Big(x) & Red(x) & -Furry(x) -> Furry(x))\nTEXT: If something is cold then it is blue.\nFOL: all x y. (Cold(x) & -Blue(x) -> Furry(x))\nTEXT: Blue things are big.\nFOL: all x y. (Blue(x) & -Big(x) -> Furry(x))\nTEXT: Charlie is not blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\nTEXT: Erin is not furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Gary is not blue.\nFOL: all x. (Gary(x) -> -Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> -Kind(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> -Nice(x))\nTEXT: If something is big and red then it is furry.\nFOL: all x y. (Big(x) & Red(x) & -Furry(x) -> Furry(x))\nTEXT: If something is cold then it is blue.\nFOL: all x y. (Cold(x) & -Blue(x) -> Furry(x))\nTEXT: Blue things are big.\nFOL: all x y. (Blue(x) & -Big(x) -> Furry(x))\nTEXT: Charlie is not blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\nTEXT: Bob is not cold.\nFOL: -Cold(bob)\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\nTEXT: Erin is not furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Gary is not blue.\nFOL: all x. (Gary(x) -> -Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> -Kind(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> -Nice(x))\nTEXT: If something",
   "<EVALUATE>\nTEXT: Bob is cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\nTEXT: Erin is not furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Gary is not blue.\nFOL: all x. (Gary(x) -> -Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> -Kind(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> -Nice(x))\nTEXT: If something is big and red then it is furry.\nFOL: all x y. (Big(x) & Red(x) & -Furry(x) -> Furry(x))\nTEXT: If something is cold then it is blue.\nFOL: all x y. (Cold(x) & -Blue(x) -> Furry(x))\nTEXT: Blue things are big.\nFOL: all x y. (Blue(x) & -Big(x) -> Furry(x))\nTEXT: Charlie is not blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\nTEXT: Erin is not furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Gary is not blue.\nFOL: all x. (Gary(x) -> -Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> -Kind(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> -Nice(x))\nTEXT: If something is big and red then it is furry.\nFOL: all x y. (Big(x) & Red(x) & -Furry(x) -> Furry(x))\nTEXT: If something is cold then it is blue.\nFOL: all x y. (Cold(x) & -Blue(x) -> Furry(x))\nTEXT: Blue things are big.\nFOL: all x y. (Blue(x) & -Big(x) -> Furry(x))\nTEXT: Charlie is not blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\nTEXT: Erin is not furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Gary is not blue.\nFOL: all x. (Gary(x) -> -Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> -Kind(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> -Nice(x))\nTEXT: If something is big and red then it is furry.\nFOL: all x y. (Big(x) & Red(x) & -Furry(x) -> Furry(x))\nTEXT: If something is cold then it is blue.\nFOL: all x y. (Cold(x) & -Blue(x) -> Furry(x))\nTEXT: Blue things are big.\nFOL: all x y. (Blue(x) & -Big(x) -> Furry(x))\nTEXT: Charlie is not blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\nTEXT: Bob is cold.\nFOL: all x. (Bob(x) -> -Cold(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\nTEXT: Erin is not furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Gary is not blue.\nFOL: all x. (Gary(x) -> -Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> -Kind(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> -Nice",
   "<EVALUATE>\nTEXT: Bob is cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\nTEXT: Erin is not furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Gary is not blue.\nFOL: all x. (Gary(x) -> -Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> -Kind(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> -Nice(x))\nTEXT: If something is big and red then it is furry.\nFOL: all x y. (Big(x) & Red(x) & -Furry(x) -> Furry(x))\nTEXT: If something is cold then it is blue.\nFOL: all x y. (Cold(x) & -Blue(x) -> Furry(x))\nTEXT: Blue things are big.\nFOL: all x y. (Blue(x) & -Big(x) -> Furry(x))\nTEXT: Charlie is not blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\nTEXT: Erin is not furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Gary is not blue.\nFOL: all x. (Gary(x) -> -Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> -Kind(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> -Nice(x))\nTEXT: If something is big and red then it is furry.\nFOL: all x y. (Big(x) & Red(x) & -Furry(x) -> Furry(x))\nTEXT: If something is cold then it is blue.\nFOL: all x y. (Cold(x) & -Blue(x) -> Furry(x))\nTEXT: Blue things are big.\nFOL: all x y. (Blue(x) & -Big(x) -> Furry(x))\nTEXT: Charlie is not blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\nTEXT: Erin is not furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Gary is not blue.\nFOL: all x. (Gary(x) -> -Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> -Kind(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> -Nice(x))\nTEXT: If something is big and red then it is furry.\nFOL: all x y. (Big(x) & Red(x) & -Furry(x) -> Furry(x))\nTEXT: If something is cold then it is blue.\nFOL: all x y. (Cold(x) & -Blue(x) -> Furry(x))\nTEXT: Blue things are big.\nFOL: all x y. (Blue(x) & -Big(x) -> Furry(x))\nTEXT: Charlie is not blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\n</EVALUATE>\n\n<EVALUATE>\nTEXT: Bob is cold.\nFOL: all x. (Bob(x) -> -Cold(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Charlie is blue.\nFOL: all x. (Charlie(x) -> -Blue(x))\nTEXT: Erin is not furry.\nFOL: all x. (Erin(x) -> -Furry(x))\nTEXT: Gary is not blue.\nFOL: all x. (Gary(x) -> -Blue(x))\nTEXT: Gary is kind.\nFOL: all x. (Gary(x) -> -Kind(x))\nTEXT: Gary is nice.\nFOL: all x. (Gary(x) -> -Nice(x))\nTEXT: If something is big and red then it is fuzzy.\nFOL: all x y"
  ]
 },
 {
  "index": 173,
  "responses": [
   "<EVALUATE>\nTEXT: Alan is a big guy who is colored red from a sunburn.\nFOL: all x. (Big(x) & Red(x) & Sunburn(x) -> Alan(x))\nTEXT: He also has a cold.\nFOL: all x. (Cold(x) -> -Sunburn(x))\nTEXT: Eric seems to be round.\nFOL: all x. (Round(x) -> -Sunburn(x))\nTEXT: Gary was proud of being round, yet rough.\nFOL: all x. (Round(x) -> -Sunburn(x)) & (Proud(x) & -Rough(x))\nTEXT: His red cheeks glowed.\nFOL: all x. (Red(x) & -Sunburn(x))\nTEXT: Harry seems big and rough, but he's actually quite kind.\nFOL: all x. (Big(x) & Rough(x) & -Sunburn(x)) & (Kind(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Rough(x) & -Sunburn(x)) & (Young(x) & Red(x))\nTEXT: Anybody young person covered in blue and green will be kind.\nFOL: all x. (Young(x) & -Sunburn(x)) & (Blue(x) & Green(x))\nTEXT: Anyone who is both red and green must be as cold as Christmas.\nFOL: all x. (Red(x) & Green(x) & -Sunburn(x)) & (Christmas(x))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) & -Sunburn(x)) & (Big(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Kind(x) & -Sunburn(x)) & (Young(x) & Red(x))\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: all x. (Red(x) & -Sunburn(x)) & (Show(x) & Green(x))\nTEXT: Gary is cold.\nFOL: -Sunburn(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a big guy who is colored red from a sunburn.\nFOL: all x. (Big(x) & Red(x) & Sunburn(x) -> Alan(x))\nTEXT: He also has a cold.\nFOL: all x. (Cold(x) -> -Sunburn(x))\nTEXT: Eric seems to be round.\nFOL: all x. (Round(x) -> -Sunburn(x))\nTEXT: Gary was proud of being round, yet rough.\nFOL: all x. (Round(x) -> -Sunburn(x)) & (Proud(x) & -Rough(x))\nTEXT: His red cheeks glowed.\nFOL: all x. (Red(x) & -Sunburn(x))\nTEXT: Harry seems big and rough, but he's actually quite kind.\nFOL: all x. (Big(x) & Rough(x) & -Sunburn(x)) & (Kind(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Rough(x) & -Sunburn(x)) & (Young(x) & Red(x))\nTEXT: Anybody young person covered in blue and green will be kind.\nFOL: all x. (Young(x) & -Sunburn(x)) & (Blue(x) & Green(x))\nTEXT: Anyone who is both red and green must be as cold as Christmas.\nFOL: all x. (Red(x) & Green(x) & -Sunburn(x)) & (Christmas(x))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) & -Sunburn(x)) & (Big(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Kind(x) & -Sunburn(x)) & (Red(x))\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: all x. (Red(x) & -Sunburn(x)) & (Green(x) & -Sunburn(x))\nTEXT: Gary is cold.\nFOL: all x. (Cold(x) & -Sunburn(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a big guy who is colored red from a sunburn.\nFOL: all x. (Big(x) & Red(x) & Sunburn(x) -> Alan(x))\nTEXT: He also has a cold.\nFOL: all x. (Cold(x) -> -Sunburn(x))\nTEXT: Eric seems to be round.\nFOL: all x. (Round(x) -> -Sunburn(x))\nTEXT: Gary was proud of being round, yet rough.\nFOL: all x. (Round(x) -> -Sunburn(x)) & (Proud(x) & -Rough(x))\nTEXT: His red cheeks glowed.\nFOL: all x. (Red(x) & -Sunburn(x))\nTEXT: Harry seems big and rough, but he's actually quite kind.\nFOL: all x. (Big(x) & Rough(x) & -Sunburn(x)) & (Kind(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Rough(x) & -Sunburn(x)) & (Young(x) & Red(x))\nTEXT: Anybody young person covered in blue and green will be kind.\nFOL: all x. (Young(x) & -Sunburn(x)) & (Blue(x) & Green(x))\nTEXT: Anyone who is both red and green must be as cold as Christmas.\nFOL: all x. (Red(x) & Green(x) & -Sunburn(x)) & (Christmas(x))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) & -Sunburn(x)) & (Big(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Kind(x) & -Sunburn(x)) & (Red(x))\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: all x. (Red(x) & -Sunburn(x)) & (Green(x) & -Sunburn(x))\nTEXT: Gary is cold.\nFOL: all x. (Cold(x) & -Sunburn(x)) & (Red(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a big guy who is colored red from a sunburn.\nFOL: all x. (Big(x) & Red(x) & Sunburn(x) -> Alan(x))\nTEXT: He also has a cold.\nFOL: all x. (Cold(x) -> -Sunburn(x))\nTEXT: Eric seems to be round.\nFOL: all x. (Round(x) -> -Sunburn(x))\nTEXT: Gary was proud of being round, yet rough.\nFOL: all x. (Round(x) -> -Sunburn(x)) & (Proud(x) & -Rough(x))\nTEXT: His red cheeks glowed.\nFOL: all x. (Red(x) & -Sunburn(x))\nTEXT: Harry seems big and rough, but he's actually quite kind.\nFOL: all x. (Big(x) & Rough(x) & -Sunburn(x)) & (Kind(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Rough(x) & -Sunburn(x)) & (Young(x) & Red(x))\nTEXT: Anybody young person covered in blue and green will be kind.\nFOL: all x. (Young(x) & -Sunburn(x)) & (Blue(x) & Green(x))\nTEXT: Anyone who is both red and green must be as cold as Christmas.\nFOL: all x. (Red(x) & Green(x) & -Sunburn(x)) & (Christmas(x))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) & -Sunburn(x)) & (Big(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Kind(x) & -Sunburn(x)) & (Red(x))\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: all x. (Red(x) & -Sunburn(x)) & (Green(x) & -Sunburn(x))\nTEXT: Gary is cold.\nFOL: all x. (Cold(x) -> -Sunburn(x)) & (Red(x) & -Sunburn(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a big guy who is colored red from a sunburn.\nFOL: all x. (Big(x) & Red(x) & Sunburn(x) -> Alan(x))\nTEXT: He also has a cold.\nFOL: all x. (Cold(x) -> -Sunburn(x))\nTEXT: Eric seems to be round.\nFOL: all x. (Round(x) -> -Sunburn(x))\nTEXT: Gary was proud of being round, yet rough.\nFOL: all x. (Round(x) -> -Sunburn(x)) & (Proud(x) & -Rough(x))\nTEXT: His red cheeks glowed.\nFOL: all x. (Red(x) & -Sunburn(x))\nTEXT: Harry seems big and rough, but he's actually quite kind.\nFOL: all x. (Big(x) & Rough(x) & -Sunburn(x)) & (Kind(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Rough(x) & -Sunburn(x)) & (Young(x) & Red(x))\nTEXT: Anybody young person covered in blue and green will be kind.\nFOL: all x. (Young(x) & -Sunburn(x)) & (Blue(x) & Green(x))\nTEXT: Anyone who is both red and green must be as cold as Christmas.\nFOL: all x. (Red(x) & Green(x) & -Sunburn(x)) & (Christmas(x))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) & -Sunburn(x)) & (Big(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Kind(x) & -Sunburn(x)) & (Young(x) & Red(x))\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: all x. (Red(x) & -Sunburn(x)) & (Green(x) & -Sunburn(x))\nTEXT: Gary is cold.\nFOL: all x. (Cold(x) & -Sunburn(x)) & (Red(x) & -Sunburn(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 174,
  "responses": [
   "<EVALUATE>\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\nTEXT: The cow likes the squirrel.\nFOL: all x. (Cow(x) -> likes(x, Squirrel(x)))\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> Nice(x))\nTEXT: The lion likes the squirrel.\nFOL: all x. (Lion(x) -> likes(x, Squirrel(x)))\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> Nice(x))\nTEXT: The lion likes the squirrel.\nFOL: all x. (Lion(x) -> likes(x, Squirrel(x)))\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\nTEXT: The cow likes the squirrel.\nFOL: all x. (Cow(x) -> likes(x, Squirrel(x)))\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> Nice(x))\nTEXT: The lion likes the squirrel.\nFOL: all x. (Lion(x) -> likes(x, Squirrel(x)))\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> Nice(x))\nTEXT: The lion likes the squirrel.\nFOL: all x. (Lion(x) -> likes(x, Squirrel(x)))\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\nTEXT: The cow likes the squirrel.\nFOL: all x. (Cow(x) -> likes(x, Squirrel(x)))\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is nice.\nFOL",
   "<EVALUATE>\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\nTEXT: The cow likes the squirrel.\nFOL: all x. (Cow(x) -> likes(x, Squirrel(x)))\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> Nice(x))\nTEXT: The lion likes the squirrel.\nFOL: all x. (Lion(x) -> likes(x, Squirrel(x)))\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> Nice(x))\nTEXT: The lion likes the squirrel.\nFOL: all x. (Lion(x) -> likes(x, Squirrel(x)))\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\nTEXT: The cow likes the squirrel.\nFOL: all x. (Cow(x) -> likes(x, Squirrel(x)))\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> Nice(x))\nTEXT: The lion likes the squirrel.\nFOL: all x. (Lion(x) -> likes(x, Squirrel(x)))\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\nTEXT: The cow likes the squirrel.\nFOL: all x. (Cow(x) -> likes(x, Squirrel(x)))\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> Nice(x))\nTEXT: The lion likes the squirrel.\nFOL: all x. (Lion(x) -> likes(x, Squirrel(x)))\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\nTEXT: The cow likes the squirrel.\nFOL: all x. (Cow(x) -> likes(x, Squirrel(x)))\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\nTEXT: The lion eats the squirrel.\nFOL: all",
   "<EVALUATE>\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\nTEXT: The cow likes the squirrel.\nFOL: all x. (Cow(x) -> likes(x, Squirrel(x)))\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> Nice(x))\nTEXT: The lion likes the squirrel.\nFOL: all x. (Lion(x) -> likes(x, Squirrel(x)))\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> Nice(x))\nTEXT: The lion likes the squirrel.\nFOL: all x. (Lion(x) -> likes(x, Squirrel(x)))\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\nTEXT: The cow likes the squirrel.\nFOL: all x. (Cow(x) -> likes(x, Squirrel(x)))\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> Nice(x))\nTEXT: The lion likes the squirrel.\nFOL: all x. (Lion(x) -> likes(x, Squirrel(x)))\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\nTEXT: The cow likes the squirrel.\nFOL: all x. (Cow(x) -> likes(x, Squirrel(x)))\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> Nice(x))\nTEXT: The lion likes the squirrel.\nFOL: all x. (Lion(x) -> likes(x, Squirrel(x)))\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is nice.\nFOL",
   "<EVALUATE>\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\nTEXT: The cow likes the squirrel.\nFOL: all x. (Cow(x) -> likes(x, Squirrel(x)))\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> Nice(x))\nTEXT: The lion likes the squirrel.\nFOL: all x. (Lion(x) -> likes(x, Squirrel(x)))\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> Nice(x))\nTEXT: The lion likes the squirrel.\nFOL: all x. (Lion(x) -> likes(x, Squirrel(x)))\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\nTEXT: The cow likes the squirrel.\nFOL: all x. (Cow(x) -> likes(x, Squirrel(x)))\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> Nice(x))\nTEXT: The lion likes the squirrel.\nFOL: all x. (Lion(x) -> likes(x, Squirrel(x)))\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\nTEXT: The cow likes the squirrel.\nFOL: all x. (Cow(x) -> likes(x, Squirrel(x)))\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> Nice(x))\nTEXT: The lion likes the squirrel.\nFOL: all x. (Lion(x) -> likes(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> Nice(x))\nTEXT: The lion likes the squirrel.\nFOL: all x. (Lion(x) -> likes(x, Squirrel(x)))\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x)",
   "<EVALUATE>\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\nTEXT: The cow likes the squirrel.\nFOL: all x. (Cow(x) -> likes(x, Squirrel(x)))\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> Nice(x))\nTEXT: The lion likes the squirrel.\nFOL: all x. (Lion(x) -> likes(x, Squirrel(x)))\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> Nice(x))\nTEXT: The lion likes the squirrel.\nFOL: all x. (Lion(x) -> likes(x, Squirrel(x)))\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\nTEXT: The cow likes the squirrel.\nFOL: all x. (Cow(x) -> likes(x, Squirrel(x)))\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> Nice(x))\nTEXT: The lion likes the squirrel.\nFOL: all x. (Lion(x) -> likes(x, Squirrel(x)))\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\nTEXT: The cow is blue.\nFOL: all x. (Cow(x) -> Blue(x))\nTEXT: The cow likes the squirrel.\nFOL: all x. (Cow(x) -> likes(x, Squirrel(x)))\nTEXT: The cow sees the lion.\nFOL: all x. (Cow(x) -> sees(x, Lion(x)))\nTEXT: The lion eats the cow.\nFOL: all x. (Lion(x) -> eats(x, Cow(x)))\nTEXT: The lion eats the squirrel.\nFOL: all x. (Lion(x) -> eats(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> Nice(x))\nTEXT: The lion likes the squirrel.\nFOL: all x. (Lion(x) -> likes(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion(x) -> Kind(x))\nTEXT: The lion is nice.\nFOL: all x. (Lion(x) -> Nice(x))\nTEXT: The lion likes the squirrel.\nFOL: all x. (Lion(x) -> likes(x, Squirrel(x)))\nTEXT: The lion is big.\nFOL: all x. (Lion(x) -> Big(x))\nTEXT: The lion is kind.\nFOL: all x. (Lion"
  ]
 },
 {
  "index": 175,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> -Cold(x))\nTEXT: Bob is nice.\nFOL: all x. (Bob(x) -> -Nice(x))\nTEXT: Erin is red.\nFOL: all x. (Erin(x) -> -Red(x))\nTEXT: Harry is not smart.\nFOL: all x. (Harry(x) -> -Smart(x))\nTEXT: Furry things are quiet.\nFOL: all x. (FurryThing(x) -> -Quiet(x))\nTEXT: Red, quiet things are young.\nFOL: all x. (Red(x) & Quiet(x) -> Young(x))\nTEXT: All cold, nice things are furry.\nFOL: all x. (Cold(x) & Nice(x) -> Furry(x))\nTEXT: Red things are furry.\nFOL: all x. (Red(x) -> Furry(x))\nTEXT: If something is quiet and cold then it is furry.\nFOL: all x. (Quiet(x) & Cold(x) -> Furry(x))\nTEXT: If something is red then it is smart.\nFOL: all x. (Red(x) -> Smart(x))\nTEXT: Erin is cold.\nFOL: -Cold(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> -Cold(x))\nTEXT: Bob is nice.\nFOL: all x. (Bob(x) -> -Nice(x))\nTEXT: Erin is red.\nFOL: all x. (Erin(x) -> -Red(x))\nTEXT: Harry is not smart.\nFOL: all x. (Harry(x) -> -Smart(x))\nTEXT: Furry things are quiet.\nFOL: all x. (FurryThing(x) -> -Quiet(x))\nTEXT: Red, quiet things are young.\nFOL: all x. (Red(x) & Quiet(x) -> Young(x))\nTEXT: All cold, nice things are furry.\nFOL: all x. (Cold(x) & Nice(x) -> Furry(x))\nTEXT: Red things are furry.\nFOL: all x. (Red(x) -> Furry(x))\nTEXT: If something is quiet and cold then it is furry.\nFOL: all x. (Quiet(x) & Cold(x) -> Furry(x))\nTEXT: If something is red then it is smart.\nFOL: all x. (Red(x) -> Smart(x))\nTEXT: Erin is cold.\nFOL: Erin(x) -> -Cold(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> -Cold(x))\nTEXT: Bob is nice.\nFOL: all x. (Bob(x) -> -Nice(x))\nTEXT: Erin is red.\nFOL: all x. (Erin(x) -> -Red(x))\nTEXT: Harry is not smart.\nFOL: all x. (Harry(x) -> -Smart(x))\nTEXT: Furry things are quiet.\nFOL: all x. (FurryThing(x) -> -Quiet(x))\nTEXT: Red, quiet things are young.\nFOL: all x. (Red(x) & Quiet(x) -> Young(x))\nTEXT: All cold, nice things are furry.\nFOL: all x. (Cold(x) & Nice(x) -> Furry(x))\nTEXT: Red things are furry.\nFOL: all x. (Red(x) -> Furry(x))\nTEXT: If something is quiet and cold then it is furry.\nFOL: all x. (Quiet(x) & Cold(x) -> Furry(x))\nTEXT: If something is red then it is smart.\nFOL: all x. (Red(x) -> Smart(x))\nTEXT: Erin is cold.\nFOL: all x. (Erin(x) -> -Cold(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: all x. (Cold(x) -> -Anne(x))\nTEXT: Bob is nice.\nFOL: all x. (Nice(x) -> -Bob(x))\nTEXT: Erin is red.\nFOL: all x. (Red(x) -> -Erin(x))\nTEXT: Harry is not smart.\nFOL: all x. (Smart(x) -> -Harry(x))\nTEXT: Furry things are quiet.\nFOL: all x. (Furry(x) -> -Quiet(x))\nTEXT: Red, quiet things are young.\nFOL: all x. (Quiet(x) -> Young(x))\nTEXT: All cold, nice things are furry.\nFOL: all x. (Cold(x) & Nice(x) -> -Furry(x))\nTEXT: Red things are furry.\nFOL: all x. (Red(x) -> -Furry(x))\nTEXT: If something is quiet and cold then it is furry.\nFOL: -Quiet(x) & -Cold(x) -> -Furry(x)\nTEXT: If something is red then it is smart.\nFOL: -Red(x) -> -Smart(x)\nTEXT: Erin is cold.\nFOL: -Cold(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: all x. (Cold(x) -> -Anne(x))\nTEXT: Bob is nice.\nFOL: all x. (Nice(x) -> -Bob(x))\nTEXT: Erin is red.\nFOL: all x. (Red(x) -> -Erin(x))\nTEXT: Harry is not smart.\nFOL: all x. (Smart(x) -> -Harry(x))\nTEXT: Furry things are quiet.\nFOL: all x. (Furry(x) -> -Quiet(x))\nTEXT: Red, quiet things are young.\nFOL: all x. (Quiet(x) -> Young(x))\nTEXT: All cold, nice things are furry.\nFOL: all x. (Cold(x) & Nice(x) -> -Furry(x))\nTEXT: Red things are furry.\nFOL: all x. (Red(x) -> -Furry(x))\nTEXT: If something is quiet and cold then it is furry.\nFOL: -Quiet(x) & -Cold(x) -> -Furry(x)\nTEXT: If something is red then it is smart.\nFOL: -Red(x) -> Smart(x)\nTEXT: Erin is cold.\nFOL: -Cold(erin)\n</EVALUATE>"
  ]
 },
 {
  "index": 176,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> -Cold(x))\nTEXT: Anne is nice.\nFOL: all x. (Anne(x) -> Nice(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Anne is white.\nFOL: all x. (Anne(x) -> -White(x))\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> -Round(x))\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> -White(x))\nTEXT: All round, red people are cold.\nFOL: all x. (Round(x) & Red(x) & -Cold(x))\nTEXT: White, round people are cold.\nFOL: all x. (Round(x) & -White(x) & -Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x. (Nice(x) & Round(x) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x. (Smart(x) & -Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: White people are round.\nFOL: all x. (White(x) -> -Round(x))\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> -Cold(x))\nTEXT: Anne is nice.\nFOL: all x. (Anne(x) -> Nice(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Anne is white.\nFOL: all x. (Anne(x) -> -White(x))\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> -Round(x))\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> -White(x))\nTEXT: All round, red people are cold.\nFOL: all x. (Round(x) & Red(x) & -Cold(x))\nTEXT: White, round people are cold.\nFOL: all x. (Round(x) & -White(x) & -Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x. (Nice(x) & Round(x) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x. (Smart(x) & -Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: White people are round.\nFOL: all x. (White(x) -> -Round(x))\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> -Big(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> -Cold(x))\nTEXT: Anne is nice.\nFOL: all x. (Anne(x) -> Nice(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Anne is white.\nFOL: all x. (Anne(x) -> -White(x))\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> -Round(x))\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> -White(x))\nTEXT: All round, red people are cold.\nFOL: all x. (Round(x) & Red(x) & -Cold(x))\nTEXT: White, round people are cold.\nFOL: all x. (Round(x) & White(x) & -Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x. ((Nice(x) & Round(x)) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x. (Smart(x) & -Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: all x. (Round(x) -> -Cold(x))\nTEXT: White people are round.\nFOL: all x. (White(x) -> -Round(x))\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> -Cold(x))\nTEXT: Anne is nice.\nFOL: all x. (Anne(x) -> Nice(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Anne is white.\nFOL: all x. (Anne(x) -> -White(x))\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> -Round(x))\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> -White(x))\nTEXT: All round, red people are cold.\nFOL: all x y. (Round(x) & Red(x) & -Cold(x) & -White(x) -> Cold(x))\nTEXT: White, round people are cold.\nFOL: all x y. (White(x) & Round(x) & -Cold(x) & -White(x) -> Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x y. (Nice(x) & Round(x) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x y. (Smart(x) & -Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: all x y. (Anne(x) & -Round(x) -> -Cold(x))\nTEXT: White people are round.\nFOL: all x y. (White(x) & -Round(x) -> -Round(x))\nTEXT: Fiona is big.\nFOL: all x y. (Fiona(x) & -Big(x) -> -Round(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: all x. (Anne(x) -> Big(x))\nTEXT: Anne is cold.\nFOL: all x. (Anne(x) -> -Cold(x))\nTEXT: Anne is nice.\nFOL: all x. (Anne(x) -> Nice(x))\nTEXT: Anne is smart.\nFOL: all x. (Anne(x) -> Smart(x))\nTEXT: Anne is white.\nFOL: all x. (Anne(x) -> -White(x))\nTEXT: Bob is big.\nFOL: all x. (Bob(x) -> Big(x))\nTEXT: Bob is red.\nFOL: all x. (Bob(x) -> -Red(x))\nTEXT: Bob is round.\nFOL: all x. (Bob(x) -> -Round(x))\nTEXT: Bob is smart.\nFOL: all x. (Bob(x) -> Smart(x))\nTEXT: Fiona is nice.\nFOL: all x. (Fiona(x) -> Nice(x))\nTEXT: Fiona is round.\nFOL: all x. (Fiona(x) -> -Round(x))\nTEXT: Fiona is white.\nFOL: all x. (Fiona(x) -> -White(x))\nTEXT: All round, red people are cold.\nFOL: all x y. (Round(x) & Red(x) & -Cold(x) & -White(x) -> Cold(x))\nTEXT: White, round people are cold.\nFOL: all x y. (White(x) & Round(x) & -Cold(x) & -White(x) -> Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x y. (Nice(x) & Round(x) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x y. (Smart(x) & -Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: all x y. (Anne(x) & -Round(x) -> -Cold(x))\nTEXT: White people are round.\nFOL: all x y. (White(x) & -Round(x) -> -Round(x))\nTEXT: Fiona is big.\nFOL: all x. (Fiona(x) -> Big(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 177,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle eats the squirrel.\nFOL: all x y. (BaldEagle(x) & Squirrel(y) & Eat(x, y) -> SquirrelEatsBaldEagle(x, y))\nTEXT: The squirrel eats the bald eagle.\nFOL: all x y. (Squirrel(x) & BaldEagle(y) & Eat(x, y) -> BaldEagleEatsSquirrel(x, y))\nTEXT: The squirrel is kind.\nFOL: all x. (Squirrel(x) -> Kind(x))\nTEXT: If someone sees the squirrel then the squirrel eats the bald eagle.\nFOL: all x y. (See(x) & Squirrel(y) & Eat(x, y) & SquirrelEatsBaldEagle(x, y))\nTEXT: If someone needs the bald eagle then the bald eagle does not see the squirrel.\nFOL: all x y. (Need(x) & BaldEagle(y) & See(x, y) & -See(x, y) & BaldEagleDoesNotSeeSquirrel(x, y))\nTEXT: If someone needs the bald eagle and they do not eat the squirrel then they need the squirrel.\nFOL: all x y. (Need(x) & BaldEagle(y) & Eat(x, y) & -Eat(x, y) & Need(x, y))\nTEXT: If the bald eagle eats the squirrel then the squirrel does not see the bald eagle.\nFOL: all x y. (Eat(x, y) & Squirrel(y) & -See(x, y) & SquirrelDoesNotSeeBaldEagle(x, y))\nTEXT: If someone eats the squirrel then they need the bald eagle.\nFOL: all x y. (See(x) & Squirrel(y) & Eat(x, y) & Need(x, y))\nTEXT: If someone needs the bald eagle and the bald eagle does not see the squirrel then the bald eagle is nice.\nFOL: all x y. (Need(x) & BaldEagle(y) & -See(x, y) & BaldEagleIsNice(x, y))\nTEXT: The bald eagle is nice.\nFOL: all x. (BaldEagle(x) -> Nice(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the squirrel.\nFOL: all x y. (BaldEagle(x) & Squirrel(y) & Eat(x, y) -> SquirrelEatsBaldEagle(x, y))\nTEXT: The squirrel eats the bald eagle.\nFOL: all x y. (Squirrel(x) & BaldEagle(y) & Eat(x, y) -> BaldEagleEatsSquirrel(x, y))\nTEXT: The squirrel is kind.\nFOL: all x. (Squirrel(x) -> Kind(x))\nTEXT: If someone sees the squirrel then the squirrel eats the bald eagle.\nFOL: all x y. (See(x) & Squirrel(y) & Eat(x, y) & SquirrelEatsBaldEagle(x, y))\nTEXT: If someone needs the bald eagle then the bald eagle does not see the squirrel.\nFOL: all x y. (Need(x) & BaldEagle(y) & See(x, y) & -See(x, y) & BaldEagleDoesNotSeeSquirrel(x, y))\nTEXT: If someone needs the bald eagle and they do not eat the squirrel then they need the squirrel.\nFOL: all x y. (Need(x) & BaldEagle(y) & Eat(x, y) & -Eat(x, y) & Need(x, y))\nTEXT: If the bald eagle eats the squirrel then the squirrel does not see the bald eagle.\nFOL: all x y. (Eat(x, y) & Squirrel(y) & See(x, y) & -See(x, y) & SquirrelDoesNotSeeBaldEagle(x, y))\nTEXT: If someone eats the squirrel then they need the bald eagle.\nFOL: all x y. (Eat(x, y) & Squirrel(y) & Need(x, y) & -Need(x, y) & Eat(x, y))\nTEXT: If someone needs the bald eagle and the bald eagle does not see the squirrel then the bald eagle is nice.\nFOL: all x y. (Need(x) & BaldEagle(y) & -See(x, y) & BaldEagleDoesNotSeeSquirrel(x, y) & Nice(x, y))\nTEXT: The bald eagle is nice.\nFOL: all x. (BaldEagle(x) -> Nice(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the squirrel.\nFOL: all x y. (BaldEagle(x) & Squirrel(y) & Eat(x, y) -> SquirrelEatsBaldEagle(x, y))\nTEXT: The squirrel eats the bald eagle.\nFOL: all x y. (Squirrel(x) & BaldEagle(y) & Eat(x, y) -> BaldEagleEatsSquirrel(x, y))\nTEXT: The squirrel is kind.\nFOL: all x. (Squirrel(x) -> Kind(x))\nTEXT: If someone sees the squirrel then the squirrel eats the bald eagle.\nFOL: all x y. (See(x) & Squirrel(y) & Eat(x, y) & SquirrelEatsBaldEagle(x, y))\nTEXT: If someone needs the bald eagle then the bald eagle does not see the squirrel.\nFOL: all x y. (Need(x) & BaldEagle(y) & See(x, y) & -See(x, y) & BaldEagleDoesNotSeeSquirrel(x, y))\nTEXT: If someone needs the bald eagle and they do not eat the squirrel then they need the squirrel.\nFOL: all x y. (Need(x) & BaldEagle(y) & Eat(x, y) & -Eat(x, y) & Need(x, y))\nTEXT: If the bald eagle eats the squirrel then the squirrel does not see the bald eagle.\nFOL: all x y. (Eat(x, y) & Squirrel(y) & See(x, y) & -See(x, y) & SquirrelDoesNotSeeBaldEagle(x, y))\nTEXT: If someone eats the squirrel then they need the bald eagle.\nFOL: all x y. (Eat(x, y) & Squirrel(y) & Need(x, y) & -Eat(x, y) & Need(x, y))\nTEXT: If someone needs the bald eagle and the bald eagle does not see the squirrel then the bald eagle is nice.\nFOL: all x y. (Need(x) & BaldEagle(y) & -See(x, y) & BaldEagleDoesNotSeeSquirrel(x, y) & Nice(x, y))\nTEXT: The bald eagle is nice.\nFOL: all x. (BaldEagle(x) -> Nice(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the squirrel.\nFOL: all x y. (BaldEagle(x) & Squirrel(y) & Eat(x, y) -> SquirrelEatsBaldEagle(x, y))\nTEXT: The squirrel eats the bald eagle.\nFOL: all x y. (Squirrel(x) & BaldEagle(y) & Eat(x, y) -> BaldEagleEatsSquirrel(x, y))\nTEXT: The squirrel is kind.\nFOL: all x. (Squirrel(x) -> Kind(x))\nTEXT: If someone sees the squirrel then the squirrel eats the bald eagle.\nFOL: all x y. (See(x) & Squirrel(y) & Eat(x, y) & SquirrelEatsBaldEagle(x, y))\nTEXT: If someone needs the bald eagle then the bald eagle does not see the squirrel.\nFOL: all x y. (Need(x) & BaldEagle(y) & See(x, y) & -See(x, y) & BaldEagleDoesNotSeeSquirrel(x, y))\nTEXT: If someone needs the bald eagle and they do not eat the squirrel then they need the squirrel.\nFOL: all x y. (Need(x) & BaldEagle(y) & Eat(x, y) & -Eat(x, y) & Need(x, y))\nTEXT: If the bald eagle eats the squirrel then the squirrel does not see the bald eagle.\nFOL: all x y. (Eat(x, y) & Squirrel(y) & See(x, y) & -See(x, y) & SquirrelDoesNotSeeBaldEagle(x, y))\nTEXT: If someone eats the squirrel then they need the bald eagle.\nFOL: all x y. (See(x) & Squirrel(y) & Eat(x, y) & -Eat(x, y) & Need(x, y))\nTEXT: If someone needs the bald eagle and the bald eagle does not see the squirrel then the bald eagle is nice.\nFOL: all x y. (Need(x) & BaldEagle(y) & -See(x, y) & BaldEagleDoesNotSeeSquirrel(x, y) & Nice(x, y))\nTEXT: The bald eagle is nice.\nFOL: all x. (BaldEagle(x) -> Nice(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the squirrel.\nFOL: all x y. (BaldEagle(x) & Squirrel(y) & Eat(x, y) -> SquirrelEatsBaldEagle(x, y))\nTEXT: The squirrel eats the bald eagle.\nFOL: all x y. (Squirrel(x) & BaldEagle(y) & Eat(x, y) -> BaldEagleEatsSquirrel(x, y))\nTEXT: The squirrel is kind.\nFOL: all x. (Squirrel(x) -> Kind(x))\nTEXT: If someone sees the squirrel then the squirrel eats the bald eagle.\nFOL: all x y. (See(x) & Squirrel(y) & Eat(x, y) & SquirrelEatsBaldEagle(x, y))\nTEXT: If someone needs the bald eagle then the bald eagle does not see the squirrel.\nFOL: all x y. (Need(x) & BaldEagle(y) & See(x, y) & -See(x, y) & BaldEagleDoesNotSeeSquirrel(x, y))\nTEXT: If someone needs the bald eagle and they do not eat the squirrel then they need the squirrel.\nFOL: all x y. (Need(x) & BaldEagle(y) & Eat(x, y) & -Eat(x, y) & Need(x, y))\nTEXT: If the bald eagle eats the squirrel then the squirrel does not see the bald eagle.\nFOL: all x y. (Eat(x, y) & Squirrel(y) & -See(x, y) & SquirrelDoesNotSeeBaldEagle(x, y))\nTEXT: If someone eats the squirrel then they need the bald eagle.\nFOL: all x y. (Eat(x, y) & Squirrel(y) & -See(x, y) & Need(x, y))\nTEXT: If someone needs the bald eagle and the bald eagle does not see the squirrel then the bald eagle is nice.\nFOL: all x y. (Need(x) & BaldEagle(y) & -See(x, y) & BaldEagleDoesNotSeeSquirrel(x, y) & Nice(x, y))\nTEXT: The bald eagle is nice.\nFOL: all x. (BaldEagle(x) -> Nice(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 178,
  "responses": [
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Person(x) -> Nice(x))\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Person(x) -> Nice(x) & Cold(x))\nTEXT: Dave is nice and kind,though he's also rather cold.\nFOL: all x. (Person(x) -> Nice(x) & Kind(x))\nTEXT: Look, we know Gary is young and rough.\nFOL: all x. (Person(x) -> Young(x) & Rough(x))\nTEXT: We have to accept he's also red, nice, cold, and blue.\nFOL: all x. (Person(x) -> Red(x) & Nice(x) & Cold(x) & Blue(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & Nice(x) & -Red(x) & -Blue(x))\nTEXT: A blue, cold natured person will be rough textured.\nFOL: all x. (Person(x) -> Blue(x) & Cold(x) & Rough(x))\nTEXT: People of young age are rough and cold but some are nice.\nFOL: all x. (Person(x) -> Young(x) & Rough(x) & Cold(x)) & some x. (Person(x) -> Nice(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Person(x) -> Young(x) & Red(x) & Hands(x) & Rough(x))\nTEXT: People who are young are also blue.\nFOL: all x. (Person(x) -> Young(x) & Blue(x))\nTEXT: Gary is green.\nFOL: all x. (Person(x) -> Green(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Person(x) -> Nice(x))\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Person(x) -> -Cold(x) & Name(x) -> Named(x))\nTEXT: Dave is nice and kind,though he's also rather cold.\nFOL: all x. (Person(x) -> Nice(x) & Kind(x))\nTEXT: Look, we know Gary is young and rough.\nFOL: all x. (Person(x) -> Young(x) & Rough(x))\nTEXT: We have to accept he's also red, nice, cold, and blue.\nFOL: all x. (Person(x) -> Red(x) & Nice(x) & Cold(x) & Blue(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & Nice(x) & -Red(x) & -Blue(x))\nTEXT: A blue, cold natured person will be rough textured.\nFOL: all x. (Person(x) -> Blue(x) & Cold(x) & Rough(x))\nTEXT: People of young age are rough and cold but some are nice.\nFOL: all x. (Person(x) -> Young(x) & Rough(x) & Cold(x)) & some x. (Person(x) -> Nice(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Person(x) -> Young(x) & Red(x) & Hands(x) & Rough(x))\nTEXT: People who are young are also blue.\nFOL: all x. (Person(x) -> Young(x) & Blue(x))\nTEXT: Gary is green.\nFOL: all x. (Person(x) -> Green(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Person(x) -> Nice(x))\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Person(x) -> Nice(x) & Cold(x))\nTEXT: Dave is nice and kind,though he's also rather cold.\nFOL: all x. (Person(x) -> Nice(x) & Kind(x))\nTEXT: Look, we know Gary is young and rough.\nFOL: all x. (Person(x) -> Young(x) & Rough(x))\nTEXT: We have to accept he's also red, nice, cold, and blue.\nFOL: all x. (Person(x) -> Red(x) & Nice(x) & Cold(x) & Blue(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & Nice(x) & -Red(x) & -Blue(x))\nTEXT: A blue, cold natured person will be rough textured.\nFOL: all x. (Person(x) -> Blue(x) & Cold(x) & Rough(x))\nTEXT: People of young age are rough and cold but some are nice.\nFOL: all x. (Person(x) -> Young(x) & Rough(x) & Cold(x)) & some x. (Person(x) -> Nice(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Person(x) -> Young(x) & Red(x) & Hands(x) & Rough(x))\nTEXT: People who are young are also blue.\nFOL: all x. (Person(x) -> Young(x) & Blue(x))\nTEXT: Gary is green.\nFOL: all x. (Person(x) -> Green(x))",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Person(x) -> Nice(x))\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Person(x) -> -Cold(x) & Name(x) -> Named(x))\nTEXT: Dave is nice and kind,though he's also rather cold.\nFOL: all x. (Person(x) -> Nice(x) & Kind(x))\nTEXT: Look, we know Gary is young and rough.\nFOL: all x. (Person(x) -> Young(x) & Rough(x))\nTEXT: We have to accept he's also red, nice, cold, and blue.\nFOL: all x. (Person(x) -> Red(x) & Nice(x) & Cold(x) & Blue(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & Nice(x) & -Red(x) & -Blue(x))\nTEXT: A blue, cold natured person will be rough textured.\nFOL: all x. (Person(x) -> Blue(x) & Cold(x) & Rough(x))\nTEXT: People of young age are rough and cold but some are nice.\nFOL: all x. (Person(x) -> Young(x) & Rough(x) & Cold(x)) & some x. (Person(x) -> Nice(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Person(x) -> Young(x) & Red(x) & Hands(x) & Rough(x))\nTEXT: People who are young are also blue.\nFOL: all x. (Person(x) -> Young(x) & Blue(x))\nTEXT: Gary is green.\nFOL: all x. (Person(x) -> Green(x))",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Person(x) -> Nice(x))\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Person(x) -> -Cold(x) & Name(x) -> Named(x))\nTEXT: Dave is nice and kind,though he's also rather cold.\nFOL: all x. (Person(x) -> Nice(x) & Kind(x))\nTEXT: Look, we know Gary is young and rough.\nFOL: all x. (Person(x) -> Young(x) & Rough(x))\nTEXT: We have to accept he's also red, nice, cold, and blue.\nFOL: all x. (Person(x) -> Red(x) & Nice(x) & Cold(x) & Blue(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: some x. (Cold(x) & Nice(x) & -Red(x) & -Blue(x))\nTEXT: A blue, cold natured person will be rough textured.\nFOL: all x. (Person(x) -> Blue(x) & Cold(x) & Rough(x))\nTEXT: People of young age are rough and cold but some are nice.\nFOL: all x. (Person(x) -> Young(x) & Rough(x) & Cold(x) & Nice(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Person(x) -> Young(x) & Red(x) & Hands(x) & Rough(x))\nTEXT: People who are young are also blue.\nFOL: all x. (Person(x) -> Young(x) & Blue(x))\nTEXT: Gary is green.\nFOL: all x. (Person(x) -> Green(x))"
  ]
 },
 {
  "index": 179,
  "responses": [
   "<EVALUATE>\nTEXT: Bob may be round, but he is also kind.\nFOL: all x. (Bob(x) -> -Round(x) & -Kind(x))\nTEXT: Charlie may be round, but he is also kind.\nFOL: all x. (Charlie(x) -> -Round(x) & -Kind(x))\nTEXT: Dave may be round, but he is also kind.\nFOL: all x. (Dave(x) -> -Round(x) & -Kind(x))\nTEXT: Eric is green and cold too.\nFOL: all x. (Eric(x) -> Green(x) & Cold(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: Green(x) & Young(x) & Round(x) -> Rough(x)\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) & Little(x) & Green(x))\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: Rough(x) & Kind(x) -> Cold(x)\nTEXT: A kind person will certainly be rough as well.\nFOL: Kind(x) -> Rough(x)\nTEXT: Nice people who feel blue often look green when ill.\nFOL: Nice(x) & FeelBlue(x) -> Green(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: -Cold(x) & -Round(x) -> Red(x)\nTEXT: Dave is kind.\nFOL: Dave(x) -> Kind(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob may be round, but he is also kind.\nFOL: all x. (Bob(x) -> -Round(x) & -Kind(x))\nTEXT: Charlie may be round, but he is also kind.\nFOL: all x. (Charlie(x) -> -Round(x) & -Kind(x))\nTEXT: Dave may be round, but he is also kind.\nFOL: all x. (Dave(x) -> -Round(x) & -Kind(x))\nTEXT: Eric is green and cold too.\nFOL: all x. (Eric(x) -> Green(x) & Cold(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: Green(x) & Young(x) & Round(x) -> Rough(x)\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) & Little(x) & Green(x))\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: Rough(x) & Kind(x) -> Cold(x)\nTEXT: A kind person will certainly be rough as well.\nFOL: Kind(x) -> Rough(x)\nTEXT: Nice people who feel blue often look green when ill.\nFOL: Nice(x) & FeelBlue(x) -> Green(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: Cold(x) & Round(x) -> Red(x)\nTEXT: Dave is kind.\nFOL: Dave(x) -> Kind(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob may be round, but he is also kind.\nFOL: all x. (Bob(x) -> -Round(x) & -Kind(x))\nTEXT: Charlie may be round, but he is also kind.\nFOL: all x. (Charlie(x) -> -Round(x) & -Kind(x))\nTEXT: Dave may be round, but he is also kind.\nFOL: all x. (Dave(x) -> -Round(x) & -Kind(x))\nTEXT: Eric is green and cold too.\nFOL: all x. (Eric(x) -> Green(x) & Cold(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: Green(x) & Young(x) & Round(x) -> Rough(x)\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) & Little(x) & Green(x))\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: Rough(x) & Kind(x) -> Cold(x)\nTEXT: A kind person will certainly be rough as well.\nFOL: Kind(x) -> Rough(x)\nTEXT: Nice people who feel blue often look green when ill.\nFOL: Nice(x) & FeelBlue(x) & Green(x) -> Ill(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: -Cold(x) & -Round(x) -> Red(x)\nTEXT: Dave is kind.\nFOL: Dave(x) -> Kind(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob may be round, but he is also kind.\nFOL: all x. (Bob(x) -> -Round(x) & -Kind(x))\nTEXT: Charlie may be round, but he is also kind.\nFOL: all x. (Charlie(x) -> -Round(x) & -Kind(x))\nTEXT: Dave may be round, but he is also kind.\nFOL: all x. (Dave(x) -> -Round(x) & -Kind(x))\nTEXT: Eric is green and cold too.\nFOL: all x. (Eric(x) -> Green(x) & Cold(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: Green(x) & Young(x) & Round(x) -> Rough(x)\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) & Little(x) & Green(x))\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: Rough(x) & Kind(x) -> Cold(x)\nTEXT: A kind person will certainly be rough as well.\nFOL: -Kind(x) -> Rough(x)\nTEXT: Nice people who feel blue often look green when ill.\nFOL: Nice(x) & FeelBlue(x) -> Green(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: -Cold(x) & -Round(x) -> Red(x)\nTEXT: Dave is kind.\nFOL: Dave(x) -> Kind(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob may be round, but he is also kind.\nFOL: all x. (Bob(x) -> -Round(x) & -Kind(x))\nTEXT: Charlie may be round, but he is also kind.\nFOL: all x. (Charlie(x) -> -Round(x) & -Kind(x))\nTEXT: Dave may be round, but he is also kind.\nFOL: all x. (Dave(x) -> -Round(x) & -Kind(x))\nTEXT: Eric is green and cold too.\nFOL: all x. (Eric(x) -> Green(x) & Cold(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: Green(x) & Young(x) & Round(x) -> Rough(x)\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) & Little(x) & Green(x))\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: Rough(x) & Kind(x) -> Cold(x)\nTEXT: A kind person will certainly be rough as well.\nFOL: -Kind(x) -> Rough(x)\nTEXT: Nice people who feel blue often look green when ill.\nFOL: Nice(x) & FeelBlue(x) & Green(x) -> Ill(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: -Cold(x) & -Round(x) -> Red(x)\nTEXT: Dave is kind.\nFOL: Dave(x) -> Kind(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 180,
  "responses": [
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & Eat(x, y) -> Round(x, y))\nTEXT: The rabbit eats the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & Eat(x, y) -> Round(x, y))\nTEXT: The tiger sees the cat.\nFOL: all x y. (Tiger(x) & Cat(y) & See(x, y) -> Round(x, y))\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: all x y. (Tiger(x) & Rabbit(y) & -See(x, y) & Round(x, y))\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: all x y. (Cat(x) & Tiger(y) & -Need(x, y) & Round(x, y))\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: all x y. (Need(x, y) & Cat(x) & -Need(x, y) & -Cat(x))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x y. (See(x, y) & Tiger(x) & -Big(x, y) & Tiger(x))\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: all x y. (Tiger(x) & Round(x) & -Need(x, y) & Rabbit(y))\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: all x y. (Eat(x, y) & Rabbit(y) & -Need(x, y) & Tiger(x))\nTEXT: The tiger is not round.\nFOL: -Round(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & Eat(x, y) -> Round(x, y))\nTEXT: The rabbit eats the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & Eat(x, y) -> Round(x, y))\nTEXT: The tiger sees the cat.\nFOL: all x y. (Tiger(x) & Cat(y) & See(x, y) -> Round(x, y))\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: all x y. (Tiger(x) & Rabbit(y) & -See(x, y) & Round(x, y))\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: all x y. (Cat(x) & Tiger(y) & -Need(x, y) & Round(x, y))\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: all x y. (Need(x, y) & Cat(x) & -Need(x, y) & -Cat(x))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x y. (See(x, y) & Tiger(x) & -Big(x, y) & Round(x, y))\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: all x y. (Tiger(x) & Round(x, y) & -Need(x, y) & Rabbit(y))\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: all x y. (Eat(x, y) & Rabbit(y) & -Need(x, y) & Tiger(x))\nTEXT: The tiger is not round.\nFOL: -Round(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & Eat(x, y) -> Round(x, y))\nTEXT: The rabbit eats the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & Eat(x, y) -> Round(x, y))\nTEXT: The tiger sees the cat.\nFOL: all x y. (Tiger(x) & Cat(y) & See(x, y) -> Round(x, y))\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: all x y. (Tiger(x) & Rabbit(y) & -See(x, y) & Round(x, y))\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: all x y. (Cat(x) & Tiger(y) & -Need(x, y) & Round(x, y))\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: all x y. (Need(x, y) & Cat(x) & -Need(x, y) & -Cat(x))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x y. (See(x, y) & Tiger(x) & -Big(x, y) & Tiger(x))\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: all x y. (Tiger(x) & Round(x) & -Need(x, y) & Rabbit(y))\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: all x y. (Eat(x, y) & Rabbit(y) & -Need(x, y) & Tiger(y))\nTEXT: The tiger is not round.\nFOL: -Round(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & Eat(x, y) -> Round(x, y))\nTEXT: The rabbit eats the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & Eat(x, y) -> Round(x, y))\nTEXT: The tiger sees the cat.\nFOL: all x y. (Tiger(x) & Cat(y) & See(x, y) -> Round(x, y))\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: all x y. (Tiger(x) & Rabbit(y) & -See(x, y) & Round(x, y))\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: all x y. (Cat(x) & Tiger(y) & -Need(x, y) & Round(x, y))\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: all x y. (Need(x, y) & Cat(x) & -Need(x, y) & -Cat(x))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x y. (See(x, y) & Tiger(x) & -Big(x, y) & Tiger(x))\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: all x y. (Tiger(x) & Round(x) & -Need(x, y) & Rabbit(y))\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: all x y. (Eat(x, y) & Rabbit(y) & -Need(x, y) & Tiger(x))\nTEXT: The tiger is not round.\nFOL: -Tiger(x)",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: all x y. (Cat(x) & Rabbit(y) & Eat(x, y) -> Round(x, y))\nTEXT: The rabbit eats the tiger.\nFOL: all x y. (Rabbit(x) & Tiger(y) & Eat(x, y) -> Round(x, y))\nTEXT: The tiger sees the cat.\nFOL: all x y. (Tiger(x) & Cat(y) & See(x, y) -> Round(x, y))\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: all x y. (Tiger(x) & Rabbit(y) & -See(x, y) & Round(x, y))\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: all x y. (Cat(x) & Tiger(y) & -Need(x, y) & Round(x, y))\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: all x y. (Need(x, y) & Cat(x) & -Need(x, y) & -Cat(x))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x y. (See(x, y) & Tiger(x) & -Big(x, y) & Tiger(x))\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: all x y. (Tiger(x) & Round(x) & -Need(x, y) & Rabbit(y))\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: all x y. (Eat(x, y) & Rabbit(y) & -Need(x, y) & Tiger(y))\nTEXT: The tiger is not round.\nFOL: -Tiger(x)"
  ]
 },
 {
  "index": 181,
  "responses": [
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: all x. (Cow(x) -> -Cold(x))\nTEXT: The dog is cold.\nFOL: all x. (Dog(x) -> -Cold(x))\nTEXT: The dog likes the cow.\nFOL: all x. (Dog(x) & Cow(x) -> Like(x, y))\nTEXT: If someone is big and nice then they need the dog.\nFOL: all x y. (Big(x) & Nice(x) & Need(x, y) -> Dog(x, y))\nTEXT: If someone chases the cow then the cow does not need the dog.\nFOL: all x y. (Chase(x, y) & Cow(x) & -Need(x, y) & Dog(x, y) -> NotNeed(x, y))\nTEXT: If the cow needs the dog and the dog likes the cow then the cow chases the dog.\nFOL: all x y. (Need(x, y) & Like(x, y) & Dog(x, y) & Chase(x, y) -> Cow(x, y))\nTEXT: If someone likes the cow then they do not chase the cow.\nFOL: all x y. (Like(x, y) & Cow(x) & -Chase(x, y) -> NotChase(x, y))\nTEXT: If someone chases the dog and they are not green then they are nice.\nFOL: all x y. (Chase(x, y) & Dog(x) & NotGreen(x) & Nice(x, y))\nTEXT: If someone needs the cow then the cow is not young.\nFOL: all x y. (Need(x, y) & Cow(x) & NotYoung(x, y))\nTEXT: If the dog does not chase the cow then the cow likes the dog.\nFOL: all x y. (NotChase(x, y) & Cow(x) & Like(x, y))\nTEXT: If someone likes the dog then the dog needs the cow.\nFOL: all x y. (Like(x, y) & Dog(x) & Need(x, y))\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> -Big(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: all x. (Cow(x) -> -Cold(x))\nTEXT: The dog is cold.\nFOL: all x. (Dog(x) -> -Cold(x))\nTEXT: The dog likes the cow.\nFOL: all x. (Dog(x) & Cow(x) -> Like(x, y))\nTEXT: If someone is big and nice then they need the dog.\nFOL: all x y. (Big(x) & Nice(x) & Need(x, y) -> Dog(x, y))\nTEXT: If someone chases the cow then the cow does not need the dog.\nFOL: all x y. (Chase(x, y) & Cow(x) & -Need(x, y) & Dog(x, y) -> NotNeed(x, y))\nTEXT: If the cow needs the dog and the dog likes the cow then the cow chases the dog.\nFOL: all x y. (Need(x, y) & Like(x, y) & Dog(x, y) & Chase(x, y) -> Cow(x, y))\nTEXT: If someone likes the cow then they do not chase the cow.\nFOL: all x y. (Like(x, y) & Cow(x) & -Chase(x, y) -> NotChase(x, y))\nTEXT: If someone chases the dog and they are not green then they are nice.\nFOL: all x y. (Chase(x, y) & Dog(x) & NotGreen(x) & Nice(x, y))\nTEXT: If someone needs the cow then the cow is not young.\nFOL: all x y. (Need(x, y) & Cow(x) & -Young(x) & Cow(x, y))\nTEXT: If the dog does not chase the cow then the cow likes the dog.\nFOL: all x y. (NotChase(x, y) & Cow(x) & Like(x, y) & Dog(x, y))\nTEXT: If someone likes the dog then the dog needs the cow.\nFOL: all x y. (Like(x, y) & Dog(x) & Need(x, y) & Cow(x, y))\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> -Big(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: all x. (Cow(x) -> -Cold(x))\nTEXT: The dog is cold.\nFOL: all x. (Dog(x) -> -Cold(x))\nTEXT: The dog likes the cow.\nFOL: all x. (Dog(x) & Cow(x) -> Like(x, y))\nTEXT: If someone is big and nice then they need the dog.\nFOL: all x y. (Big(x) & Nice(x) & Need(x, y) -> Dog(x, y))\nTEXT: If someone chases the cow then the cow does not need the dog.\nFOL: all x y. (Chase(x, y) & Cow(x) & -Need(x, y) & Dog(x, y) -> NotNeed(x, y))\nTEXT: If the cow needs the dog and the dog likes the cow then the cow chases the dog.\nFOL: all x y. (Need(x, y) & Like(x, y) & Dog(x, y) & Chase(x, y) -> Cow(x, y))\nTEXT: If someone likes the cow then they do not chase the cow.\nFOL: all x y. (Like(x, y) & Cow(x) & -Chase(x, y) -> NotChase(x, y))\nTEXT: If someone chases the dog and they are not green then they are nice.\nFOL: all x y. (Chase(x, y) & Dog(x) & -Green(x) & Nice(x, y))\nTEXT: If someone needs the cow then the cow is not young.\nFOL: all x y. (Need(x, y) & Cow(x) & -Young(x) & Cow(x, y))\nTEXT: If the dog does not chase the cow then the cow likes the dog.\nFOL: all x y. (NotChase(x, y) & Cow(x) & Like(x, y) & Dog(x, y))\nTEXT: If someone likes the dog then the dog needs the cow.\nFOL: all x y. (Like(x, y) & Dog(x) & Need(x, y) & Cow(x, y))\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> -Big(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: all x. (Cow(x) -> -Cold(x))\nTEXT: The dog is cold.\nFOL: all x. (Dog(x) -> -Cold(x))\nTEXT: The dog likes the cow.\nFOL: all x. (Dog(x) & Cow(x) -> Like(x, y))\nTEXT: If someone is big and nice then they need the dog.\nFOL: all x y. (Big(x) & Nice(x) & Need(x, y) -> Dog(x, y))\nTEXT: If someone chases the cow then the cow does not need the dog.\nFOL: all x y. (Chase(x, y) & Cow(x) & -Need(x, y) & Dog(x, y) -> NotNeed(x, y))\nTEXT: If the cow needs the dog and the dog likes the cow then the cow chases the dog.\nFOL: all x y. (Need(x, y) & Like(x, y) & Dog(x, y) & Chase(x, y) -> Cow(x, y))\nTEXT: If someone likes the cow then they do not chase the cow.\nFOL: all x y. (Like(x, y) & Cow(x) & -Chase(x, y) -> NotChase(x, y))\nTEXT: If someone chases the dog and they are not green then they are nice.\nFOL: all x y. (Chase(x, y) & Dog(x) & NotGreen(x) & Nice(x, y))\nTEXT: If someone needs the cow then the cow is not young.\nFOL: all x y. (Need(x, y) & Cow(x) & NotYoung(x, y))\nTEXT: If the dog does not chase the cow then the cow likes the dog.\nFOL: all x y. (NotChase(x, y) & Cow(x) & Like(x, y))\nTEXT: If someone likes the dog then the dog needs the cow.\nFOL: all x y. (Like(x, y) & Dog(x) & Need(x, y))\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> -Big(x))",
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: all x. (Cow(x) -> -Cold(x))\nTEXT: The dog is cold.\nFOL: all x. (Dog(x) -> -Cold(x))\nTEXT: The dog likes the cow.\nFOL: all x. (Dog(x) & Cow(x) -> Like(x, y))\nTEXT: If someone is big and nice then they need the dog.\nFOL: all x y. (Big(x) & Nice(x) & Need(x, y) -> Dog(x, y))\nTEXT: If someone chases the cow then the cow does not need the dog.\nFOL: all x y. (Chase(x, y) & Cow(x) & -Need(x, y) & Dog(x, y) -> NotNeed(x, y))\nTEXT: If the cow needs the dog and the dog likes the cow then the cow chases the dog.\nFOL: all x y. (Need(x, y) & Like(x, y) & Dog(x, y) & Chase(x, y) -> Cow(x, y))\nTEXT: If someone likes the cow then they do not chase the cow.\nFOL: all x y. (Like(x, y) & Cow(x) & -Chase(x, y) -> NotChase(x, y))\nTEXT: If someone chases the dog and they are not green then they are nice.\nFOL: all x y. (Chase(x, y) & Dog(x) & NotGreen(x) & Nice(x, y))\nTEXT: If someone needs the cow then the cow is not young.\nFOL: all x y. (Need(x, y) & Cow(x) & NotYoung(x, y))\nTEXT: If the dog does not chase the cow then the cow likes the dog.\nFOL: all x y. (NotChase(x, y) & Cow(x) & Like(x, y))\nTEXT: If someone likes the dog then the dog needs the cow.\nFOL: all x y. (Like(x, y) & Dog(x) & Need(x, y))\nTEXT: The cow is big.\nFOL: all x. (Cow(x) -> Big(x))\n</EVALUATE>"
  ]
 }
]