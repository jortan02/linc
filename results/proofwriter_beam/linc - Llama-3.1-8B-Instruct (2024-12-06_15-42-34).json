[
 {
  "index": 0,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is green.\nFOL: Green(dave)\nTEXT: Dave is red.\nFOL: Red(dave)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Dave is young.\nFOL: Young(dave)\nTEXT: Erin is big.\nFOL: Big(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is rough.\nFOL: Rough(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Erin is young.\nFOL: Young(erin)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is nice.\nFOL: Nice(harry)\nTEXT: Harry is rough.\nFOL: Rough(harry)\nTEXT: Smart people are young.\nFOL: all x. (Smart(x) -> Young(x))\nTEXT: If Erin is red then Erin is big.\nFOL: Red(erin) -> Big(erin)\nTEXT: If Harry is red then Harry is smart.\nFOL: Red(harry) -> Smart(harry)\nTEXT: If Harry is green then Harry is red.\nFOL: Green(harry) -> Red(harry)\nTEXT: Red people are green.\nFOL: all x. (Red(x) -> Green(x))\nTEXT: Young people are big.\nFOL: all x. (Young(x) -> Big(x))\nTEXT: Erin is nice.\nFOL: Nice(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is green.\nFOL: Green(dave)\nTEXT: Dave is red.\nFOL: Red(dave)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Dave is young.\nFOL: Young(dave)\nTEXT: Erin is big.\nFOL: Big(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is rough.\nFOL: Rough(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Erin is young.\nFOL: Young(erin)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is nice.\nFOL: Nice(harry)\nTEXT: Harry is rough.\nFOL: Rough(harry)\nTEXT: Smart people are young.\nFOL: all x. (Smart(x) -> Young(x))\nTEXT: If Erin is red then Erin is big.\nFOL: Red(erin) -> Big(erin)\nTEXT: If Harry is red then Harry is smart.\nFOL: Red(harry) -> Smart(harry)\nTEXT: If Harry is green then Harry is red.\nFOL: Green(harry) -> Red(harry)\nTEXT: Red people are green.\nFOL: all x. (Red(x) -> Green(x))\nTEXT: Young people are big.\nFOL: all x. (Young(x) -> Big(x))\nTEXT: Erin is nice.\nFOL: Nice(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is green.\nFOL: Green(dave)\nTEXT: Dave is red.\nFOL: Red(dave)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Dave is young.\nFOL: Young(dave)\nTEXT: Erin is big.\nFOL: Big(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is rough.\nFOL: Rough(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Erin is young.\nFOL: Young(erin)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is nice.\nFOL: Nice(harry)\nTEXT: Harry is rough.\nFOL: Rough(harry)\nTEXT: Smart people are young.\nFOL: all x. (Smart(x) -> Young(x))\nTEXT: If Erin is red then Erin is big.\nFOL: (Red(erin) -> Big(erin))\nTEXT: If Harry is red then Harry is smart.\nFOL: (Red(harry) -> Smart(harry))\nTEXT: If Harry is green then Harry is red.\nFOL: (Green(harry) -> Red(harry))\nTEXT: Red people are green.\nFOL: all x. (Red(x) -> Green(x))\nTEXT: Young people are big.\nFOL: all x. (Young(x) -> Big(x))\nTEXT: Erin is nice.\nFOL: Nice(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is green.\nFOL: Green(dave)\nTEXT: Dave is red.\nFOL: Red(dave)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Dave is young.\nFOL: Young(dave)\nTEXT: Erin is big.\nFOL: Big(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is rough.\nFOL: Rough(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Erin is young.\nFOL: Young(erin)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is nice.\nFOL: Nice(harry)\nTEXT: Harry is rough.\nFOL: Rough(harry)\nTEXT: Smart people are young.\nFOL: all x. (Smart(x) -> Young(x))\nTEXT: If Erin is red then Erin is big.\nFOL: (Red(erin) -> Big(erin))\nTEXT: If Harry is red then Harry is smart.\nFOL: (Red(harry) -> Smart(harry))\nTEXT: If Harry is green then Harry is red.\nFOL: (Green(harry) -> Red(harry))\nTEXT: Red people are green.\nFOL: all x. (Red(x) -> Green(x))\nTEXT: Young people are big.\nFOL: all x. (Young(x) -> Big(x))\nTEXT: Erin is nice.\nFOL: Nice(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is green.\nFOL: Green(dave)\nTEXT: Dave is red.\nFOL: Red(dave)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Dave is young.\nFOL: Young(dave)\nTEXT: Erin is big.\nFOL: Big(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is rough.\nFOL: Rough(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Erin is young.\nFOL: Young(erin)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is nice.\nFOL: Nice(harry)\nTEXT: Harry is rough.\nFOL: Rough(harry)\nTEXT: Smart people are young.\nFOL: all x. (Smart(x) -> Young(x))\nTEXT: If Erin is red then Erin is big.\nFOL: -Red(erin) -> -Big(erin)\nTEXT: If Harry is red then Harry is smart.\nFOL: -Red(harry) -> -Smart(harry)\nTEXT: If Harry is green then Harry is red.\nFOL: -Green(harry) -> -Red(harry)\nTEXT: Red people are green.\nFOL: all x. (Red(x) -> Green(x))\nTEXT: Young people are big.\nFOL: all x. (Young(x) -> Big(x))\nTEXT: Erin is nice.\nFOL: Nice(erin)\n</EVALUATE>"
  ]
 },
 {
  "index": 1,
  "responses": [
   "<EVALUATE>\nTEXT: The cat is cold.\nFOL: Cold(cat)\nTEXT: The cat is rough.\nFOL: Rough(cat)\nTEXT: The cat likes the dog.\nFOL: Likes(cat, dog)\nTEXT: The cow is round.\nFOL: Round(cow)\nTEXT: The cow visits the cat.\nFOL: Visits(cow, cat)\nTEXT: The dog is big.\nFOL: Big(dog)\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The dog is rough.\nFOL: Rough(dog)\nTEXT: The dog likes the cat.\nFOL: Likes(dog, cat)\nTEXT: The dog likes the cow.\nFOL: Likes(dog, cow)\nTEXT: The dog likes the rabbit.\nFOL: Likes(dog, rabbit)\nTEXT: The rabbit is big.\nFOL: Big(rabbit)\nTEXT: The rabbit likes the cow.\nFOL: Likes(rabbit, cow)\nTEXT: The rabbit needs the cat.\nFOL: Needs(rabbit, cat)\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\nTEXT: The rabbit visits the dog.\nFOL: Visits(rabbit, dog)\nTEXT: If someone is cold then they like the cow.\nFOL: all x. (Cold(x) -> Likes(x, cow))\nTEXT: If someone visits the rabbit and the rabbit needs the cow then the cow needs the rabbit.\nFOL: all x. ((Visits(x, rabbit) & Needs(rabbit, cow)) -> Needs(cow, x))\nTEXT: If someone likes the cat then they need the cow.\nFOL: all x. (Likes(x, cat) -> Needs(x, cow))\nTEXT: If someone needs the cow and the cow likes the cat then the cat visits the dog.\nFOL: all x. ((Needs(x, cow) & Likes(cow, cat)) -> Visits(cat, dog))\nTEXT: If someone likes the rabbit and the rabbit visits the dog then they like the dog.\nFOL: all x. ((Likes(x, rabbit) & Visits(rabbit, dog)) -> Likes(x, dog))\nTEXT: If the rabbit likes the dog and the rabbit needs the cat then the dog visits the rabbit.\nFOL: all x. ((Likes(rabbit, dog) & Needs(rabbit, cat)) -> Visits(dog, rabbit))\nTEXT: If someone likes the rabbit and they are round then the rabbit needs the dog.\nFOL: all x. ((Likes(x, rabbit) & Round(x)) -> Needs(rabbit, dog))\nTEXT: If someone visits the cat and the cat likes the cow then they like the cat.\nFOL: all x. ((Visits(x, cat) & Likes(cat, cow)) -> Likes(x, cat))\nTEXT: The dog needs the rabbit.\nFOL: Needs(dog, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is cold.\nFOL: Cold(cat)\nTEXT: The cat is rough.\nFOL: Rough(cat)\nTEXT: The cat likes the dog.\nFOL: Likes(cat, dog)\nTEXT: The cow is round.\nFOL: Round(cow)\nTEXT: The cow visits the cat.\nFOL: Visits(cow, cat)\nTEXT: The dog is big.\nFOL: Big(dog)\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The dog is rough.\nFOL: Rough(dog)\nTEXT: The dog likes the cat.\nFOL: Likes(dog, cat)\nTEXT: The dog likes the cow.\nFOL: Likes(dog, cow)\nTEXT: The dog likes the rabbit.\nFOL: Likes(dog, rabbit)\nTEXT: The rabbit is big.\nFOL: Big(rabbit)\nTEXT: The rabbit likes the cow.\nFOL: Likes(rabbit, cow)\nTEXT: The rabbit needs the cat.\nFOL: Needs(rabbit, cat)\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\nTEXT: The rabbit visits the dog.\nFOL: Visits(rabbit, dog)\nTEXT: If someone is cold then they like the cow.\nFOL: all x. (Cold(x) -> Likes(x, cow))\nTEXT: If someone visits the rabbit and the rabbit needs the cow then the cow needs the rabbit.\nFOL: all x. (Visits(x, rabbit) & Needs(rabbit, cow) -> Needs(cow, rabbit))\nTEXT: If someone likes the cat then they need the cow.\nFOL: all x. (Likes(x, cat) -> Needs(x, cow))\nTEXT: If someone needs the cow and the cow likes the cat then the cat visits the dog.\nFOL: all x. (Needs(x, cow) & Likes(cow, cat) -> Visits(cat, dog))\nTEXT: If someone likes the rabbit and the rabbit visits the dog then they like the dog.\nFOL: all x. (Likes(x, rabbit) & Visits(rabbit, dog) -> Likes(x, dog))\nTEXT: If the rabbit likes the dog and the rabbit needs the cat then the dog visits the rabbit.\nFOL: all x. (Likes(rabbit, dog) & Needs(rabbit, cat) -> Visits(dog, rabbit))\nTEXT: If someone likes the rabbit and they are round then the rabbit needs the dog.\nFOL: all x. (Likes(x, rabbit) & Round(x) -> Needs(rabbit, dog))\nTEXT: If someone visits the cat and the cat likes the cow then they like the cat.\nFOL: all x. (Visits(x, cat) & Likes(cat, cow) -> Likes(x, cat))\nTEXT: The dog needs the rabbit.\nFOL: Needs(dog, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is cold.\nFOL: Cold(cat)\nTEXT: The cat is rough.\nFOL: Rough(cat)\nTEXT: The cat likes the dog.\nFOL: Likes(cat, dog)\nTEXT: The cow is round.\nFOL: Round(cow)\nTEXT: The cow visits the cat.\nFOL: Visits(cow, cat)\nTEXT: The dog is big.\nFOL: Big(dog)\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The dog is rough.\nFOL: Rough(dog)\nTEXT: The dog likes the cat.\nFOL: Likes(dog, cat)\nTEXT: The dog likes the cow.\nFOL: Likes(dog, cow)\nTEXT: The dog likes the rabbit.\nFOL: Likes(dog, rabbit)\nTEXT: The rabbit is big.\nFOL: Big(rabbit)\nTEXT: The rabbit likes the cow.\nFOL: Likes(rabbit, cow)\nTEXT: The rabbit needs the cat.\nFOL: Needs(rabbit, cat)\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\nTEXT: The rabbit visits the dog.\nFOL: Visits(rabbit, dog)\nTEXT: If someone is cold then they like the cow.\nFOL: all x. (Cold(x) -> Likes(x, cow))\nTEXT: If someone visits the rabbit and the rabbit needs the cow then the cow needs the rabbit.\nFOL: all x. ((Visits(x, rabbit) & Needs(rabbit, cow)) -> Needs(cow, rabbit))\nTEXT: If someone likes the cat then they need the cow.\nFOL: all x. (Likes(x, cat) -> Needs(x, cow))\nTEXT: If someone needs the cow and the cow likes the cat then the cat visits the dog.\nFOL: all x. ((Needs(x, cow) & Likes(cow, cat)) -> Visits(cat, dog))\nTEXT: If someone likes the rabbit and the rabbit visits the dog then they like the dog.\nFOL: all x. ((Likes(x, rabbit) & Visits(rabbit, dog)) -> Likes(x, dog))\nTEXT: If the rabbit likes the dog and the rabbit needs the cat then the dog visits the rabbit.\nFOL: all x. ((Likes(rabbit, dog) & Needs(rabbit, cat)) -> Visits(dog, rabbit))\nTEXT: If someone likes the rabbit and they are round then the rabbit needs the dog.\nFOL: all x. ((Likes(x, rabbit) & Round(x)) -> Needs(rabbit, dog))\nTEXT: If someone visits the cat and the cat likes the cow then they like the cat.\nFOL: all x. ((Visits(x, cat) & Likes(cat, cow)) -> Likes(x, cat))\nTEXT: The dog needs the rabbit.\nFOL: Needs(dog, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is cold.\nFOL: Cold(cat)\n\nTEXT: The cat is rough.\nFOL: Rough(cat)\n\nTEXT: The cat likes the dog.\nFOL: Likes(cat, dog)\n\nTEXT: The cow is round.\nFOL: Round(cow)\n\nTEXT: The cow visits the cat.\nFOL: Visits(cow, cat)\n\nTEXT: The dog is big.\nFOL: Big(dog)\n\nTEXT: The dog is green.\nFOL: Green(dog)\n\nTEXT: The dog is rough.\nFOL: Rough(dog)\n\nTEXT: The dog likes the cat.\nFOL: Likes(dog, cat)\n\nTEXT: The dog likes the cow.\nFOL: Likes(dog, cow)\n\nTEXT: The dog likes the rabbit.\nFOL: Likes(dog, rabbit)\n\nTEXT: The rabbit is big.\nFOL: Big(rabbit)\n\nTEXT: The rabbit likes the cow.\nFOL: Likes(rabbit, cow)\n\nTEXT: The rabbit needs the cat.\nFOL: Needs(rabbit, cat)\n\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\n\nTEXT: The rabbit visits the dog.\nFOL: Visits(rabbit, dog)\n\nTEXT: If someone is cold then they like the cow.\nFOL: all x. (Cold(x) -> Likes(x, cow))\n\nTEXT: If someone visits the rabbit and the rabbit needs the cow then the cow needs the rabbit.\nFOL: all x. ((Visits(x, rabbit) & Needs(rabbit, cow)) -> Needs(cow, x))\n\nTEXT: If someone likes the cat then they need the cow.\nFOL: all x. (Likes(x, cat) -> Needs(x, cow))\n\nTEXT: If someone needs the cow and the cow likes the cat then the cat visits the dog.\nFOL: all x. ((Needs(x, cow) & Likes(cow, cat)) -> Visits(cat, dog))\n\nTEXT: If someone likes the rabbit and the rabbit visits the dog then they like the dog.\nFOL: all x. ((Likes(x, rabbit) & Visits(rabbit, dog)) -> Likes(x, dog))\n\nTEXT: If the rabbit likes the dog and the rabbit needs the cat then the dog visits the rabbit.\nFOL: all x. ((Likes(rabbit, dog) & Needs(rabbit, cat)) -> Visits(dog, rabbit))\n\nTEXT: If someone likes the rabbit and they are round then the rabbit needs the dog.\nFOL: all x. ((Likes(x, rabbit) & Round(x)) -> Needs(rabbit, dog))\n\nTEXT: If someone visits the cat and the cat likes the cow then they like the cat.\nFOL: all x. ((Visits(x, cat) & Likes(cat, cow)) -> Likes(x, cat))\n\nTEXT: The dog needs the rabbit.\nFOL: Needs(dog, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is cold.\nFOL: Cold(cat)\nTEXT: The cat is rough.\nFOL: Rough(cat)\nTEXT: The cat likes the dog.\nFOL: Likes(cat, dog)\nTEXT: The cow is round.\nFOL: Round(cow)\nTEXT: The cow visits the cat.\nFOL: Visits(cow, cat)\nTEXT: The dog is big.\nFOL: Big(dog)\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The dog is rough.\nFOL: Rough(dog)\nTEXT: The dog likes the cat.\nFOL: Likes(dog, cat)\nTEXT: The dog likes the cow.\nFOL: Likes(dog, cow)\nTEXT: The dog likes the rabbit.\nFOL: Likes(dog, rabbit)\nTEXT: The rabbit is big.\nFOL: Big(rabbit)\nTEXT: The rabbit likes the cow.\nFOL: Likes(rabbit, cow)\nTEXT: The rabbit needs the cat.\nFOL: Needs(rabbit, cat)\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\nTEXT: The rabbit visits the dog.\nFOL: Visits(rabbit, dog)\nTEXT: If someone is cold then they like the cow.\nFOL: all x. (Cold(x) -> Likes(x, cow))\nTEXT: If someone visits the rabbit and the rabbit needs the cow then the cow needs the rabbit.\nFOL: all x. (Visits(x, rabbit) & Needs(rabbit, cow) -> Needs(cow, x))\nTEXT: If someone likes the cat then they need the cow.\nFOL: all x. (Likes(x, cat) -> Needs(x, cow))\nTEXT: If someone needs the cow and the cow likes the cat then the cat visits the dog.\nFOL: all x. (Needs(x, cow) & Likes(cow, cat) -> Visits(cat, dog))\nTEXT: If someone likes the rabbit and the rabbit visits the dog then they like the dog.\nFOL: all x. (Likes(x, rabbit) & Visits(rabbit, dog) -> Likes(x, dog))\nTEXT: If the rabbit likes the dog and the rabbit needs the cat then the dog visits the rabbit.\nFOL: all x. (Likes(rabbit, dog) & Needs(rabbit, cat) -> Visits(dog, rabbit))\nTEXT: If someone likes the rabbit and they are round then the rabbit needs the dog.\nFOL: all x. (Likes(x, rabbit) & Round(x) -> Needs(rabbit, dog))\nTEXT: If someone visits the cat and the cat likes the cow then they like the cat.\nFOL: all x. (Visits(x, cat) & Likes(cat, cow) -> Likes(x, cat))\nTEXT: The dog needs the rabbit.\nFOL: Needs(dog, rabbit)\n</EVALUATE>"
  ]
 },
 {
  "index": 2,
  "responses": [
   "<EVALUATE>\nTEXT: The cat does not chase the rabbit.\nFOL: -Chase(cat, rabbit)\nTEXT: The cat is green.\nFOL: Green(cat)\nTEXT: The cat visits the rabbit.\nFOL: Visit(cat, rabbit)\nTEXT: The mouse chases the rabbit.\nFOL: Chase(mouse, rabbit)\nTEXT: The mouse is big.\nFOL: Big(mouse)\nTEXT: The mouse is red.\nFOL: Red(mouse)\nTEXT: The mouse is rough.\nFOL: Rough(mouse)\nTEXT: The mouse does not like the rabbit.\nFOL: -Like(mouse, rabbit)\nTEXT: The rabbit is blue.\nFOL: Blue(rabbit)\nTEXT: The rabbit is red.\nFOL: Red(rabbit)\nTEXT: The rabbit is rough.\nFOL: Rough(rabbit)\nTEXT: The rabbit likes the cat.\nFOL: Like(rabbit, cat)\nTEXT: The rabbit likes the mouse.\nFOL: Like(rabbit, mouse)\nTEXT: The rabbit visits the cat.\nFOL: Visit(rabbit, cat)\nTEXT: The rabbit visits the mouse.\nFOL: Visit(rabbit, mouse)\nTEXT: If something is big then it is not blue.\nFOL: all x. (Big(x) -> -Blue(x))\nTEXT: If the mouse is not rough then the mouse does not chase the rabbit.\nFOL: -Rough(mouse) -> -Chase(mouse, rabbit)\nTEXT: The mouse does not visit the cat.\nFOL: -Visit(mouse, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat does not chase the rabbit.\nFOL: -Chase(cat, rabbit)\n\nTEXT: The cat is green.\nFOL: Green(cat)\n\nTEXT: The cat visits the rabbit.\nFOL: Visit(cat, rabbit)\n\nTEXT: The mouse chases the rabbit.\nFOL: Chase(mouse, rabbit)\n\nTEXT: The mouse is big.\nFOL: Big(mouse)\n\nTEXT: The mouse is red.\nFOL: Red(mouse)\n\nTEXT: The mouse is rough.\nFOL: Rough(mouse)\n\nTEXT: The mouse does not like the rabbit.\nFOL: -Like(mouse, rabbit)\n\nTEXT: The rabbit is blue.\nFOL: Blue(rabbit)\n\nTEXT: The rabbit is red.\nFOL: Red(rabbit)\n\nTEXT: The rabbit is rough.\nFOL: Rough(rabbit)\n\nTEXT: The rabbit likes the cat.\nFOL: Like(rabbit, cat)\n\nTEXT: The rabbit likes the mouse.\nFOL: Like(rabbit, mouse)\n\nTEXT: The rabbit visits the cat.\nFOL: Visit(rabbit, cat)\n\nTEXT: The rabbit visits the mouse.\nFOL: Visit(rabbit, mouse)\n\nTEXT: If something is big then it is not blue.\nFOL: all x. (Big(x) -> -Blue(x))\n\nTEXT: If the mouse is not rough then the mouse does not chase the rabbit.\nFOL: -Rough(mouse) -> -Chase(mouse, rabbit)\n\nTEXT: The mouse does not visit the cat.\nFOL: -Visit(mouse, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat does not chase the rabbit.\nFOL: -Chases(cat, rabbit)\nTEXT: The cat is green.\nFOL: Green(cat)\nTEXT: The cat visits the rabbit.\nFOL: Visits(cat, rabbit)\nTEXT: The mouse chases the rabbit.\nFOL: Chases(mouse, rabbit)\nTEXT: The mouse is big.\nFOL: Big(mouse)\nTEXT: The mouse is red.\nFOL: Red(mouse)\nTEXT: The mouse is rough.\nFOL: Rough(mouse)\nTEXT: The mouse does not like the rabbit.\nFOL: -Likes(mouse, rabbit)\nTEXT: The rabbit is blue.\nFOL: Blue(rabbit)\nTEXT: The rabbit is red.\nFOL: Red(rabbit)\nTEXT: The rabbit is rough.\nFOL: Rough(rabbit)\nTEXT: The rabbit likes the cat.\nFOL: Likes(rabbit, cat)\nTEXT: The rabbit likes the mouse.\nFOL: Likes(rabbit, mouse)\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\nTEXT: The rabbit visits the mouse.\nFOL: Visits(rabbit, mouse)\nTEXT: If something is big then it is not blue.\nFOL: all x. (Big(x) -> -Blue(x))\nTEXT: If the mouse is not rough then the mouse does not chase the rabbit.\nFOL: -Rough(mouse) -> -Chases(mouse, rabbit)\nTEXT: The mouse does not visit the cat.\nFOL: -Visits(mouse, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat does not chase the rabbit.\nFOL: -Chase(cat, rabbit)\nTEXT: The cat is green.\nFOL: Color(cat, green)\nTEXT: The cat visits the rabbit.\nFOL: Visit(cat, rabbit)\nTEXT: The mouse chases the rabbit.\nFOL: Chase(mouse, rabbit)\nTEXT: The mouse is big.\nFOL: Size(mouse, big)\nTEXT: The mouse is red.\nFOL: Color(mouse, red)\nTEXT: The mouse is rough.\nFOL: Texture(mouse, rough)\nTEXT: The mouse does not like the rabbit.\nFOL: -Like(mouse, rabbit)\nTEXT: The rabbit is blue.\nFOL: Color(rabbit, blue)\nTEXT: The rabbit is red.\nFOL: Color(rabbit, red)\nTEXT: The rabbit is rough.\nFOL: Texture(rabbit, rough)\nTEXT: The rabbit likes the cat.\nFOL: Like(rabbit, cat)\nTEXT: The rabbit likes the mouse.\nFOL: Like(rabbit, mouse)\nTEXT: The rabbit visits the cat.\nFOL: Visit(rabbit, cat)\nTEXT: The rabbit visits the mouse.\nFOL: Visit(rabbit, mouse)\nTEXT: If something is big then it is not blue.\nFOL: all x. (Size(x, big) -> -Color(x, blue))\nTEXT: If the mouse is not rough then the mouse does not chase the rabbit.\nFOL: -Texture(mouse, rough) -> -Chase(mouse, rabbit)\nTEXT: The mouse does not visit the cat.\nFOL: -Visit(mouse, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat does not chase the rabbit.\nFOL: -Chase(cat, rabbit)\nTEXT: The cat is green.\nFOL: Color(cat, green)\nTEXT: The cat visits the rabbit.\nFOL: Visit(cat, rabbit)\nTEXT: The mouse chases the rabbit.\nFOL: Chase(mouse, rabbit)\nTEXT: The mouse is big.\nFOL: Size(mouse, big)\nTEXT: The mouse is red.\nFOL: Color(mouse, red)\nTEXT: The mouse is rough.\nFOL: Texture(mouse, rough)\nTEXT: The mouse does not like the rabbit.\nFOL: -Like(mouse, rabbit)\nTEXT: The rabbit is blue.\nFOL: Color(rabbit, blue)\nTEXT: The rabbit is red.\nFOL: Color(rabbit, red)\nTEXT: The rabbit is rough.\nFOL: Texture(rabbit, rough)\nTEXT: The rabbit likes the cat.\nFOL: Like(rabbit, cat)\nTEXT: The rabbit likes the mouse.\nFOL: Like(rabbit, mouse)\nTEXT: The rabbit visits the cat.\nFOL: Visit(rabbit, cat)\nTEXT: The rabbit visits the mouse.\nFOL: Visit(rabbit, mouse)\nTEXT: If something is big then it is not blue.\nFOL: all x. (Size(x, big) -> -Color(x, blue))\nTEXT: If the mouse is not rough then the mouse does not chase the rabbit.\nFOL: -Rough(mouse) -> -Chase(mouse, rabbit)\nTEXT: The mouse does not visit the cat.\nFOL: -Visit(mouse, cat)\n</EVALUATE>"
  ]
 },
 {
  "index": 3,
  "responses": [
   "<EVALUATE>\nTEXT: Rough and cold that is what they say about Blue Bob.\nFOL: Rough(BlueBob) & Cold(BlueBob)\nTEXT: That guy Charlie sure is nice.\nFOL: Nice(charlie)\nTEXT: Dave is kind and nice and looks green.\nFOL: Kind(dave) & Nice(dave) & Green(dave)\nTEXT: Fred seems to be round.\nFOL: Round(fred)\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: all x. (Rough(x) & Cold(x) -> Nice(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: all x. (Rough(x) & Nice(x) & Round(x) -> Big(x))\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: all x. (Young(x) & Red(x) & Nice(x) -> Green(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Kind(x) -> Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x. (Round(x) & Green(x) & Nice(x) -> Red(x))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) -> Round(x))\nTEXT: Fred is not nice.\nFOL: -Nice(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Rough and cold that is what they say about Blue Bob.\nFOL: Rough(BlueBob) & Cold(BlueBob)\nTEXT: That guy Charlie sure is nice.\nFOL: Nice(charlie)\nTEXT: Dave is kind and nice and looks green.\nFOL: Kind(dave) & Nice(dave) & Green(dave)\nTEXT: Fred seems to be round.\nFOL: Round(fred)\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: all x. (Rough(x) & Cold(x) -> Nice(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: all x. (Rough(x) & Nice(x) & Round(x) -> Big(x))\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: all x. (Nice(x) & Young(x) & Red(x) -> Green(x))\nTEXT: Most young kind people tend to be red too.\nFOL: most x. (Young(x) & Kind(x) -> Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x. (Round(x) & Green(x) & Nice(x) -> Red(x))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) -> Round(x))\nTEXT: Fred is not nice.\nFOL: -Nice(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Rough and cold that is what they say about Blue Bob.\nFOL: all x. (Rough(x) & Cold(x) -> BlueBob(x))\nTEXT: That guy Charlie sure is nice.\nFOL: Nice(charlie)\nTEXT: Dave is kind and nice and looks green.\nFOL: Kind(dave) & Nice(dave) & Green(dave)\nTEXT: Fred seems to be round.\nFOL: Round(fred)\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: all x. (Rough(x) & Cold(x) -> Nice(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: all x. (Rough(x) & Nice(x) & Round(x) -> Big(x))\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: all x. (Nice(x) & Young(x) & Red(x) -> Green(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Kind(x) -> Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x. (Round(x) & Green(x) & Nice(x) -> Red(x))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) -> Round(x))\nTEXT: Fred is not nice.\nFOL: -Nice(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Rough and cold that is what they say about Blue Bob.\nFOL: all x. (Rough(x) & Cold(x) -> BlueBob(x))\nTEXT: That guy Charlie sure is nice.\nFOL: Nice(charlie)\nTEXT: Dave is kind and nice and looks green.\nFOL: Kind(dave) & Nice(dave) & Green(dave)\nTEXT: Fred seems to be round.\nFOL: Round(fred)\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: all x. (Rough(x) & Cold(x) -> Nice(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: all x. (Rough(x) & Nice(x) & Round(x) -> Big(x))\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: all x. (Nice(x) & Young(x) & Red(x) -> Green(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Kind(x) -> Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x. ((Round(x) & Green(x)) & Nice(x) -> Red(x))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) -> Round(x))\nTEXT: Fred is not nice.\nFOL: -Nice(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Rough and cold that is what they say about Blue Bob.\nFOL: all x. (Rough(x) & Cold(x) -> BlueBob(x))\nTEXT: That guy Charlie sure is nice.\nFOL: Nice(charlie)\nTEXT: Dave is kind and nice and looks green.\nFOL: Kind(dave) & Nice(dave) & Green(dave)\nTEXT: Fred seems to be round.\nFOL: Round(fred)\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: all x. (Rough(x) & Cold(x) -> Nice(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: all x. (Rough(x) & Nice(x) & Round(x) -> Big(x))\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: all x. (Nice(x) & Young(x) & Red(x) -> Green(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Kind(x) -> Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x. ((Round(x) & SomewhatGreen(x)) & Nice(x) -> Red(x))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) -> Round(x))\nTEXT: Fred is not nice.\nFOL: -Nice(fred)\n</EVALUATE>"
  ]
 },
 {
  "index": 4,
  "responses": [
   "<EVALUATE>\nTEXT: The cow is big.\nFOL: Big(cow)\nTEXT: The cow is blue.\nFOL: Blue(cow)\nTEXT: The cow likes the squirrel.\nFOL: Likes(cow, squirrel)\nTEXT: The cow sees the lion.\nFOL: Sees(cow, lion)\nTEXT: The lion eats the cow.\nFOL: Eats(lion, cow)\nTEXT: The lion eats the squirrel.\nFOL: Eats(lion, squirrel)\nTEXT: The lion is big.\nFOL: Big(lion)\nTEXT: The lion is kind.\nFOL: Kind(lion)\nTEXT: The lion is nice.\nFOL: Nice(lion)\nTEXT: The squirrel eats the cow.\nFOL: Eats(squirrel, cow)\nTEXT: The squirrel is kind.\nFOL: Kind(squirrel)\nTEXT: The squirrel is nice.\nFOL: Nice(squirrel)\nTEXT: If someone likes the cow then they are red.\nFOL: all x. (Likes(x, cow) -> Red(x))\nTEXT: If someone is big then they like the squirrel.\nFOL: all x. (Big(x) -> Likes(x, squirrel))\nTEXT: The squirrel does not like the squirrel.\nFOL: -Likes(squirrel, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is big.\nFOL: Big(cow)\n\nTEXT: The cow is blue.\nFOL: Blue(cow)\n\nTEXT: The cow likes the squirrel.\nFOL: Likes(cow, squirrel)\n\nTEXT: The cow sees the lion.\nFOL: Sees(cow, lion)\n\nTEXT: The lion eats the cow.\nFOL: Eats(lion, cow)\n\nTEXT: The lion eats the squirrel.\nFOL: Eats(lion, squirrel)\n\nTEXT: The lion is big.\nFOL: Big(lion)\n\nTEXT: The lion is kind.\nFOL: Kind(lion)\n\nTEXT: The lion is nice.\nFOL: Nice(lion)\n\nTEXT: The squirrel eats the cow.\nFOL: Eats(squirrel, cow)\n\nTEXT: The squirrel is kind.\nFOL: Kind(squirrel)\n\nTEXT: The squirrel is nice.\nFOL: Nice(squirrel)\n\nTEXT: If someone likes the cow then they are red.\nFOL: all x. (Likes(x, cow) -> Red(x))\n\nTEXT: If someone is big then they like the squirrel.\nFOL: all x. (Big(x) -> Likes(x, squirrel))\n\nTEXT: The squirrel does not like the squirrel.\nFOL: -Likes(squirrel, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is big.\nFOL: Big(cow)\nTEXT: The cow is blue.\nFOL: Blue(cow)\nTEXT: The cow likes the squirrel.\nFOL: likes(cow, squirrel)\nTEXT: The cow sees the lion.\nFOL: sees(cow, lion)\nTEXT: The lion eats the cow.\nFOL: eats(lion, cow)\nTEXT: The lion eats the squirrel.\nFOL: eats(lion, squirrel)\nTEXT: The lion is big.\nFOL: Big(lion)\nTEXT: The lion is kind.\nFOL: kind(lion)\nTEXT: The lion is nice.\nFOL: nice(lion)\nTEXT: The squirrel eats the cow.\nFOL: eats(squirrel, cow)\nTEXT: The squirrel is kind.\nFOL: kind(squirrel)\nTEXT: The squirrel is nice.\nFOL: nice(squirrel)\nTEXT: If someone likes the cow then they are red.\nFOL: all x. (likes(x, cow) -> Red(x))\nTEXT: If someone is big then they like the squirrel.\nFOL: all x. (Big(x) -> likes(x, squirrel))\nTEXT: The squirrel does not like the squirrel.\nFOL: -likes(squirrel, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is big.\nFOL: Big(cow)\nTEXT: The cow is blue.\nFOL: Blue(cow)\nTEXT: The cow likes the squirrel.\nFOL: likes(cow, squirrel)\nTEXT: The cow sees the lion.\nFOL: sees(cow, lion)\nTEXT: The lion eats the cow.\nFOL: eats(lion, cow)\nTEXT: The lion eats the squirrel.\nFOL: eats(lion, squirrel)\nTEXT: The lion is big.\nFOL: Big(lion)\nTEXT: The lion is kind.\nFOL: Kind(lion)\nTEXT: The lion is nice.\nFOL: Nice(lion)\nTEXT: The squirrel eats the cow.\nFOL: eats(squirrel, cow)\nTEXT: The squirrel is kind.\nFOL: Kind(squirrel)\nTEXT: The squirrel is nice.\nFOL: Nice(squirrel)\nTEXT: If someone likes the cow then they are red.\nFOL: all x. (likes(x, cow) -> Red(x))\nTEXT: If someone is big then they like the squirrel.\nFOL: all x. (Big(x) -> likes(x, squirrel))\nTEXT: The squirrel does not like the squirrel.\nFOL: -likes(squirrel, squirrel)\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: The cow is big.\nFOL: Big(cow)\n\nTEXT: The cow is blue.\nFOL: Blue(cow)\n\nTEXT: The cow likes the squirrel.\nFOL: Likes(cow, squirrel)\n\nTEXT: The cow sees the lion.\nFOL: Sees(cow, lion)\n\nTEXT: The lion eats the cow.\nFOL: Eats(lion, cow)\n\nTEXT: The lion eats the squirrel.\nFOL: Eats(lion, squirrel)\n\nTEXT: The lion is big.\nFOL: Big(lion)\n\nTEXT: The lion is kind.\nFOL: Kind(lion)\n\nTEXT: The lion is nice.\nFOL: Nice(lion)\n\nTEXT: The squirrel eats the cow.\nFOL: Eats(squirrel, cow)\n\nTEXT: The squirrel is kind.\nFOL: Kind(squirrel)\n\nTEXT: The squirrel is nice.\nFOL: Nice(squirrel)\n\nTEXT: If someone likes the cow then they are red.\nFOL: all x. (Likes(x, cow) -> Red(x))\n\nTEXT: If someone is big then they like the squirrel.\nFOL: all x. (Big(x) -> Likes(x, squirrel))\n\nTEXT: The squirrel does not like the squirrel.\nFOL: -Likes(squirrel, squirrel)\n\n</EVALUATE>"
  ]
 },
 {
  "index": 5,
  "responses": [
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Eats(cat, rabbit)\nTEXT: The cat is cold.\nFOL: Cold(cat)\nTEXT: The cat is young.\nFOL: Young(cat)\nTEXT: The cat sees the rabbit.\nFOL: Sees(cat, rabbit)\nTEXT: The cat visits the rabbit.\nFOL: Visits(cat, rabbit)\nTEXT: The rabbit sees the cat.\nFOL: Sees(rabbit, cat)\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\nTEXT: If something visits the rabbit and the rabbit eats the cat then the cat visits the rabbit.\nFOL: (Visits(x, rabbit) & Eats(rabbit, cat)) -> Visits(cat, x)\nTEXT: If something is blue then it sees the cat.\nFOL: Blue(x) -> Sees(x, cat)\nTEXT: If something visits the rabbit then it is blue.\nFOL: Visits(x, rabbit) -> Blue(x)\nTEXT: If something visits the rabbit then it eats the cat.\nFOL: Visits(x, rabbit) -> Eats(x, cat)\nTEXT: If something sees the cat then the cat sees the rabbit.\nFOL: Sees(x, cat) -> Sees(cat, rabbit)\nTEXT: If something is big and it sees the cat then it visits the cat.\nFOL: (Big(x) & Sees(x, cat)) -> Visits(x, cat)\nTEXT: If something is cold then it sees the cat.\nFOL: Cold(x) -> Sees(x, cat)\nTEXT: If something is blue then it is big.\nFOL: Blue(x) -> Big(x)\nTEXT: The rabbit eats the cat.\nFOL: Eats(rabbit, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Eats(cat, rabbit)\nTEXT: The cat is cold.\nFOL: Cold(cat)\nTEXT: The cat is young.\nFOL: Young(cat)\nTEXT: The cat sees the rabbit.\nFOL: Sees(cat, rabbit)\nTEXT: The cat visits the rabbit.\nFOL: Visits(cat, rabbit)\nTEXT: The rabbit sees the cat.\nFOL: Sees(rabbit, cat)\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\nTEXT: If something visits the rabbit and the rabbit eats the cat then the cat visits the rabbit.\nFOL: all x. (Visits(x, rabbit) & Eats(rabbit, cat) -> Visits(cat, x))\nTEXT: If something is blue then it sees the cat.\nFOL: all x. (Blue(x) -> Sees(x, cat))\nTEXT: If something visits the rabbit then it is blue.\nFOL: all x. (Visits(x, rabbit) -> Blue(x))\nTEXT: If something visits the rabbit then it eats the cat.\nFOL: all x. (Visits(x, rabbit) -> Eats(x, cat))\nTEXT: If something sees the cat then the cat sees the rabbit.\nFOL: all x. (Sees(x, cat) -> Sees(cat, x))\nTEXT: If something is big and it sees the cat then it visits the cat.\nFOL: all x. (Big(x) & Sees(x, cat) -> Visits(x, cat))\nTEXT: If something is cold then it sees the cat.\nFOL: all x. (Cold(x) -> Sees(x, cat))\nTEXT: If something is blue then it is big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: The rabbit eats the cat.\nFOL: Eats(rabbit, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Eats(cat, rabbit)\nTEXT: The cat is cold.\nFOL: Cold(cat)\nTEXT: The cat is young.\nFOL: Young(cat)\nTEXT: The cat sees the rabbit.\nFOL: Sees(cat, rabbit)\nTEXT: The cat visits the rabbit.\nFOL: Visits(cat, rabbit)\nTEXT: The rabbit sees the cat.\nFOL: Sees(rabbit, cat)\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\nTEXT: If something visits the rabbit and the rabbit eats the cat then the cat visits the rabbit.\nFOL: (Visits(x, rabbit) & Eats(rabbit, cat) -> Visits(cat, x))\nTEXT: If something is blue then it sees the cat.\nFOL: all x. (Blue(x) -> Sees(x, cat))\nTEXT: If something visits the rabbit then it is blue.\nFOL: all x. (Visits(x, rabbit) -> Blue(x))\nTEXT: If something visits the rabbit then it eats the cat.\nFOL: all x. (Visits(x, rabbit) -> Eats(x, cat))\nTEXT: If something sees the cat then the cat sees the rabbit.\nFOL: all x. (Sees(x, cat) -> Sees(cat, x))\nTEXT: If something is big and it sees the cat then it visits the cat.\nFOL: all x. (Big(x) & Sees(x, cat) -> Visits(x, cat))\nTEXT: If something is cold then it sees the cat.\nFOL: all x. (Cold(x) -> Sees(x, cat))\nTEXT: If something is blue then it is big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: The rabbit eats the cat.\nFOL: Eats(rabbit, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Eats(cat, rabbit)\nTEXT: The cat is cold.\nFOL: Cold(cat)\nTEXT: The cat is young.\nFOL: Young(cat)\nTEXT: The cat sees the rabbit.\nFOL: Sees(cat, rabbit)\nTEXT: The cat visits the rabbit.\nFOL: Visits(cat, rabbit)\nTEXT: The rabbit sees the cat.\nFOL: Sees(rabbit, cat)\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\nTEXT: If something visits the rabbit and the rabbit eats the cat then the cat visits the rabbit.\nFOL: (Visits(x, rabbit) & Eats(rabbit, cat) -> Visits(cat, x))\nTEXT: If something is blue then it sees the cat.\nFOL: all x. (Blue(x) -> Sees(x, cat))\nTEXT: If something visits the rabbit then it is blue.\nFOL: all x. (Visits(x, rabbit) -> Blue(x))\nTEXT: If something visits the rabbit then it eats the cat.\nFOL: all x. (Visits(x, rabbit) -> Eats(x, cat))\nTEXT: If something sees the cat then the cat sees the rabbit.\nFOL: all x. (Sees(x, cat) -> Sees(cat, x))\nTEXT: If something is big and it sees the cat then it visits the cat.\nFOL: all x. ((Big(x) & Sees(x, cat)) -> Visits(x, cat))\nTEXT: If something is cold then it sees the cat.\nFOL: all x. (Cold(x) -> Sees(x, cat))\nTEXT: If something is blue then it is big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: The rabbit eats the cat.\nFOL: Eats(rabbit, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Eats(cat, rabbit)\nTEXT: The cat is cold.\nFOL: Cold(cat)\nTEXT: The cat is young.\nFOL: Young(cat)\nTEXT: The cat sees the rabbit.\nFOL: Sees(cat, rabbit)\nTEXT: The cat visits the rabbit.\nFOL: Visits(cat, rabbit)\nTEXT: The rabbit sees the cat.\nFOL: Sees(rabbit, cat)\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\nTEXT: If something visits the rabbit and the rabbit eats the cat then the cat visits the rabbit.\nFOL: (Visits(x, rabbit) & Eats(rabbit, cat)) -> Visits(cat, x)\nTEXT: If something is blue then it sees the cat.\nFOL: Blue(x) -> Sees(x, cat)\nTEXT: If something visits the rabbit then it is blue.\nFOL: Visits(x, rabbit) -> Blue(x)\nTEXT: If something visits the rabbit then it eats the cat.\nFOL: Visits(x, rabbit) -> Eats(x, cat)\nTEXT: If something sees the cat then the cat sees the rabbit.\nFOL: Sees(x, cat) -> Sees(cat, rabbit)\nTEXT: If something is big and it sees the cat then it visits the cat.\nFOL: Big(x) & Sees(x, cat) -> Visits(x, cat)\nTEXT: If something is cold then it sees the cat.\nFOL: Cold(x) -> Sees(x, cat)\nTEXT: If something is blue then it is big.\nFOL: Blue(x) -> Big(x)\nTEXT: The rabbit eats the cat.\nFOL: Eats(rabbit, cat)\n</EVALUATE>"
  ]
 },
 {
  "index": 6,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is blue.\nFOL: Blue(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Anne is furry.\nFOL: Furry(anne)\nTEXT: Anne is kind.\nFOL: Kind(anne)\nTEXT: Anne is white.\nFOL: White(anne)\nTEXT: Anne is young.\nFOL: Young(anne)\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is furry.\nFOL: Furry(bob)\nTEXT: Bob is kind.\nFOL: Kind(bob)\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Charlie is furry.\nFOL: Furry(charlie)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: Furry, white people are blue.\nFOL: all x. (Furry(x) & White(x) -> Blue(x))\nTEXT: If someone is furry then they are white.\nFOL: all x. (Furry(x) -> White(x))\nTEXT: Harry is cold.\nFOL: Cold(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is blue.\nFOL: Blue(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Anne is furry.\nFOL: Furry(anne)\nTEXT: Anne is kind.\nFOL: Kind(anne)\nTEXT: Anne is white.\nFOL: White(anne)\nTEXT: Anne is young.\nFOL: Young(anne)\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is furry.\nFOL: Furry(bob)\nTEXT: Bob is kind.\nFOL: Kind(bob)\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Charlie is furry.\nFOL: Furry(charlie)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: Furry, white people are blue.\nFOL: all x. ((Furry(x) & White(x)) -> Blue(x))\nTEXT: If someone is furry then they are white.\nFOL: all x. (Furry(x) -> White(x))\nTEXT: Harry is cold.\nFOL: Cold(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is blue.\nFOL: Blue(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Anne is furry.\nFOL: Furry(anne)\nTEXT: Anne is kind.\nFOL: Kind(anne)\nTEXT: Anne is white.\nFOL: White(anne)\nTEXT: Anne is young.\nFOL: Young(anne)\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is furry.\nFOL: Furry(bob)\nTEXT: Bob is kind.\nFOL: Kind(bob)\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Charlie is furry.\nFOL: Furry(charlie)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: Furry, white people are blue.\nFOL: all x. (Furry(x) & White(x) -> Blue(x))\nTEXT: If someone is furry then they are white.\nFOL: all x. (Furry(x) -> White(x))\nTEXT: Harry is cold.\nFOL: Cold(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(Anne)\nTEXT: Anne is blue.\nFOL: Blue(Anne)\nTEXT: Anne is cold.\nFOL: Cold(Anne)\nTEXT: Anne is furry.\nFOL: Furry(Anne)\nTEXT: Anne is kind.\nFOL: Kind(Anne)\nTEXT: Anne is white.\nFOL: White(Anne)\nTEXT: Anne is young.\nFOL: Young(Anne)\nTEXT: Bob is big.\nFOL: Big(Bob)\nTEXT: Bob is furry.\nFOL: Furry(Bob)\nTEXT: Bob is kind.\nFOL: Kind(Bob)\nTEXT: Bob is white.\nFOL: White(Bob)\nTEXT: Bob is young.\nFOL: Young(Bob)\nTEXT: Charlie is furry.\nFOL: Furry(Charlie)\nTEXT: Harry is big.\nFOL: Big(Harry)\nTEXT: Harry is blue.\nFOL: Blue(Harry)\nTEXT: Harry is white.\nFOL: White(Harry)\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: Furry, white people are blue.\nFOL: all x. (Furry(x) & White(x) -> Blue(x))\nTEXT: If someone is furry then they are white.\nFOL: all x. (Furry(x) -> White(x))\nTEXT: Harry is cold.\nFOL: Cold(Harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is blue.\nFOL: Blue(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Anne is furry.\nFOL: Furry(anne)\nTEXT: Anne is kind.\nFOL: Kind(anne)\nTEXT: Anne is white.\nFOL: White(anne)\nTEXT: Anne is young.\nFOL: Young(anne)\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is furry.\nFOL: Furry(bob)\nTEXT: Bob is kind.\nFOL: Kind(bob)\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Charlie is furry.\nFOL: Furry(charlie)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: Furry, white people are blue.\nFOL: all x. ((Furry(x) & White(x)) -> Blue(x))\nTEXT: If someone is furry then they are white.\nFOL: all x. (Furry(x) -> White(x))\nTEXT: Harry is cold.\nFOL: Cold(harry)\n</EVALUATE>"
  ]
 },
 {
  "index": 7,
  "responses": [
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: Young(x) & Cold(x) -> Alan(x)\nTEXT: Dave, who is both nice and kind, is rough, round and young, too.\nFOL: Nice(dave) & Kind(dave) -> (Rough(dave) & Round(dave) & Young(dave))\nTEXT: A blue colored person who is nice is a red person.\nFOL: Blue(x) & Nice(x) -> Red(x)\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: Nice(x) & Kind(x) -> -Blue(x)\nTEXT: Nice people who are blue and round at the same time are always young.\nFOL: Nice(x) & Blue(x) & Round(x) -> Young(x)\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: Green(x) & Naive(x) -> (Red(x) & Rough(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: Green(x) & Naive(x) -> Round(x)\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: Rough(x) & Red(x) -> Big(x)\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x. (Round(x) & Blue(x) -> Young(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: Cold(x) & Blue(x) & Rough(x) -> Kind(x)\nTEXT: Dave is red.\nFOL: Red(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: Young(x) & Cold(x) -> Alan(x)\nTEXT: Dave, who is both nice and kind, is rough, round and young, too.\nFOL: Nice(dave) & Kind(dave) -> (Rough(dave) & Round(dave) & Young(dave))\nTEXT: A blue colored person who is nice is a red person.\nFOL: Blue(x) & Nice(x) -> Red(x)\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: Nice(x) & Kind(x) -> -Blue(x)\nTEXT: Nice people who are blue and round at the same time are always young.\nFOL: (Nice(x) & Blue(x) & Round(x)) -> Young(x)\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: Green(x) & Naive(x) -> (Red(x) & Rough(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: Green(x) & Naive(x) -> Round(x)\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: Rough(x) & Red(x) -> Big(x)\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x. (Round(x) & Blue(x) -> Young(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: Cold(x) & Blue(x) & Rough(x) -> Kind(x)\nTEXT: Dave is red.\nFOL: Red(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: Young(Alan) & Cold(Alan)\nTEXT: Dave, who is both nice and kind, is rough, round and young, too.\nFOL: Nice(dave) & Kind(dave) & Rough(dave) & Round(dave) & Young(dave)\nTEXT: A blue colored person who is nice is a red person.\nFOL: Blue(x) & Nice(x) -> Red(x)\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: Nice(x) & Kind(x) -> -Blue(x)\nTEXT: Nice people who are blue and round at the same time are always young.\nFOL: Nice(x) & Blue(x) & Round(x) -> Young(x)\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: Green(x) & Naive(x) -> (Red(x) & Rough(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: Green(x) & Naive(x) -> Round(x)\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: Rough(x) & Red(x) -> Big(x)\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x. (Round(x) & Blue(x) -> Young(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: Cold(x) & Blue(x) & Rough(x) -> Kind(x)\nTEXT: Dave is red.\nFOL: Red(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: Young(Alan) & Cold(Alan)\nTEXT: Dave, who is both nice and kind, is rough, round and young, too.\nFOL: Nice(Dave) & Kind(Dave) & Rough(Dave) & Round(Dave) & Young(Dave)\nTEXT: A blue colored person who is nice is a red person.\nFOL: Blue(x) & Nice(x) -> Red(x)\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: Nice(x) & Kind(x) -> -Blue(x)\nTEXT: Nice people who are blue and round at the same time are always young.\nFOL: Nice(x) & Blue(x) & Round(x) -> Young(x)\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: Green(x) & Naive(x) -> (Red(x) & Rough(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: Green(x) & Naive(x) -> Round(x)\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: Rough(x) & Red(x) -> Big(x)\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x. (Round(x) & Blue(x) -> Young(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: Cold(x) & Blue(x) & Rough(x) -> Kind(x)\nTEXT: Dave is red.\nFOL: Red(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: Young(coldPerson) & Cold(coldPerson) -> Alan(coldPerson)\nTEXT: Dave, who is both nice and kind, is rough, round and young, too.\nFOL: Nice(dave) & Kind(dave) & Rough(dave) & Round(dave) & Young(dave)\nTEXT: A blue colored person who is nice is a red person.\nFOL: Blue(person) & Nice(person) -> Red(person)\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: Nice(x) & Kind(x) -> -Blue(x)\nTEXT: Nice people who are blue and round at the same time are always young.\nFOL: Nice(x) & Blue(x) & Round(x) -> Young(x)\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: Green(x) & Naive(x) -> (Red(x) & Rough(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: Green(x) & Naive(x) -> Round(x)\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: Rough(x) & Red(x) -> Big(x)\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x. (Round(x) & Blue(x) -> Young(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: Cold(x) & Blue(x) & Rough(x) -> Kind(x)\nTEXT: Dave is red.\nFOL: Red(dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 8,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: Furry(anne)\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Anne is rough.\nFOL: Rough(anne)\nTEXT: Anne is young.\nFOL: Young(anne)\nTEXT: Dave is green.\nFOL: Green(dave)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is young.\nFOL: Young(dave)\nTEXT: If something is round and rough then it is green.\nFOL: all x. (Round(x) & Rough(x) -> Green(x))\nTEXT: Green things are white.\nFOL: all x. (Green(x) -> White(x))\nTEXT: If something is white and green then it is young.\nFOL: all x. (White(x) & Green(x) -> Young(x))\nTEXT: White, nice things are furry.\nFOL: all x. (White(x) & Nice(x) -> Furry(x))\nTEXT: If Anne is nice then Anne is furry.\nFOL: Nice(anne) -> Furry(anne)\nTEXT: Young, rough things are white.\nFOL: all x. (Young(x) & Rough(x) -> White(x))\nTEXT: All white things are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Round things are rough.\nFOL: all x. (Round(x) -> Rough(x))\nTEXT: Dave is not round.\nFOL: -Round(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: Furry(anne)\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Anne is rough.\nFOL: Rough(anne)\nTEXT: Anne is young.\nFOL: Young(anne)\nTEXT: Dave is green.\nFOL: Green(dave)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is young.\nFOL: Young(dave)\nTEXT: If something is round and rough then it is green.\nFOL: all x. ((Round(x) & Rough(x)) -> Green(x))\nTEXT: Green things are white.\nFOL: all x. (Green(x) -> White(x))\nTEXT: If something is white and green then it is young.\nFOL: all x. ((White(x) & Green(x)) -> Young(x))\nTEXT: White, nice things are furry.\nFOL: all x. ((White(x) & Nice(x)) -> Furry(x))\nTEXT: If Anne is nice then Anne is furry.\nFOL: Nice(anne) -> Furry(anne)\nTEXT: Young, rough things are white.\nFOL: all x. ((Young(x) & Rough(x)) -> White(x))\nTEXT: All white things are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Round things are rough.\nFOL: all x. (Round(x) -> Rough(x))\nTEXT: Dave is not round.\nFOL: -Round(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: Furry(anne)\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Anne is rough.\nFOL: Rough(anne)\nTEXT: Anne is young.\nFOL: Young(anne)\nTEXT: Dave is green.\nFOL: Green(dave)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is young.\nFOL: Young(dave)\nTEXT: If something is round and rough then it is green.\nFOL: all x. (Round(x) & Rough(x) -> Green(x))\nTEXT: Green things are white.\nFOL: all x. (Green(x) -> White(x))\nTEXT: If something is white and green then it is young.\nFOL: all x. ((White(x) & Green(x)) -> Young(x))\nTEXT: White, nice things are furry.\nFOL: all x. (White(x) & Nice(x) -> Furry(x))\nTEXT: If Anne is nice then Anne is furry.\nFOL: Nice(anne) -> Furry(anne)\nTEXT: Young, rough things are white.\nFOL: all x. (Young(x) & Rough(x) -> White(x))\nTEXT: All white things are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Round things are rough.\nFOL: all x. (Round(x) -> Rough(x))\nTEXT: Dave is not round.\nFOL: -Round(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: Furry(anne)\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Anne is rough.\nFOL: Rough(anne)\nTEXT: Anne is young.\nFOL: Young(anne)\nTEXT: Dave is green.\nFOL: Green(dave)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is young.\nFOL: Young(dave)\nTEXT: If something is round and rough then it is green.\nFOL: all x. (Round(x) & Rough(x) -> Green(x))\nTEXT: Green things are white.\nFOL: all x. (Green(x) -> White(x))\nTEXT: If something is white and green then it is young.\nFOL: all x. ((White(x) & Green(x)) -> Young(x))\nTEXT: White, nice things are furry.\nFOL: all x. ((White(x) & Nice(x)) -> Furry(x))\nTEXT: If Anne is nice then Anne is furry.\nFOL: Nice(anne) -> Furry(anne)\nTEXT: Young, rough things are white.\nFOL: all x. ((Young(x) & Rough(x)) -> White(x))\nTEXT: All white things are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Round things are rough.\nFOL: all x. (Round(x) -> Rough(x))\nTEXT: Dave is not round.\nFOL: -Round(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: Furry(anne)\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Anne is rough.\nFOL: Rough(anne)\nTEXT: Anne is young.\nFOL: Young(anne)\nTEXT: Dave is green.\nFOL: Green(dave)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is young.\nFOL: Young(dave)\nTEXT: If something is round and rough then it is green.\nFOL: all x. ((Round(x) & Rough(x)) -> Green(x))\nTEXT: Green things are white.\nFOL: all x. (Green(x) -> White(x))\nTEXT: If something is white and green then it is young.\nFOL: all x. ((White(x) & Green(x)) -> Young(x))\nTEXT: White, nice things are furry.\nFOL: all x. (White(x) & Nice(x) -> Furry(x))\nTEXT: If Anne is nice then Anne is furry.\nFOL: Nice(anne) -> Furry(anne)\nTEXT: Young, rough things are white.\nFOL: all x. (Young(x) & Rough(x) -> White(x))\nTEXT: All white things are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Round things are rough.\nFOL: all x. (Round(x) -> Rough(x))\nTEXT: Dave is not round.\nFOL: -Round(dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 9,
  "responses": [
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: Round(bear)\nTEXT: The bear needs the squirrel.\nFOL: Needs(bear, squirrel)\nTEXT: The rabbit is cold.\nFOL: Cold(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The rabbit needs the squirrel.\nFOL: Needs(rabbit, squirrel)\nTEXT: The rabbit visits the bear.\nFOL: Visits(rabbit, bear)\nTEXT: The squirrel is young.\nFOL: Young(squirrel)\nTEXT: The squirrel likes the rabbit.\nFOL: Likes(squirrel, rabbit)\nTEXT: The squirrel needs the bear.\nFOL: Needs(squirrel, bear)\nTEXT: The squirrel visits the rabbit.\nFOL: Visits(squirrel, rabbit)\nTEXT: If the squirrel is young and the squirrel likes the bear then the bear is green.\nFOL: (Young(squirrel) & Likes(squirrel, bear)) -> Green(bear)\nTEXT: If someone likes the rabbit then they are round.\nFOL: all x. (Likes(x, rabbit) -> Round(x))\nTEXT: If someone is round then they like the bear.\nFOL: all x. (Round(x) -> Likes(x, bear))\nTEXT: The bear is green.\nFOL: Green(bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: Round(bear)\nTEXT: The bear needs the squirrel.\nFOL: Needs(bear, squirrel)\nTEXT: The rabbit is cold.\nFOL: Cold(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The rabbit needs the squirrel.\nFOL: Needs(rabbit, squirrel)\nTEXT: The rabbit visits the bear.\nFOL: Visits(rabbit, bear)\nTEXT: The squirrel is young.\nFOL: Young(squirrel)\nTEXT: The squirrel likes the rabbit.\nFOL: Likes(squirrel, rabbit)\nTEXT: The squirrel needs the bear.\nFOL: Needs(squirrel, bear)\nTEXT: The squirrel visits the rabbit.\nFOL: Visits(squirrel, rabbit)\nTEXT: If the squirrel is young and the squirrel likes the bear then the bear is green.\nFOL: (Young(squirrel) & Likes(squirrel, bear) -> Green(bear))\nTEXT: If someone likes the rabbit then they are round.\nFOL: all x. (Likes(x, rabbit) -> Round(x))\nTEXT: If someone is round then they like the bear.\nFOL: all x. (Round(x) -> Likes(x, bear))\nTEXT: The bear is green.\nFOL: Green(bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: Round(bear)\n\nTEXT: The bear needs the squirrel.\nFOL: Needs(bear, squirrel)\n\nTEXT: The rabbit is cold.\nFOL: Cold(rabbit)\n\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\n\nTEXT: The rabbit needs the squirrel.\nFOL: Needs(rabbit, squirrel)\n\nTEXT: The rabbit visits the bear.\nFOL: Visits(rabbit, bear)\n\nTEXT: The squirrel is young.\nFOL: Young(squirrel)\n\nTEXT: The squirrel likes the rabbit.\nFOL: Likes(squirrel, rabbit)\n\nTEXT: The squirrel needs the bear.\nFOL: Needs(squirrel, bear)\n\nTEXT: The squirrel visits the rabbit.\nFOL: Visits(squirrel, rabbit)\n\nTEXT: If the squirrel is young and the squirrel likes the bear then the bear is green.\nFOL: (Young(squirrel) & Likes(squirrel, bear)) -> Green(bear)\n\nTEXT: If someone likes the rabbit then they are round.\nFOL: all x. (Likes(x, rabbit) -> Round(x))\n\nTEXT: If someone is round then they like the bear.\nFOL: all x. (Round(x) -> Likes(x, bear))\n\nTEXT: The bear is green.\nFOL: Green(bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: Round(bear)\nTEXT: The bear needs the squirrel.\nFOL: Needs(bear, squirrel)\nTEXT: The rabbit is cold.\nFOL: Cold(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The rabbit needs the squirrel.\nFOL: Needs(rabbit, squirrel)\nTEXT: The rabbit visits the bear.\nFOL: Visits(rabbit, bear)\nTEXT: The squirrel is young.\nFOL: Young(squirrel)\nTEXT: The squirrel likes the rabbit.\nFOL: Likes(squirrel, rabbit)\nTEXT: The squirrel needs the bear.\nFOL: Needs(squirrel, bear)\nTEXT: The squirrel visits the rabbit.\nFOL: Visits(squirrel, rabbit)\nTEXT: If the squirrel is young and the squirrel likes the bear then the bear is green.\nFOL: Young(squirrel) & Likes(squirrel, bear) -> Green(bear)\nTEXT: If someone likes the rabbit then they are round.\nFOL: all x. (Likes(x, rabbit) -> Round(x))\nTEXT: If someone is round then they like the bear.\nFOL: all x. (Round(x) -> Likes(x, bear))\nTEXT: The bear is green.\nFOL: Green(bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: Round(bear)\nTEXT: The bear needs the squirrel.\nFOL: Needs(bear, squirrel)\nTEXT: The rabbit is cold.\nFOL: Cold(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The rabbit needs the squirrel.\nFOL: Needs(rabbit, squirrel)\nTEXT: The rabbit visits the bear.\nFOL: Visits(rabbit, bear)\nTEXT: The squirrel is young.\nFOL: Young(squirrel)\nTEXT: The squirrel likes the rabbit.\nFOL: Likes(squirrel, rabbit)\nTEXT: The squirrel needs the bear.\nFOL: Needs(squirrel, bear)\nTEXT: The squirrel visits the rabbit.\nFOL: Visits(squirrel, rabbit)\nTEXT: If the squirrel is young and the squirrel likes the bear then the bear is green.\nFOL: (Young(squirrel) & Likes(squirrel, bear)) -> Green(bear)\nTEXT: If someone likes the rabbit then they are round.\nFOL: all x. (Likes(x, rabbit) -> Round(x))\nTEXT: If someone is round then they like the bear.\nFOL: all x. (Round(x) -> Like(x, bear))\nTEXT: The bear is green.\nFOL: Green(bear)\n</EVALUATE>"
  ]
 },
 {
  "index": 10,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(anne)\nTEXT: Bob is green.\nFOL: Green(bob)\nTEXT: Bob is quiet.\nFOL: Quiet(bob)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Gary is blue.\nFOL: Blue(gary)\nTEXT: Gary is green.\nFOL: Green(gary)\nTEXT: Gary is nice.\nFOL: Nice(gary)\nTEXT: Gary is quiet.\nFOL: Quiet(gary)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Gary is white.\nFOL: White(gary)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is red.\nFOL: Red(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: Red people are white.\nFOL: all x. (Red(x) -> White(x))\nTEXT: Gary is green.\nFOL: Green(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(anne)\nTEXT: Bob is green.\nFOL: Green(bob)\nTEXT: Bob is quiet.\nFOL: Quiet(bob)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Gary is blue.\nFOL: Blue(gary)\nTEXT: Gary is green.\nFOL: Green(gary)\nTEXT: Gary is nice.\nFOL: Nice(gary)\nTEXT: Gary is quiet.\nFOL: Quiet(gary)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Gary is white.\nFOL: White(gary)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is red.\nFOL: Red(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: Red people are white.\nFOL: all x. (Red(x) -> White(x))\nTEXT: Gary is green.\nFOL: Green(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(Anne)\nTEXT: Bob is green.\nFOL: Green(Bob)\nTEXT: Bob is quiet.\nFOL: Quiet(Bob)\nTEXT: Bob is red.\nFOL: Red(Bob)\nTEXT: Bob is round.\nFOL: Round(Bob)\nTEXT: Gary is blue.\nFOL: Blue(Gary)\nTEXT: Gary is green.\nFOL: Green(Gary)\nTEXT: Gary is nice.\nFOL: Nice(Gary)\nTEXT: Gary is quiet.\nFOL: Quiet(Gary)\nTEXT: Gary is red.\nFOL: Red(Gary)\nTEXT: Gary is white.\nFOL: White(Gary)\nTEXT: Harry is green.\nFOL: Green(Harry)\nTEXT: Harry is quiet.\nFOL: Quiet(Harry)\nTEXT: Harry is red.\nFOL: Red(Harry)\nTEXT: Harry is white.\nFOL: White(Harry)\nTEXT: Red people are white.\nFOL: all x. (Red(x) -> White(x))\nTEXT: Gary is green.\nFOL: Green(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(anne)\n\nTEXT: Bob is green.\nFOL: Green(bob)\n\nTEXT: Bob is quiet.\nFOL: Quiet(bob)\n\nTEXT: Bob is red.\nFOL: Red(bob)\n\nTEXT: Bob is round.\nFOL: Round(bob)\n\nTEXT: Gary is blue.\nFOL: Blue(gary)\n\nTEXT: Gary is green.\nFOL: Green(gary)\n\nTEXT: Gary is nice.\nFOL: Nice(gary)\n\nTEXT: Gary is quiet.\nFOL: Quiet(gary)\n\nTEXT: Gary is red.\nFOL: Red(gary)\n\nTEXT: Gary is white.\nFOL: White(gary)\n\nTEXT: Harry is green.\nFOL: Green(harry)\n\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\n\nTEXT: Harry is red.\nFOL: Red(harry)\n\nTEXT: Harry is white.\nFOL: White(harry)\n\nTEXT: Red people are white.\nFOL: all x. (Red(x) -> White(x))\n\nTEXT: Gary is green.\nFOL: Green(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(anne)\nTEXT: Bob is green.\nFOL: Green(bob)\nTEXT: Bob is quiet.\nFOL: Quiet(bob)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Gary is blue.\nFOL: Blue(gary)\nTEXT: Gary is green.\nFOL: Green(gary)\nTEXT: Gary is nice.\nFOL: Nice(gary)\nTEXT: Gary is quiet.\nFOL: Quiet(gary)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Gary is white.\nFOL: White(gary)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is red.\nFOL: Red(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: Red people are white.\nFOL: all x. (Red(x) -> White(x))\nTEXT: Gary is green.\nFOL: Green(gary)  # This sentence is a duplicate and can be ignored.\n</EVALUATE>"
  ]
 },
 {
  "index": 11,
  "responses": [
   "<EVALUATE>\nTEXT: Bob who frequently wears red clothes always feels very cold because of his young age on the team and his rough skin.\nFOL: all x. (WearsRedClothes(x) & Young(x) & RoughSkin(x) -> Cold(x))\nTEXT: Young Charlie has a round form, believes in green and is rough.\nFOL: Young(charlie) & RoundForm(charlie) & BelievesInGreen(charlie) & Rough(charlie)\nTEXT: That guy Dave sure is nice.\nFOL: Nice(dave)\nTEXT: People who have green body paint and act kind to others are quite young.\nFOL: all x. (GreenBodyPaint(x) & ActsKind(x) -> Young(x))\nTEXT: Any person that's blue, young and green will turn out to be a nice person, too.\nFOL: all x. (Blue(x) & Young(x) & Green(x) -> Nice(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Big people with rough, green skin are cold because of it.\nFOL: all x. (Big(x) & RoughSkin(x) & GreenSkin(x) -> Cold(x))\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: all x. (Nice(x) & RedSkin(x) & RoughSkin(x) -> GreenWithEnvy(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: Young(x) & Big(x) & Rough(x) -> RoundForm(x)\nTEXT: Every single blue and red person who acts sort of rough tends to be green in places.\nFOL: all x. ((Blue(x) & Red(x) & ActsRough(x)) -> GreenInPlaces(x))\nTEXT: Eric is cold.\nFOL: Cold(eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob who frequently wears red clothes always feels very cold because of his young age on the team and his rough skin.\nFOL: all x. (WearsRedClothes(x) & Young(x) & RoughSkin(x) -> Cold(x))\nTEXT: Young Charlie has a round form, believes in green and is rough.\nFOL: Young(charlie) & RoundForm(charlie) & BelievesInGreen(charlie) & Rough(charlie)\nTEXT: That guy Dave sure is nice.\nFOL: Nice(dave)\nTEXT: People who have green body paint and act kind to others are quite young.\nFOL: all x. (GreenBodyPaint(x) & ActsKind(x) -> Young(x))\nTEXT: Any person that's blue, young and green will turn out to be a nice person, too.\nFOL: all x. (Blue(x) & Young(x) & Green(x) -> Nice(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Big people with rough, green skin are cold because of it.\nFOL: all x. (Big(x) & RoughSkin(x) & GreenSkin(x) -> Cold(x))\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: all x. (Nice(x) & RedSkin(x) & RoughSkin(x) -> GreenWithEnvy(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: Young(x) & Big(x) & Rough(x) & Big(x) -> RoundForm(x)\nTEXT: Every single blue and red person who acts sort of rough tends to be green in places.\nFOL: all x. ((Blue(x) & Red(x) & ActsRough(x)) -> GreenInPlaces(x))\nTEXT: Eric is cold.\nFOL: Cold(eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob who frequently wears red clothes always feels very cold because of his young age on the team and his rough skin.\nFOL: all x. (WearsRedClothes(x) & Young(x) & RoughSkin(x) -> Cold(x))\nTEXT: Young Charlie has a round form, believes in green and is rough.\nFOL: Young(charlie) & RoundForm(charlie) & BelievesInGreen(charlie) & Rough(charlie)\nTEXT: That guy Dave sure is nice.\nFOL: Nice(dave)\nTEXT: People who have green body paint and act kind to others are quite young.\nFOL: all x. (GreenBodyPaint(x) & ActsKind(x) -> Young(x))\nTEXT: Any person that's blue, young and green will turn out to be a nice person, too.\nFOL: all x. (Blue(x) & Young(x) & Green(x) -> Nice(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Big people with rough, green skin are cold because of it.\nFOL: all x. (Big(x) & RoughGreenSkin(x) -> Cold(x))\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: all x. (Nice(x) & RedRoughSkin(x) -> GreenWithEnvy(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: Young(x) & Big(x) & Rough(x) & Big(x) -> RoundForm(x)\nTEXT: Every single blue and red person who acts sort of rough tends to be green in places.\nFOL: all x. ((Blue(x) & Red(x) & ActsRough(x)) -> GreenInPlaces(x))\nTEXT: Eric is cold.\nFOL: Cold(eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob who frequently wears red clothes always feels very cold because of his young age on the team and his rough skin.\nFOL: all x. (WearsRedClothes(x) & Young(x) & RoughSkin(x) -> Cold(x))\nTEXT: Young Charlie has a round form, believes in green and is rough.\nFOL: Young(charlie) & RoundForm(charlie) & BelievesInGreen(charlie) & Rough(charlie)\nTEXT: That guy Dave sure is nice.\nFOL: Nice(dave)\nTEXT: People who have green body paint and act kind to others are quite young.\nFOL: all x. (GreenBodyPaint(x) & ActsKind(x) -> Young(x))\nTEXT: Any person that's blue, young and green will turn out to be a nice person, too.\nFOL: all x. (Blue(x) & Young(x) & Green(x) -> Nice(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Big people with rough, green skin are cold because of it.\nFOL: all x. (Big(x) & RoughSkin(x) & GreenSkin(x) -> Cold(x))\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: all x. (Nice(x) & RedSkin(x) & RoughSkin(x) -> GreenWithEnvy(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: Young(x) & Big(x) & Rough(x) & Big(x) -> RoundForm(x)\nTEXT: Every single blue and red person who acts sort of rough tends to be green in places.\nFOL: all x. ((Blue(x) & Red(x) & Rough(x)) -> GreenInPlaces(x))\nTEXT: Eric is cold.\nFOL: Cold(eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob who frequently wears red clothes always feels very cold because of his young age on the team and his rough skin.\nFOL: all x. (WearsRedClothes(x) & Young(x) & RoughSkin(x) -> Cold(x))\nTEXT: Young Charlie has a round form, believes in green and is rough.\nFOL: Young(charlie) & RoundForm(charlie) & BelievesInGreen(charlie) & Rough(charlie)\nTEXT: That guy Dave sure is nice.\nFOL: Nice(dave)\nTEXT: People who have green body paint and act kind to others are quite young.\nFOL: all x. (GreenBodyPaint(x) & ActsKind(x) -> Young(x))\nTEXT: Any person that's blue, young and green will turn out to be a nice person, too.\nFOL: all x. (Blue(x) & Young(x) & Green(x) -> Nice(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Big people with rough, green skin are cold because of it.\nFOL: all x. (Big(x) & RoughSkin(x) & GreenSkin(x) -> Cold(x))\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: all x. (Nice(x) & RedSkin(x) & RoughSkin(x) -> GreenWithEnvy(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: all x. (Young(x) & Big(x) & Rough(x) & Big(x) -> RoundForm(x))\nTEXT: Every single blue and red person who acts sort of rough tends to be green in places.\nFOL: all x. ((Blue(x) & Red(x) & ActsRough(x)) -> GreenInPlaces(x))\nTEXT: Eric is cold.\nFOL: Cold(eric)\n</EVALUATE>"
  ]
 },
 {
  "index": 12,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle eats the bear.\nFOL: Eats(baldEagle, bear)\nTEXT: The bald eagle eats the mouse.\nFOL: Eats(baldEagle, mouse)\nTEXT: The bald eagle is not big.\nFOL: -Big(baldEagle)\nTEXT: The bald eagle is nice.\nFOL: Nice(baldEagle)\nTEXT: The bald eagle is rough.\nFOL: Rough(baldEagle)\nTEXT: The bald eagle needs the dog.\nFOL: Needs(baldEagle, dog)\nTEXT: The bald eagle sees the bear.\nFOL: Sees(baldEagle, bear)\nTEXT: The bear does not eat the bald eagle.\nFOL: -Eats(bear, baldEagle)\nTEXT: The bear eats the mouse.\nFOL: Eats(bear, mouse)\nTEXT: The bear is big.\nFOL: Big(bear)\nTEXT: The bear sees the bald eagle.\nFOL: Sees(bear, baldEagle)\nTEXT: The bear sees the mouse.\nFOL: Sees(bear, mouse)\nTEXT: The dog does not eat the mouse.\nFOL: -Eats(dog, mouse)\nTEXT: The dog needs the mouse.\nFOL: Needs(dog, mouse)\nTEXT: The mouse is nice.\nFOL: Nice(mouse)\nTEXT: If someone sees the dog then the dog is nice.\nFOL: all x. (Sees(x, dog) -> Nice(dog))\nTEXT: If someone needs the bald eagle then the bald eagle is rough.\nFOL: all x. (Needs(x, baldEagle) -> Rough(baldEagle))\nTEXT: If someone is cold then they see the dog.\nFOL: all x. (Cold(x) -> Sees(x, dog))\nTEXT: If someone eats the bald eagle and they need the mouse then they see the mouse.\nFOL: all x. ((Eats(x, baldEagle) & Needs(x, mouse)) -> Sees(x, mouse))\nTEXT: If someone eats the bear then the bear needs the mouse.\nFOL: all x. (Eats(x, bear) -> Needs(bear, mouse))\nTEXT: If someone is blue and they need the dog then the dog does not need the bear.\nFOL: all x. ((Blue(x) & Needs(x, dog)) -> -Needs(dog, bear))\nTEXT: If someone eats the bear then the bear is cold.\nFOL: all x. (Eats(x, bear) -> Cold(bear))\nTEXT: If the dog is cold then the dog needs the mouse.\nFOL: all x. (Cold(dog) -> Needs(dog, mouse))\nTEXT: The bald eagle does not see the dog.\nFOL: -Sees(baldEagle, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the bear.\nFOL: Eats(baldEagle, bear)\nTEXT: The bald eagle eats the mouse.\nFOL: Eats(baldEagle, mouse)\nTEXT: The bald eagle is not big.\nFOL: -Big(baldEagle)\nTEXT: The bald eagle is nice.\nFOL: Nice(baldEagle)\nTEXT: The bald eagle is rough.\nFOL: Rough(baldEagle)\nTEXT: The bald eagle needs the dog.\nFOL: Needs(baldEagle, dog)\nTEXT: The bald eagle sees the bear.\nFOL: Sees(baldEagle, bear)\nTEXT: The bear does not eat the bald eagle.\nFOL: -Eats(bear, baldEagle)\nTEXT: The bear eats the mouse.\nFOL: Eats(bear, mouse)\nTEXT: The bear is big.\nFOL: Big(bear)\nTEXT: The bear sees the bald eagle.\nFOL: Sees(bear, baldEagle)\nTEXT: The bear sees the mouse.\nFOL: Sees(bear, mouse)\nTEXT: The dog does not eat the mouse.\nFOL: -Eats(dog, mouse)\nTEXT: The dog needs the mouse.\nFOL: Needs(dog, mouse)\nTEXT: The mouse is nice.\nFOL: Nice(mouse)\nTEXT: If someone sees the dog then the dog is nice.\nFOL: all x. (Sees(x, dog) -> Nice(dog))\nTEXT: If someone needs the bald eagle then the bald eagle is rough.\nFOL: all x. (Needs(x, baldEagle) -> Rough(baldEagle))\nTEXT: If someone is cold then they see the dog.\nFOL: all x. (Cold(x) -> Sees(x, dog))\nTEXT: If someone eats the bald eagle and they need the mouse then they see the mouse.\nFOL: all x. (Eats(x, baldEagle) & Needs(x, mouse) -> Sees(x, mouse))\nTEXT: If someone eats the bear then the bear needs the mouse.\nFOL: all x. (Eats(x, bear) -> Needs(bear, mouse))\nTEXT: If someone is blue and they need the dog then the dog does not need the bear.\nFOL: all x. (Blue(x) & Needs(x, dog) -> -Needs(dog, bear))\nTEXT: If someone eats the bear then the bear is cold.\nFOL: all x. (Eats(x, bear) -> Cold(bear))\nTEXT: If the dog is cold then the dog needs the mouse.\nFOL: all x. (Cold(dog) -> Needs(dog, mouse))\nTEXT: The bald eagle does not see the dog.\nFOL: -Sees(baldEagle, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the bear.\nFOL: Eats(baldEagle, bear)\nTEXT: The bald eagle eats the mouse.\nFOL: Eats(baldEagle, mouse)\nTEXT: The bald eagle is not big.\nFOL: -Big(baldEagle)\nTEXT: The bald eagle is nice.\nFOL: Nice(baldEagle)\nTEXT: The bald eagle is rough.\nFOL: Rough(baldEagle)\nTEXT: The bald eagle needs the dog.\nFOL: Needs(baldEagle, dog)\nTEXT: The bald eagle sees the bear.\nFOL: Sees(baldEagle, bear)\nTEXT: The bear does not eat the bald eagle.\nFOL: -Eats(bear, baldEagle)\nTEXT: The bear eats the mouse.\nFOL: Eats(bear, mouse)\nTEXT: The bear is big.\nFOL: Big(bear)\nTEXT: The bear sees the bald eagle.\nFOL: Sees(bear, baldEagle)\nTEXT: The bear sees the mouse.\nFOL: Sees(bear, mouse)\nTEXT: The dog does not eat the mouse.\nFOL: -Eats(dog, mouse)\nTEXT: The dog needs the mouse.\nFOL: Needs(dog, mouse)\nTEXT: The mouse is nice.\nFOL: Nice(mouse)\nTEXT: If someone sees the dog then the dog is nice.\nFOL: all x. (Sees(x, dog) -> Nice(dog))\nTEXT: If someone needs the bald eagle then the bald eagle is rough.\nFOL: all x. (Needs(x, baldEagle) -> Rough(baldEagle))\nTEXT: If someone is cold then they see the dog.\nFOL: all x. (Cold(x) -> Sees(x, dog))\nTEXT: If someone eats the bald eagle and they need the mouse then they see the mouse.\nFOL: all x. ((Eats(x, baldEagle) & Needs(x, mouse)) -> Sees(x, mouse))\nTEXT: If someone eats the bear then the bear needs the mouse.\nFOL: all x. (Eats(x, bear) -> Needs(bear, mouse))\nTEXT: If someone is blue and they need the dog then the dog does not need the bear.\nFOL: all x. (Blue(x) & Needs(x, dog) -> -Needs(dog, bear))\nTEXT: If someone eats the bear then the bear is cold.\nFOL: all x. (Eats(x, bear) -> Cold(bear))\nTEXT: If the dog is cold then the dog needs the mouse.\nFOL: all x. (Cold(dog) -> Needs(dog, mouse))\nTEXT: The bald eagle does not see the dog.\nFOL: -Sees(baldEagle, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the bear.\nFOL: Eat(baldEagle, bear)\nTEXT: The bald eagle eats the mouse.\nFOL: Eat(baldEagle, mouse)\nTEXT: The bald eagle is not big.\nFOL: -Big(baldEagle)\nTEXT: The bald eagle is nice.\nFOL: Nice(baldEagle)\nTEXT: The bald eagle is rough.\nFOL: Rough(baldEagle)\nTEXT: The bald eagle needs the dog.\nFOL: Needs(baldEagle, dog)\nTEXT: The bald eagle sees the bear.\nFOL: See(baldEagle, bear)\nTEXT: The bear does not eat the bald eagle.\nFOL: -Eat(bear, baldEagle)\nTEXT: The bear eats the mouse.\nFOL: Eat(bear, mouse)\nTEXT: The bear is big.\nFOL: Big(bear)\nTEXT: The bear sees the bald eagle.\nFOL: See(bear, baldEagle)\nTEXT: The bear sees the mouse.\nFOL: See(bear, mouse)\nTEXT: The dog does not eat the mouse.\nFOL: -Eat(dog, mouse)\nTEXT: The dog needs the mouse.\nFOL: Needs(dog, mouse)\nTEXT: The mouse is nice.\nFOL: Nice(mouse)\nTEXT: If someone sees the dog then the dog is nice.\nFOL: all x. (See(x, dog) -> Nice(dog))\nTEXT: If someone needs the bald eagle then the bald eagle is rough.\nFOL: all x. (Needs(x, baldEagle) -> Rough(baldEagle))\nTEXT: If someone is cold then they see the dog.\nFOL: all x. (Cold(x) -> See(x, dog))\nTEXT: If someone eats the bald eagle and they need the mouse then they see the mouse.\nFOL: all x. ((Eat(x, baldEagle) & Needs(x, mouse)) -> See(x, mouse))\nTEXT: If someone eats the bear then the bear needs the mouse.\nFOL: all x. (Eat(x, bear) -> Needs(bear, mouse))\nTEXT: If someone is blue and they need the dog then the dog does not need the bear.\nFOL: all x. ((Blue(x) & Needs(x, dog)) -> -Needs(dog, bear))\nTEXT: If someone eats the bear then the bear is cold.\nFOL: all x. (Eat(x, bear) -> Cold(bear))\nTEXT: If the dog is cold then the dog needs the mouse.\nFOL: all x. (Cold(dog) -> Needs(dog, mouse))\nTEXT: The bald eagle does not see the dog.\nFOL: -See(baldEagle, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the bear.\nFOL: Eats(baldEagle, bear)\nTEXT: The bald eagle eats the mouse.\nFOL: Eats(baldEagle, mouse)\nTEXT: The bald eagle is not big.\nFOL: -Big(baldEagle)\nTEXT: The bald eagle is nice.\nFOL: Nice(baldEagle)\nTEXT: The bald eagle is rough.\nFOL: Rough(baldEagle)\nTEXT: The bald eagle needs the dog.\nFOL: Needs(baldEagle, dog)\nTEXT: The bald eagle sees the bear.\nFOL: Sees(baldEagle, bear)\nTEXT: The bear does not eat the bald eagle.\nFOL: -Eats(bear, baldEagle)\nTEXT: The bear eats the mouse.\nFOL: Eats(bear, mouse)\nTEXT: The bear is big.\nFOL: Big(bear)\nTEXT: The bear sees the bald eagle.\nFOL: Sees(bear, baldEagle)\nTEXT: The bear sees the mouse.\nFOL: Sees(bear, mouse)\nTEXT: The dog does not eat the mouse.\nFOL: -Eats(dog, mouse)\nTEXT: The dog needs the mouse.\nFOL: Needs(dog, mouse)\nTEXT: The mouse is nice.\nFOL: Nice(mouse)\nTEXT: If someone sees the dog then the dog is nice.\nFOL: (Sees(x, dog) -> Nice(dog))\nTEXT: If someone needs the bald eagle then the bald eagle is rough.\nFOL: (Needs(x, baldEagle) -> Rough(baldEagle))\nTEXT: If someone is cold then they see the dog.\nFOL: (Cold(x) -> Sees(x, dog))\nTEXT: If someone eats the bald eagle and they need the mouse then they see the mouse.\nFOL: (Eats(x, baldEagle) & Needs(x, mouse) -> Sees(x, mouse))\nTEXT: If someone eats the bear then the bear needs the mouse.\nFOL: (Eats(x, bear) -> Needs(bear, mouse))\nTEXT: If someone is blue and they need the dog then the dog does not need the bear.\nFOL: (Blue(x) & Needs(x, dog) -> -Needs(dog, bear))\nTEXT: If someone eats the bear then the bear is cold.\nFOL: (Eats(x, bear) -> Cold(bear))\nTEXT: If the dog is cold then the dog needs the mouse.\nFOL: (Cold(dog) -> Needs(dog, mouse))\nTEXT: The bald eagle does not see the dog.\nFOL: -Sees(baldEagle, dog)\n</EVALUATE>"
  ]
 },
 {
  "index": 13,
  "responses": [
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: Chases(cow, dog)\nTEXT: The cow does not chase the squirrel.\nFOL: -Chases(cow, squirrel)\nTEXT: The cow is kind.\nFOL: Kind(cow)\nTEXT: The cow is young.\nFOL: Young(cow)\nTEXT: The dog chases the cow.\nFOL: Chases(dog, cow)\nTEXT: The dog is round.\nFOL: Round(dog)\nTEXT: The dog likes the tiger.\nFOL: Likes(dog, tiger)\nTEXT: The squirrel eats the dog.\nFOL: Eats(squirrel, dog)\nTEXT: The squirrel is green.\nFOL: Green(squirrel)\nTEXT: The squirrel does not like the tiger.\nFOL: -Likes(squirrel, tiger)\nTEXT: The tiger eats the dog.\nFOL: Eats(tiger, dog)\nTEXT: The tiger is red.\nFOL: Red(tiger)\nTEXT: If the tiger chases the squirrel then the tiger likes the dog.\nFOL: Chases(tiger, squirrel) -> Likes(tiger, dog)\nTEXT: If something is kind and it does not eat the dog then the dog is young.\nFOL: (Kind(x) & -Eats(x, dog)) -> Young(dog)\nTEXT: If something chases the squirrel then it likes the tiger.\nFOL: Chases(x, squirrel) -> Likes(x, tiger)\nTEXT: If something is young then it likes the tiger.\nFOL: Young(x) -> Likes(x, tiger)\nTEXT: If something is red and it eats the dog then the dog is red.\nFOL: (Red(x) & Eats(x, dog)) -> Red(dog)\nTEXT: If something likes the tiger and the tiger eats the dog then it is green.\nFOL: (Likes(x, tiger) & Eats(tiger, dog)) -> Green(x)\nTEXT: If something likes the tiger then it chases the tiger.\nFOL: Likes(x, tiger) -> Chases(x, tiger)\nTEXT: If something is green then it eats the cow.\nFOL: Green(x) -> Eats(x, cow)\nTEXT: The tiger is green.\nFOL: Green(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: Chase(cow, dog)\nTEXT: The cow does not chase the squirrel.\nFOL: -Chase(cow, squirrel)\nTEXT: The cow is kind.\nFOL: Kind(cow)\nTEXT: The cow is young.\nFOL: Young(cow)\nTEXT: The dog chases the cow.\nFOL: Chase(dog, cow)\nTEXT: The dog is round.\nFOL: Round(dog)\nTEXT: The dog likes the tiger.\nFOL: Likes(dog, tiger)\nTEXT: The squirrel eats the dog.\nFOL: Eat(squirrel, dog)\nTEXT: The squirrel is green.\nFOL: Green(squirrel)\nTEXT: The squirrel does not like the tiger.\nFOL: -Likes(squirrel, tiger)\nTEXT: The tiger eats the dog.\nFOL: Eat(tiger, dog)\nTEXT: The tiger is red.\nFOL: Red(tiger)\nTEXT: If the tiger chases the squirrel then the tiger likes the dog.\nFOL: Chase(tiger, squirrel) -> Likes(tiger, dog)\nTEXT: If something is kind and it does not eat the dog then the dog is young.\nFOL: (Kind(x) & -Eat(x, dog)) -> Young(dog)\nTEXT: If something chases the squirrel then it likes the tiger.\nFOL: Chase(x, squirrel) -> Likes(x, tiger)\nTEXT: If something is young then it likes the tiger.\nFOL: Young(x) -> Likes(x, tiger)\nTEXT: If something is red and it eats the dog then the dog is red.\nFOL: (Red(x) & Eat(x, dog)) -> Red(dog)\nTEXT: If something likes the tiger and the tiger eats the dog then it is green.\nFOL: (Likes(x, tiger) & Eat(tiger, dog)) -> Green(x)\nTEXT: If something likes the tiger then it chases the tiger.\nFOL: Likes(x, tiger) -> Chase(x, tiger)\nTEXT: If something is green then it eats the cow.\nFOL: Green(x) -> Eat(x, cow)\nTEXT: The tiger is green.\nFOL: Green(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: Chase(cow, dog)\nTEXT: The cow does not chase the squirrel.\nFOL: -Chase(cow, squirrel)\nTEXT: The cow is kind.\nFOL: Kind(cow)\nTEXT: The cow is young.\nFOL: Young(cow)\nTEXT: The dog chases the cow.\nFOL: Chase(dog, cow)\nTEXT: The dog is round.\nFOL: Round(dog)\nTEXT: The dog likes the tiger.\nFOL: Like(dog, tiger)\nTEXT: The squirrel eats the dog.\nFOL: Eat(squirrel, dog)\nTEXT: The squirrel is green.\nFOL: Green(squirrel)\nTEXT: The squirrel does not like the tiger.\nFOL: -Like(squirrel, tiger)\nTEXT: The tiger eats the dog.\nFOL: Eat(tiger, dog)\nTEXT: The tiger is red.\nFOL: Red(tiger)\nTEXT: If the tiger chases the squirrel then the tiger likes the dog.\nFOL: Chase(tiger, squirrel) -> Like(tiger, dog)\nTEXT: If something is kind and it does not eat the dog then the dog is young.\nFOL: (Kind(x) & -Eat(x, dog)) -> Young(dog)\nTEXT: If something chases the squirrel then it likes the tiger.\nFOL: Chase(x, squirrel) -> Like(x, tiger)\nTEXT: If something is young then it likes the tiger.\nFOL: Young(x) -> Like(x, tiger)\nTEXT: If something is red and it eats the dog then the dog is red.\nFOL: (Red(x) & Eat(x, dog)) -> Red(dog)\nTEXT: If something likes the tiger and the tiger eats the dog then it is green.\nFOL: (Like(x, tiger) & Eat(tiger, dog)) -> Green(x)\nTEXT: If something likes the tiger then it chases the tiger.\nFOL: Like(x, tiger) -> Chase(x, tiger)\nTEXT: If something is green then it eats the cow.\nFOL: Green(x) -> Eat(x, cow)\nTEXT: The tiger is green.\nFOL: Green(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: Chases(cow, dog)\nTEXT: The cow does not chase the squirrel.\nFOL: -Chases(cow, squirrel)\nTEXT: The cow is kind.\nFOL: Kind(cow)\nTEXT: The cow is young.\nFOL: Young(cow)\nTEXT: The dog chases the cow.\nFOL: Chases(dog, cow)\nTEXT: The dog is round.\nFOL: Round(dog)\nTEXT: The dog likes the tiger.\nFOL: Likes(dog, tiger)\nTEXT: The squirrel eats the dog.\nFOL: Eats(squirrel, dog)\nTEXT: The squirrel is green.\nFOL: Green(squirrel)\nTEXT: The squirrel does not like the tiger.\nFOL: -Likes(squirrel, tiger)\nTEXT: The tiger eats the dog.\nFOL: Eats(tiger, dog)\nTEXT: The tiger is red.\nFOL: Red(tiger)\nTEXT: If the tiger chases the squirrel then the tiger likes the dog.\nFOL: (Chases(tiger, squirrel) -> Likes(tiger, dog))\nTEXT: If something is kind and it does not eat the dog then the dog is young.\nFOL: (Kind(x) & -Eats(x, dog) -> Young(dog))\nTEXT: If something chases the squirrel then it likes the tiger.\nFOL: (Chases(x, squirrel) -> Likes(x, tiger))\nTEXT: If something is young then it likes the tiger.\nFOL: (Young(x) -> Likes(x, tiger))\nTEXT: If something is red and it eats the dog then the dog is red.\nFOL: (Red(x) & Eats(x, dog) -> Red(dog))\nTEXT: If something likes the tiger and the tiger eats the dog then it is green.\nFOL: ((Likes(x, tiger) & Eats(tiger, dog)) -> Green(x))\nTEXT: If something likes the tiger then it chases the tiger.\nFOL: (Likes(x, tiger) -> Chases(x, tiger))\nTEXT: If something is green then it eats the cow.\nFOL: (Green(x) -> Eats(x, cow))\nTEXT: The tiger is green.\nFOL: Green(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: Chase(cow, dog)\nTEXT: The cow does not chase the squirrel.\nFOL: -Chase(cow, squirrel)\nTEXT: The cow is kind.\nFOL: Kind(cow)\nTEXT: The cow is young.\nFOL: Young(cow)\nTEXT: The dog chases the cow.\nFOL: Chase(dog, cow)\nTEXT: The dog is round.\nFOL: Round(dog)\nTEXT: The dog likes the tiger.\nFOL: Likes(dog, tiger)\nTEXT: The squirrel eats the dog.\nFOL: Eats(squirrel, dog)\nTEXT: The squirrel is green.\nFOL: Green(squirrel)\nTEXT: The squirrel does not like the tiger.\nFOL: -Likes(squirrel, tiger)\nTEXT: The tiger eats the dog.\nFOL: Eats(tiger, dog)\nTEXT: The tiger is red.\nFOL: Red(tiger)\nTEXT: If the tiger chases the squirrel then the tiger likes the dog.\nFOL: (Chase(tiger, squirrel) -> Likes(tiger, dog))\nTEXT: If something is kind and it does not eat the dog then the dog is young.\nFOL: (Kind(x) & -Eats(x, dog) -> Young(dog))\nTEXT: If something chases the squirrel then it likes the tiger.\nFOL: (Chase(x, squirrel) -> Likes(x, tiger))\nTEXT: If something is young then it likes the tiger.\nFOL: (Young(x) -> Likes(x, tiger))\nTEXT: If something is red and it eats the dog then the dog is red.\nFOL: (Red(x) & Eats(x, dog) -> Red(dog))\nTEXT: If something likes the tiger and the tiger eats the dog then it is green.\nFOL: ((Likes(x, tiger) & Eats(tiger, dog)) -> Green(x))\nTEXT: If something likes the tiger then it chases the tiger.\nFOL: (Likes(x, tiger) -> Chase(x, tiger))\nTEXT: If something is green then it eats the cow.\nFOL: (Green(x) -> Eats(x, cow))\nTEXT: The tiger is green.\nFOL: Green(tiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 14,
  "responses": [
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: Chases(cow, dog)\nTEXT: The cow does not see the tiger.\nFOL: -See(cow, tiger)\nTEXT: The cow visits the dog.\nFOL: Visit(cow, dog)\nTEXT: The cow visits the tiger.\nFOL: Visit(cow, tiger)\nTEXT: The dog does not see the lion.\nFOL: -See(dog, lion)\nTEXT: The lion chases the cow.\nFOL: Chases(lion, cow)\nTEXT: The lion chases the dog.\nFOL: Chases(lion, dog)\nTEXT: The lion does not chase the tiger.\nFOL: -Chases(lion, tiger)\nTEXT: The lion is young.\nFOL: Young(lion)\nTEXT: The lion sees the cow.\nFOL: See(lion, cow)\nTEXT: The lion does not see the dog.\nFOL: -See(lion, dog)\nTEXT: The lion sees the tiger.\nFOL: See(lion, tiger)\nTEXT: The lion visits the tiger.\nFOL: Visit(lion, tiger)\nTEXT: The tiger sees the dog.\nFOL: See(tiger, dog)\nTEXT: The tiger visits the lion.\nFOL: Visit(tiger, lion)\nTEXT: If something chases the tiger and the tiger chases the lion then it is not young.\nFOL: (Chases(x, tiger) & Chases(tiger, lion)) -> -Young(x)\nTEXT: If something visits the lion then the lion is green.\nFOL: Visit(x, lion) -> Green(lion)\nTEXT: If something sees the dog then it does not see the lion.\nFOL: See(x, dog) -> -See(x, lion)\nTEXT: If something is cold then it chases the cow.\nFOL: Cold(x) -> Chases(x, cow)\nTEXT: If something sees the tiger then the tiger is cold.\nFOL: See(x, tiger) -> Cold(tiger)\nTEXT: If something visits the cow then the cow visits the tiger.\nFOL: Visit(x, cow) -> Visit(cow, tiger)\nTEXT: If something sees the tiger then it is nice.\nFOL: See(x, tiger) -> Nice(x)\nTEXT: If something visits the lion and it chases the cow then it chases the dog.\nFOL: (Visit(x, lion) & Chases(lion, cow)) -> Chases(x, dog)\nTEXT: The cow is not nice.\nFOL: -Nice(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: Chases(cow, dog)\nTEXT: The cow does not see the tiger.\nFOL: -Sees(cow, tiger)\nTEXT: The cow visits the dog.\nFOL: Visits(cow, dog)\nTEXT: The cow visits the tiger.\nFOL: Visits(cow, tiger)\nTEXT: The dog does not see the lion.\nFOL: -Sees(dog, lion)\nTEXT: The lion chases the cow.\nFOL: Chases(lion, cow)\nTEXT: The lion chases the dog.\nFOL: Chases(lion, dog)\nTEXT: The lion does not chase the tiger.\nFOL: -Chases(lion, tiger)\nTEXT: The lion is young.\nFOL: Young(lion)\nTEXT: The lion sees the cow.\nFOL: Sees(lion, cow)\nTEXT: The lion does not see the dog.\nFOL: -Sees(lion, dog)\nTEXT: The lion sees the tiger.\nFOL: Sees(lion, tiger)\nTEXT: The lion visits the tiger.\nFOL: Visits(lion, tiger)\nTEXT: The tiger sees the dog.\nFOL: Sees(tiger, dog)\nTEXT: The tiger visits the lion.\nFOL: Visits(tiger, lion)\nTEXT: If something chases the tiger and the tiger chases the lion then it is not young.\nFOL: (Chases(x, tiger) & Chases(tiger, lion)) -> -Young(x)\nTEXT: If something visits the lion then the lion is green.\nFOL: Visits(x, lion) -> Green(lion)\nTEXT: If something sees the dog then it does not see the lion.\nFOL: Sees(x, dog) -> -Sees(x, lion)\nTEXT: If something is cold then it chases the cow.\nFOL: Cold(x) -> Chases(x, cow)\nTEXT: If something sees the tiger then the tiger is cold.\nFOL: Sees(x, tiger) -> Cold(tiger)\nTEXT: If something visits the cow then the cow visits the tiger.\nFOL: Visits(x, cow) -> Visits(cow, tiger)\nTEXT: If something sees the tiger then it is nice.\nFOL: Sees(x, tiger) -> Nice(x)\nTEXT: If something visits the lion and it chases the cow then it chases the dog.\nFOL: (Visits(x, lion) & Chases(x, cow)) -> Chases(x, dog)\nTEXT: The cow is not nice.\nFOL: -Nice(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: Chases(cow, dog)\nTEXT: The cow does not see the tiger.\nFOL: -See(cow, tiger)\nTEXT: The cow visits the dog.\nFOL: Visit(cow, dog)\nTEXT: The cow visits the tiger.\nFOL: Visit(cow, tiger)\nTEXT: The dog does not see the lion.\nFOL: -See(dog, lion)\nTEXT: The lion chases the cow.\nFOL: Chases(lion, cow)\nTEXT: The lion chases the dog.\nFOL: Chases(lion, dog)\nTEXT: The lion does not chase the tiger.\nFOL: -Chases(lion, tiger)\nTEXT: The lion is young.\nFOL: Young(lion)\nTEXT: The lion sees the cow.\nFOL: See(lion, cow)\nTEXT: The lion does not see the dog.\nFOL: -See(lion, dog)\nTEXT: The lion sees the tiger.\nFOL: See(lion, tiger)\nTEXT: The lion visits the tiger.\nFOL: Visit(lion, tiger)\nTEXT: The tiger sees the dog.\nFOL: See(tiger, dog)\nTEXT: The tiger visits the lion.\nFOL: Visit(tiger, lion)\nTEXT: If something chases the tiger and the tiger chases the lion then it is not young.\nFOL: all x. ((Chases(x, tiger) & Chases(tiger, lion)) -> -Young(x))\nTEXT: If something visits the lion then the lion is green.\nFOL: all x. (Visit(x, lion) -> Green(lion))\nTEXT: If something sees the dog then it does not see the lion.\nFOL: all x. (See(x, dog) -> -See(x, lion))\nTEXT: If something is cold then it chases the cow.\nFOL: all x. (Cold(x) -> Chases(x, cow))\nTEXT: If something sees the tiger then the tiger is cold.\nFOL: all x. (See(x, tiger) -> Cold(tiger))\nTEXT: If something visits the cow then the cow visits the tiger.\nFOL: all x. (Visit(x, cow) -> Visit(cow, tiger))\nTEXT: If something sees the tiger then it is nice.\nFOL: all x. (See(x, tiger) -> Nice(x))\nTEXT: If something visits the lion and it chases the cow then it chases the dog.\nFOL: all x. ((Visit(x, lion) & Chases(x, cow)) -> Chases(x, dog))\nTEXT: The cow is not nice.\nFOL: -Nice(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: Chases(cow, dog)\nTEXT: The cow does not see the tiger.\nFOL: -Sees(cow, tiger)\nTEXT: The cow visits the dog.\nFOL: Visits(cow, dog)\nTEXT: The cow visits the tiger.\nFOL: Visits(cow, tiger)\nTEXT: The dog does not see the lion.\nFOL: -Sees(dog, lion)\nTEXT: The lion chases the cow.\nFOL: Chases(lion, cow)\nTEXT: The lion chases the dog.\nFOL: Chases(lion, dog)\nTEXT: The lion does not chase the tiger.\nFOL: -Chases(lion, tiger)\nTEXT: The lion is young.\nFOL: Young(lion)\nTEXT: The lion sees the cow.\nFOL: Sees(lion, cow)\nTEXT: The lion does not see the dog.\nFOL: -Sees(lion, dog)\nTEXT: The lion sees the tiger.\nFOL: Sees(lion, tiger)\nTEXT: The lion visits the tiger.\nFOL: Visits(lion, tiger)\nTEXT: The tiger sees the dog.\nFOL: Sees(tiger, dog)\nTEXT: The tiger visits the lion.\nFOL: Visits(tiger, lion)\nTEXT: If something chases the tiger and the tiger chases the lion then it is not young.\nFOL: all x. ((Chases(x, tiger) & Chases(tiger, lion)) -> -Young(x))\nTEXT: If something visits the lion then the lion is green.\nFOL: all x. (Visits(x, lion) -> Green(lion))\nTEXT: If something sees the dog then it does not see the lion.\nFOL: all x. (Sees(x, dog) -> -Sees(x, lion))\nTEXT: If something is cold then it chases the cow.\nFOL: all x. (Cold(x) -> Chases(x, cow))\nTEXT: If something sees the tiger then the tiger is cold.\nFOL: all x. (Sees(x, tiger) -> Cold(tiger))\nTEXT: If something visits the cow then the cow visits the tiger.\nFOL: all x. (Visits(x, cow) -> Visits(cow, tiger))\nTEXT: If something sees the tiger then it is nice.\nFOL: all x. (Sees(x, tiger) -> Nice(x))\nTEXT: If something visits the lion and it chases the cow then it chases the dog.\nFOL: all x. ((Visits(x, lion) & Chases(x, cow)) -> Chases(x, dog))\nTEXT: The cow is not nice.\nFOL: -Nice(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: Chase(cow, dog)\nTEXT: The cow does not see the tiger.\nFOL: -See(cow, tiger)\nTEXT: The cow visits the dog.\nFOL: Visit(cow, dog)\nTEXT: The cow visits the tiger.\nFOL: Visit(cow, tiger)\nTEXT: The dog does not see the lion.\nFOL: -See(dog, lion)\nTEXT: The lion chases the cow.\nFOL: Chase(lion, cow)\nTEXT: The lion chases the dog.\nFOL: Chase(lion, dog)\nTEXT: The lion does not chase the tiger.\nFOL: -Chase(lion, tiger)\nTEXT: The lion is young.\nFOL: Young(lion)\nTEXT: The lion sees the cow.\nFOL: See(lion, cow)\nTEXT: The lion does not see the dog.\nFOL: -See(lion, dog)\nTEXT: The lion sees the tiger.\nFOL: See(lion, tiger)\nTEXT: The lion visits the tiger.\nFOL: Visit(lion, tiger)\nTEXT: The tiger sees the dog.\nFOL: See(tiger, dog)\nTEXT: The tiger visits the lion.\nFOL: Visit(tiger, lion)\nTEXT: If something chases the tiger and the tiger chases the lion then it is not young.\nFOL: (Chase(x, tiger) & Chase(tiger, lion)) -> -Young(x)\nTEXT: If something visits the lion then the lion is green.\nFOL: Visit(x, lion) -> Green(lion)\nTEXT: If something sees the dog then it does not see the lion.\nFOL: See(x, dog) -> -See(x, lion)\nTEXT: If something is cold then it chases the cow.\nFOL: Cold(x) -> Chase(x, cow)\nTEXT: If something sees the tiger then the tiger is cold.\nFOL: See(x, tiger) -> Cold(tiger)\nTEXT: If something visits the cow then the cow visits the tiger.\nFOL: Visit(x, cow) -> Visit(cow, tiger)\nTEXT: If something sees the tiger then it is nice.\nFOL: See(x, tiger) -> Nice(x)\nTEXT: If something visits the lion and it chases the cow then it chases the dog.\nFOL: (Visit(x, lion) & Chase(x, cow)) -> Chase(x, dog)\nTEXT: The cow is not nice.\nFOL: -Nice(cow)\n</EVALUATE>"
  ]
 },
 {
  "index": 15,
  "responses": [
   "<EVALUATE>\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: Harry is cold.\nFOL: Cold(harry)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is kind.\nFOL: Kind(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: Harry is young.\nFOL: Young(harry)\nTEXT: Quiet people are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nTEXT: All green, kind people are blue.\nFOL: all x. ((Green(x) & Kind(x)) -> Blue(x))\nTEXT: Erin is kind.\nFOL: Kind(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: Harry is cold.\nFOL: Cold(harry)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is kind.\nFOL: Kind(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: Harry is young.\nFOL: Young(harry)\nTEXT: Quiet people are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nTEXT: All green, kind people are blue.\nFOL: all x. ((Green(x) & Kind(x)) -> Blue(x))\nTEXT: Erin is kind.\nFOL: Kind(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: Harry is cold.\nFOL: Cold(harry)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is kind.\nFOL: Kind(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: Harry is young.\nFOL: Young(harry)\nTEXT: Quiet people are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nTEXT: All green, kind people are blue.\nFOL: all x. (Green(x) & Kind(x) -> Blue(x))\nTEXT: Erin is kind.\nFOL: Kind(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: Harry is cold.\nFOL: Cold(harry)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is kind.\nFOL: Kind(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: Harry is young.\nFOL: Young(harry)\nTEXT: Quiet people are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nTEXT: All green, kind people are blue.\nFOL: all x. (Green(x) & Kind(x) -> Blue(x))\nTEXT: Erin is kind.\nFOL: Kind(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: Harry is cold.\nFOL: Cold(harry)\nTEXT: Harry is green.\nFOL: -Blue(harry) | Green(harry)\nTEXT: Harry is kind.\nFOL: Kind(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: Harry is young.\nFOL: Young(harry)\nTEXT: Quiet people are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nTEXT: All green, kind people are blue.\nFOL: all x. ((Green(x) & Kind(x)) -> Blue(x))\nTEXT: Erin is kind.\nFOL: Kind(erin)\n</EVALUATE>"
  ]
 },
 {
  "index": 16,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is not green.\nFOL: -Green(anne)\nTEXT: Anne is kind.\nFOL: Kind(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Charlie is not white.\nFOL: -White(charlie)\nTEXT: Erin is not green.\nFOL: -Green(erin)\nTEXT: Erin is not nice.\nFOL: -Nice(erin)\nTEXT: Harry is furry.\nFOL: Furry(harry)\nTEXT: Harry is nice.\nFOL: Nice(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: All white things are not smart.\nFOL: all x. (White(x) -> -Smart(x))\nTEXT: If Erin is white and Erin is furry then Erin is nice.\nFOL: (White(erin) & Furry(erin)) -> Nice(erin)\nTEXT: If something is furry and kind then it is green.\nFOL: (Furry(x) & Kind(x)) -> Green(x)\nTEXT: If something is kind and not nice then it is not big.\nFOL: (Kind(x) & -Nice(x)) -> -Big(x)\nTEXT: If Harry is kind and Harry is nice then Harry is furry.\nFOL: (Kind(harry) & Nice(harry)) -> Furry(harry)\nTEXT: If Harry is green and Harry is not smart then Harry is furry.\nFOL: (Green(harry) & -Smart(harry)) -> Furry(harry)\nTEXT: Harry is not green.\nFOL: -Green(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is not green.\nFOL: -Green(anne)\nTEXT: Anne is kind.\nFOL: Kind(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Charlie is not white.\nFOL: -White(charlie)\nTEXT: Erin is not green.\nFOL: -Green(erin)\nTEXT: Erin is not nice.\nFOL: -Nice(erin)\nTEXT: Harry is furry.\nFOL: Furry(harry)\nTEXT: Harry is nice.\nFOL: Nice(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: All white things are not smart.\nFOL: all x. (White(x) -> -Smart(x))\nTEXT: If Erin is white and Erin is furry then Erin is nice.\nFOL: (White(erin) & Furry(erin)) -> Nice(erin)\nTEXT: If something is furry and kind then it is green.\nFOL: (Furry(x) & Kind(x)) -> Green(x)\nTEXT: If something is kind and not nice then it is not big.\nFOL: (Kind(x) & -Nice(x)) -> -Big(x)\nTEXT: If Harry is kind and Harry is nice then Harry is furry.\nFOL: (Kind(harry) & Nice(harry)) -> Furry(harry)\nTEXT: If Harry is green and Harry is not smart then Harry is furry.\nFOL: (Green(harry) & -Smart(harry)) -> Furry(harry)\nTEXT: Harry is not green.\nFOL: -Green(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is not green.\nFOL: -Green(anne)\nTEXT: Anne is kind.\nFOL: Kind(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Charlie is not white.\nFOL: -White(charlie)\nTEXT: Erin is not green.\nFOL: -Green(erin)\nTEXT: Erin is not nice.\nFOL: -Nice(erin)\nTEXT: Harry is furry.\nFOL: Furry(harry)\nTEXT: Harry is nice.\nFOL: Nice(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: All white things are not smart.\nFOL: all x. (White(x) -> -Smart(x))\nTEXT: If Erin is white and Erin is furry then Erin is nice.\nFOL: (White(erin) & Furry(erin)) -> Nice(erin)\nTEXT: If something is furry and kind then it is green.\nFOL: all x. (Furry(x) & Kind(x) -> Green(x))\nTEXT: If something is kind and not nice then it is not big.\nFOL: all x. (Kind(x) & -Nice(x) -> -Big(x))\nTEXT: If Harry is kind and Harry is nice then Harry is furry.\nFOL: (Kind(harry) & Nice(harry)) -> Furry(harry)\nTEXT: If Harry is green and Harry is not smart then Harry is furry.\nFOL: (Green(harry) & -Smart(harry)) -> Furry(harry)\nTEXT: Harry is not green.\nFOL: -Green(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is not green.\nFOL: -Green(anne)\nTEXT: Anne is kind.\nFOL: Kind(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Charlie is not white.\nFOL: -White(charlie)\nTEXT: Erin is not green.\nFOL: -Green(erin)\nTEXT: Erin is not nice.\nFOL: -Nice(erin)\nTEXT: Harry is furry.\nFOL: Furry(harry)\nTEXT: Harry is nice.\nFOL: Nice(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: All white things are not smart.\nFOL: all x. (White(x) -> -Smart(x))\nTEXT: If Erin is white and Erin is furry then Erin is nice.\nFOL: (White(erin) & Furry(erin)) -> Nice(erin)\nTEXT: If something is furry and kind then it is green.\nFOL: all x. (Furry(x) & Kind(x) -> Green(x))\nTEXT: If something is kind and not nice then it is not big.\nFOL: all x. (Kind(x) & -Nice(x) -> -Big(x))\nTEXT: If Harry is kind and Harry is nice then Harry is furry.\nFOL: (Kind(harry) & Nice(harry)) -> Furry(harry)\nTEXT: If Harry is green and Harry is not smart then Harry is furry.\nFOL: (Green(harry) & -Smart(harry)) -> Furry(harry)\nTEXT: Harry is not green.\nFOL: -Green(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is not green.\nFOL: -Green(anne)\nTEXT: Anne is kind.\nFOL: Kind(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Charlie is not white.\nFOL: -White(charlie)\nTEXT: Erin is not green.\nFOL: -Green(erin)\nTEXT: Erin is not nice.\nFOL: -Nice(erin)\nTEXT: Harry is furry.\nFOL: Furry(harry)\nTEXT: Harry is nice.\nFOL: Nice(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: All white things are not smart.\nFOL: all x. (White(x) -> -Smart(x))\nTEXT: If Erin is white and Erin is furry then Erin is nice.\nFOL: (White(erin) & Furry(erin)) -> Nice(erin)\nTEXT: If something is furry and kind then it is green.\nFOL: all x. ((Furry(x) & Kind(x)) -> Green(x))\nTEXT: If something is kind and not nice then it is not big.\nFOL: all x. ((Kind(x) & -Nice(x)) -> -Big(x))\nTEXT: If Harry is kind and Harry is nice then Harry is furry.\nFOL: (Kind(harry) & Nice(harry)) -> Furry(harry)\nTEXT: If Harry is green and Harry is not smart then Harry is furry.\nFOL: (Green(harry) & -Smart(harry)) -> Furry(harry)\nTEXT: Harry is not green.\nFOL: -Green(harry)\n</EVALUATE>"
  ]
 },
 {
  "index": 17,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: If Anne is kind and Anne is smart then Anne is nice.\nFOL: (Kind(anne) & Smart(anne)) -> Nice(anne)\nTEXT: If something is nice then it is red.\nFOL: all x. (Nice(x) -> Red(x))\nTEXT: All cold things are smart.\nFOL: all x. (Cold(x) -> Smart(x))\nTEXT: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\nTEXT: If something is smart then it is nice.\nFOL: all x. (Smart(x) -> Nice(x))\nTEXT: All rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\nTEXT: Anne is not smart.\nFOL: -Smart(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: If Anne is kind and Anne is smart then Anne is nice.\nFOL: (Kind(anne) & Smart(anne) -> Nice(anne))\nTEXT: If something is nice then it is red.\nFOL: all x. (Nice(x) -> Red(x))\nTEXT: All cold things are smart.\nFOL: all x. (Cold(x) -> Smart(x))\nTEXT: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\nTEXT: If something is smart then it is nice.\nFOL: all x. (Smart(x) -> Nice(x))\nTEXT: All rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\nTEXT: Anne is not smart.\nFOL: -Smart(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: If Anne is kind and Anne is smart then Anne is nice.\nFOL: (Kind(anne) & Smart(anne)) -> Nice(anne)\nTEXT: If something is nice then it is red.\nFOL: Nice(x) -> Red(x)\nTEXT: All cold things are smart.\nFOL: all x. (Cold(x) -> Smart(x))\nTEXT: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\nTEXT: If something is smart then it is nice.\nFOL: Smart(x) -> Nice(x)\nTEXT: All rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\nTEXT: Anne is not smart.\nFOL: -Smart(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: If Anne is kind and Anne is smart then Anne is nice.\nFOL: (Kind(anne) & Smart(anne)) -> Nice(anne)\nTEXT: If something is nice then it is red.\nFOL: all x. (Nice(x) -> Red(x))\nTEXT: All cold things are smart.\nFOL: all x. (Cold(x) -> Smart(x))\nTEXT: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\nTEXT: If something is smart then it is nice.\nFOL: all x. (Smart(x) -> Nice(x))\nTEXT: All rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\nTEXT: Anne is not smart.\nFOL: -Smart(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: If Anne is kind and Anne is smart then Anne is nice.\nFOL: Kind(anne) & Smart(anne) -> Nice(anne)\nTEXT: If something is nice then it is red.\nFOL: Nice(x) -> Red(x)\nTEXT: All cold things are smart.\nFOL: all x. (Cold(x) -> Smart(x))\nTEXT: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\nTEXT: If something is smart then it is nice.\nFOL: Smart(x) -> Nice(x)\nTEXT: All rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\nTEXT: Anne is not smart.\nFOL: -Smart(anne)\n</EVALUATE>"
  ]
 },
 {
  "index": 18,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle is round.\nFOL: Round(baldEagle)\nTEXT: The bald eagle sees the rabbit.\nFOL: Sees(baldEagle, rabbit)\nTEXT: The bald eagle visits the cat.\nFOL: Visits(baldEagle, cat)\nTEXT: The bald eagle visits the rabbit.\nFOL: Visits(baldEagle, rabbit)\nTEXT: The cat is cold.\nFOL: Cold(cat)\nTEXT: The cat sees the bald eagle.\nFOL: Sees(cat, baldEagle)\nTEXT: The cat sees the rabbit.\nFOL: Sees(cat, rabbit)\nTEXT: The cat does not visit the bald eagle.\nFOL: -Visits(cat, baldEagle)\nTEXT: The mouse likes the bald eagle.\nFOL: Likes(mouse, baldEagle)\nTEXT: The mouse does not like the cat.\nFOL: -Likes(mouse, cat)\nTEXT: The mouse does not see the cat.\nFOL: -Sees(mouse, cat)\nTEXT: The mouse visits the cat.\nFOL: Visits(mouse, cat)\nTEXT: The mouse visits the rabbit.\nFOL: Visits(mouse, rabbit)\nTEXT: The rabbit likes the mouse.\nFOL: Likes(rabbit, mouse)\nTEXT: The rabbit sees the cat.\nFOL: Sees(rabbit, cat)\nTEXT: If something is cold then it sees the rabbit.\nFOL: all x. (Cold(x) -> Sees(x, rabbit))\nTEXT: If something visits the mouse then it does not like the rabbit.\nFOL: all x. (Visits(x, mouse) -> -Likes(x, rabbit))\nTEXT: If something visits the rabbit then the rabbit visits the cat.\nFOL: all x. (Visits(x, rabbit) -> Visits(rabbit, cat))\nTEXT: If something sees the cat and the cat is young then the cat is round.\nFOL: all x. (Sees(x, cat) & Young(cat) -> Round(cat))\nTEXT: If the rabbit visits the cat then the rabbit is round.\nFOL: Visits(rabbit, cat) -> Round(rabbit)\nTEXT: All round things are kind.\nFOL: all x. (Round(x) -> Kind(x))\nTEXT: The rabbit does not like the rabbit.\nFOL: -Likes(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle is round.\nFOL: Round(baldEagle)\nTEXT: The bald eagle sees the rabbit.\nFOL: Sees(baldEagle, rabbit)\nTEXT: The bald eagle visits the cat.\nFOL: Visits(baldEagle, cat)\nTEXT: The bald eagle visits the rabbit.\nFOL: Visits(baldEagle, rabbit)\nTEXT: The cat is cold.\nFOL: Cold(cat)\nTEXT: The cat sees the bald eagle.\nFOL: Sees(cat, baldEagle)\nTEXT: The cat sees the rabbit.\nFOL: Sees(cat, rabbit)\nTEXT: The cat does not visit the bald eagle.\nFOL: -Visits(cat, baldEagle)\nTEXT: The mouse likes the bald eagle.\nFOL: Likes(mouse, baldEagle)\nTEXT: The mouse does not like the cat.\nFOL: -Likes(mouse, cat)\nTEXT: The mouse does not see the cat.\nFOL: -Sees(mouse, cat)\nTEXT: The mouse visits the cat.\nFOL: Visits(mouse, cat)\nTEXT: The mouse visits the rabbit.\nFOL: Visits(mouse, rabbit)\nTEXT: The rabbit likes the mouse.\nFOL: Likes(rabbit, mouse)\nTEXT: The rabbit sees the cat.\nFOL: Sees(rabbit, cat)\nTEXT: If something is cold then it sees the rabbit.\nFOL: all x. (Cold(x) -> Sees(x, rabbit))\nTEXT: If something visits the mouse then it does not like the rabbit.\nFOL: all x. (Visits(x, mouse) -> -Likes(x, rabbit))\nTEXT: If something visits the rabbit then the rabbit visits the cat.\nFOL: all x. (Visits(x, rabbit) -> Visits(rabbit, cat))\nTEXT: If something sees the cat and the cat is young then the cat is round.\nFOL: all x. ((Sees(x, cat) & Young(cat)) -> Round(cat))\nTEXT: If the rabbit visits the cat then the rabbit is round.\nFOL: Visits(rabbit, cat) -> Round(rabbit)\nTEXT: All round things are kind.\nFOL: all x. (Round(x) -> Kind(x))\nTEXT: The rabbit does not like the rabbit.\nFOL: -Likes(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle is round.\nFOL: Round(baldEagle)\nTEXT: The bald eagle sees the rabbit.\nFOL: Sees(baldEagle, rabbit)\nTEXT: The bald eagle visits the cat.\nFOL: Visits(baldEagle, cat)\nTEXT: The bald eagle visits the rabbit.\nFOL: Visits(baldEagle, rabbit)\nTEXT: The cat is cold.\nFOL: Cold(cat)\nTEXT: The cat sees the bald eagle.\nFOL: Sees(cat, baldEagle)\nTEXT: The cat sees the rabbit.\nFOL: Sees(cat, rabbit)\nTEXT: The cat does not visit the bald eagle.\nFOL: -Visits(cat, baldEagle)\nTEXT: The mouse likes the bald eagle.\nFOL: Likes(mouse, baldEagle)\nTEXT: The mouse does not like the cat.\nFOL: -Likes(mouse, cat)\nTEXT: The mouse does not see the cat.\nFOL: -Sees(mouse, cat)\nTEXT: The mouse visits the cat.\nFOL: Visits(mouse, cat)\nTEXT: The mouse visits the rabbit.\nFOL: Visits(mouse, rabbit)\nTEXT: The rabbit likes the mouse.\nFOL: Likes(rabbit, mouse)\nTEXT: The rabbit sees the cat.\nFOL: Sees(rabbit, cat)\nTEXT: If something is cold then it sees the rabbit.\nFOL: all x. (Cold(x) -> Sees(x, rabbit))\nTEXT: If something visits the mouse then it does not like the rabbit.\nFOL: all x. (Visits(x, mouse) -> -Likes(x, rabbit))\nTEXT: If something visits the rabbit then the rabbit visits the cat.\nFOL: all x. (Visits(x, rabbit) -> Visits(rabbit, cat))\nTEXT: If something sees the cat and the cat is young then the cat is round.\nFOL: all x. ((Sees(x, cat) & Young(cat)) -> Round(cat))\nTEXT: If the rabbit visits the cat then the rabbit is round.\nFOL: all x. (Visits(rabbit, cat) -> Round(rabbit))\nTEXT: All round things are kind.\nFOL: all x. (Round(x) -> Kind(x))\nTEXT: The rabbit does not like the rabbit.\nFOL: -Likes(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle is round.\nFOL: Round(baldEagle)\nTEXT: The bald eagle sees the rabbit.\nFOL: Sees(baldEagle, rabbit)\nTEXT: The bald eagle visits the cat.\nFOL: Visits(baldEagle, cat)\nTEXT: The bald eagle visits the rabbit.\nFOL: Visits(baldEagle, rabbit)\nTEXT: The cat is cold.\nFOL: Cold(cat)\nTEXT: The cat sees the bald eagle.\nFOL: Sees(cat, baldEagle)\nTEXT: The cat sees the rabbit.\nFOL: Sees(cat, rabbit)\nTEXT: The cat does not visit the bald eagle.\nFOL: -Visits(cat, baldEagle)\nTEXT: The mouse likes the bald eagle.\nFOL: Likes(mouse, baldEagle)\nTEXT: The mouse does not like the cat.\nFOL: -Likes(mouse, cat)\nTEXT: The mouse does not see the cat.\nFOL: -Sees(mouse, cat)\nTEXT: The mouse visits the cat.\nFOL: Visits(mouse, cat)\nTEXT: The mouse visits the rabbit.\nFOL: Visits(mouse, rabbit)\nTEXT: The rabbit likes the mouse.\nFOL: Likes(rabbit, mouse)\nTEXT: The rabbit sees the cat.\nFOL: Sees(rabbit, cat)\nTEXT: If something is cold then it sees the rabbit.\nFOL: all x. (Cold(x) -> Sees(x, rabbit))\nTEXT: If something visits the mouse then it does not like the rabbit.\nFOL: all x. (Visits(x, mouse) -> -Likes(x, rabbit))\nTEXT: If something visits the rabbit then the rabbit visits the cat.\nFOL: all x. (Visits(x, rabbit) -> Visits(rabbit, cat))\nTEXT: If something sees the cat and the cat is young then the cat is round.\nFOL: all x. (Sees(x, cat) & Young(cat) -> Round(cat))\nTEXT: If the rabbit visits the cat then the rabbit is round.\nFOL: all x. (Visits(rabbit, cat) -> Round(rabbit))\nTEXT: All round things are kind.\nFOL: all x. (Round(x) -> Kind(x))\nTEXT: The rabbit does not like the rabbit.\nFOL: -Likes(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle is round.\nFOL: Round(baldEagle)\nTEXT: The bald eagle sees the rabbit.\nFOL: Sees(baldEagle, rabbit)\nTEXT: The bald eagle visits the cat.\nFOL: Visits(baldEagle, cat)\nTEXT: The bald eagle visits the rabbit.\nFOL: Visits(baldEagle, rabbit)\nTEXT: The cat is cold.\nFOL: Cold(cat)\nTEXT: The cat sees the bald eagle.\nFOL: Sees(cat, baldEagle)\nTEXT: The cat sees the rabbit.\nFOL: Sees(cat, rabbit)\nTEXT: The cat does not visit the bald eagle.\nFOL: -Visits(cat, baldEagle)\nTEXT: The mouse likes the bald eagle.\nFOL: Likes(mouse, baldEagle)\nTEXT: The mouse does not like the cat.\nFOL: -Likes(mouse, cat)\nTEXT: The mouse does not see the cat.\nFOL: -Sees(mouse, cat)\nTEXT: The mouse visits the cat.\nFOL: Visits(mouse, cat)\nTEXT: The mouse visits the rabbit.\nFOL: Visits(mouse, rabbit)\nTEXT: The rabbit likes the mouse.\nFOL: Likes(rabbit, mouse)\nTEXT: The rabbit sees the cat.\nFOL: Sees(rabbit, cat)\nTEXT: If something is cold then it sees the rabbit.\nFOL: all x. (Cold(x) -> Sees(x, rabbit))\nTEXT: If something visits the mouse then it does not like the rabbit.\nFOL: all x. (Visits(x, mouse) -> -Likes(x, rabbit))\nTEXT: If something visits the rabbit then the rabbit visits the cat.\nFOL: all x. (Visits(x, rabbit) -> Visits(rabbit, cat))\nTEXT: If something sees the cat and the cat is young then the cat is round.\nFOL: all x. ((Sees(x, cat) & Young(cat)) -> Round(cat))\nTEXT: If the rabbit visits the cat then the rabbit is round.\nFOL: (Visits(rabbit, cat) -> Round(rabbit))\nTEXT: All round things are kind.\nFOL: all x. (Round(x) -> Kind(x))\nTEXT: The rabbit does not like the rabbit.\nFOL: -Likes(rabbit, rabbit)\n</EVALUATE>"
  ]
 },
 {
  "index": 19,
  "responses": [
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: Chases(cat, cow)\nTEXT: The cat chases the rabbit.\nFOL: Chases(cat, rabbit)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat needs the cow.\nFOL: Needs(cat, cow)\nTEXT: The cat visits the rabbit.\nFOL: Visits(cat, rabbit)\nTEXT: The cow is nice.\nFOL: Nice(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow needs the cat.\nFOL: Needs(cow, cat)\nTEXT: The cow visits the cat.\nFOL: Visits(cow, cat)\nTEXT: The mouse chases the cow.\nFOL: Chases(mouse, cow)\nTEXT: The mouse chases the rabbit.\nFOL: Chases(mouse, rabbit)\nTEXT: The mouse is kind.\nFOL: Kind(mouse)\nTEXT: The mouse needs the rabbit.\nFOL: Needs(mouse, rabbit)\nTEXT: The rabbit chases the cow.\nFOL: Chases(rabbit, cow)\nTEXT: The rabbit needs the cow.\nFOL: Needs(rabbit, cow)\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: (Visits(x, cow) & Nice(x)) -> Chases(cow, mouse)\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: (Nice(x) & Chases(x, cow)) -> Needs(x, cow)\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: (Red(rabbit) & Visits(rabbit, mouse)) -> Kind(rabbit)\nTEXT: If something chases the cow then it visits the mouse.\nFOL: Chases(x, cow) -> Visits(x, mouse)\nTEXT: If something chases the cow then it visits the cat.\nFOL: Chases(x, cow) -> Visits(x, cat)\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: (Needs(mouse, rabbit) & Visits(rabbit, mouse)) -> Red(rabbit)\nTEXT: The cow does not visit the cat.\nFOL: -Visits(cow, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: Chases(cat, cow)\nTEXT: The cat chases the rabbit.\nFOL: Chases(cat, rabbit)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat needs the cow.\nFOL: Needs(cat, cow)\nTEXT: The cat visits the rabbit.\nFOL: Visits(cat, rabbit)\nTEXT: The cow is nice.\nFOL: Nice(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow needs the cat.\nFOL: Needs(cow, cat)\nTEXT: The cow visits the cat.\nFOL: Visits(cow, cat)\nTEXT: The mouse chases the cow.\nFOL: Chases(mouse, cow)\nTEXT: The mouse chases the rabbit.\nFOL: Chases(mouse, rabbit)\nTEXT: The mouse is kind.\nFOL: Kind(mouse)\nTEXT: The mouse needs the rabbit.\nFOL: Needs(mouse, rabbit)\nTEXT: The rabbit chases the cow.\nFOL: Chases(rabbit, cow)\nTEXT: The rabbit needs the cow.\nFOL: Needs(rabbit, cow)\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: all x. (Visits(x, cow) & Nice(x) -> Chases(cow, mouse))\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: all x. (Nice(x) & Chases(x, cow) -> Needs(x, cow))\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: (Red(rabbit) & Visits(rabbit, mouse)) -> Kind(rabbit)\nTEXT: If something chases the cow then it visits the mouse.\nFOL: all x. (Chases(x, cow) -> Visits(x, mouse))\nTEXT: If something chases the cow then it visits the cat.\nFOL: all x. (Chases(x, cow) -> Visits(x, cat))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: (Needs(mouse, rabbit) & Visits(rabbit, mouse)) -> Red(rabbit)\nTEXT: The cow does not visit the cat.\nFOL: -Visits(cow, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: Chases(cat, cow)\nTEXT: The cat chases the rabbit.\nFOL: Chases(cat, rabbit)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat needs the cow.\nFOL: Needs(cat, cow)\nTEXT: The cat visits the rabbit.\nFOL: Visits(cat, rabbit)\nTEXT: The cow is nice.\nFOL: Nice(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow needs the cat.\nFOL: Needs(cow, cat)\nTEXT: The cow visits the cat.\nFOL: Visits(cow, cat)\nTEXT: The mouse chases the cow.\nFOL: Chases(mouse, cow)\nTEXT: The mouse chases the rabbit.\nFOL: Chases(mouse, rabbit)\nTEXT: The mouse is kind.\nFOL: Kind(mouse)\nTEXT: The mouse needs the rabbit.\nFOL: Needs(mouse, rabbit)\nTEXT: The rabbit chases the cow.\nFOL: Chases(rabbit, cow)\nTEXT: The rabbit needs the cow.\nFOL: Needs(rabbit, cow)\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: (Visits(x, cow) & Nice(x) -> Chases(cow, mouse))\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: (Nice(x) & Chases(x, cow) -> Needs(x, cow))\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: (Red(rabbit) & Visits(rabbit, mouse) -> Kind(rabbit))\nTEXT: If something chases the cow then it visits the mouse.\nFOL: (Chases(x, cow) -> Visits(x, mouse))\nTEXT: If something chases the cow then it visits the cat.\nFOL: (Chases(x, cow) -> Visits(x, cat))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: (Needs(mouse, rabbit) & Visits(rabbit, mouse) -> Red(rabbit))\nTEXT: The cow does not visit the cat.\nFOL: -Visits(cow, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: Chase(cat, cow)\nTEXT: The cat chases the rabbit.\nFOL: Chase(cat, rabbit)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat needs the cow.\nFOL: Need(cat, cow)\nTEXT: The cat visits the rabbit.\nFOL: Visit(cat, rabbit)\nTEXT: The cow is nice.\nFOL: Nice(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow needs the cat.\nFOL: Need(cow, cat)\nTEXT: The cow visits the cat.\nFOL: Visit(cow, cat)\nTEXT: The mouse chases the cow.\nFOL: Chase(mouse, cow)\nTEXT: The mouse chases the rabbit.\nFOL: Chase(mouse, rabbit)\nTEXT: The mouse is kind.\nFOL: Kind(mouse)\nTEXT: The mouse needs the rabbit.\nFOL: Need(mouse, rabbit)\nTEXT: The rabbit chases the cow.\nFOL: Chase(rabbit, cow)\nTEXT: The rabbit needs the cow.\nFOL: Need(rabbit, cow)\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: (Visit(x, cow) & Nice(x)) -> Chase(cow, mouse)\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: (Nice(x) & Chase(x, cow)) -> Need(x, cow)\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: (Red(rabbit) & Visit(rabbit, mouse)) -> Kind(rabbit)\nTEXT: If something chases the cow then it visits the mouse.\nFOL: Chase(x, cow) -> Visit(x, mouse)\nTEXT: If something chases the cow then it visits the cat.\nFOL: Chase(x, cow) -> Visit(x, cat)\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: (Need(mouse, rabbit) & Visit(rabbit, mouse)) -> Red(rabbit)\nTEXT: The cow does not visit the cat.\nFOL: -Visit(cow, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: Chases(cat, cow)\nTEXT: The cat chases the rabbit.\nFOL: Chases(cat, rabbit)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat needs the cow.\nFOL: Needs(cat, cow)\nTEXT: The cat visits the rabbit.\nFOL: Visits(cat, rabbit)\nTEXT: The cow is nice.\nFOL: Nice(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow needs the cat.\nFOL: Needs(cow, cat)\nTEXT: The cow visits the cat.\nFOL: Visits(cow, cat)\nTEXT: The mouse chases the cow.\nFOL: Chases(mouse, cow)\nTEXT: The mouse chases the rabbit.\nFOL: Chases(mouse, rabbit)\nTEXT: The mouse is kind.\nFOL: Kind(mouse)\nTEXT: The mouse needs the rabbit.\nFOL: Needs(mouse, rabbit)\nTEXT: The rabbit chases the cow.\nFOL: Chases(rabbit, cow)\nTEXT: The rabbit needs the cow.\nFOL: Needs(rabbit, cow)\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: (Visits(x, cow) & Nice(x)) -> Chases(cow, mouse)\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: (Nice(x) & Chases(x, cow)) -> Needs(x, cow)\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: (Red(rabbit) & Visits(rabbit, mouse)) -> Kind(rabbit)\nTEXT: If something chases the cow then it visits the mouse.\nFOL: (Chases(x, cow) -> Visits(x, mouse))\nTEXT: If something chases the cow then it visits the cat.\nFOL: (Chases(x, cow) -> Visits(x, cat))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: (Needs(mouse, rabbit) & Visits(rabbit, mouse)) -> Red(rabbit)\nTEXT: The cow does not visit the cat.\nFOL: -Visits(cow, cat)\n</EVALUATE>"
  ]
 },
 {
  "index": 20,
  "responses": [
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: Round(bear)\nTEXT: The bear sees the cat.\nFOL: Sees(bear, cat)\nTEXT: The cat is blue.\nFOL: Blue(cat)\nTEXT: The cat is round.\nFOL: Round(cat)\nTEXT: The cat likes the bear.\nFOL: Likes(cat, bear)\nTEXT: The squirrel eats the bear.\nFOL: Eats(squirrel, bear)\nTEXT: The squirrel sees the cat.\nFOL: Sees(squirrel, cat)\nTEXT: If someone sees the bear and they like the bear then the bear likes the cat.\nFOL: (Sees(x, bear) & Likes(x, bear) -> Likes(bear, cat))\nTEXT: If someone likes the cat and the cat likes the bear then they see the bear.\nFOL: (Likes(x, cat) & Likes(cat, bear) -> Sees(x, bear))\nTEXT: If someone eats the squirrel then they eat the bear.\nFOL: (Eats(x, squirrel) -> Eats(x, bear))\nTEXT: If someone eats the squirrel then the squirrel likes the cat.\nFOL: (Eats(x, squirrel) -> Likes(squirrel, cat))\nTEXT: If someone likes the squirrel and the squirrel is round then they are red.\nFOL: (Likes(x, squirrel) & Round(squirrel) -> Red(x))\nTEXT: If someone is red and they like the cat then they are blue.\nFOL: (Red(x) & Likes(x, cat) -> Blue(x))\nTEXT: If someone sees the squirrel then they eat the cat.\nFOL: (Sees(x, squirrel) -> Eats(x, cat))\nTEXT: If someone likes the bear then they eat the squirrel.\nFOL: (Likes(x, bear) -> Eats(x, squirrel))\nTEXT: The cat sees the cat.\nFOL: Sees(cat, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: Round(bear)\nTEXT: The bear sees the cat.\nFOL: Sees(bear, cat)\nTEXT: The cat is blue.\nFOL: Blue(cat)\nTEXT: The cat is round.\nFOL: Round(cat)\nTEXT: The cat likes the bear.\nFOL: Likes(cat, bear)\nTEXT: The squirrel eats the bear.\nFOL: Eats(squirrel, bear)\nTEXT: The squirrel sees the cat.\nFOL: Sees(squirrel, cat)\nTEXT: If someone sees the bear and they like the bear then the bear likes the cat.\nFOL: all x. (Sees(x, bear) & Likes(x, bear) -> Likes(bear, cat))\nTEXT: If someone likes the cat and the cat likes the bear then they see the bear.\nFOL: all x. (Likes(x, cat) & Likes(cat, bear) -> Sees(x, bear))\nTEXT: If someone eats the squirrel then they eat the bear.\nFOL: all x. (Eats(x, squirrel) -> Eats(x, bear))\nTEXT: If someone eats the squirrel then the squirrel likes the cat.\nFOL: all x. (Eats(x, squirrel) -> Likes(squirrel, cat))\nTEXT: If someone likes the squirrel and the squirrel is round then they are red.\nFOL: all x. (Likes(x, squirrel) & Round(squirrel) -> Red(x))\nTEXT: If someone is red and they like the cat then they are blue.\nFOL: all x. (Red(x) & Likes(x, cat) -> Blue(x))\nTEXT: If someone sees the squirrel then they eat the cat.\nFOL: all x. (Sees(x, squirrel) -> Eats(x, cat))\nTEXT: If someone likes the bear then they eat the squirrel.\nFOL: all x. (Likes(x, bear) -> Eats(x, squirrel))\nTEXT: The cat sees the cat.\nFOL: Sees(cat, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: Round(bear)\nTEXT: The bear sees the cat.\nFOL: Sees(bear, cat)\nTEXT: The cat is blue.\nFOL: Blue(cat)\nTEXT: The cat is round.\nFOL: Round(cat)\nTEXT: The cat likes the bear.\nFOL: Likes(cat, bear)\nTEXT: The squirrel eats the bear.\nFOL: Eats(squirrel, bear)\nTEXT: The squirrel sees the cat.\nFOL: Sees(squirrel, cat)\nTEXT: If someone sees the bear and they like the bear then the bear likes the cat.\nFOL: (Sees(x, bear) & Likes(x, bear)) -> Likes(bear, cat)\nTEXT: If someone likes the cat and the cat likes the bear then they see the bear.\nFOL: (Likes(x, cat) & Likes(cat, bear)) -> Sees(x, bear)\nTEXT: If someone eats the squirrel then they eat the bear.\nFOL: Eats(x, squirrel) -> Eats(x, bear)\nTEXT: If someone eats the squirrel then the squirrel likes the cat.\nFOL: Eats(x, squirrel) -> Likes(squirrel, cat)\nTEXT: If someone likes the squirrel and the squirrel is round then they are red.\nFOL: (Likes(x, squirrel) & Round(squirrel)) -> Red(x)\nTEXT: If someone is red and they like the cat then they are blue.\nFOL: (Red(x) & Likes(x, cat)) -> Blue(x)\nTEXT: If someone sees the squirrel then they eat the cat.\nFOL: Sees(x, squirrel) -> Eats(x, cat)\nTEXT: If someone likes the bear then they eat the squirrel.\nFOL: Likes(x, bear) -> Eats(x, squirrel)\nTEXT: The cat sees the cat.\nFOL: Sees(cat, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: Round(bear)\nTEXT: The bear sees the cat.\nFOL: Sees(bear, cat)\nTEXT: The cat is blue.\nFOL: Blue(cat)\nTEXT: The cat is round.\nFOL: Round(cat)\nTEXT: The cat likes the bear.\nFOL: Likes(cat, bear)\nTEXT: The squirrel eats the bear.\nFOL: Eats(squirrel, bear)\nTEXT: The squirrel sees the cat.\nFOL: Sees(squirrel, cat)\nTEXT: If someone sees the bear and they like the bear then the bear likes the cat.\nFOL: all x. (Sees(x, bear) & Likes(x, bear) -> Likes(bear, cat))\nTEXT: If someone likes the cat and the cat likes the bear then they see the bear.\nFOL: all x. (Likes(x, cat) & Likes(cat, bear) -> Sees(x, bear))\nTEXT: If someone eats the squirrel then they eat the bear.\nFOL: all x. (Eats(x, squirrel) -> Eats(x, bear))\nTEXT: If someone eats the squirrel then the squirrel likes the cat.\nFOL: all x. (Eats(x, squirrel) -> Likes(squirrel, cat))\nTEXT: If someone likes the squirrel and the squirrel is round then they are red.\nFOL: all x. ((Likes(x, squirrel) & Round(squirrel)) -> Red(x))\nTEXT: If someone is red and they like the cat then they are blue.\nFOL: all x. (Red(x) & Likes(x, cat) -> Blue(x))\nTEXT: If someone sees the squirrel then they eat the cat.\nFOL: all x. (Sees(x, squirrel) -> Eats(x, cat))\nTEXT: If someone likes the bear then they eat the squirrel.\nFOL: all x. (Likes(x, bear) -> Eats(x, squirrel))\nTEXT: The cat sees the cat.\nFOL: Sees(cat, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: Round(bear)\nTEXT: The bear sees the cat.\nFOL: Sees(bear, cat)\nTEXT: The cat is blue.\nFOL: Blue(cat)\nTEXT: The cat is round.\nFOL: Round(cat)\nTEXT: The cat likes the bear.\nFOL: Likes(cat, bear)\nTEXT: The squirrel eats the bear.\nFOL: Eats(squirrel, bear)\nTEXT: The squirrel sees the cat.\nFOL: Sees(squirrel, cat)\nTEXT: If someone sees the bear and they like the bear then the bear likes the cat.\nFOL: all x. (Sees(x, bear) & Likes(x, bear) -> Likes(bear, cat))\nTEXT: If someone likes the cat and the cat likes the bear then they see the bear.\nFOL: all x. ((Likes(x, cat) & Likes(cat, bear)) -> Sees(x, bear))\nTEXT: If someone eats the squirrel then they eat the bear.\nFOL: all x. (Eats(x, squirrel) -> Eats(x, bear))\nTEXT: If someone eats the squirrel then the squirrel likes the cat.\nFOL: all x. (Eats(x, squirrel) -> Likes(squirrel, cat))\nTEXT: If someone likes the squirrel and the squirrel is round then they are red.\nFOL: all x. ((Likes(x, squirrel) & Round(squirrel)) -> Red(x))\nTEXT: If someone is red and they like the cat then they are blue.\nFOL: all x. ((Red(x) & Likes(x, cat)) -> Blue(x))\nTEXT: If someone sees the squirrel then they eat the cat.\nFOL: all x. (Sees(x, squirrel) -> Eats(x, cat))\nTEXT: If someone likes the bear then they eat the squirrel.\nFOL: all x. (Likes(x, bear) -> Eats(x, squirrel))\nTEXT: The cat sees the cat.\nFOL: Sees(cat, cat)\n</EVALUATE>"
  ]
 },
 {
  "index": 21,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is not smart.\nFOL: -Smart(anne)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Fiona is big.\nFOL: Big(fiona)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Harry is kind.\nFOL: Kind(harry)\nTEXT: Harry is rough.\nFOL: Rough(harry)\nTEXT: Rough, smart things are white.\nFOL: all x. (Rough(x) & Smart(x) -> White(x))\nTEXT: All round things are smart.\nFOL: all x. (Round(x) -> Smart(x))\nTEXT: All white things are big.\nFOL: all x. (White(x) -> Big(x))\nTEXT: If Anne is rough then Anne is kind.\nFOL: Rough(anne) -> Kind(anne)\nTEXT: If Dave is round then Dave is kind.\nFOL: Round(dave) -> Kind(dave)\nTEXT: All smart things are rough.\nFOL: all x. (Smart(x) -> Rough(x))\nTEXT: Dave is not big.\nFOL: -Big(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is not smart.\nFOL: -Smart(anne)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Fiona is big.\nFOL: Big(fiona)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Harry is kind.\nFOL: Kind(harry)\nTEXT: Harry is rough.\nFOL: Rough(harry)\nTEXT: Rough, smart things are white.\nFOL: all x. (Rough(x) & Smart(x) -> White(x))\nTEXT: All round things are smart.\nFOL: all x. (Round(x) -> Smart(x))\nTEXT: All white things are big.\nFOL: all x. (White(x) -> Big(x))\nTEXT: If Anne is rough then Anne is kind.\nFOL: (Rough(anne) -> Kind(anne))\nTEXT: If Dave is round then Dave is kind.\nFOL: (Round(dave) -> Kind(dave))\nTEXT: All smart things are rough.\nFOL: all x. (Smart(x) -> Rough(x))\nTEXT: Dave is not big.\nFOL: -Big(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is not smart.\nFOL: -Smart(anne)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Fiona is big.\nFOL: Big(fiona)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Harry is kind.\nFOL: Kind(harry)\nTEXT: Harry is rough.\nFOL: Rough(harry)\nTEXT: Rough, smart things are white.\nFOL: all x. (Rough(x) & Smart(x) -> White(x))\nTEXT: All round things are smart.\nFOL: all x. (Round(x) -> Smart(x))\nTEXT: All white things are big.\nFOL: all x. (White(x) -> Big(x))\nTEXT: If Anne is rough then Anne is kind.\nFOL: Rough(anne) -> Kind(anne)\nTEXT: If Dave is round then Dave is kind.\nFOL: Round(dave) -> Kind(dave)\nTEXT: All smart things are rough.\nFOL: all x. (Smart(x) -> Rough(x))\nTEXT: Dave is not big.\nFOL: -Big(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is not smart.\nFOL: -Smart(anne)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Fiona is big.\nFOL: Big(fiona)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Harry is kind.\nFOL: Kind(harry)\nTEXT: Harry is rough.\nFOL: Rough(harry)\nTEXT: Rough, smart things are white.\nFOL: all x. (Rough(x) & Smart(x) -> White(x))\nTEXT: All round things are smart.\nFOL: all x. (Round(x) -> Smart(x))\nTEXT: All white things are big.\nFOL: all x. (White(x) -> Big(x))\nTEXT: If Anne is rough then Anne is kind.\nFOL: Rough(anne) -> Kind(anne)\nTEXT: If Dave is round then Dave is kind.\nFOL: Rough(dave) -> Kind(dave)\nTEXT: All smart things are rough.\nFOL: all x. (Smart(x) -> Rough(x))\nTEXT: Dave is not big.\nFOL: -Big(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is not smart.\nFOL: -Smart(anne)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Fiona is big.\nFOL: Big(fiona)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Harry is kind.\nFOL: Kind(harry)\nTEXT: Harry is rough.\nFOL: Rough(harry)\nTEXT: Rough, smart things are white.\nFOL: all x. (Rough(x) & Smart(x) -> White(x))\nTEXT: All round things are smart.\nFOL: all x. (Round(x) -> Smart(x))\nTEXT: All white things are big.\nFOL: all x. (White(x) -> Big(x))\nTEXT: If Anne is rough then Anne is kind.\nFOL: -Rough(anne) | Kind(anne)\nTEXT: If Dave is round then Dave is kind.\nFOL: -Round(dave) | Kind(dave)\nTEXT: All smart things are rough.\nFOL: all x. (Smart(x) -> Rough(x))\nTEXT: Dave is not big.\nFOL: -Big(dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 22,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: Green(anne)\nTEXT: Anne is kind.\nFOL: Kind(anne)\nTEXT: Anne is round.\nFOL: Round(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Anne is white.\nFOL: White(anne)\nTEXT: Charlie is big.\nFOL: Big(charlie)\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\nTEXT: Charlie is red.\nFOL: Red(charlie)\nTEXT: Charlie is smart.\nFOL: Smart(charlie)\nTEXT: Fiona is big.\nFOL: Big(fiona)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Fiona is red.\nFOL: Red(fiona)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is red.\nFOL: Red(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: Kind, red people are round.\nFOL: all x. (Kind(x) & Red(x) -> Round(x))\nTEXT: If Anne is big and Anne is kind then Anne is green.\nFOL: (Big(anne) & Kind(anne) -> Green(anne))\nTEXT: All kind, big people are white.\nFOL: all x. (Kind(x) & Big(x) -> White(x))\nTEXT: Round people are green.\nFOL: all x. (Round(x) -> Green(x))\nTEXT: If Charlie is big then Charlie is green.\nFOL: (Big(charlie) -> Green(charlie))\nTEXT: If someone is white then they are kind.\nFOL: all x. (White(x) -> Kind(x))\nTEXT: Anne is red.\nFOL: Red(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: Green(anne)\nTEXT: Anne is kind.\nFOL: Kind(anne)\nTEXT: Anne is round.\nFOL: Round(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Anne is white.\nFOL: White(anne)\nTEXT: Charlie is big.\nFOL: Big(charlie)\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\nTEXT: Charlie is red.\nFOL: Red(charlie)\nTEXT: Charlie is smart.\nFOL: Smart(charlie)\nTEXT: Fiona is big.\nFOL: Big(fiona)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Fiona is red.\nFOL: Red(fiona)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is red.\nFOL: Red(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: Kind, red people are round.\nFOL: all x. (Kind(x) & Red(x) -> Round(x))\nTEXT: If Anne is big and Anne is kind then Anne is green.\nFOL: (Big(anne) & Kind(anne) -> Green(anne))\nTEXT: All kind, big people are white.\nFOL: all x. (Kind(x) & Big(x) -> White(x))\nTEXT: Round people are green.\nFOL: all x. (Round(x) -> Green(x))\nTEXT: If Charlie is big then Charlie is green.\nFOL: Big(charlie) -> Green(charlie)\nTEXT: If someone is white then they are kind.\nFOL: all x. (White(x) -> Kind(x))\nTEXT: Anne is red.\nFOL: Red(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: Green(anne)\nTEXT: Anne is kind.\nFOL: Kind(anne)\nTEXT: Anne is round.\nFOL: Round(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Anne is white.\nFOL: White(anne)\nTEXT: Charlie is big.\nFOL: Big(charlie)\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\nTEXT: Charlie is red.\nFOL: Red(charlie)\nTEXT: Charlie is smart.\nFOL: Smart(charlie)\nTEXT: Fiona is big.\nFOL: Big(fiona)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Fiona is red.\nFOL: Red(fiona)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is red.\nFOL: Red(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: Kind, red people are round.\nFOL: all x. (Kind(x) & Red(x) -> Round(x))\nTEXT: If Anne is big and Anne is kind then Anne is green.\nFOL: (Big(anne) & Kind(anne)) -> Green(anne)\nTEXT: All kind, big people are white.\nFOL: all x. (Kind(x) & Big(x) -> White(x))\nTEXT: Round people are green.\nFOL: all x. (Round(x) -> Green(x))\nTEXT: If Charlie is big then Charlie is green.\nFOL: Big(charlie) -> Green(charlie)\nTEXT: If someone is white then they are kind.\nFOL: all x. (White(x) -> Kind(x))\nTEXT: Anne is red.\nFOL: Red(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: Green(anne)\nTEXT: Anne is kind.\nFOL: Kind(anne)\nTEXT: Anne is round.\nFOL: Round(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Anne is white.\nFOL: White(anne)\nTEXT: Charlie is big.\nFOL: Big(charlie)\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\nTEXT: Charlie is red.\nFOL: Red(charlie)\nTEXT: Charlie is smart.\nFOL: Smart(charlie)\nTEXT: Fiona is big.\nFOL: Big(fiona)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Fiona is red.\nFOL: Red(fiona)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is red.\nFOL: Red(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: Kind, red people are round.\nFOL: all x. (Kind(x) & Red(x) -> Round(x))\nTEXT: If Anne is big and Anne is kind then Anne is green.\nFOL: (Big(anne) & Kind(anne) -> Green(anne))\nTEXT: All kind, big people are white.\nFOL: all x. (Kind(x) & Big(x) -> White(x))\nTEXT: Round people are green.\nFOL: all x. (Round(x) -> Green(x))\nTEXT: If Charlie is big then Charlie is green.\nFOL: (Big(charlie) -> Green(charlie))\nTEXT: If someone is white then they are kind.\nFOL: (White(x) -> Kind(x))\nTEXT: Anne is red.\nFOL: Red(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: Green(anne)\nTEXT: Anne is kind.\nFOL: Kind(anne)\nTEXT: Anne is round.\nFOL: Round(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Anne is white.\nFOL: White(anne)\nTEXT: Charlie is big.\nFOL: Big(charlie)\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\nTEXT: Charlie is red.\nFOL: Red(charlie)\nTEXT: Charlie is smart.\nFOL: Smart(charlie)\nTEXT: Fiona is big.\nFOL: Big(fiona)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Fiona is red.\nFOL: Red(fiona)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is red.\nFOL: Red(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: Kind, red people are round.\nFOL: all x. (Kind(x) & Red(x) -> Round(x))\nTEXT: If Anne is big and Anne is kind then Anne is green.\nFOL: (Big(anne) & Kind(anne)) -> Green(anne)\nTEXT: All kind, big people are white.\nFOL: all x. (Kind(x) & Big(x) -> White(x))\nTEXT: Round people are green.\nFOL: all x. (Round(x) -> Green(x))\nTEXT: If Charlie is big then Charlie is green.\nFOL: Big(charlie) -> Green(charlie)\nTEXT: If someone is white then they are kind.\nFOL: all x. (White(x) -> Kind(x))\nTEXT: Anne is red.\nFOL: Red(anne)\n</EVALUATE>"
  ]
 },
 {
  "index": 23,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Erin is blue.\nFOL: Blue(erin)\nTEXT: Gary is cold.\nFOL: Cold(gary)\nTEXT: If Erin is green then Erin is big.\nFOL: Green(erin) -> Big(erin)\nTEXT: Green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: If Bob is cold then Bob is big.\nFOL: Cold(bob) -> Big(bob)\nTEXT: All blue things are cold.\nFOL: all x. (Blue(x) -> Cold(x))\nTEXT: All green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If something is rough and big then it is green.\nFOL: all x. ((Rough(x) & Big(x)) -> Green(x))\nTEXT: All kind, blue things are cold.\nFOL: all x. ((Kind(x) & Blue(x)) -> Cold(x))\nTEXT: Gary is big.\nFOL: Big(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Erin is blue.\nFOL: Blue(erin)\nTEXT: Gary is cold.\nFOL: Cold(gary)\nTEXT: If Erin is green then Erin is big.\nFOL: (Green(erin) -> Big(erin))\nTEXT: Green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: If Bob is cold then Bob is big.\nFOL: (Cold(bob) -> Big(bob))\nTEXT: All blue things are cold.\nFOL: all x. (Blue(x) -> Cold(x))\nTEXT: All green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If something is rough and big then it is green.\nFOL: all x. ((Rough(x) & Big(x)) -> Green(x))\nTEXT: All kind, blue things are cold.\nFOL: all x. ((Kind(x) & Blue(x)) -> Cold(x))\nTEXT: Gary is big.\nFOL: Big(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Erin is blue.\nFOL: Blue(erin)\nTEXT: Gary is cold.\nFOL: Cold(gary)\nTEXT: If Erin is green then Erin is big.\nFOL: Green(erin) -> Big(erin)\nTEXT: Green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: If Bob is cold then Bob is big.\nFOL: Cold(bob) -> Big(bob)\nTEXT: All blue things are cold.\nFOL: all x. (Blue(x) -> Cold(x))\nTEXT: All green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If something is rough and big then it is green.\nFOL: all x. ((Rough(x) & Big(x)) -> Green(x))\nTEXT: All kind, blue things are cold.\nFOL: all x. ((Kind(x) & Blue(x)) -> Cold(x))\nTEXT: Gary is big.\nFOL: Big(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Erin is blue.\nFOL: Blue(erin)\nTEXT: Gary is cold.\nFOL: Cold(gary)\nTEXT: If Erin is green then Erin is big.\nFOL: (Green(erin) -> Big(erin))\nTEXT: Green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: If Bob is cold then Bob is big.\nFOL: (Cold(bob) -> Big(bob))\nTEXT: All blue things are cold.\nFOL: all x. (Blue(x) -> Cold(x))\nTEXT: All green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If something is rough and big then it is green.\nFOL: all x. ((Rough(x) & Big(x)) -> Green(x))\nTEXT: All kind, blue things are cold.\nFOL: all x. ((Kind(x) & Blue(x)) -> Cold(x))\nTEXT: Gary is big.\nFOL: Big(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Erin is blue.\nFOL: Blue(erin)\nTEXT: Gary is cold.\nFOL: Cold(gary)\nTEXT: If Erin is green then Erin is big.\nFOL: Green(erin) -> Big(erin)\nTEXT: Green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: If Bob is cold then Bob is big.\nFOL: Cold(bob) -> Big(bob)\nTEXT: All blue things are cold.\nFOL: all x. (Blue(x) -> Cold(x))\nTEXT: All green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If something is rough and big then it is green.\nFOL: (Rough(x) & Big(x)) -> Green(x)\nTEXT: All kind, blue things are cold.\nFOL: all x. ((Kind(x) & Blue(x)) -> Cold(x))\nTEXT: Gary is big.\nFOL: Big(gary)\n</EVALUATE>"
  ]
 },
 {
  "index": 24,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: Kind(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is white.\nFOL: White(dave)\nTEXT: Dave is young.\nFOL: Young(dave)\nTEXT: Fiona is big.\nFOL: Big(fiona)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: Harry is young.\nFOL: Young(harry)\nTEXT: Blue people are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: All nice, cold people are young.\nFOL: all x. ((Nice(x) & Cold(x)) -> Young(x))\nTEXT: All young, nice people are cold.\nFOL: all x. ((Young(x) & Nice(x)) -> Cold(x))\nTEXT: All cold people are kind.\nFOL: all x. (Cold(x) -> Kind(x))\nTEXT: Cold people are young.\nFOL: all x. (Cold(x) -> Young(x))\nTEXT: If Dave is young then Dave is kind.\nFOL: Young(dave) -> Kind(dave)\nTEXT: Bob is not nice.\nFOL: -Nice(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: Kind(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is white.\nFOL: White(dave)\nTEXT: Dave is young.\nFOL: Young(dave)\nTEXT: Fiona is big.\nFOL: Big(fiona)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: Harry is young.\nFOL: Young(harry)\nTEXT: Blue people are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: All nice, cold people are young.\nFOL: all x. ((Nice(x) & Cold(x)) -> Young(x))\nTEXT: All young, nice people are cold.\nFOL: all x. ((Young(x) & Nice(x)) -> Cold(x))\nTEXT: All cold people are kind.\nFOL: all x. (Cold(x) -> Kind(x))\nTEXT: Cold people are young.\nFOL: all x. (Cold(x) -> Young(x))\nTEXT: If Dave is young then Dave is kind.\nFOL: (Young(dave) -> Kind(dave))\nTEXT: Bob is not nice.\nFOL: -Nice(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: Kind(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is white.\nFOL: White(dave)\nTEXT: Dave is young.\nFOL: Young(dave)\nTEXT: Fiona is big.\nFOL: Big(fiona)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: Harry is young.\nFOL: Young(harry)\nTEXT: Blue people are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: All nice, cold people are young.\nFOL: all x. (Nice(x) & Cold(x) -> Young(x))\nTEXT: All young, nice people are cold.\nFOL: all x. (Young(x) & Nice(x) -> Cold(x))\nTEXT: All cold people are kind.\nFOL: all x. (Cold(x) -> Kind(x))\nTEXT: Cold people are young.\nFOL: all x. (Cold(x) -> Young(x))\nTEXT: If Dave is young then Dave is kind.\nFOL: Young(dave) -> Kind(dave)\nTEXT: Bob is not nice.\nFOL: -Nice(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: Kind(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is white.\nFOL: White(dave)\nTEXT: Dave is young.\nFOL: Young(dave)\nTEXT: Fiona is big.\nFOL: Big(fiona)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: Harry is young.\nFOL: Young(harry)\nTEXT: Blue people are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: All nice, cold people are young.\nFOL: all x. (Nice(x) & Cold(x) -> Young(x))\nTEXT: All young, nice people are cold.\nFOL: all x. (Young(x) & Nice(x) -> Cold(x))\nTEXT: All cold people are kind.\nFOL: all x. (Cold(x) -> Kind(x))\nTEXT: Cold people are young.\nFOL: all x. (Cold(x) -> Young(x))\nTEXT: If Dave is young then Dave is kind.\nFOL: (Young(dave) -> Kind(dave))\nTEXT: Bob is not nice.\nFOL: -Nice(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: Kind(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is white.\nFOL: White(dave)\nTEXT: Dave is young.\nFOL: Young(dave)\nTEXT: Fiona is big.\nFOL: Big(fiona)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: Harry is young.\nFOL: Young(harry)\nTEXT: Blue people are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: All nice, cold people are young.\nFOL: all x. ((Nice(x) & Cold(x)) -> Young(x))\nTEXT: All young, nice people are cold.\nFOL: all x. ((Young(x) & Nice(x)) -> Cold(x))\nTEXT: All cold people are kind.\nFOL: all x. (Cold(x) -> Kind(x))\nTEXT: Cold people are young.\nFOL: all x. (Cold(x) -> Young(x))\nTEXT: If Dave is young then Dave is kind.\nFOL: -Young(dave) | Kind(dave)\nTEXT: Bob is not nice.\nFOL: -Nice(bob)\n</EVALUATE>"
  ]
 },
 {
  "index": 25,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Anne is not furry.\nFOL: -Furry(anne)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is not green.\nFOL: -Green(charlie)\nTEXT: Erin is cold.\nFOL: Cold(erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(erin)\nTEXT: All smart things are quiet.\nFOL: all x. (Smart(x) -> Quiet(x))\nTEXT: If Anne is blue then Anne is smart.\nFOL: Blue(anne) -> Smart(anne)\nTEXT: All cold, quiet things are big.\nFOL: all x. ((Cold(x) & Quiet(x)) -> Big(x))\nTEXT: Quiet things are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nTEXT: If Erin is big then Erin is not blue.\nFOL: Big(erin) -> -Blue(erin)\nTEXT: If something is blue and not quiet then it is furry.\nFOL: (Blue(x) & -Quiet(x)) -> Furry(x)\nTEXT: If something is smart and not blue then it is furry.\nFOL: (Smart(x) & -Blue(x)) -> Furry(x)\nTEXT: If something is blue and not quiet then it is not furry.\nFOL: (Blue(x) & -Quiet(x)) -> -Furry(x)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Anne is not furry.\nFOL: -Furry(anne)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is not green.\nFOL: -Green(charlie)\nTEXT: Erin is cold.\nFOL: Cold(erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(erin)\nTEXT: All smart things are quiet.\nFOL: all x. (Smart(x) -> Quiet(x))\nTEXT: If Anne is blue then Anne is smart.\nFOL: Blue(anne) -> Smart(anne)\nTEXT: All cold, quiet things are big.\nFOL: all x. (Cold(x) & Quiet(x) -> Big(x))\nTEXT: Quiet things are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nTEXT: If Erin is big then Erin is not blue.\nFOL: Big(erin) -> -Blue(erin)\nTEXT: If something is blue and not quiet then it is furry.\nFOL: (Blue(x) & -Quiet(x)) -> Furry(x)\nTEXT: If something is smart and not blue then it is furry.\nFOL: (Smart(x) & -Blue(x)) -> Furry(x)\nTEXT: If something is blue and not quiet then it is not furry.\nFOL: (Blue(x) & -Quiet(x)) -> -Furry(x)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Anne is not furry.\nFOL: -Furry(anne)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is not green.\nFOL: -Green(charlie)\nTEXT: Erin is cold.\nFOL: Cold(erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(erin)\nTEXT: All smart things are quiet.\nFOL: all x. (Smart(x) -> Quiet(x))\nTEXT: If Anne is blue then Anne is smart.\nFOL: Blue(anne) -> Smart(anne)\nTEXT: All cold, quiet things are big.\nFOL: all x. ((Cold(x) & Quiet(x)) -> Big(x))\nTEXT: Quiet things are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nTEXT: If Erin is big then Erin is not blue.\nFOL: Big(erin) -> -Blue(erin)\nTEXT: If something is blue and not quiet then it is furry.\nFOL: (Blue(x) & -Quiet(x)) -> Furry(x)\nTEXT: If something is smart and not blue then it is furry.\nFOL: (Smart(x) & -Blue(x)) -> Furry(x)\nTEXT: If something is blue and not quiet then it is not furry.\nFOL: (Blue(x) & -Quiet(x)) -> -Furry(x)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Anne is not furry.\nFOL: -Furry(anne)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is not green.\nFOL: -Green(charlie)\nTEXT: Erin is cold.\nFOL: Cold(erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(erin)\nTEXT: All smart things are quiet.\nFOL: all x. (Smart(x) -> Quiet(x))\nTEXT: If Anne is blue then Anne is smart.\nFOL: Blue(anne) -> Smart(anne)\nTEXT: All cold, quiet things are big.\nFOL: all x. ((Cold(x) & Quiet(x)) -> Big(x))\nTEXT: Quiet things are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nTEXT: If Erin is big then Erin is not blue.\nFOL: Big(erin) -> -Blue(erin)\nTEXT: If something is blue and not quiet then it is furry.\nFOL: all x. ((Blue(x) & -Quiet(x)) -> Furry(x))\nTEXT: If something is smart and not blue then it is furry.\nFOL: all x. ((Smart(x) & -Blue(x)) -> Furry(x))\nTEXT: If something is blue and not quiet then it is not furry.\nFOL: all x. ((Blue(x) & -Quiet(x)) -> -Furry(x))\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Anne is not furry.\nFOL: -Furry(anne)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is not green.\nFOL: -Green(charlie)\nTEXT: Erin is cold.\nFOL: Cold(erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(erin)\nTEXT: All smart things are quiet.\nFOL: all x. (Smart(x) -> Quiet(x))\nTEXT: If Anne is blue then Anne is smart.\nFOL: (Blue(anne) -> Smart(anne))\nTEXT: All cold, quiet things are big.\nFOL: all x. ((Cold(x) & Quiet(x)) -> Big(x))\nTEXT: Quiet things are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nTEXT: If Erin is big then Erin is not blue.\nFOL: (Big(erin) -> -Blue(erin))\nTEXT: If something is blue and not quiet then it is furry.\nFOL: (Blue(x) & -Quiet(x) -> Furry(x))\nTEXT: If something is smart and not blue then it is furry.\nFOL: (Smart(x) & -Blue(x) -> Furry(x))\nTEXT: If something is blue and not quiet then it is not furry.\nFOL: (Blue(x) & -Quiet(x) -> -Furry(x))\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\n</EVALUATE>"
  ]
 },
 {
  "index": 26,
  "responses": [
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: Bob woke up one day to find he had become round.\nFOL: Round(bob)\nTEXT: He was still rough, red, and green, but now he was also big.\nFOL: Rough(bob) & Red(bob) & Green(bob) & Big(bob)\nTEXT: Charlie may be young but he is nice, wears green shoes and is cold.\nFOL: Young(charlie) | (Nice(charlie) & GreenShoes(charlie) & Cold(charlie))\nTEXT: That guy Fred sure is nice.\nFOL: Nice(fred)\nTEXT: Someone who has young, nice and cold qualities will possess a red quality, too.\nFOL: all x. (Young(x) & Nice(x) & Cold(x) -> Red(x))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> Kind(x))\nTEXT: Young people who feel cold and are still kind usually look rough.\nFOL: all x. ((Young(x) & Cold(x) & Kind(x)) -> Rough(x))\nTEXT: Charlie is rough.\nFOL: Rough(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: Bob woke up one day to find he had become round.\nFOL: Round(bob)\nTEXT: He was still rough, red, and green, but now he was also big.\nFOL: Rough(bob) & Red(bob) & Green(bob) & Big(bob)\nTEXT: Charlie may be young but he is nice, wears green shoes and is cold.\nFOL: Young(charlie) | (Nice(charlie) & GreenShoes(charlie) & Cold(charlie))\nTEXT: That guy Fred sure is nice.\nFOL: Nice(fred)\nTEXT: Someone who has young, nice and cold qualities will possess a red quality, too.\nFOL: all x. (Young(x) & Nice(x) & Cold(x) -> Red(x))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. ((Cold(x) & Red(x)) -> Kind(x))\nTEXT: Young people who feel cold and are still kind usually look rough.\nFOL: all x. ((Young(x) & Cold(x) & Kind(x)) -> Rough(x))\nTEXT: Charlie is rough.\nFOL: Rough(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: Bob woke up one day to find he had become round.\nFOL: Round(bob)\nTEXT: He was still rough, red, and green, but now he was also big.\nFOL: Rough(bob) & Red(bob) & Green(bob) & Big(bob)\nTEXT: Charlie may be young but he is nice, wears green shoes and is cold.\nFOL: Young(charlie) | (Nice(charlie) & GreenShoes(charlie) & Cold(charlie))\nTEXT: That guy Fred sure is nice.\nFOL: Nice(fred)\nTEXT: Someone who has young, nice and cold qualities will possess a red quality, too.\nFOL: all x. ((Young(x) & Nice(x) & Cold(x)) -> Red(x))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. ((Cold(x) & Red(x)) -> Kind(x))\nTEXT: Young people who feel cold and are still kind usually look rough.\nFOL: all x. ((Young(x) & Cold(x) & Kind(x)) -> Rough(x))\nTEXT: Charlie is rough.\nFOL: Rough(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: Bob woke up one day to find he had become round.\nFOL: Round(bob)\nTEXT: He was still rough, red, and green, but now he was also big.\nFOL: Rough(bob) & Red(bob) & Green(bob) & Big(bob)\nTEXT: Charlie may be young but he is nice, wears green shoes and is cold.\nFOL: Young(charlie) | (Nice(charlie) & GreenShoes(charlie) & Cold(charlie))\nTEXT: That guy Fred sure is nice.\nFOL: Nice(fred)\nTEXT: Someone who has young, nice and cold qualities will possess a red quality, too.\nFOL: all x. (Young(x) & Nice(x) & Cold(x) -> Red(x))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. ((Cold(x) & Red(x)) -> Kind(x))\nTEXT: Young people who feel cold and are still kind usually look rough.\nFOL: all x. (Young(x) & Cold(x) & Kind(x) -> Rough(x))\nTEXT: Charlie is rough.\nFOL: Rough(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: Bob woke up one day to find he had become round.\nFOL: Round(bob)\nTEXT: He was still rough, red, and green, but now he was also big.\nFOL: Rough(bob) & Red(bob) & Green(bob) & Big(bob)\nTEXT: Charlie may be young but he is nice, wears green shoes and is cold.\nFOL: Young(charlie) | (Nice(charlie) & GreenShoes(charlie) & Cold(charlie))\nTEXT: That guy Fred sure is nice.\nFOL: Nice(fred)\nTEXT: Someone who has young, nice and cold qualities will possess a red quality, too.\nFOL: (Young(x) & Nice(x) & Cold(x)) -> Red(x)\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. ((Cold(x) & Red(x)) -> Kind(x))\nTEXT: Young people who feel cold and are still kind usually look rough.\nFOL: all x. ((Young(x) & Cold(x) & Kind(x)) -> Rough(x))\nTEXT: Charlie is rough.\nFOL: Rough(charlie)\n</EVALUATE>"
  ]
 },
 {
  "index": 27,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Erin is big.\nFOL: Big(erin)\nTEXT: Gary is blue.\nFOL: Blue(gary)\nTEXT: All big, smart people are green.\nFOL: all x. (Big(x) & Smart(x) -> Green(x))\nTEXT: If someone is smart then they are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: If someone is big then they are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: If Gary is cold and Gary is blue then Gary is green.\nFOL: (Cold(gary) & Blue(gary) -> Green(gary))\nTEXT: Green, round people are big.\nFOL: all x. (Green(x) & Round(x) -> Big(x))\nTEXT: All green people are round.\nFOL: all x. (Green(x) -> Round(x))\nTEXT: Erin is not green.\nFOL: -Green(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Erin is big.\nFOL: Big(erin)\nTEXT: Gary is blue.\nFOL: Blue(gary)\nTEXT: All big, smart people are green.\nFOL: all x. (Big(x) & Smart(x) -> Green(x))\nTEXT: If someone is smart then they are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: If someone is big then they are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: If Gary is cold and Gary is blue then Gary is green.\nFOL: (Cold(gary) & Blue(gary)) -> Green(gary)\nTEXT: Green, round people are big.\nFOL: all x. (Green(x) & Round(x) -> Big(x))\nTEXT: All green people are round.\nFOL: all x. (Green(x) -> Round(x))\nTEXT: Erin is not green.\nFOL: -Green(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Erin is big.\nFOL: Big(erin)\nTEXT: Gary is blue.\nFOL: Blue(gary)\nTEXT: All big, smart people are green.\nFOL: all x. (Big(x) & Smart(x) -> Green(x))\nTEXT: If someone is smart then they are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: If someone is big then they are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: If Gary is cold and Gary is blue then Gary is green.\nFOL: (Cold(gary) & Blue(gary) -> Green(gary))\nTEXT: Green, round people are big.\nFOL: all x. (Green(x) & Round(x) -> Big(x))\nTEXT: All green people are round.\nFOL: all x. (Green(x) -> Round(x))\nTEXT: Erin is not green.\nFOL: -Green(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Erin is big.\nFOL: Big(erin)\nTEXT: Gary is blue.\nFOL: Blue(gary)\nTEXT: All big, smart people are green.\nFOL: all x. (Big(x) & Smart(x) -> Green(x))\nTEXT: If someone is smart then they are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: If someone is big then they are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: If Gary is cold and Gary is blue then Gary is green.\nFOL: Cold(gary) & Blue(gary) -> Green(gary)\nTEXT: Green, round people are big.\nFOL: all x. (Green(x) & Round(x) -> Big(x))\nTEXT: All green people are round.\nFOL: all x. (Green(x) -> Round(x))\nTEXT: Erin is not green.\nFOL: -Green(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Erin is big.\nFOL: Big(erin)\nTEXT: Gary is blue.\nFOL: Blue(gary)\nTEXT: All big, smart people are green.\nFOL: all x. ((Big(x) & Smart(x)) -> Green(x))\nTEXT: If someone is smart then they are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: If someone is big then they are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: If Gary is cold and Gary is blue then Gary is green.\nFOL: (Cold(gary) & Blue(gary)) -> Green(gary)\nTEXT: Green, round people are big.\nFOL: all x. (Green(x) & Round(x) -> Big(x))\nTEXT: All green people are round.\nFOL: all x. (Green(x) -> Round(x))\nTEXT: Erin is not green.\nFOL: -Green(erin)\n</EVALUATE>"
  ]
 },
 {
  "index": 28,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(dave)\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\nTEXT: Fiona is smart.\nFOL: Smart(fiona)\nTEXT: If someone is smart then they are nice.\nFOL: all x. (Smart(x) -> Nice(x))\nTEXT: All smart people are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: Rough people are big.\nFOL: all x. (Rough(x) -> Big(x))\nTEXT: If someone is quiet and white then they are not rough.\nFOL: all x. ((Quiet(x) & White(x)) -> -Rough(x))\nTEXT: Big people are rough.\nFOL: all x. (Big(x) -> Rough(x))\nTEXT: Rough, big people are white.\nFOL: all x. ((Rough(x) & Big(x)) -> White(x))\nTEXT: If Dave is white then Dave is not big.\nFOL: White(dave) -> -Big(dave)\nTEXT: If someone is big and not white then they are not furry.\nFOL: all x. ((Big(x) & -White(x)) -> -Furry(x))\nTEXT: Dave is nice.\nFOL: Nice(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(dave)\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\nTEXT: Fiona is smart.\nFOL: Smart(fiona)\nTEXT: If someone is smart then they are nice.\nFOL: all x. (Smart(x) -> Nice(x))\nTEXT: All smart people are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: Rough people are big.\nFOL: all x. (Rough(x) -> Big(x))\nTEXT: If someone is quiet and white then they are not rough.\nFOL: all x. ((Quiet(x) & White(x)) -> -Rough(x))\nTEXT: Big people are rough.\nFOL: all x. (Big(x) -> Rough(x))\nTEXT: Rough, big people are white.\nFOL: all x. (Rough(x) & Big(x) -> White(x))\nTEXT: If Dave is white then Dave is not big.\nFOL: White(dave) -> -Big(dave)\nTEXT: If someone is big and not white then they are not furry.\nFOL: all x. ((Big(x) & -White(x)) -> -Furry(x))\nTEXT: Dave is nice.\nFOL: Nice(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(dave)\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\nTEXT: Fiona is smart.\nFOL: Smart(fiona)\nTEXT: If someone is smart then they are nice.\nFOL: all x. (Smart(x) -> Nice(x))\nTEXT: All smart people are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: Rough people are big.\nFOL: all x. (Rough(x) -> Big(x))\nTEXT: If someone is quiet and white then they are not rough.\nFOL: all x. (Quiet(x) & White(x) -> -Rough(x))\nTEXT: Big people are rough.\nFOL: all x. (Big(x) -> Rough(x))\nTEXT: Rough, big people are white.\nFOL: all x. (Rough(x) & Big(x) -> White(x))\nTEXT: If Dave is white then Dave is not big.\nFOL: White(dave) -> -Big(dave)\nTEXT: If someone is big and not white then they are not furry.\nFOL: all x. (Big(x) & -White(x) -> -Furry(x))\nTEXT: Dave is nice.\nFOL: Nice(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(dave)\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\nTEXT: Fiona is smart.\nFOL: Smart(fiona)\nTEXT: If someone is smart then they are nice.\nFOL: all x. (Smart(x) -> Nice(x))\nTEXT: All smart people are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: Rough people are big.\nFOL: all x. (Rough(x) -> Big(x))\nTEXT: If someone is quiet and white then they are not rough.\nFOL: all x. ((Quiet(x) & White(x)) -> -Rough(x))\nTEXT: Big people are rough.\nFOL: all x. (Big(x) -> Rough(x))\nTEXT: Rough, big people are white.\nFOL: all x. (Rough(x) & Big(x) -> White(x))\nTEXT: If Dave is white then Dave is not big.\nFOL: White(dave) -> -Big(dave)\nTEXT: If someone is big and not white then they are not furry.\nFOL: all x. (Big(x) & -White(x) -> -Furry(x))\nTEXT: Dave is nice.\nFOL: Nice(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(dave)\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\nTEXT: Fiona is smart.\nFOL: Smart(fiona)\nTEXT: If someone is smart then they are nice.\nFOL: all x. (Smart(x) -> Nice(x))\nTEXT: All smart people are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: Rough people are big.\nFOL: all x. (Rough(x) -> Big(x))\nTEXT: If someone is quiet and white then they are not rough.\nFOL: all x. (Quiet(x) & White(x) -> -Rough(x))\nTEXT: Big people are rough.\nFOL: all x. (Big(x) -> Rough(x))\nTEXT: Rough, big people are white.\nFOL: all x. ((Rough(x) & Big(x)) -> White(x))\nTEXT: If Dave is white then Dave is not big.\nFOL: White(dave) -> -Big(dave)\nTEXT: If someone is big and not white then they are not furry.\nFOL: all x. (Big(x) & -White(x) -> -Furry(x))\nTEXT: Dave is nice.\nFOL: Nice(dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 29,
  "responses": [
   "<EVALUATE>\nTEXT: The cow chases the squirrel.\nFOL: Chases(cow, squirrel)\nTEXT: The cow is blue.\nFOL: Blue(cow)\nTEXT: The cow is round.\nFOL: Round(cow)\nTEXT: The cow is young.\nFOL: Young(cow)\nTEXT: The cow needs the squirrel.\nFOL: Needs(cow, squirrel)\nTEXT: The cow sees the squirrel.\nFOL: Sees(cow, squirrel)\nTEXT: The squirrel chases the cow.\nFOL: Chases(squirrel, cow)\nTEXT: The squirrel is young.\nFOL: Young(squirrel)\nTEXT: The squirrel needs the cow.\nFOL: Needs(squirrel, cow)\nTEXT: The squirrel sees the cow.\nFOL: Sees(squirrel, cow)\nTEXT: If the cow needs the squirrel and the squirrel sees the cow then the squirrel is big.\nFOL: (Needs(cow, squirrel) & Sees(squirrel, cow)) -> Big(squirrel)\nTEXT: If someone is big then they chase the squirrel.\nFOL: all x. (Big(x) -> Chases(x, squirrel))\nTEXT: If the cow needs the squirrel and the cow is big then the cow is young.\nFOL: (Needs(cow, squirrel) & Big(cow)) -> Young(cow)\nTEXT: If someone sees the squirrel and they are blue then the squirrel needs the cow.\nFOL: all x. (Sees(x, squirrel) & Blue(x) -> Needs(squirrel, cow))\nTEXT: If someone chases the squirrel then they are cold.\nFOL: all x. (Chases(x, squirrel) -> Cold(x))\nTEXT: If the squirrel needs the cow and the squirrel sees the cow then the cow needs the squirrel.\nFOL: (Needs(squirrel, cow) & Sees(squirrel, cow)) -> Needs(cow, squirrel)\nTEXT: The squirrel is not round.\nFOL: -Round(squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the squirrel.\nFOL: Chases(cow, squirrel)\nTEXT: The cow is blue.\nFOL: Blue(cow)\nTEXT: The cow is round.\nFOL: Round(cow)\nTEXT: The cow is young.\nFOL: Young(cow)\nTEXT: The cow needs the squirrel.\nFOL: Needs(cow, squirrel)\nTEXT: The cow sees the squirrel.\nFOL: Sees(cow, squirrel)\nTEXT: The squirrel chases the cow.\nFOL: Chases(squirrel, cow)\nTEXT: The squirrel is young.\nFOL: Young(squirrel)\nTEXT: The squirrel needs the cow.\nFOL: Needs(squirrel, cow)\nTEXT: The squirrel sees the cow.\nFOL: Sees(squirrel, cow)\nTEXT: If the cow needs the squirrel and the squirrel sees the cow then the squirrel is big.\nFOL: (Needs(cow, squirrel) & Sees(squirrel, cow) -> Big(squirrel))\nTEXT: If someone is big then they chase the squirrel.\nFOL: all x. (Big(x) -> Chases(x, squirrel))\nTEXT: If the cow needs the squirrel and the cow is big then the cow is young.\nFOL: (Needs(cow, squirrel) & Big(cow) -> Young(cow))\nTEXT: If someone sees the squirrel and they are blue then the squirrel needs the cow.\nFOL: all x. (Sees(x, squirrel) & Blue(x) -> Needs(squirrel, cow))\nTEXT: If someone chases the squirrel then they are cold.\nFOL: all x. (Chases(x, squirrel) -> Cold(x))\nTEXT: If the squirrel needs the cow and the squirrel sees the cow then the cow needs the squirrel.\nFOL: (Needs(squirrel, cow) & Sees(squirrel, cow) -> Needs(cow, squirrel))\nTEXT: The squirrel is not round.\nFOL: -Round(squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the squirrel.\nFOL: Chase(cow, squirrel)\nTEXT: The cow is blue.\nFOL: Blue(cow)\nTEXT: The cow is round.\nFOL: Round(cow)\nTEXT: The cow is young.\nFOL: Young(cow)\nTEXT: The cow needs the squirrel.\nFOL: Needs(cow, squirrel)\nTEXT: The cow sees the squirrel.\nFOL: Sees(cow, squirrel)\nTEXT: The squirrel chases the cow.\nFOL: Chase(squirrel, cow)\nTEXT: The squirrel is young.\nFOL: Young(squirrel)\nTEXT: The squirrel needs the cow.\nFOL: Needs(squirrel, cow)\nTEXT: The squirrel sees the cow.\nFOL: Sees(squirrel, cow)\nTEXT: If the cow needs the squirrel and the squirrel sees the cow then the squirrel is big.\nFOL: (Needs(cow, squirrel) & Sees(squirrel, cow)) -> Big(squirrel)\nTEXT: If someone is big then they chase the squirrel.\nFOL: all x. (Big(x) -> Chase(x, squirrel))\nTEXT: If the cow needs the squirrel and the cow is big then the cow is young.\nFOL: (Needs(cow, squirrel) & Big(cow)) -> Young(cow)\nTEXT: If someone sees the squirrel and they are blue then the squirrel needs the cow.\nFOL: all x. (Sees(x, squirrel) & Blue(x) -> Needs(squirrel, cow))\nTEXT: If someone chases the squirrel then they are cold.\nFOL: all x. (Chase(x, squirrel) -> Cold(x))\nTEXT: If the squirrel needs the cow and the squirrel sees the cow then the cow needs the squirrel.\nFOL: (Needs(squirrel, cow) & Sees(squirrel, cow)) -> Needs(cow, squirrel)\nTEXT: The squirrel is not round.\nFOL: -Round(squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the squirrel.\nFOL: Chases(cow, squirrel)\nTEXT: The cow is blue.\nFOL: Blue(cow)\nTEXT: The cow is round.\nFOL: Round(cow)\nTEXT: The cow is young.\nFOL: Young(cow)\nTEXT: The cow needs the squirrel.\nFOL: Needs(cow, squirrel)\nTEXT: The cow sees the squirrel.\nFOL: Sees(cow, squirrel)\nTEXT: The squirrel chases the cow.\nFOL: Chases(squirrel, cow)\nTEXT: The squirrel is young.\nFOL: Young(squirrel)\nTEXT: The squirrel needs the cow.\nFOL: Needs(squirrel, cow)\nTEXT: The squirrel sees the cow.\nFOL: Sees(squirrel, cow)\nTEXT: If the cow needs the squirrel and the squirrel sees the cow then the squirrel is big.\nFOL: (Needs(cow, squirrel) & Sees(squirrel, cow)) -> Big(squirrel)\nTEXT: If someone is big then they chase the squirrel.\nFOL: all x. (Big(x) -> Chases(x, squirrel))\nTEXT: If the cow needs the squirrel and the cow is big then the cow is young.\nFOL: (Needs(cow, squirrel) & Big(cow)) -> Young(cow)\nTEXT: If someone sees the squirrel and they are blue then the squirrel needs the cow.\nFOL: all x. ((Sees(x, squirrel) & Blue(x)) -> Needs(squirrel, cow))\nTEXT: If someone chases the squirrel then they are cold.\nFOL: all x. (Chases(x, squirrel) -> Cold(x))\nTEXT: If the squirrel needs the cow and the squirrel sees the cow then the cow needs the squirrel.\nFOL: (Needs(squirrel, cow) & Sees(squirrel, cow)) -> Needs(cow, squirrel)\nTEXT: The squirrel is not round.\nFOL: -Round(squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the squirrel.\nFOL: Chase(cow, squirrel)\nTEXT: The cow is blue.\nFOL: Blue(cow)\nTEXT: The cow is round.\nFOL: Round(cow)\nTEXT: The cow is young.\nFOL: Young(cow)\nTEXT: The cow needs the squirrel.\nFOL: Needs(cow, squirrel)\nTEXT: The cow sees the squirrel.\nFOL: See(cow, squirrel)\nTEXT: The squirrel chases the cow.\nFOL: Chase(squirrel, cow)\nTEXT: The squirrel is young.\nFOL: Young(squirrel)\nTEXT: The squirrel needs the cow.\nFOL: Needs(squirrel, cow)\nTEXT: The squirrel sees the cow.\nFOL: See(squirrel, cow)\nTEXT: If the cow needs the squirrel and the squirrel sees the cow then the squirrel is big.\nFOL: (Needs(cow, squirrel) & See(squirrel, cow) -> Big(squirrel))\nTEXT: If someone is big then they chase the squirrel.\nFOL: all x. (Big(x) -> Chase(x, squirrel))\nTEXT: If the cow needs the squirrel and the cow is big then the cow is young.\nFOL: (Needs(cow, squirrel) & Big(cow) -> Young(cow))\nTEXT: If someone sees the squirrel and they are blue then the squirrel needs the cow.\nFOL: all x. (See(x, squirrel) & Blue(x) -> Needs(squirrel, cow))\nTEXT: If someone chases the squirrel then they are cold.\nFOL: all x. (Chase(x, squirrel) -> Cold(x))\nTEXT: If the squirrel needs the cow and the squirrel sees the cow then the cow needs the squirrel.\nFOL: (Needs(squirrel, cow) & See(squirrel, cow) -> Needs(cow, squirrel))\nTEXT: The squirrel is not round.\nFOL: -Round(squirrel)\n</EVALUATE>"
  ]
 },
 {
  "index": 30,
  "responses": [
   "<EVALUATE>\nTEXT: Alan is a big fellow, often blue and sad, but he is nice.\nFOL: Big(fellow) & Blue(fellow) & Sad(fellow) & Nice(fellow)\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: Kind(charlie) & Young(charlie) & Blue(charlie)\nTEXT: Eric is a really nice guy with a big round body, usually wearing red.\nFOL: Nice(eric) & Big(eric) & Round(eric) & Red(eric)\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(fred) | Kind(fred)\nTEXT: Young, red people are usually quite blue too.\nFOL: Young(x) & Red(x) -> Blue(x)\nTEXT: Big people who are red in color are almost always young.\nFOL: Big(x) & Red(x) -> Young(x)\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: Big(x) & Blue(x) & Red(x) -> RoughSkin(x)\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: Red(x) -> Green(x)\nTEXT: A kind person who looks blue because he is is cold is usually big in stature.\nFOL: Kind(x) & Blue(x) & Cold(x) -> Big(x)\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: Green(x) & Blue(x) & Red(x) -> Round(x)\nTEXT: When a person is blue, rough and kind then it means they also are cold.\nFOL: Blue(x) & Rough(x) & Kind(x) -> Cold(x)\nTEXT: Eric is not young.\nFOL: -Young(eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a big fellow, often blue and sad, but he is nice.\nFOL: Big(alan) & Blue(alan) & Sad(alan) & Nice(alan)\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: Kind(charlie) & Young(charlie) & Blue(charlie)\nTEXT: Eric is a really nice guy with a big round body, usually wearing red.\nFOL: Nice(eric) & Big(eric) & Round(eric) & Red(eric)\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(fred) | Kind(fred)\nTEXT: Young, red people are usually quite blue too.\nFOL: all x. (Young(x) & Red(x) -> Blue(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: all x. (Big(x) & Blue(x) & Red(x) -> RoughSkin(x))\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: all x. (Red(x) -> Green(x))\nTEXT: A kind person who looks blue because he is is cold is usually big in stature.\nFOL: all x. (Kind(x) & Blue(x) & Cold(x) -> Big(x))\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: all x. (Green(x) & Blue(x) & Red(x) -> Round(x))\nTEXT: When a person is blue, rough and kind then it means they also are cold.\nFOL: all x. (Blue(x) & RoughSkin(x) & Kind(x) -> Cold(x))\nTEXT: Eric is not young.\nFOL: -Young(eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a big fellow, often blue and sad, but he is nice.\nFOL: Big(alan) & Blue(alan) & Sad(alan) & Nice(alan)\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: Kind(charlie) & Young(charlie) & Blue(charlie)\nTEXT: Eric is a really nice guy with a big round body, usually wearing red.\nFOL: Nice(eric) & Big(eric) & Round(eric) & Red(eric)\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(fred) | Kind(fred)\nTEXT: Young, red people are usually quite blue too.\nFOL: all x. (Young(x) & Red(x) -> Blue(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: all x. (Big(x) & Blue(x) & Red(x) -> RoughSkin(x))\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: all x. (Red(x) -> Green(x))\nTEXT: A kind person who looks blue because he is is cold is usually big in stature.\nFOL: all x. (Kind(x) & Blue(x) & Cold(x) -> Big(x))\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: all x. (Green(x) & Blue(x) & Red(x) -> Round(x))\nTEXT: When a person is blue, rough and kind then it means they also are cold.\nFOL: all x. (Blue(x) & Rough(x) & Kind(x) -> Cold(x))\nTEXT: Eric is not young.\nFOL: -Young(eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a big fellow, often blue and sad, but he is nice.\nFOL: Big(alan) & Blue(alan) & Sad(alan) & Nice(alan)\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: Kind(charlie) & Young(charlie) & Blue(charlie)\nTEXT: Eric is a really nice guy with a big round body, usually wearing red.\nFOL: Nice(eric) & Big(eric) & Round(eric) & Red(eric)\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(fred) | Kind(fred)\nTEXT: Young, red people are usually quite blue too.\nFOL: all x. (Young(x) & Red(x) -> Blue(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: all x. (Big(x) & Blue(x) & Red(x) -> RoughSkin(x))\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: Red(x) -> Green(x)\nTEXT: A kind person who looks blue because he is is cold is usually big in stature.\nFOL: all x. (Kind(x) & Blue(x) & Cold(x) -> Big(x))\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: all x. (Green(x) & Blue(x) & Red(x) -> Round(x))\nTEXT: When a person is blue, rough and kind then it means they also are cold.\nFOL: all x. (Blue(x) & Rough(x) & Kind(x) -> Cold(x))\nTEXT: Eric is not young.\nFOL: -Young(eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a big fellow, often blue and sad, but he is nice.\nFOL: Big(alan) & Blue(alan) & Sad(alan) & Nice(alan)\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: Kind(charlie) & Young(charlie) & Blue(charlie)\nTEXT: Eric is a really nice guy with a big round body, usually wearing red.\nFOL: Nice(eric) & Big(eric) & Round(eric) & Red(eric)\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(fred) | Kind(fred)\nTEXT: Young, red people are usually quite blue too.\nFOL: Young(x) & Red(x) -> Blue(x)\nTEXT: Big people who are red in color are almost always young.\nFOL: Big(x) & Red(x) -> Young(x)\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: Big(x) & Blue(x) & Red(x) -> RoughSkin(x)\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: Red(x) -> Green(x)\nTEXT: A kind person who looks blue because he is is cold is usually big in stature.\nFOL: Kind(x) & Blue(x) & Cold(x) -> Big(x)\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: Green(x) & Blue(x) & Red(x) -> Round(x)\nTEXT: When a person is blue, rough and kind then it means they also are cold.\nFOL: Blue(x) & Rough(x) & Kind(x) -> Cold(x)\nTEXT: Eric is not young.\nFOL: -Young(eric)\n</EVALUATE>"
  ]
 },
 {
  "index": 31,
  "responses": [
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: Chases(cat, cow)\nTEXT: The cat chases the rabbit.\nFOL: Chases(cat, rabbit)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat needs the cow.\nFOL: Needs(cat, cow)\nTEXT: The cat visits the rabbit.\nFOL: Visits(cat, rabbit)\nTEXT: The cow is nice.\nFOL: Nice(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow needs the cat.\nFOL: Needs(cow, cat)\nTEXT: The cow visits the cat.\nFOL: Visits(cow, cat)\nTEXT: The mouse chases the cow.\nFOL: Chases(mouse, cow)\nTEXT: The mouse chases the rabbit.\nFOL: Chases(mouse, rabbit)\nTEXT: The mouse is kind.\nFOL: Kind(mouse)\nTEXT: The mouse needs the rabbit.\nFOL: Needs(mouse, rabbit)\nTEXT: The rabbit chases the cow.\nFOL: Chases(rabbit, cow)\nTEXT: The rabbit needs the cow.\nFOL: Needs(rabbit, cow)\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: (Visits(x, cow) & Nice(x)) -> Chases(cow, mouse)\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: (Nice(x) & Chases(x, cow)) -> Needs(x, cow)\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: (Red(rabbit) & Visits(rabbit, mouse)) -> Kind(rabbit)\nTEXT: If something chases the cow then it visits the mouse.\nFOL: Chases(x, cow) -> Visits(x, mouse)\nTEXT: If something chases the cow then it visits the cat.\nFOL: Chases(x, cow) -> Visits(x, cat)\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: (Needs(mouse, rabbit) & Visits(rabbit, mouse)) -> Red(rabbit)\nTEXT: The cow chases the cow.\nFOL: Chases(cow, cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: Chases(cat, cow)\nTEXT: The cat chases the rabbit.\nFOL: Chases(cat, rabbit)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat needs the cow.\nFOL: Needs(cat, cow)\nTEXT: The cat visits the rabbit.\nFOL: Visits(cat, rabbit)\nTEXT: The cow is nice.\nFOL: Nice(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow needs the cat.\nFOL: Needs(cow, cat)\nTEXT: The cow visits the cat.\nFOL: Visits(cow, cat)\nTEXT: The mouse chases the cow.\nFOL: Chases(mouse, cow)\nTEXT: The mouse chases the rabbit.\nFOL: Chases(mouse, rabbit)\nTEXT: The mouse is kind.\nFOL: Kind(mouse)\nTEXT: The mouse needs the rabbit.\nFOL: Needs(mouse, rabbit)\nTEXT: The rabbit chases the cow.\nFOL: Chases(rabbit, cow)\nTEXT: The rabbit needs the cow.\nFOL: Needs(rabbit, cow)\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: (Visits(x, cow) & Nice(x) -> Chases(cow, mouse))\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: (Nice(x) & Chases(x, cow) -> Needs(x, cow))\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: (Red(rabbit) & Visits(rabbit, mouse) -> Kind(rabbit))\nTEXT: If something chases the cow then it visits the mouse.\nFOL: (Chases(x, cow) -> Visits(x, mouse))\nTEXT: If something chases the cow then it visits the cat.\nFOL: (Chases(x, cow) -> Visits(x, cat))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: (Needs(mouse, rabbit) & Visits(rabbit, mouse) -> Red(rabbit))\nTEXT: The cow chases the cow.\nFOL: Chases(cow, cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: Chases(cat, cow)\nTEXT: The cat chases the rabbit.\nFOL: Chases(cat, rabbit)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat needs the cow.\nFOL: Needs(cat, cow)\nTEXT: The cat visits the rabbit.\nFOL: Visits(cat, rabbit)\nTEXT: The cow is nice.\nFOL: Nice(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow needs the cat.\nFOL: Needs(cow, cat)\nTEXT: The cow visits the cat.\nFOL: Visits(cow, cat)\nTEXT: The mouse chases the cow.\nFOL: Chases(mouse, cow)\nTEXT: The mouse chases the rabbit.\nFOL: Chases(mouse, rabbit)\nTEXT: The mouse is kind.\nFOL: Kind(mouse)\nTEXT: The mouse needs the rabbit.\nFOL: Needs(mouse, rabbit)\nTEXT: The rabbit chases the cow.\nFOL: Chases(rabbit, cow)\nTEXT: The rabbit needs the cow.\nFOL: Needs(rabbit, cow)\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: all x. (Visits(x, cow) & Nice(x) -> Chases(cow, mouse))\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: all x. (Nice(x) & Chases(x, cow) -> Needs(x, cow))\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: (Red(rabbit) & Visits(rabbit, mouse)) -> Kind(rabbit)\nTEXT: If something chases the cow then it visits the mouse.\nFOL: all x. (Chases(x, cow) -> Visits(x, mouse))\nTEXT: If something chases the cow then it visits the cat.\nFOL: all x. (Chases(x, cow) -> Visits(x, cat))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: (Needs(mouse, rabbit) & Visits(rabbit, mouse)) -> Red(rabbit)\nTEXT: The cow chases the cow.\nFOL: Chases(cow, cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: Chase(cat, cow)\nTEXT: The cat chases the rabbit.\nFOL: Chase(cat, rabbit)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat needs the cow.\nFOL: Need(cat, cow)\nTEXT: The cat visits the rabbit.\nFOL: Visit(cat, rabbit)\nTEXT: The cow is nice.\nFOL: Nice(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow needs the cat.\nFOL: Need(cow, cat)\nTEXT: The cow visits the cat.\nFOL: Visit(cow, cat)\nTEXT: The mouse chases the cow.\nFOL: Chase(mouse, cow)\nTEXT: The mouse chases the rabbit.\nFOL: Chase(mouse, rabbit)\nTEXT: The mouse is kind.\nFOL: Kind(mouse)\nTEXT: The mouse needs the rabbit.\nFOL: Need(mouse, rabbit)\nTEXT: The rabbit chases the cow.\nFOL: Chase(rabbit, cow)\nTEXT: The rabbit needs the cow.\nFOL: Need(rabbit, cow)\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: (Visit(x, cow) & Nice(x)) -> Chase(cow, mouse)\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: (Nice(x) & Chase(x, cow)) -> Need(x, cow)\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: (Red(rabbit) & Visit(rabbit, mouse)) -> Kind(rabbit)\nTEXT: If something chases the cow then it visits the mouse.\nFOL: Chase(x, cow) -> Visit(x, mouse)\nTEXT: If something chases the cow then it visits the cat.\nFOL: Chase(x, cow) -> Visit(x, cat)\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: (Need(mouse, rabbit) & Visit(rabbit, mouse)) -> Red(rabbit)\nTEXT: The cow chases the cow.\nFOL: Chase(cow, cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: Chases(cat, cow)\nTEXT: The cat chases the rabbit.\nFOL: Chases(cat, rabbit)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat needs the cow.\nFOL: Needs(cat, cow)\nTEXT: The cat visits the rabbit.\nFOL: Visits(cat, rabbit)\nTEXT: The cow is nice.\nFOL: Nice(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow needs the cat.\nFOL: Needs(cow, cat)\nTEXT: The cow visits the cat.\nFOL: Visits(cow, cat)\nTEXT: The mouse chases the cow.\nFOL: Chases(mouse, cow)\nTEXT: The mouse chases the rabbit.\nFOL: Chases(mouse, rabbit)\nTEXT: The mouse is kind.\nFOL: Kind(mouse)\nTEXT: The mouse needs the rabbit.\nFOL: Needs(mouse, rabbit)\nTEXT: The rabbit chases the cow.\nFOL: Chases(rabbit, cow)\nTEXT: The rabbit needs the cow.\nFOL: Needs(rabbit, cow)\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: (Visits(x, cow) & Nice(x)) -> Chases(cow, mouse)\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: (Nice(x) & Chases(x, cow)) -> Needs(x, cow)\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: (Red(rabbit) & Visits(rabbit, mouse)) -> Kind(rabbit)\nTEXT: If something chases the cow then it visits the mouse.\nFOL: (Chases(x, cow) -> Visits(x, mouse))\nTEXT: If something chases the cow then it visits the cat.\nFOL: (Chases(x, cow) -> Visits(x, cat))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: (Needs(mouse, rabbit) & Visits(rabbit, mouse)) -> Red(rabbit)\nTEXT: The cow chases the cow.\nFOL: Chases(cow, cow)\n</EVALUATE>"
  ]
 },
 {
  "index": 32,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: Kind(dave)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Gary is rough.\nFOL: Rough(gary)\nTEXT: All nice things are big.\nFOL: all x. (Nice(x) -> Big(x))\nTEXT: If Gary is nice then Gary is rough.\nFOL: Nice(gary) -> Rough(gary)\nTEXT: Red things are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If something is nice and not red then it is cold.\nFOL: (Nice(x) & -Red(x)) -> Cold(x)\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If Gary is not round and Gary is not big then Gary is cold.\nFOL: (-Round(gary) & -Big(gary)) -> Cold(gary)\nTEXT: Dave is rough.\nFOL: Rough(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: Kind(dave)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Gary is rough.\nFOL: Rough(gary)\nTEXT: All nice things are big.\nFOL: all x. (Nice(x) -> Big(x))\nTEXT: If Gary is nice then Gary is rough.\nFOL: Nice(gary) -> Rough(gary)\nTEXT: Red things are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If something is nice and not red then it is cold.\nFOL: all x. ((Nice(x) & -Red(x)) -> Cold(x))\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If Gary is not round and Gary is not big then Gary is cold.\nFOL: (-Round(gary) & -Big(gary)) -> Cold(gary)\nTEXT: Dave is rough.\nFOL: Rough(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: Kind(dave)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Gary is rough.\nFOL: Rough(gary)\nTEXT: All nice things are big.\nFOL: all x. (Nice(x) -> Big(x))\nTEXT: If Gary is nice then Gary is rough.\nFOL: Nice(gary) -> Rough(gary)\nTEXT: Red things are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If something is nice and not red then it is cold.\nFOL: all x. ((Nice(x) & -Red(x)) -> Cold(x))\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If Gary is not round and Gary is not big then Gary is cold.\nFOL: -Round(gary) & -Big(gary) -> Cold(gary)\nTEXT: Dave is rough.\nFOL: Rough(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: Kind(dave)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Gary is rough.\nFOL: Rough(gary)\nTEXT: All nice things are big.\nFOL: all x. (Nice(x) -> Big(x))\nTEXT: If Gary is nice then Gary is rough.\nFOL: (Nice(gary) -> Rough(gary))\nTEXT: Red things are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If something is nice and not red then it is cold.\nFOL: all x. ((Nice(x) & -Red(x)) -> Cold(x))\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If Gary is not round and Gary is not big then Gary is cold.\nFOL: ((-Round(gary) & -Big(gary)) -> Cold(gary))\nTEXT: Dave is rough.\nFOL: Rough(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: Kind(dave)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Gary is rough.\nFOL: Rough(gary)\nTEXT: All nice things are big.\nFOL: all x. (Nice(x) -> Big(x))\nTEXT: If Gary is nice then Gary is rough.\nFOL: (Nice(gary) -> Rough(gary))\nTEXT: Red things are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If something is nice and not red then it is cold.\nFOL: all x. ((Nice(x) & -Red(x)) -> Cold(x))\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If Gary is not round and Gary is not big then Gary is cold.\nFOL: (-Round(gary) & -Big(gary) -> Cold(gary))\nTEXT: Dave is rough.\nFOL: Rough(dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 33,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: Kind(bob)\nTEXT: He is also very cold and blue.\nFOL: Cold(he) & Blue(he)\nTEXT: Gary who is young and nice is also quite big and feels green.\nFOL: exists x. (Young(x) & Nice(x) & Gary(x) & Big(x) & Green(x))\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: exists x. (Young(x) & Cold(x) & Harry(x))\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> Nice(x))\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: all x. (Red(x) & Round(x) & Kind(x) -> ColdManner(x))\nTEXT: Someone being nice, even when they are cold without a doubt means that they are round about the middle.\nFOL: all x. (Nice(x) & Cold(x) -> RoundAboutMiddle(x))\nTEXT: Nice people with blue and rough skin are very young and cannot be trusted with responsibility.\nFOL: all x. (Nice(x) & Blue(x) & RoughSkin(x) -> Young(x) & -TrustedWithResponsibility(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Kind(x) -> Red(x))\nTEXT: A young person that is blue and green is also assumed to be nice.\nFOL: all x. (Blue(x) & Green(x) & Young(x) -> Nice(x))\nTEXT: People who are young are also blue.\nFOL: all x. (Young(x) -> Blue(x))\nTEXT: Alan is round.\nFOL: Round(alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: Kind(bob)\nTEXT: He is also very cold and blue.\nFOL: Cold(he) & Blue(he)\nTEXT: Gary who is young and nice is also quite big and feels green.\nFOL: exists x. (Young(x) & Nice(x) & Gary(x) & Big(x) & Green(x))\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: exists x. (Young(x) & Cold(x) & Harry(x))\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> Nice(x))\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: all x. (Red(x) & Round(x) & Kind(x) -> ColdManner(x))\nTEXT: Someone being nice, even when they are cold without a doubt means that they are round about the middle.\nFOL: all x. (Nice(x) & Cold(x) -> RoundAboutMiddle(x))\nTEXT: Nice people with blue and rough skin are very young and cannot be trusted with responsibility.\nFOL: all x. (Nice(x) & Blue(x) & RoughSkin(x) -> Young(x) & -TrustedWithResponsibility(x))\nTEXT: Most young kind people tend to be red too.\nFOL: most x. (Young(x) & Kind(x) -> Red(x))\nTEXT: A young person that is blue and green is also assumed to be nice.\nFOL: all x. (Blue(x) & Green(x) & Young(x) -> Nice(x))\nTEXT: People who are young are also blue.\nFOL: all x. (Young(x) -> Blue(x))\nTEXT: Alan is round.\nFOL: Round(alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: Kind(bob)\nTEXT: He is also very cold and blue.\nFOL: Cold(he) & Blue(he)\nTEXT: Gary who is young and nice is also quite big and feels green.\nFOL: exists x. (Young(x) & Nice(x) & Gary(x) & Big(x) & Green(x))\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: exists x. (Young(x) & Cold(x) & Harry(x))\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> Nice(x))\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: all x. (Red(x) & Round(x) & Kind(x) -> ColdManner(x))\nTEXT: Someone being nice, even when they are cold without a doubt means that they are round about the middle.\nFOL: all x. (Nice(x) & Cold(x) -> RoundAboutMiddle(x))\nTEXT: Nice people with blue and rough skin are very young and cannot be trusted with responsibility.\nFOL: all x. (Nice(x) & Blue(x) & RoughSkin(x) -> Young(x) & CannotBeTrusted(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Kind(x) -> Red(x))\nTEXT: A young person that is blue and green is also assumed to be nice.\nFOL: all x. (Blue(x) & Green(x) & Young(x) -> Nice(x))\nTEXT: People who are young are also blue.\nFOL: all x. (Young(x) -> Blue(x))\nTEXT: Alan is round.\nFOL: Round(alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: Kind(bob)\nTEXT: He is also very cold and blue.\nFOL: Cold(he) & Blue(he)\nTEXT: Gary who is young and nice is also quite big and feels green.\nFOL: Young(gary) & Nice(gary) & Big(gary) & Green(gary)\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: Young(harry) & Cold(harry)\nTEXT: A person who is cold and blue is nice.\nFOL: Cold(x) & Blue(x) -> Nice(x)\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: Red(x) & Round(x) & Kind(x) -> ColdManner(x)\nTEXT: Someone being nice, even when they are cold without a doubt means that they are round about the middle.\nFOL: Nice(x) & Cold(x) -> RoundAboutMiddle(x)\nTEXT: Nice people with blue and rough skin are very young and cannot be trusted with responsibility.\nFOL: Nice(x) & Blue(x) & RoughSkin(x) -> Young(x) & -TrustedWithResponsibility(x)\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Kind(x) -> Red(x))\nTEXT: A young person that is blue and green is also assumed to be nice.\nFOL: Blue(x) & Green(x) & Young(x) -> Nice(x)\nTEXT: People who are young are also blue.\nFOL: Young(x) -> Blue(x)\nTEXT: Alan is round.\nFOL: Round(alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: Kind(bob)\nTEXT: He is also very cold and blue.\nFOL: Cold(he) & Blue(he)\nTEXT: Gary who is young and nice is also quite big and feels green.\nFOL: Young(gary) & Nice(gary) & Big(gary) & Green(gary)\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: Young(harry) & Cold(harry)\nTEXT: A person who is cold and blue is nice.\nFOL: Cold(x) & Blue(x) -> Nice(x)\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: Red(x) & Round(x) & Kind(x) -> ColdManner(x)\nTEXT: Someone being nice, even when they are cold without a doubt means that they are round about the middle.\nFOL: Nice(x) & Cold(x) -> RoundAboutMiddle(x)\nTEXT: Nice people with blue and rough skin are very young and cannot be trusted with responsibility.\nFOL: Nice(x) & Blue(x) & RoughSkin(x) -> Young(x) & -TrustedWithResponsibility(x)\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Kind(x) -> Red(x))\nTEXT: A young person that is blue and green is also assumed to be nice.\nFOL: Young(x) & Blue(x) & Green(x) -> Nice(x)\nTEXT: People who are young are also blue.\nFOL: Young(x) -> Blue(x)\nTEXT: Alan is round.\nFOL: Round(alan)\n</EVALUATE>"
  ]
 },
 {
  "index": 34,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle is green.\nFOL: Green(baldEagle)\nTEXT: The bald eagle is kind.\nFOL: Kind(baldEagle)\nTEXT: The bald eagle is rough.\nFOL: Rough(baldEagle)\nTEXT: The bald eagle is young.\nFOL: Young(baldEagle)\nTEXT: The bald eagle needs the dog.\nFOL: Needs(baldEagle, dog)\nTEXT: The bald eagle sees the dog.\nFOL: Sees(baldEagle, dog)\nTEXT: The bald eagle visits the dog.\nFOL: Visits(baldEagle, dog)\nTEXT: The dog is cold.\nFOL: Cold(dog)\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The dog is kind.\nFOL: Kind(dog)\nTEXT: The dog is rough.\nFOL: Rough(dog)\nTEXT: The dog is young.\nFOL: Young(dog)\nTEXT: The dog needs the bald eagle.\nFOL: Needs(dog, baldEagle)\nTEXT: The dog sees the bald eagle.\nFOL: Sees(dog, baldEagle)\nTEXT: The dog visits the bald eagle.\nFOL: Visits(dog, baldEagle)\nTEXT: If something is kind then it sees the bald eagle.\nFOL: all x. (Kind(x) -> Sees(x, baldEagle))\nTEXT: If something visits the bald eagle and the bald eagle sees the dog then the bald eagle visits the dog.\nFOL: (Visits(x, baldEagle) & Sees(baldEagle, dog)) -> Visits(baldEagle, dog)\nTEXT: If something visits the bald eagle and the bald eagle is green then the bald eagle is rough.\nFOL: (Visits(x, baldEagle) & Green(baldEagle)) -> Rough(baldEagle)\nTEXT: The dog is cold.\nFOL: Cold(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle is green.\nFOL: Green(baldEagle)\nTEXT: The bald eagle is kind.\nFOL: Kind(baldEagle)\nTEXT: The bald eagle is rough.\nFOL: Rough(baldEagle)\nTEXT: The bald eagle is young.\nFOL: Young(baldEagle)\nTEXT: The bald eagle needs the dog.\nFOL: Needs(baldEagle, dog)\nTEXT: The bald eagle sees the dog.\nFOL: Sees(baldEagle, dog)\nTEXT: The bald eagle visits the dog.\nFOL: Visits(baldEagle, dog)\nTEXT: The dog is cold.\nFOL: Cold(dog)\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The dog is kind.\nFOL: Kind(dog)\nTEXT: The dog is rough.\nFOL: Rough(dog)\nTEXT: The dog is young.\nFOL: Young(dog)\nTEXT: The dog needs the bald eagle.\nFOL: Needs(dog, baldEagle)\nTEXT: The dog sees the bald eagle.\nFOL: Sees(dog, baldEagle)\nTEXT: The dog visits the bald eagle.\nFOL: Visits(dog, baldEagle)\nTEXT: If something is kind then it sees the bald eagle.\nFOL: all x. (Kind(x) -> Sees(x, baldEagle))\nTEXT: If something visits the bald eagle and the bald eagle sees the dog then the bald eagle visits the dog.\nFOL: all x. ((Visits(x, baldEagle) & Sees(baldEagle, dog)) -> Visits(baldEagle, dog))\nTEXT: If something visits the bald eagle and the bald eagle is green then the bald eagle is rough.\nFOL: all x. ((Visits(x, baldEagle) & Green(baldEagle)) -> Rough(baldEagle))\nTEXT: The dog is cold.\nFOL: Cold(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle is green.\nFOL: Green(baldEagle)\nTEXT: The bald eagle is kind.\nFOL: Kind(baldEagle)\nTEXT: The bald eagle is rough.\nFOL: Rough(baldEagle)\nTEXT: The bald eagle is young.\nFOL: Young(baldEagle)\nTEXT: The bald eagle needs the dog.\nFOL: Needs(baldEagle, dog)\nTEXT: The bald eagle sees the dog.\nFOL: Sees(baldEagle, dog)\nTEXT: The bald eagle visits the dog.\nFOL: Visits(baldEagle, dog)\nTEXT: The dog is cold.\nFOL: Cold(dog)\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The dog is kind.\nFOL: Kind(dog)\nTEXT: The dog is rough.\nFOL: Rough(dog)\nTEXT: The dog is young.\nFOL: Young(dog)\nTEXT: The dog needs the bald eagle.\nFOL: Needs(dog, baldEagle)\nTEXT: The dog sees the bald eagle.\nFOL: Sees(dog, baldEagle)\nTEXT: The dog visits the bald eagle.\nFOL: Visits(dog, baldEagle)\nTEXT: If something is kind then it sees the bald eagle.\nFOL: all x. (Kind(x) -> Sees(x, baldEagle))\nTEXT: If something visits the bald eagle and the bald eagle sees the dog then the bald eagle visits the dog.\nFOL: all x. (Visits(x, baldEagle) & Sees(baldEagle, dog) -> Visits(baldEagle, dog))\nTEXT: If something visits the bald eagle and the bald eagle is green then the bald eagle is rough.\nFOL: all x. (Visits(x, baldEagle) & Green(baldEagle) -> Rough(baldEagle))\nTEXT: The dog is cold.\nFOL: Cold(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle is green.\nFOL: Green(baldEagle)\nTEXT: The bald eagle is kind.\nFOL: Kind(baldEagle)\nTEXT: The bald eagle is rough.\nFOL: Rough(baldEagle)\nTEXT: The bald eagle is young.\nFOL: Young(baldEagle)\nTEXT: The bald eagle needs the dog.\nFOL: Needs(baldEagle, dog)\nTEXT: The bald eagle sees the dog.\nFOL: Sees(baldEagle, dog)\nTEXT: The bald eagle visits the dog.\nFOL: Visits(baldEagle, dog)\nTEXT: The dog is cold.\nFOL: Cold(dog)\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The dog is kind.\nFOL: Kind(dog)\nTEXT: The dog is rough.\nFOL: Rough(dog)\nTEXT: The dog is young.\nFOL: Young(dog)\nTEXT: The dog needs the bald eagle.\nFOL: Needs(dog, baldEagle)\nTEXT: The dog sees the bald eagle.\nFOL: Sees(dog, baldEagle)\nTEXT: The dog visits the bald eagle.\nFOL: Visits(dog, baldEagle)\nTEXT: If something is kind then it sees the bald eagle.\nFOL: all x. (Kind(x) -> Sees(x, baldEagle))\nTEXT: If something visits the bald eagle and the bald eagle sees the dog then the bald eagle visits the dog.\nFOL: Visits(x, baldEagle) & Sees(baldEagle, dog) -> Visits(baldEagle, dog)\nTEXT: If something visits the bald eagle and the bald eagle is green then the bald eagle is rough.\nFOL: Visits(x, baldEagle) & Green(baldEagle) -> Rough(baldEagle)\nTEXT: The dog is cold.\nFOL: Cold(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle is green.\nFOL: Green(baldEagle)\nTEXT: The bald eagle is kind.\nFOL: Kind(baldEagle)\nTEXT: The bald eagle is rough.\nFOL: Rough(baldEagle)\nTEXT: The bald eagle is young.\nFOL: Young(baldEagle)\nTEXT: The bald eagle needs the dog.\nFOL: Needs(baldEagle, dog)\nTEXT: The bald eagle sees the dog.\nFOL: Sees(baldEagle, dog)\nTEXT: The bald eagle visits the dog.\nFOL: Visits(baldEagle, dog)\nTEXT: The dog is cold.\nFOL: Cold(dog)\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The dog is kind.\nFOL: Kind(dog)\nTEXT: The dog is rough.\nFOL: Rough(dog)\nTEXT: The dog is young.\nFOL: Young(dog)\nTEXT: The dog needs the bald eagle.\nFOL: Needs(dog, baldEagle)\nTEXT: The dog sees the bald eagle.\nFOL: Sees(dog, baldEagle)\nTEXT: The dog visits the bald eagle.\nFOL: Visits(dog, baldEagle)\nTEXT: If something is kind then it sees the bald eagle.\nFOL: all x. (Kind(x) -> Sees(x, baldEagle))\nTEXT: If something visits the bald eagle and the bald eagle sees the dog then the bald eagle visits the dog.\nFOL: (Visits(x, baldEagle) & Sees(baldEagle, dog) -> Visits(baldEagle, dog))\nTEXT: If something visits the bald eagle and the bald eagle is green then the bald eagle is rough.\nFOL: (Visits(x, baldEagle) & Green(baldEagle) -> Rough(baldEagle))\nTEXT: The dog is cold.\nFOL: Cold(dog)\n</EVALUATE>"
  ]
 },
 {
  "index": 35,
  "responses": [
   "<EVALUATE>\nTEXT: Charlie is white.\nFOL: White(charlie)\nTEXT: Erin is white.\nFOL: White(erin)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: If someone is round and not rough then they are big.\nFOL: all x. (Round(x) & -Rough(x) -> Big(x))\nTEXT: If someone is round then they are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If someone is young and not nice then they are white.\nFOL: all x. (Young(x) & -Nice(x) -> White(x))\nTEXT: If someone is big and not smart then they are white.\nFOL: all x. (Big(x) & -Smart(x) -> White(x))\nTEXT: If Gary is nice and Gary is not rough then Gary is young.\nFOL: (Nice(gary) & -Rough(gary)) -> Young(gary)\nTEXT: Smart, young people are round.\nFOL: all x. (Smart(x) & Young(x) -> Round(x))\nTEXT: If Fiona is nice then Fiona is young.\nFOL: Nice(fiona) -> Young(fiona)\nTEXT: If Erin is round and Erin is nice then Erin is white.\nFOL: (Round(erin) & Nice(erin)) -> White(erin)\nTEXT: Fiona is big.\nFOL: Big(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is white.\nFOL: White(charlie)\nTEXT: Erin is white.\nFOL: White(erin)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: If someone is round and not rough then they are big.\nFOL: all x. ((Round(x) & -Rough(x)) -> Big(x))\nTEXT: If someone is round then they are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If someone is young and not nice then they are white.\nFOL: all x. (Young(x) & -Nice(x) -> White(x))\nTEXT: If someone is big and not smart then they are white.\nFOL: all x. (Big(x) & -Smart(x) -> White(x))\nTEXT: If Gary is nice and Gary is not rough then Gary is young.\nFOL: (Nice(gary) & -Rough(gary)) -> Young(gary)\nTEXT: Smart, young people are round.\nFOL: all x. ((Smart(x) & Young(x)) -> Round(x))\nTEXT: If Fiona is nice then Fiona is young.\nFOL: Nice(fiona) -> Young(fiona)\nTEXT: If Erin is round and Erin is nice then Erin is white.\nFOL: (Round(erin) & Nice(erin)) -> White(erin)\nTEXT: Fiona is big.\nFOL: Big(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is white.\nFOL: White(charlie)\nTEXT: Erin is white.\nFOL: White(erin)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: If someone is round and not rough then they are big.\nFOL: all x. (Round(x) & -Rough(x) -> Big(x))\nTEXT: If someone is round then they are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If someone is young and not nice then they are white.\nFOL: all x. (Young(x) & -Nice(x) -> White(x))\nTEXT: If someone is big and not smart then they are white.\nFOL: all x. (Big(x) & -Smart(x) -> White(x))\nTEXT: If Gary is nice and Gary is not rough then Gary is young.\nFOL: (Nice(gary) & -Rough(gary)) -> Young(gary)\nTEXT: Smart, young people are round.\nFOL: all x. ((Smart(x) & Young(x)) -> Round(x))\nTEXT: If Fiona is nice then Fiona is young.\nFOL: Nice(fiona) -> Young(fiona)\nTEXT: If Erin is round and Erin is nice then Erin is white.\nFOL: (Round(erin) & Nice(erin)) -> White(erin)\nTEXT: Fiona is big.\nFOL: Big(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is white.\nFOL: White(charlie)\nTEXT: Erin is white.\nFOL: White(erin)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: If someone is round and not rough then they are big.\nFOL: all x. ((Round(x) & -Rough(x)) -> Big(x))\nTEXT: If someone is round then they are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If someone is young and not nice then they are white.\nFOL: all x. (Young(x) & -Nice(x) -> White(x))\nTEXT: If someone is big and not smart then they are white.\nFOL: all x. (Big(x) & -Smart(x) -> White(x))\nTEXT: If Gary is nice and Gary is not rough then Gary is young.\nFOL: (Nice(gary) & -Rough(gary)) -> Young(gary)\nTEXT: Smart, young people are round.\nFOL: all x. (Smart(x) & Young(x) -> Round(x))\nTEXT: If Fiona is nice then Fiona is young.\nFOL: Nice(fiona) -> Young(fiona)\nTEXT: If Erin is round and Erin is nice then Erin is white.\nFOL: (Round(erin) & Nice(erin)) -> White(erin)\nTEXT: Fiona is big.\nFOL: Big(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is white.\nFOL: White(charlie)\nTEXT: Erin is white.\nFOL: White(erin)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: If someone is round and not rough then they are big.\nFOL: all x. (Round(x) & -Rough(x) -> Big(x))\nTEXT: If someone is round then they are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If someone is young and not nice then they are white.\nFOL: all x. (Young(x) & -Nice(x) -> White(x))\nTEXT: If someone is big and not smart then they are white.\nFOL: all x. (Big(x) & -Smart(x) -> White(x))\nTEXT: If Gary is nice and Gary is not rough then Gary is young.\nFOL: (Nice(gary) & -Rough(gary)) -> Young(gary)\nTEXT: Smart, young people are round.\nFOL: all x. (Smart(x) & Young(x) -> Round(x))\nTEXT: If Fiona is nice then Fiona is young.\nFOL: Nice(fiona) -> Young(fiona)\nTEXT: If Erin is round and Erin is nice then Erin is white.\nFOL: (Round(erin) & Nice(erin)) -> White(erin)\nTEXT: Fiona is big.\nFOL: Big(fiona)\n</EVALUATE>"
  ]
 },
 {
  "index": 36,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: Kind(dave)\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: Kind(dave)\nTEXT: All smart, quiet people are kind.\nFOL: all x. ((Smart(x) & Quiet(x)) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: kind(dave)\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -kind(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: kind(dave)\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: Kind(dave)\nTEXT: All smart, quiet people are kind.\nFOL: all x. (SmartQuiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 37,
  "responses": [
   "<EVALUATE>\nTEXT: That guy Dave sure is nice.\nFOL: Nice(dave)\nTEXT: Eric is a kind person and he is also often cold.\nFOL: Kind(eric) & Cold(eric)\nTEXT: Harry is shaped big and round like a balloon.\nFOL: Big(harry) & Round(harry)\nTEXT: His red color shows how kind he is.\nFOL: Red(harry) -> Kind(harry)\nTEXT: Cold people who are big hearted and kind are usually very round.\nFOL: all x. (Cold(x) & BigHearted(x) & Kind(x) -> Round(x))\nTEXT: A kind person who is down in the dumps and blue tends to have a rough side.\nFOL: Kind(x) & DownInTheDumps(x) & Blue(x) -> Rough(x)\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> LittleGreen(x))\nTEXT: Young and rough people will most certainly be red.\nFOL: Young(x) & Rough(x) -> Red(x)\nTEXT: A person that is red, rough and kind often feels cold.\nFOL: Red(x) & Rough(x) & Kind(x) -> Cold(x)\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: Big(x) & Red(x) -> Blue(x)\nTEXT: If you ever meet someone who is both green and blue while being nice, then they'll be big, too.\nFOL: (Green(x) & Blue(x) & Nice(x)) -> Big(x)\nTEXT: Harry is rough.\nFOL: Rough(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Dave sure is nice.\nFOL: Nice(dave)\nTEXT: Eric is a kind person and he is also often cold.\nFOL: Kind(eric) & Cold(eric)\nTEXT: Harry is shaped big and round like a balloon.\nFOL: Big(harry) & Round(harry)\nTEXT: His red color shows how kind he is.\nFOL: Red(harry) -> Kind(harry)\nTEXT: Cold people who are big hearted and kind are usually very round.\nFOL: all x. (Cold(x) & BigHearted(x) & Kind(x) -> Round(x))\nTEXT: A kind person who is down in the dumps and blue tends to have a rough side.\nFOL: Kind(x) & DownInTheDumps(x) & Blue(x) -> Rough(x)\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> LittleGreen(x))\nTEXT: Young and rough people will most certainly be red.\nFOL: all x. (Young(x) & Rough(x) -> Red(x))\nTEXT: A person that is red, rough and kind often feels cold.\nFOL: Red(x) & Rough(x) & Kind(x) -> Cold(x)\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: Big(x) & Red(x) -> Blue(x)\nTEXT: If you ever meet someone who is both green and blue while being nice, then they'll be big, too.\nFOL: (Green(x) & Blue(x) & Nice(x)) -> Big(x)\nTEXT: Harry is rough.\nFOL: Rough(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Dave sure is nice.\nFOL: Nice(dave)\nTEXT: Eric is a kind person and he is also often cold.\nFOL: Kind(eric) & Cold(eric)\nTEXT: Harry is shaped big and round like a balloon.\nFOL: Big(harry) & Round(harry)\nTEXT: His red color shows how kind he is.\nFOL: Red(harry) -> Kind(harry)\nTEXT: Cold people who are big hearted and kind are usually very round.\nFOL: all x. (Cold(x) & BigHearted(x) & Kind(x) -> Round(x))\nTEXT: A kind person who is down in the dumps and blue tends to have a rough side.\nFOL: all x. (Kind(x) & DownInTheDumps(x) & Blue(x) -> Rough(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> LittleGreen(x))\nTEXT: Young and rough people will most certainly be red.\nFOL: all x. (Young(x) & Rough(x) -> Red(x))\nTEXT: A person that is red, rough and kind often feels cold.\nFOL: (Red(x) & Rough(x) & Kind(x)) -> Cold(x)\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: Big(x) & Red(x) -> Blue(x)\nTEXT: If you ever meet someone who is both green and blue while being nice, then they'll be big, too.\nFOL: (Green(x) & Blue(x) & Nice(x)) -> Big(x)\nTEXT: Harry is rough.\nFOL: Rough(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Dave sure is nice.\nFOL: Nice(dave)\nTEXT: Eric is a kind person and he is also often cold.\nFOL: Kind(eric) & Cold(eric)\nTEXT: Harry is shaped big and round like a balloon.\nFOL: Big(harry) & Round(harry)\nTEXT: His red color shows how kind he is.\nFOL: Red(harry) -> Kind(harry)\nTEXT: Cold people who are big hearted and kind are usually very round.\nFOL: all x. (Cold(x) & BigHearted(x) & Kind(x) -> Round(x))\nTEXT: A kind person who is down in the dumps and blue tends to have a rough side.\nFOL: all x. (Kind(x) & DownInTheDumps(x) & Blue(x) -> Rough(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> LittleGreen(x))\nTEXT: Young and rough people will most certainly be red.\nFOL: all x. (Young(x) & Rough(x) -> Red(x))\nTEXT: A person that is red, rough and kind often feels cold.\nFOL: all x. (Red(x) & Rough(x) & Kind(x) -> Cold(x))\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: all x. (VeryBig(x) & Red(x) -> Blue(x))\nTEXT: If you ever meet someone who is both green and blue while being nice, then they'll be big, too.\nFOL: (Green(x) & Blue(x) & Nice(x)) -> Big(x)\nTEXT: Harry is rough.\nFOL: Rough(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Dave sure is nice.\nFOL: Nice(dave)\nTEXT: Eric is a kind person and he is also often cold.\nFOL: Kind(eric) & Cold(eric)\nTEXT: Harry is shaped big and round like a balloon.\nFOL: Big(harry) & Round(harry)\nTEXT: His red color shows how kind he is.\nFOL: Red(harry) -> Kind(harry)\nTEXT: Cold people who are big hearted and kind are usually very round.\nFOL: all x. ((Cold(x) & BigHearted(x) & Kind(x)) -> Round(x))\nTEXT: A kind person who is down in the dumps and blue tends to have a rough side.\nFOL: all x. (Kind(x) & DownInTheDumps(x) & Blue(x) -> Rough(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> LittleGreen(x))\nTEXT: Young and rough people will most certainly be red.\nFOL: all x. (Young(x) & Rough(x) -> Red(x))\nTEXT: A person that is red, rough and kind often feels cold.\nFOL: all x. ((Red(x) & Rough(x) & Kind(x)) -> Cold(x))\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: all x. (VeryBig(x) & Red(x) -> Blue(x))\nTEXT: If you ever meet someone who is both green and blue while being nice, then they'll be big, too.\nFOL: (Green(x) & Blue(x) & Nice(x)) -> Big(x)\nTEXT: Harry is rough.\nFOL: Rough(harry)\n</EVALUATE>"
  ]
 },
 {
  "index": 38,
  "responses": [
   "<EVALUATE>\nTEXT: For being so young, Bob is nice.\nFOL: Young(bob) -> Nice(bob)\nTEXT: He has rough, red hands from working all day and it makes him feel blue.\nFOL: RoughHands(he) & RedHands(he) & Blue(he)\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: (Round(dave) & Big(dave)) -> Kind(dave)\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(fred) | Kind(fred)\nTEXT: For being so cold, it's good Gary can remain nice.\nFOL: Cold(gary) -> Nice(gary)\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: (Big(x) & Round(x) & Kind(x)) -> Naive(x)\nTEXT: Kind red people are green on the inside.\nFOL: (Kind(x) & Red(x)) -> Green(x)\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: (Nice(x) & Young(x) & Red(x)) -> Green(x)\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: (Green(x) & Naive(x)) -> (Red(x) & RoughSkin(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: (Green(x) & Naive(x)) -> Round(x)\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: (Nice(x) & Blue(x) & Round(x)) -> Kind(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: (Cold(x) & Round(x)) -> Red(x)\nTEXT: Dave is kind.\nFOL: Kind(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: For being so young, Bob is nice.\nFOL: Young(bob) -> Nice(bob)\nTEXT: He has rough, red hands from working all day and it makes him feel blue.\nFOL: RoughHands(x) & RedHands(x) & Blue(x)\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: Round(dave) & Big(dave) -> Kind(dave)\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(fred) | Kind(fred)\nTEXT: For being so cold, it's good Gary can remain nice.\nFOL: Cold(gary) -> Nice(gary)\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: Big(x) & Round(x) & Kind(x) -> Naive(x)\nTEXT: Kind red people are green on the inside.\nFOL: Kind(x) & Red(x) -> GreenInside(x)\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: Nice(x) & Young(x) & Red(x) -> Green(x)\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: Green(x) & Naive(x) -> (Red(x) & RoughSkin(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: Green(x) & Naive(x) -> Round(x)\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: Nice(x) & Blue(x) & Round(x) -> Kind(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: Cold(x) & Round(x) -> Red(x)\nTEXT: Dave is kind.\nFOL: Kind(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: For being so young, Bob is nice.\nFOL: Young(bob) -> Nice(bob)\nTEXT: He has rough, red hands from working all day and it makes him feel blue.\nFOL: RoughHands(he) & RedHands(he) & Blue(he)\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: (Round(dave) & Big(dave)) -> Kind(dave)\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(fred) | Kind(fred)\nTEXT: For being so cold, it's good Gary can remain nice.\nFOL: Cold(gary) -> Nice(gary)\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: (Big(x) & Round(x) & Kind(x)) -> Naive(x)\nTEXT: Kind red people are green on the inside.\nFOL: Kind(x) & Red(x) -> GreenInside(x)\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: (Nice(x) & Young(x) & Red(x)) -> Green(x)\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: (Green(x) & Naive(x)) -> (Red(x) & RoughSkin(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: (Green(x) & Naive(x)) -> Round(x)\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: (Nice(x) & Blue(x) & Round(x)) -> Kind(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: (Cold(x) & Round(x)) -> Red(x)\nTEXT: Dave is kind.\nFOL: Kind(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: For being so young, Bob is nice.\nFOL: Young(bob) -> Nice(bob)\nTEXT: He has rough, red hands from working all day and it makes him feel blue.\nFOL: RoughHands(he) & RedHands(he) & Blue(he)\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: (Round(dave) & Big(dave)) -> Kind(dave)\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(fred) | Kind(fred)\nTEXT: For being so cold, it's good Gary can remain nice.\nFOL: Cold(gary) -> Nice(gary)\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: (Big(x) & Round(x) & Kind(x)) -> Naive(x)\nTEXT: Kind red people are green on the inside.\nFOL: (Kind(x) & Red(x)) -> Green(x)\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: (Nice(x) & Young(x) & Red(x)) -> Green(x)\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: (Green(x) & Naive(x)) -> (Red(x) & RoughSkin(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: Green(x) -> Round(x)\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: (Nice(x) & Blue(x) & Round(x)) -> Kind(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: (Cold(x) & Round(x)) -> Red(x)\nTEXT: Dave is kind.\nFOL: Kind(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: For being so young, Bob is nice.\nFOL: Young(bob) -> Nice(bob)\nTEXT: He has rough, red hands from working all day and it makes him feel blue.\nFOL: RoughHands(he) & RedHands(he) & Blue(he)\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: (Round(dave) & Big(dave)) -> Kind(dave)\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(fred) | Kind(fred)\nTEXT: For being so cold, it's good Gary can remain nice.\nFOL: Cold(gary) -> Nice(gary)\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: (Big(x) & Round(x) & Kind(x)) -> Naive(x)\nTEXT: Kind red people are green on the inside.\nFOL: all x. (Kind(x) & Red(x) -> Green(x))\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: all x. (Nice(x) & Young(x) & Red(x) -> Green(x))\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: (Green(x) & Naive(x)) -> (Red(x) & RoughSkin(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: (Green(x) & Naive(x)) -> Round(x)\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: (Nice(x) & Blue(x) & Round(x)) -> Kind(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: (Cold(x) & Round(x)) -> Red(x)\nTEXT: Dave is kind.\nFOL: Kind(dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 39,
  "responses": [
   "<EVALUATE>\nTEXT: The dog chases the rabbit.\nFOL: Chases(dog, rabbit)\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: If something eats the dog and the dog chases the rabbit then it likes the tiger.\nFOL: all x. ((Eats(x, dog) & Chases(dog, rabbit)) -> Likes(x, tiger))\nTEXT: If something eats the dog and the dog is nice then the dog is green.\nFOL: all x. ((Eats(x, dog) & Nice(dog)) -> Green(dog))\nTEXT: If something chases the rabbit then the rabbit is blue.\nFOL: all x. (Chases(x, rabbit) -> Blue(rabbit))\nTEXT: If something likes the dog and it likes the rabbit then the dog is blue.\nFOL: all x. ((Likes(x, dog) & Likes(x, rabbit)) -> Blue(dog))\nTEXT: If something is blue then it is cold.\nFOL: all x. (Blue(x) -> Cold(x))\nTEXT: If something chases the tiger then the tiger is blue.\nFOL: all x. (Chases(x, tiger) -> Blue(tiger))\nTEXT: If something is big then it likes the tiger.\nFOL: all x. (Big(x) -> Likes(x, tiger))\nTEXT: If something is cold and blue then it chases the tiger.\nFOL: all x. ((Cold(x) & Blue(x)) -> Chases(x, tiger))\nTEXT: The dog is nice.\nFOL: Nice(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog chases the rabbit.\nFOL: Chases(dog, rabbit)\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: If something eats the dog and the dog chases the rabbit then it likes the tiger.\nFOL: all x. (Eats(x, dog) & Chases(dog, rabbit) -> Likes(x, tiger))\nTEXT: If something eats the dog and the dog is nice then the dog is green.\nFOL: all x. (Eats(x, dog) & Nice(dog) -> Green(dog))\nTEXT: If something chases the rabbit then the rabbit is blue.\nFOL: all x. (Chases(x, rabbit) -> Blue(rabbit))\nTEXT: If something likes the dog and it likes the rabbit then the dog is blue.\nFOL: all x. ((Likes(x, dog) & Likes(x, rabbit)) -> Blue(dog))\nTEXT: If something is blue then it is cold.\nFOL: all x. (Blue(x) -> Cold(x))\nTEXT: If something chases the tiger then the tiger is blue.\nFOL: all x. (Chases(x, tiger) -> Blue(tiger))\nTEXT: If something is big then it likes the tiger.\nFOL: all x. (Big(x) -> Likes(x, tiger))\nTEXT: If something is cold and blue then it chases the tiger.\nFOL: all x. ((Cold(x) & Blue(x)) -> Chases(x, tiger))\nTEXT: The dog is nice.\nFOL: Nice(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog chases the rabbit.\nFOL: Chases(dog, rabbit)\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: If something eats the dog and the dog chases the rabbit then it likes the tiger.\nFOL: all x. (Eats(x, dog) & Chases(dog, rabbit) -> Likes(x, tiger))\nTEXT: If something eats the dog and the dog is nice then the dog is green.\nFOL: all x. (Eats(x, dog) & Nice(dog) -> Green(dog))\nTEXT: If something chases the rabbit then the rabbit is blue.\nFOL: all x. (Chases(x, rabbit) -> Blue(rabbit))\nTEXT: If something likes the dog and it likes the rabbit then the dog is blue.\nFOL: all x. (Likes(x, dog) & Likes(x, rabbit) -> Blue(dog))\nTEXT: If something is blue then it is cold.\nFOL: all x. (Blue(x) -> Cold(x))\nTEXT: If something chases the tiger then the tiger is blue.\nFOL: all x. (Chases(x, tiger) -> Blue(tiger))\nTEXT: If something is big then it likes the tiger.\nFOL: all x. (Big(x) -> Likes(x, tiger))\nTEXT: If something is cold and blue then it chases the tiger.\nFOL: all x. ((Cold(x) & Blue(x)) -> Chases(x, tiger))\nTEXT: The dog is nice.\nFOL: Nice(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog chases the rabbit.\nFOL: Chases(dog, rabbit)\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: If something eats the dog and the dog chases the rabbit then it likes the tiger.\nFOL: all x. (Eats(x, dog) & Chases(dog, rabbit) -> Likes(x, tiger))\nTEXT: If something eats the dog and the dog is nice then the dog is green.\nFOL: all x. (Eats(x, dog) & Nice(dog) -> Green(dog))\nTEXT: If something chases the rabbit then the rabbit is blue.\nFOL: all x. (Chases(x, rabbit) -> Blue(rabbit))\nTEXT: If something likes the dog and it likes the rabbit then the dog is blue.\nFOL: all x. (Likes(x, dog) & Likes(x, rabbit) -> Blue(dog))\nTEXT: If something is blue then it is cold.\nFOL: all x. (Blue(x) -> Cold(x))\nTEXT: If something chases the tiger then the tiger is blue.\nFOL: all x. (Chases(x, tiger) -> Blue(tiger))\nTEXT: If something is big then it likes the tiger.\nFOL: all x. (Big(x) -> Likes(x, tiger))\nTEXT: If something is cold and blue then it chases the tiger.\nFOL: all x. (Cold(x) & Blue(x) -> Chases(x, tiger))\nTEXT: The dog is nice.\nFOL: Nice(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog chases the rabbit.\nFOL: Chases(dog, rabbit)\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: If something eats the dog and the dog chases the rabbit then it likes the tiger.\nFOL: (Eats(x, dog) & Chases(dog, rabbit)) -> Likes(x, tiger)\nTEXT: If something eats the dog and the dog is nice then the dog is green.\nFOL: (Eats(x, dog) & Nice(dog)) -> Green(dog)\nTEXT: If something chases the rabbit then the rabbit is blue.\nFOL: Chases(x, rabbit) -> Blue(rabbit)\nTEXT: If something likes the dog and it likes the rabbit then the dog is blue.\nFOL: (Likes(x, dog) & Likes(x, rabbit)) -> Blue(dog)\nTEXT: If something is blue then it is cold.\nFOL: Blue(x) -> Cold(x)\nTEXT: If something chases the tiger then the tiger is blue.\nFOL: Chases(x, tiger) -> Blue(tiger)\nTEXT: If something is big then it likes the tiger.\nFOL: Big(x) -> Likes(x, tiger)\nTEXT: If something is cold and blue then it chases the tiger.\nFOL: (Cold(x) & Blue(x)) -> Chases(x, tiger)\nTEXT: The dog is nice.\nFOL: Nice(dog)\n</EVALUATE>"
  ]
 },
 {
  "index": 40,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(bob)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Erin is cold.\nFOL: Cold(erin)\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is nice.\nFOL: Nice(erin)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: Erin is rough.\nFOL: Rough(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Gary is furry.\nFOL: Furry(gary)\nTEXT: Gary is green.\nFOL: Green(gary)\nTEXT: Gary is nice.\nFOL: Nice(gary)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\nTEXT: If something is red and rough then it is nice.\nFOL: all x. ((Red(x) & Rough(x)) -> Nice(x))\nTEXT: All cold things are nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\nTEXT: If something is nice then it is rough.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: All green, red things are rough.\nFOL: all x. ((Green(x) & Red(x)) -> Rough(x))\nTEXT: If Erin is nice then Erin is red.\nFOL: Nice(erin) -> Red(erin)\nTEXT: Nice, cold things are red.\nFOL: all x. ((Nice(x) & Cold(x)) -> Red(x))\nTEXT: Bob is green.\nFOL: Green(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(bob)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Erin is cold.\nFOL: Cold(erin)\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is nice.\nFOL: Nice(erin)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: Erin is rough.\nFOL: Rough(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Gary is furry.\nFOL: Furry(gary)\nTEXT: Gary is green.\nFOL: Green(gary)\nTEXT: Gary is nice.\nFOL: Nice(gary)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\nTEXT: If something is red and rough then it is nice.\nFOL: all x. ((Red(x) & Rough(x)) -> Nice(x))\nTEXT: All cold things are nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\nTEXT: If something is nice then it is rough.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: All green, red things are rough.\nFOL: all x. ((Green(x) & Red(x)) -> Rough(x))\nTEXT: If Erin is nice then Erin is red.\nFOL: Nice(erin) -> Red(erin)\nTEXT: Nice, cold things are red.\nFOL: all x. ((Nice(x) & Cold(x)) -> Red(x))\nTEXT: Bob is green.\nFOL: Green(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(bob)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Erin is cold.\nFOL: Cold(erin)\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is nice.\nFOL: Nice(erin)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: Erin is rough.\nFOL: Rough(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Gary is furry.\nFOL: Furry(gary)\nTEXT: Gary is green.\nFOL: Green(gary)\nTEXT: Gary is nice.\nFOL: Nice(gary)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Gary is rough.\nFOL: Rough(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: Rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\nTEXT: If something is red and rough then it is nice.\nFOL: all x. ((Red(x) & Rough(x)) -> Nice(x))\nTEXT: All cold things are nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\nTEXT: If something is nice then it is rough.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: All green, red things are rough.\nFOL: all x. ((Green(x) & Red(x)) -> Rough(x))\nTEXT: If Erin is nice then Erin is red.\nFOL: Nice(erin) -> Red(erin)\nTEXT: Nice, cold things are red.\nFOL: all x. ((Nice(x) & Cold(x)) -> Red(x))\nTEXT: Bob is green.\nFOL: Green(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(bob)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Erin is cold.\nFOL: Cold(erin)\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is nice.\nFOL: Nice(erin)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: Erin is rough.\nFOL: Rough(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Gary is furry.\nFOL: Furry(gary)\nTEXT: Gary is green.\nFOL: Green(gary)\nTEXT: Gary is nice.\nFOL: Nice(gary)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Gary is rough.\nFOL: Rough(gary)\nTEXT: Rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\nTEXT: If something is red and rough then it is nice.\nFOL: all x. ((Red(x) & Rough(x)) -> Nice(x))\nTEXT: All cold things are nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\nTEXT: If something is nice then it is rough.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: All green, red things are rough.\nFOL: all x. ((Green(x) & Red(x)) -> Rough(x))\nTEXT: If Erin is nice then Erin is red.\nFOL: Nice(erin) -> Red(erin)\nTEXT: Nice, cold things are red.\nFOL: all x. ((Nice(x) & Cold(x)) -> Red(x))\nTEXT: Bob is green.\nFOL: Green(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(bob)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Erin is cold.\nFOL: Cold(erin)\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is nice.\nFOL: Nice(erin)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: Erin is rough.\nFOL: Rough(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Gary is furry.\nFOL: Furry(gary)\nTEXT: Gary is green.\nFOL: Green(gary)\nTEXT: Gary is nice.\nFOL: Nice(gary)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Gary is rough.\nFOL: Rough(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: Rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\nTEXT: If something is red and rough then it is nice.\nFOL: all x. ((Red(x) & Rough(x)) -> Nice(x))\nTEXT: All cold things are nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\nTEXT: If something is nice then it is rough.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: All green, red things are rough.\nFOL: all x. ((Green(x) & Red(x)) -> Rough(x))\nTEXT: If Erin is nice then Erin is red.\nFOL: Nice(erin) -> Red(erin)\nTEXT: Nice, cold things are red.\nFOL: all x. ((Nice(x) & Cold(x)) -> Red(x))\nTEXT: Bob is green.\nFOL: Green(bob)\n</EVALUATE>"
  ]
 },
 {
  "index": 41,
  "responses": [
   "<EVALUATE>\nTEXT: The mouse chases the tiger.\nFOL: Chases(mouse, tiger)\nTEXT: The squirrel is young.\nFOL: Young(squirrel)\nTEXT: The tiger likes the mouse.\nFOL: Likes(tiger, mouse)\nTEXT: If someone is young then they see the tiger.\nFOL: all x. (Young(x) -> See(x, tiger))\nTEXT: If someone likes the squirrel and the squirrel is not green then the squirrel sees the mouse.\nFOL: all x. ((Likes(x, squirrel) & -Green(squirrel)) -> See(squirrel, mouse))\nTEXT: If someone sees the squirrel then they are blue.\nFOL: all x. (See(x, squirrel) -> Blue(x))\nTEXT: If the tiger chases the mouse then the tiger likes the squirrel.\nFOL: Chases(tiger, mouse) -> Likes(tiger, squirrel)\nTEXT: If the tiger is not green then the tiger likes the squirrel.\nFOL: -Green(tiger) -> Likes(tiger, squirrel)\nTEXT: If someone sees the tiger then they are red.\nFOL: all x. (See(x, tiger) -> Red(x))\nTEXT: If someone chases the tiger then they are young.\nFOL: all x. (Chases(x, tiger) -> Young(x))\nTEXT: If the tiger does not like the squirrel then the squirrel likes the tiger.\nFOL: -Likes(tiger, squirrel) -> Likes(squirrel, tiger)\nTEXT: The tiger does not see the tiger.\nFOL: -See(tiger, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse chases the tiger.\nFOL: Chases(mouse, tiger)\nTEXT: The squirrel is young.\nFOL: Young(squirrel)\nTEXT: The tiger likes the mouse.\nFOL: Likes(tiger, mouse)\nTEXT: If someone is young then they see the tiger.\nFOL: all x. (Young(x) -> Sees(x, tiger))\nTEXT: If someone likes the squirrel and the squirrel is not green then the squirrel sees the mouse.\nFOL: all x. ((Likes(x, squirrel) & -Green(squirrel)) -> Sees(squirrel, mouse))\nTEXT: If someone sees the squirrel then they are blue.\nFOL: all x. (Sees(x, squirrel) -> Blue(x))\nTEXT: If the tiger chases the mouse then the tiger likes the squirrel.\nFOL: Chases(tiger, mouse) -> Likes(tiger, squirrel)\nTEXT: If the tiger is not green then the tiger likes the squirrel.\nFOL: -Green(tiger) -> Likes(tiger, squirrel)\nTEXT: If someone sees the tiger then they are red.\nFOL: all x. (Sees(x, tiger) -> Red(x))\nTEXT: If someone chases the tiger then they are young.\nFOL: all x. (Chases(x, tiger) -> Young(x))\nTEXT: If the tiger does not like the squirrel then the squirrel likes the tiger.\nFOL: -Likes(tiger, squirrel) -> Likes(squirrel, tiger)\nTEXT: The tiger does not see the tiger.\nFOL: -Sees(tiger, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse chases the tiger.\nFOL: Chase(mouse, tiger)\nTEXT: The squirrel is young.\nFOL: Young(squirrel)\nTEXT: The tiger likes the mouse.\nFOL: Likes(tiger, mouse)\nTEXT: If someone is young then they see the tiger.\nFOL: all x. (Young(x) -> See(x, tiger))\nTEXT: If someone likes the squirrel and the squirrel is not green then the squirrel sees the mouse.\nFOL: all x. ((Likes(x, squirrel) & -Green(squirrel)) -> See(squirrel, mouse))\nTEXT: If someone sees the squirrel then they are blue.\nFOL: all x. (See(x, squirrel) -> Blue(x))\nTEXT: If the tiger chases the mouse then the tiger likes the squirrel.\nFOL: Chase(tiger, mouse) -> Likes(tiger, squirrel)\nTEXT: If the tiger is not green then the tiger likes the squirrel.\nFOL: -Green(tiger) -> Likes(tiger, squirrel)\nTEXT: If someone sees the tiger then they are red.\nFOL: all x. (See(x, tiger) -> Red(x))\nTEXT: If someone chases the tiger then they are young.\nFOL: all x. (Chase(x, tiger) -> Young(x))\nTEXT: If the tiger does not like the squirrel then the squirrel likes the tiger.\nFOL: -Likes(tiger, squirrel) -> Likes(squirrel, tiger)\nTEXT: The tiger does not see the tiger.\nFOL: -See(tiger, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse chases the tiger.\nFOL: Chases(mouse, tiger)\nTEXT: The squirrel is young.\nFOL: Young(squirrel)\nTEXT: The tiger likes the mouse.\nFOL: Likes(tiger, mouse)\nTEXT: If someone is young then they see the tiger.\nFOL: all x. (Young(x) -> See(x, tiger))\nTEXT: If someone likes the squirrel and the squirrel is not green then the squirrel sees the mouse.\nFOL: all x. ((Likes(x, squirrel) & -Green(squirrel)) -> See(squirrel, mouse))\nTEXT: If someone sees the squirrel then they are blue.\nFOL: all x. (See(x, squirrel) -> Blue(x))\nTEXT: If the tiger chases the mouse then the tiger likes the squirrel.\nFOL: (Chases(tiger, mouse) -> Likes(tiger, squirrel))\nTEXT: If the tiger is not green then the tiger likes the squirrel.\nFOL: (-Green(tiger) -> Likes(tiger, squirrel))\nTEXT: If someone sees the tiger then they are red.\nFOL: all x. (See(x, tiger) -> Red(x))\nTEXT: If someone chases the tiger then they are young.\nFOL: all x. (Chases(x, tiger) -> Young(x))\nTEXT: If the tiger does not like the squirrel then the squirrel likes the tiger.\nFOL: (-Likes(tiger, squirrel) -> Likes(squirrel, tiger))\nTEXT: The tiger does not see the tiger.\nFOL: -See(tiger, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse chases the tiger.\nFOL: Chases(mouse, tiger)\nTEXT: The squirrel is young.\nFOL: Young(squirrel)\nTEXT: The tiger likes the mouse.\nFOL: Likes(tiger, mouse)\nTEXT: If someone is young then they see the tiger.\nFOL: all x. (Young(x) -> See(x, tiger))\nTEXT: If someone likes the squirrel and the squirrel is not green then the squirrel sees the mouse.\nFOL: all x. ((Likes(x, squirrel) & -Green(squirrel)) -> See(squirrel, mouse))\nTEXT: If someone sees the squirrel then they are blue.\nFOL: all x. (See(x, squirrel) -> Blue(x))\nTEXT: If the tiger chases the mouse then the tiger likes the squirrel.\nFOL: (Chases(tiger, mouse) -> Likes(tiger, squirrel))\nTEXT: If the tiger is not green then the tiger likes the squirrel.\nFOL: -Green(tiger) -> Likes(tiger, squirrel)\nTEXT: If someone sees the tiger then they are red.\nFOL: all x. (See(x, tiger) -> Red(x))\nTEXT: If someone chases the tiger then they are young.\nFOL: all x. (Chases(x, tiger) -> Young(x))\nTEXT: If the tiger does not like the squirrel then the squirrel likes the tiger.\nFOL: -Likes(tiger, squirrel) -> Likes(squirrel, tiger)\nTEXT: The tiger does not see the tiger.\nFOL: -See(tiger, tiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 42,
  "responses": [
   "<EVALUATE>\nTEXT: The dog is cold.\nFOL: Cold(dog)\nTEXT: The dog is red.\nFOL: Red(dog)\nTEXT: The dog likes the lion.\nFOL: Likes(dog, lion)\nTEXT: The dog sees the lion.\nFOL: Sees(dog, lion)\nTEXT: The lion is cold.\nFOL: Cold(lion)\nTEXT: The lion is kind.\nFOL: Kind(lion)\nTEXT: The lion is young.\nFOL: Young(lion)\nTEXT: The lion likes the dog.\nFOL: Likes(lion, dog)\nTEXT: The lion sees the dog.\nFOL: Sees(lion, dog)\nTEXT: The lion visits the dog.\nFOL: Visits(lion, dog)\nTEXT: If someone sees the dog then they are rough.\nFOL: all x. (Sees(x, dog) -> Rough(x))\nTEXT: If someone is rough then they like the lion.\nFOL: all x. (Rough(x) -> Likes(x, lion))\nTEXT: If someone likes the lion and the lion likes the dog then they visit the lion.\nFOL: all x. ((Likes(x, lion) & Likes(lion, dog)) -> Visits(x, lion))\nTEXT: The dog is not rough.\nFOL: -Rough(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is cold.\nFOL: Cold(dog)\nTEXT: The dog is red.\nFOL: Red(dog)\nTEXT: The dog likes the lion.\nFOL: Likes(dog, lion)\nTEXT: The dog sees the lion.\nFOL: Sees(dog, lion)\nTEXT: The lion is cold.\nFOL: Cold(lion)\nTEXT: The lion is kind.\nFOL: Kind(lion)\nTEXT: The lion is young.\nFOL: Young(lion)\nTEXT: The lion likes the dog.\nFOL: Likes(lion, dog)\nTEXT: The lion sees the dog.\nFOL: Sees(lion, dog)\nTEXT: The lion visits the dog.\nFOL: Visits(lion, dog)\nTEXT: If someone sees the dog then they are rough.\nFOL: all x. (Sees(x, dog) -> Rough(x))\nTEXT: If someone is rough then they like the lion.\nFOL: all x. (Rough(x) -> Likes(x, lion))\nTEXT: If someone likes the lion and the lion likes the dog then they visit the lion.\nFOL: all x. (Likes(x, lion) & Likes(lion, dog) -> Visits(x, lion))\nTEXT: The dog is not rough.\nFOL: -Rough(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is cold.\nFOL: Cold(dog)\n\nTEXT: The dog is red.\nFOL: Red(dog)\n\nTEXT: The dog likes the lion.\nFOL: Likes(dog, lion)\n\nTEXT: The dog sees the lion.\nFOL: Sees(dog, lion)\n\nTEXT: The lion is cold.\nFOL: Cold(lion)\n\nTEXT: The lion is kind.\nFOL: Kind(lion)\n\nTEXT: The lion is young.\nFOL: Young(lion)\n\nTEXT: The lion likes the dog.\nFOL: Likes(lion, dog)\n\nTEXT: The lion sees the dog.\nFOL: Sees(lion, dog)\n\nTEXT: The lion visits the dog.\nFOL: Visits(lion, dog)\n\nTEXT: If someone sees the dog then they are rough.\nFOL: all x. (Sees(x, dog) -> Rough(x))\n\nTEXT: If someone is rough then they like the lion.\nFOL: all x. (Rough(x) -> Likes(x, lion))\n\nTEXT: If someone likes the lion and the lion likes the dog then they visit the lion.\nFOL: all x. ((Likes(x, lion) & Likes(lion, dog)) -> Visits(x, lion))\n\nTEXT: The dog is not rough.\nFOL: -Rough(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is cold.\nFOL: Cold(dog)\nTEXT: The dog is red.\nFOL: Red(dog)\nTEXT: The dog likes the lion.\nFOL: likes(dog, lion)\nTEXT: The dog sees the lion.\nFOL: sees(dog, lion)\nTEXT: The lion is cold.\nFOL: Cold(lion)\nTEXT: The lion is kind.\nFOL: Kind(lion)\nTEXT: The lion is young.\nFOL: Young(lion)\nTEXT: The lion likes the dog.\nFOL: likes(lion, dog)\nTEXT: The lion sees the dog.\nFOL: sees(lion, dog)\nTEXT: The lion visits the dog.\nFOL: visits(lion, dog)\nTEXT: If someone sees the dog then they are rough.\nFOL: all x. (sees(x, dog) -> Rough(x))\nTEXT: If someone is rough then they like the lion.\nFOL: all x. (Rough(x) -> likes(x, lion))\nTEXT: If someone likes the lion and the lion likes the dog then they visit the lion.\nFOL: all x. ((likes(x, lion) & likes(lion, dog)) -> visits(x, lion))\nTEXT: The dog is not rough.\nFOL: -Rough(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is cold.\nFOL: Cold(dog)\nTEXT: The dog is red.\nFOL: Red(dog)\nTEXT: The dog likes the lion.\nFOL: Likes(dog, lion)\nTEXT: The dog sees the lion.\nFOL: Sees(dog, lion)\nTEXT: The lion is cold.\nFOL: Cold(lion)\nTEXT: The lion is kind.\nFOL: Kind(lion)\nTEXT: The lion is young.\nFOL: Young(lion)\nTEXT: The lion likes the dog.\nFOL: Likes(lion, dog)\nTEXT: The lion sees the dog.\nFOL: Sees(lion, dog)\nTEXT: The lion visits the dog.\nFOL: Visits(lion, dog)\nTEXT: If someone sees the dog then they are rough.\nFOL: Sees(x, dog) -> Rough(x)\nTEXT: If someone is rough then they like the lion.\nFOL: Rough(x) -> Likes(x, lion)\nTEXT: If someone likes the lion and the lion likes the dog then they visit the lion.\nFOL: (Likes(x, lion) & Likes(lion, dog)) -> Visits(x, lion)\nTEXT: The dog is not rough.\nFOL: -Rough(dog)\n</EVALUATE>"
  ]
 },
 {
  "index": 43,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is young.\nFOL: Young(anne)\nTEXT: Bob is not cold.\nFOL: -Cold(bob)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\nTEXT: If Anne is round then Anne is not young.\nFOL: Round(anne) -> -Young(anne)\nTEXT: Young things are not white.\nFOL: all x. (Young(x) -> -White(x))\nTEXT: If Erin is quiet then Erin is cold.\nFOL: Quiet(erin) -> Cold(erin)\nTEXT: If something is white then it is not smart.\nFOL: all x. (White(x) -> -Smart(x))\nTEXT: If something is quiet and cold then it is round.\nFOL: all x. ((Quiet(x) & Cold(x)) -> Round(x))\nTEXT: All white things are not round.\nFOL: all x. (White(x) -> -Round(x))\nTEXT: If Erin is round then Erin is young.\nFOL: Round(erin) -> Young(erin)\nTEXT: If something is round and not nice then it is not quiet.\nFOL: all x. ((Round(x) & -Nice(x)) -> -Quiet(x))\nTEXT: Erin is round.\nFOL: Round(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is young.\nFOL: Young(anne)\nTEXT: Bob is not cold.\nFOL: -Cold(bob)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\nTEXT: If Anne is round then Anne is not young.\nFOL: Round(anne) -> -Young(anne)\nTEXT: Young things are not white.\nFOL: all x. (Young(x) -> -White(x))\nTEXT: If Erin is quiet then Erin is cold.\nFOL: Quiet(erin) -> Cold(erin)\nTEXT: If something is white then it is not smart.\nFOL: all x. (White(x) -> -Smart(x))\nTEXT: If something is quiet and cold then it is round.\nFOL: (Quiet(x) & Cold(x)) -> Round(x)\nTEXT: All white things are not round.\nFOL: all x. (White(x) -> -Round(x))\nTEXT: If Erin is round then Erin is young.\nFOL: Round(erin) -> Young(erin)\nTEXT: If something is round and not nice then it is not quiet.\nFOL: (Round(x) & -Nice(x)) -> -Quiet(x)\nTEXT: Erin is round.\nFOL: Round(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is young.\nFOL: Young(anne)\nTEXT: Bob is not cold.\nFOL: -Cold(bob)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\nTEXT: If Anne is round then Anne is not young.\nFOL: (Round(anne) -> -Young(anne))\nTEXT: Young things are not white.\nFOL: all x. (Young(x) -> -White(x))\nTEXT: If Erin is quiet then Erin is cold.\nFOL: (Quiet(erin) -> Cold(erin))\nTEXT: If something is white then it is not smart.\nFOL: all x. (White(x) -> -Smart(x))\nTEXT: If something is quiet and cold then it is round.\nFOL: all x. ((Quiet(x) & Cold(x)) -> Round(x))\nTEXT: All white things are not round.\nFOL: all x. (White(x) -> -Round(x))\nTEXT: If Erin is round then Erin is young.\nFOL: (Round(erin) -> Young(erin))\nTEXT: If something is round and not nice then it is not quiet.\nFOL: all x. ((Round(x) & -Nice(x)) -> -Quiet(x))\nTEXT: Erin is round.\nFOL: Round(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is young.\nFOL: Young(anne)\nTEXT: Bob is not cold.\nFOL: -Cold(bob)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\nTEXT: If Anne is round then Anne is not young.\nFOL: Round(anne) -> -Young(anne)\nTEXT: Young things are not white.\nFOL: all x. (Young(x) -> -White(x))\nTEXT: If Erin is quiet then Erin is cold.\nFOL: Quiet(erin) -> Cold(erin)\nTEXT: If something is white then it is not smart.\nFOL: all x. (White(x) -> -Smart(x))\nTEXT: If something is quiet and cold then it is round.\nFOL: all x. (Quiet(x) & Cold(x) -> Round(x))\nTEXT: All white things are not round.\nFOL: all x. (White(x) -> -Round(x))\nTEXT: If Erin is round then Erin is young.\nFOL: Round(erin) -> Young(erin)\nTEXT: If something is round and not nice then it is not quiet.\nFOL: all x. ((Round(x) & -Nice(x)) -> -Quiet(x))\nTEXT: Erin is round.\nFOL: Round(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is young.\nFOL: Young(anne)\nTEXT: Bob is not cold.\nFOL: -Cold(bob)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\nTEXT: If Anne is round then Anne is not young.\nFOL: (Round(anne) -> -Young(anne))\nTEXT: Young things are not white.\nFOL: all x. (Young(x) -> -White(x))\nTEXT: If Erin is quiet then Erin is cold.\nFOL: (Quiet(erin) -> Cold(erin))\nTEXT: If something is white then it is not smart.\nFOL: all x. (White(x) -> -Smart(x))\nTEXT: If something is quiet and cold then it is round.\nFOL: all x. (Quiet(x) & Cold(x) -> Round(x))\nTEXT: All white things are not round.\nFOL: all x. (White(x) -> -Round(x))\nTEXT: If Erin is round then Erin is young.\nFOL: (Round(erin) -> Young(erin))\nTEXT: If something is round and not nice then it is not quiet.\nFOL: all x. ((Round(x) & -Nice(x)) -> -Quiet(x))\nTEXT: Erin is round.\nFOL: Round(erin)\n</EVALUATE>"
  ]
 },
 {
  "index": 44,
  "responses": [
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x. (Young(x) & Cold(x) -> Alan(x))\nTEXT: Charlie is kind and nice and looks green.\nFOL: Kind(charlie) & Nice(charlie) & Green(charlie)\nTEXT: Fred may be round, but he is also kind.\nFOL: (Round(fred) & -Kind(fred)) | (Round(fred) & Kind(fred))\nTEXT: Harry seems to be round.\nFOL: Round(harry)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & (Nice(x) & -Red(x)) | (-Nice(x) & Red(x)))\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: all x. (Young(x) & Cold(x) & Green(x) -> Nice(x))\nTEXT: People who are young and blue are also red.\nFOL: all x. (Young(x) & Blue(x) -> Red(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Big(x) & Rough(x) & Cold(x) -> Red(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (YoungAtHeart(x) & Young(x) -> Round(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Young(x) & RedHands(x) -> Rough(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & ColdBehavior(x) -> Blue(x))\nTEXT: Harry is round.\nFOL: Round(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x. (Young(x) & Cold(x) -> Alan(x))\nTEXT: Charlie is kind and nice and looks green.\nFOL: Kind(charlie) & Nice(charlie) & Green(charlie)\nTEXT: Fred may be round, but he is also kind.\nFOL: (Round(fred) & -Kind(fred)) | (Round(fred) & Kind(fred))\nTEXT: Harry seems to be round.\nFOL: Round(harry)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & (Nice(x) & -Red(x)) | (-Nice(x) & Red(x)))\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: all x. (Young(x) & Cold(x) & Green(x) -> Nice(x))\nTEXT: People who are young and blue are also red.\nFOL: all x. (Young(x) & Blue(x) -> Red(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Big(x) & Rough(x) & Cold(x) -> Red(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (Young(x) -> Round(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Young(x) & Red(x) -> Rough(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & Cold(x) -> Blue(x))\nTEXT: Harry is round.\nFOL: Round(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x. (Young(x) & Cold(x) -> Alan(x))\nTEXT: Charlie is kind and nice and looks green.\nFOL: Kind(charlie) & Nice(charlie) & Green(charlie)\nTEXT: Fred may be round, but he is also kind.\nFOL: (Round(fred) | -Round(fred)) & Kind(fred)\nTEXT: Harry seems to be round.\nFOL: Round(harry)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & (Nice(x) & -Red(x)) | (-Nice(x) & Red(x)))\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: all x. (Young(x) & Cold(x) & GreenWithEnvy(x) -> Nice(x))\nTEXT: People who are young and blue are also red.\nFOL: all x. (Young(x) & Blue(x) -> Red(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Big(x) & Rough(x) & Cold(x) -> Red(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (YoungAtHeart(x) & Young(x) -> Round(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Young(x) & RedHands(x) -> Rough(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & ColdBehavior(x) -> Blue(x))\nTEXT: Harry is round.\nFOL: Round(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x. (Young(x) & Cold(x) -> Alan(x))\nTEXT: Charlie is kind and nice and looks green.\nFOL: Kind(charlie) & Nice(charlie) & Green(charlie)\nTEXT: Fred may be round, but he is also kind.\nFOL: (Round(fred) | -Round(fred)) & Kind(fred)\nTEXT: Harry seems to be round.\nFOL: Round(harry)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & (Nice(x) & -Red(x)) | (-Nice(x) & Red(x)))\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: all x. (Young(x) & Cold(x) & GreenWithEnvy(x) -> Nice(x))\nTEXT: People who are young and blue are also red.\nFOL: all x. (Young(x) & Blue(x) -> Red(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Big(x) & Rough(x) & Cold(x) -> Red(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (YoungAtHeart(x) & Young(x) -> VeryRound(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Young(x) & RedHands(x) -> RoughAroundEdges(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & ColdBehavior(x) -> Blue(x))\nTEXT: Harry is round.\nFOL: Round(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x. (Young(x) & Cold(x) -> Alan(x))\nTEXT: Charlie is kind and nice and looks green.\nFOL: Kind(charlie) & Nice(charlie) & Green(charlie)\nTEXT: Fred may be round, but he is also kind.\nFOL: (Round(fred) & -Kind(fred)) | (Round(fred) & Kind(fred))\nTEXT: Harry seems to be round.\nFOL: Round(harry)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & (Nice(x) & -Red(x)) | (-Nice(x) & Red(x)))\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: all x. (Young(x) & Cold(x) & Green(x) -> Nice(x))\nTEXT: People who are young and blue are also red.\nFOL: all x. (Young(x) & Blue(x) -> Red(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Big(x) & Rough(x) & Cold(x) -> Red(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: exists x. (YoungAtHeart(x) & Young(x) -> Round(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Young(x) & RedHands(x) -> Rough(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & ColdBehavior(x) -> Blue(x))\nTEXT: Harry is round.\nFOL: Round(harry)\n</EVALUATE>"
  ]
 },
 {
  "index": 45,
  "responses": [
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(alan)\nTEXT: That guy Bob sure is nice.\nFOL: Nice(bob)\nTEXT: Charlie is green and cold too.\nFOL: Green(charlie) & Cold(charlie)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: Green(fred) & Blue(fred)\nTEXT: If a kind person is green and a bit blue then they are also nice.\nFOL: all x. (Kind(x) & Green(x) & Blue(x) -> Nice(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & (Nice(x) | Red(x)))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) -> Big(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: all x. (Blue(x) & Red(x) & Nice(x) -> Young(x))\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: all x. (Cold(x) & Rough(x) & Red(x) -> Kind(x))\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) -> Red(x))\nTEXT: Bob is not kind.\nFOL: -Kind(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(alan)\nTEXT: That guy Bob sure is nice.\nFOL: Nice(bob)\nTEXT: Charlie is green and cold too.\nFOL: Green(charlie) & Cold(charlie)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: Green(fred) & Cold(fred) & Blue(fred)\nTEXT: If a kind person is green and a bit blue then they are also nice.\nFOL: all x. (Kind(x) & Green(x) & Blue(x) -> Nice(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & (Nice(x) | Red(x)))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) -> Big(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: all x. (Blue(x) & Red(x) & Nice(x) -> Young(x))\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: all x. (Cold(x) & Rough(x) & Red(x) -> Kind(x))\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) -> Red(x))\nTEXT: Bob is not kind.\nFOL: -Kind(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(alan)\nTEXT: That guy Bob sure is nice.\nFOL: Nice(bob)\nTEXT: Charlie is green and cold too.\nFOL: Green(charlie) & Cold(charlie)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: Green(fred) & Blue(fred)\nTEXT: If a kind person is green and a bit blue then they are also nice.\nFOL: (Kind(x) & Green(x) & Blue(x)) -> Nice(x)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & (Nice(x) | Red(x)))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) -> Big(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: (Blue(x) & Red(x) & Nice(x)) -> Young(x)\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: (Cold(x) & Rough(x) & Red(x)) -> Kind(x)\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. ((Green(x) & Round(x) & Cold(x)) -> Red(x))\nTEXT: Bob is not kind.\nFOL: -Kind(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(alan)\nTEXT: That guy Bob sure is nice.\nFOL: Nice(bob)\nTEXT: Charlie is green and cold too.\nFOL: Green(charlie) & Cold(charlie)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: Green(fred) & Blue(fred)\nTEXT: If a kind person is green and a bit blue then they are also nice.\nFOL: (Kind(x) & Green(x) & Blue(x)) -> Nice(x)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & (Nice(x) | Red(x)))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) -> Big(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: (Blue(x) & Red(x) & Nice(x)) -> Young(x)\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: (Cold(x) & Rough(x) & Red(x)) -> Kind(x)\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) -> Red(x))\nTEXT: Bob is not kind.\nFOL: -Kind(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(alan)\nTEXT: That guy Bob sure is nice.\nFOL: Nice(bob)\nTEXT: Charlie is green and cold too.\nFOL: Green(charlie) & Cold(charlie)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: Green(fred) & Cold(fred) & Blue(fred)\nTEXT: If a kind person is green and a bit blue then they are also nice.\nFOL: (Kind(x) & Green(x) & Blue(x)) -> Nice(x)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & (Nice(x) | Red(x)))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) -> Big(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: (Blue(x) & Red(x) & Nice(x)) -> Young(x)\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: (Cold(x) & Rough(x) & Red(x)) -> Kind(x)\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) -> Red(x))\nTEXT: Bob is not kind.\nFOL: -Kind(bob)\n</EVALUATE>"
  ]
 },
 {
  "index": 46,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is blue.\nFOL: Blue(baldEagle)\nTEXT: The bald eagle is not red.\nFOL: -Red(baldEagle)\nTEXT: The bald eagle likes the cat.\nFOL: Likes(baldEagle, cat)\nTEXT: The bald eagle likes the cow.\nFOL: Likes(baldEagle, cow)\nTEXT: The bald eagle does not visit the tiger.\nFOL: -Visits(baldEagle, tiger)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat is red.\nFOL: Red(cat)\nTEXT: The cat needs the tiger.\nFOL: Needs(cat, tiger)\nTEXT: The cow is big.\nFOL: Big(cow)\nTEXT: The tiger is big.\nFOL: Big(tiger)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger likes the cow.\nFOL: Likes(tiger, cow)\nTEXT: The tiger needs the bald eagle.\nFOL: Needs(tiger, baldEagle)\nTEXT: The tiger needs the cat.\nFOL: Needs(tiger, cat)\nTEXT: The tiger visits the bald eagle.\nFOL: Visits(tiger, baldEagle)\nTEXT: The tiger does not visit the cow.\nFOL: -Visits(tiger, cow)\nTEXT: If something likes the bald eagle then the bald eagle is not green.\nFOL: all x. (Likes(x, baldEagle) -> -Green(baldEagle))\nTEXT: Big things are green.\nFOL: all x. (Big(x) -> Green(x))\nTEXT: If something is blue then it needs the bald eagle.\nFOL: all x. (Blue(x) -> Needs(x, baldEagle))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Green(x) -> Needs(x, baldEagle))\nTEXT: If the cat likes the cow and the cat is not big then the cow needs the cat.\nFOL: (Likes(cat, cow) & -Big(cat)) -> Needs(cow, cat)\nTEXT: If something is red then it visits the cat.\nFOL: all x. (Red(x) -> Visits(x, cat))\nTEXT: If something visits the cat then the cat likes the bald eagle.\nFOL: all x. (Visits(x, cat) -> Likes(cat, baldEagle))\nTEXT: If something likes the bald eagle then it visits the bald eagle.\nFOL: all x. (Likes(x, baldEagle) -> Visits(x, baldEagle))\nTEXT: The tiger is green.\nFOL: Green(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is blue.\nFOL: Blue(baldEagle)\nTEXT: The bald eagle is not red.\nFOL: -Red(baldEagle)\nTEXT: The bald eagle likes the cat.\nFOL: Likes(baldEagle, cat)\nTEXT: The bald eagle likes the cow.\nFOL: Likes(baldEagle, cow)\nTEXT: The bald eagle does not visit the tiger.\nFOL: -Visit(baldEagle, tiger)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat is red.\nFOL: Red(cat)\nTEXT: The cat needs the tiger.\nFOL: Needs(cat, tiger)\nTEXT: The cow is big.\nFOL: Big(cow)\nTEXT: The tiger is big.\nFOL: Big(tiger)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger likes the cow.\nFOL: Likes(tiger, cow)\nTEXT: The tiger needs the bald eagle.\nFOL: Needs(tiger, baldEagle)\nTEXT: The tiger needs the cat.\nFOL: Needs(tiger, cat)\nTEXT: The tiger visits the bald eagle.\nFOL: Visit(tiger, baldEagle)\nTEXT: The tiger does not visit the cow.\nFOL: -Visit(tiger, cow)\nTEXT: If something likes the bald eagle then the bald eagle is not green.\nFOL: all x. (Likes(x, baldEagle) -> -Green(baldEagle))\nTEXT: Big things are green.\nFOL: all x. (Big(x) -> Green(x))\nTEXT: If something is blue then it needs the bald eagle.\nFOL: all x. (Blue(x) -> Needs(x, baldEagle))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Green(x) -> Needs(x, baldEagle))\nTEXT: If the cat likes the cow and the cat is not big then the cow needs the cat.\nFOL: (Likes(cat, cow) & -Big(cat)) -> Needs(cow, cat)\nTEXT: If something is red then it visits the cat.\nFOL: all x. (Red(x) -> Visit(x, cat))\nTEXT: If something visits the cat then the cat likes the bald eagle.\nFOL: all x. (Visit(x, cat) -> Likes(cat, baldEagle))\nTEXT: If something likes the bald eagle then it visits the bald eagle.\nFOL: all x. (Likes(x, baldEagle) -> Visit(x, baldEagle))\nTEXT: The tiger is green.\nFOL: Green(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is blue.\nFOL: BaldEagle(x) -> Blue(x)\nTEXT: The bald eagle is not red.\nFOL: -Red(baldEagle)\nTEXT: The bald eagle likes the cat.\nFOL: Likes(baldEagle, cat)\nTEXT: The bald eagle likes the cow.\nFOL: Likes(baldEagle, cow)\nTEXT: The bald eagle does not visit the tiger.\nFOL: -Visits(baldEagle, tiger)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat is red.\nFOL: Red(cat)\nTEXT: The cat needs the tiger.\nFOL: Needs(cat, tiger)\nTEXT: The cow is big.\nFOL: Big(cow)\nTEXT: The tiger is big.\nFOL: Big(tiger)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger likes the cow.\nFOL: Likes(tiger, cow)\nTEXT: The tiger needs the bald eagle.\nFOL: Needs(tiger, baldEagle)\nTEXT: The tiger needs the cat.\nFOL: Needs(tiger, cat)\nTEXT: The tiger visits the bald eagle.\nFOL: Visits(tiger, baldEagle)\nTEXT: The tiger does not visit the cow.\nFOL: -Visits(tiger, cow)\nTEXT: If something likes the bald eagle then the bald eagle is not green.\nFOL: all x. (Likes(x, baldEagle) -> -Green(baldEagle))\nTEXT: Big things are green.\nFOL: all x. (Big(x) -> Green(x))\nTEXT: If something is blue then it needs the bald eagle.\nFOL: all x. (Blue(x) -> Needs(x, baldEagle))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Green(x) -> Needs(x, baldEagle))\nTEXT: If the cat likes the cow and the cat is not big then the cow needs the cat.\nFOL: (Likes(cat, cow) & -Big(cat)) -> Needs(cow, cat)\nTEXT: If something is red then it visits the cat.\nFOL: all x. (Red(x) -> Visits(x, cat))\nTEXT: If something visits the cat then the cat likes the bald eagle.\nFOL: all x. (Visits(x, cat) -> Likes(cat, baldEagle))\nTEXT: If something likes the bald eagle then it visits the bald eagle.\nFOL: all x. (Likes(x, baldEagle) -> Visits(x, baldEagle))\nTEXT: The tiger is green.\nFOL: Green(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is blue.\nFOL: Blue(baldEagle)\nTEXT: The bald eagle is not red.\nFOL: -Red(baldEagle)\nTEXT: The bald eagle likes the cat.\nFOL: Likes(baldEagle, cat)\nTEXT: The bald eagle likes the cow.\nFOL: Likes(baldEagle, cow)\nTEXT: The bald eagle does not visit the tiger.\nFOL: -Visits(baldEagle, tiger)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat is red.\nFOL: Red(cat)\nTEXT: The cat needs the tiger.\nFOL: Needs(cat, tiger)\nTEXT: The cow is big.\nFOL: Big(cow)\nTEXT: The tiger is big.\nFOL: Big(tiger)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger likes the cow.\nFOL: Likes(tiger, cow)\nTEXT: The tiger needs the bald eagle.\nFOL: Needs(tiger, baldEagle)\nTEXT: The tiger needs the cat.\nFOL: Needs(tiger, cat)\nTEXT: The tiger visits the bald eagle.\nFOL: Visits(tiger, baldEagle)\nTEXT: The tiger does not visit the cow.\nFOL: -Visits(tiger, cow)\nTEXT: If something likes the bald eagle then the bald eagle is not green.\nFOL: all x. (Likes(x, baldEagle) -> -Green(baldEagle))\nTEXT: Big things are green.\nFOL: all x. (Big(x) -> Green(x))\nTEXT: If something is blue then it needs the bald eagle.\nFOL: all x. (Blue(x) -> Needs(x, baldEagle))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Green(x) -> Needs(x, baldEagle))\nTEXT: If the cat likes the cow and the cat is not big then the cow needs the cat.\nFOL: all x. ((Likes(cat, x) & -Big(cat)) -> Needs(x, cat))\nTEXT: If something is red then it visits the cat.\nFOL: all x. (Red(x) -> Visits(x, cat))\nTEXT: If something visits the cat then the cat likes the bald eagle.\nFOL: all x. (Visits(x, cat) -> Likes(cat, baldEagle))\nTEXT: If something likes the bald eagle then it visits the bald eagle.\nFOL: all x. (Likes(x, baldEagle) -> Visits(x, baldEagle))\nTEXT: The tiger is green.\nFOL: Green(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is blue.\nFOL: Blue(baldEagle)\nTEXT: The bald eagle is not red.\nFOL: -Red(baldEagle)\nTEXT: The bald eagle likes the cat.\nFOL: Likes(baldEagle, cat)\nTEXT: The bald eagle likes the cow.\nFOL: Likes(baldEagle, cow)\nTEXT: The bald eagle does not visit the tiger.\nFOL: -Visits(baldEagle, tiger)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat is red.\nFOL: Red(cat)\nTEXT: The cat needs the tiger.\nFOL: Needs(cat, tiger)\nTEXT: The cow is big.\nFOL: Big(cow)\nTEXT: The tiger is big.\nFOL: Big(tiger)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger likes the cow.\nFOL: Likes(tiger, cow)\nTEXT: The tiger needs the bald eagle.\nFOL: Needs(tiger, baldEagle)\nTEXT: The tiger needs the cat.\nFOL: Needs(tiger, cat)\nTEXT: The tiger visits the bald eagle.\nFOL: Visits(tiger, baldEagle)\nTEXT: The tiger does not visit the cow.\nFOL: -Visits(tiger, cow)\nTEXT: If something likes the bald eagle then the bald eagle is not green.\nFOL: all x. (Likes(x, baldEagle) -> -Green(baldEagle))\nTEXT: Big things are green.\nFOL: all x. (Big(x) -> Green(x))\nTEXT: If something is blue then it needs the bald eagle.\nFOL: all x. (Blue(x) -> Needs(x, baldEagle))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Green(x) -> Needs(x, baldEagle))\nTEXT: If the cat likes the cow and the cat is not big then the cow needs the cat.\nFOL: (Likes(cat, cow) & -Big(cat)) -> Needs(cow, cat)\nTEXT: If something is red then it visits the cat.\nFOL: all x. (Red(x) -> Visits(x, cat))\nTEXT: If something visits the cat then the cat likes the bald eagle.\nFOL: (Visits(x, cat) -> Likes(cat, baldEagle))\nTEXT: If something likes the bald eagle then it visits the bald eagle.\nFOL: all x. (Likes(x, baldEagle) -> Visits(x, baldEagle))\nTEXT: The tiger is green.\nFOL: Green(tiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 47,
  "responses": [
   "<EVALUATE>\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: If the tiger is blue then the tiger is big.\nFOL: Blue(tiger) -> Big(tiger)\nTEXT: If the tiger is big and the tiger is blue then the tiger is not round.\nFOL: (Big(tiger) & Blue(tiger)) -> -Round(tiger)\nTEXT: If the tiger is big then the tiger is blue.\nFOL: Big(tiger) -> Blue(tiger)\nTEXT: If the tiger is not round then the tiger is not nice.\nFOL: -Round(tiger) -> -Nice(tiger)\nTEXT: If the tiger is not round and the tiger is not big then the tiger is not nice.\nFOL: (-Round(tiger) & -Big(tiger)) -> -Nice(tiger)\nTEXT: If something is round and nice then it is not rough.\nFOL: (Round(x) & Nice(x)) -> -Rough(x)\nTEXT: The tiger is not blue.\nFOL: -Blue(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: If the tiger is blue then the tiger is big.\nFOL: (Blue(tiger) -> Big(tiger))\nTEXT: If the tiger is big and the tiger is blue then the tiger is not round.\nFOL: (Big(tiger) & Blue(tiger) -> -Round(tiger))\nTEXT: If the tiger is big then the tiger is blue.\nFOL: (Big(tiger) -> Blue(tiger))\nTEXT: If the tiger is not round then the tiger is not nice.\nFOL: (-Round(tiger) -> -Nice(tiger))\nTEXT: If the tiger is not round and the tiger is not big then the tiger is not nice.\nFOL: ((-Round(tiger) & -Big(tiger)) -> -Nice(tiger))\nTEXT: If something is round and nice then it is not rough.\nFOL: (Round(x) & Nice(x) -> -Rough(x))\nTEXT: The tiger is not blue.\nFOL: -Blue(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: If the tiger is blue then the tiger is big.\nFOL: Blue(tiger) -> Big(tiger)\nTEXT: If the tiger is big and the tiger is blue then the tiger is not round.\nFOL: Big(tiger) & Blue(tiger) -> -Round(tiger)\nTEXT: If the tiger is big then the tiger is blue.\nFOL: Big(tiger) -> Blue(tiger)\nTEXT: If the tiger is not round then the tiger is not nice.\nFOL: -Round(tiger) -> -Nice(tiger)\nTEXT: If the tiger is not round and the tiger is not big then the tiger is not nice.\nFOL: (-Round(tiger) & -Big(tiger)) -> -Nice(tiger)\nTEXT: If something is round and nice then it is not rough.\nFOL: Round(x) & Nice(x) -> -Rough(x)\nTEXT: The tiger is not blue.\nFOL: -Blue(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\n\nTEXT: If the tiger is blue then the tiger is big.\nFOL: Blue(tiger) -> Big(tiger)\n\nTEXT: If the tiger is big and the tiger is blue then the tiger is not round.\nFOL: (Big(tiger) & Blue(tiger)) -> -Round(tiger)\n\nTEXT: If the tiger is big then the tiger is blue.\nFOL: Big(tiger) -> Blue(tiger)\n\nTEXT: If the tiger is not round then the tiger is not nice.\nFOL: -Round(tiger) -> -Nice(tiger)\n\nTEXT: If the tiger is not round and the tiger is not big then the tiger is not nice.\nFOL: (-Round(tiger) & -Big(tiger)) -> -Nice(tiger)\n\nTEXT: If something is round and nice then it is not rough.\nFOL: (Round(x) & Nice(x)) -> -Rough(x)\n\nTEXT: The tiger is not blue.\nFOL: -Blue(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: If the tiger is blue then the tiger is big.\nFOL: Blue(tiger) -> Big(tiger)\nTEXT: If the tiger is big and the tiger is blue then the tiger is not round.\nFOL: Big(tiger) & Blue(tiger) -> -Round(tiger)\nTEXT: If the tiger is big then the tiger is blue.\nFOL: Big(tiger) -> Blue(tiger)\nTEXT: If the tiger is not round then the tiger is not nice.\nFOL: -Round(tiger) -> -Nice(tiger)\nTEXT: If the tiger is not round and the tiger is not big then the tiger is not nice.\nFOL: -Round(tiger) & -Big(tiger) -> -Nice(tiger)\nTEXT: If something is round and nice then it is not rough.\nFOL: Round(x) & Nice(x) -> -Rough(x)\nTEXT: The tiger is not blue.\nFOL: -Blue(tiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 48,
  "responses": [
   "<EVALUATE>\nTEXT: The cow eats the dog.\nFOL: Eats(cow, dog)\nTEXT: The cow eats the tiger.\nFOL: Eats(cow, tiger)\nTEXT: The cow is kind.\nFOL: Kind(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow likes the dog.\nFOL: Likes(cow, dog)\nTEXT: The cow needs the dog.\nFOL: Needs(cow, dog)\nTEXT: The dog likes the tiger.\nFOL: Likes(dog, tiger)\nTEXT: The dog needs the cow.\nFOL: Needs(dog, cow)\nTEXT: The dog needs the tiger.\nFOL: Needs(dog, tiger)\nTEXT: The tiger eats the cow.\nFOL: Eats(tiger, cow)\nTEXT: The tiger is kind.\nFOL: Kind(tiger)\nTEXT: The tiger is round.\nFOL: Round(tiger)\nTEXT: The tiger likes the cow.\nFOL: Likes(tiger, cow)\nTEXT: The tiger needs the cow.\nFOL: Needs(tiger, cow)\nTEXT: The tiger needs the dog.\nFOL: Needs(tiger, dog)\nTEXT: If someone likes the cow then the cow needs the tiger.\nFOL: all x. (Likes(x, cow) -> Needs(cow, tiger))\nTEXT: If someone is kind then they like the dog.\nFOL: all x. (Kind(x) -> Likes(x, dog))\nTEXT: If someone is round then they like the dog.\nFOL: all x. (Round(x) -> Likes(x, dog))\nTEXT: If the cow is not round then the cow is not rough.\nFOL: -Round(cow) -> -Rough(cow)\nTEXT: If the dog eats the cow and the dog likes the tiger then the tiger is red.\nFOL: (Eats(dog, cow) & Likes(dog, tiger)) -> Red(tiger)\nTEXT: If someone likes the cow then they are rough.\nFOL: all x. (Likes(x, cow) -> Rough(x))\nTEXT: If someone eats the cow and the cow needs the dog then the dog likes the cow.\nFOL: all x. ((Eats(x, cow) & Needs(cow, dog)) -> Likes(x, cow))\nTEXT: If someone likes the tiger and the tiger likes the dog then the dog eats the cow.\nFOL: all x. ((Likes(x, tiger) & Likes(tiger, dog)) -> Eats(dog, cow))\nTEXT: The cow does not like the cow.\nFOL: -Likes(cow, cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow eats the dog.\nFOL: Eats(cow, dog)\nTEXT: The cow eats the tiger.\nFOL: Eats(cow, tiger)\nTEXT: The cow is kind.\nFOL: Kind(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow likes the dog.\nFOL: Likes(cow, dog)\nTEXT: The cow needs the dog.\nFOL: Needs(cow, dog)\nTEXT: The dog likes the tiger.\nFOL: Likes(dog, tiger)\nTEXT: The dog needs the cow.\nFOL: Needs(dog, cow)\nTEXT: The dog needs the tiger.\nFOL: Needs(dog, tiger)\nTEXT: The tiger eats the cow.\nFOL: Eats(tiger, cow)\nTEXT: The tiger is kind.\nFOL: Kind(tiger)\nTEXT: The tiger is round.\nFOL: Round(tiger)\nTEXT: The tiger likes the cow.\nFOL: Likes(tiger, cow)\nTEXT: The tiger needs the cow.\nFOL: Needs(tiger, cow)\nTEXT: The tiger needs the dog.\nFOL: Needs(tiger, dog)\nTEXT: If someone likes the cow then the cow needs the tiger.\nFOL: all x. (Likes(x, cow) -> Needs(cow, tiger))\nTEXT: If someone is kind then they like the dog.\nFOL: all x. (Kind(x) -> Likes(x, dog))\nTEXT: If someone is round then they like the dog.\nFOL: all x. (Round(x) -> Likes(x, dog))\nTEXT: If the cow is not round then the cow is not rough.\nFOL: -Round(cow) -> -Rough(cow)\nTEXT: If the dog eats the cow and the dog likes the tiger then the tiger is red.\nFOL: (Eats(dog, cow) & Likes(dog, tiger)) -> Red(tiger)\nTEXT: If someone likes the cow then they are rough.\nFOL: all x. (Likes(x, cow) -> Rough(x))\nTEXT: If someone eats the cow and the cow needs the dog then the dog likes the cow.\nFOL: all x. ((Eats(x, cow) & Needs(cow, dog)) -> Likes(x, cow))\nTEXT: If someone likes the tiger and the tiger likes the dog then the dog eats the cow.\nFOL: all x. ((Likes(x, tiger) & Likes(tiger, dog)) -> Eats(x, cow))\nTEXT: The cow does not like the cow.\nFOL: -Likes(cow, cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow eats the dog.\nFOL: Eat(cow, dog)\nTEXT: The cow eats the tiger.\nFOL: Eat(cow, tiger)\nTEXT: The cow is kind.\nFOL: Kind(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow likes the dog.\nFOL: Like(cow, dog)\nTEXT: The cow needs the dog.\nFOL: Need(cow, dog)\nTEXT: The dog likes the tiger.\nFOL: Like(dog, tiger)\nTEXT: The dog needs the cow.\nFOL: Need(dog, cow)\nTEXT: The dog needs the tiger.\nFOL: Need(dog, tiger)\nTEXT: The tiger eats the cow.\nFOL: Eat(tiger, cow)\nTEXT: The tiger is kind.\nFOL: Kind(tiger)\nTEXT: The tiger is round.\nFOL: Round(tiger)\nTEXT: The tiger likes the cow.\nFOL: Like(tiger, cow)\nTEXT: The tiger needs the cow.\nFOL: Need(tiger, cow)\nTEXT: The tiger needs the dog.\nFOL: Need(tiger, dog)\nTEXT: If someone likes the cow then the cow needs the tiger.\nFOL: all x. (Like(x, cow) -> Need(cow, tiger))\nTEXT: If someone is kind then they like the dog.\nFOL: all x. (Kind(x) -> Like(x, dog))\nTEXT: If someone is round then they like the dog.\nFOL: all x. (Round(x) -> Like(x, dog))\nTEXT: If the cow is not round then the cow is not rough.\nFOL: -Round(cow) -> -Rough(cow)\nTEXT: If the dog eats the cow and the dog likes the tiger then the tiger is red.\nFOL: (Eat(dog, cow) & Like(dog, tiger)) -> Red(tiger)\nTEXT: If someone likes the cow then they are rough.\nFOL: all x. (Like(x, cow) -> Rough(x))\nTEXT: If someone eats the cow and the cow needs the dog then the dog likes the cow.\nFOL: all x. ((Eat(x, cow) & Need(cow, dog)) -> Like(x, cow))\nTEXT: If someone likes the tiger and the tiger likes the dog then the dog eats the cow.\nFOL: all x. ((Like(x, tiger) & Like(tiger, dog)) -> Eat(dog, cow))\nTEXT: The cow does not like the cow.\nFOL: -Like(cow, cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow eats the dog.\nFOL: Eat(cow, dog)\nTEXT: The cow eats the tiger.\nFOL: Eat(cow, tiger)\nTEXT: The cow is kind.\nFOL: Kind(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow likes the dog.\nFOL: Likes(cow, dog)\nTEXT: The cow needs the dog.\nFOL: Needs(cow, dog)\nTEXT: The dog likes the tiger.\nFOL: Likes(dog, tiger)\nTEXT: The dog needs the cow.\nFOL: Needs(dog, cow)\nTEXT: The dog needs the tiger.\nFOL: Needs(dog, tiger)\nTEXT: The tiger eats the cow.\nFOL: Eat(tiger, cow)\nTEXT: The tiger is kind.\nFOL: Kind(tiger)\nTEXT: The tiger is round.\nFOL: Round(tiger)\nTEXT: The tiger likes the cow.\nFOL: Likes(tiger, cow)\nTEXT: The tiger needs the cow.\nFOL: Needs(tiger, cow)\nTEXT: The tiger needs the dog.\nFOL: Needs(tiger, dog)\nTEXT: If someone likes the cow then the cow needs the tiger.\nFOL: all x. (Likes(x, cow) -> Needs(cow, tiger))\nTEXT: If someone is kind then they like the dog.\nFOL: all x. (Kind(x) -> Likes(x, dog))\nTEXT: If someone is round then they like the dog.\nFOL: all x. (Round(x) -> Likes(x, dog))\nTEXT: If the cow is not round then the cow is not rough.\nFOL: -Round(cow) -> -Rough(cow)\nTEXT: If the dog eats the cow and the dog likes the tiger then the tiger is red.\nFOL: (Eat(dog, cow) & Likes(dog, tiger)) -> Red(tiger)\nTEXT: If someone likes the cow then they are rough.\nFOL: all x. (Likes(x, cow) -> Rough(x))\nTEXT: If someone eats the cow and the cow needs the dog then the dog likes the cow.\nFOL: all x. ((Eat(x, cow) & Needs(cow, dog)) -> Likes(x, cow))\nTEXT: If someone likes the tiger and the tiger likes the dog then the dog eats the cow.\nFOL: all x. ((Likes(x, tiger) & Likes(tiger, dog)) -> Eat(dog, cow))\nTEXT: The cow does not like the cow.\nFOL: -Likes(cow, cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow eats the dog.\nFOL: Eats(cow, dog)\n\nTEXT: The cow eats the tiger.\nFOL: Eats(cow, tiger)\n\nTEXT: The cow is kind.\nFOL: Kind(cow)\n\nTEXT: The cow is red.\nFOL: Red(cow)\n\nTEXT: The cow likes the dog.\nFOL: Likes(cow, dog)\n\nTEXT: The cow needs the dog.\nFOL: Needs(cow, dog)\n\nTEXT: The dog likes the tiger.\nFOL: Likes(dog, tiger)\n\nTEXT: The dog needs the cow.\nFOL: Needs(dog, cow)\n\nTEXT: The dog needs the tiger.\nFOL: Needs(dog, tiger)\n\nTEXT: The tiger eats the cow.\nFOL: Eats(tiger, cow)\n\nTEXT: The tiger is kind.\nFOL: Kind(tiger)\n\nTEXT: The tiger is round.\nFOL: Round(tiger)\n\nTEXT: The tiger likes the cow.\nFOL: Likes(tiger, cow)\n\nTEXT: The tiger needs the cow.\nFOL: Needs(tiger, cow)\n\nTEXT: The tiger needs the dog.\nFOL: Needs(tiger, dog)\n\nTEXT: If someone likes the cow then the cow needs the tiger.\nFOL: all x. (Likes(x, cow) -> Needs(cow, tiger))\n\nTEXT: If someone is kind then they like the dog.\nFOL: all x. (Kind(x) -> Likes(x, dog))\n\nTEXT: If someone is round then they like the dog.\nFOL: all x. (Round(x) -> Likes(x, dog))\n\nTEXT: If the cow is not round then the cow is not rough.\nFOL: -Round(cow) -> -Rough(cow)\n\nTEXT: If the dog eats the cow and the dog likes the tiger then the tiger is red.\nFOL: (Eats(dog, cow) & Likes(dog, tiger)) -> Red(tiger)\n\nTEXT: If someone likes the cow then they are rough.\nFOL: all x. (Likes(x, cow) -> Rough(x))\n\nTEXT: If someone eats the cow and the cow needs the dog then the dog likes the cow.\nFOL: all x. ((Eats(x, cow) & Needs(cow, dog)) -> Likes(x, cow))\n\nTEXT: If someone likes the tiger and the tiger likes the dog then the dog eats the cow.\nFOL: all x. ((Likes(x, tiger) & Likes(tiger, dog)) -> Eats(dog, cow))\n\nTEXT: The cow does not like the cow.\nFOL: -Likes(cow, cow)\n</EVALUATE>"
  ]
 },
 {
  "index": 49,
  "responses": [
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x. (Knows(x, charlie) -> (Rough(charlie) & Cold(charlie)))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: (Kind(charlie) & Red(charlie)) | (Blue(charlie) & Young(charlie))\nTEXT: That guy Eric sure is nice.\nFOL: Nice(erick)\nTEXT: A bit overweight, Fred is big and round.\nFOL: Big(fred) & Round(fred)\nTEXT: He's a nice guy who is often cold.\nFOL: Nice(fred) & Cold(fred)\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: all x. (Nice(x) & Round(x) & Cold(x) -> Blue(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> LittleGreen(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: all x. (Blue(x) & Big(x) & Kind(x) -> Green(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. ((Blue(x) & Green(x)) -> Red(x))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: all x. ((Nice(x) & Blue(x) & Round(x)) -> Kind(x))\nTEXT: Fred is not rough.\nFOL: -Rough(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x. (Knows(x, charlie) -> (Rough(charlie) & Cold(charlie)))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: (Kind(charlie) & Red(charlie)) | -Blue(charlie)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(erick)\nTEXT: A bit overweight, Fred is big and round.\nFOL: Big(fred) & Round(fred)\nTEXT: He's a nice guy who is often cold.\nFOL: Nice(fred) & Cold(fred)\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: all x. (Nice(x) & Round(x) & Cold(x) -> Blue(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> LittleGreen(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: all x. (Blue(x) & Big(x) & Kind(x) -> Green(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. ((Blue(x) & Green(x)) -> Red(x))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: all x. ((Nice(x) & Blue(x) & Round(x)) -> Kind(x))\nTEXT: Fred is not rough.\nFOL: -Rough(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x. (Knows(x, charlie) -> (Rough(charlie) & Cold(charlie)))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: (Kind(charlie) & Red(charlie)) & -Blue(charlie)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(erick)\nTEXT: A bit overweight, Fred is big and round.\nFOL: Big(fred) & Round(fred)\nTEXT: He's a nice guy who is often cold.\nFOL: Nice(fred) & Cold(fred)\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: all x. (Nice(x) & Round(x) & Cold(x) -> Blue(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> LittleGreen(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: Blue(x) & Big(x) & Kind(x) -> Green(x)\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. ((Blue(x) & Green(x)) -> Red(x))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: all x. ((Nice(x) & Blue(x) & Round(x)) -> Kind(x))\nTEXT: Fred is not rough.\nFOL: -Rough(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x. (Knows(x, charlie) -> (Rough(charlie) & Cold(charlie)))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: (Kind(charlie) & Red(charlie)) | -Blue(charlie)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(erick)\nTEXT: A bit overweight, Fred is big and round.\nFOL: Big(fred) & Round(fred)\nTEXT: He's a nice guy who is often cold.\nFOL: Nice(fred) & Cold(fred)\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: all x. (Nice(x) & Round(x) & Cold(x) -> Blue(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> LittleGreen(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: Blue(x) & Big(x) & Kind(x) -> Green(x)\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. ((Blue(x) & Green(x)) -> Red(x))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: all x. ((Nice(x) & Blue(x) & Round(x)) -> Kind(x))\nTEXT: Fred is not rough.\nFOL: -Rough(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x. (Knows(x, charlie) -> (Rough(charlie) & Cold(charlie)))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: (Kind(charlie) & Red(charlie)) | (Blue(charlie) & Young(charlie))\nTEXT: That guy Eric sure is nice.\nFOL: Nice(erick)\nTEXT: A bit overweight, Fred is big and round.\nFOL: Big(fred) & Round(fred)\nTEXT: He's a nice guy who is often cold.\nFOL: Nice(fred) & Cold(fred)\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: all x. (Nice(x) & Round(x) & Cold(x) -> Blue(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> LittleGreen(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: Blue(x) & Big(x) & Kind(x) -> Green(x)\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. ((Blue(x) & Green(x)) -> Red(x))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: all x. ((Nice(x) & Blue(x) & Round(x)) -> Kind(x))\nTEXT: Fred is not rough.\nFOL: -Rough(fred)\n</EVALUATE>"
  ]
 },
 {
  "index": 50,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(anne)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: If Fiona is nice and Fiona is not blue then Fiona is red.\nFOL: (Nice(fiona) & -Blue(fiona)) -> Red(fiona)\nTEXT: If Gary is round then Gary is blue.\nFOL: Round(gary) -> Blue(gary)\nTEXT: Round, blue things are green.\nFOL: all x. ((Round(x) & Blue(x)) -> Green(x))\nTEXT: White things are big.\nFOL: all x. (White(x) -> Big(x))\nTEXT: If something is green then it is big.\nFOL: all x. (Green(x) -> Big(x))\nTEXT: If something is blue and not red then it is round.\nFOL: all x. ((Blue(x) & -Red(x)) -> Round(x))\nTEXT: If Anne is red and Anne is big then Anne is white.\nFOL: (Red(anne) & Big(anne)) -> White(anne)\nTEXT: If Anne is big then Anne is white.\nFOL: Big(anne) -> White(anne)\nTEXT: Gary is big.\nFOL: Big(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(anne)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: If Fiona is nice and Fiona is not blue then Fiona is red.\nFOL: (Nice(fiona) & -Blue(fiona)) -> Red(fiona)\nTEXT: If Gary is round then Gary is blue.\nFOL: Round(gary) -> Blue(gary)\nTEXT: Round, blue things are green.\nFOL: all x. (Round(x) & Blue(x) -> Green(x))\nTEXT: White things are big.\nFOL: all x. (White(x) -> Big(x))\nTEXT: If something is green then it is big.\nFOL: all x. (Green(x) -> Big(x))\nTEXT: If something is blue and not red then it is round.\nFOL: all x. ((Blue(x) & -Red(x)) -> Round(x))\nTEXT: If Anne is red and Anne is big then Anne is white.\nFOL: (Red(anne) & Big(anne)) -> White(anne)\nTEXT: If Anne is big then Anne is white.\nFOL: Big(anne) -> White(anne)\nTEXT: Gary is big.\nFOL: Big(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(anne)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: If Fiona is nice and Fiona is not blue then Fiona is red.\nFOL: (Nice(fiona) & -Blue(fiona)) -> Red(fiona)\nTEXT: If Gary is round then Gary is blue.\nFOL: (Round(gary) -> Blue(gary))\nTEXT: Round, blue things are green.\nFOL: all x. ((Round(x) & Blue(x)) -> Green(x))\nTEXT: White things are big.\nFOL: all x. (White(x) -> Big(x))\nTEXT: If something is green then it is big.\nFOL: all x. (Green(x) -> Big(x))\nTEXT: If something is blue and not red then it is round.\nFOL: all x. ((Blue(x) & -Red(x)) -> Round(x))\nTEXT: If Anne is red and Anne is big then Anne is white.\nFOL: (Red(anne) & Big(anne)) -> White(anne)\nTEXT: If Anne is big then Anne is white.\nFOL: (Big(anne) -> White(anne))\nTEXT: Gary is big.\nFOL: Big(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(anne)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: If Fiona is nice and Fiona is not blue then Fiona is red.\nFOL: (Nice(fiona) & -Blue(fiona)) -> Red(fiona)\nTEXT: If Gary is round then Gary is blue.\nFOL: Round(gary) -> Blue(gary)\nTEXT: Round, blue things are green.\nFOL: all x. (Round(x) & Blue(x) -> Green(x))\nTEXT: White things are big.\nFOL: all x. (White(x) -> Big(x))\nTEXT: If something is green then it is big.\nFOL: all x. (Green(x) -> Big(x))\nTEXT: If something is blue and not red then it is round.\nFOL: all x. (Blue(x) & -Red(x) -> Round(x))\nTEXT: If Anne is red and Anne is big then Anne is white.\nFOL: (Red(anne) & Big(anne)) -> White(anne)\nTEXT: If Anne is big then Anne is white.\nFOL: Big(anne) -> White(anne)\nTEXT: Gary is big.\nFOL: Big(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(anne)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: If Fiona is nice and Fiona is not blue then Fiona is red.\nFOL: (Nice(fiona) & -Blue(fiona)) -> Red(fiona)\nTEXT: If Gary is round then Gary is blue.\nFOL: (Round(gary) -> Blue(gary))\nTEXT: Round, blue things are green.\nFOL: all x. (Round(x) & Blue(x) -> Green(x))\nTEXT: White things are big.\nFOL: all x. (White(x) -> Big(x))\nTEXT: If something is green then it is big.\nFOL: all x. (Green(x) -> Big(x))\nTEXT: If something is blue and not red then it is round.\nFOL: all x. ((Blue(x) & -Red(x)) -> Round(x))\nTEXT: If Anne is red and Anne is big then Anne is white.\nFOL: (Red(anne) & Big(anne)) -> White(anne)\nTEXT: If Anne is big then Anne is white.\nFOL: (Big(anne) -> White(anne))\nTEXT: Gary is big.\nFOL: Big(gary)\n</EVALUATE>"
  ]
 },
 {
  "index": 51,
  "responses": [
   "<EVALUATE>\nTEXT: The cow is round.\nFOL: Round(cow)\nTEXT: The lion visits the tiger.\nFOL: Visits(lion, tiger)\nTEXT: The squirrel needs the tiger.\nFOL: Needs(squirrel, tiger)\nTEXT: The tiger sees the cow.\nFOL: Sees(tiger, cow)\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Needs(x, lion) -> -Red(lion))\nTEXT: The cow is round.\nFOL: Round(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is round.\nFOL: round(cow)\nTEXT: The lion visits the tiger.\nFOL: visits(lion, tiger)\nTEXT: The squirrel needs the tiger.\nFOL: needs(squirrel, tiger)\nTEXT: The tiger sees the cow.\nFOL: sees(tiger, cow)\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (needs(x, lion) -> -red(lion))\nTEXT: The cow is round.\nFOL: round(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is round.\nFOL: Round(cow)\n\nTEXT: The lion visits the tiger.\nFOL: Visits(lion, tiger)\n\nTEXT: The squirrel needs the tiger.\nFOL: Needs(squirrel, tiger)\n\nTEXT: The tiger sees the cow.\nFOL: Sees(tiger, cow)\n\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Needs(x, lion) -> -Red(lion))\n\nTEXT: The cow is round.\nFOL: Round(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is round.\nFOL: round(cow)\nTEXT: The lion visits the tiger.\nFOL: visits(lion, tiger)\nTEXT: The squirrel needs the tiger.\nFOL: needs(squirrel, tiger)\nTEXT: The tiger sees the cow.\nFOL: sees(tiger, cow)\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (needs(x, lion) -> -Red(lion))\nTEXT: The cow is round.\nFOL: round(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is round.\nFOL: Round(cow)\nTEXT: The lion visits the tiger.\nFOL: Visit(lion, tiger)\nTEXT: The squirrel needs the tiger.\nFOL: Need(squirrel, tiger)\nTEXT: The tiger sees the cow.\nFOL: See(tiger, cow)\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Need(x, lion) -> -Red(lion))\nTEXT: The cow is round.\nFOL: Round(cow)\n</EVALUATE>"
  ]
 },
 {
  "index": 52,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Bob is not cold.\nFOL: -Cold(bob)\nTEXT: Charlie is green.\nFOL: Green(charlie)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: All red people are not cold.\nFOL: all x. (Red(x) -> -Cold(x))\nTEXT: If someone is nice and green then they are kind.\nFOL: all x. ((Nice(x) & Green(x)) -> Kind(x))\nTEXT: If Anne is young then Anne is red.\nFOL: Young(anne) -> Red(anne)\nTEXT: If Harry is red then Harry is not green.\nFOL: Red(harry) -> -Green(harry)\nTEXT: If someone is nice then they are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: Cold, red people are rough.\nFOL: all x. ((Cold(x) & Red(x)) -> Rough(x))\nTEXT: If Charlie is young then Charlie is not nice.\nFOL: Young(charlie) -> -Nice(charlie)\nTEXT: All nice people are not green.\nFOL: all x. (Nice(x) -> -Green(x))\nTEXT: Bob is green.\nFOL: Green(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Bob is not cold.\nFOL: -Cold(bob)\nTEXT: Charlie is green.\nFOL: Green(charlie)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: All red people are not cold.\nFOL: all x. (Red(x) -> -Cold(x))\nTEXT: If someone is nice and green then they are kind.\nFOL: all x. ((Nice(x) & Green(x)) -> Kind(x))\nTEXT: If Anne is young then Anne is red.\nFOL: Young(anne) -> Red(anne)\nTEXT: If Harry is red then Harry is not green.\nFOL: Red(harry) -> -Green(harry)\nTEXT: If someone is nice then they are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: Cold, red people are rough.\nFOL: (Cold(x) & Red(x)) -> Rough(x)\nTEXT: If Charlie is young then Charlie is not nice.\nFOL: Young(charlie) -> -Nice(charlie)\nTEXT: All nice people are not green.\nFOL: all x. (Nice(x) -> -Green(x))\nTEXT: Bob is green.\nFOL: Green(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Bob is not cold.\nFOL: -Cold(bob)\nTEXT: Charlie is green.\nFOL: Green(charlie)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: All red people are not cold.\nFOL: all x. (Red(x) -> -Cold(x))\nTEXT: If someone is nice and green then they are kind.\nFOL: (Nice(x) & Green(x)) -> Kind(x)\nTEXT: If Anne is young then Anne is red.\nFOL: Young(anne) -> Red(anne)\nTEXT: If Harry is red then Harry is not green.\nFOL: Red(harry) -> -Green(harry)\nTEXT: If someone is nice then they are young.\nFOL: Nice(x) -> Young(x)\nTEXT: Cold, red people are rough.\nFOL: (Cold(x) & Red(x)) -> Rough(x)\nTEXT: If Charlie is young then Charlie is not nice.\nFOL: Young(charlie) -> -Nice(charlie)\nTEXT: All nice people are not green.\nFOL: all x. (Nice(x) -> -Green(x))\nTEXT: Bob is green.\nFOL: Green(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Bob is not cold.\nFOL: -Cold(bob)\nTEXT: Charlie is green.\nFOL: Green(charlie)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: All red people are not cold.\nFOL: all x. (Red(x) -> -Cold(x))\nTEXT: If someone is nice and green then they are kind.\nFOL: all x. (Nice(x) & Green(x) -> Kind(x))\nTEXT: If Anne is young then Anne is red.\nFOL: Young(anne) -> Red(anne)\nTEXT: If Harry is red then Harry is not green.\nFOL: Red(harry) -> -Green(harry)\nTEXT: If someone is nice then they are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: Cold, red people are rough.\nFOL: all x. ((Cold(x) & Red(x)) -> Rough(x))\nTEXT: If Charlie is young then Charlie is not nice.\nFOL: Young(charlie) -> -Nice(charlie)\nTEXT: All nice people are not green.\nFOL: all x. (Nice(x) -> -Green(x))\nTEXT: Bob is green.\nFOL: Green(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Bob is not cold.\nFOL: -Cold(bob)\nTEXT: Charlie is green.\nFOL: Green(charlie)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: All red people are not cold.\nFOL: all x. (Red(x) -> -Cold(x))\nTEXT: If someone is nice and green then they are kind.\nFOL: all x. (Nice(x) & Green(x) -> Kind(x))\nTEXT: If Anne is young then Anne is red.\nFOL: Young(anne) -> Red(anne)\nTEXT: If Harry is red then Harry is not green.\nFOL: Red(harry) -> -Green(harry)\nTEXT: If someone is nice then they are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: Cold, red people are rough.\nFOL: (Cold(x) & Red(x)) -> Rough(x)\nTEXT: If Charlie is young then Charlie is not nice.\nFOL: Young(charlie) -> -Nice(charlie)\nTEXT: All nice people are not green.\nFOL: all x. (Nice(x) -> -Green(x))\nTEXT: Bob is green.\nFOL: Green(bob)\n</EVALUATE>"
  ]
 },
 {
  "index": 53,
  "responses": [
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(alan)\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: (Round(dave) & Big(dave)) -> Kind(dave)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(eric)\nTEXT: Gary is a kind person and he is also often cold.\nFOL: Kind(gary) & Cold(gary)\nTEXT: Red people are almost always rough.\nFOL: all x. (Red(x) -> Rough(x))\nTEXT: A young, green person in my experience is round shaped and nice.\nFOL: Young(x) & Green(x) -> (Round(x) & Nice(x))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: (Green(x) & Rough(x) & Cold(x)) -> Nice(x)\nTEXT: Someone who is young at heart and age are very round.\nFOL: Young(x) -> Round(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: (Cold(x) & Round(x)) -> Red(x)\nTEXT: Dave is not red.\nFOL: -Red(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(alan)\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: (Round(dave) & Big(dave)) -> Kind(dave)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(eric)\nTEXT: Gary is a kind person and he is also often cold.\nFOL: Kind(gary) & Cold(gary)\nTEXT: Red people are almost always rough.\nFOL: all x. (Red(x) -> Rough(x))\nTEXT: A young, green person in my experience is round shaped and nice.\nFOL: (Young(x) & Green(x)) -> (Round(x) & Nice(x))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: (Green(x) & Rough(x) & Cold(x)) -> Nice(x)\nTEXT: Someone who is young at heart and age are very round.\nFOL: (YoungAtHeart(x) & Young(x)) -> Round(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: (Cold(x) & Round(x)) -> Red(x)\nTEXT: Dave is not red.\nFOL: -Red(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(alan)\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: (Round(dave) & Big(dave)) -> Kind(dave)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(eric)\nTEXT: Gary is a kind person and he is also often cold.\nFOL: Kind(gary) & Cold(gary)\nTEXT: Red people are almost always rough.\nFOL: all x. (Red(x) -> Rough(x))\nTEXT: A young, green person in my experience is round shaped and nice.\nFOL: (Young(x) & Green(x)) -> (Round(x) & Nice(x))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: (Green(x) & Rough(x) & Cold(x)) -> Nice(x)\nTEXT: Someone who is young at heart and age are very round.\nFOL: Young(x) -> Round(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: (Cold(x) & Round(x)) -> Red(x)\nTEXT: Dave is not red.\nFOL: -Red(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(alan)\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: (Round(dave) & Big(dave)) -> Kind(dave)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(eric)\nTEXT: Gary is a kind person and he is also often cold.\nFOL: Kind(gary) & Cold(gary)\nTEXT: Red people are almost always rough.\nFOL: all x. (Red(x) -> Rough(x))\nTEXT: A young, green person in my experience is round shaped and nice.\nFOL: Young(greenPerson) & Green(greenPerson) -> (Round(greenPerson) & Nice(greenPerson))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: (Green(x) & Rough(x) & Cold(x)) -> Nice(x)\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (Young(x) -> Round(x))\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: (Cold(x) & Round(x)) -> Red(x)\nTEXT: Dave is not red.\nFOL: -Red(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(alan)\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: (Round(dave) & Big(dave)) -> Kind(dave)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(eric)\nTEXT: Gary is a kind person and he is also often cold.\nFOL: Kind(gary) & Cold(gary)\nTEXT: Red people are almost always rough.\nFOL: all x. (Red(x) -> Rough(x))\nTEXT: A young, green person in my experience is round shaped and nice.\nFOL: Young(x) & Green(x) -> (Round(x) & Nice(x))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: (Green(x) & Rough(x) & Cold(x)) -> Nice(x)\nTEXT: Someone who is young at heart and age are very round.\nFOL: Young(x) -> Round(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: all x. ((Cold(x) & Round(x)) -> Red(x))\nTEXT: Dave is not red.\nFOL: -Red(dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 54,
  "responses": [
   "<EVALUATE>\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: all x. (Kind(x) & Young(x) -> Blue(x))\nTEXT: Eric is green and cold too.\nFOL: Green(erick) & Cold(erick)\nTEXT: Fred can be rough and cold, but he is also green, an avid gardener.\nFOL: (Rough(fred) & Cold(fred)) | (Green(fred) & Gardener(fred))\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: all x. (Young(x) & Cold(x) -> Harry(x))\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: all x. ((Rough(x) & Tumble(x) & Gentle(x) & Kind(x)) -> Blue(x))\nTEXT: Kind, round people that are really feeling blue are going to always be big.\nFOL: all x. (Kind(x) & Round(x) & Blue(x) -> Big(x))\nTEXT: Someone with rough and green feet is invariably kind.\nFOL: all x. (Rough(x) & Green(x) -> Kind(x))\nTEXT: Blue eyed people, green with sickness and rough around the edges quickly turn red and blush when stepping ashore.\nFOL: all x. (BlueEyes(x) & Green(x) & Rough(x) -> Red(x) & Blush(x))\nTEXT: Every person I met that was cold and round was also red.\nFOL: all x. (Cold(x) & Round(x) -> Red(x))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x. (Round(x) & Blue(x) -> Young(x))\nTEXT: A round shaped kind person who is colored green will be cold natured.\nFOL: all x. (Round(x) & Kind(x) & Green(x) -> Cold(x))\nTEXT: Eric is big.\nFOL: Big(erick)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: all x. (Kind(x) & Young(x) -> Blue(x))\nTEXT: Eric is green and cold too.\nFOL: Green(erick) & Cold(erick)\nTEXT: Fred can be rough and cold, but he is also green, an avid gardener.\nFOL: (Rough(fred) & Cold(fred)) | (Green(fred) & Gardener(fred))\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: all x. (Young(x) & Cold(x) -> Harry(x))\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: all x. ((Rough(x) & Tumble(x)) & (Gentle(x) & Kind(x)) -> Blue(x))\nTEXT: Kind, round people that are really feeling blue are going to always be big.\nFOL: all x. (Kind(x) & Round(x) & Blue(x) -> Big(x))\nTEXT: Someone with rough and green feet is invariably kind.\nFOL: all x. (Rough(x) & Green(x) -> Kind(x))\nTEXT: Blue eyed people, green with sickness and rough around the edges quickly turn red and blush when stepping ashore.\nFOL: all x. (BlueEyes(x) & Green(x) & Rough(x) -> Red(x) & Blush(x))\nTEXT: Every person I met that was cold and round was also red.\nFOL: all x. (Cold(x) & Round(x) -> Red(x))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x. (Round(x) & Blue(x) -> Young(x))\nTEXT: A round shaped kind person who is colored green will be cold natured.\nFOL: all x. (Round(x) & Kind(x) & Green(x) -> Cold(x))\nTEXT: Eric is big.\nFOL: Big(erick)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: all x. (Kind(x) & Young(x) -> Blue(x))\nTEXT: Eric is green and cold too.\nFOL: Green(erick) & Cold(erick)\nTEXT: Fred can be rough and cold, but he is also green, an avid gardener.\nFOL: (Rough(fred) & Cold(fred)) | (Green(fred) & Gardener(fred))\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: all x. (Young(x) & Cold(x) -> Harry(x))\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: all x. ((Rough(x) & Tumble(x) & Gentle(x) & Kind(x)) -> Blue(x))\nTEXT: Kind, round people that are really feeling blue are going to always be big.\nFOL: all x. (Kind(x) & Round(x) & Blue(x) -> Big(x))\nTEXT: Someone with rough and green feet is invariably kind.\nFOL: all x. (Rough(x) & Green(x) -> Kind(x))\nTEXT: Blue eyed people, green with sickness and rough around the edges quickly turn red and blush when stepping ashore.\nFOL: all x. (BlueEyes(x) & Green(x) & Rough(x) -> Red(x))\nTEXT: Every person I met that was cold and round was also red.\nFOL: all x. (Cold(x) & Round(x) -> Red(x))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x. (Round(x) & Blue(x) -> Young(x))\nTEXT: A round shaped kind person who is colored green will be cold natured.\nFOL: all x. (Round(x) & Kind(x) & Green(x) -> Cold(x))\nTEXT: Eric is big.\nFOL: Big(erick)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: all x. (Kind(x) & Young(x) -> Blue(x))\nTEXT: Eric is green and cold too.\nFOL: Green(erick) & Cold(erick)\nTEXT: Fred can be rough and cold, but he is also green, an avid gardener.\nFOL: (Rough(fred) & Cold(fred)) | (Green(fred) & Gardener(fred))\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: all x. (Young(x) & Cold(x) -> Harry(x))\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: all x. ((Rough(x) & Tumble(x)) & (Gentle(x) & Kind(x)) -> Blue(x))\nTEXT: Kind, round people that are really feeling blue are going to always be big.\nFOL: all x. (Kind(x) & Round(x) & Blue(x) -> Big(x))\nTEXT: Someone with rough and green feet is invariably kind.\nFOL: all x. (Rough(x) & Green(x) -> Kind(x))\nTEXT: Blue eyed people, green with sickness and rough around the edges quickly turn red and blush when stepping ashore.\nFOL: all x. (BlueEyes(x) & Green(x) & Rough(x) -> Red(x))\nTEXT: Every person I met that was cold and round was also red.\nFOL: all x. (Cold(x) & Round(x) -> Red(x))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x. (Round(x) & Blue(x) -> Young(x))\nTEXT: A round shaped kind person who is colored green will be cold natured.\nFOL: all x. (Round(x) & Kind(x) & Green(x) -> Cold(x))\nTEXT: Eric is big.\nFOL: Big(erick)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: all x. (Kind(x) & Young(x) -> Blue(x))\nTEXT: Eric is green and cold too.\nFOL: Green(erick) & Cold(erick)\nTEXT: Fred can be rough and cold, but he is also green, an avid gardener.\nFOL: (Rough(fred) & Cold(fred)) | (Green(fred) & Gardener(fred))\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: all x. (Young(x) & Cold(x) -> Harry(x))\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: all x. ((Rough(x) & Tumble(x)) & (Gentle(x) & Kind(x)) -> Blue(x))\nTEXT: Kind, round people that are really feeling blue are going to always be big.\nFOL: all x. (Kind(x) & Round(x) & Blue(x) -> Big(x))\nTEXT: Someone with rough and green feet is invariably kind.\nFOL: all x. (Rough(x) & Green(x) -> Kind(x))\nTEXT: Blue eyed people, green with sickness and rough around the edges quickly turn red and blush when stepping ashore.\nFOL: (BlueEyes(x) & Green(x) & Rough(x)) -> (Red(x) & Blush(x))\nTEXT: Every person I met that was cold and round was also red.\nFOL: all x. (Cold(x) & Round(x) -> Red(x))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x. (Round(x) & Blue(x) -> Young(x))\nTEXT: A round shaped kind person who is colored green will be cold natured.\nFOL: all x. (Round(x) & Kind(x) & Green(x) -> Cold(x))\nTEXT: Eric is big.\nFOL: Big(erick)\n</EVALUATE>"
  ]
 },
 {
  "index": 55,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: Green(bob) & Cold(bob)\nTEXT: Eric might be rough and red but he's actually very kind.\nFOL: (Rough(eric) & Red(eric)) | Kind(eric)\nTEXT: Fred is green and cold too.\nFOL: Green(fred) & Cold(fred)\nTEXT: Harry can be rough and cold, but he is also green, an avid gardener.\nFOL: (Rough(harry) & Cold(harry)) | Green(harry) & Gardener(harry)\nTEXT: A person who is kind, cold, and rough is big.\nFOL: (Kind(x) & Cold(x) & Rough(x)) -> Big(x)\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> LittleGreen(x))\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: (Rough(x) & Kind(x)) -> Cold(x)\nTEXT: Big, young people with green color are rather rough.\nFOL: (Big(x) & Young(x) & Green(x)) -> Rough(x)\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: (Green(x) & Naive(x)) -> (Red(x) & Rough(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: (Green(x) & Naive(x)) -> Round(x)\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: (Nice(x) & Red(x) & Rough(x)) -> GreenWithEnvy(x)\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: (Green(x) & Nice(x) & Rough(x)) -> Round(x)\nTEXT: Fred is not round.\nFOL: -Round(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: (Green(bob) & Cold(bob))\nTEXT: Eric might be rough and red but he's actually very kind.\nFOL: (Rough(eric) & Red(eric)) | Kind(eric)\nTEXT: Fred is green and cold too.\nFOL: (Green(fred) & Cold(fred))\nTEXT: Harry can be rough and cold, but he is also green, an avid gardener.\nFOL: (Rough(harry) & Cold(harry)) | Green(harry) & Gardener(harry)\nTEXT: A person who is kind, cold, and rough is big.\nFOL: (Kind(x) & Cold(x) & Rough(x)) -> Big(x)\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> LittleGreen(x))\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: (Rough(x) & Kind(x)) -> Cold(x)\nTEXT: Big, young people with green color are rather rough.\nFOL: (Big(x) & Young(x) & Green(x)) -> Rough(x)\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: (Green(x) & Naive(x)) -> (Red(x) & Rough(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: (Green(x) & Naive(x)) -> Round(x)\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: (Nice(x) & Red(x) & Rough(x)) -> GreenWithEnvy(x)\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: (Green(x) & Nice(x) & Rough(x)) -> Round(x)\nTEXT: Fred is not round.\nFOL: -Round(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: (Green(bob) & Cold(bob))\nTEXT: Eric might be rough and red but he's actually very kind.\nFOL: (Rough(eric) & Red(eric)) | Kind(eric)\nTEXT: Fred is green and cold too.\nFOL: (Green(fred) & Cold(fred))\nTEXT: Harry can be rough and cold, but he is also green, an avid gardener.\nFOL: (Rough(harry) & Cold(harry)) | Green(harry) & Gardener(harry)\nTEXT: A person who is kind, cold, and rough is big.\nFOL: (Kind(x) & Cold(x) & Rough(x)) -> Big(x)\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> exists y. Green(y))\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: (Rough(x) & Kind(x)) -> Cold(x)\nTEXT: Big, young people with green color are rather rough.\nFOL: (Big(x) & Young(x) & Green(x)) -> Rough(x)\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: (Green(x) & Naive(x)) -> (Red(x) & Rough(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: (Green(x) & Naive(x)) -> Round(x)\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: (Nice(x) & Red(x) & Rough(x)) -> GreenWithEnvy(x)\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: (Green(x) & Nice(x) & Rough(x)) -> Round(x)\nTEXT: Fred is not round.\nFOL: -Round(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: Green(bob) & Cold(bob)\nTEXT: Eric might be rough and red but he's actually very kind.\nFOL: (Rough(eric) & Red(eric)) | Kind(eric)\nTEXT: Fred is green and cold too.\nFOL: Green(fred) & Cold(fred)\nTEXT: Harry can be rough and cold, but he is also green, an avid gardener.\nFOL: (Rough(harry) & Cold(harry)) | Green(harry) & Gardener(harry)\nTEXT: A person who is kind, cold, and rough is big.\nFOL: (Kind(x) & Cold(x) & Rough(x)) -> Big(x)\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> exists y. Green(y))\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: (Rough(x) & Kind(x)) -> Cold(x)\nTEXT: Big, young people with green color are rather rough.\nFOL: (Big(x) & Young(x) & Green(x)) -> Rough(x)\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: (Green(x) & Naive(x)) -> (Red(x) & Rough(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: (Green(x) & Naive(x)) -> Round(x)\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: (Nice(x) & Red(x) & Rough(x)) -> GreenWithEnvy(x)\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: (Green(x) & Nice(x) & Rough(x)) -> Round(x)\nTEXT: Fred is not round.\nFOL: -Round(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: (Green(bob) & Cold(bob))\nTEXT: Eric might be rough and red but he's actually very kind.\nFOL: (Rough(eric) & Red(eric)) | Kind(eric)\nTEXT: Fred is green and cold too.\nFOL: (Green(fred) & Cold(fred))\nTEXT: Harry can be rough and cold, but he is also green, an avid gardener.\nFOL: (Rough(harry) & Cold(harry)) | Green(harry) & Gardener(harry)\nTEXT: A person who is kind, cold, and rough is big.\nFOL: (Kind(x) & Cold(x) & Rough(x)) -> Big(x)\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> exists y. Green(y))\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: (Rough(x) & Kind(x)) -> Cold(x)\nTEXT: Big, young people with green color are rather rough.\nFOL: (Big(x) & Young(x) & Green(x)) -> Rough(x)\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: (Green(x) & Naive(x)) -> (Red(x) & Rough(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: (Green(x) & Naive(x) & Red(x) & Rough(x)) -> Round(x)\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: (Nice(x) & Red(x) & Rough(x)) -> GreenWithEnvy(x)\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: (Green(x) & Nice(x) & Rough(x)) -> Round(x)\nTEXT: Fred is not round.\nFOL: -Round(fred)\n</EVALUATE>"
  ]
 },
 {
  "index": 56,
  "responses": [
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(eric)\nTEXT: Fred is a big guy who is colored red from a sunburn.\nFOL: Big(fred) & Red(fred)\nTEXT: He also has a cold.\nFOL: Cold(fred)\nTEXT: Gary is young, round and kind with green ideas and wears blue clothes.\nFOL: Young(gary) & Round(gary) & Kind(gary) & GreenIdeas(gary) & BlueClothes(gary)\nTEXT: Kind people that are red and round are usually big.\nFOL: all x. (Kind(x) & Red(x) & Round(x) -> Big(x))\nTEXT: Nice round big people are kind to others.\nFOL: all x. (Nice(x) & Round(x) & Big(x) -> KindToOthers(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: When someone is green and round, they can be rough but kind.\nFOL: all x. (GreenIdeas(x) & Round(x) -> (Rough(x) & Kind(x)))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) -> Round(x))\nTEXT: Young and red people look round.\nFOL: all x. (Young(x) & Red(x) -> Round(x))\nTEXT: Alan is not green.\nFOL: -GreenIdeas(alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(eric)\nTEXT: Fred is a big guy who is colored red from a sunburn.\nFOL: Big(fred) & Red(fred)\nTEXT: He also has a cold.\nFOL: Cold(fred)\nTEXT: Gary is young, round and kind with green ideas and wears blue clothes.\nFOL: Young(gary) & Round(gary) & Kind(gary) & GreenIdeas(gary) & BlueClothes(gary)\nTEXT: Kind people that are red and round are usually big.\nFOL: all x. (Kind(x) & Red(x) & Round(x) -> Big(x))\nTEXT: Nice round big people are kind to others.\nFOL: all x. (Nice(x) & Round(x) & Big(x) -> KindToOthers(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: When someone is green and round, they can be rough but kind.\nFOL: all x. (GreenIdeas(x) & Round(x) -> (Rough(x) | Kind(x)))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) -> Round(x))\nTEXT: Young and red people look round.\nFOL: all x. (Young(x) & Red(x) -> Round(x))\nTEXT: Alan is not green.\nFOL: -GreenIdeas(alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(eric)\nTEXT: Fred is a big guy who is colored red from a sunburn.\nFOL: Big(fred) & Red(fred) & Sunburn(fred)\nTEXT: He also has a cold.\nFOL: Cold(fred)\nTEXT: Gary is young, round and kind with green ideas and wears blue clothes.\nFOL: Young(gary) & Round(gary) & Kind(gary) & GreenIdeas(gary) & BlueClothes(gary)\nTEXT: Kind people that are red and round are usually big.\nFOL: all x. (Kind(x) & Red(x) & Round(x) -> Big(x))\nTEXT: Nice round big people are kind to others.\nFOL: all x. (Nice(x) & Round(x) & Big(x) -> KindToOthers(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: When someone is green and round, they can be rough but kind.\nFOL: all x. (GreenIdeas(x) & Round(x) -> (Rough(x) & Kind(x)))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) -> Round(x))\nTEXT: Young and red people look round.\nFOL: all x. (Young(x) & Red(x) -> Round(x))\nTEXT: Alan is not green.\nFOL: -GreenIdeas(alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(eric)\nTEXT: Fred is a big guy who is colored red from a sunburn.\nFOL: Big(fred) & ColoredRedFromSunburn(fred)\nTEXT: He also has a cold.\nFOL: Cold(fred)\nTEXT: Gary is young, round and kind with green ideas and wears blue clothes.\nFOL: Young(gary) & Round(gary) & Kind(gary) & GreenIdeas(gary) & BlueClothes(gary)\nTEXT: Kind people that are red and round are usually big.\nFOL: all x. (Kind(x) & Red(x) & Round(x) -> Big(x))\nTEXT: Nice round big people are kind to others.\nFOL: all x. (Nice(x) & Round(x) & Big(x) -> KindToOthers(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: When someone is green and round, they can be rough but kind.\nFOL: all x. (GreenIdeas(x) & Round(x) -> (Rough(x) & Kind(x)))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) -> Round(x))\nTEXT: Young and red people look round.\nFOL: all x. (Young(x) & Red(x) -> Round(x))\nTEXT: Alan is not green.\nFOL: -GreenIdeas(alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(eric)\nTEXT: Fred is a big guy who is colored red from a sunburn.\nFOL: Big(fred) & Red(fred)\nTEXT: He also has a cold.\nFOL: Cold(fred)\nTEXT: Gary is young, round and kind with green ideas and wears blue clothes.\nFOL: Young(gary) & Round(gary) & Kind(gary) & GreenIdeas(gary) & BlueClothes(gary)\nTEXT: Kind people that are red and round are usually big.\nFOL: all x. (Kind(x) & Red(x) & Round(x) -> Big(x))\nTEXT: Nice round big people are kind to others.\nFOL: all x. ((Nice(x) & Round(x) & Big(x)) -> KindToOthers(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: When someone is green and round, they can be rough but kind.\nFOL: all x. (GreenIdeas(x) & Round(x) -> (Rough(x) & Kind(x)))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) -> Round(x))\nTEXT: Young and red people look round.\nFOL: all x. (Young(x) & Red(x) -> Round(x))\nTEXT: Alan is not green.\nFOL: -GreenIdeas(alan)\n</EVALUATE>"
  ]
 },
 {
  "index": 57,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: Chases(baldEagle, rabbit)\nTEXT: The bald eagle needs the cat.\nFOL: Needs(baldEagle, cat)\nTEXT: The bald eagle needs the rabbit.\nFOL: Needs(baldEagle, rabbit)\nTEXT: The bald eagle visits the cat.\nFOL: Visits(baldEagle, cat)\nTEXT: The cat is big.\nFOL: Big(cat)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat needs the bald eagle.\nFOL: Needs(cat, baldEagle)\nTEXT: The rabbit is big.\nFOL: Big(rabbit)\nTEXT: The rabbit is cold.\nFOL: Cold(rabbit)\nTEXT: The rabbit needs the cat.\nFOL: Needs(rabbit, cat)\nTEXT: The rabbit visits the bald eagle.\nFOL: Visits(rabbit, baldEagle)\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x. (Visits(x, cat) -> Needs(x, cat))\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (Visits(x, rabbit) -> Visits(rabbit, baldEagle))\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x. ((Visits(x, cat) & Visits(cat, baldEagle)) -> Visits(baldEagle, rabbit))\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x. (Needs(x, cat) -> Needs(x, rabbit))\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x. (Needs(x, baldEagle) -> Visits(x, cat))\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: (Kind(rabbit) & Needs(rabbit, cat)) -> Needs(rabbit, baldEagle)\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x. ((Kind(x) & Needs(x, rabbit)) -> Visits(rabbit, baldEagle))\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x. (Needs(x, rabbit) -> Visits(x, rabbit))\nTEXT: The cat needs the rabbit.\nFOL: Needs(cat, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: Chases(baldEagle, rabbit)\n\nTEXT: The bald eagle needs the cat.\nFOL: Needs(baldEagle, cat)\n\nTEXT: The bald eagle needs the rabbit.\nFOL: Needs(baldEagle, rabbit)\n\nTEXT: The bald eagle visits the cat.\nFOL: Visits(baldEagle, cat)\n\nTEXT: The cat is big.\nFOL: Big(cat)\n\nTEXT: The cat is kind.\nFOL: Kind(cat)\n\nTEXT: The cat needs the bald eagle.\nFOL: Needs(cat, baldEagle)\n\nTEXT: The rabbit is big.\nFOL: Big(rabbit)\n\nTEXT: The rabbit is cold.\nFOL: Cold(rabbit)\n\nTEXT: The rabbit needs the cat.\nFOL: Needs(rabbit, cat)\n\nTEXT: The rabbit visits the bald eagle.\nFOL: Visits(rabbit, baldEagle)\n\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\n\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x. (Visits(x, cat) -> Needs(x, cat))\n\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (Visits(x, rabbit) -> Visits(rabbit, baldEagle))\n\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x. ((Visits(x, cat) & Visits(cat, baldEagle)) -> Visits(baldEagle, rabbit))\n\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x. (Needs(x, cat) -> Needs(x, rabbit))\n\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x. (Needs(x, baldEagle) -> Visits(x, cat))\n\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: (Kind(rabbit) & Needs(rabbit, cat)) -> Needs(rabbit, baldEagle)\n\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x. ((Kind(x) & Needs(x, rabbit)) -> Visits(rabbit, baldEagle))\n\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x. (Needs(x, rabbit) -> Visits(x, rabbit))\n\nTEXT: The cat needs the rabbit.\nFOL: Needs(cat, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: Chases(baldEagle, rabbit)\nTEXT: The bald eagle needs the cat.\nFOL: Needs(baldEagle, cat)\nTEXT: The bald eagle needs the rabbit.\nFOL: Needs(baldEagle, rabbit)\nTEXT: The bald eagle visits the cat.\nFOL: Visits(baldEagle, cat)\nTEXT: The cat is big.\nFOL: Big(cat)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat needs the bald eagle.\nFOL: Needs(cat, baldEagle)\nTEXT: The rabbit is big.\nFOL: Big(rabbit)\nTEXT: The rabbit is cold.\nFOL: Cold(rabbit)\nTEXT: The rabbit needs the cat.\nFOL: Needs(rabbit, cat)\nTEXT: The rabbit visits the bald eagle.\nFOL: Visits(rabbit, baldEagle)\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x. (Visits(x, cat) -> Needs(x, cat))\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (Visits(x, rabbit) -> Visits(rabbit, baldEagle))\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x. ((Visits(x, cat) & Visits(cat, baldEagle)) -> Visits(baldEagle, rabbit))\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x. (Needs(x, cat) -> Needs(x, rabbit))\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x. (Needs(x, baldEagle) -> Visits(x, cat))\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: (Kind(rabbit) & Needs(rabbit, cat)) -> Needs(rabbit, baldEagle)\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: (Kind(x) & Needs(x, rabbit)) -> Visits(rabbit, baldEagle)\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x. (Needs(x, rabbit) -> Visits(x, rabbit))\nTEXT: The cat needs the rabbit.\nFOL: Needs(cat, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: Chases(baldEagle, rabbit)\nTEXT: The bald eagle needs the cat.\nFOL: Needs(baldEagle, cat)\nTEXT: The bald eagle needs the rabbit.\nFOL: Needs(baldEagle, rabbit)\nTEXT: The bald eagle visits the cat.\nFOL: Visits(baldEagle, cat)\nTEXT: The cat is big.\nFOL: Big(cat)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat needs the bald eagle.\nFOL: Needs(cat, baldEagle)\nTEXT: The rabbit is big.\nFOL: Big(rabbit)\nTEXT: The rabbit is cold.\nFOL: Cold(rabbit)\nTEXT: The rabbit needs the cat.\nFOL: Needs(rabbit, cat)\nTEXT: The rabbit visits the bald eagle.\nFOL: Visits(rabbit, baldEagle)\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x. (Visits(x, cat) -> Needs(x, cat))\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (Visits(x, rabbit) -> Visits(rabbit, baldEagle))\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x. (Visits(x, cat) & Visits(cat, baldEagle) -> Visits(baldEagle, rabbit))\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x. (Needs(x, cat) -> Needs(x, rabbit))\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x. (Needs(x, baldEagle) -> Visits(x, cat))\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: (Kind(rabbit) & Needs(rabbit, cat)) -> Needs(rabbit, baldEagle)\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (Kind(x) & Needs(x, rabbit) -> Visits(rabbit, baldEagle))\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x. (Needs(x, rabbit) -> Visits(x, rabbit))\nTEXT: The cat needs the rabbit.\nFOL: Needs(cat, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: Chase(baldEagle, rabbit)\nTEXT: The bald eagle needs the cat.\nFOL: Needs(baldEagle, cat)\nTEXT: The bald eagle needs the rabbit.\nFOL: Needs(baldEagle, rabbit)\nTEXT: The bald eagle visits the cat.\nFOL: Visit(baldEagle, cat)\nTEXT: The cat is big.\nFOL: Big(cat)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat needs the bald eagle.\nFOL: Needs(cat, baldEagle)\nTEXT: The rabbit is big.\nFOL: Big(rabbit)\nTEXT: The rabbit is cold.\nFOL: Cold(rabbit)\nTEXT: The rabbit needs the cat.\nFOL: Needs(rabbit, cat)\nTEXT: The rabbit visits the bald eagle.\nFOL: Visit(rabbit, baldEagle)\nTEXT: The rabbit visits the cat.\nFOL: Visit(rabbit, cat)\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x. (Visit(x, cat) -> Needs(x, cat))\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (Visit(x, rabbit) -> Visit(rabbit, baldEagle))\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x. ((Visit(x, cat) & Visit(cat, baldEagle)) -> Visit(baldEagle, rabbit))\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x. (Needs(x, cat) -> Needs(x, rabbit))\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x. (Needs(x, baldEagle) -> Visit(x, cat))\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: (Kind(rabbit) & Needs(rabbit, cat)) -> Needs(rabbit, baldEagle)\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x. ((Kind(x) & Needs(x, rabbit)) -> Visit(rabbit, baldEagle))\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x. (Needs(x, rabbit) -> Visit(x, rabbit))\nTEXT: The cat needs the rabbit.\nFOL: Needs(cat, rabbit)\n</EVALUATE>"
  ]
 },
 {
  "index": 58,
  "responses": [
   "<EVALUATE>\nTEXT: For being so cold, it's good Alan can remain nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: Bob is green and cold too.\nFOL: Green(bob) & Cold(bob)\nTEXT: Charlie can be rough and cold, but he is also green, an avid gardener.\nFOL: Rough(charlie) & Cold(charlie) & Green(charlie) & Gardener(charlie)\nTEXT: Harry seems to be round.\nFOL: Round(harry)\nTEXT: A blue, cold natured person will be rough textured.\nFOL: all x. (Blue(x) & Cold(x) -> RoughTextured(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Blue(x) -> Green(x))\nTEXT: Cold people that are big and red are usually nice.\nFOL: all x. (Cold(x) & Big(x) & Red(x) -> Nice(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Cold(x) & Big(x) & Rough(x) -> Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x. ((Round(x) & Green(x) & Nice(x)) -> Red(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: all x. (Cold(x) & Blue(x) & Rough(x) -> Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: all x. (Nice(x) & Green(x) & Big(x) -> Young(x))\nTEXT: Bob is big.\nFOL: Big(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: For being so cold, it's good Alan can remain nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: Bob is green and cold too.\nFOL: Green(bob) & Cold(bob)\nTEXT: Charlie can be rough and cold, but he is also green, an avid gardener.\nFOL: Rough(charlie) & Cold(charlie) & Green(charlie) & Gardener(charlie)\nTEXT: Harry seems to be round.\nFOL: Round(harry)\nTEXT: A blue, cold natured person will be rough textured.\nFOL: all x. (Blue(x) & Cold(x) -> RoughTextured(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Blue(x) -> Green(x))\nTEXT: Cold people that are big and red are usually nice.\nFOL: all x. ((Cold(x) & Big(x) & Red(x)) -> Nice(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Cold(x) & Big(x) & Rough(x) -> Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x. ((Round(x) & Green(x) & Nice(x)) -> Red(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: all x. ((Cold(x) & Blue(x) & Rough(x)) -> Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: all x. (Nice(x) & Green(x) & Big(x) -> Young(x))\nTEXT: Bob is big.\nFOL: Big(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: For being so cold, it's good Alan can remain nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: Bob is green and cold too.\nFOL: Green(bob) & Cold(bob)\nTEXT: Charlie can be rough and cold, but he is also green, an avid gardener.\nFOL: Rough(charlie) & Cold(charlie) & Green(charlie) & Gardener(charlie)\nTEXT: Harry seems to be round.\nFOL: Round(harry)\nTEXT: A blue, cold natured person will be rough textured.\nFOL: all x. (Blue(x) & Cold(x) -> RoughTextured(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Blue(x) -> Green(x))\nTEXT: Cold people that are big and red are usually nice.\nFOL: all x. (Cold(x) & Big(x) & Red(x) -> Nice(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Cold(x) & Big(x) & Rough(x) -> Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x. (Round(x) & Green(x) & Nice(x) -> Red(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: all x. (Cold(x) & Blue(x) & Rough(x) -> Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: all x. (Nice(x) & Green(x) & Big(x) -> Young(x))\nTEXT: Bob is big.\nFOL: Big(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: For being so cold, it's good Alan can remain nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: Bob is green and cold too.\nFOL: Green(bob) & Cold(bob)\nTEXT: Charlie can be rough and cold, but he is also green, an avid gardener.\nFOL: Rough(charlie) & Cold(charlie) & Green(charlie) & Gardener(charlie)\nTEXT: Harry seems to be round.\nFOL: Round(harry)\nTEXT: A blue, cold natured person will be rough textured.\nFOL: all x. (Blue(x) & Cold(x) -> RoughTextured(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Blue(x) -> Green(x))\nTEXT: Cold people that are big and red are usually nice.\nFOL: all x. ((Cold(x) & Big(x) & Red(x)) -> Nice(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Cold(x) & Big(x) & Rough(x) -> Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x. ((Round(x) & Green(x) & Nice(x)) -> Red(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: all x. (Cold(x) & Blue(x) & Rough(x) -> Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: all x. (Nice(x) & Green(x) & Big(x) -> Young(x))\nTEXT: Bob is big.\nFOL: Big(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: For being so cold, it's good Alan can remain nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: Bob is green and cold too.\nFOL: Green(bob) & Cold(bob)\nTEXT: Charlie can be rough and cold, but he is also green, an avid gardener.\nFOL: (Rough(charlie) & Cold(charlie)) | (Green(charlie) & Gardener(charlie))\nTEXT: Harry seems to be round.\nFOL: Round(harry)\nTEXT: A blue, cold natured person will be rough textured.\nFOL: all x. (Blue(x) & Cold(x) -> RoughTextured(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Blue(x) -> Green(x))\nTEXT: Cold people that are big and red are usually nice.\nFOL: all x. ((Cold(x) & Big(x) & Red(x)) -> Nice(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Cold(x) & Big(x) & Rough(x) -> Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x. ((Round(x) & Green(x) & Nice(x)) -> Red(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: all x. ((Cold(x) & Blue(x) & Rough(x)) -> Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: all x. (Nice(x) & Green(x) & Big(x) -> Young(x))\nTEXT: Bob is big.\nFOL: Big(bob)\n</EVALUATE>"
  ]
 },
 {
  "index": 59,
  "responses": [
   "<EVALUATE>\nTEXT: The bear chases the dog.\nFOL: Chases(bear, dog)\nTEXT: The bear eats the dog.\nFOL: Eats(bear, dog)\nTEXT: The bear is round.\nFOL: Round(bear)\nTEXT: The bear needs the mouse.\nFOL: Needs(bear, mouse)\nTEXT: The dog eats the mouse.\nFOL: Eats(dog, mouse)\nTEXT: The dog is kind.\nFOL: Kind(dog)\nTEXT: The dog is rough.\nFOL: Rough(dog)\nTEXT: The dog is round.\nFOL: Round(dog)\nTEXT: The dog needs the bear.\nFOL: Needs(dog, bear)\nTEXT: The dog needs the mouse.\nFOL: Needs(dog, mouse)\nTEXT: The mouse chases the bear.\nFOL: Chases(mouse, bear)\nTEXT: The mouse eats the bear.\nFOL: Eats(mouse, bear)\nTEXT: The mouse eats the dog.\nFOL: Eats(mouse, dog)\nTEXT: The mouse is round.\nFOL: Round(mouse)\nTEXT: The mouse needs the dog.\nFOL: Needs(mouse, dog)\nTEXT: If someone chases the bear then they are kind.\nFOL: all x. (Chases(x, bear) -> Kind(x))\nTEXT: If someone is round then they chase the bear.\nFOL: all x. (Round(x) -> Chases(x, bear))\nTEXT: All kind people are rough.\nFOL: all x. (Kind(x) -> Rough(x))\nTEXT: If the mouse is green then the mouse chases the dog.\nFOL: (Green(mouse) -> Chases(mouse, dog))\nTEXT: If someone needs the bear then they need the mouse.\nFOL: all x. (Needs(x, bear) -> Needs(x, mouse))\nTEXT: If someone eats the bear and the bear is red then they are round.\nFOL: all x. ((Eats(x, bear) & Red(bear)) -> Round(x))\nTEXT: The bear is green.\nFOL: Green(bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear chases the dog.\nFOL: Chase(bear, dog)\nTEXT: The bear eats the dog.\nFOL: Eat(bear, dog)\nTEXT: The bear is round.\nFOL: Round(bear)\nTEXT: The bear needs the mouse.\nFOL: Need(bear, mouse)\nTEXT: The dog eats the mouse.\nFOL: Eat(dog, mouse)\nTEXT: The dog is kind.\nFOL: Kind(dog)\nTEXT: The dog is rough.\nFOL: Rough(dog)\nTEXT: The dog is round.\nFOL: Round(dog)\nTEXT: The dog needs the bear.\nFOL: Need(dog, bear)\nTEXT: The dog needs the mouse.\nFOL: Need(dog, mouse)\nTEXT: The mouse chases the bear.\nFOL: Chase(mouse, bear)\nTEXT: The mouse eats the bear.\nFOL: Eat(mouse, bear)\nTEXT: The mouse eats the dog.\nFOL: Eat(mouse, dog)\nTEXT: The mouse is round.\nFOL: Round(mouse)\nTEXT: The mouse needs the dog.\nFOL: Need(mouse, dog)\nTEXT: If someone chases the bear then they are kind.\nFOL: all x. (Chase(x, bear) -> Kind(x))\nTEXT: If someone is round then they chase the bear.\nFOL: all x. (Round(x) -> Chase(x, bear))\nTEXT: All kind people are rough.\nFOL: all x. (Kind(x) -> Rough(x))\nTEXT: If the mouse is green then the mouse chases the dog.\nFOL: (Green(mouse) -> Chase(mouse, dog))\nTEXT: If someone needs the bear then they need the mouse.\nFOL: all x. (Need(x, bear) -> Need(x, mouse))\nTEXT: If someone eats the bear and the bear is red then they are round.\nFOL: all x. ((Eat(x, bear) & Red(bear)) -> Round(x))\nTEXT: The bear is green.\nFOL: Green(bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear chases the dog.\nFOL: Chases(bear, dog)\nTEXT: The bear eats the dog.\nFOL: Eats(bear, dog)\nTEXT: The bear is round.\nFOL: Round(bear)\nTEXT: The bear needs the mouse.\nFOL: Needs(bear, mouse)\nTEXT: The dog eats the mouse.\nFOL: Eats(dog, mouse)\nTEXT: The dog is kind.\nFOL: Kind(dog)\nTEXT: The dog is rough.\nFOL: Rough(dog)\nTEXT: The dog is round.\nFOL: Round(dog)\nTEXT: The dog needs the bear.\nFOL: Needs(dog, bear)\nTEXT: The dog needs the mouse.\nFOL: Needs(dog, mouse)\nTEXT: The mouse chases the bear.\nFOL: Chases(mouse, bear)\nTEXT: The mouse eats the bear.\nFOL: Eats(mouse, bear)\nTEXT: The mouse eats the dog.\nFOL: Eats(mouse, dog)\nTEXT: The mouse is round.\nFOL: Round(mouse)\nTEXT: The mouse needs the dog.\nFOL: Needs(mouse, dog)\nTEXT: If someone chases the bear then they are kind.\nFOL: all x. (Chases(x, bear) -> Kind(x))\nTEXT: If someone is round then they chase the bear.\nFOL: all x. (Round(x) -> Chases(x, bear))\nTEXT: All kind people are rough.\nFOL: all x. (Kind(x) -> Rough(x))\nTEXT: If the mouse is green then the mouse chases the dog.\nFOL: (Green(mouse) -> Chases(mouse, dog))\nTEXT: If someone needs the bear then they need the mouse.\nFOL: all x. (Needs(x, bear) -> Needs(x, mouse))\nTEXT: If someone eats the bear and the bear is red then they are round.\nFOL: all x. (Eats(x, bear) & Red(bear) -> Round(x))\nTEXT: The bear is green.\nFOL: Green(bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear chases the dog.\nFOL: Chases(bear, dog)\nTEXT: The bear eats the dog.\nFOL: Eats(bear, dog)\nTEXT: The bear is round.\nFOL: Round(bear)\nTEXT: The bear needs the mouse.\nFOL: Needs(bear, mouse)\nTEXT: The dog eats the mouse.\nFOL: Eats(dog, mouse)\nTEXT: The dog is kind.\nFOL: Kind(dog)\nTEXT: The dog is rough.\nFOL: Rough(dog)\nTEXT: The dog is round.\nFOL: Round(dog)\nTEXT: The dog needs the bear.\nFOL: Needs(dog, bear)\nTEXT: The dog needs the mouse.\nFOL: Needs(dog, mouse)\nTEXT: The mouse chases the bear.\nFOL: Chases(mouse, bear)\nTEXT: The mouse eats the bear.\nFOL: Eats(mouse, bear)\nTEXT: The mouse eats the dog.\nFOL: Eats(mouse, dog)\nTEXT: The mouse is round.\nFOL: Round(mouse)\nTEXT: The mouse needs the dog.\nFOL: Needs(mouse, dog)\nTEXT: If someone chases the bear then they are kind.\nFOL: all x. (Chases(x, bear) -> Kind(x))\nTEXT: If someone is round then they chase the bear.\nFOL: all x. (Round(x) -> Chases(x, bear))\nTEXT: All kind people are rough.\nFOL: all x. (Kind(x) -> Rough(x))\nTEXT: If the mouse is green then the mouse chases the dog.\nFOL: (Green(mouse) -> Chases(mouse, dog))\nTEXT: If someone needs the bear then they need the mouse.\nFOL: all x. (Needs(x, bear) -> Needs(x, mouse))\nTEXT: If someone eats the bear and the bear is red then they are round.\nFOL: (Eats(x, bear) & Red(bear) -> Round(x))\nTEXT: The bear is green.\nFOL: Green(bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear chases the dog.\nFOL: Chases(bear, dog)\nTEXT: The bear eats the dog.\nFOL: Eats(bear, dog)\nTEXT: The bear is round.\nFOL: Round(bear)\nTEXT: The bear needs the mouse.\nFOL: Needs(bear, mouse)\nTEXT: The dog eats the mouse.\nFOL: Eats(dog, mouse)\nTEXT: The dog is kind.\nFOL: Kind(dog)\nTEXT: The dog is rough.\nFOL: Rough(dog)\nTEXT: The dog is round.\nFOL: Round(dog)\nTEXT: The dog needs the bear.\nFOL: Needs(dog, bear)\nTEXT: The dog needs the mouse.\nFOL: Needs(dog, mouse)\nTEXT: The mouse chases the bear.\nFOL: Chases(mouse, bear)\nTEXT: The mouse eats the bear.\nFOL: Eats(mouse, bear)\nTEXT: The mouse eats the dog.\nFOL: Eats(mouse, dog)\nTEXT: The mouse is round.\nFOL: Round(mouse)\nTEXT: The mouse needs the dog.\nFOL: Needs(mouse, dog)\nTEXT: If someone chases the bear then they are kind.\nFOL: all x. (Chases(x, bear) -> Kind(x))\nTEXT: If someone is round then they chase the bear.\nFOL: all x. (Round(x) -> Chases(x, bear))\nTEXT: All kind people are rough.\nFOL: all x. (Kind(x) -> Rough(x))\nTEXT: If the mouse is green then the mouse chases the dog.\nFOL: all x. (Green(mouse) -> Chases(mouse, dog))\nTEXT: If someone needs the bear then they need the mouse.\nFOL: all x. (Needs(x, bear) -> Needs(x, mouse))\nTEXT: If someone eats the bear and the bear is red then they are round.\nFOL: all x. ((Eats(x, bear) & Red(bear)) -> Round(x))\nTEXT: The bear is green.\nFOL: Green(bear)\n</EVALUATE>"
  ]
 },
 {
  "index": 60,
  "responses": [
   "<EVALUATE>\nTEXT: The bear is not round.\nFOL: -Round(bear)\nTEXT: The bear likes the cow.\nFOL: Likes(bear, cow)\nTEXT: The bear likes the squirrel.\nFOL: Likes(bear, squirrel)\nTEXT: The bear sees the dog.\nFOL: Sees(bear, dog)\nTEXT: The bear visits the cow.\nFOL: Visits(bear, cow)\nTEXT: The cow is not blue.\nFOL: -Blue(cow)\nTEXT: The cow is round.\nFOL: Round(cow)\nTEXT: The cow likes the dog.\nFOL: Likes(cow, dog)\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The dog is nice.\nFOL: Nice(dog)\nTEXT: The dog sees the bear.\nFOL: Sees(dog, bear)\nTEXT: The dog does not visit the bear.\nFOL: -Visits(dog, bear)\nTEXT: The dog visits the cow.\nFOL: Visits(dog, cow)\nTEXT: The dog visits the squirrel.\nFOL: Visits(dog, squirrel)\nTEXT: The squirrel is blue.\nFOL: Blue(squirrel)\nTEXT: The squirrel sees the bear.\nFOL: Sees(squirrel, bear)\nTEXT: If something is round and not kind then it visits the squirrel.\nFOL: all x. ((Round(x) & -Kind(x)) -> Visits(x, squirrel))\nTEXT: If the dog likes the squirrel then the squirrel sees the cow.\nFOL: (Likes(dog, squirrel) -> Sees(squirrel, cow))\nTEXT: If the squirrel is nice and the squirrel visits the bear then the bear is not green.\nFOL: ((Nice(squirrel) & Visits(squirrel, bear)) -> -Green(bear))\nTEXT: If the squirrel sees the dog then the dog does not like the bear.\nFOL: (Sees(squirrel, dog) -> -Likes(dog, bear))\nTEXT: If something visits the cow and the cow is kind then the cow likes the squirrel.\nFOL: all x. ((Visits(x, cow) & Kind(cow)) -> Likes(x, squirrel))\nTEXT: If something likes the cow and the cow does not like the dog then the dog is round.\nFOL: all x. ((Likes(x, cow) & -Likes(cow, dog)) -> Round(dog))\nTEXT: If something is blue then it visits the bear.\nFOL: all x. (Blue(x) -> Visits(x, bear))\nTEXT: If something is kind and it likes the dog then it sees the dog.\nFOL: all x. ((Kind(x) & Likes(x, dog)) -> Sees(x, dog))\nTEXT: The bear does not see the dog.\nFOL: -Sees(bear, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is not round.\nFOL: -Round(bear)\nTEXT: The bear likes the cow.\nFOL: Likes(bear, cow)\nTEXT: The bear likes the squirrel.\nFOL: Likes(bear, squirrel)\nTEXT: The bear sees the dog.\nFOL: Sees(bear, dog)\nTEXT: The bear visits the cow.\nFOL: Visits(bear, cow)\nTEXT: The cow is not blue.\nFOL: -Blue(cow)\nTEXT: The cow is round.\nFOL: Round(cow)\nTEXT: The cow likes the dog.\nFOL: Likes(cow, dog)\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The dog is nice.\nFOL: Nice(dog)\nTEXT: The dog sees the bear.\nFOL: Sees(dog, bear)\nTEXT: The dog does not visit the bear.\nFOL: -Visits(dog, bear)\nTEXT: The dog visits the cow.\nFOL: Visits(dog, cow)\nTEXT: The dog visits the squirrel.\nFOL: Visits(dog, squirrel)\nTEXT: The squirrel is blue.\nFOL: Blue(squirrel)\nTEXT: The squirrel sees the bear.\nFOL: Sees(squirrel, bear)\nTEXT: If something is round and not kind then it visits the squirrel.\nFOL: all x. ((Round(x) & -Kind(x)) -> Visits(x, squirrel))\nTEXT: If the dog likes the squirrel then the squirrel sees the cow.\nFOL: (Likes(dog, squirrel) -> Sees(squirrel, cow))\nTEXT: If the squirrel is nice and the squirrel visits the bear then the bear is not green.\nFOL: ((Nice(squirrel) & Visits(squirrel, bear)) -> -Green(bear))\nTEXT: If the squirrel sees the dog then the dog does not like the bear.\nFOL: (Sees(squirrel, dog) -> -Likes(dog, bear))\nTEXT: If something visits the cow and the cow is kind then the cow likes the squirrel.\nFOL: all x. ((Visits(x, cow) & Kind(cow)) -> Likes(cow, squirrel))\nTEXT: If something likes the cow and the cow does not like the dog then the dog is round.\nFOL: all x. ((Likes(x, cow) & -Likes(cow, dog)) -> Round(dog))\nTEXT: If something is blue then it visits the bear.\nFOL: all x. (Blue(x) -> Visits(x, bear))\nTEXT: If something is kind and it likes the dog then it sees the dog.\nFOL: all x. ((Kind(x) & Likes(x, dog)) -> Sees(x, dog))\nTEXT: The bear does not see the dog.\nFOL: -Sees(bear, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is not round.\nFOL: -Round(bear)\nTEXT: The bear likes the cow.\nFOL: Likes(bear, cow)\nTEXT: The bear likes the squirrel.\nFOL: Likes(bear, squirrel)\nTEXT: The bear sees the dog.\nFOL: Sees(bear, dog)\nTEXT: The bear visits the cow.\nFOL: Visits(bear, cow)\nTEXT: The cow is not blue.\nFOL: -Blue(cow)\nTEXT: The cow is round.\nFOL: Round(cow)\nTEXT: The cow likes the dog.\nFOL: Likes(cow, dog)\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The dog is nice.\nFOL: Nice(dog)\nTEXT: The dog sees the bear.\nFOL: Sees(dog, bear)\nTEXT: The dog does not visit the bear.\nFOL: -Visits(dog, bear)\nTEXT: The dog visits the cow.\nFOL: Visits(dog, cow)\nTEXT: The dog visits the squirrel.\nFOL: Visits(dog, squirrel)\nTEXT: The squirrel is blue.\nFOL: Blue(squirrel)\nTEXT: The squirrel sees the bear.\nFOL: Sees(squirrel, bear)\nTEXT: If something is round and not kind then it visits the squirrel.\nFOL: (Round(x) & -Kind(x) -> Visits(x, squirrel))\nTEXT: If the dog likes the squirrel then the squirrel sees the cow.\nFOL: (Likes(dog, squirrel) -> Sees(squirrel, cow))\nTEXT: If the squirrel is nice and the squirrel visits the bear then the bear is not green.\nFOL: ((Nice(squirrel) & Visits(squirrel, bear)) -> -Green(bear))\nTEXT: If the squirrel sees the dog then the dog does not like the bear.\nFOL: (Sees(squirrel, dog) -> -Likes(dog, bear))\nTEXT: If something visits the cow and the cow is kind then the cow likes the squirrel.\nFOL: ((Visits(x, cow) & Kind(cow)) -> Likes(x, squirrel))\nTEXT: If something likes the cow and the cow does not like the dog then the dog is round.\nFOL: ((Likes(x, cow) & -Likes(cow, dog)) -> Round(dog))\nTEXT: If something is blue then it visits the bear.\nFOL: (Blue(x) -> Visits(x, bear))\nTEXT: If something is kind and it likes the dog then it sees the dog.\nFOL: ((Kind(x) & Likes(x, dog)) -> Sees(x, dog))\nTEXT: The bear does not see the dog.\nFOL: -Sees(bear, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is not round.\nFOL: -Round(bear)\nTEXT: The bear likes the cow.\nFOL: Likes(bear, cow)\nTEXT: The bear likes the squirrel.\nFOL: Likes(bear, squirrel)\nTEXT: The bear sees the dog.\nFOL: Sees(bear, dog)\nTEXT: The bear visits the cow.\nFOL: Visits(bear, cow)\nTEXT: The cow is not blue.\nFOL: -Blue(cow)\nTEXT: The cow is round.\nFOL: Round(cow)\nTEXT: The cow likes the dog.\nFOL: Likes(cow, dog)\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The dog is nice.\nFOL: Nice(dog)\nTEXT: The dog sees the bear.\nFOL: Sees(dog, bear)\nTEXT: The dog does not visit the bear.\nFOL: -Visits(dog, bear)\nTEXT: The dog visits the cow.\nFOL: Visits(dog, cow)\nTEXT: The dog visits the squirrel.\nFOL: Visits(dog, squirrel)\nTEXT: The squirrel is blue.\nFOL: Blue(squirrel)\nTEXT: The squirrel sees the bear.\nFOL: Sees(squirrel, bear)\nTEXT: If something is round and not kind then it visits the squirrel.\nFOL: (Round(x) & -Kind(x) -> Visits(x, squirrel))\nTEXT: If the dog likes the squirrel then the squirrel sees the cow.\nFOL: (Likes(dog, squirrel) -> Sees(squirrel, cow))\nTEXT: If the squirrel is nice and the squirrel visits the bear then the bear is not green.\nFOL: ((Nice(squirrel) & Visits(squirrel, bear)) -> -Green(bear))\nTEXT: If the squirrel sees the dog then the dog does not like the bear.\nFOL: (Sees(squirrel, dog) -> -Likes(dog, bear))\nTEXT: If something visits the cow and the cow is kind then the cow likes the squirrel.\nFOL: (Visits(x, cow) & Kind(cow) -> Likes(x, squirrel))\nTEXT: If something likes the cow and the cow does not like the dog then the dog is round.\nFOL: ((Likes(x, cow) & -Likes(cow, dog)) -> Round(dog))\nTEXT: If something is blue then it visits the bear.\nFOL: (Blue(x) -> Visits(x, bear))\nTEXT: If something is kind and it likes the dog then it sees the dog.\nFOL: (Kind(x) & Likes(x, dog) -> Sees(x, dog))\nTEXT: The bear does not see the dog.\nFOL: -Sees(bear, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is not round.\nFOL: -Round(bear)\nTEXT: The bear likes the cow.\nFOL: Likes(bear, cow)\nTEXT: The bear likes the squirrel.\nFOL: Likes(bear, squirrel)\nTEXT: The bear sees the dog.\nFOL: Sees(bear, dog)\nTEXT: The bear visits the cow.\nFOL: Visits(bear, cow)\nTEXT: The cow is not blue.\nFOL: -Blue(cow)\nTEXT: The cow is round.\nFOL: Round(cow)\nTEXT: The cow likes the dog.\nFOL: Likes(cow, dog)\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The dog is nice.\nFOL: Nice(dog)\nTEXT: The dog sees the bear.\nFOL: Sees(dog, bear)\nTEXT: The dog does not visit the bear.\nFOL: -Visits(dog, bear)\nTEXT: The dog visits the cow.\nFOL: Visits(dog, cow)\nTEXT: The dog visits the squirrel.\nFOL: Visits(dog, squirrel)\nTEXT: The squirrel is blue.\nFOL: Blue(squirrel)\nTEXT: The squirrel sees the bear.\nFOL: Sees(squirrel, bear)\nTEXT: If something is round and not kind then it visits the squirrel.\nFOL: all x. ((Round(x) & -Kind(x)) -> Visits(x, squirrel))\nTEXT: If the dog likes the squirrel then the squirrel sees the cow.\nFOL: Likes(dog, squirrel) -> Sees(squirrel, cow)\nTEXT: If the squirrel is nice and the squirrel visits the bear then the bear is not green.\nFOL: Nice(squirrel) & Visits(squirrel, bear) -> -Green(bear)\nTEXT: If the squirrel sees the dog then the dog does not like the bear.\nFOL: Sees(squirrel, dog) -> -Likes(dog, bear)\nTEXT: If something visits the cow and the cow is kind then the cow likes the squirrel.\nFOL: all x. (Visits(x, cow) & Kind(cow) -> Likes(x, squirrel))\nTEXT: If something likes the cow and the cow does not like the dog then the dog is round.\nFOL: all x. (Likes(x, cow) & -Likes(cow, dog) -> Round(dog))\nTEXT: If something is blue then it visits the bear.\nFOL: all x. (Blue(x) -> Visits(x, bear))\nTEXT: If something is kind and it likes the dog then it sees the dog.\nFOL: all x. (Kind(x) & Likes(x, dog) -> Sees(x, dog))\nTEXT: The bear does not see the dog.\nFOL: -Sees(bear, dog)\n</EVALUATE>"
  ]
 },
 {
  "index": 61,
  "responses": [
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x. (Young(x) & Cold(x) -> Alan(x))\nTEXT: Charlie is kind and nice and looks green.\nFOL: Kind(charlie) & Nice(charlie) & Green(charlie)\nTEXT: Fred may be round, but he is also kind.\nFOL: (Round(fred) & -Kind(fred)) | (Round(fred) & Kind(fred))\nTEXT: Harry seems to be round.\nFOL: Round(harry)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & (Nice(x) & -Red(x)) | (-Nice(x) & Red(x)))\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: all x. (Young(x) & ColdToOthers(x) & GreenWithEnvy(x) -> Nice(x))\nTEXT: People who are young and blue are also red.\nFOL: all x. (Young(x) & Blue(x) -> Red(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Big(x) & Rough(x) & Cold(x) -> Red(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (YoungAtHeart(x) & Young(x) -> VeryRound(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Young(x) & RedHands(x) -> RoughAroundEdges(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & ColdBehavior(x) -> Blue(x))\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x. (Young(x) & Cold(x) -> Alan(x))\nTEXT: Charlie is kind and nice and looks green.\nFOL: Kind(charlie) & Nice(charlie) & Green(charlie)\nTEXT: Fred may be round, but he is also kind.\nFOL: (Round(fred) & -Kind(fred)) | (Round(fred) & Kind(fred))\nTEXT: Harry seems to be round.\nFOL: Round(harry)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & (Nice(x) & -Red(x)) | (-Nice(x) & Red(x)))\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: all x. (Young(x) & Cold(x) & Green(x) -> Nice(x))\nTEXT: People who are young and blue are also red.\nFOL: all x. (Young(x) & Blue(x) -> Red(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Big(x) & Rough(x) & Cold(x) -> Red(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (YoungAtHeart(x) & Young(x) -> Round(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Young(x) & RedHands(x) -> Rough(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & ColdBehavior(x) -> Blue(x))\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x. (Young(x) & Cold(x) -> Alan(x))\nTEXT: Charlie is kind and nice and looks green.\nFOL: Kind(charlie) & Nice(charlie) & Green(charlie)\nTEXT: Fred may be round, but he is also kind.\nFOL: (Round(fred) & -Kind(fred)) | (Round(fred) & Kind(fred))\nTEXT: Harry seems to be round.\nFOL: Round(harry)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & (Nice(x) & -Red(x)) | (-Nice(x) & Red(x)))\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: all x. (Young(x) & ColdToOthers(x) & GreenWithEnvy(x) -> Nice(x))\nTEXT: People who are young and blue are also red.\nFOL: all x. (Young(x) & Blue(x) -> Red(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Big(x) & Rough(x) & Cold(x) -> Red(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (YoungAtHeart(x) & Young(x) -> VeryRound(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Young(x) & RedHands(x) -> RoughAroundTheEdges(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & ColdBehavior(x) -> Blue(x))\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x. (Young(x) & Cold(x) -> Alan(x))\nTEXT: Charlie is kind and nice and looks green.\nFOL: Kind(charlie) & Nice(charlie) & Green(charlie)\nTEXT: Fred may be round, but he is also kind.\nFOL: (Round(fred) & -Kind(fred)) | (Round(fred) & Kind(fred))\nTEXT: Harry seems to be round.\nFOL: Round(harry)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & (Nice(x) & -Red(x)) | (-Nice(x) & Red(x)))\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: all x. (Young(x) & ColdToOthers(x) & GreenWithEnvy(x) -> Nice(x))\nTEXT: People who are young and blue are also red.\nFOL: all x. (Young(x) & Blue(x) -> Red(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Big(x) & Rough(x) & Cold(x) -> Red(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (YoungAtHeart(x) & Young(x) -> Round(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Young(x) & RedHands(x) -> Rough(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & ColdBehavior(x) -> Blue(x))\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: all x. (Young(x) & Cold(x) -> Alan(x))\nTEXT: Charlie is kind and nice and looks green.\nFOL: Kind(charlie) & Nice(charlie) & Green(charlie)\nTEXT: Fred may be round, but he is also kind.\nFOL: (Round(fred) & -Kind(fred)) | (Round(fred) & Kind(fred))\nTEXT: Harry seems to be round.\nFOL: Round(harry)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & (Nice(x) & -Red(x)) | (-Nice(x) & Red(x)))\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: all x. (Young(x) & ColdToOthers(x) & GreenWithEnvy(x) -> Nice(x))\nTEXT: People who are young and blue are also red.\nFOL: all x. (Young(x) & Blue(x) -> Red(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Big(x) & Rough(x) & Cold(x) -> Red(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: all x. (YoungAtHeart(x) & Young(x) -> VeryRound(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Young(x) & RedHands(x) -> RoughAroundEdges(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & ColdBehaviour(x) -> Blue(x))\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\n</EVALUATE>"
  ]
 },
 {
  "index": 62,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is kind and nice and looks green.\nFOL: Kind(bob) & Nice(bob) & LooksGreen(bob)\nTEXT: Eric, who is relatively young, is also pretty big and tends to be cold.\nFOL: RelativelyYoung(eric) -> (PrettyBig(eric) & TendsToBeCold(eric))\nTEXT: Fred is kind.\nFOL: Kind(fred)\nTEXT: He is also very cold and blue.\nFOL: VeryCold(he) & Blue(he)\nTEXT: That guy Harry sure is nice.\nFOL: Nice(harry)\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: all x. ((Big(x) & Kind(x) & Cold(x)) -> Red(x))\nTEXT: Kind red people are green on the inside.\nFOL: all x. (Kind(x) & Red(x) -> GreenOnTheInside(x))\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: all x. (Kind(x) & (Cold(x) | Blue(x)) -> VeryBig(x))\nTEXT: Kind red and round people often look green.\nFOL: all x. (Kind(x) & Red(x) & Round(x) -> OftenLookGreen(x))\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: (FeelsCold(x) & LooksRed(x)) -> UsuallyYoung(x)\nTEXT: Bob is blue.\nFOL: Blue(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind and nice and looks green.\nFOL: Kind(bob) & Nice(bob) & LooksGreen(bob)\nTEXT: Eric, who is relatively young, is also pretty big and tends to be cold.\nFOL: RelativelyYoung(eric) & PrettyBig(eric) & TendsToBeCold(eric)\nTEXT: Fred is kind.\nFOL: Kind(fred)\nTEXT: He is also very cold and blue.\nFOL: VeryCold(he) & Blue(he)\nTEXT: That guy Harry sure is nice.\nFOL: Nice(harry)\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: all x. ((Big(x) & Kind(x) & Cold(x)) -> Red(x))\nTEXT: Kind red people are green on the inside.\nFOL: all x. (Kind(x) & Red(x) -> GreenOnTheInside(x))\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: all x. (Kind(x) & (Cold(x) | Blue(x)) -> VeryBig(x))\nTEXT: Kind red and round people often look green.\nFOL: all x. (Kind(x) & Red(x) & Round(x) -> OftenLookGreen(x))\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: all x. (Kind(x) & Cold(x) & Red(x) -> UsuallyYoung(x))\nTEXT: Bob is blue.\nFOL: Blue(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind and nice and looks green.\nFOL: Kind(bob) & Nice(bob) & LooksGreen(bob)\nTEXT: Eric, who is relatively young, is also pretty big and tends to be cold.\nFOL: RelativelyYoung(eric) & PrettyBig(eric) & TendsToBeCold(eric)\nTEXT: Fred is kind.\nFOL: Kind(fred)\nTEXT: He is also very cold and blue.\nFOL: VeryCold(he) & Blue(he)\nTEXT: That guy Harry sure is nice.\nFOL: Nice(harry)\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: all x. ((Big(x) & Kind(x) & Cold(x)) -> Red(x))\nTEXT: Kind red people are green on the inside.\nFOL: all x. (Kind(x) & Red(x) -> GreenOnTheInside(x))\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: all x. (Kind(x) & (Cold(x) | Blue(x)) -> VeryBig(x))\nTEXT: Kind red and round people often look green.\nFOL: all x. (Kind(x) & Red(x) & Round(x) -> OftenLookGreen(x))\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: all x. ((Kind(x) & Cold(x) & Red(x)) -> UsuallyYoung(x))\nTEXT: Bob is blue.\nFOL: Blue(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind and nice and looks green.\nFOL: Kind(bob) & Nice(bob) & LooksGreen(bob)\nTEXT: Eric, who is relatively young, is also pretty big and tends to be cold.\nFOL: RelativelyYoung(eric) & PrettyBig(eric) & TendsToBeCold(eric)\nTEXT: Fred is kind.\nFOL: Kind(fred)\nTEXT: He is also very cold and blue.\nFOL: VeryCold(he) & Blue(he)\nTEXT: That guy Harry sure is nice.\nFOL: Nice(harry)\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: all x. ((Big(x) & Kind(x) & Cold(x)) -> Red(x))\nTEXT: Kind red people are green on the inside.\nFOL: all x. (Kind(x) & Red(x) -> GreenOnTheInside(x))\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: all x. (Kind(x) & (Cold(x) | Blue(x)) -> VeryBig(x))\nTEXT: Kind red and round people often look green.\nFOL: all x. ((Kind(x) & Red(x) & Round(x)) -> LooksGreen(x))\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: all x. ((Kind(x) & Cold(x) & Red(x)) -> UsuallyYoung(x))\nTEXT: Bob is blue.\nFOL: Blue(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind and nice and looks green.\nFOL: Kind(bob) & Nice(bob) & LooksGreen(bob)\nTEXT: Eric, who is relatively young, is also pretty big and tends to be cold.\nFOL: RelativelyYoung(eric) & PrettyBig(eric) & TendsToBeCold(eric)\nTEXT: Fred is kind.\nFOL: Kind(fred)\nTEXT: He is also very cold and blue.\nFOL: VeryCold(he) & Blue(he)\nTEXT: That guy Harry sure is nice.\nFOL: Nice(harry)\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: all x. ((Big(x) & Kind(x) & Cold(x)) -> Red(x))\nTEXT: Kind red people are green on the inside.\nFOL: all x. (Kind(x) & Red(x) -> GreenOnTheInside(x))\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: all x. (Kind(x) & (Cold(x) | Blue(x)) -> VeryBig(x))\nTEXT: Kind red and round people often look green.\nFOL: all x. ((Kind(x) & Red(x) & Round(x)) -> LooksGreen(x))\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: all x. ((Kind(x) & Cold(x) & LooksRed(x)) -> UsuallyYoung(x))\nTEXT: Bob is blue.\nFOL: Blue(bob)\n</EVALUATE>"
  ]
 },
 {
  "index": 63,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is red.\nFOL: Red(baldEagle)\nTEXT: The cat chases the rabbit.\nFOL: Chases(cat, rabbit)\nTEXT: The rabbit does not eat the bald eagle.\nFOL: -Eats(rabbit, baldEagle)\nTEXT: The squirrel chases the rabbit.\nFOL: Chases(squirrel, rabbit)\nTEXT: If someone likes the bald eagle then the bald eagle chases the cat.\nFOL: all x. (Likes(x, baldEagle) -> Chases(baldEagle, cat))\nTEXT: If someone eats the rabbit then the rabbit does not chase the squirrel.\nFOL: all x. (Eats(x, rabbit) -> -Chases(rabbit, squirrel))\nTEXT: If someone likes the cat and they are not blue then the cat is nice.\nFOL: all x. ((Likes(x, cat) & -Blue(x)) -> Nice(cat))\nTEXT: If someone is red then they like the bald eagle.\nFOL: all x. (Red(x) -> Likes(x, baldEagle))\nTEXT: If someone chases the cat then they eat the squirrel.\nFOL: all x. (Chases(x, cat) -> Eats(x, squirrel))\nTEXT: If someone is kind and they do not eat the rabbit then the rabbit eats the squirrel.\nFOL: all x. ((Kind(x) & -Eats(x, rabbit)) -> Eats(rabbit, squirrel))\nTEXT: If someone eats the squirrel and they are not red then the squirrel is not nice.\nFOL: all x. ((Eats(x, squirrel) & -Red(x)) -> -Nice(squirrel))\nTEXT: If someone eats the bald eagle then they chase the cat.\nFOL: all x. (Eats(x, baldEagle) -> Chases(x, cat))\nTEXT: The squirrel likes the rabbit.\nFOL: Likes(squirrel, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is red.\nFOL: Red(baldEagle)\nTEXT: The cat chases the rabbit.\nFOL: Chases(cat, rabbit)\nTEXT: The rabbit does not eat the bald eagle.\nFOL: -Eat(rabbit, baldEagle)\nTEXT: The squirrel chases the rabbit.\nFOL: Chases(squirrel, rabbit)\nTEXT: If someone likes the bald eagle then the bald eagle chases the cat.\nFOL: all x. (Likes(x, baldEagle) -> Chases(baldEagle, cat))\nTEXT: If someone eats the rabbit then the rabbit does not chase the squirrel.\nFOL: all x. (Eat(x, rabbit) -> -Chases(rabbit, squirrel))\nTEXT: If someone likes the cat and they are not blue then the cat is nice.\nFOL: all x. ((Likes(x, cat) & -Blue(x)) -> Nice(cat))\nTEXT: If someone is red then they like the bald eagle.\nFOL: all x. (Red(x) -> Likes(x, baldEagle))\nTEXT: If someone chases the cat then they eat the squirrel.\nFOL: all x. (Chases(x, cat) -> Eat(x, squirrel))\nTEXT: If someone is kind and they do not eat the rabbit then the rabbit eats the squirrel.\nFOL: all x. ((Kind(x) & -Eat(x, rabbit)) -> Eat(rabbit, squirrel))\nTEXT: If someone eats the squirrel and they are not red then the squirrel is not nice.\nFOL: all x. ((Eat(x, squirrel) & -Red(x)) -> -Nice(squirrel))\nTEXT: If someone eats the bald eagle then they chase the cat.\nFOL: all x. (Eat(x, baldEagle) -> Chases(x, cat))\nTEXT: The squirrel likes the rabbit.\nFOL: Likes(squirrel, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is red.\nFOL: Red(baldEagle)\nTEXT: The cat chases the rabbit.\nFOL: Chases(cat, rabbit)\nTEXT: The rabbit does not eat the bald eagle.\nFOL: -Eats(rabbit, baldEagle)\nTEXT: The squirrel chases the rabbit.\nFOL: Chases(squirrel, rabbit)\nTEXT: If someone likes the bald eagle then the bald eagle chases the cat.\nFOL: all x. (Likes(x, baldEagle) -> Chases(baldEagle, cat))\nTEXT: If someone eats the rabbit then the rabbit does not chase the squirrel.\nFOL: all x. (Eats(x, rabbit) -> -Chases(rabbit, squirrel))\nTEXT: If someone likes the cat and they are not blue then the cat is nice.\nFOL: all x. (Likes(x, cat) & -Blue(x) -> Nice(cat))\nTEXT: If someone is red then they like the bald eagle.\nFOL: all x. (Red(x) -> Likes(x, baldEagle))\nTEXT: If someone chases the cat then they eat the squirrel.\nFOL: all x. (Chases(x, cat) -> Eats(x, squirrel))\nTEXT: If someone is kind and they do not eat the rabbit then the rabbit eats the squirrel.\nFOL: all x. (Kind(x) & -Eats(x, rabbit) -> Eats(rabbit, squirrel))\nTEXT: If someone eats the squirrel and they are not red then the squirrel is not nice.\nFOL: all x. (Eats(x, squirrel) & -Red(x) -> -Nice(squirrel))\nTEXT: If someone eats the bald eagle then they chase the cat.\nFOL: all x. (Eats(x, baldEagle) -> Chases(x, cat))\nTEXT: The squirrel likes the rabbit.\nFOL: Likes(squirrel, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is red.\nFOL: Red(baldEagle)\nTEXT: The cat chases the rabbit.\nFOL: Chases(cat, rabbit)\nTEXT: The rabbit does not eat the bald eagle.\nFOL: -Eats(rabbit, baldEagle)\nTEXT: The squirrel chases the rabbit.\nFOL: Chases(squirrel, rabbit)\nTEXT: If someone likes the bald eagle then the bald eagle chases the cat.\nFOL: all x. (Likes(x, baldEagle) -> Chases(baldEagle, cat))\nTEXT: If someone eats the rabbit then the rabbit does not chase the squirrel.\nFOL: all x. (Eats(x, rabbit) -> -Chases(rabbit, squirrel))\nTEXT: If someone likes the cat and they are not blue then the cat is nice.\nFOL: all x. (Likes(x, cat) & -Blue(x) -> Nice(cat))\nTEXT: If someone is red then they like the bald eagle.\nFOL: all x. (Red(x) -> Likes(x, baldEagle))\nTEXT: If someone chases the cat then they eat the squirrel.\nFOL: all x. (Chases(x, cat) -> Eats(x, squirrel))\nTEXT: If someone is kind and they do not eat the rabbit then the rabbit eats the squirrel.\nFOL: all x. ((Kind(x) & -Eats(x, rabbit)) -> Eats(rabbit, squirrel))\nTEXT: If someone eats the squirrel and they are not red then the squirrel is not nice.\nFOL: all x. (Eats(x, squirrel) & -Red(x) -> -Nice(squirrel))\nTEXT: If someone eats the bald eagle then they chase the cat.\nFOL: all x. (Eats(x, baldEagle) -> Chases(x, cat))\nTEXT: The squirrel likes the rabbit.\nFOL: Likes(squirrel, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is red.\nFOL: Red(baldEagle)\nTEXT: The cat chases the rabbit.\nFOL: Chases(cat, rabbit)\nTEXT: The rabbit does not eat the bald eagle.\nFOL: -Eat(rabbit, baldEagle)\nTEXT: The squirrel chases the rabbit.\nFOL: Chases(squirrel, rabbit)\nTEXT: If someone likes the bald eagle then the bald eagle chases the cat.\nFOL: all x. (Likes(x, baldEagle) -> Chases(baldEagle, cat))\nTEXT: If someone eats the rabbit then the rabbit does not chase the squirrel.\nFOL: all x. (Eat(x, rabbit) -> -Chase(rabbit, squirrel))\nTEXT: If someone likes the cat and they are not blue then the cat is nice.\nFOL: all x. ((Likes(x, cat) & -Blue(x)) -> Nice(cat))\nTEXT: If someone is red then they like the bald eagle.\nFOL: all x. (Red(x) -> Likes(x, baldEagle))\nTEXT: If someone chases the cat then they eat the squirrel.\nFOL: all x. (Chases(x, cat) -> Eat(x, squirrel))\nTEXT: If someone is kind and they do not eat the rabbit then the rabbit eats the squirrel.\nFOL: all x. ((Kind(x) & -Eat(x, rabbit)) -> Eat(rabbit, squirrel))\nTEXT: If someone eats the squirrel and they are not red then the squirrel is not nice.\nFOL: all x. ((Eat(x, squirrel) & -Red(x)) -> -Nice(squirrel))\nTEXT: If someone eats the bald eagle then they chase the cat.\nFOL: all x. (Eat(x, baldEagle) -> Chases(x, cat))\nTEXT: The squirrel likes the rabbit.\nFOL: Likes(squirrel, rabbit)\n</EVALUATE>"
  ]
 },
 {
  "index": 64,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(bob)\nTEXT: Charlie is furry.\nFOL: Furry(charlie)\nTEXT: Charlie is green.\nFOL: Green(charlie)\nTEXT: Charlie is round.\nFOL: Round(charlie)\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Fiona is young.\nFOL: Young(fiona)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: All furry people are young.\nFOL: all x. (Furry(x) -> Young(x))\nTEXT: If someone is furry and rough then they are round.\nFOL: all x. ((Furry(x) & Rough(x)) -> Round(x))\nTEXT: Green, young people are furry.\nFOL: all x. (Green(x) & Young(x) -> Furry(x))\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: Green, rough people are quiet.\nFOL: all x. (Green(x) & Rough(x) -> Quiet(x))\nTEXT: All young people are rough.\nFOL: all x. (Young(x) -> Rough(x))\nTEXT: If someone is rough then they are furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: Quiet people are rough.\nFOL: all x. (Quiet(x) -> Rough(x))\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(bob)\nTEXT: Charlie is furry.\nFOL: Furry(charlie)\nTEXT: Charlie is green.\nFOL: Green(charlie)\nTEXT: Charlie is round.\nFOL: Round(charlie)\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Fiona is young.\nFOL: Young(fiona)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: All furry people are young.\nFOL: all x. (Furry(x) -> Young(x))\nTEXT: If someone is furry and rough then they are round.\nFOL: all x. ((Furry(x) & Rough(x)) -> Round(x))\nTEXT: Green, young people are furry.\nFOL: all x. ((Green(x) & Young(x)) -> Furry(x))\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: Green, rough people are quiet.\nFOL: all x. ((Green(x) & Rough(x)) -> Quiet(x))\nTEXT: All young people are rough.\nFOL: all x. (Young(x) -> Rough(x))\nTEXT: If someone is rough then they are furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: Quiet people are rough.\nFOL: all x. (Quiet(x) -> Rough(x))\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(bob)\nTEXT: Charlie is furry.\nFOL: Furry(charlie)\nTEXT: Charlie is green.\nFOL: Green(charlie)\nTEXT: Charlie is round.\nFOL: Round(charlie)\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Fiona is young.\nFOL: Young(fiona)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: All furry people are young.\nFOL: all x. (Furry(x) -> Young(x))\nTEXT: If someone is furry and rough then they are round.\nFOL: all x. (Furry(x) & Rough(x) -> Round(x))\nTEXT: Green, young people are furry.\nFOL: all x. (Green(x) & Young(x) -> Furry(x))\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: Green, rough people are quiet.\nFOL: all x. (Green(x) & Rough(x) -> Quiet(x))\nTEXT: All young people are rough.\nFOL: all x. (Young(x) -> Rough(x))\nTEXT: If someone is rough then they are furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: Quiet people are rough.\nFOL: all x. (Quiet(x) -> Rough(x))\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(bob)\nTEXT: Charlie is furry.\nFOL: Furry(charlie)\nTEXT: Charlie is green.\nFOL: Green(charlie)\nTEXT: Charlie is round.\nFOL: Round(charlie)\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Fiona is young.\nFOL: Young(fiona)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: All furry people are young.\nFOL: all x. (Furry(x) -> Young(x))\nTEXT: If someone is furry and rough then they are round.\nFOL: all x. (Furry(x) & Rough(x) -> Round(x))\nTEXT: Green, young people are furry.\nFOL: all x. ((Green(x) & Young(x)) -> Furry(x))\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: Green, rough people are quiet.\nFOL: all x. ((Green(x) & Rough(x)) -> Quiet(x))\nTEXT: All young people are rough.\nFOL: all x. (Young(x) -> Rough(x))\nTEXT: If someone is rough then they are furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: Quiet people are rough.\nFOL: all x. (Quiet(x) -> Rough(x))\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(bob)\nTEXT: Charlie is furry.\nFOL: Furry(charlie)\nTEXT: Charlie is green.\nFOL: Green(charlie)\nTEXT: Charlie is round.\nFOL: Round(charlie)\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Fiona is young.\nFOL: Young(fiona)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: All furry people are young.\nFOL: all x. (Furry(x) -> Young(x))\nTEXT: If someone is furry and rough then they are round.\nFOL: all x. ((Furry(x) & Rough(x)) -> Round(x))\nTEXT: Green, young people are furry.\nFOL: all x. (Green(x) & Young(x) -> Furry(x))\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: Green, rough people are quiet.\nFOL: all x. ((Green(x) & Rough(x)) -> Quiet(x))\nTEXT: All young people are rough.\nFOL: all x. (Young(x) -> Rough(x))\nTEXT: If someone is rough then they are furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: Quiet people are rough.\nFOL: all x. (Quiet(x) -> Rough(x))\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\n</EVALUATE>"
  ]
 },
 {
  "index": 65,
  "responses": [
   "<EVALUATE>\nTEXT: Alan may be round, but he is also kind.\nFOL: (Round(alan) | Kind(alan))\nTEXT: Bob is a round and rough around the edges, and he is also big.\nFOL: (Round(bob) & Rough(bob) & Big(bob))\nTEXT: Dave seems to be round.\nFOL: Round(dave)\nTEXT: Fred may be young but he is nice, wears green shoes and is cold.\nFOL: (Young(fred) | (Nice(fred) & GreenShoes(fred) & Cold(fred)))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: A nice young person who is big can be considered round.\nFOL: all x. ((Nice(x) & Young(x) & Big(x)) -> Round(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Blue(x) -> Green(x))\nTEXT: Most round and cold people are often rough.\nFOL: all x. ((Round(x) & Cold(x)) -> Rough(x))\nTEXT: Nice and green people are often found to be big as well.\nFOL: all x. ((Nice(x) & Green(x)) -> Big(x))\nTEXT: Fred is big.\nFOL: Big(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan may be round, but he is also kind.\nFOL: (Round(alan) | Kind(alan))\nTEXT: Bob is a round and rough around the edges, and he is also big.\nFOL: (Round(bob) & Rough(bob) & Big(bob))\nTEXT: Dave seems to be round.\nFOL: Round(dave)\nTEXT: Fred may be young but he is nice, wears green shoes and is cold.\nFOL: (Young(fred) | Nice(fred) & GreenShoes(fred) & Cold(fred))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: A nice young person who is big can be considered round.\nFOL: all x. ((Nice(x) & Young(x) & Big(x)) -> Round(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Blue(x) -> Green(x))\nTEXT: Most round and cold people are often rough.\nFOL: all x. ((Round(x) & Cold(x)) -> Rough(x))\nTEXT: Nice and green people are often found to be big as well.\nFOL: all x. ((Nice(x) & Green(x)) -> Big(x))\nTEXT: Fred is big.\nFOL: Big(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan may be round, but he is also kind.\nFOL: (Round(alan) | Kind(alan))\nTEXT: Bob is a round and rough around the edges, and he is also big.\nFOL: (Round(bob) & Rough(bob) & Big(bob))\nTEXT: Dave seems to be round.\nFOL: Round(dave)\nTEXT: Fred may be young but he is nice, wears green shoes and is cold.\nFOL: (Young(fred) | Nice(fred) & GreenShoes(fred) & Cold(fred))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: A nice young person who is big can be considered round.\nFOL: all x. (Nice(x) & Young(x) & Big(x) -> Round(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Blue(x) -> Green(x))\nTEXT: Most round and cold people are often rough.\nFOL: all x. (Round(x) & Cold(x) -> Rough(x))\nTEXT: Nice and green people are often found to be big as well.\nFOL: all x. (Nice(x) & Green(x) -> Big(x))\nTEXT: Fred is big.\nFOL: Big(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan may be round, but he is also kind.\nFOL: (Round(alan) | Kind(alan))\nTEXT: Bob is a round and rough around the edges, and he is also big.\nFOL: (Round(bob) & Rough(bob) & Big(bob))\nTEXT: Dave seems to be round.\nFOL: Round(dave)\nTEXT: Fred may be young but he is nice, wears green shoes and is cold.\nFOL: (Young(fred) | Nice(fred) & GreenShoes(fred) & Cold(fred))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: A nice young person who is big can be considered round.\nFOL: all x. (Nice(x) & Young(x) & Big(x) -> Round(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (FeelingBlue(x) -> Green(x))\nTEXT: Most round and cold people are often rough.\nFOL: all x. (Round(x) & Cold(x) -> Rough(x))\nTEXT: Nice and green people are often found to be big as well.\nFOL: all x. (Nice(x) & Green(x) -> Big(x))\nTEXT: Fred is big.\nFOL: Big(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan may be round, but he is also kind.\nFOL: (Round(alan) | Kind(alan))\nTEXT: Bob is a round and rough around the edges, and he is also big.\nFOL: (Round(bob) & Rough(bob) & Big(bob))\nTEXT: Dave seems to be round.\nFOL: Round(dave)\nTEXT: Fred may be young but he is nice, wears green shoes and is cold.\nFOL: (Young(fred) | Nice(fred) & GreenShoes(fred) & Cold(fred))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: A nice young person who is big can be considered round.\nFOL: (Nice(x) & Young(x) & Big(x) -> Round(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (FeelingBlue(x) -> Green(x))\nTEXT: Most round and cold people are often rough.\nFOL: all x. (Round(x) & Cold(x) -> Rough(x))\nTEXT: Nice and green people are often found to be big as well.\nFOL: all x. (Nice(x) & Green(x) -> Big(x))\nTEXT: Fred is big.\nFOL: Big(fred)\n</EVALUATE>"
  ]
 },
 {
  "index": 66,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: Green(bob) & Cold(bob)\nTEXT: Charlie seems big and rough, but he's actually quite kind.\nFOL: Big(charlie) & Rough(charlie) & Kind(charlie)\nTEXT: The young person who is always feeling cold is named Dave.\nFOL: Young(dave) & Cold(dave)\nTEXT: When Eric walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: Nice(eric) & Kind(eric) -> Blue(eric) & Red(eric)\nTEXT: A rather big person is a red person.\nFOL: Big(x) -> Red(x)\nTEXT: Young people who are cold and blue are actually kind.\nFOL: Young(x) & Cold(x) & Blue(x) -> Kind(x)\nTEXT: Rough people who are kind and green with envy are red with their toughened skin.\nFOL: Rough(x) & Kind(x) & GreenWithEnvy(x) -> RedWithToughenedSkin(x)\nTEXT: Rough and big people are always also cold people.\nFOL: Rough(x) & Big(x) -> Cold(x)\nTEXT: People turn green when they are feeling blue.\nFOL: Blue(x) -> Green(x)\nTEXT: If someone is cold and blue, you will find that they are also quite young.\nFOL: Cold(x) & Blue(x) -> Young(x)\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: Green(x) & Blue(x) & Red(x) -> RoundShaped(x)\nTEXT: Charlie is not blue.\nFOL: -Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: Green(bob) & Cold(bob)\nTEXT: Charlie seems big and rough, but he's actually quite kind.\nFOL: Big(charlie) & Rough(charlie) & Kind(charlie)\nTEXT: The young person who is always feeling cold is named Dave.\nFOL: Young(dave) & Cold(dave)\nTEXT: When Eric walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: Nice(eric) & Kind(eric) -> Blue(eric) & Red(eric)\nTEXT: A rather big person is a red person.\nFOL: Big(x) -> Red(x)\nTEXT: Young people who are cold and blue are actually kind.\nFOL: Young(x) & Cold(x) & Blue(x) -> Kind(x)\nTEXT: Rough people who are kind and green with envy are red with their toughened skin.\nFOL: Rough(x) & Kind(x) & GreenWithEnvy(x) -> RedWithToughenedSkin(x)\nTEXT: Rough and big people are always also cold people.\nFOL: Rough(x) & Big(x) -> Cold(x)\nTEXT: People turn green when they are feeling blue.\nFOL: Blue(x) -> Green(x)\nTEXT: If someone is cold and blue, you will find that they are also quite young.\nFOL: Cold(x) & Blue(x) -> Young(x)\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: Green(x) & Blue(x) & Red(x) -> Round(x)\nTEXT: Charlie is not blue.\nFOL: -Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: Green(bob) & Cold(bob)\nTEXT: Charlie seems big and rough, but he's actually quite kind.\nFOL: Big(charlie) & Rough(charlie) & Kind(charlie)\nTEXT: The young person who is always feeling cold is named Dave.\nFOL: Young(dave) & Cold(dave)\nTEXT: When Eric walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: Nice(eric) & Kind(eric) -> Blue(eric) & Red(eric)\nTEXT: A rather big person is a red person.\nFOL: Big(x) -> Red(x)\nTEXT: Young people who are cold and blue are actually kind.\nFOL: Young(x) & Cold(x) & Blue(x) -> Kind(x)\nTEXT: Rough people who are kind and green with envy are red with their toughened skin.\nFOL: Rough(x) & Kind(x) & GreenWithEnvy(x) -> Red(x)\nTEXT: Rough and big people are always also cold people.\nFOL: Rough(x) & Big(x) -> Cold(x)\nTEXT: People turn green when they are feeling blue.\nFOL: Blue(x) -> Green(x)\nTEXT: If someone is cold and blue, you will find that they are also quite young.\nFOL: Cold(x) & Blue(x) -> Young(x)\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: Green(x) & Blue(x) & Red(x) -> Round(x)\nTEXT: Charlie is not blue.\nFOL: -Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: Green(bob) & Cold(bob)\nTEXT: Charlie seems big and rough, but he's actually quite kind.\nFOL: Big(charlie) & Rough(charlie) & Kind(charlie)\nTEXT: The young person who is always feeling cold is named Dave.\nFOL: Young(dave) & Cold(dave)\nTEXT: When Eric walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: Blue(eric) & Red(eric)\nTEXT: A rather big person is a red person.\nFOL: Big(x) -> Red(x)\nTEXT: Young people who are cold and blue are actually kind.\nFOL: all x. (Young(x) & Cold(x) & Blue(x) -> Kind(x))\nTEXT: Rough people who are kind and green with envy are red with their toughened skin.\nFOL: all x. (Rough(x) & Kind(x) & GreenWithEnvy(x) -> Red(x))\nTEXT: Rough and big people are always also cold people.\nFOL: all x. (Rough(x) & Big(x) -> Cold(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Blue(x) -> Green(x))\nTEXT: If someone is cold and blue, you will find that they are also quite young.\nFOL: all x. (Cold(x) & Blue(x) -> Young(x))\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: Green(x) & Blue(x) & Red(x) -> Round(x)\nTEXT: Charlie is not blue.\nFOL: -Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: Green(bob) & Cold(bob)\nTEXT: Charlie seems big and rough, but he's actually quite kind.\nFOL: Big(charlie) & Rough(charlie) & Kind(charlie)\nTEXT: The young person who is always feeling cold is named Dave.\nFOL: Young(dave) & Cold(dave)\nTEXT: When Eric walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: Nice(eric) & Kind(eric) -> Blue(eric) & Red(eric)\nTEXT: A rather big person is a red person.\nFOL: Big(x) -> Red(x)\nTEXT: Young people who are cold and blue are actually kind.\nFOL: all x. (Young(x) & Cold(x) & Blue(x) -> Kind(x))\nTEXT: Rough people who are kind and green with envy are red with their toughened skin.\nFOL: all x. (Rough(x) & Kind(x) & GreenWithEnvy(x) -> Red(x))\nTEXT: Rough and big people are always also cold people.\nFOL: all x. (Rough(x) & Big(x) -> Cold(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Blue(x) -> Green(x))\nTEXT: If someone is cold and blue, you will find that they are also quite young.\nFOL: all x. (Cold(x) & Blue(x) -> Young(x))\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: Green(x) & Blue(x) & Red(x) -> Round(x)\nTEXT: Charlie is not blue.\nFOL: -Blue(charlie)\n</EVALUATE>"
  ]
 },
 {
  "index": 67,
  "responses": [
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x. (Knows(x, charlie) -> (Rough(charlie) & Cold(charlie)))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: (Kind(charlie) & Red(charlie)) | (Blue(charlie) & Young(charlie))\nTEXT: That guy Eric sure is nice.\nFOL: Nice(erick)\nTEXT: A bit overweight, Fred is big and round.\nFOL: Big(fred) & Round(fred)\nTEXT: He's a nice guy who is often cold.\nFOL: Nice(fred) & Cold(fred)\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: all x. (Nice(x) & Round(x) & Cold(x) -> Blue(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> LittleGreen(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: all x. (Blue(x) & Big(x) & Kind(x) -> Green(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. ((Blue(x) & Green(x)) -> Red(x))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: all x. ((Nice(x) & Blue(x) & Round(x)) -> Kind(x))\nTEXT: Fred is not kind.\nFOL: -Kind(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x. (Knows(x, charlie) -> (Rough(charlie) & Cold(charlie)))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: (Kind(charlie) & Red(charlie)) | -Blue(charlie)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(erick)\nTEXT: A bit overweight, Fred is big and round.\nFOL: Big(fred) & Round(fred)\nTEXT: He's a nice guy who is often cold.\nFOL: Nice(fred) & Cold(fred)\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: all x. (Nice(x) & Round(x) & Cold(x) -> Blue(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> LittleGreen(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: all x. (Blue(x) & Big(x) & Kind(x) -> Green(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. ((Blue(x) & Green(x)) -> Red(x))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: all x. ((Nice(x) & Blue(x) & Round(x)) -> Kind(x))\nTEXT: Fred is not kind.\nFOL: -Kind(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x. (Knows(x, charlie) -> (Rough(charlie) & Cold(charlie)))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: (Kind(charlie) & Red(charlie)) & -Blue(charlie)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(erick)\nTEXT: A bit overweight, Fred is big and round.\nFOL: Big(fred) & Round(fred)\nTEXT: He's a nice guy who is often cold.\nFOL: Nice(fred) & Cold(fred)\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: all x. (Nice(x) & Round(x) & Cold(x) -> Blue(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> LittleGreen(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: Blue(x) & Big(x) & Kind(x) -> Green(x)\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. ((Blue(x) & Green(x)) -> Red(x))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: all x. ((Nice(x) & Blue(x) & Round(x)) -> Kind(x))\nTEXT: Fred is not kind.\nFOL: -Kind(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x. (Knows(x, charlie) -> (Rough(charlie) & Cold(charlie)))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: (Kind(charlie) & Red(charlie)) | -Blue(charlie)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(erick)\nTEXT: A bit overweight, Fred is big and round.\nFOL: Big(fred) & Round(fred)\nTEXT: He's a nice guy who is often cold.\nFOL: Nice(fred) & Cold(fred)\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: all x. (Nice(x) & Round(x) & Cold(x) -> Blue(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> LittleGreen(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: Blue(x) & Big(x) & Kind(x) -> Green(x)\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. ((Blue(x) & Green(x)) -> Red(x))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: all x. ((Nice(x) & Blue(x) & Round(x)) -> Kind(x))\nTEXT: Fred is not kind.\nFOL: -Kind(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x. (Knows(x, charlie) -> (Rough(charlie) & Cold(charlie)))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: (Kind(charlie) & Red(charlie)) | (Blue(charlie) & Young(charlie))\nTEXT: That guy Eric sure is nice.\nFOL: Nice(erick)\nTEXT: A bit overweight, Fred is big and round.\nFOL: Big(fred) & Round(fred)\nTEXT: He's a nice guy who is often cold.\nFOL: Nice(fred) & Cold(fred)\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: all x. (Nice(x) & Round(x) & Cold(x) -> Blue(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> LittleGreen(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: Blue(x) & Big(x) & Kind(x) -> Green(x)\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. ((Blue(x) & Green(x)) -> Red(x))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: all x. ((Nice(x) & Blue(x) & Round(x)) -> Kind(x))\nTEXT: Fred is not kind.\nFOL: -Kind(fred)\n</EVALUATE>"
  ]
 },
 {
  "index": 68,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: Rough(anne)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\nTEXT: If Bob is round then Bob is smart.\nFOL: Round(bob) -> Smart(bob)\nTEXT: Smart things are not furry.\nFOL: all x. (Smart(x) -> -Furry(x))\nTEXT: Round, nice things are not furry.\nFOL: all x. ((Round(x) & Nice(x)) -> -Furry(x))\nTEXT: Round, smart things are nice.\nFOL: all x. ((Round(x) & Smart(x)) -> Nice(x))\nTEXT: If something is smart and round then it is nice.\nFOL: all x. ((Smart(x) & Round(x)) -> Nice(x))\nTEXT: If something is nice then it is rough.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: Young things are round.\nFOL: all x. (Young(x) -> Round(x))\nTEXT: Anne is rough.\nFOL: Rough(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: Rough(anne)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\nTEXT: If Bob is round then Bob is smart.\nFOL: Round(bob) -> Smart(bob)\nTEXT: Smart things are not furry.\nFOL: all x. (Smart(x) -> -Furry(x))\nTEXT: Round, nice things are not furry.\nFOL: all x. ((Round(x) & Nice(x)) -> -Furry(x))\nTEXT: Round, smart things are nice.\nFOL: all x. ((Round(x) & Smart(x)) -> Nice(x))\nTEXT: If something is smart and round then it is nice.\nFOL: all x. ((Smart(x) & Round(x)) -> Nice(x))\nTEXT: If something is nice then it is rough.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: Young things are round.\nFOL: all x. (Young(x) -> Round(x))\nTEXT: Anne is rough.\nFOL: Rough(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: Rough(anne)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\nTEXT: If Bob is round then Bob is smart.\nFOL: Round(bob) -> Smart(bob)\nTEXT: Smart things are not furry.\nFOL: all x. (Smart(x) -> -Furry(x))\nTEXT: Round, nice things are not furry.\nFOL: all x. ((Round(x) & Nice(x)) -> -Furry(x))\nTEXT: Round, smart things are nice.\nFOL: all x. ((Round(x) & Smart(x)) -> Nice(x))\nTEXT: If something is smart and round then it is nice.\nFOL: all x. ((Smart(x) & Round(x)) -> Nice(x))\nTEXT: If something is nice then it is rough.\nFOL: Nice(x) -> Rough(x)\nTEXT: Young things are round.\nFOL: all x. (Young(x) -> Round(x))\nTEXT: Anne is rough.\nFOL: Rough(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: Rough(anne)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\nTEXT: If Bob is round then Bob is smart.\nFOL: (Round(bob) -> Smart(bob))\nTEXT: Smart things are not furry.\nFOL: all x. (Smart(x) -> -Furry(x))\nTEXT: Round, nice things are not furry.\nFOL: all x. ((Round(x) & Nice(x)) -> -Furry(x))\nTEXT: Round, smart things are nice.\nFOL: all x. ((Round(x) & Smart(x)) -> Nice(x))\nTEXT: If something is smart and round then it is nice.\nFOL: all x. ((Smart(x) & Round(x)) -> Nice(x))\nTEXT: If something is nice then it is rough.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: Young things are round.\nFOL: all x. (Young(x) -> Round(x))\nTEXT: Anne is rough.\nFOL: Rough(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: Rough(anne)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\nTEXT: If Bob is round then Bob is smart.\nFOL: Round(bob) -> Smart(bob)\nTEXT: Smart things are not furry.\nFOL: all x. (Smart(x) -> -Furry(x))\nTEXT: Round, nice things are not furry.\nFOL: all x. ((Round(x) & Nice(x)) -> -Furry(x))\nTEXT: Round, smart things are nice.\nFOL: all x. ((Round(x) & Smart(x)) -> Nice(x))\nTEXT: If something is smart and round then it is nice.\nFOL: (Smart(x) & Round(x)) -> Nice(x)\nTEXT: If something is nice then it is rough.\nFOL: Nice(x) -> Rough(x)\nTEXT: Young things are round.\nFOL: all x. (Young(x) -> Round(x))\nTEXT: Anne is rough.\nFOL: Rough(anne)\n</EVALUATE>"
  ]
 },
 {
  "index": 69,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(dave)\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: Furry(dave) -> Rough(dave)\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: White(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(dave)\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: (Furry(dave) -> Rough(dave))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: White(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(dave)\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: Furry(dave) -> Rough(dave)\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: White(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(dave)\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: Fur(dave) -> Rough(dave)\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Fur(x))\nTEXT: Dave is white.\nFOL: White(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(dave)\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: -Furry(dave) | Rough(dave)\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is white.\nFOL: White(dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 70,
  "responses": [
   "<EVALUATE>\nTEXT: Alan is a kind person and he is also often cold.\nFOL: Kind(Alan) & Cold(Alan)\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: WetInRain(Dave) -> Cold(Dave)\nTEXT: He also looks green but big.\nFOL: Green(he) & Big(he)\nTEXT: Fred was proud of being round, yet rough.\nFOL: ProudOfBeingRound(Fred) & Rough(Fred)\nTEXT: His red cheeks glowed.\nFOL: RedCheeks(his) & Glowed(his)\nTEXT: Gary is green and cold too.\nFOL: Green(Gary) & Cold(Gary)\nTEXT: A very big person who is green but also red is a rough person.\nFOL: Big(x) & Green(x) & Red(x) -> Rough(x)\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: (Red(x) & Round(x) & Kind(x)) -> ColdManner(x)\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: Rough(x) & Cold(x) & Green(x) -> Big(x)\nTEXT: Count on anyone you meet who is big, round, and red also being kind.\nFOL: Big(x) & Round(x) & Red(x) -> Kind(x)\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: Rough(x) & RedFace(x) -> Big(x)\nTEXT: When you meet and big and nice man, they will be kind to the earth and live green lifestyle.\nFOL: Big(x) & Nice(x) -> KindToEarth(x) & GreenLifestyle(x)\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: YoungAged(x) & Big(x) & Blue(x) -> Cold(x)\nTEXT: Gary is cold.\nFOL: Cold(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a kind person and he is also often cold.\nFOL: Kind(Alan) & Cold(Alan)\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: WetInRain(Dave) -> Cold(Dave)\nTEXT: He also looks green but big.\nFOL: Green(he) & Big(he)\nTEXT: Fred was proud of being round, yet rough.\nFOL: ProudOfBeingRound(Fred) & Rough(Fred)\nTEXT: His red cheeks glowed.\nFOL: RedCheeks(his) & Glowed(his)\nTEXT: Gary is green and cold too.\nFOL: Green(Gary) & Cold(Gary)\nTEXT: A very big person who is green but also red is a rough person.\nFOL: all x. (Big(x) & Green(x) & Red(x) -> Rough(x))\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: all x. (Red(x) & Round(x) & Kind(x) -> ColdManner(x))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) -> Big(x))\nTEXT: Count on anyone you meet who is big, round, and red also being kind.\nFOL: all x. (Big(x) & Round(x) & Red(x) -> Kind(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & RedFace(x) -> Big(x))\nTEXT: When you meet and big and nice man, they will be kind to the earth and live green lifestyle.\nFOL: all x. (Big(x) & Nice(x) -> KindToEarth(x) & GreenLifestyle(x))\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: YoungAged(x) & Big(x) & Blue(x) -> Cold(x)\nTEXT: Gary is cold.\nFOL: Cold(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a kind person and he is also often cold.\nFOL: Kind(Alan) & Cold(Alan)\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: WetInRain(Dave) -> Cold(Dave)\nTEXT: He also looks green but big.\nFOL: Green(he) & Big(he)\nTEXT: Fred was proud of being round, yet rough.\nFOL: ProudOfBeingRound(Fred) & Rough(Fred)\nTEXT: His red cheeks glowed.\nFOL: RedCheeks(his) & Glowed(his)\nTEXT: Gary is green and cold too.\nFOL: Green(Gary) & Cold(Gary)\nTEXT: A very big person who is green but also red is a rough person.\nFOL: all x. (Big(x) & Green(x) & Red(x) -> Rough(x))\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: all x. ((Red(x) & Round(x) & Kind(x)) -> ColdManner(x))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) -> Big(x))\nTEXT: Count on anyone you meet who is big, round, and red also being kind.\nFOL: all x. (Big(x) & Round(x) & Red(x) -> Kind(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & RedFace(x) -> Big(x))\nTEXT: When you meet and big and nice man, they will be kind to the earth and live green lifestyle.\nFOL: all x. (Big(x) & Nice(x) -> KindToEarth(x) & GreenLifestyle(x))\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: YoungAged(x) & Big(x) & Blue(x) -> Cold(x)\nTEXT: Gary is cold.\nFOL: Cold(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a kind person and he is also often cold.\nFOL: Kind(Alan) & Cold(Alan)\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: WetInRain(Dave) -> Cold(Dave)\nTEXT: He also looks green but big.\nFOL: Green(he) & Big(he)\nTEXT: Fred was proud of being round, yet rough.\nFOL: ProudOfBeingRound(Fred) & Rough(Fred)\nTEXT: His red cheeks glowed.\nFOL: RedCheeks(his) & Glowed(his)\nTEXT: Gary is green and cold too.\nFOL: Green(Gary) & Cold(Gary)\nTEXT: A very big person who is green but also red is a rough person.\nFOL: all x. (Big(x) & Green(x) & Red(x) -> Rough(x))\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: all x. (Red(x) & Round(x) & Kind(x) -> ColdManner(x))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) -> Big(x))\nTEXT: Count on anyone you meet who is big, round, and red also being kind.\nFOL: all x. (Big(x) & Round(x) & Red(x) -> Kind(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & RedInFace(x) -> Big(x))\nTEXT: When you meet and big and nice man, they will be kind to the earth and live green lifestyle.\nFOL: all x. (Big(x) & Nice(x) -> KindToEarth(x) & GreenLifestyle(x))\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: YoungAged(x) & Big(x) & Blue(x) -> Cold(x)\nTEXT: Gary is cold.\nFOL: Cold(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a kind person and he is also often cold.\nFOL: Kind(Alan) & Cold(Alan)\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: WetInRain(Dave) -> Cold(Dave)\nTEXT: He also looks green but big.\nFOL: Green(he) & Big(he)\nTEXT: Fred was proud of being round, yet rough.\nFOL: ProudOfBeingRound(Fred) & Rough(Fred)\nTEXT: His red cheeks glowed.\nFOL: RedCheeks(his) & Glowed(his)\nTEXT: Gary is green and cold too.\nFOL: Green(Gary) & Cold(Gary)\nTEXT: A very big person who is green but also red is a rough person.\nFOL: all x. (Big(x) & Green(x) & Red(x) -> Rough(x))\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: all x. ((Red(x) & Round(x) & Kind(x)) -> ColdManner(x))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) -> Big(x))\nTEXT: Count on anyone you meet who is big, round, and red also being kind.\nFOL: all x. (Big(x) & Round(x) & Red(x) -> Kind(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & RedFace(x) -> Big(x))\nTEXT: When you meet and big and nice man, they will be kind to the earth and live green lifestyle.\nFOL: all x. (Big(x) & Nice(x) -> (KindToEarth(x) & GreenLifestyle(x)))\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: YoungAged(x) & Big(x) & Blue(x) -> Cold(x)\nTEXT: Gary is cold.\nFOL: Cold(Gary)\n</EVALUATE>"
  ]
 },
 {
  "index": 71,
  "responses": [
   "<EVALUATE>\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Gary is furry.\nFOL: Furry(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: Gary is white.\nFOL: White(gary)\nTEXT: If Gary is smart and Gary is round then Gary is green.\nFOL: (Smart(gary) & Round(gary)) -> Green(gary)\nTEXT: Furry, young things are kind.\nFOL: all x. (Furry(x) & Young(x) -> Kind(x))\nTEXT: If Charlie is green then Charlie is white.\nFOL: Green(charlie) -> White(charlie)\nTEXT: Young, white things are smart.\nFOL: all x. (Young(x) & White(x) -> Smart(x))\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: All kind things are green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: Charlie is not furry.\nFOL: -Furry(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Gary is furry.\nFOL: Furry(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: Gary is white.\nFOL: White(gary)\nTEXT: If Gary is smart and Gary is round then Gary is green.\nFOL: (Smart(gary) & Round(gary)) -> Green(gary)\nTEXT: Furry, young things are kind.\nFOL: all x. (Furry(x) & Young(x) -> Kind(x))\nTEXT: If Charlie is green then Charlie is white.\nFOL: Green(charlie) -> White(charlie)\nTEXT: Young, white things are smart.\nFOL: all x. (Young(x) & White(x) -> Smart(x))\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: All kind things are green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: Charlie is not furry.\nFOL: -Furry(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Gary is furry.\nFOL: Furry(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: Gary is white.\nFOL: White(gary)\nTEXT: If Gary is smart and Gary is round then Gary is green.\nFOL: (Smart(gary) & Round(gary)) -> Green(gary)\nTEXT: Furry, young things are kind.\nFOL: all x. ((Furry(x) & Young(x)) -> Kind(x))\nTEXT: If Charlie is green then Charlie is white.\nFOL: Green(charlie) -> White(charlie)\nTEXT: Young, white things are smart.\nFOL: all x. ((Young(x) & White(x)) -> Smart(x))\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: All kind things are green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: Charlie is not furry.\nFOL: -Furry(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Gary is furry.\nFOL: Furry(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: Gary is white.\nFOL: White(gary)\nTEXT: If Gary is smart and Gary is round then Gary is green.\nFOL: (Smart(gary) & Round(gary)) -> Green(gary)\nTEXT: Furry, young things are kind.\nFOL: all x. (Furry(x) & Young(x) -> Kind(x))\nTEXT: If Charlie is green then Charlie is white.\nFOL: (Green(charlie) -> White(charlie))\nTEXT: Young, white things are smart.\nFOL: all x. (Young(x) & White(x) -> Smart(x))\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: All kind things are green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: Charlie is not furry.\nFOL: -Furry(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Gary is furry.\nFOL: Furry(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: Gary is white.\nFOL: White(gary)\nTEXT: If Gary is smart and Gary is round then Gary is green.\nFOL: (Smart(gary) & Round(gary)) -> Green(gary)\nTEXT: Furry, young things are kind.\nFOL: all x. ((Furry(x) & Young(x)) -> Kind(x))\nTEXT: If Charlie is green then Charlie is white.\nFOL: Green(charlie) -> White(charlie)\nTEXT: Young, white things are smart.\nFOL: all x. ((Young(x) & White(x)) -> Smart(x))\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: All kind things are green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: Charlie is not furry.\nFOL: -Furry(charlie)\n</EVALUATE>"
  ]
 },
 {
  "index": 72,
  "responses": [
   "<EVALUATE>\nTEXT: The bear visits the cat.\nFOL: Visits(bear, cat)\nTEXT: The cat is green.\nFOL: Green(cat)\nTEXT: If something is blue and green then it visits the bear.\nFOL: all x. (Blue(x) & Green(x) -> Visits(x, bear))\nTEXT: If something likes the bear and it sees the cat then it sees the bear.\nFOL: all x. (Likes(x, bear) & Sees(x, cat) -> Sees(x, bear))\nTEXT: If something visits the bear then the bear sees the cat.\nFOL: all x. (Visits(x, bear) -> Sees(bear, cat))\nTEXT: If the bear is cold then the bear is round.\nFOL: Cold(bear) -> Round(bear)\nTEXT: If the cat is not green then the cat does not see the bear.\nFOL: -Green(cat) -> -Sees(cat, bear)\nTEXT: If something visits the bear then it likes the bear.\nFOL: all x. (Visits(x, bear) -> Likes(x, bear))\nTEXT: If the cat is green then the cat is blue.\nFOL: Green(cat) -> Blue(cat)\nTEXT: If something visits the cat and it sees the bear then the cat visits the bear.\nFOL: all x. ((Visits(x, cat) & Sees(x, bear)) -> Visits(cat, bear))\nTEXT: The bear visits the cat.\nFOL: Visits(bear, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear visits the cat.\nFOL: Visits(bear, cat)\nTEXT: The cat is green.\nFOL: Green(cat)\nTEXT: If something is blue and green then it visits the bear.\nFOL: all x. (Blue(x) & Green(x) -> Visits(x, bear))\nTEXT: If something likes the bear and it sees the cat then it sees the bear.\nFOL: all x. (Likes(x, bear) & Sees(x, cat) -> Sees(x, bear))\nTEXT: If something visits the bear then the bear sees the cat.\nFOL: all x. (Visits(x, bear) -> Sees(bear, cat))\nTEXT: If the bear is cold then the bear is round.\nFOL: Cold(bear) -> Round(bear)\nTEXT: If the cat is not green then the cat does not see the bear.\nFOL: -Green(cat) -> -Sees(cat, bear)\nTEXT: If something visits the bear then it likes the bear.\nFOL: all x. (Visits(x, bear) -> Likes(x, bear))\nTEXT: If the cat is green then the cat is blue.\nFOL: Green(cat) -> Blue(cat)\nTEXT: If something visits the cat and it sees the bear then the cat visits the bear.\nFOL: (Visits(x, cat) & Sees(x, bear)) -> Visits(cat, bear)\nTEXT: The bear visits the cat.\nFOL: Visits(bear, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear visits the cat.\nFOL: Visits(bear, cat)\nTEXT: The cat is green.\nFOL: Green(cat)\nTEXT: If something is blue and green then it visits the bear.\nFOL: all x. (Blue(x) & Green(x) -> Visits(x, bear))\nTEXT: If something likes the bear and it sees the cat then it sees the bear.\nFOL: all x. ((Likes(x, bear) & Sees(x, cat)) -> Sees(x, bear))\nTEXT: If something visits the bear then the bear sees the cat.\nFOL: all x. (Visits(x, bear) -> Sees(bear, cat))\nTEXT: If the bear is cold then the bear is round.\nFOL: Cold(bear) -> Round(bear)\nTEXT: If the cat is not green then the cat does not see the bear.\nFOL: -Green(cat) -> -Sees(cat, bear)\nTEXT: If something visits the bear then it likes the bear.\nFOL: all x. (Visits(x, bear) -> Likes(x, bear))\nTEXT: If the cat is green then the cat is blue.\nFOL: Green(cat) -> Blue(cat)\nTEXT: If something visits the cat and it sees the bear then the cat visits the bear.\nFOL: all x. ((Visits(x, cat) & Sees(x, bear)) -> Visits(cat, bear))\nTEXT: The bear visits the cat.\nFOL: Visits(bear, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear visits the cat.\nFOL: Visits(bear, cat)\nTEXT: The cat is green.\nFOL: Green(cat)\nTEXT: If something is blue and green then it visits the bear.\nFOL: all x. (Blue(x) & Green(x) -> Visits(x, bear))\nTEXT: If something likes the bear and it sees the cat then it sees the bear.\nFOL: all x. (Likes(x, bear) & Sees(x, cat) -> Sees(x, bear))\nTEXT: If something visits the bear then the bear sees the cat.\nFOL: all x. (Visits(x, bear) -> Sees(bear, cat))\nTEXT: If the bear is cold then the bear is round.\nFOL: Cold(bear) -> Round(bear)\nTEXT: If the cat is not green then the cat does not see the bear.\nFOL: -Green(cat) -> -Sees(cat, bear)\nTEXT: If something visits the bear then it likes the bear.\nFOL: all x. (Visits(x, bear) -> Likes(x, bear))\nTEXT: If the cat is green then the cat is blue.\nFOL: Green(cat) -> Blue(cat)\nTEXT: If something visits the cat and it sees the bear then the cat visits the bear.\nFOL: all x. (Visits(x, cat) & Sees(x, bear) -> Visits(cat, bear))\nTEXT: The bear visits the cat.\nFOL: Visits(bear, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear visits the cat.\nFOL: Visits(bear, cat)\nTEXT: The cat is green.\nFOL: Green(cat)\nTEXT: If something is blue and green then it visits the bear.\nFOL: all x. ((Blue(x) & Green(x)) -> Visits(x, bear))\nTEXT: If something likes the bear and it sees the cat then it sees the bear.\nFOL: all x. (Likes(x, bear) & Sees(x, cat) -> Sees(x, bear))\nTEXT: If something visits the bear then the bear sees the cat.\nFOL: all x. (Visits(x, bear) -> Sees(bear, cat))\nTEXT: If the bear is cold then the bear is round.\nFOL: Cold(bear) -> Round(bear)\nTEXT: If the cat is not green then the cat does not see the bear.\nFOL: -Green(cat) -> -Sees(cat, bear)\nTEXT: If something visits the bear then it likes the bear.\nFOL: all x. (Visits(x, bear) -> Likes(x, bear))\nTEXT: If the cat is green then the cat is blue.\nFOL: Green(cat) -> Blue(cat)\nTEXT: If something visits the cat and it sees the bear then the cat visits the bear.\nFOL: all x. ((Visits(x, cat) & Sees(x, bear)) -> Visits(cat, bear))\nTEXT: The bear visits the cat.\nFOL: Visits(bear, cat)\n</EVALUATE>"
  ]
 },
 {
  "index": 73,
  "responses": [
   "<EVALUATE>\nTEXT: Alan is green and cold too.\nFOL: Green(alan) & Cold(alan)\nTEXT: For being so cold, it's good Fred can remain nice.\nFOL: Cold(fred) -> Nice(fred)\nTEXT: Gary seems to be round.\nFOL: Round(gary)\nTEXT: No one knows Harry like me and he is a kind guy, very round in the belly and green as grass.\nFOL: all x. (-Knows(x, harry) & Kind(harry) & RoundBelly(harry) & GreenAsGrass(harry))\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: all x. (RoughSkin(x) & ColdFromOutside(x) -> Nice(x))\nTEXT: Kind red people are green on the inside.\nFOL: all x. (Kind(x) & Red(x) -> GreenInside(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) & Rough(x) -> Red(x))\nTEXT: Nice people that are very green and even round shaped will be very young.\nFOL: all x. (Nice(x) & VeryGreen(x) & RoundShaped(x) -> Young(x))\nTEXT: Round people who are kind tend to be nice.\nFOL: all x. (Round(x) & Kind(x) -> Nice(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: all x. (Green(x) & Rough(x) & Cold(x) -> Nice(x))\nTEXT: Someone who is a young age and looks like they are round are also red.\nFOL: all x. (Young(x) & LooksRound(x) -> Red(x))\nTEXT: Fred is not kind.\nFOL: -Kind(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is green and cold too.\nFOL: Green(alan) & Cold(alan)\nTEXT: For being so cold, it's good Fred can remain nice.\nFOL: Cold(fred) -> Nice(fred)\nTEXT: Gary seems to be round.\nFOL: Round(gary)\nTEXT: No one knows Harry like me and he is a kind guy, very round in the belly and green as grass.\nFOL: -KnowsHarryLikeMe(harry) & Kind(harry) & RoundInBelly(harry) & GreenAsGrass(harry)\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: (RoughSkin(x) & ColdFromOutside(x)) -> Nice(x)\nTEXT: Kind red people are green on the inside.\nFOL: all x. (Kind(x) & Red(x) -> GreenOnInside(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) & Rough(x) -> Red(x))\nTEXT: Nice people that are very green and even round shaped will be very young.\nFOL: all x. (Nice(x) & VeryGreen(x) & RoundShaped(x) -> VeryYoung(x))\nTEXT: Round people who are kind tend to be nice.\nFOL: all x. (Round(x) & Kind(x) -> Nice(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: all x. (Green(x) & Rough(x) & Cold(x) -> Nice(x))\nTEXT: Someone who is a young age and looks like they are round are also red.\nFOL: (Young(x) & LooksRound(x)) -> Red(x)\nTEXT: Fred is not kind.\nFOL: -Kind(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is green and cold too.\nFOL: Green(alan) & Cold(alan)\nTEXT: For being so cold, it's good Fred can remain nice.\nFOL: Cold(fred) -> Nice(fred)\nTEXT: Gary seems to be round.\nFOL: Round(gary)\nTEXT: No one knows Harry like me and he is a kind guy, very round in the belly and green as grass.\nFOL: all x. (-Knows(x, harry) & Kind(harry) & RoundBelly(harry) & GreenAsGrass(harry))\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: all x. (RoughSkin(x) & ColdFromOutside(x) -> Nice(x))\nTEXT: Kind red people are green on the inside.\nFOL: all x. (Kind(x) & Red(x) -> GreenInside(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) & Rough(x) -> Red(x))\nTEXT: Nice people that are very green and even round shaped will be very young.\nFOL: all x. (Nice(x) & VeryGreen(x) & RoundShaped(x) -> Young(x))\nTEXT: Round people who are kind tend to be nice.\nFOL: all x. (Round(x) & Kind(x) -> Nice(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: all x. (Green(x) & Rough(x) & Cold(x) -> Nice(x))\nTEXT: Someone who is a young age and looks like they are round are also red.\nFOL: all x. (Young(x) & RoundLooks(x) -> Red(x))\nTEXT: Fred is not kind.\nFOL: -Kind(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is green and cold too.\nFOL: Green(alan) & Cold(alan)\nTEXT: For being so cold, it's good Fred can remain nice.\nFOL: Cold(fred) -> Nice(fred)\nTEXT: Gary seems to be round.\nFOL: Round(gary)\nTEXT: No one knows Harry like me and he is a kind guy, very round in the belly and green as grass.\nFOL: -KnowsHarryLikeMe(harry) & Kind(harry) & RoundInBelly(harry) & GreenAsGrass(harry)\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: (RoughSkin(x) & ColdFromOutside(x)) -> Nice(x)\nTEXT: Kind red people are green on the inside.\nFOL: all x. (Kind(x) & Red(x) -> GreenOnInside(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) -> (Rough(x) & Red(x)))\nTEXT: Nice people that are very green and even round shaped will be very young.\nFOL: all x. ((Nice(x) & VeryGreen(x) & RoundShaped(x)) -> VeryYoung(x))\nTEXT: Round people who are kind tend to be nice.\nFOL: all x. (Round(x) & Kind(x) -> Nice(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: all x. ((Green(x) & Rough(x) & Cold(x)) -> Nice(x))\nTEXT: Someone who is a young age and looks like they are round are also red.\nFOL: all x. ((Young(x) & LooksRound(x)) -> Red(x))\nTEXT: Fred is not kind.\nFOL: -Kind(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is green and cold too.\nFOL: Green(alan) & Cold(alan)\nTEXT: For being so cold, it's good Fred can remain nice.\nFOL: Cold(fred) -> Nice(fred)\nTEXT: Gary seems to be round.\nFOL: Round(gary)\nTEXT: No one knows Harry like me and he is a kind guy, very round in the belly and green as grass.\nFOL: -KnowsHarryLikeMe(harry) & Kind(harry) & RoundInBelly(harry) & GreenAsGrass(harry)\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: (RoughSkin(x) & ColdFromBeingOutside(x)) -> Nice(x)\nTEXT: Kind red people are green on the inside.\nFOL: all x. (Kind(x) & Red(x) -> GreenOnInside(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) -> (Rough(x) & Red(x)))\nTEXT: Nice people that are very green and even round shaped will be very young.\nFOL: all x. ((Nice(x) & VeryGreen(x) & RoundShaped(x)) -> VeryYoung(x))\nTEXT: Round people who are kind tend to be nice.\nFOL: all x. (Round(x) & Kind(x) -> Nice(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: all x. ((Green(x) & Rough(x) & Cold(x)) -> Nice(x))\nTEXT: Someone who is a young age and looks like they are round are also red.\nFOL: all x. ((Young(x) & LooksLikeRound(x)) -> Red(x))\nTEXT: Fred is not kind.\nFOL: -Kind(fred)\n</EVALUATE>"
  ]
 },
 {
  "index": 74,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle needs the lion.\nFOL: Needs(baldEagle, lion)\nTEXT: The bald eagle visits the mouse.\nFOL: Visits(baldEagle, mouse)\nTEXT: The cow visits the bald eagle.\nFOL: Visits(cow, baldEagle)\nTEXT: The lion is green.\nFOL: Green(lion)\nTEXT: The lion sees the cow.\nFOL: Sees(lion, cow)\nTEXT: The lion visits the cow.\nFOL: Visits(lion, cow)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: If the cow needs the mouse then the mouse sees the cow.\nFOL: Needs(cow, mouse) -> Sees(mouse, cow)\nTEXT: If something visits the cow and it is blue then the cow sees the mouse.\nFOL: (Visits(x, cow) & Blue(x)) -> Sees(cow, mouse)\nTEXT: If something is green and it needs the lion then it needs the bald eagle.\nFOL: (Green(x) & Needs(x, lion)) -> Needs(x, baldEagle)\nTEXT: If the mouse is blue then the mouse needs the lion.\nFOL: Blue(mouse) -> Needs(mouse, lion)\nTEXT: If something needs the lion then it is green.\nFOL: Needs(x, lion) -> Green(x)\nTEXT: If something sees the lion and the lion does not need the cow then it is big.\nFOL: (Sees(x, lion) & -Needs(lion, cow)) -> Big(x)\nTEXT: The mouse needs the lion.\nFOL: Needs(mouse, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle needs the lion.\nFOL: Need(baldEagle, lion)\nTEXT: The bald eagle visits the mouse.\nFOL: Visit(baldEagle, mouse)\nTEXT: The cow visits the bald eagle.\nFOL: Visit(cow, baldEagle)\nTEXT: The lion is green.\nFOL: Green(lion)\nTEXT: The lion sees the cow.\nFOL: See(lion, cow)\nTEXT: The lion visits the cow.\nFOL: Visit(lion, cow)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: If the cow needs the mouse then the mouse sees the cow.\nFOL: Need(cow, mouse) -> See(mouse, cow)\nTEXT: If something visits the cow and it is blue then the cow sees the mouse.\nFOL: (Visit(x, cow) & Blue(x)) -> See(cow, mouse)\nTEXT: If something is green and it needs the lion then it needs the bald eagle.\nFOL: (Green(x) & Need(x, lion)) -> Need(x, baldEagle)\nTEXT: If the mouse is blue then the mouse needs the lion.\nFOL: Blue(mouse) -> Need(mouse, lion)\nTEXT: If something needs the lion then it is green.\nFOL: Need(x, lion) -> Green(x)\nTEXT: If something sees the lion and the lion does not need the cow then it is big.\nFOL: (See(x, lion) & -Need(lion, cow)) -> Big(x)\nTEXT: The mouse needs the lion.\nFOL: Need(mouse, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle needs the lion.\nFOL: Needs(baldEagle, lion)\nTEXT: The bald eagle visits the mouse.\nFOL: Visits(baldEagle, mouse)\nTEXT: The cow visits the bald eagle.\nFOL: Visits(cow, baldEagle)\nTEXT: The lion is green.\nFOL: Green(lion)\nTEXT: The lion sees the cow.\nFOL: Sees(lion, cow)\nTEXT: The lion visits the cow.\nFOL: Visits(lion, cow)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: If the cow needs the mouse then the mouse sees the cow.\nFOL: (Needs(cow, mouse) -> Sees(mouse, cow))\nTEXT: If something visits the cow and it is blue then the cow sees the mouse.\nFOL: (Visits(x, cow) & Blue(x) -> Sees(cow, mouse))\nTEXT: If something is green and it needs the lion then it needs the bald eagle.\nFOL: (Green(x) & Needs(x, lion) -> Needs(x, baldEagle))\nTEXT: If the mouse is blue then the mouse needs the lion.\nFOL: Blue(mouse) -> Needs(mouse, lion)\nTEXT: If something needs the lion then it is green.\nFOL: (Needs(x, lion) -> Green(x))\nTEXT: If something sees the lion and the lion does not need the cow then it is big.\nFOL: (Sees(x, lion) & -Needs(lion, cow) -> Big(x))\nTEXT: The mouse needs the lion.\nFOL: Needs(mouse, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle needs the lion.\nFOL: Needs(baldEagle, lion)\nTEXT: The bald eagle visits the mouse.\nFOL: Visits(baldEagle, mouse)\nTEXT: The cow visits the bald eagle.\nFOL: Visits(cow, baldEagle)\nTEXT: The lion is green.\nFOL: Green(lion)\nTEXT: The lion sees the cow.\nFOL: Sees(lion, cow)\nTEXT: The lion visits the cow.\nFOL: Visits(lion, cow)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: If the cow needs the mouse then the mouse sees the cow.\nFOL: (Needs(cow, mouse) -> Sees(mouse, cow))\nTEXT: If something visits the cow and it is blue then the cow sees the mouse.\nFOL: (Visits(x, cow) & Blue(x) -> Sees(cow, mouse))\nTEXT: If something is green and it needs the lion then it needs the bald eagle.\nFOL: (Green(x) & Needs(x, lion) -> Needs(x, baldEagle))\nTEXT: If the mouse is blue then the mouse needs the lion.\nFOL: (Blue(mouse) -> Needs(mouse, lion))\nTEXT: If something needs the lion then it is green.\nFOL: (Needs(x, lion) -> Green(x))\nTEXT: If something sees the lion and the lion does not need the cow then it is big.\nFOL: (Sees(x, lion) & -Needs(lion, cow) -> Big(x))\nTEXT: The mouse needs the lion.\nFOL: Needs(mouse, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle needs the lion.\nFOL: Needs(baldEagle, lion)\nTEXT: The bald eagle visits the mouse.\nFOL: Visits(baldEagle, mouse)\nTEXT: The cow visits the bald eagle.\nFOL: Visits(cow, baldEagle)\nTEXT: The lion is green.\nFOL: Green(lion)\nTEXT: The lion sees the cow.\nFOL: Sees(lion, cow)\nTEXT: The lion visits the cow.\nFOL: Visits(lion, cow)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: If the cow needs the mouse then the mouse sees the cow.\nFOL: (Needs(cow, mouse) -> Sees(mouse, cow))\nTEXT: If something visits the cow and it is blue then the cow sees the mouse.\nFOL: (exists x. (Visits(x, cow) & Blue(x)) -> Sees(cow, mouse))\nTEXT: If something is green and it needs the lion then it needs the bald eagle.\nFOL: (Green(x) & Needs(x, lion) -> Needs(x, baldEagle))\nTEXT: If the mouse is blue then the mouse needs the lion.\nFOL: Blue(mouse) -> Needs(mouse, lion)\nTEXT: If something needs the lion then it is green.\nFOL: (Needs(x, lion) -> Green(x))\nTEXT: If something sees the lion and the lion does not need the cow then it is big.\nFOL: (exists x. (Sees(x, lion) & -Needs(lion, cow)) -> Big(x))\nTEXT: The mouse needs the lion.\nFOL: Needs(mouse, lion)\n</EVALUATE>"
  ]
 },
 {
  "index": 75,
  "responses": [
   "<EVALUATE>\nTEXT: The cat chases the dog.\nFOL: Chases(cat, dog)\nTEXT: The cat needs the cow.\nFOL: Needs(cat, cow)\nTEXT: The cat sees the squirrel.\nFOL: Sees(cat, squirrel)\nTEXT: The cow chases the cat.\nFOL: Chases(cow, cat)\nTEXT: The cow chases the squirrel.\nFOL: Chases(cow, squirrel)\nTEXT: The cow is kind.\nFOL: Kind(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow needs the cat.\nFOL: Needs(cow, cat)\nTEXT: The cow sees the squirrel.\nFOL: Sees(cow, squirrel)\nTEXT: The dog chases the squirrel.\nFOL: Chases(dog, squirrel)\nTEXT: The dog is nice.\nFOL: Nice(dog)\nTEXT: The dog needs the cow.\nFOL: Needs(dog, cow)\nTEXT: The dog sees the cat.\nFOL: Sees(dog, cat)\nTEXT: The squirrel is blue.\nFOL: Blue(squirrel)\nTEXT: The squirrel needs the cat.\nFOL: Needs(squirrel, cat)\nTEXT: The squirrel sees the cow.\nFOL: Sees(squirrel, cow)\nTEXT: If someone sees the squirrel then they need the cow.\nFOL: all x. (Sees(x, squirrel) -> Needs(x, cow))\nTEXT: If someone is kind then they need the dog.\nFOL: all x. (Kind(x) -> Needs(x, dog))\nTEXT: If the cow needs the dog and the cow chases the cat then the dog is kind.\nFOL: (Needs(cow, dog) & Chases(cow, cat)) -> Kind(dog)\nTEXT: The cow needs the dog.\nFOL: Needs(cow, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the dog.\nFOL: Chase(cat, dog)\nTEXT: The cat needs the cow.\nFOL: Need(cat, cow)\nTEXT: The cat sees the squirrel.\nFOL: See(cat, squirrel)\nTEXT: The cow chases the cat.\nFOL: Chase(cow, cat)\nTEXT: The cow chases the squirrel.\nFOL: Chase(cow, squirrel)\nTEXT: The cow is kind.\nFOL: Kind(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow needs the cat.\nFOL: Need(cow, cat)\nTEXT: The cow sees the squirrel.\nFOL: See(cow, squirrel)\nTEXT: The dog chases the squirrel.\nFOL: Chase(dog, squirrel)\nTEXT: The dog is nice.\nFOL: Nice(dog)\nTEXT: The dog needs the cow.\nFOL: Need(dog, cow)\nTEXT: The dog sees the cat.\nFOL: See(dog, cat)\nTEXT: The squirrel is blue.\nFOL: Blue(squirrel)\nTEXT: The squirrel needs the cat.\nFOL: Need(squirrel, cat)\nTEXT: The squirrel sees the cow.\nFOL: See(squirrel, cow)\nTEXT: If someone sees the squirrel then they need the cow.\nFOL: all x. (See(x, squirrel) -> Need(x, cow))\nTEXT: If someone is kind then they need the dog.\nFOL: all x. (Kind(x) -> Need(x, dog))\nTEXT: If the cow needs the dog and the cow chases the cat then the dog is kind.\nFOL: (Need(cow, dog) & Chase(cow, cat)) -> Kind(dog)\nTEXT: The cow needs the dog.\nFOL: Need(cow, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the dog.\nFOL: Chases(cat, dog)\nTEXT: The cat needs the cow.\nFOL: Needs(cat, cow)\nTEXT: The cat sees the squirrel.\nFOL: Sees(cat, squirrel)\nTEXT: The cow chases the cat.\nFOL: Chases(cow, cat)\nTEXT: The cow chases the squirrel.\nFOL: Chases(cow, squirrel)\nTEXT: The cow is kind.\nFOL: Kind(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow needs the cat.\nFOL: Needs(cow, cat)\nTEXT: The cow sees the squirrel.\nFOL: Sees(cow, squirrel)\nTEXT: The dog chases the squirrel.\nFOL: Chases(dog, squirrel)\nTEXT: The dog is nice.\nFOL: Nice(dog)\nTEXT: The dog needs the cow.\nFOL: Needs(dog, cow)\nTEXT: The dog sees the cat.\nFOL: Sees(dog, cat)\nTEXT: The squirrel is blue.\nFOL: Blue(squirrel)\nTEXT: The squirrel needs the cat.\nFOL: Needs(squirrel, cat)\nTEXT: The squirrel sees the cow.\nFOL: Sees(squirrel, cow)\nTEXT: If someone sees the squirrel then they need the cow.\nFOL: (Sees(x, squirrel) -> Needs(x, cow))\nTEXT: If someone is kind then they need the dog.\nFOL: (Kind(x) -> Needs(x, dog))\nTEXT: If the cow needs the dog and the cow chases the cat then the dog is kind.\nFOL: ((Needs(cow, dog) & Chases(cow, cat)) -> Kind(dog))\nTEXT: The cow needs the dog.\nFOL: Needs(cow, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the dog.\nFOL: Chases(cat, dog)\n\nTEXT: The cat needs the cow.\nFOL: Needs(cat, cow)\n\nTEXT: The cat sees the squirrel.\nFOL: Sees(cat, squirrel)\n\nTEXT: The cow chases the cat.\nFOL: Chases(cow, cat)\n\nTEXT: The cow chases the squirrel.\nFOL: Chases(cow, squirrel)\n\nTEXT: The cow is kind.\nFOL: Kind(cow)\n\nTEXT: The cow is red.\nFOL: Red(cow)\n\nTEXT: The cow needs the cat.\nFOL: Needs(cow, cat)\n\nTEXT: The cow sees the squirrel.\nFOL: Sees(cow, squirrel)\n\nTEXT: The dog chases the squirrel.\nFOL: Chases(dog, squirrel)\n\nTEXT: The dog is nice.\nFOL: Nice(dog)\n\nTEXT: The dog needs the cow.\nFOL: Needs(dog, cow)\n\nTEXT: The dog sees the cat.\nFOL: Sees(dog, cat)\n\nTEXT: The squirrel is blue.\nFOL: Blue(squirrel)\n\nTEXT: The squirrel needs the cat.\nFOL: Needs(squirrel, cat)\n\nTEXT: The squirrel sees the cow.\nFOL: Sees(squirrel, cow)\n\nTEXT: If someone sees the squirrel then they need the cow.\nFOL: all x. (Sees(x, squirrel) -> Needs(x, cow))\n\nTEXT: If someone is kind then they need the dog.\nFOL: all x. (Kind(x) -> Needs(x, dog))\n\nTEXT: If the cow needs the dog and the cow chases the cat then the dog is kind.\nFOL: (Needs(cow, dog) & Chases(cow, cat)) -> Kind(dog)\n\nTEXT: The cow needs the dog.\nFOL: Needs(cow, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the dog.\nFOL: Chases(cat, dog)\nTEXT: The cat needs the cow.\nFOL: Needs(cat, cow)\nTEXT: The cat sees the squirrel.\nFOL: Sees(cat, squirrel)\nTEXT: The cow chases the cat.\nFOL: Chases(cow, cat)\nTEXT: The cow chases the squirrel.\nFOL: Chases(cow, squirrel)\nTEXT: The cow is kind.\nFOL: Kind(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow needs the cat.\nFOL: Needs(cow, cat)\nTEXT: The cow sees the squirrel.\nFOL: Sees(cow, squirrel)\nTEXT: The dog chases the squirrel.\nFOL: Chases(dog, squirrel)\nTEXT: The dog is nice.\nFOL: Nice(dog)\nTEXT: The dog needs the cow.\nFOL: Needs(dog, cow)\nTEXT: The dog sees the cat.\nFOL: Sees(dog, cat)\nTEXT: The squirrel is blue.\nFOL: Blue(squirrel)\nTEXT: The squirrel needs the cat.\nFOL: Needs(squirrel, cat)\nTEXT: The squirrel sees the cow.\nFOL: Sees(squirrel, cow)\nTEXT: If someone sees the squirrel then they need the cow.\nFOL: all x. (Sees(x, squirrel) -> Needs(x, cow))\nTEXT: If someone is kind then they need the dog.\nFOL: all x. (Kind(x) -> Needs(x, dog))\nTEXT: If the cow needs the dog and the cow chases the cat then the dog is kind.\nFOL: all x y. (Needs(cow, x) & Chases(cow, y) -> Kind(x))\nTEXT: The cow needs the dog.\nFOL: Needs(cow, dog)\n</EVALUATE>"
  ]
 },
 {
  "index": 76,
  "responses": [
   "<EVALUATE>\nTEXT: The lion chases the tiger.\nFOL: Chases(lion, tiger)\nTEXT: The lion eats the rabbit.\nFOL: Eats(lion, rabbit)\nTEXT: The lion eats the tiger.\nFOL: Eats(lion, tiger)\nTEXT: The lion is young.\nFOL: Young(lion)\nTEXT: The rabbit chases the lion.\nFOL: Chases(rabbit, lion)\nTEXT: The rabbit eats the lion.\nFOL: Eats(rabbit, lion)\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\nTEXT: The rabbit is big.\nFOL: Big(rabbit)\nTEXT: The rabbit is blue.\nFOL: Blue(rabbit)\nTEXT: The rabbit is young.\nFOL: Young(rabbit)\nTEXT: The rabbit needs the lion.\nFOL: Needs(rabbit, lion)\nTEXT: The rabbit needs the tiger.\nFOL: Needs(rabbit, tiger)\nTEXT: The tiger chases the rabbit.\nFOL: Chases(tiger, rabbit)\nTEXT: The tiger eats the lion.\nFOL: Eats(tiger, lion)\nTEXT: The tiger needs the lion.\nFOL: Needs(tiger, lion)\nTEXT: If someone chases the rabbit then they are young.\nFOL: all x. (Chases(x, rabbit) -> Young(x))\nTEXT: If the lion is young then the lion chases the tiger.\nFOL: Young(lion) -> Chases(lion, tiger)\nTEXT: If someone needs the tiger and the tiger eats the rabbit then the tiger chases the rabbit.\nFOL: (Needs(x, tiger) & Eats(tiger, rabbit)) -> Chases(tiger, rabbit)\nTEXT: All kind, blue people are red.\nFOL: all x. (Kind(x) & Blue(x) -> Red(x))\nTEXT: If someone is big and they chase the lion then they need the lion.\nFOL: (Big(x) & Chases(x, lion)) -> Needs(x, lion)\nTEXT: If someone needs the lion and they eat the lion then the lion needs the tiger.\nFOL: (Needs(x, lion) & Eats(x, lion)) -> Needs(lion, tiger)\nTEXT: If someone chases the lion then they need the tiger.\nFOL: Chases(x, lion) -> Needs(x, tiger)\nTEXT: If someone is young then they chase the lion.\nFOL: Young(x) -> Chases(x, lion)\nTEXT: The rabbit does not chase the rabbit.\nFOL: -Chases(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The lion chases the tiger.\nFOL: Chases(lion, tiger)\nTEXT: The lion eats the rabbit.\nFOL: Eats(lion, rabbit)\nTEXT: The lion eats the tiger.\nFOL: Eats(lion, tiger)\nTEXT: The lion is young.\nFOL: Young(lion)\nTEXT: The rabbit chases the lion.\nFOL: Chases(rabbit, lion)\nTEXT: The rabbit eats the lion.\nFOL: Eats(rabbit, lion)\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\nTEXT: The rabbit is big.\nFOL: Big(rabbit)\nTEXT: The rabbit is blue.\nFOL: Blue(rabbit)\nTEXT: The rabbit is young.\nFOL: Young(rabbit)\nTEXT: The rabbit needs the lion.\nFOL: Needs(rabbit, lion)\nTEXT: The rabbit needs the tiger.\nFOL: Needs(rabbit, tiger)\nTEXT: The tiger chases the rabbit.\nFOL: Chases(tiger, rabbit)\nTEXT: The tiger eats the lion.\nFOL: Eats(tiger, lion)\nTEXT: The tiger needs the lion.\nFOL: Needs(tiger, lion)\nTEXT: If someone chases the rabbit then they are young.\nFOL: all x. (Chases(x, rabbit) -> Young(x))\nTEXT: If the lion is young then the lion chases the tiger.\nFOL: Young(lion) -> Chases(lion, tiger)\nTEXT: If someone needs the tiger and the tiger eats the rabbit then the tiger chases the rabbit.\nFOL: all x. ((Needs(x, tiger) & Eats(tiger, rabbit)) -> Chases(tiger, rabbit))\nTEXT: All kind, blue people are red.\nFOL: all x. (Kind(x) & Blue(x) -> Red(x))\nTEXT: If someone is big and they chase the lion then they need the lion.\nFOL: all x. (Big(x) & Chases(x, lion) -> Needs(x, lion))\nTEXT: If someone needs the lion and they eat the lion then the lion needs the tiger.\nFOL: all x. ((Needs(x, lion) & Eats(x, lion)) -> Needs(lion, tiger))\nTEXT: If someone chases the lion then they need the tiger.\nFOL: all x. (Chases(x, lion) -> Needs(x, tiger))\nTEXT: If someone is young then they chase the lion.\nFOL: all x. (Young(x) -> Chases(x, lion))\nTEXT: The rabbit does not chase the rabbit.\nFOL: -Chases(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The lion chases the tiger.\nFOL: Chases(lion, tiger)\nTEXT: The lion eats the rabbit.\nFOL: Eats(lion, rabbit)\nTEXT: The lion eats the tiger.\nFOL: Eats(lion, tiger)\nTEXT: The lion is young.\nFOL: Young(lion)\nTEXT: The rabbit chases the lion.\nFOL: Chases(rabbit, lion)\nTEXT: The rabbit eats the lion.\nFOL: Eats(rabbit, lion)\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\nTEXT: The rabbit is big.\nFOL: Big(rabbit)\nTEXT: The rabbit is blue.\nFOL: Blue(rabbit)\nTEXT: The rabbit is young.\nFOL: Young(rabbit)\nTEXT: The rabbit needs the lion.\nFOL: Needs(rabbit, lion)\nTEXT: The rabbit needs the tiger.\nFOL: Needs(rabbit, tiger)\nTEXT: The tiger chases the rabbit.\nFOL: Chases(tiger, rabbit)\nTEXT: The tiger eats the lion.\nFOL: Eats(tiger, lion)\nTEXT: The tiger needs the lion.\nFOL: Needs(tiger, lion)\nTEXT: If someone chases the rabbit then they are young.\nFOL: all x. (Chases(x, rabbit) -> Young(x))\nTEXT: If the lion is young then the lion chases the tiger.\nFOL: Young(lion) -> Chases(lion, tiger)\nTEXT: If someone needs the tiger and the tiger eats the rabbit then the tiger chases the rabbit.\nFOL: all x. ((Needs(x, tiger) & Eats(tiger, rabbit)) -> Chases(tiger, rabbit))\nTEXT: All kind, blue people are red.\nFOL: all x. (Kind(x) & Blue(x) -> Red(x))\nTEXT: If someone is big and they chase the lion then they need the lion.\nFOL: all x. ((Big(x) & Chases(x, lion)) -> Needs(x, lion))\nTEXT: If someone needs the lion and they eat the lion then the lion needs the tiger.\nFOL: all x. ((Needs(x, lion) & Eats(x, lion)) -> Needs(lion, tiger))\nTEXT: If someone chases the lion then they need the tiger.\nFOL: all x. (Chases(x, lion) -> Needs(x, tiger))\nTEXT: If someone is young then they chase the lion.\nFOL: all x. (Young(x) -> Chases(x, lion))\nTEXT: The rabbit does not chase the rabbit.\nFOL: -Chases(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The lion chases the tiger.\nFOL: Chase(lion, tiger)\nTEXT: The lion eats the rabbit.\nFOL: Eat(lion, rabbit)\nTEXT: The lion eats the tiger.\nFOL: Eat(lion, tiger)\nTEXT: The lion is young.\nFOL: Young(lion)\nTEXT: The rabbit chases the lion.\nFOL: Chase(rabbit, lion)\nTEXT: The rabbit eats the lion.\nFOL: Eat(rabbit, lion)\nTEXT: The rabbit eats the tiger.\nFOL: Eat(rabbit, tiger)\nTEXT: The rabbit is big.\nFOL: Big(rabbit)\nTEXT: The rabbit is blue.\nFOL: Blue(rabbit)\nTEXT: The rabbit is young.\nFOL: Young(rabbit)\nTEXT: The rabbit needs the lion.\nFOL: Need(rabbit, lion)\nTEXT: The rabbit needs the tiger.\nFOL: Need(rabbit, tiger)\nTEXT: The tiger chases the rabbit.\nFOL: Chase(tiger, rabbit)\nTEXT: The tiger eats the lion.\nFOL: Eat(tiger, lion)\nTEXT: The tiger needs the lion.\nFOL: Need(tiger, lion)\nTEXT: If someone chases the rabbit then they are young.\nFOL: all x. (Chase(x, rabbit) -> Young(x))\nTEXT: If the lion is young then the lion chases the tiger.\nFOL: Young(lion) -> Chase(lion, tiger)\nTEXT: If someone needs the tiger and the tiger eats the rabbit then the tiger chases the rabbit.\nFOL: (Need(x, tiger) & Eat(tiger, rabbit)) -> Chase(tiger, rabbit)\nTEXT: All kind, blue people are red.\nFOL: all x. (Kind(x) & Blue(x) -> Red(x))\nTEXT: If someone is big and they chase the lion then they need the lion.\nFOL: (Big(x) & Chase(x, lion)) -> Need(x, lion)\nTEXT: If someone needs the lion and they eat the lion then the lion needs the tiger.\nFOL: (Need(x, lion) & Eat(x, lion)) -> Need(lion, tiger)\nTEXT: If someone chases the lion then they need the tiger.\nFOL: Chase(x, lion) -> Need(x, tiger)\nTEXT: If someone is young then they chase the lion.\nFOL: Young(x) -> Chase(x, lion)\nTEXT: The rabbit does not chase the rabbit.\nFOL: -Chase(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The lion chases the tiger.\nFOL: Chases(lion, tiger)\nTEXT: The lion eats the rabbit.\nFOL: Eats(lion, rabbit)\nTEXT: The lion eats the tiger.\nFOL: Eats(lion, tiger)\nTEXT: The lion is young.\nFOL: Young(lion)\nTEXT: The rabbit chases the lion.\nFOL: Chases(rabbit, lion)\nTEXT: The rabbit eats the lion.\nFOL: Eats(rabbit, lion)\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\nTEXT: The rabbit is big.\nFOL: Big(rabbit)\nTEXT: The rabbit is blue.\nFOL: Blue(rabbit)\nTEXT: The rabbit is young.\nFOL: Young(rabbit)\nTEXT: The rabbit needs the lion.\nFOL: Needs(rabbit, lion)\nTEXT: The rabbit needs the tiger.\nFOL: Needs(rabbit, tiger)\nTEXT: The tiger chases the rabbit.\nFOL: Chases(tiger, rabbit)\nTEXT: The tiger eats the lion.\nFOL: Eats(tiger, lion)\nTEXT: The tiger needs the lion.\nFOL: Needs(tiger, lion)\nTEXT: If someone chases the rabbit then they are young.\nFOL: all x. (Chases(x, rabbit) -> Young(x))\nTEXT: If the lion is young then the lion chases the tiger.\nFOL: Young(lion) -> Chases(lion, tiger)\nTEXT: If someone needs the tiger and the tiger eats the rabbit then the tiger chases the rabbit.\nFOL: all x. ((Needs(x, tiger) & Eats(tiger, rabbit)) -> Chases(tiger, rabbit))\nTEXT: All kind, blue people are red.\nFOL: all x. (Kind(x) & Blue(x) -> Red(x))\nTEXT: If someone is big and they chase the lion then they need the lion.\nFOL: all x. (Big(x) & Chases(x, lion) -> Needs(x, lion))\nTEXT: If someone needs the lion and they eat the lion then the lion needs the tiger.\nFOL: all x. (Needs(x, lion) & Eats(x, lion) -> Needs(lion, tiger))\nTEXT: If someone chases the lion then they need the tiger.\nFOL: all x. (Chases(x, lion) -> Needs(x, tiger))\nTEXT: If someone is young then they chase the lion.\nFOL: all x. (Young(x) -> Chases(x, lion))\nTEXT: The rabbit does not chase the rabbit.\nFOL: -Chases(rabbit, rabbit)\n</EVALUATE>"
  ]
 },
 {
  "index": 77,
  "responses": [
   "<EVALUATE>\nTEXT: The dog chases the tiger.\nFOL: Chase(dog, tiger)\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The dog is kind.\nFOL: Kind(dog)\nTEXT: The dog is red.\nFOL: Red(dog)\nTEXT: The dog does not see the tiger.\nFOL: -See(dog, tiger)\nTEXT: The dog visits the tiger.\nFOL: Visit(dog, tiger)\nTEXT: The tiger does not chase the dog.\nFOL: -Chase(tiger, dog)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger is red.\nFOL: Red(tiger)\nTEXT: The tiger visits the dog.\nFOL: Visit(tiger, dog)\nTEXT: If something is big then it does not visit the dog.\nFOL: all x. (Big(x) -> -Visit(x, dog))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x. (See(x, tiger) -> Big(tiger))\nTEXT: Kind things are big.\nFOL: all x. (Kind(x) -> Big(x))\nTEXT: If something visits the tiger then it is kind.\nFOL: all x. (Visit(x, tiger) -> Kind(x))\nTEXT: If something sees the tiger then it sees the dog.\nFOL: all x. (See(x, tiger) -> See(x, dog))\nTEXT: If something is green then it sees the dog.\nFOL: all x. (Green(x) -> See(x, dog))\nTEXT: If something visits the tiger and the tiger is not big then the tiger is not green.\nFOL: all x. ((Visit(x, tiger) & -Big(tiger)) -> -Green(tiger))\nTEXT: If something is red and it does not visit the dog then it chases the dog.\nFOL: all x. ((Red(x) & -Visit(x, dog)) -> Chase(x, dog))\nTEXT: The tiger does not chase the dog.\nFOL: -Chase(tiger, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog chases the tiger.\nFOL: Chase(dog, tiger)\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The dog is kind.\nFOL: Kind(dog)\nTEXT: The dog is red.\nFOL: Red(dog)\nTEXT: The dog does not see the tiger.\nFOL: -See(dog, tiger)\nTEXT: The dog visits the tiger.\nFOL: Visit(dog, tiger)\nTEXT: The tiger does not chase the dog.\nFOL: -Chase(tiger, dog)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger is red.\nFOL: Red(tiger)\nTEXT: The tiger visits the dog.\nFOL: Visit(tiger, dog)\nTEXT: If something is big then it does not visit the dog.\nFOL: all x. (Big(x) -> -Visit(x, dog))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x. (See(x, tiger) -> Big(tiger))\nTEXT: Kind things are big.\nFOL: all x. (Kind(x) -> Big(x))\nTEXT: If something visits the tiger then it is kind.\nFOL: all x. (Visit(x, tiger) -> Kind(x))\nTEXT: If something sees the tiger then it sees the dog.\nFOL: all x. (See(x, tiger) -> See(x, dog))\nTEXT: If something is green then it sees the dog.\nFOL: all x. (Green(x) -> See(x, dog))\nTEXT: If something visits the tiger and the tiger is not big then the tiger is not green.\nFOL: all x. ((Visit(x, tiger) & -Big(tiger)) -> -Green(tiger))\nTEXT: If something is red and it does not visit the dog then it chases the dog.\nFOL: all x. (Red(x) & -Visit(x, dog) -> Chase(x, dog))\nTEXT: The tiger does not chase the dog.\nFOL: -Chase(tiger, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog chases the tiger.\nFOL: Chases(dog, tiger)\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The dog is kind.\nFOL: Kind(dog)\nTEXT: The dog is red.\nFOL: Red(dog)\nTEXT: The dog does not see the tiger.\nFOL: -See(dog, tiger)\nTEXT: The dog visits the tiger.\nFOL: Visit(dog, tiger)\nTEXT: The tiger does not chase the dog.\nFOL: -Chases(tiger, dog)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger is red.\nFOL: Red(tiger)\nTEXT: The tiger visits the dog.\nFOL: Visit(tiger, dog)\nTEXT: If something is big then it does not visit the dog.\nFOL: all x. (Big(x) -> -Visit(x, dog))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x. (See(x, tiger) -> Big(tiger))\nTEXT: Kind things are big.\nFOL: all x. (Kind(x) -> Big(x))\nTEXT: If something visits the tiger then it is kind.\nFOL: all x. (Visit(x, tiger) -> Kind(x))\nTEXT: If something sees the tiger then it sees the dog.\nFOL: all x. (See(x, tiger) -> See(x, dog))\nTEXT: If something is green then it sees the dog.\nFOL: all x. (Green(x) -> See(x, dog))\nTEXT: If something visits the tiger and the tiger is not big then the tiger is not green.\nFOL: all x. ((Visit(x, tiger) & -Big(tiger)) -> -Green(tiger))\nTEXT: If something is red and it does not visit the dog then it chases the dog.\nFOL: all x. ((Red(x) & -Visit(x, dog)) -> Chases(x, dog))\nTEXT: The tiger does not chase the dog.\nFOL: -Chases(tiger, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog chases the tiger.\nFOL: Chases(dog, tiger)\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The dog is kind.\nFOL: Kind(dog)\nTEXT: The dog is red.\nFOL: Red(dog)\nTEXT: The dog does not see the tiger.\nFOL: -Sees(dog, tiger)\nTEXT: The dog visits the tiger.\nFOL: Visits(dog, tiger)\nTEXT: The tiger does not chase the dog.\nFOL: -Chases(tiger, dog)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger is red.\nFOL: Red(tiger)\nTEXT: The tiger visits the dog.\nFOL: Visits(tiger, dog)\nTEXT: If something is big then it does not visit the dog.\nFOL: all x. (Big(x) -> -Visits(x, dog))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x. (Sees(x, tiger) -> Big(tiger))\nTEXT: Kind things are big.\nFOL: all x. (Kind(x) -> Big(x))\nTEXT: If something visits the tiger then it is kind.\nFOL: all x. (Visits(x, tiger) -> Kind(x))\nTEXT: If something sees the tiger then it sees the dog.\nFOL: all x. (Sees(x, tiger) -> Sees(x, dog))\nTEXT: If something is green then it sees the dog.\nFOL: all x. (Green(x) -> Sees(x, dog))\nTEXT: If something visits the tiger and the tiger is not big then the tiger is not green.\nFOL: all x. ((Visits(x, tiger) & -Big(tiger)) -> -Green(tiger))\nTEXT: If something is red and it does not visit the dog then it chases the dog.\nFOL: all x. ((Red(x) & -Visits(x, dog)) -> Chases(x, dog))\nTEXT: The tiger does not chase the dog.\nFOL: -Chases(tiger, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog chases the tiger.\nFOL: Chase(dog, tiger)\n\nTEXT: The dog is green.\nFOL: Green(dog)\n\nTEXT: The dog is kind.\nFOL: Kind(dog)\n\nTEXT: The dog is red.\nFOL: Red(dog)\n\nTEXT: The dog does not see the tiger.\nFOL: -See(dog, tiger)\n\nTEXT: The dog visits the tiger.\nFOL: Visit(dog, tiger)\n\nTEXT: The tiger does not chase the dog.\nFOL: -Chase(tiger, dog)\n\nTEXT: The tiger is green.\nFOL: Green(tiger)\n\nTEXT: The tiger is red.\nFOL: Red(tiger)\n\nTEXT: The tiger visits the dog.\nFOL: Visit(tiger, dog)\n\nTEXT: If something is big then it does not visit the dog.\nFOL: all x. (Big(x) -> -Visit(x, dog))\n\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x. (See(x, tiger) -> Big(tiger))\n\nTEXT: Kind things are big.\nFOL: all x. (Kind(x) -> Big(x))\n\nTEXT: If something visits the tiger then it is kind.\nFOL: all x. (Visit(x, tiger) -> Kind(x))\n\nTEXT: If something sees the tiger then it sees the dog.\nFOL: all x. (See(x, tiger) -> See(x, dog))\n\nTEXT: If something is green then it sees the dog.\nFOL: all x. (Green(x) -> See(x, dog))\n\nTEXT: If something visits the tiger and the tiger is not big then the tiger is not green.\nFOL: all x. ((Visit(x, tiger) & -Big(tiger)) -> -Green(tiger))\n\nTEXT: If something is red and it does not visit the dog then it chases the dog.\nFOL: all x. ((Red(x) & -Visit(x, dog)) -> Chase(x, dog))\n\nTEXT: The tiger does not chase the dog.\nFOL: -Chase(tiger, dog)\n</EVALUATE>"
  ]
 },
 {
  "index": 78,
  "responses": [
   "<EVALUATE>\nTEXT: The cow does not chase the dog.\nFOL: -Chase(cow, dog)\nTEXT: The dog is kind.\nFOL: Kind(dog)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger chases the dog.\nFOL: Chase(tiger, dog)\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: If something is green then it chases the tiger.\nFOL: all x. (Green(x) -> Chase(x, tiger))\nTEXT: If the cow sees the dog then the dog sees the rabbit.\nFOL: (See(cow, dog) -> See(dog, rabbit))\nTEXT: The rabbit sees the rabbit.\nFOL: See(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow does not chase the dog.\nFOL: -Chases(cow, dog)\nTEXT: The dog is kind.\nFOL: Kind(dog)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger chases the dog.\nFOL: Chases(tiger, dog)\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: If something is green then it chases the tiger.\nFOL: all x. (Green(x) -> Chases(x, tiger))\nTEXT: If the cow sees the dog then the dog sees the rabbit.\nFOL: (Sees(cow, dog) -> Sees(dog, rabbit))\nTEXT: The rabbit sees the rabbit.\nFOL: Sees(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow does not chase the dog.\nFOL: -Chase(cow, dog)\nTEXT: The dog is kind.\nFOL: Kind(dog)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger chases the dog.\nFOL: Chase(tiger, dog)\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: If something is green then it chases the tiger.\nFOL: all x. (Green(x) -> Chase(x, tiger))\nTEXT: If the cow sees the dog then the dog sees the rabbit.\nFOL: (Sees(cow, dog) -> Sees(dog, rabbit))\nTEXT: The rabbit sees the rabbit.\nFOL: Sees(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow does not chase the dog.\nFOL: -Chase(cow, dog)\nTEXT: The dog is kind.\nFOL: Kind(dog)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger chases the dog.\nFOL: Chase(tiger, dog)\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: If something is green then it chases the tiger.\nFOL: all x. (Green(x) -> Chase(x, tiger))\nTEXT: If the cow sees the dog then the dog sees the rabbit.\nFOL: all x. (See(cow, dog) -> See(dog, rabbit))\nTEXT: The rabbit sees the rabbit.\nFOL: See(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow does not chase the dog.\nFOL: -Chase(cow, dog)\nTEXT: The dog is kind.\nFOL: Kind(dog)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger chases the dog.\nFOL: Chase(tiger, dog)\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: If something is green then it chases the tiger.\nFOL: all x. (Green(x) -> Chase(x, tiger))\nTEXT: If the cow sees the dog then the dog sees the rabbit.\nFOL: all x y. (See(cow, dog) -> See(dog, rabbit))\nTEXT: The rabbit sees the rabbit.\nFOL: See(rabbit, rabbit)\n</EVALUATE>"
  ]
 },
 {
  "index": 79,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is nice.\nFOL: Nice(bob)\nTEXT: Bob is quiet.\nFOL: Quiet(bob)\nTEXT: Bob is rough.\nFOL: Rough(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Gary is rough.\nFOL: Rough(gary)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: Harry is nice.\nFOL: Nice(harry)\nTEXT: Harry is rough.\nFOL: Rough(harry)\nTEXT: Round things are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If something is red and rough then it is big.\nFOL: all x. ((Red(x) & Rough(x)) -> Big(x))\nTEXT: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\nTEXT: All big, round things are quiet.\nFOL: all x. ((Big(x) & Round(x)) -> Quiet(x))\nTEXT: If something is nice and round then it is quiet.\nFOL: all x. ((Nice(x) & Round(x)) -> Quiet(x))\nTEXT: All rough, quiet things are nice.\nFOL: all x. ((Rough(x) & Quiet(x)) -> Nice(x))\nTEXT: Gary is young.\nFOL: Young(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is nice.\nFOL: Nice(bob)\nTEXT: Bob is quiet.\nFOL: Quiet(bob)\nTEXT: Bob is rough.\nFOL: Rough(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Gary is rough.\nFOL: Rough(gary)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: Harry is nice.\nFOL: Nice(harry)\nTEXT: Harry is rough.\nFOL: Rough(harry)\nTEXT: Round things are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If something is red and rough then it is big.\nFOL: all x. (Red(x) & Rough(x) -> Big(x))\nTEXT: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\nTEXT: All big, round things are quiet.\nFOL: all x. ((Big(x) & Round(x)) -> Quiet(x))\nTEXT: If something is nice and round then it is quiet.\nFOL: all x. (Nice(x) & Round(x) -> Quiet(x))\nTEXT: All rough, quiet things are nice.\nFOL: all x. ((Rough(x) & Quiet(x)) -> Nice(x))\nTEXT: Gary is young.\nFOL: Young(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is nice.\nFOL: Nice(bob)\nTEXT: Bob is quiet.\nFOL: Quiet(bob)\nTEXT: Bob is rough.\nFOL: Rough(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Gary is rough.\nFOL: Rough(gary)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: Harry is nice.\nFOL: Nice(harry)\nTEXT: Harry is rough.\nFOL: Rough(harry)\nTEXT: Round things are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If something is red and rough then it is big.\nFOL: all x. (Red(x) & Rough(x) -> Big(x))\nTEXT: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\nTEXT: All big, round things are quiet.\nFOL: all x. (Big(x) & Round(x) -> Quiet(x))\nTEXT: If something is nice and round then it is quiet.\nFOL: all x. (Nice(x) & Round(x) -> Quiet(x))\nTEXT: All rough, quiet things are nice.\nFOL: all x. (Rough(x) & Quiet(x) -> Nice(x))\nTEXT: Gary is young.\nFOL: Young(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is nice.\nFOL: Nice(bob)\nTEXT: Bob is quiet.\nFOL: Quiet(bob)\nTEXT: Bob is rough.\nFOL: Rough(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Gary is rough.\nFOL: Rough(gary)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: Harry is nice.\nFOL: Nice(harry)\nTEXT: Harry is rough.\nFOL: Rough(harry)\nTEXT: Round things are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If something is red and rough then it is big.\nFOL: all x. ((Red(x) & Rough(x)) -> Big(x))\nTEXT: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\nTEXT: All big, round things are quiet.\nFOL: all x. (Big(x) & Round(x) -> Quiet(x))\nTEXT: If something is nice and round then it is quiet.\nFOL: all x. ((Nice(x) & Round(x)) -> Quiet(x))\nTEXT: All rough, quiet things are nice.\nFOL: all x. (Rough(x) & Quiet(x) -> Nice(x))\nTEXT: Gary is young.\nFOL: Young(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: Big(bob)\n\nTEXT: Bob is nice.\nFOL: Nice(bob)\n\nTEXT: Bob is quiet.\nFOL: Quiet(bob)\n\nTEXT: Bob is rough.\nFOL: Rough(bob)\n\nTEXT: Bob is round.\nFOL: Round(bob)\n\nTEXT: Gary is red.\nFOL: Red(gary)\n\nTEXT: Gary is rough.\nFOL: Rough(gary)\n\nTEXT: Gary is round.\nFOL: Round(gary)\n\nTEXT: Harry is nice.\nFOL: Nice(harry)\n\nTEXT: Harry is rough.\nFOL: Rough(harry)\n\nTEXT: Round things are big.\nFOL: all x. (Round(x) -> Big(x))\n\nTEXT: If something is red and rough then it is big.\nFOL: all x. ((Red(x) & Rough(x)) -> Big(x))\n\nTEXT: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\n\nTEXT: All big, round things are quiet.\nFOL: all x. ((Big(x) & Round(x)) -> Quiet(x))\n\nTEXT: If something is nice and round then it is quiet.\nFOL: all x. ((Nice(x) & Round(x)) -> Quiet(x))\n\nTEXT: All rough, quiet things are nice.\nFOL: all x. ((Rough(x) & Quiet(x)) -> Nice(x))\n\nTEXT: Gary is young.\nFOL: Young(gary)\n</EVALUATE>"
  ]
 },
 {
  "index": 80,
  "responses": [
   "<EVALUATE>\nTEXT: The lion is rough.\nFOL: Rough(lion)\nTEXT: The tiger chases the lion.\nFOL: Chases(tiger, lion)\nTEXT: If the lion eats the tiger and the lion sees the tiger then the tiger is kind.\nFOL: (Eats(lion, tiger) & Sees(lion, tiger)) -> Kind(tiger)\nTEXT: If something eats the tiger then the tiger eats the lion.\nFOL: all x. (Eats(x, tiger) -> Eats(tiger, lion))\nTEXT: If something sees the tiger then the tiger does not eat the lion.\nFOL: all x. (Sees(x, tiger) -> -Eats(tiger, lion))\nTEXT: If something is rough then it is red.\nFOL: all x. (Rough(x) -> Red(x))\nTEXT: If something chases the lion then the lion eats the tiger.\nFOL: all x. (Chases(x, lion) -> Eats(lion, tiger))\nTEXT: If something sees the tiger then the tiger sees the lion.\nFOL: all x. (Sees(x, tiger) -> Sees(tiger, lion))\nTEXT: If something eats the lion then the lion chases the tiger.\nFOL: all x. (Eats(x, lion) -> Chases(lion, tiger))\nTEXT: If the lion is not rough then the lion is not kind.\nFOL: -Rough(lion) -> -Kind(lion)\nTEXT: The tiger does not eat the lion.\nFOL: -Eats(tiger, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The lion is rough.\nFOL: Rough(lion)\nTEXT: The tiger chases the lion.\nFOL: Chases(tiger, lion)\nTEXT: If the lion eats the tiger and the lion sees the tiger then the tiger is kind.\nFOL: (Eats(lion, tiger) & Sees(lion, tiger)) -> Kind(tiger)\nTEXT: If something eats the tiger then the tiger eats the lion.\nFOL: all x. (Eats(x, tiger) -> Eats(tiger, x))\nTEXT: If something sees the tiger then the tiger does not eat the lion.\nFOL: all x. (Sees(x, tiger) -> -Eats(tiger, lion))\nTEXT: If something is rough then it is red.\nFOL: all x. (Rough(x) -> Red(x))\nTEXT: If something chases the lion then the lion eats the tiger.\nFOL: all x. (Chases(x, lion) -> Eats(lion, tiger))\nTEXT: If something sees the tiger then the tiger sees the lion.\nFOL: all x. (Sees(x, tiger) -> Sees(tiger, lion))\nTEXT: If something eats the lion then the lion chases the tiger.\nFOL: all x. (Eats(x, lion) -> Chases(lion, tiger))\nTEXT: If the lion is not rough then the lion is not kind.\nFOL: -Rough(lion) -> -Kind(lion)\nTEXT: The tiger does not eat the lion.\nFOL: -Eats(tiger, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The lion is rough.\nFOL: Rough(lion)\n\nTEXT: The tiger chases the lion.\nFOL: Chases(tiger, lion)\n\nTEXT: If the lion eats the tiger and the lion sees the tiger then the tiger is kind.\nFOL: (Eats(lion, tiger) & Sees(lion, tiger)) -> Kind(tiger)\n\nTEXT: If something eats the tiger then the tiger eats the lion.\nFOL: all x. (Eats(x, tiger) -> Eats(tiger, x))\n\nTEXT: If something sees the tiger then the tiger does not eat the lion.\nFOL: all x. (Sees(x, tiger) -> -Eats(tiger, lion))\n\nTEXT: If something is rough then it is red.\nFOL: all x. (Rough(x) -> Red(x))\n\nTEXT: If something chases the lion then the lion eats the tiger.\nFOL: all x. (Chases(x, lion) -> Eats(lion, tiger))\n\nTEXT: If something sees the tiger then the tiger sees the lion.\nFOL: all x. (Sees(x, tiger) -> Sees(tiger, lion))\n\nTEXT: If something eats the lion then the lion chases the tiger.\nFOL: all x. (Eats(x, lion) -> Chases(lion, tiger))\n\nTEXT: If the lion is not rough then the lion is not kind.\nFOL: -Rough(lion) -> -Kind(lion)\n\nTEXT: The tiger does not eat the lion.\nFOL: -Eats(tiger, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The lion is rough.\nFOL: Rough(lion)\n\nTEXT: The tiger chases the lion.\nFOL: Chases(tiger, lion)\n\nTEXT: If the lion eats the tiger and the lion sees the tiger then the tiger is kind.\nFOL: (Eats(lion, tiger) & Sees(lion, tiger)) -> Kind(tiger)\n\nTEXT: If something eats the tiger then the tiger eats the lion.\nFOL: all x. (Eats(x, tiger) -> Eats(tiger, lion))\n\nTEXT: If something sees the tiger then the tiger does not eat the lion.\nFOL: all x. (Sees(x, tiger) -> -Eats(tiger, lion))\n\nTEXT: If something is rough then it is red.\nFOL: all x. (Rough(x) -> Red(x))\n\nTEXT: If something chases the lion then the lion eats the tiger.\nFOL: all x. (Chases(x, lion) -> Eats(lion, tiger))\n\nTEXT: If something sees the tiger then the tiger sees the lion.\nFOL: all x. (Sees(x, tiger) -> Sees(tiger, lion))\n\nTEXT: If something eats the lion then the lion chases the tiger.\nFOL: all x. (Eats(x, lion) -> Chases(lion, tiger))\n\nTEXT: If the lion is not rough then the lion is not kind.\nFOL: -Rough(lion) -> -Kind(lion)\n\nTEXT: The tiger does not eat the lion.\nFOL: -Eats(tiger, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The lion is rough.\nFOL: Rough(lion)\nTEXT: The tiger chases the lion.\nFOL: Chases(tiger, lion)\nTEXT: If the lion eats the tiger and the lion sees the tiger then the tiger is kind.\nFOL: (Eats(lion, tiger) & Sees(lion, tiger) -> Kind(tiger))\nTEXT: If something eats the tiger then the tiger eats the lion.\nFOL: all x. (Eats(x, tiger) -> Eats(tiger, lion))\nTEXT: If something sees the tiger then the tiger does not eat the lion.\nFOL: all x. (Sees(x, tiger) -> -Eats(tiger, lion))\nTEXT: If something is rough then it is red.\nFOL: all x. (Rough(x) -> Red(x))\nTEXT: If something chases the lion then the lion eats the tiger.\nFOL: all x. (Chases(x, lion) -> Eats(lion, tiger))\nTEXT: If something sees the tiger then the tiger sees the lion.\nFOL: all x. (Sees(x, tiger) -> Sees(tiger, lion))\nTEXT: If something eats the lion then the lion chases the tiger.\nFOL: all x. (Eats(x, lion) -> Chases(lion, tiger))\nTEXT: If the lion is not rough then the lion is not kind.\nFOL: -Rough(lion) -> -Kind(lion)\nTEXT: The tiger does not eat the lion.\nFOL: -Eats(tiger, lion)\n</EVALUATE>"
  ]
 },
 {
  "index": 81,
  "responses": [
   "<EVALUATE>\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: If something is kind then it is nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: If something is furry and white then it is rough.\nFOL: all x. ((Furry(x) & White(x)) -> Rough(x))\nTEXT: If something is kind and rough then it is nice.\nFOL: all x. ((Kind(x) & Rough(x)) -> Nice(x))\nTEXT: All nice things are white.\nFOL: all x. (Nice(x) -> White(x))\nTEXT: If Erin is smart then Erin is nice.\nFOL: Smart(erin) -> Nice(erin)\nTEXT: If something is green then it is rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: Erin is not rough.\nFOL: -Rough(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: If something is kind then it is nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: If something is furry and white then it is rough.\nFOL: all x. ((Furry(x) & White(x)) -> Rough(x))\nTEXT: If something is kind and rough then it is nice.\nFOL: all x. ((Kind(x) & Rough(x)) -> Nice(x))\nTEXT: All nice things are white.\nFOL: all x. (Nice(x) -> White(x))\nTEXT: If Erin is smart then Erin is nice.\nFOL: Smart(erin) -> Nice(erin)\nTEXT: If something is green then it is rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: Erin is not rough.\nFOL: -Rough(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: If something is kind then it is nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: If something is furry and white then it is rough.\nFOL: all x. (Furry(x) & White(x) -> Rough(x))\nTEXT: If something is kind and rough then it is nice.\nFOL: all x. ((Kind(x) & Rough(x)) -> Nice(x))\nTEXT: All nice things are white.\nFOL: all x. (Nice(x) -> White(x))\nTEXT: If Erin is smart then Erin is nice.\nFOL: Smart(erin) -> Nice(erin)\nTEXT: If something is green then it is rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: Erin is not rough.\nFOL: -Rough(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: If something is kind then it is nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: If something is furry and white then it is rough.\nFOL: all x. (Furry(x) & White(x) -> Rough(x))\nTEXT: If something is kind and rough then it is nice.\nFOL: all x. ((Kind(x) & Rough(x)) -> Nice(x))\nTEXT: All nice things are white.\nFOL: all x. (Nice(x) -> White(x))\nTEXT: If Erin is smart then Erin is nice.\nFOL: Smart(erin) -> Nice(erin)\nTEXT: If something is green then it is rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: Erin is not rough.\nFOL: -Rough(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: If something is kind then it is nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: If something is furry and white then it is rough.\nFOL: all x. (Furry(x) & White(x) -> Rough(x))\nTEXT: If something is kind and rough then it is nice.\nFOL: all x. (Kind(x) & Rough(x) -> Nice(x))\nTEXT: All nice things are white.\nFOL: all x. (Nice(x) -> White(x))\nTEXT: If Erin is smart then Erin is nice.\nFOL: Smart(erin) -> Nice(erin)\nTEXT: If something is green then it is rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: Erin is not rough.\nFOL: -Rough(erin)\n</EVALUATE>"
  ]
 },
 {
  "index": 82,
  "responses": [
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(alan)\nTEXT: Dave is kind and nice and looks green.\nFOL: Kind(dave) & Nice(dave) & Green(dave)\nTEXT: Even though Eric is round and big, he is very kind.\nFOL: Round(eric) & Big(eric) -> Kind(eric)\nTEXT: When Harry walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: (Nice(harry) & Kind(harry)) -> (Blue(harry) & Red(harry))\nTEXT: A green person that is red and blue are known for their rough skin.\nFOL: Green(x) & Red(x) & Blue(x) -> RoughSkin(x)\nTEXT: Young people who are both nice and cold also tend to be rough.\nFOL: Young(x) & Nice(x) & Cold(x) -> Rough(x)\nTEXT: Nice people who feel blue often look green when ill.\nFOL: Nice(x) & Blue(x) -> GreenWhenIll(x)\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) -> Red(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: Round(x) & Cold(x) -> Blue(x)\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: Green(x) & Nice(x) & Rough(x) -> Round(x)\nTEXT: Harry is not big.\nFOL: -Big(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(alan)\nTEXT: Dave is kind and nice and looks green.\nFOL: Kind(dave) & Nice(dave) & Green(dave)\nTEXT: Even though Eric is round and big, he is very kind.\nFOL: Round(eric) & Big(eric) -> Kind(eric)\nTEXT: When Harry walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: (Nice(harry) & Kind(harry)) -> (Blue(harry) & Red(harry))\nTEXT: A green person that is red and blue are known for their rough skin.\nFOL: Green(x) & Red(x) & Blue(x) -> RoughSkin(x)\nTEXT: Young people who are both nice and cold also tend to be rough.\nFOL: Young(x) & Nice(x) & Cold(x) -> Rough(x)\nTEXT: Nice people who feel blue often look green when ill.\nFOL: Nice(x) & Blue(x) -> GreenWhenIll(x)\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: (Green(x) & Round(x) & Cold(x)) -> Red(x)\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: Round(x) & Cold(x) -> Blue(x)\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: Green(x) & Nice(x) & Rough(x) -> Round(x)\nTEXT: Harry is not big.\nFOL: -Big(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(alan)\nTEXT: Dave is kind and nice and looks green.\nFOL: Kind(dave) & Nice(dave) & Green(dave)\nTEXT: Even though Eric is round and big, he is very kind.\nFOL: Round(eric) & Big(eric) -> Kind(eric)\nTEXT: When Harry walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: (Nice(harry) & Kind(harry)) -> (Blue(harry) & Red(harry))\nTEXT: A green person that is red and blue are known for their rough skin.\nFOL: Green(x) & Red(x) & Blue(x) -> RoughSkin(x)\nTEXT: Young people who are both nice and cold also tend to be rough.\nFOL: Nice(x) & Cold(x) -> Rough(x)\nTEXT: Nice people who feel blue often look green when ill.\nFOL: Nice(x) & Blue(x) -> Green(x)\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) -> Red(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: Round(x) & Cold(x) -> Blue(x)\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: Green(x) & Nice(x) & Rough(x) -> Round(x)\nTEXT: Harry is not big.\nFOL: -Big(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(alan)\nTEXT: Dave is kind and nice and looks green.\nFOL: Kind(dave) & Nice(dave) & Green(dave)\nTEXT: Even though Eric is round and big, he is very kind.\nFOL: Round(eric) & Big(eric) -> Kind(eric)\nTEXT: When Harry walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: (Nice(harry) & Kind(harry)) -> (Blue(harry) & Red(harry))\nTEXT: A green person that is red and blue are known for their rough skin.\nFOL: Green(x) & Red(x) & Blue(x) -> RoughSkin(x)\nTEXT: Young people who are both nice and cold also tend to be rough.\nFOL: Young(x) & Nice(x) & Cold(x) -> Rough(x)\nTEXT: Nice people who feel blue often look green when ill.\nFOL: Nice(x) & Blue(x) -> Green(x)\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) -> Red(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: Round(x) & Cold(x) -> Blue(x)\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: Green(x) & Nice(x) & Rough(x) -> Round(x)\nTEXT: Harry is not big.\nFOL: -Big(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(alan)\nTEXT: Dave is kind and nice and looks green.\nFOL: Kind(dave) & Nice(dave) & Green(dave)\nTEXT: Even though Eric is round and big, he is very kind.\nFOL: Round(eric) & Big(eric) -> Kind(eric)\nTEXT: When Harry walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: (Nice(harry) & Kind(harry)) -> (Blue(harry) & Red(harry))\nTEXT: A green person that is red and blue are known for their rough skin.\nFOL: Green(x) & Red(x) & Blue(x) -> RoughSkin(x)\nTEXT: Young people who are both nice and cold also tend to be rough.\nFOL: Young(x) & Nice(x) & Cold(x) -> Rough(x)\nTEXT: Nice people who feel blue often look green when ill.\nFOL: Nice(x) & Blue(x) -> GreenWhenIll(x)\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. ((Green(x) & Round(x) & Cold(x)) -> Red(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: Round(x) & Cold(x) -> Blue(x)\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: Green(x) & Nice(x) & Rough(x) -> Round(x)\nTEXT: Harry is not big.\nFOL: -Big(harry)\n</EVALUATE>"
  ]
 },
 {
  "index": 83,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle is rough.\nFOL: Rough(baldEagle)\nTEXT: The bald eagle likes the bear.\nFOL: Likes(baldEagle, bear)\nTEXT: The bald eagle likes the tiger.\nFOL: Likes(baldEagle, tiger)\nTEXT: The bald eagle visits the bear.\nFOL: Visits(baldEagle, bear)\nTEXT: The bald eagle visits the tiger.\nFOL: Visits(baldEagle, tiger)\nTEXT: The bear eats the bald eagle.\nFOL: Eats(bear, baldEagle)\nTEXT: The bear is big.\nFOL: Big(bear)\nTEXT: The bear is cold.\nFOL: Cold(bear)\nTEXT: The bear is not young.\nFOL: -Young(bear)\nTEXT: The bear likes the bald eagle.\nFOL: Likes(bear, baldEagle)\nTEXT: The bear likes the tiger.\nFOL: Likes(bear, tiger)\nTEXT: The bear visits the bald eagle.\nFOL: Visits(bear, baldEagle)\nTEXT: The bear visits the tiger.\nFOL: Visits(bear, tiger)\nTEXT: The tiger eats the bear.\nFOL: Eats(tiger, bear)\nTEXT: If someone eats the tiger then the tiger does not visit the bald eagle.\nFOL: all x. (Eats(x, tiger) -> -Visits(tiger, baldEagle))\nTEXT: If the bear visits the bald eagle and the bear is cold then the bald eagle is big.\nFOL: (Visits(bear, baldEagle) & Cold(bear)) -> Big(baldEagle)\nTEXT: If someone likes the bear and they are big then they eat the tiger.\nFOL: all x. ((Likes(x, bear) & Big(x)) -> Eats(x, tiger))\nTEXT: If the tiger visits the bald eagle and the bear does not visit the tiger then the bald eagle is cold.\nFOL: (Visits(tiger, baldEagle) & -Visits(bear, tiger)) -> Cold(baldEagle)\nTEXT: If someone visits the bald eagle and they are rough then the bald eagle is not cold.\nFOL: all x. (Visits(x, baldEagle) & Rough(x) -> -Cold(baldEagle))\nTEXT: If the bald eagle eats the tiger and the tiger is young then the bald eagle visits the tiger.\nFOL: (Eats(baldEagle, tiger) & Young(tiger)) -> Visits(baldEagle, tiger)\nTEXT: The bear visits the tiger.\nFOL: Visits(bear, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle is rough.\nFOL: Rough(baldEagle)\nTEXT: The bald eagle likes the bear.\nFOL: Likes(baldEagle, bear)\nTEXT: The bald eagle likes the tiger.\nFOL: Likes(baldEagle, tiger)\nTEXT: The bald eagle visits the bear.\nFOL: Visits(baldEagle, bear)\nTEXT: The bald eagle visits the tiger.\nFOL: Visits(baldEagle, tiger)\nTEXT: The bear eats the bald eagle.\nFOL: Eats(bear, baldEagle)\nTEXT: The bear is big.\nFOL: Big(bear)\nTEXT: The bear is cold.\nFOL: Cold(bear)\nTEXT: The bear is not young.\nFOL: -Young(bear)\nTEXT: The bear likes the bald eagle.\nFOL: Likes(bear, baldEagle)\nTEXT: The bear likes the tiger.\nFOL: Likes(bear, tiger)\nTEXT: The bear visits the bald eagle.\nFOL: Visits(bear, baldEagle)\nTEXT: The bear visits the tiger.\nFOL: Visits(bear, tiger)\nTEXT: The tiger eats the bear.\nFOL: Eats(tiger, bear)\nTEXT: If someone eats the tiger then the tiger does not visit the bald eagle.\nFOL: all x. (Eats(x, tiger) -> -Visits(tiger, baldEagle))\nTEXT: If the bear visits the bald eagle and the bear is cold then the bald eagle is big.\nFOL: (Visits(bear, baldEagle) & Cold(bear)) -> Big(baldEagle)\nTEXT: If someone likes the bear and they are big then they eat the tiger.\nFOL: all x. ((Likes(x, bear) & Big(x)) -> Eats(x, tiger))\nTEXT: If the tiger visits the bald eagle and the bear does not visit the tiger then the bald eagle is cold.\nFOL: (Visits(tiger, baldEagle) & -Visits(bear, tiger)) -> Cold(baldEagle)\nTEXT: If someone visits the bald eagle and they are rough then the bald eagle is not cold.\nFOL: all x. ((Visits(x, baldEagle) & Rough(x)) -> -Cold(baldEagle))\nTEXT: If the bald eagle eats the tiger and the tiger is young then the bald eagle visits the tiger.\nFOL: (Eats(baldEagle, tiger) & Young(tiger)) -> Visits(baldEagle, tiger)\nTEXT: The bear visits the tiger.\nFOL: Visits(bear, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle is rough.\nFOL: Rough(baldEagle)\nTEXT: The bald eagle likes the bear.\nFOL: Likes(baldEagle, bear)\nTEXT: The bald eagle likes the tiger.\nFOL: Likes(baldEagle, tiger)\nTEXT: The bald eagle visits the bear.\nFOL: Visits(baldEagle, bear)\nTEXT: The bald eagle visits the tiger.\nFOL: Visits(baldEagle, tiger)\nTEXT: The bear eats the bald eagle.\nFOL: Eats(bear, baldEagle)\nTEXT: The bear is big.\nFOL: Big(bear)\nTEXT: The bear is cold.\nFOL: Cold(bear)\nTEXT: The bear is not young.\nFOL: -Young(bear)\nTEXT: The bear likes the bald eagle.\nFOL: Likes(bear, baldEagle)\nTEXT: The bear likes the tiger.\nFOL: Likes(bear, tiger)\nTEXT: The bear visits the bald eagle.\nFOL: Visits(bear, baldEagle)\nTEXT: The bear visits the tiger.\nFOL: Visits(bear, tiger)\nTEXT: The tiger eats the bear.\nFOL: Eats(tiger, bear)\nTEXT: If someone eats the tiger then the tiger does not visit the bald eagle.\nFOL: all x. (Eats(x, tiger) -> -Visits(tiger, baldEagle))\nTEXT: If the bear visits the bald eagle and the bear is cold then the bald eagle is big.\nFOL: (Visits(bear, baldEagle) & Cold(bear)) -> Big(baldEagle)\nTEXT: If someone likes the bear and they are big then they eat the tiger.\nFOL: all x. (Likes(x, bear) & Big(x) -> Eats(x, tiger))\nTEXT: If the tiger visits the bald eagle and the bear does not visit the tiger then the bald eagle is cold.\nFOL: (Visits(tiger, baldEagle) & -Visits(bear, tiger)) -> Cold(baldEagle)\nTEXT: If someone visits the bald eagle and they are rough then the bald eagle is not cold.\nFOL: all x. (Visits(x, baldEagle) & Rough(x) -> -Cold(baldEagle))\nTEXT: If the bald eagle eats the tiger and the tiger is young then the bald eagle visits the tiger.\nFOL: (Eats(baldEagle, tiger) & Young(tiger)) -> Visits(baldEagle, tiger)\nTEXT: The bear visits the tiger.\nFOL: Visits(bear, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle is rough.\nFOL: Rough(baldEagle)\nTEXT: The bald eagle likes the bear.\nFOL: Likes(baldEagle, bear)\nTEXT: The bald eagle likes the tiger.\nFOL: Likes(baldEagle, tiger)\nTEXT: The bald eagle visits the bear.\nFOL: Visits(baldEagle, bear)\nTEXT: The bald eagle visits the tiger.\nFOL: Visits(baldEagle, tiger)\nTEXT: The bear eats the bald eagle.\nFOL: Eats(bear, baldEagle)\nTEXT: The bear is big.\nFOL: Big(bear)\nTEXT: The bear is cold.\nFOL: Cold(bear)\nTEXT: The bear is not young.\nFOL: -Young(bear)\nTEXT: The bear likes the bald eagle.\nFOL: Likes(bear, baldEagle)\nTEXT: The bear likes the tiger.\nFOL: Likes(bear, tiger)\nTEXT: The bear visits the bald eagle.\nFOL: Visits(bear, baldEagle)\nTEXT: The bear visits the tiger.\nFOL: Visits(bear, tiger)\nTEXT: The tiger eats the bear.\nFOL: Eats(tiger, bear)\nTEXT: If someone eats the tiger then the tiger does not visit the bald eagle.\nFOL: (Eats(x, tiger) -> -Visits(tiger, baldEagle))\nTEXT: If the bear visits the bald eagle and the bear is cold then the bald eagle is big.\nFOL: (Visits(bear, baldEagle) & Cold(bear) -> Big(baldEagle))\nTEXT: If someone likes the bear and they are big then they eat the tiger.\nFOL: (Likes(x, bear) & Big(x) -> Eats(x, tiger))\nTEXT: If the tiger visits the bald eagle and the bear does not visit the tiger then the bald eagle is cold.\nFOL: (Visits(tiger, baldEagle) & -Visits(bear, tiger) -> Cold(baldEagle))\nTEXT: If someone visits the bald eagle and they are rough then the bald eagle is not cold.\nFOL: (Visits(x, baldEagle) & Rough(x) -> -Cold(baldEagle))\nTEXT: If the bald eagle eats the tiger and the tiger is young then the bald eagle visits the tiger.\nFOL: (Eats(baldEagle, tiger) & Young(tiger) -> Visits(baldEagle, tiger))\nTEXT: The bear visits the tiger.\nFOL: Visits(bear, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle is rough.\nFOL: Rough(baldEagle)\nTEXT: The bald eagle likes the bear.\nFOL: Likes(baldEagle, bear)\nTEXT: The bald eagle likes the tiger.\nFOL: Likes(baldEagle, tiger)\nTEXT: The bald eagle visits the bear.\nFOL: Visits(baldEagle, bear)\nTEXT: The bald eagle visits the tiger.\nFOL: Visits(baldEagle, tiger)\nTEXT: The bear eats the bald eagle.\nFOL: Eats(bear, baldEagle)\nTEXT: The bear is big.\nFOL: Big(bear)\nTEXT: The bear is cold.\nFOL: Cold(bear)\nTEXT: The bear is not young.\nFOL: -Young(bear)\nTEXT: The bear likes the bald eagle.\nFOL: Likes(bear, baldEagle)\nTEXT: The bear likes the tiger.\nFOL: Likes(bear, tiger)\nTEXT: The bear visits the bald eagle.\nFOL: Visits(bear, baldEagle)\nTEXT: The bear visits the tiger.\nFOL: Visits(bear, tiger)\nTEXT: The tiger eats the bear.\nFOL: Eats(tiger, bear)\nTEXT: If someone eats the tiger then the tiger does not visit the bald eagle.\nFOL: all x. (Eats(x, tiger) -> -Visits(tiger, baldEagle))\nTEXT: If the bear visits the bald eagle and the bear is cold then the bald eagle is big.\nFOL: (Visits(bear, baldEagle) & Cold(bear)) -> Big(baldEagle)\nTEXT: If someone likes the bear and they are big then they eat the tiger.\nFOL: all x. ((Likes(x, bear) & Big(x)) -> Eats(x, tiger))\nTEXT: If the tiger visits the bald eagle and the bear does not visit the tiger then the bald eagle is cold.\nFOL: (Visits(tiger, baldEagle) & -Visits(bear, tiger)) -> Cold(baldEagle)\nTEXT: If someone visits the bald eagle and they are rough then the bald eagle is not cold.\nFOL: all x. (Visits(x, baldEagle) & Rough(x)) -> -Cold(baldEagle)\nTEXT: If the bald eagle eats the tiger and the tiger is young then the bald eagle visits the tiger.\nFOL: (Eats(baldEagle, tiger) & Young(tiger)) -> Visits(baldEagle, tiger)\nTEXT: The bear visits the tiger.\nFOL: Visits(bear, tiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 84,
  "responses": [
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: Nice(bear)\nTEXT: The mouse needs the tiger.\nFOL: Needs(mouse, tiger)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (Needs(x, tiger) -> Eats(x, tiger))\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x. ((Green(x) & Chases(x, rabbit)) -> Chases(rabbit, tiger))\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x. ((Nice(x) & Chases(x, rabbit)) -> Eats(rabbit, mouse))\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x. (Chases(x, bear) -> Eats(bear, rabbit))\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x. (Chases(x, bear) -> Chases(x, mouse))\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: (Rough(bear) & Needs(bear, rabbit)) -> Green(rabbit)\nTEXT: If something is kind then it needs the mouse.\nFOL: all x. (Kind(x) -> Needs(x, mouse))\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x. (Eats(x, tiger) -> Chases(x, bear))\nTEXT: The tiger chases the tiger.\nFOL: Chases(tiger, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: Nice(bear)\nTEXT: The mouse needs the tiger.\nFOL: Needs(mouse, tiger)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (Needs(x, tiger) -> Eats(x, tiger))\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x. ((Green(x) & Chases(x, rabbit)) -> Chases(rabbit, tiger))\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x. ((Nice(x) & Chases(x, rabbit)) -> Eats(rabbit, mouse))\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x. (Chases(x, bear) -> Eats(bear, rabbit))\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x. (Chases(x, bear) -> Chases(x, mouse))\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: Rough(bear) & Needs(bear, rabbit) -> Green(rabbit)\nTEXT: If something is kind then it needs the mouse.\nFOL: all x. (Kind(x) -> Needs(x, mouse))\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x. (Eats(x, tiger) -> Chases(x, bear))\nTEXT: The tiger chases the tiger.\nFOL: Chases(tiger, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: Nice(bear)\nTEXT: The mouse needs the tiger.\nFOL: Needs(mouse, tiger)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (Needs(x, tiger) -> Eats(x, tiger))\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x. ((Green(x) & Chases(x, rabbit)) -> Chases(rabbit, tiger))\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x. ((Nice(x) & Chases(x, rabbit)) -> Eats(rabbit, mouse))\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x. (Chases(x, bear) -> Eats(bear, rabbit))\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x. (Chases(x, bear) -> Chases(x, mouse))\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: all x. ((Rough(bear) & Needs(bear, rabbit)) -> Green(rabbit))\nTEXT: If something is kind then it needs the mouse.\nFOL: all x. (Kind(x) -> Needs(x, mouse))\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x. (Eats(x, tiger) -> Chases(x, bear))\nTEXT: The tiger chases the tiger.\nFOL: Chases(tiger, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: Nice(bear)\nTEXT: The mouse needs the tiger.\nFOL: Needs(mouse, tiger)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (Needs(x, tiger) -> Eats(x, tiger))\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x. (Green(x) & Chases(x, rabbit) -> Chases(rabbit, tiger))\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x. (Nice(x) & Chases(x, rabbit) -> Eats(rabbit, mouse))\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x. (Chases(x, bear) -> Eats(bear, rabbit))\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x. (Chases(x, bear) -> Chases(x, mouse))\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: (Rough(bear) & Needs(bear, rabbit)) -> Green(rabbit)\nTEXT: If something is kind then it needs the mouse.\nFOL: all x. (Kind(x) -> Needs(x, mouse))\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x. (Eats(x, tiger) -> Chases(x, bear))\nTEXT: The tiger chases the tiger.\nFOL: Chases(tiger, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: Nice(bear)\n\nTEXT: The mouse needs the tiger.\nFOL: Needs(mouse, tiger)\n\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\n\nTEXT: The tiger is green.\nFOL: Green(tiger)\n\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (Needs(x, tiger) -> Eats(x, tiger))\n\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x. ((Green(x) & Chases(x, rabbit)) -> Chases(rabbit, tiger))\n\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x. ((Nice(x) & Chases(x, rabbit)) -> Eats(rabbit, mouse))\n\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x. (Chases(x, bear) -> Eats(bear, rabbit))\n\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x. (Chases(x, bear) -> Chases(x, mouse))\n\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: (Rough(bear) & Needs(bear, rabbit)) -> Green(rabbit)\n\nTEXT: If something is kind then it needs the mouse.\nFOL: all x. (Kind(x) -> Needs(x, mouse))\n\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x. (Eats(x, tiger) -> Chases(x, bear))\n\nTEXT: The tiger chases the tiger.\nFOL: Chases(tiger, tiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 85,
  "responses": [
   "<EVALUATE>\nTEXT: Erin is blue.\nFOL: Blue(erin)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. ((Red(x) & -Blue(x)) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: -Red(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is blue.\nFOL: Blue(erin)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. ((Red(x) & -Blue(x)) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: -Red(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is blue.\nFOL: Blue(erin)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: -Red(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is blue.\nFOL: Blue(erin)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: -Red(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is blue.\nFOL: Blue(Erin)\nTEXT: Fiona is white.\nFOL: White(Fiona)\nTEXT: Gary is red.\nFOL: Red(Gary)\nTEXT: Harry is white.\nFOL: White(Harry)\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. ((Red(x) & -Blue(x)) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: -Red(Erin)\n</EVALUATE>"
  ]
 },
 {
  "index": 86,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: Eats(baldEagle, rabbit)\nTEXT: The bald eagle is not blue.\nFOL: -Blue(baldEagle)\nTEXT: The bald eagle sees the mouse.\nFOL: Sees(baldEagle, mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: Sees(baldEagle, tiger)\nTEXT: The mouse is not kind.\nFOL: -Kind(mouse)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger sees the rabbit.\nFOL: Sees(tiger, rabbit)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: (Young(mouse) & Eats(mouse, baldEagle)) -> Needs(mouse, rabbit)\nTEXT: If something is blue then it eats the mouse.\nFOL: all x. (Blue(x) -> Eats(x, mouse))\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: all x. ((Kind(x) & -Young(x)) -> Eats(x, mouse))\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: all x. (Sees(x, tiger) -> Eats(x, rabbit))\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: all x. (Sees(x, rabbit) -> -Blue(rabbit))\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: all x. (Eats(x, mouse) -> Blue(mouse))\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: all x. ((Needs(x, rabbit) & Eats(rabbit, tiger)) -> Sees(tiger, rabbit))\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: all x. ((Eats(x, mouse) & Eats(mouse, tiger)) -> -Sees(mouse, rabbit))\nTEXT: The bald eagle does not eat the mouse.\nFOL: -Eats(baldEagle, mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: Eats(baldEagle, rabbit)\nTEXT: The bald eagle is not blue.\nFOL: -Blue(baldEagle)\nTEXT: The bald eagle sees the mouse.\nFOL: Sees(baldEagle, mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: Sees(baldEagle, tiger)\nTEXT: The mouse is not kind.\nFOL: -Kind(mouse)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger sees the rabbit.\nFOL: Sees(tiger, rabbit)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: (Young(mouse) & Eats(mouse, baldEagle)) -> Needs(mouse, rabbit)\nTEXT: If something is blue then it eats the mouse.\nFOL: all x. (Blue(x) -> Eats(x, mouse))\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: all x. (Kind(x) & -Young(x) -> Eats(x, mouse))\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: all x. (Sees(x, tiger) -> Eats(x, rabbit))\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: all x. (Sees(x, rabbit) -> -Blue(rabbit))\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: all x. (Eats(x, mouse) -> Blue(mouse))\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: all x. (Needs(x, rabbit) & Eats(rabbit, tiger) -> Sees(tiger, rabbit))\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: all x. (Eats(x, mouse) & Eats(mouse, tiger) -> -Sees(mouse, rabbit))\nTEXT: The bald eagle does not eat the mouse.\nFOL: -Eats(baldEagle, mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: BaldEagle(x) & Rabbit(y) -> Eats(x, y)\nTEXT: The bald eagle is not blue.\nFOL: -Blue(baldEagle)\nTEXT: The bald eagle sees the mouse.\nFOL: BaldEagle(x) & Mouse(y) -> Sees(x, y)\nTEXT: The bald eagle sees the tiger.\nFOL: BaldEagle(x) & Tiger(y) -> Sees(x, y)\nTEXT: The mouse is not kind.\nFOL: -Kind(mouse)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger sees the rabbit.\nFOL: Tiger(x) & Rabbit(y) -> Sees(x, y)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: Young(mouse) & Eats(mouse, baldEagle) -> Needs(mouse, rabbit)\nTEXT: If something is blue then it eats the mouse.\nFOL: all x. (Blue(x) -> Eats(x, mouse))\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: all x. ((Kind(x) & -Young(x)) -> Eats(x, mouse))\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: all x. (Sees(x, tiger) -> Eats(x, rabbit))\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: all x. (Sees(x, rabbit) -> -Blue(rabbit))\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: all x. (Eats(x, mouse) -> Blue(mouse))\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: all x. ((Needs(x, rabbit) & Eats(rabbit, tiger)) -> Sees(tiger, rabbit))\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: all x. ((Eats(x, mouse) & Eats(mouse, tiger)) -> -Sees(mouse, rabbit))\nTEXT: The bald eagle does not eat the mouse.\nFOL: -Eats(baldEagle, mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: BaldEagle(x) & Rabbit(y) -> Eats(x, y)\nTEXT: The bald eagle is not blue.\nFOL: -Blue(baldEagle)\nTEXT: The bald eagle sees the mouse.\nFOL: BaldEagle(x) & Mouse(y) -> Sees(x, y)\nTEXT: The bald eagle sees the tiger.\nFOL: BaldEagle(x) & Tiger(y) -> Sees(x, y)\nTEXT: The mouse is not kind.\nFOL: -Kind(mouse)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger sees the rabbit.\nFOL: Tiger(x) & Rabbit(y) -> Sees(x, y)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: Young(mouse) & Eats(mouse, baldEagle) -> Needs(mouse, rabbit)\nTEXT: If something is blue then it eats the mouse.\nFOL: Blue(x) -> Eats(x, mouse)\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: Kind(x) & -Young(x) -> Eats(x, mouse)\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: Sees(x, tiger) -> Eats(x, rabbit)\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: Sees(x, rabbit) -> -Blue(rabbit)\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: Eats(x, mouse) -> Blue(mouse)\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: Needs(x, rabbit) & Eats(rabbit, tiger) -> Sees(tiger, rabbit)\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: Eats(x, mouse) & Eats(mouse, tiger) -> -Sees(mouse, rabbit)\nTEXT: The bald eagle does not eat the mouse.\nFOL: -Eats(baldEagle, mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: Eats(baldEagle, rabbit)\nTEXT: The bald eagle is not blue.\nFOL: -Blue(baldEagle)\nTEXT: The bald eagle sees the mouse.\nFOL: Sees(baldEagle, mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: Sees(baldEagle, tiger)\nTEXT: The mouse is not kind.\nFOL: -Kind(mouse)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger sees the rabbit.\nFOL: Sees(tiger, rabbit)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: (Young(mouse) & Eats(mouse, baldEagle)) -> Needs(mouse, rabbit)\nTEXT: If something is blue then it eats the mouse.\nFOL: all x. (Blue(x) -> Eats(x, mouse))\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: all x. (Kind(x) & -Young(x) -> Eats(x, mouse))\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: all x. (Sees(x, tiger) -> Eats(x, rabbit))\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: all x. (Sees(x, rabbit) -> -Blue(rabbit))\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: all x. (Eats(x, mouse) -> Blue(mouse))\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: all x. ((Needs(x, rabbit) & Eats(rabbit, tiger)) -> Sees(tiger, rabbit))\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: all x. ((Eats(x, mouse) & Eats(mouse, tiger)) -> -Sees(mouse, rabbit))\nTEXT: The bald eagle does not eat the mouse.\nFOL: -Eats(baldEagle, mouse)\n</EVALUATE>"
  ]
 },
 {
  "index": 87,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Fiona is cold.\nFOL: Cold(fiona)\nTEXT: All rough people are not furry.\nFOL: all x. (Rough(x) -> -Furry(x))\nTEXT: If someone is big then they are not furry.\nFOL: all x. (Big(x) -> -Furry(x))\nTEXT: If Fiona is smart then Fiona is furry.\nFOL: Smart(fiona) -> Furry(fiona)\nTEXT: All furry people are cold.\nFOL: all x. (Furry(x) -> Cold(x))\nTEXT: If someone is cold then they are smart.\nFOL: all x. (Cold(x) -> Smart(x))\nTEXT: If someone is furry and smart then they are not green.\nFOL: all x. ((Furry(x) & Smart(x)) -> -Green(x))\nTEXT: Smart, big people are white.\nFOL: all x. ((Smart(x) & Big(x)) -> White(x))\nTEXT: If Dave is rough and Dave is not furry then Dave is not smart.\nFOL: (Rough(dave) & -Furry(dave)) -> -Smart(dave)\nTEXT: Dave is green.\nFOL: Green(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Fiona is cold.\nFOL: Cold(fiona)\nTEXT: All rough people are not furry.\nFOL: all x. (Rough(x) -> -Furry(x))\nTEXT: If someone is big then they are not furry.\nFOL: all x. (Big(x) -> -Furry(x))\nTEXT: If Fiona is smart then Fiona is furry.\nFOL: Smart(fiona) -> Furry(fiona)\nTEXT: All furry people are cold.\nFOL: all x. (Furry(x) -> Cold(x))\nTEXT: If someone is cold then they are smart.\nFOL: all x. (Cold(x) -> Smart(x))\nTEXT: If someone is furry and smart then they are not green.\nFOL: all x. ((Furry(x) & Smart(x)) -> -Green(x))\nTEXT: Smart, big people are white.\nFOL: (Smart(x) & Big(x)) -> White(x)\nTEXT: If Dave is rough and Dave is not furry then Dave is not smart.\nFOL: (Rough(dave) & -Furry(dave)) -> -Smart(dave)\nTEXT: Dave is green.\nFOL: Green(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Fiona is cold.\nFOL: Cold(fiona)\nTEXT: All rough people are not furry.\nFOL: all x. (Rough(x) -> -Furry(x))\nTEXT: If someone is big then they are not furry.\nFOL: all x. (Big(x) -> -Furry(x))\nTEXT: If Fiona is smart then Fiona is furry.\nFOL: Smart(fiona) -> Furry(fiona)\nTEXT: All furry people are cold.\nFOL: all x. (Furry(x) -> Cold(x))\nTEXT: If someone is cold then they are smart.\nFOL: all x. (Cold(x) -> Smart(x))\nTEXT: If someone is furry and smart then they are not green.\nFOL: all x. ((Furry(x) & Smart(x)) -> -Green(x))\nTEXT: Smart, big people are white.\nFOL: all x. (Smart(x) & Big(x) -> White(x))\nTEXT: If Dave is rough and Dave is not furry then Dave is not smart.\nFOL: (Rough(dave) & -Furry(dave)) -> -Smart(dave)\nTEXT: Dave is green.\nFOL: Green(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Fiona is cold.\nFOL: Cold(fiona)\nTEXT: All rough people are not furry.\nFOL: all x. (Rough(x) -> -Furry(x))\nTEXT: If someone is big then they are not furry.\nFOL: all x. (Big(x) -> -Furry(x))\nTEXT: If Fiona is smart then Fiona is furry.\nFOL: Smart(fiona) -> Furry(fiona)\nTEXT: All furry people are cold.\nFOL: all x. (Furry(x) -> Cold(x))\nTEXT: If someone is cold then they are smart.\nFOL: all x. (Cold(x) -> Smart(x))\nTEXT: If someone is furry and smart then they are not green.\nFOL: all x. (Furry(x) & Smart(x) -> -Green(x))\nTEXT: Smart, big people are white.\nFOL: all x. ((Smart(x) & Big(x)) -> White(x))\nTEXT: If Dave is rough and Dave is not furry then Dave is not smart.\nFOL: (Rough(dave) & -Furry(dave)) -> -Smart(dave)\nTEXT: Dave is green.\nFOL: Green(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Fiona is cold.\nFOL: Cold(fiona)\nTEXT: All rough people are not furry.\nFOL: all x. (Rough(x) -> -Furry(x))\nTEXT: If someone is big then they are not furry.\nFOL: all x. (Big(x) -> -Furry(x))\nTEXT: If Fiona is smart then Fiona is furry.\nFOL: Smart(fiona) -> Furry(fiona)\nTEXT: All furry people are cold.\nFOL: all x. (Furry(x) -> Cold(x))\nTEXT: If someone is cold then they are smart.\nFOL: Cold(x) -> Smart(x)\nTEXT: If someone is furry and smart then they are not green.\nFOL: (Furry(x) & Smart(x)) -> -Green(x)\nTEXT: Smart, big people are white.\nFOL: (Smart(x) & Big(x)) -> White(x)\nTEXT: If Dave is rough and Dave is not furry then Dave is not smart.\nFOL: (Rough(dave) & -Furry(dave)) -> -Smart(dave)\nTEXT: Dave is green.\nFOL: Green(dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 88,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: If someone is green and smart then they are white.\nFOL: all x. (Green(x) & Smart(x) -> White(x))\nTEXT: All white people are rough.\nFOL: all x. (White(x) -> Rough(x))\nTEXT: All smart people are green.\nFOL: all x. (Smart(x) -> Green(x))\nTEXT: If Dave is big and Dave is white then Dave is smart.\nFOL: (Big(dave) & White(dave)) -> Smart(dave)\nTEXT: If someone is big and green then they are smart.\nFOL: all x. (Big(x) & Green(x) -> Smart(x))\nTEXT: If someone is nice then they are smart.\nFOL: all x. (Nice(x) -> Smart(x))\nTEXT: All green, smart people are nice.\nFOL: all x. (Green(x) & Smart(x) -> Nice(x))\nTEXT: If Bob is not smart then Bob is round.\nFOL: -Smart(bob) -> Round(bob)\nTEXT: Harry is not nice.\nFOL: -Nice(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: If someone is green and smart then they are white.\nFOL: all x. (Green(x) & Smart(x) -> White(x))\nTEXT: All white people are rough.\nFOL: all x. (White(x) -> Rough(x))\nTEXT: All smart people are green.\nFOL: all x. (Smart(x) -> Green(x))\nTEXT: If Dave is big and Dave is white then Dave is smart.\nFOL: (Big(dave) & White(dave)) -> Smart(dave)\nTEXT: If someone is big and green then they are smart.\nFOL: all x. (Big(x) & Green(x) -> Smart(x))\nTEXT: If someone is nice then they are smart.\nFOL: all x. (Nice(x) -> Smart(x))\nTEXT: All green, smart people are nice.\nFOL: all x. ((Green(x) & Smart(x)) -> Nice(x))\nTEXT: If Bob is not smart then Bob is round.\nFOL: -Smart(bob) -> Round(bob)\nTEXT: Harry is not nice.\nFOL: -Nice(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: If someone is green and smart then they are white.\nFOL: all x. (Green(x) & Smart(x) -> White(x))\nTEXT: All white people are rough.\nFOL: all x. (White(x) -> Rough(x))\nTEXT: All smart people are green.\nFOL: all x. (Smart(x) -> Green(x))\nTEXT: If Dave is big and Dave is white then Dave is smart.\nFOL: Big(dave) & White(dave) -> Smart(dave)\nTEXT: If someone is big and green then they are smart.\nFOL: all x. (Big(x) & Green(x) -> Smart(x))\nTEXT: If someone is nice then they are smart.\nFOL: all x. (Nice(x) -> Smart(x))\nTEXT: All green, smart people are nice.\nFOL: all x. (Green(x) & Smart(x) -> Nice(x))\nTEXT: If Bob is not smart then Bob is round.\nFOL: -Smart(bob) -> Round(bob)\nTEXT: Harry is not nice.\nFOL: -Nice(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: If someone is green and smart then they are white.\nFOL: all x. ((Green(x) & Smart(x)) -> White(x))\nTEXT: All white people are rough.\nFOL: all x. (White(x) -> Rough(x))\nTEXT: All smart people are green.\nFOL: all x. (Smart(x) -> Green(x))\nTEXT: If Dave is big and Dave is white then Dave is smart.\nFOL: (Big(dave) & White(dave)) -> Smart(dave)\nTEXT: If someone is big and green then they are smart.\nFOL: all x. (Big(x) & Green(x) -> Smart(x))\nTEXT: If someone is nice then they are smart.\nFOL: all x. (Nice(x) -> Smart(x))\nTEXT: All green, smart people are nice.\nFOL: all x. ((Green(x) & Smart(x)) -> Nice(x))\nTEXT: If Bob is not smart then Bob is round.\nFOL: -Smart(bob) -> Round(bob)\nTEXT: Harry is not nice.\nFOL: -Nice(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: If someone is green and smart then they are white.\nFOL: all x. (Green(x) & Smart(x) -> White(x))\nTEXT: All white people are rough.\nFOL: all x. (White(x) -> Rough(x))\nTEXT: All smart people are green.\nFOL: all x. (Smart(x) -> Green(x))\nTEXT: If Dave is big and Dave is white then Dave is smart.\nFOL: Big(dave) & White(dave) -> Smart(dave)\nTEXT: If someone is big and green then they are smart.\nFOL: all x. (Big(x) & Green(x) -> Smart(x))\nTEXT: If someone is nice then they are smart.\nFOL: all x. (Nice(x) -> Smart(x))\nTEXT: All green, smart people are nice.\nFOL: all x. ((Green(x) & Smart(x)) -> Nice(x))\nTEXT: If Bob is not smart then Bob is round.\nFOL: -Smart(bob) -> Round(bob)\nTEXT: Harry is not nice.\nFOL: -Nice(harry)\n</EVALUATE>"
  ]
 },
 {
  "index": 89,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle chases the cat.\nFOL: Chases(baldEagle, cat)\nTEXT: The cat sees the cow.\nFOL: Sees(cat, cow)\nTEXT: The cow chases the cat.\nFOL: Chases(cow, cat)\nTEXT: The mouse chases the bald eagle.\nFOL: Chases(mouse, baldEagle)\nTEXT: If something visits the mouse then it chases the cat.\nFOL: all x. (Visits(x, mouse) -> Chases(x, cat))\nTEXT: If something chases the cow then the cow sees the mouse.\nFOL: all x. (Chases(x, cow) -> Sees(cow, mouse))\nTEXT: If the mouse chases the bald eagle then the bald eagle chases the cow.\nFOL: Chases(mouse, baldEagle) -> Chases(baldEagle, cow)\nTEXT: The mouse does not chase the cat.\nFOL: -Chases(mouse, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the cat.\nFOL: Chase(baldEagle, cat)\nTEXT: The cat sees the cow.\nFOL: See(cat, cow)\nTEXT: The cow chases the cat.\nFOL: Chase(cow, cat)\nTEXT: The mouse chases the bald eagle.\nFOL: Chase(mouse, baldEagle)\nTEXT: If something visits the mouse then it chases the cat.\nFOL: all x. (Visit(x, mouse) -> Chase(x, cat))\nTEXT: If something chases the cow then the cow sees the mouse.\nFOL: all x. (Chase(x, cow) -> See(cow, mouse))\nTEXT: If the mouse chases the bald eagle then the bald eagle chases the cow.\nFOL: Chase(mouse, baldEagle) -> Chase(baldEagle, cow)\nTEXT: The mouse does not chase the cat.\nFOL: -Chase(mouse, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the cat.\nFOL: Chases(baldEagle, cat)\nTEXT: The cat sees the cow.\nFOL: Sees(cat, cow)\nTEXT: The cow chases the cat.\nFOL: Chases(cow, cat)\nTEXT: The mouse chases the bald eagle.\nFOL: Chases(mouse, baldEagle)\nTEXT: If something visits the mouse then it chases the cat.\nFOL: all x. (Visits(x, mouse) -> Chases(x, cat))\nTEXT: If something chases the cow then the cow sees the mouse.\nFOL: all x. (Chases(x, cow) -> Sees(cow, mouse))\nTEXT: If the mouse chases the bald eagle then the bald eagle chases the cow.\nFOL: (Chases(mouse, baldEagle) -> Chases(baldEagle, cow))\nTEXT: The mouse does not chase the cat.\nFOL: -Chases(mouse, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the cat.\nFOL: Chase(baldEagle, cat)\nTEXT: The cat sees the cow.\nFOL: See(cat, cow)\nTEXT: The cow chases the cat.\nFOL: Chase(cow, cat)\nTEXT: The mouse chases the bald eagle.\nFOL: Chase(mouse, baldEagle)\nTEXT: If something visits the mouse then it chases the cat.\nFOL: all x. (Visit(x, mouse) -> Chase(x, cat))\nTEXT: If something chases the cow then the cow sees the mouse.\nFOL: all x. (Chase(x, cow) -> See(cow, mouse))\nTEXT: If the mouse chases the bald eagle then the bald eagle chases the cow.\nFOL: (Chase(mouse, baldEagle) -> Chase(baldEagle, cow))\nTEXT: The mouse does not chase the cat.\nFOL: -Chase(mouse, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the cat.\nFOL: Chases(baldEagle, cat)\nTEXT: The cat sees the cow.\nFOL: Sees(cat, cow)\nTEXT: The cow chases the cat.\nFOL: Chases(cow, cat)\nTEXT: The mouse chases the bald eagle.\nFOL: Chases(mouse, baldEagle)\nTEXT: If something visits the mouse then it chases the cat.\nFOL: all x. (Visits(x, mouse) -> Chases(x, cat))\nTEXT: If something chases the cow then the cow sees the mouse.\nFOL: all x. (Chases(x, cow) -> Sees(cow, mouse))\nTEXT: If the mouse chases the bald eagle then the bald eagle chases the cow.\nFOL: all x. (Chases(mouse, x) -> Chases(x, cow))\nTEXT: The mouse does not chase the cat.\nFOL: -Chases(mouse, cat)\n</EVALUATE>"
  ]
 },
 {
  "index": 90,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Dave is not green.\nFOL: -Green(dave)\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: If someone is round and white then they are green.\nFOL: all x. ((Round(x) & White(x)) -> Green(x))\nTEXT: All smart, round people are green.\nFOL: all x. ((Smart(x) & Round(x)) -> Green(x))\nTEXT: All cold, kind people are white.\nFOL: all x. ((Cold(x) & Kind(x)) -> White(x))\nTEXT: All furry, white people are round.\nFOL: all x. ((Furry(x) & White(x)) -> Round(x))\nTEXT: All green people are furry.\nFOL: all x. (Green(x) -> Furry(x))\nTEXT: If Anne is smart then Anne is round.\nFOL: Smart(anne) -> Round(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Dave is not green.\nFOL: -Green(dave)\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: If someone is round and white then they are green.\nFOL: (Round(x) & White(x) -> Green(x))\nTEXT: All smart, round people are green.\nFOL: all x. (Smart(x) & Round(x) -> Green(x))\nTEXT: All cold, kind people are white.\nFOL: all x. (Cold(x) & Kind(x) -> White(x))\nTEXT: All furry, white people are round.\nFOL: all x. (Furry(x) & White(x) -> Round(x))\nTEXT: All green people are furry.\nFOL: all x. (Green(x) -> Furry(x))\nTEXT: If Anne is smart then Anne is round.\nFOL: Smart(anne) -> Round(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Dave is not green.\nFOL: -Green(dave)\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: If someone is round and white then they are green.\nFOL: all x. (Round(x) & White(x) -> Green(x))\nTEXT: All smart, round people are green.\nFOL: all x. ((Smart(x) & Round(x)) -> Green(x))\nTEXT: All cold, kind people are white.\nFOL: all x. ((Cold(x) & Kind(x)) -> White(x))\nTEXT: All furry, white people are round.\nFOL: all x. ((Furry(x) & White(x)) -> Round(x))\nTEXT: All green people are furry.\nFOL: all x. (Green(x) -> Furry(x))\nTEXT: If Anne is smart then Anne is round.\nFOL: Smart(anne) -> Round(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Dave is not green.\nFOL: -Green(dave)\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: If someone is round and white then they are green.\nFOL: all x. (Round(x) & White(x) -> Green(x))\nTEXT: All smart, round people are green.\nFOL: all x. (Smart(x) & Round(x) -> Green(x))\nTEXT: All cold, kind people are white.\nFOL: all x. (Cold(x) & Kind(x) -> White(x))\nTEXT: All furry, white people are round.\nFOL: all x. (Furry(x) & White(x) -> Round(x))\nTEXT: All green people are furry.\nFOL: all x. (Green(x) -> Furry(x))\nTEXT: If Anne is smart then Anne is round.\nFOL: Smart(anne) -> Round(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Dave is not green.\nFOL: -Green(dave)\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: If someone is round and white then they are green.\nFOL: (Round(x) & White(x) -> Green(x))\nTEXT: All smart, round people are green.\nFOL: all x. ((Smart(x) & Round(x)) -> Green(x))\nTEXT: All cold, kind people are white.\nFOL: all x. ((Cold(x) & Kind(x)) -> White(x))\nTEXT: All furry, white people are round.\nFOL: all x. ((Furry(x) & White(x)) -> Round(x))\nTEXT: All green people are furry.\nFOL: all x. (Green(x) -> Furry(x))\nTEXT: If Anne is smart then Anne is round.\nFOL: Smart(anne) -> Round(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\n</EVALUATE>"
  ]
 },
 {
  "index": 91,
  "responses": [
   "<EVALUATE>\nTEXT: The cat needs the mouse.\nFOL: Needs(cat, mouse)\nTEXT: The cow does not see the cat.\nFOL: -Sees(cow, cat)\nTEXT: The mouse is big.\nFOL: Big(mouse)\nTEXT: If something chases the cat then the cat is not nice.\nFOL: all x. (Chases(x, cat) -> -Nice(cat))\nTEXT: If something needs the mouse then the mouse is not nice.\nFOL: all x. (Needs(x, mouse) -> -Nice(mouse))\nTEXT: If something chases the cow and it is not nice then it sees the mouse.\nFOL: all x. ((Chases(x, cow) & -Nice(x)) -> Sees(x, mouse))\nTEXT: The mouse is not young.\nFOL: -Young(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat needs the mouse.\nFOL: Needs(cat, mouse)\nTEXT: The cow does not see the cat.\nFOL: -See(cow, cat)\nTEXT: The mouse is big.\nFOL: Big(mouse)\nTEXT: If something chases the cat then the cat is not nice.\nFOL: all x. (Chases(x, cat) -> -Nice(cat))\nTEXT: If something needs the mouse then the mouse is not nice.\nFOL: all x. (Needs(x, mouse) -> -Nice(mouse))\nTEXT: If something chases the cow and it is not nice then it sees the mouse.\nFOL: all x. ((Chases(x, cow) & -Nice(x)) -> See(x, mouse))\nTEXT: The mouse is not young.\nFOL: -Young(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat needs the mouse.\nFOL: Needs(cat, mouse)\nTEXT: The cow does not see the cat.\nFOL: -See(cow, cat)\nTEXT: The mouse is big.\nFOL: Big(mouse)\nTEXT: If something chases the cat then the cat is not nice.\nFOL: all x. (Chases(x, cat) -> -Nice(x))\nTEXT: If something needs the mouse then the mouse is not nice.\nFOL: all x. (Needs(x, mouse) -> -Nice(mouse))\nTEXT: If something chases the cow and it is not nice then it sees the mouse.\nFOL: all x. ((Chases(x, cow) & -Nice(x)) -> See(x, mouse))\nTEXT: The mouse is not young.\nFOL: -Young(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat needs the mouse.\nFOL: Needs(cat, mouse)\nTEXT: The cow does not see the cat.\nFOL: -Sees(cow, cat)\nTEXT: The mouse is big.\nFOL: Big(mouse)\nTEXT: If something chases the cat then the cat is not nice.\nFOL: all x. (Chases(x, cat) -> -Nice(x))\nTEXT: If something needs the mouse then the mouse is not nice.\nFOL: all x. (Needs(x, mouse) -> -Nice(mouse))\nTEXT: If something chases the cow and it is not nice then it sees the mouse.\nFOL: all x. ((Chases(x, cow) & -Nice(x)) -> Sees(x, mouse))\nTEXT: The mouse is not young.\nFOL: -Young(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat needs the mouse.\nFOL: Needs(cat, mouse)\nTEXT: The cow does not see the cat.\nFOL: -See(cow, cat)\nTEXT: The mouse is big.\nFOL: Big(mouse)\nTEXT: If something chases the cat then the cat is not nice.\nFOL: all x. (Chase(x, cat) -> -Nice(x))\nTEXT: If something needs the mouse then the mouse is not nice.\nFOL: all x. (Needs(x, mouse) -> -Nice(mouse))\nTEXT: If something chases the cow and it is not nice then it sees the mouse.\nFOL: all x. ((Chase(x, cow) & -Nice(x)) -> See(x, mouse))\nTEXT: The mouse is not young.\nFOL: -Young(mouse)\n</EVALUATE>"
  ]
 },
 {
  "index": 92,
  "responses": [
   "<EVALUATE>\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The mouse visits the dog.\nFOL: Visits(mouse, dog)\nTEXT: If something visits the dog then the dog is young.\nFOL: all x. (Visits(x, dog) -> Young(dog))\nTEXT: If something is red and young then it does not need the mouse.\nFOL: all x. ((Red(x) & Young(x)) -> -Needs(x, mouse))\nTEXT: If something eats the mouse then the mouse is not cold.\nFOL: all x. (Eats(x, mouse) -> -Cold(mouse))\nTEXT: If something needs the dog then it is green.\nFOL: all x. (Needs(x, dog) -> Green(x))\nTEXT: If something eats the mouse then the mouse needs the dog.\nFOL: all x. (Eats(x, mouse) -> Needs(mouse, dog))\nTEXT: If something needs the mouse then the mouse needs the dog.\nFOL: all x. (Needs(x, mouse) -> Needs(mouse, dog))\nTEXT: If something is green and not young then it eats the mouse.\nFOL: all x. ((Green(x) & -Young(x)) -> Eats(x, mouse))\nTEXT: If something is green then it eats the mouse.\nFOL: all x. (Green(x) -> Eats(x, mouse))\nTEXT: The dog does not eat the mouse.\nFOL: -Eats(dog, mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The mouse visits the dog.\nFOL: Visits(mouse, dog)\nTEXT: If something visits the dog then the dog is young.\nFOL: all x. (Visits(x, dog) -> Young(dog))\nTEXT: If something is red and young then it does not need the mouse.\nFOL: all x. (Red(x) & Young(x) -> -Needs(x, mouse))\nTEXT: If something eats the mouse then the mouse is not cold.\nFOL: all x. (Eats(x, mouse) -> -Cold(mouse))\nTEXT: If something needs the dog then it is green.\nFOL: all x. (Needs(x, dog) -> Green(x))\nTEXT: If something eats the mouse then the mouse needs the dog.\nFOL: all x. (Eats(x, mouse) -> Needs(mouse, dog))\nTEXT: If something needs the mouse then the mouse needs the dog.\nFOL: all x. (Needs(x, mouse) -> Needs(mouse, dog))\nTEXT: If something is green and not young then it eats the mouse.\nFOL: all x. (Green(x) & -Young(x) -> Eats(x, mouse))\nTEXT: If something is green then it eats the mouse.\nFOL: all x. (Green(x) -> Eats(x, mouse))\nTEXT: The dog does not eat the mouse.\nFOL: -Eats(dog, mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The mouse visits the dog.\nFOL: Visits(mouse, dog)\nTEXT: If something visits the dog then the dog is young.\nFOL: all x. (Visits(x, dog) -> Young(dog))\nTEXT: If something is red and young then it does not need the mouse.\nFOL: all x. (Red(x) & Young(x) -> -Needs(x, mouse))\nTEXT: If something eats the mouse then the mouse is not cold.\nFOL: all x. (Eats(x, mouse) -> -Cold(mouse))\nTEXT: If something needs the dog then it is green.\nFOL: all x. (Needs(x, dog) -> Green(x))\nTEXT: If something eats the mouse then the mouse needs the dog.\nFOL: all x. (Eats(x, mouse) -> Needs(mouse, dog))\nTEXT: If something needs the mouse then the mouse needs the dog.\nFOL: all x. (Needs(x, mouse) -> Needs(mouse, dog))\nTEXT: If something is green and not young then it eats the mouse.\nFOL: all x. ((Green(x) & -Young(x)) -> Eats(x, mouse))\nTEXT: If something is green then it eats the mouse.\nFOL: all x. (Green(x) -> Eats(x, mouse))\nTEXT: The dog does not eat the mouse.\nFOL: -Eats(dog, mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is green.\nFOL: Dog(dog) & Green(dog)\nTEXT: The mouse visits the dog.\nFOL: Visits(mouse, dog)\nTEXT: If something visits the dog then the dog is young.\nFOL: all x. (Visits(x, dog) -> Young(dog))\nTEXT: If something is red and young then it does not need the mouse.\nFOL: all x. ((Red(x) & Young(x)) -> -Needs(x, mouse))\nTEXT: If something eats the mouse then the mouse is not cold.\nFOL: all x. (Eats(x, mouse) -> -Cold(mouse))\nTEXT: If something needs the dog then it is green.\nFOL: all x. (Needs(x, dog) -> Green(x))\nTEXT: If something eats the mouse then the mouse needs the dog.\nFOL: all x. (Eats(x, mouse) -> Needs(mouse, dog))\nTEXT: If something needs the mouse then the mouse needs the dog.\nFOL: all x. (Needs(x, mouse) -> Needs(mouse, dog))\nTEXT: If something is green and not young then it eats the mouse.\nFOL: all x. ((Green(x) & -Young(x)) -> Eats(x, mouse))\nTEXT: If something is green then it eats the mouse.\nFOL: all x. (Green(x) -> Eats(x, mouse))\nTEXT: The dog does not eat the mouse.\nFOL: -Eats(dog, mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The mouse visits the dog.\nFOL: Visits(mouse, dog)\nTEXT: If something visits the dog then the dog is young.\nFOL: all x. (Visits(x, dog) -> Young(dog))\nTEXT: If something is red and young then it does not need the mouse.\nFOL: all x. ((Red(x) & Young(x)) -> -NeedsMouse(x))\nTEXT: If something eats the mouse then the mouse is not cold.\nFOL: all x. (Eats(x, mouse) -> -Cold(mouse))\nTEXT: If something needs the dog then it is green.\nFOL: all x. (NeedsDog(x) -> Green(x))\nTEXT: If something eats the mouse then the mouse needs the dog.\nFOL: all x. (Eats(x, mouse) -> NeedsDog(mouse))\nTEXT: If something needs the mouse then the mouse needs the dog.\nFOL: all x. (NeedsMouse(x) -> NeedsDog(mouse))\nTEXT: If something is green and not young then it eats the mouse.\nFOL: all x. ((Green(x) & -Young(x)) -> Eats(x, mouse))\nTEXT: If something is green then it eats the mouse.\nFOL: all x. (Green(x) -> Eats(x, mouse))\nTEXT: The dog does not eat the mouse.\nFOL: -Eats(dog, mouse)\n</EVALUATE>"
  ]
 },
 {
  "index": 93,
  "responses": [
   "<EVALUATE>\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: If Fiona is kind then Fiona is young.\nFOL: Kind(fiona) -> Young(fiona)\nTEXT: All big people are not green.\nFOL: all x. (Big(x) -> -Green(x))\nTEXT: If someone is big and not red then they are green.\nFOL: all x. ((Big(x) & -Red(x)) -> Green(x))\nTEXT: All green people are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) -> Kind(x))\nTEXT: If someone is young then they are kind.\nFOL: all x. (Young(x) -> Kind(x))\nTEXT: Cold people are kind.\nFOL: all x. (Cold(x) -> Kind(x))\nTEXT: If someone is red and young then they are not big.\nFOL: all x. ((Red(x) & Young(x)) -> -Big(x))\nTEXT: Fiona is not green.\nFOL: -Green(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: If Fiona is kind then Fiona is young.\nFOL: Kind(fiona) -> Young(fiona)\nTEXT: All big people are not green.\nFOL: all x. (Big(x) -> -Green(x))\nTEXT: If someone is big and not red then they are green.\nFOL: (Big(x) & -Red(x)) -> Green(x)\nTEXT: All green people are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) -> Kind(x))\nTEXT: If someone is young then they are kind.\nFOL: Young(x) -> Kind(x)\nTEXT: Cold people are kind.\nFOL: all x. (Cold(x) -> Kind(x))\nTEXT: If someone is red and young then they are not big.\nFOL: (Red(x) & Young(x)) -> -Big(x)\nTEXT: Fiona is not green.\nFOL: -Green(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: If Fiona is kind then Fiona is young.\nFOL: Kind(fiona) -> Young(fiona)\nTEXT: All big people are not green.\nFOL: all x. (Big(x) -> -Green(x))\nTEXT: If someone is big and not red then they are green.\nFOL: (Big(x) & -Red(x)) -> Green(x)\nTEXT: All green people are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) -> Kind(x))\nTEXT: If someone is young then they are kind.\nFOL: all x. (Young(x) -> Kind(x))\nTEXT: Cold people are kind.\nFOL: all x. (Cold(x) -> Kind(x))\nTEXT: If someone is red and young then they are not big.\nFOL: (Red(x) & Young(x)) -> -Big(x)\nTEXT: Fiona is not green.\nFOL: -Green(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: If Fiona is kind then Fiona is young.\nFOL: (Kind(fiona) -> Young(fiona))\nTEXT: All big people are not green.\nFOL: all x. (Big(x) -> -Green(x))\nTEXT: If someone is big and not red then they are green.\nFOL: all x. ((Big(x) & -Red(x)) -> Green(x))\nTEXT: All green people are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) -> Kind(x))\nTEXT: If someone is young then they are kind.\nFOL: all x. (Young(x) -> Kind(x))\nTEXT: Cold people are kind.\nFOL: all x. (Cold(x) -> Kind(x))\nTEXT: If someone is red and young then they are not big.\nFOL: all x. ((Red(x) & Young(x)) -> -Big(x))\nTEXT: Fiona is not green.\nFOL: -Green(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: If Fiona is kind then Fiona is young.\nFOL: Kind(fiona) -> Young(fiona)\nTEXT: All big people are not green.\nFOL: all x. (Big(x) -> -Green(x))\nTEXT: If someone is big and not red then they are green.\nFOL: all x. (Big(x) & -Red(x) -> Green(x))\nTEXT: All green people are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) -> Kind(x))\nTEXT: If someone is young then they are kind.\nFOL: all x. (Young(x) -> Kind(x))\nTEXT: Cold people are kind.\nFOL: all x. (Cold(x) -> Kind(x))\nTEXT: If someone is red and young then they are not big.\nFOL: all x. ((Red(x) & Young(x)) -> -Big(x))\nTEXT: Fiona is not green.\nFOL: -Green(fiona)\n</EVALUATE>"
  ]
 },
 {
  "index": 94,
  "responses": [
   "<EVALUATE>\nTEXT: The bear is green.\nFOL: Green(bear)\nTEXT: The bear is young.\nFOL: Young(bear)\nTEXT: The bear sees the rabbit.\nFOL: Sees(bear, rabbit)\nTEXT: The lion is cold.\nFOL: Cold(lion)\nTEXT: The lion is young.\nFOL: Young(lion)\nTEXT: The lion needs the bear.\nFOL: Needs(lion, bear)\nTEXT: The lion needs the rabbit.\nFOL: Needs(lion, rabbit)\nTEXT: The rabbit needs the bear.\nFOL: Needs(rabbit, bear)\nTEXT: The rabbit needs the lion.\nFOL: Needs(rabbit, lion)\nTEXT: The rabbit does not see the bear.\nFOL: -Sees(rabbit, bear)\nTEXT: The rabbit visits the bear.\nFOL: Visits(rabbit, bear)\nTEXT: The rabbit visits the lion.\nFOL: Visits(rabbit, lion)\nTEXT: If someone visits the bear and the bear is not red then the bear sees the rabbit.\nFOL: Visits(x, bear) & -Red(bear) -> Sees(bear, rabbit)\nTEXT: If the lion is cold and the lion visits the bear then the lion sees the bear.\nFOL: Cold(lion) & Visits(lion, bear) -> Sees(lion, bear)\nTEXT: If someone visits the bear and they need the lion then the lion sees the bear.\nFOL: Visits(x, bear) & Needs(x, lion) -> Sees(lion, bear)\nTEXT: If the bear sees the lion then the bear is cold.\nFOL: Sees(bear, lion) -> Cold(bear)\nTEXT: If someone is cold then they need the rabbit.\nFOL: Cold(x) -> Needs(x, rabbit)\nTEXT: If someone needs the lion and the lion sees the bear then the bear sees the lion.\nFOL: Needs(x, lion) & Sees(lion, bear) -> Sees(bear, lion)\nTEXT: The bear visits the lion.\nFOL: Visits(bear, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is green.\nFOL: Green(bear)\nTEXT: The bear is young.\nFOL: Young(bear)\nTEXT: The bear sees the rabbit.\nFOL: Sees(bear, rabbit)\nTEXT: The lion is cold.\nFOL: Cold(lion)\nTEXT: The lion is young.\nFOL: Young(lion)\nTEXT: The lion needs the bear.\nFOL: Needs(lion, bear)\nTEXT: The lion needs the rabbit.\nFOL: Needs(lion, rabbit)\nTEXT: The rabbit needs the bear.\nFOL: Needs(rabbit, bear)\nTEXT: The rabbit needs the lion.\nFOL: Needs(rabbit, lion)\nTEXT: The rabbit does not see the bear.\nFOL: -Sees(rabbit, bear)\nTEXT: The rabbit visits the bear.\nFOL: Visits(rabbit, bear)\nTEXT: The rabbit visits the lion.\nFOL: Visits(rabbit, lion)\nTEXT: If someone visits the bear and the bear is not red then the bear sees the rabbit.\nFOL: (Visits(x, bear) & -Red(bear) -> Sees(bear, rabbit))\nTEXT: If the lion is cold and the lion visits the bear then the lion sees the bear.\nFOL: (Cold(lion) & Visits(lion, bear) -> Sees(lion, bear))\nTEXT: If someone visits the bear and they need the lion then the lion sees the bear.\nFOL: (Visits(x, bear) & Needs(x, lion) -> Sees(lion, bear))\nTEXT: If the bear sees the lion then the bear is cold.\nFOL: (Sees(bear, lion) -> Cold(bear))\nTEXT: If someone is cold then they need the rabbit.\nFOL: (Cold(x) -> Needs(x, rabbit))\nTEXT: If someone needs the lion and the lion sees the bear then the bear sees the lion.\nFOL: (Needs(x, lion) & Sees(lion, bear) -> Sees(bear, lion))\nTEXT: The bear visits the lion.\nFOL: Visits(bear, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is green.\nFOL: Green(bear)\nTEXT: The bear is young.\nFOL: Young(bear)\nTEXT: The bear sees the rabbit.\nFOL: Sees(bear, rabbit)\nTEXT: The lion is cold.\nFOL: Cold(lion)\nTEXT: The lion is young.\nFOL: Young(lion)\nTEXT: The lion needs the bear.\nFOL: Needs(lion, bear)\nTEXT: The lion needs the rabbit.\nFOL: Needs(lion, rabbit)\nTEXT: The rabbit needs the bear.\nFOL: Needs(rabbit, bear)\nTEXT: The rabbit needs the lion.\nFOL: Needs(rabbit, lion)\nTEXT: The rabbit does not see the bear.\nFOL: -Sees(rabbit, bear)\nTEXT: The rabbit visits the bear.\nFOL: Visits(rabbit, bear)\nTEXT: The rabbit visits the lion.\nFOL: Visits(rabbit, lion)\nTEXT: If someone visits the bear and the bear is not red then the bear sees the rabbit.\nFOL: (Visits(x, bear) & -Red(bear)) -> Sees(bear, rabbit)\nTEXT: If the lion is cold and the lion visits the bear then the lion sees the bear.\nFOL: (Cold(lion) & Visits(lion, bear)) -> Sees(lion, bear)\nTEXT: If someone visits the bear and they need the lion then the lion sees the bear.\nFOL: (Visits(x, bear) & Needs(x, lion)) -> Sees(lion, bear)\nTEXT: If the bear sees the lion then the bear is cold.\nFOL: Sees(bear, lion) -> Cold(bear)\nTEXT: If someone is cold then they need the rabbit.\nFOL: Cold(x) -> Needs(x, rabbit)\nTEXT: If someone needs the lion and the lion sees the bear then the bear sees the lion.\nFOL: (Needs(x, lion) & Sees(lion, bear)) -> Sees(bear, lion)\nTEXT: The bear visits the lion.\nFOL: Visits(bear, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is green.\nFOL: Green(bear)\nTEXT: The bear is young.\nFOL: Young(bear)\nTEXT: The bear sees the rabbit.\nFOL: Sees(bear, rabbit)\nTEXT: The lion is cold.\nFOL: Cold(lion)\nTEXT: The lion is young.\nFOL: Young(lion)\nTEXT: The lion needs the bear.\nFOL: Needs(lion, bear)\nTEXT: The lion needs the rabbit.\nFOL: Needs(lion, rabbit)\nTEXT: The rabbit needs the bear.\nFOL: Needs(rabbit, bear)\nTEXT: The rabbit needs the lion.\nFOL: Needs(rabbit, lion)\nTEXT: The rabbit does not see the bear.\nFOL: -Sees(rabbit, bear)\nTEXT: The rabbit visits the bear.\nFOL: Visits(rabbit, bear)\nTEXT: The rabbit visits the lion.\nFOL: Visits(rabbit, lion)\nTEXT: If someone visits the bear and the bear is not red then the bear sees the rabbit.\nFOL: (Visits(x, bear) & -Red(bear) -> Sees(bear, rabbit))\nTEXT: If the lion is cold and the lion visits the bear then the lion sees the bear.\nFOL: (Cold(lion) & Visits(lion, bear) -> Sees(lion, bear))\nTEXT: If someone visits the bear and they need the lion then the lion sees the bear.\nFOL: (Visits(x, bear) & Needs(x, lion) -> Sees(lion, bear))\nTEXT: If the bear sees the lion then the bear is cold.\nFOL: Sees(bear, lion) -> Cold(bear)\nTEXT: If someone is cold then they need the rabbit.\nFOL: Cold(x) -> Needs(x, rabbit)\nTEXT: If someone needs the lion and the lion sees the bear then the bear sees the lion.\nFOL: (Needs(x, lion) & Sees(lion, bear) -> Sees(bear, lion))\nTEXT: The bear visits the lion.\nFOL: Visits(bear, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is green.\nFOL: Green(bear)\nTEXT: The bear is young.\nFOL: Young(bear)\nTEXT: The bear sees the rabbit.\nFOL: Sees(bear, rabbit)\nTEXT: The lion is cold.\nFOL: Cold(lion)\nTEXT: The lion is young.\nFOL: Young(lion)\nTEXT: The lion needs the bear.\nFOL: Needs(lion, bear)\nTEXT: The lion needs the rabbit.\nFOL: Needs(lion, rabbit)\nTEXT: The rabbit needs the bear.\nFOL: Needs(rabbit, bear)\nTEXT: The rabbit needs the lion.\nFOL: Needs(rabbit, lion)\nTEXT: The rabbit does not see the bear.\nFOL: -Sees(rabbit, bear)\nTEXT: The rabbit visits the bear.\nFOL: Visits(rabbit, bear)\nTEXT: The rabbit visits the lion.\nFOL: Visits(rabbit, lion)\nTEXT: If someone visits the bear and the bear is not red then the bear sees the rabbit.\nFOL: (exists x. (Visits(x, bear) & -Red(bear)) -> Sees(bear, rabbit))\nTEXT: If the lion is cold and the lion visits the bear then the lion sees the bear.\nFOL: (Cold(lion) & Visits(lion, bear) -> Sees(lion, bear))\nTEXT: If someone visits the bear and they need the lion then the lion sees the bear.\nFOL: (exists x. (Visits(x, bear) & Needs(x, lion)) -> Sees(lion, bear))\nTEXT: If the bear sees the lion then the bear is cold.\nFOL: (Sees(bear, lion) -> Cold(bear))\nTEXT: If someone is cold then they need the rabbit.\nFOL: (exists x. Cold(x) -> Needs(x, rabbit))\nTEXT: If someone needs the lion and the lion sees the bear then the bear sees the lion.\nFOL: (exists x. (Needs(x, lion) & Sees(lion, bear)) -> Sees(bear, lion))\nTEXT: The bear visits the lion.\nFOL: Visits(bear, lion)\n</EVALUATE>"
  ]
 },
 {
  "index": 95,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is not blue.\nFOL: -Blue(baldEagle)\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle does not need the tiger.\nFOL: -Needs(baldEagle, tiger)\nTEXT: The bald eagle sees the cat.\nFOL: Sees(baldEagle, cat)\nTEXT: The bald eagle does not see the tiger.\nFOL: -Sees(baldEagle, tiger)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat visits the tiger.\nFOL: Visits(cat, tiger)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger needs the cat.\nFOL: Needs(tiger, cat)\nTEXT: The tiger sees the cat.\nFOL: Sees(tiger, cat)\nTEXT: If the bald eagle does not need the tiger then the tiger does not see the bald eagle.\nFOL: -Needs(baldEagle, tiger) -> -Sees(tiger, baldEagle)\nTEXT: The bald eagle does not need the cat.\nFOL: -Needs(baldEagle, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is not blue.\nFOL: -Blue(baldEagle)\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle does not need the tiger.\nFOL: -Need(baldEagle, tiger)\nTEXT: The bald eagle sees the cat.\nFOL: See(baldEagle, cat)\nTEXT: The bald eagle does not see the tiger.\nFOL: -See(baldEagle, tiger)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat visits the tiger.\nFOL: Visit(cat, tiger)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger needs the cat.\nFOL: Need(tiger, cat)\nTEXT: The tiger sees the cat.\nFOL: See(tiger, cat)\nTEXT: If the bald eagle does not need the tiger then the tiger does not see the bald eagle.\nFOL: -Need(baldEagle, tiger) -> -See(tiger, baldEagle)\nTEXT: The bald eagle does not need the cat.\nFOL: -Need(baldEagle, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is not blue.\nFOL: -Blue(baldEagle)\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle does not need the tiger.\nFOL: -Need(baldEagle, tiger)\nTEXT: The bald eagle sees the cat.\nFOL: Sees(baldEagle, cat)\nTEXT: The bald eagle does not see the tiger.\nFOL: -Sees(baldEagle, tiger)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat visits the tiger.\nFOL: Visits(cat, tiger)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger needs the cat.\nFOL: Need(tiger, cat)\nTEXT: The tiger sees the cat.\nFOL: Sees(tiger, cat)\nTEXT: If the bald eagle does not need the tiger then the tiger does not see the bald eagle.\nFOL: -Need(baldEagle, tiger) -> -Sees(tiger, baldEagle)\nTEXT: The bald eagle does not need the cat.\nFOL: -Need(baldEagle, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is not blue.\nFOL: -Blue(baldEagle)\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle does not need the tiger.\nFOL: -Need(baldEagle, tiger)\nTEXT: The bald eagle sees the cat.\nFOL: See(baldEagle, cat)\nTEXT: The bald eagle does not see the tiger.\nFOL: -See(baldEagle, tiger)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat visits the tiger.\nFOL: Visit(cat, tiger)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger needs the cat.\nFOL: Need(tiger, cat)\nTEXT: The tiger sees the cat.\nFOL: See(tiger, cat)\nTEXT: If the bald eagle does not need the tiger then the tiger does not see the bald eagle.\nFOL: (-Need(baldEagle, tiger) -> -See(tiger, baldEagle))\nTEXT: The bald eagle does not need the cat.\nFOL: -Need(baldEagle, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is not blue.\nFOL: -Blue(baldEagle)\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle does not need the tiger.\nFOL: -Needs(baldEagle, tiger)\nTEXT: The bald eagle sees the cat.\nFOL: Sees(baldEagle, cat)\nTEXT: The bald eagle does not see the tiger.\nFOL: -Sees(baldEagle, tiger)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat visits the tiger.\nFOL: Visits(cat, tiger)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger needs the cat.\nFOL: Needs(tiger, cat)\nTEXT: The tiger sees the cat.\nFOL: Sees(tiger, cat)\nTEXT: If the bald eagle does not need the tiger then the tiger does not see the bald eagle.\nFOL: (-Needs(baldEagle, tiger) -> -Sees(tiger, baldEagle))\nTEXT: The bald eagle does not need the cat.\nFOL: -Needs(baldEagle, cat)\n</EVALUATE>"
  ]
 },
 {
  "index": 96,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: Furry(anne)\nTEXT: Anne is not kind.\nFOL: -Kind(anne)\nTEXT: Anne is red.\nFOL: Red(anne)\nTEXT: Erin is cold.\nFOL: Cold(erin)\nTEXT: Erin is nice.\nFOL: Nice(erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(erin)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: If Anne is red and Anne is not kind then Anne is quiet.\nFOL: (Red(anne) & -Kind(anne)) -> Quiet(anne)\nTEXT: Quiet, furry people are not nice.\nFOL: all x. (Quiet(x) & Furry(x) -> -Nice(x))\nTEXT: If Anne is quiet and Anne is not nice then Anne is cold.\nFOL: (Quiet(anne) & -Nice(anne)) -> Cold(anne)\nTEXT: Anne is kind.\nFOL: Kind(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: Furry(anne)\nTEXT: Anne is not kind.\nFOL: -Kind(anne)\nTEXT: Anne is red.\nFOL: Red(anne)\nTEXT: Erin is cold.\nFOL: Cold(erin)\nTEXT: Erin is nice.\nFOL: Nice(erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(erin)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: If Anne is red and Anne is not kind then Anne is quiet.\nFOL: (Red(anne) & -Kind(anne)) -> Quiet(anne)\nTEXT: Quiet, furry people are not nice.\nFOL: all x. ((Quiet(x) & Furry(x)) -> -Nice(x))\nTEXT: If Anne is quiet and Anne is not nice then Anne is cold.\nFOL: (Quiet(anne) & -Nice(anne)) -> Cold(anne)\nTEXT: Anne is kind.\nFOL: Kind(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: Furry(anne)\nTEXT: Anne is not kind.\nFOL: -Kind(anne)\nTEXT: Anne is red.\nFOL: Red(anne)\nTEXT: Erin is cold.\nFOL: Cold(erin)\nTEXT: Erin is nice.\nFOL: Nice(erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(erin)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: If Anne is red and Anne is not kind then Anne is quiet.\nFOL: (Red(anne) & -Kind(anne)) -> Quiet(anne)\nTEXT: Quiet, furry people are not nice.\nFOL: all x. (Furry(x) & Quiet(x) -> -Nice(x))\nTEXT: If Anne is quiet and Anne is not nice then Anne is cold.\nFOL: (Quiet(anne) & -Nice(anne)) -> Cold(anne)\nTEXT: Anne is kind.\nFOL: Kind(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: Furry(anne)\nTEXT: Anne is not kind.\nFOL: -Kind(anne)\nTEXT: Anne is red.\nFOL: Red(anne)\nTEXT: Erin is cold.\nFOL: Cold(erin)\nTEXT: Erin is nice.\nFOL: Nice(erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(erin)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: If Anne is red and Anne is not kind then Anne is quiet.\nFOL: (Red(anne) & -Kind(anne)) -> Quiet(anne)\nTEXT: Quiet, furry people are not nice.\nFOL: all x. (Quiet(x) & Furry(x) -> -Nice(x))\nTEXT: If Anne is quiet and Anne is not nice then Anne is cold.\nFOL: (Quiet(anne) & -Nice(anne)) -> Cold(anne)\nTEXT: Anne is kind.\nFOL: Kind(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: Furry(anne)\nTEXT: Anne is not kind.\nFOL: -Kind(anne)\nTEXT: Anne is red.\nFOL: Red(anne)\nTEXT: Erin is cold.\nFOL: Cold(erin)\nTEXT: Erin is nice.\nFOL: Nice(erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(erin)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: If Anne is red and Anne is not kind then Anne is quiet.\nFOL: (Red(anne) & -Kind(anne)) -> Quiet(anne)\nTEXT: Quiet, furry people are not nice.\nFOL: all x. (Quiet(x) & Furry(x) -> -Nice(x))\nTEXT: If Anne is quiet and Anne is not nice then Anne is cold.\nFOL: (Quiet(anne) & -Nice(anne)) -> Cold(anne)\nTEXT: Anne is kind.\nFOL: Kind(anne)\n</EVALUATE>"
  ]
 },
 {
  "index": 97,
  "responses": [
   "<EVALUATE>\nTEXT: The mouse is rough.\nFOL: Rough(mouse)\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. ((Rough(x) & Red(x)) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. ((Round(x) & Red(x)) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: Rough(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse is rough.\nFOL: Rough(mouse)\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: Rough(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse is rough.\nFOL: rough(mouse)\nTEXT: If something is kind then it is green.\nFOL: all x. (kind(x) -> green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. ((rough(x) & red(x)) -> kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. ((round(x) & red(x)) -> rough(x))\nTEXT: The mouse is rough.\nFOL: rough(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse is rough.\nFOL: rough(mouse)\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. ((Rough(x) & Red(x)) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. ((Round(x) & Red(x)) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: rough(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse is rough.\nFOL: Rough(mouse)\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. ((Rough(x) & Red(x)) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. ((Round(x) & Red(x)) -> Rough(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 98,
  "responses": [
   "<EVALUATE>\nTEXT: Round, nice Bob felt as blue and big as he had ever been.\nFOL: Blue(bob) & Big(bob)\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: Cold(charlie)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(eric)\nTEXT: That guy Fred sure is nice.\nFOL: Nice(fred)\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: all x. (Big(x) & Kind(x) & Cold(x) -> Red(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: all x. (Blue(x) & Big(x) -> Cold(x))\nTEXT: You must be aware of big, red, young people being rough.\nFOL: all x. (Big(x) & Red(x) & Young(x) -> Rough(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: all x. (Big(x) & Cold(x) -> Kind(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & Red(x) -> Big(x))\nTEXT: Bob is kind.\nFOL: Kind(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Round, nice Bob felt as blue and big as he had ever been.\nFOL: Blue(bob) & Big(bob)\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: Cold(charlie)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(erik)\nTEXT: That guy Fred sure is nice.\nFOL: Nice(fred)\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: all x. (Big(x) & Kind(x) & Cold(x) -> Red(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: all x. (Blue(x) & Big(x) -> Cold(x))\nTEXT: You must be aware of big, red, young people being rough.\nFOL: all x. (Big(x) & Red(x) & Young(x) -> Rough(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: all x. (Big(x) & Cold(x) -> Kind(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & Red(x) -> Big(x))\nTEXT: Bob is kind.\nFOL: Kind(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Round, nice Bob felt as blue and big as he had ever been.\nFOL: Blue(bob) & Big(bob)\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: Cold(charlie)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(erick)\nTEXT: That guy Fred sure is nice.\nFOL: Nice(fred)\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: all x. (Big(x) & Kind(x) & Cold(x) -> Red(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: all x. (Blue(x) & Big(x) -> Cold(x))\nTEXT: You must be aware of big, red, young people being rough.\nFOL: all x. (Big(x) & Red(x) & Young(x) -> Rough(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: all x. (Big(x) & Cold(x) -> Kind(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & Red(x) -> Big(x))\nTEXT: Bob is kind.\nFOL: Kind(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Round, nice Bob felt as blue and big as he had ever been.\nFOL: Blue(bob) & Big(bob)\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: Cold(charlie)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(eric)\nTEXT: That guy Fred sure is nice.\nFOL: Nice(fred)\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: all x. ((Big(x) & Kind(x) & Cold(x)) -> Red(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: all x. (Blue(x) & Big(x) -> Cold(x))\nTEXT: You must be aware of big, red, young people being rough.\nFOL: all x. (Big(x) & Red(x) & Young(x) -> Rough(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: all x. (Big(x) & Cold(x) -> Kind(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & Red(x) -> Big(x))\nTEXT: Bob is kind.\nFOL: Kind(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Round, nice Bob felt as blue and big as he had ever been.\nFOL: Blue(bob) & Big(bob)\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: Cold(charlie)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(erik)\nTEXT: That guy Fred sure is nice.\nFOL: Nice(fred)\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: all x. ((Big(x) & Kind(x) & Cold(x)) -> Red(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: all x. (Blue(x) & Big(x) -> Cold(x))\nTEXT: You must be aware of big, red, young people being rough.\nFOL: all x. (Big(x) & Red(x) & Young(x) -> Rough(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: all x. (Big(x) & Cold(x) -> Kind(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & Red(x) -> Big(x))\nTEXT: Bob is kind.\nFOL: Kind(bob)\n</EVALUATE>"
  ]
 },
 {
  "index": 99,
  "responses": [
   "<EVALUATE>\nTEXT: The cat eats the dog.\nFOL: Eats(cat, dog)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat is rough.\nFOL: Rough(cat)\nTEXT: The dog eats the mouse.\nFOL: Eats(dog, mouse)\nTEXT: The dog needs the cat.\nFOL: Needs(dog, cat)\nTEXT: The dog sees the cat.\nFOL: Sees(dog, cat)\nTEXT: The dog sees the mouse.\nFOL: Sees(dog, mouse)\nTEXT: The mouse eats the dog.\nFOL: Eats(mouse, dog)\nTEXT: The mouse is rough.\nFOL: Rough(mouse)\nTEXT: The mouse is young.\nFOL: Young(mouse)\nTEXT: The mouse needs the dog.\nFOL: Needs(mouse, dog)\nTEXT: The mouse sees the dog.\nFOL: Sees(mouse, dog)\nTEXT: If something needs the mouse and the mouse sees the dog then the mouse is red.\nFOL: (Needs(x, mouse) & Sees(mouse, dog)) -> Red(x)\nTEXT: If something sees the cat then the cat sees the dog.\nFOL: Sees(x, cat) -> Sees(cat, dog)\nTEXT: If something is young then it sees the dog.\nFOL: Young(x) -> Sees(x, dog)\nTEXT: If something needs the cat then the cat needs the mouse.\nFOL: Needs(x, cat) -> Needs(cat, mouse)\nTEXT: If something is rough and it eats the mouse then it sees the cat.\nFOL: (Rough(x) & Eats(x, mouse)) -> Sees(x, cat)\nTEXT: If something is red then it needs the cat.\nFOL: Red(x) -> Needs(x, cat)\nTEXT: If the dog is young and the dog is red then the dog is rough.\nFOL: (Young(dog) & Red(dog)) -> Rough(dog)\nTEXT: If something eats the dog and it is nice then it sees the dog.\nFOL: (Eats(x, dog) & Nice(x)) -> Sees(x, dog)\nTEXT: The mouse is not red.\nFOL: -Red(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the dog.\nFOL: Eats(cat, dog)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat is rough.\nFOL: Rough(cat)\nTEXT: The dog eats the mouse.\nFOL: Eats(dog, mouse)\nTEXT: The dog needs the cat.\nFOL: Needs(dog, cat)\nTEXT: The dog sees the cat.\nFOL: Sees(dog, cat)\nTEXT: The dog sees the mouse.\nFOL: Sees(dog, mouse)\nTEXT: The mouse eats the dog.\nFOL: Eats(mouse, dog)\nTEXT: The mouse is rough.\nFOL: Rough(mouse)\nTEXT: The mouse is young.\nFOL: Young(mouse)\nTEXT: The mouse needs the dog.\nFOL: Needs(mouse, dog)\nTEXT: The mouse sees the dog.\nFOL: Sees(mouse, dog)\nTEXT: If something needs the mouse and the mouse sees the dog then the mouse is red.\nFOL: (Needs(x, mouse) & Sees(mouse, dog)) -> Red(mouse)\nTEXT: If something sees the cat then the cat sees the dog.\nFOL: Sees(x, cat) -> Sees(cat, dog)\nTEXT: If something is young then it sees the dog.\nFOL: Young(x) -> Sees(x, dog)\nTEXT: If something needs the cat then the cat needs the mouse.\nFOL: Needs(x, cat) -> Needs(cat, mouse)\nTEXT: If something is rough and it eats the mouse then it sees the cat.\nFOL: (Rough(x) & Eats(x, mouse)) -> Sees(x, cat)\nTEXT: If something is red then it needs the cat.\nFOL: Red(x) -> Needs(x, cat)\nTEXT: If the dog is young and the dog is red then the dog is rough.\nFOL: (Young(dog) & Red(dog)) -> Rough(dog)\nTEXT: If something eats the dog and it is nice then it sees the dog.\nFOL: (Eats(x, dog) & Nice(x)) -> Sees(x, dog)\nTEXT: The mouse is not red.\nFOL: -Red(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the dog.\nFOL: Eats(cat, dog)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat is rough.\nFOL: Rough(cat)\nTEXT: The dog eats the mouse.\nFOL: Eats(dog, mouse)\nTEXT: The dog needs the cat.\nFOL: Needs(dog, cat)\nTEXT: The dog sees the cat.\nFOL: Sees(dog, cat)\nTEXT: The dog sees the mouse.\nFOL: Sees(dog, mouse)\nTEXT: The mouse eats the dog.\nFOL: Eats(mouse, dog)\nTEXT: The mouse is rough.\nFOL: Rough(mouse)\nTEXT: The mouse is young.\nFOL: Young(mouse)\nTEXT: The mouse needs the dog.\nFOL: Needs(mouse, dog)\nTEXT: The mouse sees the dog.\nFOL: Sees(mouse, dog)\nTEXT: If something needs the mouse and the mouse sees the dog then the mouse is red.\nFOL: all x. ((Needs(x, mouse) & Sees(mouse, dog)) -> Red(x))\nTEXT: If something sees the cat then the cat sees the dog.\nFOL: all x. (Sees(x, cat) -> Sees(cat, dog))\nTEXT: If something is young then it sees the dog.\nFOL: all x. (Young(x) -> Sees(x, dog))\nTEXT: If something needs the cat then the cat needs the mouse.\nFOL: all x. (Needs(x, cat) -> Needs(cat, mouse))\nTEXT: If something is rough and it eats the mouse then it sees the cat.\nFOL: all x. ((Rough(x) & Eats(x, mouse)) -> Sees(x, cat))\nTEXT: If something is red then it needs the cat.\nFOL: all x. (Red(x) -> Needs(x, cat))\nTEXT: If the dog is young and the dog is red then the dog is rough.\nFOL: (Young(dog) & Red(dog)) -> Rough(dog)\nTEXT: If something eats the dog and it is nice then it sees the dog.\nFOL: all x. ((Eats(x, dog) & Nice(x)) -> Sees(x, dog))\nTEXT: The mouse is not red.\nFOL: -Red(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the dog.\nFOL: Eats(cat, dog)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat is rough.\nFOL: Rough(cat)\nTEXT: The dog eats the mouse.\nFOL: Eats(dog, mouse)\nTEXT: The dog needs the cat.\nFOL: Needs(dog, cat)\nTEXT: The dog sees the cat.\nFOL: Sees(dog, cat)\nTEXT: The dog sees the mouse.\nFOL: Sees(dog, mouse)\nTEXT: The mouse eats the dog.\nFOL: Eats(mouse, dog)\nTEXT: The mouse is rough.\nFOL: Rough(mouse)\nTEXT: The mouse is young.\nFOL: Young(mouse)\nTEXT: The mouse needs the dog.\nFOL: Needs(mouse, dog)\nTEXT: The mouse sees the dog.\nFOL: Sees(mouse, dog)\nTEXT: If something needs the mouse and the mouse sees the dog then the mouse is red.\nFOL: all x. (Needs(x, mouse) & Sees(mouse, dog) -> Red(x))\nTEXT: If something sees the cat then the cat sees the dog.\nFOL: all x. (Sees(x, cat) -> Sees(cat, dog))\nTEXT: If something is young then it sees the dog.\nFOL: all x. (Young(x) -> Sees(x, dog))\nTEXT: If something needs the cat then the cat needs the mouse.\nFOL: all x. (Needs(x, cat) -> Needs(cat, mouse))\nTEXT: If something is rough and it eats the mouse then it sees the cat.\nFOL: all x. ((Rough(x) & Eats(x, mouse)) -> Sees(x, cat))\nTEXT: If something is red then it needs the cat.\nFOL: all x. (Red(x) -> Needs(x, cat))\nTEXT: If the dog is young and the dog is red then the dog is rough.\nFOL: (Young(dog) & Red(dog)) -> Rough(dog)\nTEXT: If something eats the dog and it is nice then it sees the dog.\nFOL: all x. (Eats(x, dog) & Nice(x) -> Sees(x, dog))\nTEXT: The mouse is not red.\nFOL: -Red(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the dog.\nFOL: Eats(cat, dog)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat is rough.\nFOL: Rough(cat)\nTEXT: The dog eats the mouse.\nFOL: Eats(dog, mouse)\nTEXT: The dog needs the cat.\nFOL: Needs(dog, cat)\nTEXT: The dog sees the cat.\nFOL: Sees(dog, cat)\nTEXT: The dog sees the mouse.\nFOL: Sees(dog, mouse)\nTEXT: The mouse eats the dog.\nFOL: Eats(mouse, dog)\nTEXT: The mouse is rough.\nFOL: Rough(mouse)\nTEXT: The mouse is young.\nFOL: Young(mouse)\nTEXT: The mouse needs the dog.\nFOL: Needs(mouse, dog)\nTEXT: The mouse sees the dog.\nFOL: Sees(mouse, dog)\nTEXT: If something needs the mouse and the mouse sees the dog then the mouse is red.\nFOL: all x. (Needs(x, mouse) & Sees(mouse, dog) -> Red(x))\nTEXT: If something sees the cat then the cat sees the dog.\nFOL: all x. (Sees(x, cat) -> Sees(cat, dog))\nTEXT: If something is young then it sees the dog.\nFOL: all x. (Young(x) -> Sees(x, dog))\nTEXT: If something needs the cat then the cat needs the mouse.\nFOL: all x. (Needs(x, cat) -> Needs(cat, mouse))\nTEXT: If something is rough and it eats the mouse then it sees the cat.\nFOL: all x. (Rough(x) & Eats(x, mouse) -> Sees(x, cat))\nTEXT: If something is red then it needs the cat.\nFOL: all x. (Red(x) -> Needs(x, cat))\nTEXT: If the dog is young and the dog is red then the dog is rough.\nFOL: (Young(dog) & Red(dog)) -> Rough(dog)\nTEXT: If something eats the dog and it is nice then it sees the dog.\nFOL: all x. (Eats(x, dog) & Nice(x) -> Sees(x, dog))\nTEXT: The mouse is not red.\nFOL: -Red(mouse)\n</EVALUATE>"
  ]
 },
 {
  "index": 100,
  "responses": [
   "<EVALUATE>\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: Kind, round things are not red.\nFOL: all x. (Kind(x) & Round(x) -> -Red(x))\nTEXT: All young, red things are not kind.\nFOL: all x. (Young(x) & Red(x) -> -Kind(x))\nTEXT: All red, rough things are round.\nFOL: all x. (Red(x) & Rough(x) -> Round(x))\nTEXT: All rough things are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: If the cow is young and the cow is kind then the cow is round.\nFOL: (Young(cow) & Kind(cow) -> Round(cow))\nTEXT: If something is red then it is rough.\nFOL: all x. (Red(x) -> Rough(x))\nTEXT: If something is round and young then it is rough.\nFOL: all x. (Round(x) & Young(x) -> Rough(x))\nTEXT: If something is rough then it is young.\nFOL: all x. (Rough(x) -> Young(x))\nTEXT: The cow needs the cow.\nFOL: Needs(cow, cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: Kind, round things are not red.\nFOL: all x. ((Kind(x) & Round(x)) -> -Red(x))\nTEXT: All young, red things are not kind.\nFOL: all x. ((Young(x) & Red(x)) -> -Kind(x))\nTEXT: All red, rough things are round.\nFOL: all x. ((Red(x) & Rough(x)) -> Round(x))\nTEXT: All rough things are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: If the cow is young and the cow is kind then the cow is round.\nFOL: (Young(cow) & Kind(cow) -> Round(cow))\nTEXT: If something is red then it is rough.\nFOL: all x. (Red(x) -> Rough(x))\nTEXT: If something is round and young then it is rough.\nFOL: all x. ((Round(x) & Young(x)) -> Rough(x))\nTEXT: If something is rough then it is young.\nFOL: all x. (Rough(x) -> Young(x))\nTEXT: The cow needs the cow.\nFOL: Needs(cow, cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: Kind, round things are not red.\nFOL: all x. ((Kind(x) & Round(x)) -> -Red(x))\nTEXT: All young, red things are not kind.\nFOL: all x. ((Young(x) & Red(x)) -> -Kind(x))\nTEXT: All red, rough things are round.\nFOL: all x. ((Red(x) & Rough(x)) -> Round(x))\nTEXT: All rough things are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: If the cow is young and the cow is kind then the cow is round.\nFOL: (Young(cow) & Kind(cow)) -> Round(cow)\nTEXT: If something is red then it is rough.\nFOL: all x. (Red(x) -> Rough(x))\nTEXT: If something is round and young then it is rough.\nFOL: all x. ((Round(x) & Young(x)) -> Rough(x))\nTEXT: If something is rough then it is young.\nFOL: all x. (Rough(x) -> Young(x))\nTEXT: The cow needs the cow.\nFOL: Needs(cow, cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: Kind, round things are not red.\nFOL: all x. (Kind(x) & Round(x) -> -Red(x))\nTEXT: All young, red things are not kind.\nFOL: all x. (Young(x) & Red(x) -> -Kind(x))\nTEXT: All red, rough things are round.\nFOL: all x. (Red(x) & Rough(x) -> Round(x))\nTEXT: All rough things are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: If the cow is young and the cow is kind then the cow is round.\nFOL: (Young(cow) & Kind(cow) -> Round(cow))\nTEXT: If something is red then it is rough.\nFOL: all x. (Red(x) -> Rough(x))\nTEXT: If something is round and young then it is rough.\nFOL: all x. ((Round(x) & Young(x)) -> Rough(x))\nTEXT: If something is rough then it is young.\nFOL: all x. (Rough(x) -> Young(x))\nTEXT: The cow needs the cow.\nFOL: Needs(cow, cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: Kind, round things are not red.\nFOL: all x. ((Kind(x) & Round(x)) -> -Red(x))\nTEXT: All young, red things are not kind.\nFOL: all x. (Young(x) & Red(x) -> -Kind(x))\nTEXT: All red, rough things are round.\nFOL: all x. (Red(x) & Rough(x) -> Round(x))\nTEXT: All rough things are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: If the cow is young and the cow is kind then the cow is round.\nFOL: (Young(cow) & Kind(cow) -> Round(cow))\nTEXT: If something is red then it is rough.\nFOL: all x. (Red(x) -> Rough(x))\nTEXT: If something is round and young then it is rough.\nFOL: all x. ((Round(x) & Young(x)) -> Rough(x))\nTEXT: If something is rough then it is young.\nFOL: all x. (Rough(x) -> Young(x))\nTEXT: The cow needs the cow.\nFOL: Needs(cow, cow)\n</EVALUATE>"
  ]
 },
 {
  "index": 101,
  "responses": [
   "<EVALUATE>\nTEXT: The cow eats the squirrel.\nFOL: Eats(cow, squirrel)\nTEXT: The squirrel eats the cow.\nFOL: Eats(squirrel, cow)\nTEXT: The tiger likes the cow.\nFOL: Likes(tiger, cow)\nTEXT: If something likes the tiger and it is nice then it eats the tiger.\nFOL: all x. (Likes(x, tiger) & Nice(x) -> Eats(x, tiger))\nTEXT: If something eats the cow then it likes the squirrel.\nFOL: all x. (Eats(x, cow) -> Likes(x, squirrel))\nTEXT: If something visits the squirrel then the squirrel visits the cow.\nFOL: all x. (Visits(x, squirrel) -> Visits(squirrel, cow))\nTEXT: If the cow eats the tiger and the tiger visits the squirrel then the cow eats the squirrel.\nFOL: (Eats(cow, tiger) & Visits(tiger, squirrel)) -> Eats(cow, squirrel)\nTEXT: If something visits the tiger and it eats the tiger then it is blue.\nFOL: all x. (Visits(x, tiger) & Eats(x, tiger) -> Blue(x))\nTEXT: If something likes the squirrel then it visits the squirrel.\nFOL: all x. (Likes(x, squirrel) -> Visits(x, squirrel))\nTEXT: The cow eats the tiger.\nFOL: Eats(cow, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow eats the squirrel.\nFOL: Eats(cow, squirrel)\nTEXT: The squirrel eats the cow.\nFOL: Eats(squirrel, cow)\nTEXT: The tiger likes the cow.\nFOL: Likes(tiger, cow)\nTEXT: If something likes the tiger and it is nice then it eats the tiger.\nFOL: all x. (Likes(x, tiger) & Nice(x) -> Eats(x, tiger))\nTEXT: If something eats the cow then it likes the squirrel.\nFOL: all x. (Eats(x, cow) -> Likes(x, squirrel))\nTEXT: If something visits the squirrel then the squirrel visits the cow.\nFOL: all x. (Visits(x, squirrel) -> Visits(squirrel, cow))\nTEXT: If the cow eats the tiger and the tiger visits the squirrel then the cow eats the squirrel.\nFOL: Eats(cow, tiger) & Visits(tiger, squirrel) -> Eats(cow, squirrel)\nTEXT: If something visits the tiger and it eats the tiger then it is blue.\nFOL: all x. (Visits(x, tiger) & Eats(x, tiger) -> Blue(x))\nTEXT: If something likes the squirrel then it visits the squirrel.\nFOL: all x. (Likes(x, squirrel) -> Visits(x, squirrel))\nTEXT: The cow eats the tiger.\nFOL: Eats(cow, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow eats the squirrel.\nFOL: Eats(cow, squirrel)\nTEXT: The squirrel eats the cow.\nFOL: Eats(squirrel, cow)\nTEXT: The tiger likes the cow.\nFOL: Likes(tiger, cow)\nTEXT: If something likes the tiger and it is nice then it eats the tiger.\nFOL: all x. ((Likes(x, tiger) & Nice(x)) -> Eats(x, tiger))\nTEXT: If something eats the cow then it likes the squirrel.\nFOL: all x. (Eats(x, cow) -> Likes(x, squirrel))\nTEXT: If something visits the squirrel then the squirrel visits the cow.\nFOL: all x. (Visits(x, squirrel) -> Visits(squirrel, cow))\nTEXT: If the cow eats the tiger and the tiger visits the squirrel then the cow eats the squirrel.\nFOL: (Eats(cow, tiger) & Visits(tiger, squirrel)) -> Eats(cow, squirrel)\nTEXT: If something visits the tiger and it eats the tiger then it is blue.\nFOL: all x. (Visits(x, tiger) & Eats(x, tiger) -> Blue(x))\nTEXT: If something likes the squirrel then it visits the squirrel.\nFOL: all x. (Likes(x, squirrel) -> Visits(x, squirrel))\nTEXT: The cow eats the tiger.\nFOL: Eats(cow, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow eats the squirrel.\nFOL: Eats(cow, squirrel)\n\nTEXT: The squirrel eats the cow.\nFOL: Eats(squirrel, cow)\n\nTEXT: The tiger likes the cow.\nFOL: Likes(tiger, cow)\n\nTEXT: If something likes the tiger and it is nice then it eats the tiger.\nFOL: all x. (Likes(x, tiger) & Nice(x) -> Eats(x, tiger))\n\nTEXT: If something eats the cow then it likes the squirrel.\nFOL: all x. (Eats(x, cow) -> Likes(x, squirrel))\n\nTEXT: If something visits the squirrel then the squirrel visits the cow.\nFOL: all x. (Visits(x, squirrel) -> Visits(squirrel, cow))\n\nTEXT: If the cow eats the tiger and the tiger visits the squirrel then the cow eats the squirrel.\nFOL: (Eats(cow, tiger) & Visits(tiger, squirrel)) -> Eats(cow, squirrel)\n\nTEXT: If something visits the tiger and it eats the tiger then it is blue.\nFOL: all x. (Visits(x, tiger) & Eats(x, tiger) -> Blue(x))\n\nTEXT: If something likes the squirrel then it visits the squirrel.\nFOL: all x. (Likes(x, squirrel) -> Visits(x, squirrel))\n\nTEXT: The cow eats the tiger.\nFOL: Eats(cow, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow eats the squirrel.\nFOL: Eats(cow, squirrel)\nTEXT: The squirrel eats the cow.\nFOL: Eats(squirrel, cow)\nTEXT: The tiger likes the cow.\nFOL: Likes(tiger, cow)\nTEXT: If something likes the tiger and it is nice then it eats the tiger.\nFOL: (Likes(x, tiger) & Nice(x)) -> Eats(x, tiger)\nTEXT: If something eats the cow then it likes the squirrel.\nFOL: Eats(x, cow) -> Likes(x, squirrel)\nTEXT: If something visits the squirrel then the squirrel visits the cow.\nFOL: Visits(x, squirrel) -> Visits(squirrel, cow)\nTEXT: If the cow eats the tiger and the tiger visits the squirrel then the cow eats the squirrel.\nFOL: (Eats(cow, tiger) & Visits(tiger, squirrel)) -> Eats(cow, squirrel)\nTEXT: If something visits the tiger and it eats the tiger then it is blue.\nFOL: (Visits(x, tiger) & Eats(x, tiger)) -> Blue(x)\nTEXT: If something likes the squirrel then it visits the squirrel.\nFOL: Likes(x, squirrel) -> Visits(x, squirrel)\nTEXT: The cow eats the tiger.\nFOL: Eats(cow, tiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 102,
  "responses": [
   "<EVALUATE>\nTEXT: The cow visits the lion.\nFOL: Visits(cow, lion)\nTEXT: The lion is kind.\nFOL: Kind(lion)\nTEXT: The lion visits the cow.\nFOL: Visits(lion, cow)\nTEXT: The rabbit eats the squirrel.\nFOL: Eats(rabbit, squirrel)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The rabbit visits the lion.\nFOL: Visits(rabbit, lion)\nTEXT: The squirrel is big.\nFOL: Big(squirrel)\nTEXT: The squirrel is green.\nFOL: Green(squirrel)\nTEXT: The squirrel is round.\nFOL: Round(squirrel)\nTEXT: If something needs the lion then it eats the squirrel.\nFOL: all x. (Needs(x, lion) -> Eats(x, squirrel))\nTEXT: If something eats the cow and the cow visits the rabbit then the cow needs the rabbit.\nFOL: all x. ((Eats(x, cow) & Visits(cow, rabbit)) -> Needs(x, rabbit))\nTEXT: If something eats the squirrel and it is big then the squirrel visits the lion.\nFOL: all x. ((Eats(x, squirrel) & Big(x)) -> Visits(squirrel, lion))\nTEXT: If something needs the squirrel then it is big.\nFOL: all x. (Needs(x, squirrel) -> Big(x))\nTEXT: If something needs the cow then it is nice.\nFOL: all x. (Needs(x, cow) -> Nice(x))\nTEXT: If something eats the lion and it eats the squirrel then it is green.\nFOL: all x. ((Eats(x, lion) & Eats(x, squirrel)) -> Green(x))\nTEXT: If something is round and nice then it needs the squirrel.\nFOL: all x. ((Round(x) & Nice(x)) -> Needs(x, squirrel))\nTEXT: If something eats the squirrel then it is nice.\nFOL: all x. (Eats(x, squirrel) -> Nice(x))\nTEXT: The rabbit needs the squirrel.\nFOL: Needs(rabbit, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow visits the lion.\nFOL: Visits(cow, lion)\nTEXT: The lion is kind.\nFOL: Kind(lion)\nTEXT: The lion visits the cow.\nFOL: Visits(lion, cow)\nTEXT: The rabbit eats the squirrel.\nFOL: Eats(rabbit, squirrel)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The rabbit visits the lion.\nFOL: Visits(rabbit, lion)\nTEXT: The squirrel is big.\nFOL: Big(squirrel)\nTEXT: The squirrel is green.\nFOL: Green(squirrel)\nTEXT: The squirrel is round.\nFOL: Round(squirrel)\nTEXT: If something needs the lion then it eats the squirrel.\nFOL: all x. (Needs(x, lion) -> Eats(x, squirrel))\nTEXT: If something eats the cow and the cow visits the rabbit then the cow needs the rabbit.\nFOL: all x. (Eats(x, cow) & Visits(cow, rabbit) -> Needs(x, rabbit))\nTEXT: If something eats the squirrel and it is big then the squirrel visits the lion.\nFOL: all x. (Eats(x, squirrel) & Big(x) -> Visits(squirrel, lion))\nTEXT: If something needs the squirrel then it is big.\nFOL: all x. (Needs(x, squirrel) -> Big(x))\nTEXT: If something needs the cow then it is nice.\nFOL: all x. (Needs(x, cow) -> Nice(x))\nTEXT: If something eats the lion and it eats the squirrel then it is green.\nFOL: all x. (Eats(x, lion) & Eats(x, squirrel) -> Green(x))\nTEXT: If something is round and nice then it needs the squirrel.\nFOL: all x. (Round(x) & Nice(x) -> Needs(x, squirrel))\nTEXT: If something eats the squirrel then it is nice.\nFOL: all x. (Eats(x, squirrel) -> Nice(x))\nTEXT: The rabbit needs the squirrel.\nFOL: Needs(rabbit, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow visits the lion.\nFOL: Visits(cow, lion)\nTEXT: The lion is kind.\nFOL: Kind(lion)\nTEXT: The lion visits the cow.\nFOL: Visits(lion, cow)\nTEXT: The rabbit eats the squirrel.\nFOL: Eats(rabbit, squirrel)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The rabbit visits the lion.\nFOL: Visits(rabbit, lion)\nTEXT: The squirrel is big.\nFOL: Big(squirrel)\nTEXT: The squirrel is green.\nFOL: Green(squirrel)\nTEXT: The squirrel is round.\nFOL: Round(squirrel)\nTEXT: If something needs the lion then it eats the squirrel.\nFOL: all x. (Needs(x, lion) -> Eats(x, squirrel))\nTEXT: If something eats the cow and the cow visits the rabbit then the cow needs the rabbit.\nFOL: all x. (Eats(x, cow) & Visits(cow, rabbit) -> Needs(x, rabbit))\nTEXT: If something eats the squirrel and it is big then the squirrel visits the lion.\nFOL: all x. (Eats(x, squirrel) & Big(x) -> Visits(squirrel, lion))\nTEXT: If something needs the squirrel then it is big.\nFOL: all x. (Needs(x, squirrel) -> Big(x))\nTEXT: If something needs the cow then it is nice.\nFOL: all x. (Needs(x, cow) -> Nice(x))\nTEXT: If something eats the lion and it eats the squirrel then it is green.\nFOL: all x. (Eats(x, lion) & Eats(x, squirrel) -> Green(x))\nTEXT: If something is round and nice then it needs the squirrel.\nFOL: all x. ((Round(x) & Nice(x)) -> Needs(x, squirrel))\nTEXT: If something eats the squirrel then it is nice.\nFOL: all x. (Eats(x, squirrel) -> Nice(x))\nTEXT: The rabbit needs the squirrel.\nFOL: Needs(rabbit, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow visits the lion.\nFOL: Visits(cow, lion)\nTEXT: The lion is kind.\nFOL: Kind(lion)\nTEXT: The lion visits the cow.\nFOL: Visits(lion, cow)\nTEXT: The rabbit eats the squirrel.\nFOL: Eats(rabbit, squirrel)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The rabbit visits the lion.\nFOL: Visits(rabbit, lion)\nTEXT: The squirrel is big.\nFOL: Big(squirrel)\nTEXT: The squirrel is green.\nFOL: Green(squirrel)\nTEXT: The squirrel is round.\nFOL: Round(squirrel)\nTEXT: If something needs the lion then it eats the squirrel.\nFOL: all x. (Needs(x, lion) -> Eats(x, squirrel))\nTEXT: If something eats the cow and the cow visits the rabbit then the cow needs the rabbit.\nFOL: all x. ((Eats(x, cow) & Visits(cow, rabbit)) -> Needs(x, rabbit))\nTEXT: If something eats the squirrel and it is big then the squirrel visits the lion.\nFOL: all x. ((Eats(x, squirrel) & Big(squirrel)) -> Visits(squirrel, lion))\nTEXT: If something needs the squirrel then it is big.\nFOL: all x. (Needs(x, squirrel) -> Big(x))\nTEXT: If something needs the cow then it is nice.\nFOL: all x. (Needs(x, cow) -> Nice(x))\nTEXT: If something eats the lion and it eats the squirrel then it is green.\nFOL: all x. ((Eats(x, lion) & Eats(x, squirrel)) -> Green(x))\nTEXT: If something is round and nice then it needs the squirrel.\nFOL: all x. ((Round(x) & Nice(x)) -> Needs(x, squirrel))\nTEXT: If something eats the squirrel then it is nice.\nFOL: all x. (Eats(x, squirrel) -> Nice(x))\nTEXT: The rabbit needs the squirrel.\nFOL: Needs(rabbit, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow visits the lion.\nFOL: Visits(cow, lion)\nTEXT: The lion is kind.\nFOL: Kind(lion)\nTEXT: The lion visits the cow.\nFOL: Visits(lion, cow)\nTEXT: The rabbit eats the squirrel.\nFOL: Eats(rabbit, squirrel)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The rabbit visits the lion.\nFOL: Visits(rabbit, lion)\nTEXT: The squirrel is big.\nFOL: Big(squirrel)\nTEXT: The squirrel is green.\nFOL: Green(squirrel)\nTEXT: The squirrel is round.\nFOL: Round(squirrel)\nTEXT: If something needs the lion then it eats the squirrel.\nFOL: all x. (Needs(x, lion) -> Eats(x, squirrel))\nTEXT: If something eats the cow and the cow visits the rabbit then the cow needs the rabbit.\nFOL: all x. ((Eats(x, cow) & Visits(cow, rabbit)) -> Needs(x, rabbit))\nTEXT: If something eats the squirrel and it is big then the squirrel visits the lion.\nFOL: all x. ((Eats(x, squirrel) & Big(x)) -> Visits(squirrel, lion))\nTEXT: If something needs the squirrel then it is big.\nFOL: all x. (Needs(x, squirrel) -> Big(x))\nTEXT: If something needs the cow then it is nice.\nFOL: all x. (Needs(x, cow) -> Nice(x))\nTEXT: If something eats the lion and it eats the squirrel then it is green.\nFOL: all x. ((Eats(x, lion) & Eats(x, squirrel)) -> Green(x))\nTEXT: If something is round and nice then it needs the squirrel.\nFOL: all x. (Round(x) & Nice(x) -> Needs(x, squirrel))\nTEXT: If something eats the squirrel then it is nice.\nFOL: all x. (Eats(x, squirrel) -> Nice(x))\nTEXT: The rabbit needs the squirrel.\nFOL: Needs(rabbit, squirrel)\n</EVALUATE>"
  ]
 },
 {
  "index": 103,
  "responses": [
   "<EVALUATE>\nTEXT: Even though Bob is big and rough he is sometimes round and kind.\nFOL: (Big(bob) & Rough(bob)) -> (Round(bob) | Kind(bob))\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: GotWetInRain(dave) -> Cold(dave)\nTEXT: He also looks green but big.\nFOL: (Green(he) & -Big(he))\nTEXT: Eric is somehow red and kind and also green.\nFOL: Red(eric) & Kind(eric) & Green(eric)\nTEXT: Gary is green and cold too.\nFOL: Green(gary) & Cold(gary)\nTEXT: A big, rough person who is green in color is definitely young aged.\nFOL: (Big(x) & Rough(x) & Green(x)) -> YoungAged(x)\nTEXT: Big, kind folks are green ones.\nFOL: (Big(x) & Kind(x)) -> Green(x)\nTEXT: A nice but rough person will also be green and cold.\nFOL: (Nice(x) & Rough(x)) -> (Green(x) & Cold(x))\nTEXT: A big round young person is often blue.\nFOL: (Big(x) & Round(x) & YoungAged(x)) -> Blue(x)\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: (Cold(x) & Rough(x) & Red(x)) -> Kind(x)\nTEXT: People who are young are also blue.\nFOL: all x. (YoungAged(x) -> Blue(x))\nTEXT: A person who is rough and young while being kind tends to be red.\nFOL: (Rough(x) & YoungAged(x) & Kind(x)) -> Red(x)\nTEXT: Gary is not kind.\nFOL: -Kind(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Even though Bob is big and rough he is sometimes round and kind.\nFOL: (Big(bob) & Rough(bob)) -> (Round(bob) | Kind(bob))\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: GotWetInRain(dave) -> Cold(dave)\nTEXT: He also looks green but big.\nFOL: (Green(he) & -Big(he))\nTEXT: Eric is somehow red and kind and also green.\nFOL: Red(eric) & Kind(eric) & Green(eric)\nTEXT: Gary is green and cold too.\nFOL: Green(gary) & Cold(gary)\nTEXT: A big, rough person who is green in color is definitely young aged.\nFOL: (Big(x) & Rough(x) & Green(x)) -> YoungAged(x)\nTEXT: Big, kind folks are green ones.\nFOL: (Big(x) & Kind(x)) -> Green(x)\nTEXT: A nice but rough person will also be green and cold.\nFOL: (Nice(x) & Rough(x)) -> (Green(x) & Cold(x))\nTEXT: A big round young person is often blue.\nFOL: (Big(x) & Round(x) & YoungAged(x)) -> Blue(x)\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: (Cold(x) & Rough(x) & Red(x)) -> Kind(x)\nTEXT: People who are young are also blue.\nFOL: YoungAged(x) -> Blue(x)\nTEXT: A person who is rough and young while being kind tends to be red.\nFOL: (Rough(x) & YoungAged(x) & Kind(x)) -> Red(x)\nTEXT: Gary is not kind.\nFOL: -Kind(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Even though Bob is big and rough he is sometimes round and kind.\nFOL: (Big(bob) & Rough(bob)) -> (Round(bob) | Kind(bob))\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: GotWetInRain(dave) -> Cold(dave)\nTEXT: He also looks green but big.\nFOL: (Green(he) & -Big(he)) | (-Green(he) & Big(he))\nTEXT: Eric is somehow red and kind and also green.\nFOL: Red(eric) & Kind(eric) & Green(eric)\nTEXT: Gary is green and cold too.\nFOL: Green(gary) & Cold(gary)\nTEXT: A big, rough person who is green in color is definitely young aged.\nFOL: (Big(x) & Rough(x) & Green(x)) -> YoungAged(x)\nTEXT: Big, kind folks are green ones.\nFOL: (Big(x) & Kind(x)) -> Green(x)\nTEXT: A nice but rough person will also be green and cold.\nFOL: (Nice(x) & Rough(x)) -> (Green(x) & Cold(x))\nTEXT: A big round young person is often blue.\nFOL: (Big(x) & Round(x) & YoungAged(x)) -> Blue(x)\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: (Cold(x) & Rough(x) & Red(x)) -> Kind(x)\nTEXT: People who are young are also blue.\nFOL: YoungAged(x) -> Blue(x)\nTEXT: A person who is rough and young while being kind tends to be red.\nFOL: (Rough(x) & YoungAged(x) & Kind(x)) -> Red(x)\nTEXT: Gary is not kind.\nFOL: -Kind(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Even though Bob is big and rough he is sometimes round and kind.\nFOL: (Big(bob) & Rough(bob)) -> (Round(bob) | Kind(bob))\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: GotWetInRain(dave) -> Cold(dave)\nTEXT: He also looks green but big.\nFOL: (Green(he) & -Big(he)) | (Big(he) & -Green(he))\nTEXT: Eric is somehow red and kind and also green.\nFOL: Red(eric) & Kind(eric) & Green(eric)\nTEXT: Gary is green and cold too.\nFOL: Green(gary) & Cold(gary)\nTEXT: A big, rough person who is green in color is definitely young aged.\nFOL: (Big(x) & Rough(x) & Green(x)) -> YoungAged(x)\nTEXT: Big, kind folks are green ones.\nFOL: (Big(x) & Kind(x)) -> Green(x)\nTEXT: A nice but rough person will also be green and cold.\nFOL: (Nice(x) & Rough(x)) -> (Green(x) & Cold(x))\nTEXT: A big round young person is often blue.\nFOL: (Big(x) & Round(x) & YoungAged(x)) -> Blue(x)\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: (Cold(x) & Rough(x) & Red(x)) -> Kind(x)\nTEXT: People who are young are also blue.\nFOL: YoungAged(x) -> Blue(x)\nTEXT: A person who is rough and young while being kind tends to be red.\nFOL: (Rough(x) & YoungAged(x) & Kind(x)) -> Red(x)\nTEXT: Gary is not kind.\nFOL: -Kind(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Even though Bob is big and rough he is sometimes round and kind.\nFOL: (Big(bob) & Rough(bob)) -> (Round(bob) | Kind(bob))\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: GotWetInRain(dave) -> Cold(dave)\nTEXT: He also looks green but big.\nFOL: (LooksGreen(_) & Big(_))\nTEXT: Eric is somehow red and kind and also green.\nFOL: Red(eric) & Kind(eric) & Green(eric)\nTEXT: Gary is green and cold too.\nFOL: Green(gary) & Cold(gary)\nTEXT: A big, rough person who is green in color is definitely young aged.\nFOL: (Big(_) & Rough(_) & Green(_)) -> YoungAged(_)\nTEXT: Big, kind folks are green ones.\nFOL: (Big(_) & Kind(_)) -> Green(_)\nTEXT: A nice but rough person will also be green and cold.\nFOL: (Nice(_) & Rough(_)) -> (Green(_) & Cold(_))\nTEXT: A big round young person is often blue.\nFOL: (Big(_) & Round(_) & YoungAged(_)) -> Blue(_)\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: (Cold(_) & Rough(_) & Red(_)) -> Kind(_)\nTEXT: People who are young are also blue.\nFOL: YoungAged(_) -> Blue(_)\nTEXT: A person who is rough and young while being kind tends to be red.\nFOL: (Rough(_) & YoungAged(_) & Kind(_)) -> Red(_)\nTEXT: Gary is not kind.\nFOL: -Kind(gary)\n</EVALUATE>"
  ]
 },
 {
  "index": 104,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is nice.\nFOL: Nice(bob)\nTEXT: Bob is quiet.\nFOL: Quiet(bob)\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is not nice.\nFOL: -Nice(dave)\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Erin is nice.\nFOL: Nice(erin)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: Erin is round.\nFOL: Round(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Harry is not big.\nFOL: -Big(harry)\nTEXT: Harry is furry.\nFOL: Furry(harry)\nTEXT: Harry is nice.\nFOL: Nice(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is red.\nFOL: Red(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: If someone is furry then they are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nTEXT: All round people are quiet.\nFOL: all x. (Round(x) -> Quiet(x))\nTEXT: All furry, quiet people are round.\nFOL: all x. ((Furry(x) & Quiet(x)) -> Round(x))\nTEXT: If Dave is big then Dave is furry.\nFOL: Big(dave) -> Furry(dave)\nTEXT: Round, smart people are nice.\nFOL: all x. ((Round(x) & Smart(x)) -> Nice(x))\nTEXT: Smart, quiet people are red.\nFOL: all x. ((Smart(x) & Quiet(x)) -> Red(x))\nTEXT: If someone is furry and not big then they are smart.\nFOL: all x. ((Furry(x) & -Big(x)) -> Smart(x))\nTEXT: If someone is nice and not round then they are smart.\nFOL: all x. ((Nice(x) & -Round(x)) -> Smart(x))\nTEXT: Dave is not quiet.\nFOL: -Quiet(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is nice.\nFOL: Nice(bob)\nTEXT: Bob is quiet.\nFOL: Quiet(bob)\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is not nice.\nFOL: -Nice(dave)\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Erin is nice.\nFOL: Nice(erin)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: Erin is round.\nFOL: Round(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Harry is not big.\nFOL: -Big(harry)\nTEXT: Harry is furry.\nFOL: Furry(harry)\nTEXT: Harry is nice.\nFOL: Nice(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is red.\nFOL: Red(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: If someone is furry then they are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nTEXT: All round people are quiet.\nFOL: all x. (Round(x) -> Quiet(x))\nTEXT: All furry, quiet people are round.\nFOL: all x. ((Furry(x) & Quiet(x)) -> Round(x))\nTEXT: If Dave is big then Dave is furry.\nFOL: Big(dave) -> Furry(dave)\nTEXT: Round, smart people are nice.\nFOL: all x. ((Round(x) & Smart(x)) -> Nice(x))\nTEXT: Smart, quiet people are red.\nFOL: all x. ((Smart(x) & Quiet(x)) -> Red(x))\nTEXT: If someone is furry and not big then they are smart.\nFOL: all x. ((Furry(x) & -Big(x)) -> Smart(x))\nTEXT: If someone is nice and not round then they are smart.\nFOL: all x. ((Nice(x) & -Round(x)) -> Smart(x))\nTEXT: Dave is not quiet.\nFOL: -Quiet(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is nice.\nFOL: Nice(bob)\nTEXT: Bob is quiet.\nFOL: Quiet(bob)\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is not nice.\nFOL: -Nice(dave)\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Erin is nice.\nFOL: Nice(erin)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: Erin is round.\nFOL: Round(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Harry is not big.\nFOL: -Big(harry)\nTEXT: Harry is furry.\nFOL: Furry(harry)\nTEXT: Harry is nice.\nFOL: Nice(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is red.\nFOL: Red(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: If someone is furry then they are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nTEXT: All round people are quiet.\nFOL: all x. (Round(x) -> Quiet(x))\nTEXT: All furry, quiet people are round.\nFOL: all x. (Furry(x) & Quiet(x) -> Round(x))\nTEXT: If Dave is big then Dave is furry.\nFOL: Big(dave) -> Furry(dave)\nTEXT: Round, smart people are nice.\nFOL: all x. (Round(x) & Smart(x) -> Nice(x))\nTEXT: Smart, quiet people are red.\nFOL: all x. (Smart(x) & Quiet(x) -> Red(x))\nTEXT: If someone is furry and not big then they are smart.\nFOL: all x. ((Furry(x) & -Big(x)) -> Smart(x))\nTEXT: If someone is nice and not round then they are smart.\nFOL: all x. ((Nice(x) & -Round(x)) -> Smart(x))\nTEXT: Dave is not quiet.\nFOL: -Quiet(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is nice.\nFOL: Nice(bob)\nTEXT: Bob is quiet.\nFOL: Quiet(bob)\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is not nice.\nFOL: -Nice(dave)\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Erin is nice.\nFOL: Nice(erin)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: Erin is round.\nFOL: Round(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Harry is not big.\nFOL: -Big(harry)\nTEXT: Harry is furry.\nFOL: Furry(harry)\nTEXT: Harry is nice.\nFOL: Nice(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is red.\nFOL: Red(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: If someone is furry then they are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nTEXT: All round people are quiet.\nFOL: all x. (Round(x) -> Quiet(x))\nTEXT: All furry, quiet people are round.\nFOL: all x. (Furry(x) & Quiet(x) -> Round(x))\nTEXT: If Dave is big then Dave is furry.\nFOL: Big(dave) -> Furry(dave)\nTEXT: Round, smart people are nice.\nFOL: all x. (Round(x) & Smart(x) -> Nice(x))\nTEXT: Smart, quiet people are red.\nFOL: all x. (Smart(x) & Quiet(x) -> Red(x))\nTEXT: If someone is furry and not big then they are smart.\nFOL: all x. ((Furry(x) & -Big(x)) -> Smart(x))\nTEXT: If someone is nice and not round then they are smart.\nFOL: all x. ((Nice(x) & -Round(x)) -> Smart(x))\nTEXT: Dave is not quiet.\nFOL: -Quiet(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is nice.\nFOL: Nice(bob)\nTEXT: Bob is quiet.\nFOL: Quiet(bob)\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is not nice.\nFOL: -Nice(dave)\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Erin is nice.\nFOL: Nice(erin)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: Erin is round.\nFOL: Round(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Harry is not big.\nFOL: -Big(harry)\nTEXT: Harry is furry.\nFOL: Furry(harry)\nTEXT: Harry is nice.\nFOL: Nice(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is red.\nFOL: Red(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: If someone is furry then they are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nTEXT: All round people are quiet.\nFOL: all x. (Round(x) -> Quiet(x))\nTEXT: All furry, quiet people are round.\nFOL: all x. ((Furry(x) & Quiet(x)) -> Round(x))\nTEXT: If Dave is big then Dave is furry.\nFOL: Big(dave) -> Furry(dave)\nTEXT: Round, smart people are nice.\nFOL: all x. (Round(x) & Smart(x) -> Nice(x))\nTEXT: Smart, quiet people are red.\nFOL: all x. (Smart(x) & Quiet(x) -> Red(x))\nTEXT: If someone is furry and not big then they are smart.\nFOL: all x. ((Furry(x) & -Big(x)) -> Smart(x))\nTEXT: If someone is nice and not round then they are smart.\nFOL: all x. ((Nice(x) & -Round(x)) -> Smart(x))\nTEXT: Dave is not quiet.\nFOL: -Quiet(dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 105,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: Chases(baldEagle, dog)\nTEXT: The bald eagle eats the squirrel.\nFOL: Eats(baldEagle, squirrel)\nTEXT: The bald eagle is young.\nFOL: Young(baldEagle)\nTEXT: The dog chases the bald eagle.\nFOL: Chases(dog, baldEagle)\nTEXT: The dog chases the squirrel.\nFOL: Chases(dog, squirrel)\nTEXT: The squirrel chases the dog.\nFOL: Chases(squirrel, dog)\nTEXT: The squirrel eats the bald eagle.\nFOL: Eats(squirrel, baldEagle)\nTEXT: The squirrel is nice.\nFOL: Nice(squirrel)\nTEXT: The squirrel is red.\nFOL: Red(squirrel)\nTEXT: The squirrel visits the bald eagle.\nFOL: Visits(squirrel, baldEagle)\nTEXT: If something chases the dog and it visits the dog then the dog visits the squirrel.\nFOL: (Chases(x, dog) & Visits(x, dog)) -> Visits(dog, squirrel)\nTEXT: If something is kind and it visits the dog then the dog is nice.\nFOL: (Kind(x) & Visits(x, dog)) -> Nice(dog)\nTEXT: If the squirrel is kind then the squirrel is nice.\nFOL: Kind(squirrel) -> Nice(squirrel)\nTEXT: If something is red then it is nice.\nFOL: Red(x) -> Nice(x)\nTEXT: If something visits the bald eagle then the bald eagle visits the squirrel.\nFOL: Visits(x, baldEagle) -> Visits(baldEagle, squirrel)\nTEXT: If something visits the dog then the dog chases the squirrel.\nFOL: Visits(x, dog) -> Chases(dog, squirrel)\nTEXT: If something chases the dog and the dog is young then it visits the dog.\nFOL: (Chases(x, dog) & Young(dog)) -> Visits(x, dog)\nTEXT: If something is kind then it visits the dog.\nFOL: Kind(x) -> Visits(x, dog)\nTEXT: The bald eagle does not visit the squirrel.\nFOL: -Visits(baldEagle, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: Chases(baldEagle, dog)\nTEXT: The bald eagle eats the squirrel.\nFOL: Eats(baldEagle, squirrel)\nTEXT: The bald eagle is young.\nFOL: Young(baldEagle)\nTEXT: The dog chases the bald eagle.\nFOL: Chases(dog, baldEagle)\nTEXT: The dog chases the squirrel.\nFOL: Chases(dog, squirrel)\nTEXT: The squirrel chases the dog.\nFOL: Chases(squirrel, dog)\nTEXT: The squirrel eats the bald eagle.\nFOL: Eats(squirrel, baldEagle)\nTEXT: The squirrel is nice.\nFOL: Nice(squirrel)\nTEXT: The squirrel is red.\nFOL: Red(squirrel)\nTEXT: The squirrel visits the bald eagle.\nFOL: Visits(squirrel, baldEagle)\nTEXT: If something chases the dog and it visits the dog then the dog visits the squirrel.\nFOL: all x. (Chases(x, dog) & Visits(x, dog) -> Visits(dog, squirrel))\nTEXT: If something is kind and it visits the dog then the dog is nice.\nFOL: all x. (Kind(x) & Visits(x, dog) -> Nice(dog))\nTEXT: If the squirrel is kind then the squirrel is nice.\nFOL: Kind(squirrel) -> Nice(squirrel)\nTEXT: If something is red then it is nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If something visits the bald eagle then the bald eagle visits the squirrel.\nFOL: all x. (Visits(x, baldEagle) -> Visits(baldEagle, squirrel))\nTEXT: If something visits the dog then the dog chases the squirrel.\nFOL: all x. (Visits(x, dog) -> Chases(dog, squirrel))\nTEXT: If something chases the dog and the dog is young then it visits the dog.\nFOL: all x. (Chases(x, dog) & Young(dog) -> Visits(x, dog))\nTEXT: If something is kind then it visits the dog.\nFOL: all x. (Kind(x) -> Visits(x, dog))\nTEXT: The bald eagle does not visit the squirrel.\nFOL: -Visits(baldEagle, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: Chase(baldEagle, dog)\nTEXT: The bald eagle eats the squirrel.\nFOL: Eat(baldEagle, squirrel)\nTEXT: The bald eagle is young.\nFOL: Young(baldEagle)\nTEXT: The dog chases the bald eagle.\nFOL: Chase(dog, baldEagle)\nTEXT: The dog chases the squirrel.\nFOL: Chase(dog, squirrel)\nTEXT: The squirrel chases the dog.\nFOL: Chase(squirrel, dog)\nTEXT: The squirrel eats the bald eagle.\nFOL: Eat(squirrel, baldEagle)\nTEXT: The squirrel is nice.\nFOL: Nice(squirrel)\nTEXT: The squirrel is red.\nFOL: Red(squirrel)\nTEXT: The squirrel visits the bald eagle.\nFOL: Visit(squirrel, baldEagle)\nTEXT: If something chases the dog and it visits the dog then the dog visits the squirrel.\nFOL: (Chase(x, dog) & Visit(x, dog)) -> Visit(dog, squirrel)\nTEXT: If something is kind and it visits the dog then the dog is nice.\nFOL: (Kind(x) & Visit(x, dog)) -> Nice(dog)\nTEXT: If the squirrel is kind then the squirrel is nice.\nFOL: Kind(squirrel) -> Nice(squirrel)\nTEXT: If something is red then it is nice.\nFOL: Red(x) -> Nice(x)\nTEXT: If something visits the bald eagle then the bald eagle visits the squirrel.\nFOL: Visit(x, baldEagle) -> Visit(baldEagle, squirrel)\nTEXT: If something visits the dog then the dog chases the squirrel.\nFOL: Visit(x, dog) -> Chase(dog, squirrel)\nTEXT: If something chases the dog and the dog is young then it visits the dog.\nFOL: (Chase(x, dog) & Young(dog)) -> Visit(x, dog)\nTEXT: If something is kind then it visits the dog.\nFOL: Kind(x) -> Visit(x, dog)\nTEXT: The bald eagle does not visit the squirrel.\nFOL: -Visit(baldEagle, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: Chases(baldEagle, dog)\nTEXT: The bald eagle eats the squirrel.\nFOL: Eats(baldEagle, squirrel)\nTEXT: The bald eagle is young.\nFOL: Young(baldEagle)\nTEXT: The dog chases the bald eagle.\nFOL: Chases(dog, baldEagle)\nTEXT: The dog chases the squirrel.\nFOL: Chases(dog, squirrel)\nTEXT: The squirrel chases the dog.\nFOL: Chases(squirrel, dog)\nTEXT: The squirrel eats the bald eagle.\nFOL: Eats(squirrel, baldEagle)\nTEXT: The squirrel is nice.\nFOL: Nice(squirrel)\nTEXT: The squirrel is red.\nFOL: Red(squirrel)\nTEXT: The squirrel visits the bald eagle.\nFOL: Visits(squirrel, baldEagle)\nTEXT: If something chases the dog and it visits the dog then the dog visits the squirrel.\nFOL: all x. ((Chases(x, dog) & Visits(x, dog)) -> Visits(dog, squirrel))\nTEXT: If something is kind and it visits the dog then the dog is nice.\nFOL: all x. ((Kind(x) & Visits(x, dog)) -> Nice(dog))\nTEXT: If the squirrel is kind then the squirrel is nice.\nFOL: Kind(squirrel) -> Nice(squirrel)\nTEXT: If something is red then it is nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If something visits the bald eagle then the bald eagle visits the squirrel.\nFOL: all x. (Visits(x, baldEagle) -> Visits(baldEagle, squirrel))\nTEXT: If something visits the dog then the dog chases the squirrel.\nFOL: all x. (Visits(x, dog) -> Chases(dog, squirrel))\nTEXT: If something chases the dog and the dog is young then it visits the dog.\nFOL: all x. ((Chases(x, dog) & Young(dog)) -> Visits(x, dog))\nTEXT: If something is kind then it visits the dog.\nFOL: all x. (Kind(x) -> Visits(x, dog))\nTEXT: The bald eagle does not visit the squirrel.\nFOL: -Visits(baldEagle, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: Chases(baldEagle, dog)\n\nTEXT: The bald eagle eats the squirrel.\nFOL: Eats(baldEagle, squirrel)\n\nTEXT: The bald eagle is young.\nFOL: Young(baldEagle)\n\nTEXT: The dog chases the bald eagle.\nFOL: Chases(dog, baldEagle)\n\nTEXT: The dog chases the squirrel.\nFOL: Chases(dog, squirrel)\n\nTEXT: The squirrel chases the dog.\nFOL: Chases(squirrel, dog)\n\nTEXT: The squirrel eats the bald eagle.\nFOL: Eats(squirrel, baldEagle)\n\nTEXT: The squirrel is nice.\nFOL: Nice(squirrel)\n\nTEXT: The squirrel is red.\nFOL: Red(squirrel)\n\nTEXT: The squirrel visits the bald eagle.\nFOL: Visits(squirrel, baldEagle)\n\nTEXT: If something chases the dog and it visits the dog then the dog visits the squirrel.\nFOL: (Chases(x, dog) & Visits(x, dog)) -> Visits(dog, squirrel)\n\nTEXT: If something is kind and it visits the dog then the dog is nice.\nFOL: (Kind(x) & Visits(x, dog)) -> Nice(dog)\n\nTEXT: If the squirrel is kind then the squirrel is nice.\nFOL: Kind(squirrel) -> Nice(squirrel)\n\nTEXT: If something is red then it is nice.\nFOL: Red(x) -> Nice(x)\n\nTEXT: If something visits the bald eagle then the bald eagle visits the squirrel.\nFOL: Visits(x, baldEagle) -> Visits(baldEagle, squirrel)\n\nTEXT: If something visits the dog then the dog chases the squirrel.\nFOL: Visits(x, dog) -> Chases(dog, squirrel)\n\nTEXT: If something chases the dog and the dog is young then it visits the dog.\nFOL: (Chases(x, dog) & Young(dog)) -> Visits(x, dog)\n\nTEXT: If something is kind then it visits the dog.\nFOL: Kind(x) -> Visits(x, dog)\n\nTEXT: The bald eagle does not visit the squirrel.\nFOL: -Visits(baldEagle, squirrel)\n</EVALUATE>"
  ]
 },
 {
  "index": 106,
  "responses": [
   "<EVALUATE>\nTEXT: The cat eats the cow.\nFOL: Eats(cat, cow)\nTEXT: The cow chases the cat.\nFOL: Chases(cow, cat)\nTEXT: The cow is blue.\nFOL: Blue(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow visits the cat.\nFOL: Visits(cow, cat)\nTEXT: The lion visits the cat.\nFOL: Visits(lion, cat)\nTEXT: The lion visits the cow.\nFOL: Visits(lion, cow)\nTEXT: If the lion chases the cat and the cat eats the lion then the cat visits the cow.\nFOL: (Chases(lion, cat) & Eats(cat, lion) -> Visits(cat, cow))\nTEXT: If someone visits the lion then they visit the cow.\nFOL: all x. (Visits(x, lion) -> Visits(x, cow))\nTEXT: If someone eats the cow and the cow chases the cat then they visit the lion.\nFOL: all x. ((Eats(x, cow) & Chases(cow, cat)) -> Visits(x, lion))\nTEXT: If someone visits the cow and the cow visits the cat then they chase the cow.\nFOL: all x. ((Visits(x, cow) & Visits(cow, cat)) -> Chases(x, cow))\nTEXT: If someone chases the lion then the lion eats the cat.\nFOL: all x. (Chases(x, lion) -> Eats(lion, cat))\nTEXT: If someone visits the lion and the lion chases the cow then they are green.\nFOL: all x. ((Visits(x, lion) & Chases(lion, cow)) -> Green(x))\nTEXT: The cow is rough.\nFOL: Rough(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the cow.\nFOL: Eat(cat, cow)\nTEXT: The cow chases the cat.\nFOL: Chase(cow, cat)\nTEXT: The cow is blue.\nFOL: Blue(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow visits the cat.\nFOL: Visit(cow, cat)\nTEXT: The lion visits the cat.\nFOL: Visit(lion, cat)\nTEXT: The lion visits the cow.\nFOL: Visit(lion, cow)\nTEXT: If the lion chases the cat and the cat eats the lion then the cat visits the cow.\nFOL: (Chase(lion, cat) & Eat(cat, lion) -> Visit(cat, cow))\nTEXT: If someone visits the lion then they visit the cow.\nFOL: all x. (Visit(x, lion) -> Visit(x, cow))\nTEXT: If someone eats the cow and the cow chases the cat then they visit the lion.\nFOL: all x. ((Eat(x, cow) & Chase(cow, cat)) -> Visit(x, lion))\nTEXT: If someone visits the cow and the cow visits the cat then they chase the cow.\nFOL: all x. ((Visit(x, cow) & Visit(cow, cat)) -> Chase(x, cow))\nTEXT: If someone chases the lion then the lion eats the cat.\nFOL: all x. (Chase(x, lion) -> Eat(lion, cat))\nTEXT: If someone visits the lion and the lion chases the cow then they are green.\nFOL: all x. ((Visit(x, lion) & Chase(lion, cow)) -> Green(x))\nTEXT: The cow is rough.\nFOL: Rough(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the cow.\nFOL: Eats(cat, cow)\nTEXT: The cow chases the cat.\nFOL: Chases(cow, cat)\nTEXT: The cow is blue.\nFOL: Blue(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow visits the cat.\nFOL: Visits(cow, cat)\nTEXT: The lion visits the cat.\nFOL: Visits(lion, cat)\nTEXT: The lion visits the cow.\nFOL: Visits(lion, cow)\nTEXT: If the lion chases the cat and the cat eats the lion then the cat visits the cow.\nFOL: (Chases(lion, cat) & Eats(cat, lion)) -> Visits(cat, cow)\nTEXT: If someone visits the lion then they visit the cow.\nFOL: all x. (Visits(x, lion) -> Visits(x, cow))\nTEXT: If someone eats the cow and the cow chases the cat then they visit the lion.\nFOL: all x. ((Eats(x, cow) & Chases(cow, cat)) -> Visits(x, lion))\nTEXT: If someone visits the cow and the cow visits the cat then they chase the cow.\nFOL: all x. ((Visits(x, cow) & Visits(cow, cat)) -> Chases(x, cow))\nTEXT: If someone chases the lion then the lion eats the cat.\nFOL: all x. (Chases(x, lion) -> Eats(lion, cat))\nTEXT: If someone visits the lion and the lion chases the cow then they are green.\nFOL: all x. ((Visits(x, lion) & Chases(lion, cow)) -> Green(x))\nTEXT: The cow is rough.\nFOL: Rough(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the cow.\nFOL: Eats(cat, cow)\nTEXT: The cow chases the cat.\nFOL: Chases(cow, cat)\nTEXT: The cow is blue.\nFOL: Blue(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow visits the cat.\nFOL: Visits(cow, cat)\nTEXT: The lion visits the cat.\nFOL: Visits(lion, cat)\nTEXT: The lion visits the cow.\nFOL: Visits(lion, cow)\nTEXT: If the lion chases the cat and the cat eats the lion then the cat visits the cow.\nFOL: (Chases(lion, cat) & Eats(cat, lion) -> Visits(cat, cow))\nTEXT: If someone visits the lion then they visit the cow.\nFOL: all x. (Visits(x, lion) -> Visits(x, cow))\nTEXT: If someone eats the cow and the cow chases the cat then they visit the lion.\nFOL: all x. (Eats(x, cow) & Chases(cow, cat) -> Visits(x, lion))\nTEXT: If someone visits the cow and the cow visits the cat then they chase the cow.\nFOL: all x. (Visits(x, cow) & Visits(cow, cat) -> Chases(x, cow))\nTEXT: If someone chases the lion then the lion eats the cat.\nFOL: all x. (Chases(x, lion) -> Eats(lion, cat))\nTEXT: If someone visits the lion and the lion chases the cow then they are green.\nFOL: all x. (Visits(x, lion) & Chases(lion, cow) -> Green(x))\nTEXT: The cow is rough.\nFOL: Rough(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the cow.\nFOL: Eats(cat, cow)\nTEXT: The cow chases the cat.\nFOL: Chases(cow, cat)\nTEXT: The cow is blue.\nFOL: Color(cow, blue)\nTEXT: The cow is red.\nFOL: Color(cow, red)\nTEXT: The cow visits the cat.\nFOL: Visits(cow, cat)\nTEXT: The lion visits the cat.\nFOL: Visits(lion, cat)\nTEXT: The lion visits the cow.\nFOL: Visits(lion, cow)\nTEXT: If the lion chases the cat and the cat eats the lion then the cat visits the cow.\nFOL: (Chases(lion, cat) & Eats(cat, lion)) -> Visits(cat, cow)\nTEXT: If someone visits the lion then they visit the cow.\nFOL: all x. (Visits(x, lion) -> Visits(x, cow))\nTEXT: If someone eats the cow and the cow chases the cat then they visit the lion.\nFOL: all x. ((Eats(x, cow) & Chases(cow, cat)) -> Visits(x, lion))\nTEXT: If someone visits the cow and the cow visits the cat then they chase the cow.\nFOL: all x. ((Visits(x, cow) & Visits(cow, cat)) -> Chases(x, cow))\nTEXT: If someone chases the lion then the lion eats the cat.\nFOL: all x. (Chases(x, lion) -> Eats(lion, cat))\nTEXT: If someone visits the lion and the lion chases the cow then they are green.\nFOL: all x. ((Visits(x, lion) & Chases(lion, cow)) -> Green(x))\nTEXT: The cow is rough.\nFOL: Texture(cow, rough)\n</EVALUATE>"
  ]
 },
 {
  "index": 107,
  "responses": [
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: Nice(bear)\nTEXT: The mouse needs the tiger.\nFOL: Needs(mouse, tiger)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (Needs(x, tiger) -> Eats(x, tiger))\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x. ((Green(x) & Chases(x, rabbit)) -> Chases(rabbit, tiger))\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x. ((Nice(x) & Chases(x, rabbit)) -> Eats(rabbit, mouse))\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x. (Chases(x, bear) -> Eats(bear, rabbit))\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x. (Chases(x, bear) -> Chases(x, mouse))\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: (Rough(bear) & Needs(bear, rabbit)) -> Green(rabbit)\nTEXT: If something is kind then it needs the mouse.\nFOL: all x. (Kind(x) -> Needs(x, mouse))\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x. (Eats(x, tiger) -> Chases(x, bear))\nTEXT: The mouse does not chase the bear.\nFOL: -Chases(mouse, bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: Nice(bear)\nTEXT: The mouse needs the tiger.\nFOL: Needs(mouse, tiger)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (Needs(x, tiger) -> Eats(x, tiger))\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x. ((Green(x) & Chases(x, rabbit)) -> Chases(rabbit, tiger))\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x. ((Nice(x) & Chases(x, rabbit)) -> Eats(rabbit, mouse))\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x. (Chases(x, bear) -> Eats(bear, rabbit))\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x. (Chases(x, bear) -> Chases(x, mouse))\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: Rough(bear) & Needs(bear, rabbit) -> Green(rabbit)\nTEXT: If something is kind then it needs the mouse.\nFOL: all x. (Kind(x) -> Needs(x, mouse))\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x. (Eats(x, tiger) -> Chases(x, bear))\nTEXT: The mouse does not chase the bear.\nFOL: -Chases(mouse, bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: Nice(bear)\nTEXT: The mouse needs the tiger.\nFOL: Needs(mouse, tiger)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (Needs(x, tiger) -> Eats(x, tiger))\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x. ((Green(x) & Chases(x, rabbit)) -> Chases(rabbit, tiger))\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x. ((Nice(x) & Chases(x, rabbit)) -> Eats(rabbit, mouse))\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x. (Chases(x, bear) -> Eats(bear, rabbit))\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x. (Chases(x, bear) -> Chases(x, mouse))\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: all x. ((Rough(bear) & Needs(bear, rabbit)) -> Green(rabbit))\nTEXT: If something is kind then it needs the mouse.\nFOL: all x. (Kind(x) -> Needs(x, mouse))\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x. (Eats(x, tiger) -> Chases(x, bear))\nTEXT: The mouse does not chase the bear.\nFOL: -Chases(mouse, bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: Nice(bear)\nTEXT: The mouse needs the tiger.\nFOL: Needs(mouse, tiger)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (Needs(x, tiger) -> Eats(x, tiger))\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x. (Green(x) & Chases(x, rabbit) -> Chases(rabbit, tiger))\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x. (Nice(x) & Chases(x, rabbit) -> Eats(rabbit, mouse))\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x. (Chases(x, bear) -> Eats(bear, rabbit))\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x. (Chases(x, bear) -> Chases(x, mouse))\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: (Rough(bear) & Needs(bear, rabbit)) -> Green(rabbit)\nTEXT: If something is kind then it needs the mouse.\nFOL: all x. (Kind(x) -> Needs(x, mouse))\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x. (Eats(x, tiger) -> Chases(x, bear))\nTEXT: The mouse does not chase the bear.\nFOL: -Chases(mouse, bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: Nice(bear)\n\nTEXT: The mouse needs the tiger.\nFOL: Needs(mouse, tiger)\n\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\n\nTEXT: The tiger is green.\nFOL: Green(tiger)\n\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (Needs(x, tiger) -> Eats(x, tiger))\n\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x. ((Green(x) & Chases(x, rabbit)) -> Chases(rabbit, tiger))\n\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x. ((Nice(x) & Chases(x, rabbit)) -> Eats(rabbit, mouse))\n\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x. (Chases(x, bear) -> Eats(bear, rabbit))\n\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x. (Chases(x, bear) -> Chases(x, mouse))\n\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: (Rough(bear) & Needs(bear, rabbit)) -> Green(rabbit)\n\nTEXT: If something is kind then it needs the mouse.\nFOL: all x. (Kind(x) -> Needs(x, mouse))\n\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x. (Eats(x, tiger) -> Chases(x, bear))\n\nTEXT: The mouse does not chase the bear.\nFOL: -Chases(mouse, bear)\n</EVALUATE>"
  ]
 },
 {
  "index": 108,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: Chases(baldEagle, dog)\nTEXT: The dog chases the squirrel.\nFOL: Chases(dog, squirrel)\nTEXT: The squirrel is rough.\nFOL: Rough(squirrel)\nTEXT: If something sees the squirrel then the squirrel sees the dog.\nFOL: all x. (Sees(x, squirrel) -> Sees(squirrel, dog))\nTEXT: If something sees the squirrel then the squirrel does not need the dog.\nFOL: all x. (Sees(x, squirrel) -> -Needs(squirrel, dog))\nTEXT: If something is nice then it does not see the bald eagle.\nFOL: all x. (Nice(x) -> -Sees(x, baldEagle))\nTEXT: If something needs the bald eagle and the bald eagle needs the squirrel then it needs the squirrel.\nFOL: all x. ((Needs(x, baldEagle) & Needs(baldEagle, squirrel)) -> Needs(x, squirrel))\nTEXT: If something needs the squirrel then the squirrel chases the bald eagle.\nFOL: all x. (Needs(x, squirrel) -> Chases(squirrel, baldEagle))\nTEXT: If something chases the bald eagle then the bald eagle is cold.\nFOL: all x. (Chases(x, baldEagle) -> Cold(baldEagle))\nTEXT: If the dog chases the squirrel then the dog needs the squirrel.\nFOL: (Chases(dog, squirrel) -> Needs(dog, squirrel))\nTEXT: If something is kind and not nice then it chases the squirrel.\nFOL: all x. ((Kind(x) & -Nice(x)) -> Chases(x, squirrel))\nTEXT: The dog chases the squirrel.\nFOL: Chases(dog, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: Chases(baldEagle, dog)\nTEXT: The dog chases the squirrel.\nFOL: Chases(dog, squirrel)\nTEXT: The squirrel is rough.\nFOL: Rough(squirrel)\nTEXT: If something sees the squirrel then the squirrel sees the dog.\nFOL: all x. (Sees(x, squirrel) -> Sees(squirrel, dog))\nTEXT: If something sees the squirrel then the squirrel does not need the dog.\nFOL: all x. (Sees(x, squirrel) -> -Needs(squirrel, dog))\nTEXT: If something is nice then it does not see the bald eagle.\nFOL: all x. (Nice(x) -> -Sees(x, baldEagle))\nTEXT: If something needs the bald eagle and the bald eagle needs the squirrel then it needs the squirrel.\nFOL: all x. ((Needs(x, baldEagle) & Needs(baldEagle, squirrel)) -> Needs(x, squirrel))\nTEXT: If something needs the squirrel then the squirrel chases the bald eagle.\nFOL: all x. (Needs(x, squirrel) -> Chases(squirrel, baldEagle))\nTEXT: If something chases the bald eagle then the bald eagle is cold.\nFOL: all x. (Chases(x, baldEagle) -> Cold(baldEagle))\nTEXT: If the dog chases the squirrel then the dog needs the squirrel.\nFOL: Chases(dog, squirrel) -> Needs(dog, squirrel)\nTEXT: If something is kind and not nice then it chases the squirrel.\nFOL: all x. (Kind(x) & -Nice(x) -> Chases(x, squirrel))\nTEXT: The dog chases the squirrel.\nFOL: Chases(dog, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: Chases(baldEagle, dog)\nTEXT: The dog chases the squirrel.\nFOL: Chases(dog, squirrel)\nTEXT: The squirrel is rough.\nFOL: Rough(squirrel)\nTEXT: If something sees the squirrel then the squirrel sees the dog.\nFOL: all x. (Sees(x, squirrel) -> Sees(squirrel, dog))\nTEXT: If something sees the squirrel then the squirrel does not need the dog.\nFOL: all x. (Sees(x, squirrel) -> -Needs(squirrel, dog))\nTEXT: If something is nice then it does not see the bald eagle.\nFOL: all x. (Nice(x) -> -Sees(x, baldEagle))\nTEXT: If something needs the bald eagle and the bald eagle needs the squirrel then it needs the squirrel.\nFOL: all x. ((Needs(x, baldEagle) & Needs(baldEagle, squirrel)) -> Needs(x, squirrel))\nTEXT: If something needs the squirrel then the squirrel chases the bald eagle.\nFOL: all x. (Needs(x, squirrel) -> Chases(squirrel, baldEagle))\nTEXT: If something chases the bald eagle then the bald eagle is cold.\nFOL: all x. (Chases(x, baldEagle) -> Cold(baldEagle))\nTEXT: If the dog chases the squirrel then the dog needs the squirrel.\nFOL: Chases(dog, squirrel) -> Needs(dog, squirrel)\nTEXT: If something is kind and not nice then it chases the squirrel.\nFOL: all x. ((Kind(x) & -Nice(x)) -> Chases(x, squirrel))\nTEXT: The dog chases the squirrel.\nFOL: Chases(dog, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: Chases(baldEagle, dog)\nTEXT: The dog chases the squirrel.\nFOL: Chases(dog, squirrel)\nTEXT: The squirrel is rough.\nFOL: Rough(squirrel)\nTEXT: If something sees the squirrel then the squirrel sees the dog.\nFOL: all x. (Sees(x, squirrel) -> Sees(squirrel, dog))\nTEXT: If something sees the squirrel then the squirrel does not need the dog.\nFOL: all x. (Sees(x, squirrel) -> -Needs(squirrel, dog))\nTEXT: If something is nice then it does not see the bald eagle.\nFOL: all x. (Nice(x) -> -Sees(x, baldEagle))\nTEXT: If something needs the bald eagle and the bald eagle needs the squirrel then it needs the squirrel.\nFOL: all x. (Needs(x, baldEagle) & Needs(baldEagle, squirrel) -> Needs(x, squirrel))\nTEXT: If something needs the squirrel then the squirrel chases the bald eagle.\nFOL: all x. (Needs(x, squirrel) -> Chases(squirrel, baldEagle))\nTEXT: If something chases the bald eagle then the bald eagle is cold.\nFOL: all x. (Chases(x, baldEagle) -> Cold(baldEagle))\nTEXT: If the dog chases the squirrel then the dog needs the squirrel.\nFOL: Chases(dog, squirrel) -> Needs(dog, squirrel)\nTEXT: If something is kind and not nice then it chases the squirrel.\nFOL: all x. (Kind(x) & -Nice(x) -> Chases(x, squirrel))\nTEXT: The dog chases the squirrel.\nFOL: Chases(dog, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: Chases(baldEagle, dog)\nTEXT: The dog chases the squirrel.\nFOL: Chases(dog, squirrel)\nTEXT: The squirrel is rough.\nFOL: Rough(squirrel)\nTEXT: If something sees the squirrel then the squirrel sees the dog.\nFOL: all x. (Sees(x, squirrel) -> Sees(squirrel, dog))\nTEXT: If something sees the squirrel then the squirrel does not need the dog.\nFOL: all x. (Sees(x, squirrel) -> -Needs(squirrel, dog))\nTEXT: If something is nice then it does not see the bald eagle.\nFOL: all x. (Nice(x) -> -Sees(x, baldEagle))\nTEXT: If something needs the bald eagle and the bald eagle needs the squirrel then it needs the squirrel.\nFOL: all x. ((Needs(x, baldEagle) & Needs(baldEagle, squirrel)) -> Needs(x, squirrel))\nTEXT: If something needs the squirrel then the squirrel chases the bald eagle.\nFOL: all x. (Needs(x, squirrel) -> Chases(squirrel, baldEagle))\nTEXT: If something chases the bald eagle then the bald eagle is cold.\nFOL: all x. (Chases(x, baldEagle) -> Cold(baldEagle))\nTEXT: If the dog chases the squirrel then the dog needs the squirrel.\nFOL: (Chases(dog, squirrel) -> Needs(dog, squirrel))\nTEXT: If something is kind and not nice then it chases the squirrel.\nFOL: all x. (Kind(x) & -Nice(x) -> Chases(x, squirrel))\nTEXT: The dog chases the squirrel.\nFOL: Chases(dog, squirrel)\n</EVALUATE>"
  ]
 },
 {
  "index": 109,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is not green.\nFOL: -Green(bob)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is not smart.\nFOL: -Smart(bob)\nTEXT: Charlie is not rough.\nFOL: -Rough(charlie)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Erin is big.\nFOL: Big(erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(erin)\nTEXT: If someone is big and not red then they are smart.\nFOL: (Big(x) & -Red(x)) -> Smart(x)\nTEXT: Cold, quiet people are not green.\nFOL: (Cold(x) & Quiet(x)) -> -Green(x)\nTEXT: If someone is big and quiet then they are green.\nFOL: (Big(x) & Quiet(x)) -> Green(x)\nTEXT: If Erin is green and Erin is rough then Erin is quiet.\nFOL: (Green(erin) & Rough(erin)) -> Quiet(erin)\nTEXT: If someone is cold and big then they are not quiet.\nFOL: (Cold(x) & Big(x)) -> -Quiet(x)\nTEXT: If someone is big then they are rough.\nFOL: Big(x) -> Rough(x)\nTEXT: If someone is rough then they are not cold.\nFOL: Rough(x) -> -Cold(x)\nTEXT: Red people are big.\nFOL: Red(x) -> Big(x)\nTEXT: Erin is not smart.\nFOL: -Smart(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is not green.\nFOL: -Green(bob)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is not smart.\nFOL: -Smart(bob)\nTEXT: Charlie is not rough.\nFOL: -Rough(charlie)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Erin is big.\nFOL: Big(erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(erin)\nTEXT: If someone is big and not red then they are smart.\nFOL: all x. (Big(x) & -Red(x) -> Smart(x))\nTEXT: Cold, quiet people are not green.\nFOL: all x. (Cold(x) & Quiet(x) -> -Green(x))\nTEXT: If someone is big and quiet then they are green.\nFOL: all x. (Big(x) & Quiet(x) -> Green(x))\nTEXT: If Erin is green and Erin is rough then Erin is quiet.\nFOL: (Green(erin) & Rough(erin)) -> Quiet(erin)\nTEXT: If someone is cold and big then they are not quiet.\nFOL: all x. (Cold(x) & Big(x) -> -Quiet(x))\nTEXT: If someone is big then they are rough.\nFOL: all x. (Big(x) -> Rough(x))\nTEXT: If someone is rough then they are not cold.\nFOL: all x. (Rough(x) -> -Cold(x))\nTEXT: Red people are big.\nFOL: all x. (Red(x) -> Big(x))\nTEXT: Erin is not smart.\nFOL: -Smart(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is not green.\nFOL: -Green(bob)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is not smart.\nFOL: -Smart(bob)\nTEXT: Charlie is not rough.\nFOL: -Rough(charlie)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Erin is big.\nFOL: Big(erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(erin)\nTEXT: If someone is big and not red then they are smart.\nFOL: all x. (Big(x) & -Red(x) -> Smart(x))\nTEXT: Cold, quiet people are not green.\nFOL: all x. ((Cold(x) & Quiet(x)) -> -Green(x))\nTEXT: If someone is big and quiet then they are green.\nFOL: all x. (Big(x) & Quiet(x) -> Green(x))\nTEXT: If Erin is green and Erin is rough then Erin is quiet.\nFOL: (Green(erin) & Rough(erin)) -> Quiet(erin)\nTEXT: If someone is cold and big then they are not quiet.\nFOL: all x. (Cold(x) & Big(x) -> -Quiet(x))\nTEXT: If someone is big then they are rough.\nFOL: all x. (Big(x) -> Rough(x))\nTEXT: If someone is rough then they are not cold.\nFOL: all x. (Rough(x) -> -Cold(x))\nTEXT: Red people are big.\nFOL: all x. (Red(x) -> Big(x))\nTEXT: Erin is not smart.\nFOL: -Smart(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is not green.\nFOL: -Green(bob)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is not smart.\nFOL: -Smart(bob)\nTEXT: Charlie is not rough.\nFOL: -Rough(charlie)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Erin is big.\nFOL: Big(erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(erin)\nTEXT: If someone is big and not red then they are smart.\nFOL: all x. ((Big(x) & -Red(x)) -> Smart(x))\nTEXT: Cold, quiet people are not green.\nFOL: all x. ((Cold(x) & Quiet(x)) -> -Green(x))\nTEXT: If someone is big and quiet then they are green.\nFOL: all x. ((Big(x) & Quiet(x)) -> Green(x))\nTEXT: If Erin is green and Erin is rough then Erin is quiet.\nFOL: (Green(erin) & Rough(erin)) -> Quiet(erin)\nTEXT: If someone is cold and big then they are not quiet.\nFOL: all x. (Cold(x) & Big(x) -> -Quiet(x))\nTEXT: If someone is big then they are rough.\nFOL: all x. (Big(x) -> Rough(x))\nTEXT: If someone is rough then they are not cold.\nFOL: all x. (Rough(x) -> -Cold(x))\nTEXT: Red people are big.\nFOL: all x. (Red(x) -> Big(x))\nTEXT: Erin is not smart.\nFOL: -Smart(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is not green.\nFOL: -Green(bob)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is not smart.\nFOL: -Smart(bob)\nTEXT: Charlie is not rough.\nFOL: -Rough(charlie)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Erin is big.\nFOL: Big(erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(erin)\nTEXT: If someone is big and not red then they are smart.\nFOL: all x. ((Big(x) & -Red(x)) -> Smart(x))\nTEXT: Cold, quiet people are not green.\nFOL: all x. ((Cold(x) & Quiet(x)) -> -Green(x))\nTEXT: If someone is big and quiet then they are green.\nFOL: all x. ((Big(x) & Quiet(x)) -> Green(x))\nTEXT: If Erin is green and Erin is rough then Erin is quiet.\nFOL: (Green(erin) & Rough(erin)) -> Quiet(erin)\nTEXT: If someone is cold and big then they are not quiet.\nFOL: all x. ((Cold(x) & Big(x)) -> -Quiet(x))\nTEXT: If someone is big then they are rough.\nFOL: all x. (Big(x) -> Rough(x))\nTEXT: If someone is rough then they are not cold.\nFOL: all x. (Rough(x) -> -Cold(x))\nTEXT: Red people are big.\nFOL: all x. (Red(x) -> Big(x))\nTEXT: Erin is not smart.\nFOL: -Smart(erin)\n</EVALUATE>"
  ]
 },
 {
  "index": 110,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is red.\nFOL: Red(dave)\nTEXT: Dave is round.\nFOL: Round(dave)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\nTEXT: Erin is rough.\nFOL: Rough(erin)\nTEXT: Erin is round.\nFOL: Round(erin)\nTEXT: Erin is young.\nFOL: Young(erin)\nTEXT: Fiona is red.\nFOL: Red(fiona)\nTEXT: Fiona is rough.\nFOL: Rough(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Gary is blue.\nFOL: Blue(gary)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: If someone is red and round then they are rough.\nFOL: all x. (Red(x) & Round(x) -> Rough(x))\nTEXT: All smart people are round.\nFOL: all x. (Smart(x) -> Round(x))\nTEXT: If Erin is young then Erin is rough.\nFOL: (Young(erin) -> Rough(erin))\nTEXT: Young, red people are quiet.\nFOL: all x. (Young(x) & Red(x) -> Quiet(x))\nTEXT: All blue, smart people are rough.\nFOL: all x. (Blue(x) & Smart(x) -> Rough(x))\nTEXT: Round people are young.\nFOL: all x. (Round(x) -> Young(x))\nTEXT: Dave is smart.\nFOL: Smart(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is red.\nFOL: Red(dave)\nTEXT: Dave is round.\nFOL: Round(dave)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\nTEXT: Erin is rough.\nFOL: Rough(erin)\nTEXT: Erin is round.\nFOL: Round(erin)\nTEXT: Erin is young.\nFOL: Young(erin)\nTEXT: Fiona is red.\nFOL: Red(fiona)\nTEXT: Fiona is rough.\nFOL: Rough(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Gary is blue.\nFOL: Blue(gary)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: If someone is red and round then they are rough.\nFOL: (Red(x) & Round(x) -> Rough(x))\nTEXT: All smart people are round.\nFOL: all x. (Smart(x) -> Round(x))\nTEXT: If Erin is young then Erin is rough.\nFOL: (Young(erin) -> Rough(erin))\nTEXT: Young, red people are quiet.\nFOL: all x. (Young(x) & Red(x) -> Quiet(x))\nTEXT: All blue, smart people are rough.\nFOL: all x. (Blue(x) & Smart(x) -> Rough(x))\nTEXT: Round people are young.\nFOL: all x. (Round(x) -> Young(x))\nTEXT: Dave is smart.\nFOL: Smart(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is red.\nFOL: Red(dave)\nTEXT: Dave is round.\nFOL: Round(dave)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\nTEXT: Erin is rough.\nFOL: Rough(erin)\nTEXT: Erin is round.\nFOL: Round(erin)\nTEXT: Erin is young.\nFOL: Young(erin)\nTEXT: Fiona is red.\nFOL: Red(fiona)\nTEXT: Fiona is rough.\nFOL: Rough(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Gary is blue.\nFOL: Blue(gary)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: If someone is red and round then they are rough.\nFOL: all x. (Red(x) & Round(x) -> Rough(x))\nTEXT: All smart people are round.\nFOL: all x. (Smart(x) -> Round(x))\nTEXT: If Erin is young then Erin is rough.\nFOL: all x. (Young(x) -> Rough(x))\nTEXT: Young, red people are quiet.\nFOL: all x. (Young(x) & Red(x) -> Quiet(x))\nTEXT: All blue, smart people are rough.\nFOL: all x. (Blue(x) & Smart(x) -> Rough(x))\nTEXT: Round people are young.\nFOL: all x. (Round(x) -> Young(x))\nTEXT: Dave is smart.\nFOL: Smart(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is red.\nFOL: Red(dave)\nTEXT: Dave is round.\nFOL: Round(dave)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\nTEXT: Erin is rough.\nFOL: Rough(erin)\nTEXT: Erin is round.\nFOL: Round(erin)\nTEXT: Erin is young.\nFOL: Young(erin)\nTEXT: Fiona is red.\nFOL: Red(fiona)\nTEXT: Fiona is rough.\nFOL: Rough(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Gary is blue.\nFOL: Blue(gary)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: If someone is red and round then they are rough.\nFOL: all x. ((Red(x) & Round(x)) -> Rough(x))\nTEXT: All smart people are round.\nFOL: all x. (Smart(x) -> Round(x))\nTEXT: If Erin is young then Erin is rough.\nFOL: (Young(erin) -> Rough(erin))\nTEXT: Young, red people are quiet.\nFOL: all x. (Young(x) & Red(x) -> Quiet(x))\nTEXT: All blue, smart people are rough.\nFOL: all x. (Blue(x) & Smart(x) -> Rough(x))\nTEXT: Round people are young.\nFOL: all x. (Round(x) -> Young(x))\nTEXT: Dave is smart.\nFOL: Smart(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is red.\nFOL: Red(dave)\nTEXT: Dave is round.\nFOL: Round(dave)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\nTEXT: Erin is rough.\nFOL: Rough(erin)\nTEXT: Erin is round.\nFOL: Round(erin)\nTEXT: Erin is young.\nFOL: Young(erin)\nTEXT: Fiona is red.\nFOL: Red(fiona)\nTEXT: Fiona is rough.\nFOL: Rough(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Gary is blue.\nFOL: Blue(gary)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: If someone is red and round then they are rough.\nFOL: (Red(x) & Round(x)) -> Rough(x)\nTEXT: All smart people are round.\nFOL: all x. (Smart(x) -> Round(x))\nTEXT: If Erin is young then Erin is rough.\nFOL: Young(erin) -> Rough(erin)\nTEXT: Young, red people are quiet.\nFOL: all x. (Young(x) & Red(x) -> Quiet(x))\nTEXT: All blue, smart people are rough.\nFOL: all x. (Blue(x) & Smart(x) -> Rough(x))\nTEXT: Round people are young.\nFOL: all x. (Round(x) -> Young(x))\nTEXT: Dave is smart.\nFOL: Smart(dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 111,
  "responses": [
   "<EVALUATE>\nTEXT: The cat is big.\nFOL: Big(cat)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat needs the tiger.\nFOL: Needs(cat, tiger)\nTEXT: The cat visits the rabbit.\nFOL: Visits(cat, rabbit)\nTEXT: The rabbit eats the cat.\nFOL: Eats(rabbit, cat)\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\nTEXT: The rabbit is rough.\nFOL: Rough(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The rabbit needs the tiger.\nFOL: Needs(rabbit, tiger)\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\nTEXT: The tiger is rough.\nFOL: Rough(tiger)\nTEXT: The tiger is round.\nFOL: Round(tiger)\nTEXT: The tiger needs the cat.\nFOL: Needs(tiger, cat)\nTEXT: The tiger visits the cat.\nFOL: Visits(tiger, cat)\nTEXT: The tiger visits the rabbit.\nFOL: Visits(tiger, rabbit)\nTEXT: If someone needs the cat then the cat eats the tiger.\nFOL: all x. (Needs(x, cat) -> Eats(cat, tiger))\nTEXT: If someone is cold then they eat the tiger.\nFOL: all x. (Cold(x) -> Eats(x, tiger))\nTEXT: Round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: If someone eats the tiger and the tiger eats the cat then they are rough.\nFOL: all x. ((Eats(x, tiger) & Eats(tiger, cat)) -> Rough(x))\nTEXT: If someone eats the tiger then they need the tiger.\nFOL: all x. (Eats(x, tiger) -> Needs(x, tiger))\nTEXT: If someone is round then they eat the cat.\nFOL: all x. (Round(x) -> Eats(x, cat))\nTEXT: If someone is cold and they need the tiger then they need the rabbit.\nFOL: all x. ((Cold(x) & Needs(x, tiger)) -> Needs(x, rabbit))\nTEXT: If someone eats the tiger and the tiger eats the rabbit then the tiger visits the cat.\nFOL: all x. ((Eats(x, tiger) & Eats(tiger, rabbit)) -> Visits(tiger, cat))\nTEXT: The cat eats the tiger.\nFOL: Eats(cat, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is big.\nFOL: Big(cat)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat needs the tiger.\nFOL: Needs(cat, tiger)\nTEXT: The cat visits the rabbit.\nFOL: Visits(cat, rabbit)\nTEXT: The rabbit eats the cat.\nFOL: Eats(rabbit, cat)\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\nTEXT: The rabbit is rough.\nFOL: Rough(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The rabbit needs the tiger.\nFOL: Needs(rabbit, tiger)\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\nTEXT: The tiger is rough.\nFOL: Rough(tiger)\nTEXT: The tiger is round.\nFOL: Round(tiger)\nTEXT: The tiger needs the cat.\nFOL: Needs(tiger, cat)\nTEXT: The tiger visits the cat.\nFOL: Visits(tiger, cat)\nTEXT: The tiger visits the rabbit.\nFOL: Visits(tiger, rabbit)\nTEXT: If someone needs the cat then the cat eats the tiger.\nFOL: all x. (Needs(x, cat) -> Eats(cat, tiger))\nTEXT: If someone is cold then they eat the tiger.\nFOL: all x. (Cold(x) -> Eats(x, tiger))\nTEXT: Round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: If someone eats the tiger and the tiger eats the cat then they are rough.\nFOL: all x. ((Eats(x, tiger) & Eats(tiger, cat)) -> Rough(x))\nTEXT: If someone eats the tiger then they need the tiger.\nFOL: all x. (Eats(x, tiger) -> Needs(x, tiger))\nTEXT: If someone is round then they eat the cat.\nFOL: all x. (Round(x) -> Eats(x, cat))\nTEXT: If someone is cold and they need the tiger then they need the rabbit.\nFOL: all x. (Cold(x) & Needs(x, tiger) -> Needs(x, rabbit))\nTEXT: If someone eats the tiger and the tiger eats the rabbit then the tiger visits the cat.\nFOL: all x. ((Eats(x, tiger) & Eats(tiger, rabbit)) -> Visits(tiger, cat))\nTEXT: The cat eats the tiger.\nFOL: Eats(cat, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is big.\nFOL: Big(cat)\n\nTEXT: The cat is kind.\nFOL: Kind(cat)\n\nTEXT: The cat needs the tiger.\nFOL: Needs(cat, tiger)\n\nTEXT: The cat visits the rabbit.\nFOL: Visits(cat, rabbit)\n\nTEXT: The rabbit eats the cat.\nFOL: Eats(rabbit, cat)\n\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\n\nTEXT: The rabbit is rough.\nFOL: Rough(rabbit)\n\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\n\nTEXT: The rabbit needs the tiger.\nFOL: Needs(rabbit, tiger)\n\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\n\nTEXT: The tiger is rough.\nFOL: Rough(tiger)\n\nTEXT: The tiger is round.\nFOL: Round(tiger)\n\nTEXT: The tiger needs the cat.\nFOL: Needs(tiger, cat)\n\nTEXT: The tiger visits the cat.\nFOL: Visits(tiger, cat)\n\nTEXT: The tiger visits the rabbit.\nFOL: Visits(tiger, rabbit)\n\nTEXT: If someone needs the cat then the cat eats the tiger.\nFOL: all x. (Needs(x, cat) -> Eats(cat, tiger))\n\nTEXT: If someone is cold then they eat the tiger.\nFOL: all x. (Cold(x) -> Eats(x, tiger))\n\nTEXT: Round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\n\nTEXT: If someone eats the tiger and the tiger eats the cat then they are rough.\nFOL: all x. ((Eats(x, tiger) & Eats(tiger, cat)) -> Rough(x))\n\nTEXT: If someone eats the tiger then they need the tiger.\nFOL: all x. (Eats(x, tiger) -> Needs(x, tiger))\n\nTEXT: If someone is round then they eat the cat.\nFOL: all x. (Round(x) -> Eats(x, cat))\n\nTEXT: If someone is cold and they need the tiger then they need the rabbit.\nFOL: all x. ((Cold(x) & Needs(x, tiger)) -> Needs(x, rabbit))\n\nTEXT: If someone eats the tiger and the tiger eats the rabbit then the tiger visits the cat.\nFOL: all x. ((Eats(x, tiger) & Eats(tiger, rabbit)) -> Visits(tiger, cat))\n\nTEXT: The cat eats the tiger.\nFOL: Eats(cat, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is big.\nFOL: Big(cat)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat needs the tiger.\nFOL: Needs(cat, tiger)\nTEXT: The cat visits the rabbit.\nFOL: Visits(cat, rabbit)\nTEXT: The rabbit eats the cat.\nFOL: Eats(rabbit, cat)\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\nTEXT: The rabbit is rough.\nFOL: Rough(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The rabbit needs the tiger.\nFOL: Needs(rabbit, tiger)\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\nTEXT: The tiger is rough.\nFOL: Rough(tiger)\nTEXT: The tiger is round.\nFOL: Round(tiger)\nTEXT: The tiger needs the cat.\nFOL: Needs(tiger, cat)\nTEXT: The tiger visits the cat.\nFOL: Visits(tiger, cat)\nTEXT: The tiger visits the rabbit.\nFOL: Visits(tiger, rabbit)\nTEXT: If someone needs the cat then the cat eats the tiger.\nFOL: all x. (Needs(x, cat) -> Eats(cat, tiger))\nTEXT: If someone is cold then they eat the tiger.\nFOL: all x. (Cold(x) -> Eats(x, tiger))\nTEXT: Round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: If someone eats the tiger and the tiger eats the cat then they are rough.\nFOL: all x. (Eats(x, tiger) & Eats(tiger, cat) -> Rough(x))\nTEXT: If someone eats the tiger then they need the tiger.\nFOL: all x. (Eats(x, tiger) -> Needs(x, tiger))\nTEXT: If someone is round then they eat the cat.\nFOL: all x. (Round(x) -> Eats(x, cat))\nTEXT: If someone is cold and they need the tiger then they need the rabbit.\nFOL: all x. (Cold(x) & Needs(x, tiger) -> Needs(x, rabbit))\nTEXT: If someone eats the tiger and the tiger eats the rabbit then the tiger visits the cat.\nFOL: all x. (Eats(x, tiger) & Eats(tiger, rabbit) -> Visits(tiger, cat))\nTEXT: The cat eats the tiger.\nFOL: Eats(cat, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is big.\nFOL: Big(cat)\n\nTEXT: The cat is kind.\nFOL: Kind(cat)\n\nTEXT: The cat needs the tiger.\nFOL: Needs(cat, tiger)\n\nTEXT: The cat visits the rabbit.\nFOL: Visits(cat, rabbit)\n\nTEXT: The rabbit eats the cat.\nFOL: Eats(rabbit, cat)\n\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\n\nTEXT: The rabbit is rough.\nFOL: Rough(rabbit)\n\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\n\nTEXT: The rabbit needs the tiger.\nFOL: Needs(rabbit, tiger)\n\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\n\nTEXT: The tiger is rough.\nFOL: Rough(tiger)\n\nTEXT: The tiger is round.\nFOL: Round(tiger)\n\nTEXT: The tiger needs the cat.\nFOL: Needs(tiger, cat)\n\nTEXT: The tiger visits the cat.\nFOL: Visits(tiger, cat)\n\nTEXT: The tiger visits the rabbit.\nFOL: Visits(tiger, rabbit)\n\nTEXT: If someone needs the cat then the cat eats the tiger.\nFOL: all x. (Needs(x, cat) -> Eats(cat, tiger))\n\nTEXT: If someone is cold then they eat the tiger.\nFOL: all x. (Cold(x) -> Eats(x, tiger))\n\nTEXT: Round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\n\nTEXT: If someone eats the tiger and the tiger eats the cat then they are rough.\nFOL: all x. ((Eats(x, tiger) & Eats(tiger, cat)) -> Rough(x))\n\nTEXT: If someone eats the tiger then they need the tiger.\nFOL: all x. (Eats(x, tiger) -> Needs(x, tiger))\n\nTEXT: If someone is round then they eat the cat.\nFOL: all x. (Round(x) -> Eats(x, cat))\n\nTEXT: If someone is cold and they need the tiger then they need the rabbit.\nFOL: all x. (Cold(x) & Needs(x, tiger) -> Needs(x, rabbit))\n\nTEXT: If someone eats the tiger and the tiger eats the rabbit then the tiger visits the cat.\nFOL: all x. ((Eats(x, tiger) & Eats(tiger, rabbit)) -> Visits(tiger, cat))\n\nTEXT: The cat eats the tiger.\nFOL: Eats(cat, tiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 112,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(dave)\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: Furry(dave) -> Rough(dave)\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is rough.\nFOL: Rough(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(dave)\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: (Furry(dave) -> Rough(dave))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is rough.\nFOL: Rough(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(dave)\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: Furry(dave) -> Rough(dave)\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is rough.\nFOL: Rough(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(dave)\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: Fur(dave) -> Rough(dave)\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Fur(x))\nTEXT: Dave is rough.\nFOL: Rough(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(dave)\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: -Furry(dave) | Rough(dave)\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is rough.\nFOL: Rough(dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 113,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: Rough(anne)\nTEXT: Bob is furry.\nFOL: Furry(bob)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: White people are rough.\nFOL: all x. (White(x) -> Rough(x))\nTEXT: All furry, kind people are white.\nFOL: all x. ((Furry(x) & Kind(x)) -> White(x))\nTEXT: All furry people are kind.\nFOL: all x. (Furry(x) -> Kind(x))\nTEXT: Gary is not furry.\nFOL: -Furry(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: Rough(anne)\nTEXT: Bob is furry.\nFOL: Furry(bob)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: White people are rough.\nFOL: all x. (White(x) -> Rough(x))\nTEXT: All furry, kind people are white.\nFOL: all x. ((Furry(x) & Kind(x)) -> White(x))\nTEXT: All furry people are kind.\nFOL: all x. (Furry(x) -> Kind(x))\nTEXT: Gary is not furry.\nFOL: -Furry(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: Rough(anne)\nTEXT: Bob is furry.\nFOL: Furry(bob)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: White people are rough.\nFOL: all x. (White(x) -> Rough(x))\nTEXT: All furry, kind people are white.\nFOL: all x. (Furry(x) & Kind(x) -> White(x))\nTEXT: All furry people are kind.\nFOL: all x. (Furry(x) -> Kind(x))\nTEXT: Gary is not furry.\nFOL: -Furry(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: Rough(anne)\nTEXT: Bob is furry.\nFOL: Furry(bob)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: White people are rough.\nFOL: all x. (White(x) -> Rough(x))\nTEXT: All furry, kind people are white.\nFOL: all x. (Furry(x) & Kind(x) -> White(x))\nTEXT: All furry people are kind.\nFOL: all x. (Furry(x) -> Kind(x))\nTEXT: Gary is not furry.\nFOL: -Furry(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: Rough(Anne)\nTEXT: Bob is furry.\nFOL: Furry(Bob)\nTEXT: Gary is kind.\nFOL: Kind(Gary)\nTEXT: White people are rough.\nFOL: all x. (White(x) -> Rough(x))\nTEXT: All furry, kind people are white.\nFOL: all x. ((Furry(x) & Kind(x)) -> White(x))\nTEXT: All furry people are kind.\nFOL: all x. (Furry(x) -> Kind(x))\nTEXT: Gary is not furry.\nFOL: -Furry(Gary)\n</EVALUATE>"
  ]
 },
 {
  "index": 114,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Anne is white.\nFOL: White(anne)\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: All round, red people are cold.\nFOL: all x. (Round(x) & Red(x) -> Cold(x))\nTEXT: White, round people are cold.\nFOL: all x. (White(x) & Round(x) -> Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x. (Nice(x) & Round(x) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x. (Smart(x) & Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: Round(anne) -> Cold(anne)\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Bob is big.\nFOL: Big(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Anne is white.\nFOL: White(anne)\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: All round, red people are cold.\nFOL: all x. (Round(x) & Red(x) -> Cold(x))\nTEXT: White, round people are cold.\nFOL: all x. (White(x) & Round(x) -> Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x. (Nice(x) & Round(x) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x. (Smart(x) & Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: (Round(anne) -> Cold(anne))\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Bob is big.\nFOL: Big(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Anne is white.\nFOL: White(anne)\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: All round, red people are cold.\nFOL: all x. (Round(x) & Red(x) -> Cold(x))\nTEXT: White, round people are cold.\nFOL: all x. (White(x) & Round(x) -> Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x. ((Nice(x) & Round(x)) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x. (Smart(x) & Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: (Round(anne) -> Cold(anne))\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Bob is big.\nFOL: Big(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Anne is white.\nFOL: White(anne)\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: All round, red people are cold.\nFOL: all x. (Round(x) & Red(x) -> Cold(x))\nTEXT: White, round people are cold.\nFOL: all x. (White(x) & Round(x) -> Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x. ((Nice(x) & Round(x)) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x. (Smart(x) & Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: Round(anne) -> Cold(anne)\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Bob is big.\nFOL: Big(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Anne is white.\nFOL: White(anne)\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: All round, red people are cold.\nFOL: all x. (Round(x) & Red(x) -> Cold(x))\nTEXT: White, round people are cold.\nFOL: all x. (White(x) & Round(x) -> Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x. (Nice(x) & Round(x) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x. (Smart(x) & Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: Round(anne) -> Cold(anne)\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Bob is big.\nFOL: Big(bob)\n</EVALUATE>"
  ]
 },
 {
  "index": 115,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: Green(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Bob is green.\nFOL: Green(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Dave is red.\nFOL: Red(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Dave is young.\nFOL: Young(dave)\nTEXT: If Dave is white then Dave is round.\nFOL: White(dave) -> Round(dave)\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: If Dave is smart then Dave is white.\nFOL: Smart(dave) -> White(dave)\nTEXT: If someone is red and not smart then they are not blue.\nFOL: all x. ((Red(x) & -Smart(x)) -> -Blue(x))\nTEXT: Round people are blue.\nFOL: all x. (Round(x) -> Blue(x))\nTEXT: If someone is red and not blue then they are green.\nFOL: all x. ((Red(x) & -Blue(x)) -> Green(x))\nTEXT: Anne is not smart.\nFOL: -Smart(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: Green(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Bob is green.\nFOL: Green(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Dave is red.\nFOL: Red(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Dave is young.\nFOL: Young(dave)\nTEXT: If Dave is white then Dave is round.\nFOL: White(dave) -> Round(dave)\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: If Dave is smart then Dave is white.\nFOL: Smart(dave) -> White(dave)\nTEXT: If someone is red and not smart then they are not blue.\nFOL: (Red(x) & -Smart(x)) -> -Blue(x)\nTEXT: Round people are blue.\nFOL: all x. (Round(x) -> Blue(x))\nTEXT: If someone is red and not blue then they are green.\nFOL: (Red(x) & -Blue(x)) -> Green(x)\nTEXT: Anne is not smart.\nFOL: -Smart(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: Green(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Bob is green.\nFOL: Green(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Dave is red.\nFOL: Red(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Dave is young.\nFOL: Young(dave)\nTEXT: If Dave is white then Dave is round.\nFOL: (White(dave) -> Round(dave))\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: If Dave is smart then Dave is white.\nFOL: (Smart(dave) -> White(dave))\nTEXT: If someone is red and not smart then they are not blue.\nFOL: all x. ((Red(x) & -Smart(x)) -> -Blue(x))\nTEXT: Round people are blue.\nFOL: all x. (Round(x) -> Blue(x))\nTEXT: If someone is red and not blue then they are green.\nFOL: all x. ((Red(x) & -Blue(x)) -> Green(x))\nTEXT: Anne is not smart.\nFOL: -Smart(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: Green(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Bob is green.\nFOL: Green(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Dave is red.\nFOL: Red(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Dave is young.\nFOL: Young(dave)\nTEXT: If Dave is white then Dave is round.\nFOL: White(dave) -> Round(dave)\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: If Dave is smart then Dave is white.\nFOL: Smart(dave) -> White(dave)\nTEXT: If someone is red and not smart then they are not blue.\nFOL: all x. (Red(x) & -Smart(x) -> -Blue(x))\nTEXT: Round people are blue.\nFOL: all x. (Round(x) -> Blue(x))\nTEXT: If someone is red and not blue then they are green.\nFOL: all x. (Red(x) & -Blue(x) -> Green(x))\nTEXT: Anne is not smart.\nFOL: -Smart(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: Green(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Bob is green.\nFOL: Green(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Dave is red.\nFOL: Red(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Dave is young.\nFOL: Young(dave)\nTEXT: If Dave is white then Dave is round.\nFOL: White(dave) -> Round(dave)\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: If Dave is smart then Dave is white.\nFOL: Smart(dave) -> White(dave)\nTEXT: If someone is red and not smart then they are not blue.\nFOL: all x. ((Red(x) & -Smart(x)) -> -Blue(x))\nTEXT: Round people are blue.\nFOL: all x. (Round(x) -> Blue(x))\nTEXT: If someone is red and not blue then they are green.\nFOL: all x. ((Red(x) & -Blue(x)) -> Green(x))\nTEXT: Anne is not smart.\nFOL: -Smart(anne)\n</EVALUATE>"
  ]
 },
 {
  "index": 116,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\nTEXT: Charlie is rough.\nFOL: Rough(charlie)\nTEXT: Charlie is round.\nFOL: Round(charlie)\nTEXT: Charlie is young.\nFOL: Young(charlie)\nTEXT: Gary is rough.\nFOL: Rough(gary)\nTEXT: Gary is not white.\nFOL: -White(gary)\nTEXT: Gary is young.\nFOL: Young(gary)\nTEXT: If someone is round and not white then they are not blue.\nFOL: all x. ((Round(x) & -White(x)) -> -Blue(x))\nTEXT: If someone is white and red then they are blue.\nFOL: all x. ((White(x) & Red(x)) -> Blue(x))\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: All round people are red.\nFOL: all x. (Round(x) -> Red(x))\nTEXT: If someone is red then they are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\nTEXT: If someone is rough and not red then they are young.\nFOL: all x. ((Rough(x) & -Red(x)) -> Young(x))\nTEXT: If someone is round and not blue then they are young.\nFOL: all x. ((Round(x) & -Blue(x)) -> Young(x))\nTEXT: Blue, white people are young.\nFOL: all x. ((Blue(x) & White(x)) -> Young(x))\nTEXT: Gary is not red.\nFOL: -Red(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\nTEXT: Charlie is rough.\nFOL: Rough(charlie)\nTEXT: Charlie is round.\nFOL: Round(charlie)\nTEXT: Charlie is young.\nFOL: Young(charlie)\nTEXT: Gary is rough.\nFOL: Rough(gary)\nTEXT: Gary is not white.\nFOL: -White(gary)\nTEXT: Gary is young.\nFOL: Young(gary)\nTEXT: If someone is round and not white then they are not blue.\nFOL: all x. (Round(x) & -White(x) -> -Blue(x))\nTEXT: If someone is white and red then they are blue.\nFOL: all x. (White(x) & Red(x) -> Blue(x))\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: All round people are red.\nFOL: all x. (Round(x) -> Red(x))\nTEXT: If someone is red then they are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\nTEXT: If someone is rough and not red then they are young.\nFOL: all x. (Rough(x) & -Red(x) -> Young(x))\nTEXT: If someone is round and not blue then they are young.\nFOL: all x. (Round(x) & -Blue(x) -> Young(x))\nTEXT: Blue, white people are young.\nFOL: all x. (Blue(x) & White(x) -> Young(x))\nTEXT: Gary is not red.\nFOL: -Red(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\nTEXT: Charlie is rough.\nFOL: Rough(charlie)\nTEXT: Charlie is round.\nFOL: Round(charlie)\nTEXT: Charlie is young.\nFOL: Young(charlie)\nTEXT: Gary is rough.\nFOL: Rough(gary)\nTEXT: Gary is not white.\nFOL: -White(gary)\nTEXT: Gary is young.\nFOL: Young(gary)\nTEXT: If someone is round and not white then they are not blue.\nFOL: all x. ((Round(x) & -White(x)) -> -Blue(x))\nTEXT: If someone is white and red then they are blue.\nFOL: all x. (White(x) & Red(x) -> Blue(x))\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: All round people are red.\nFOL: all x. (Round(x) -> Red(x))\nTEXT: If someone is red then they are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\nTEXT: If someone is rough and not red then they are young.\nFOL: all x. ((Rough(x) & -Red(x)) -> Young(x))\nTEXT: If someone is round and not blue then they are young.\nFOL: all x. ((Round(x) & -Blue(x)) -> Young(x))\nTEXT: Blue, white people are young.\nFOL: all x. ((Blue(x) & White(x)) -> Young(x))\nTEXT: Gary is not red.\nFOL: -Red(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\nTEXT: Charlie is rough.\nFOL: Rough(charlie)\nTEXT: Charlie is round.\nFOL: Round(charlie)\nTEXT: Charlie is young.\nFOL: Young(charlie)\nTEXT: Gary is rough.\nFOL: Rough(gary)\nTEXT: Gary is not white.\nFOL: -White(gary)\nTEXT: Gary is young.\nFOL: Young(gary)\nTEXT: If someone is round and not white then they are not blue.\nFOL: all x. (Round(x) & -White(x) -> -Blue(x))\nTEXT: If someone is white and red then they are blue.\nFOL: all x. (White(x) & Red(x) -> Blue(x))\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: All round people are red.\nFOL: all x. (Round(x) -> Red(x))\nTEXT: If someone is red then they are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\nTEXT: If someone is rough and not red then they are young.\nFOL: all x. (Rough(x) & -Red(x) -> Young(x))\nTEXT: If someone is round and not blue then they are young.\nFOL: all x. (Round(x) & -Blue(x) -> Young(x))\nTEXT: Blue, white people are young.\nFOL: all x. ((Blue(x) & White(x)) -> Young(x))\nTEXT: Gary is not red.\nFOL: -Red(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\nTEXT: Charlie is rough.\nFOL: Rough(charlie)\nTEXT: Charlie is round.\nFOL: Round(charlie)\nTEXT: Charlie is young.\nFOL: Young(charlie)\nTEXT: Gary is rough.\nFOL: Rough(gary)\nTEXT: Gary is not white.\nFOL: -White(gary)\nTEXT: Gary is young.\nFOL: Young(gary)\nTEXT: If someone is round and not white then they are not blue.\nFOL: (Round(x) & -White(x) -> -Blue(x))\nTEXT: If someone is white and red then they are blue.\nFOL: (White(x) & Red(x) -> Blue(x))\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: All round people are red.\nFOL: all x. (Round(x) -> Red(x))\nTEXT: If someone is red then they are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\nTEXT: If someone is rough and not red then they are young.\nFOL: all x. (Rough(x) & -Red(x) -> Young(x))\nTEXT: If someone is round and not blue then they are young.\nFOL: all x. (Round(x) & -Blue(x) -> Young(x))\nTEXT: Blue, white people are young.\nFOL: all x. ((Blue(x) & White(x)) -> Young(x))\nTEXT: Gary is not red.\nFOL: -Red(gary)\n</EVALUATE>"
  ]
 },
 {
  "index": 117,
  "responses": [
   "<EVALUATE>\nTEXT: The bear is big.\nFOL: Big(bear)\nTEXT: The bear is blue.\nFOL: Blue(bear)\nTEXT: The bear is nice.\nFOL: Nice(bear)\nTEXT: The bear is red.\nFOL: Red(bear)\nTEXT: The bear visits the lion.\nFOL: Visits(bear, lion)\nTEXT: The lion chases the bear.\nFOL: Chases(lion, bear)\nTEXT: The lion is big.\nFOL: Big(lion)\nTEXT: The lion is not green.\nFOL: -Green(lion)\nTEXT: The lion sees the bear.\nFOL: Sees(lion, bear)\nTEXT: The lion visits the bear.\nFOL: Visits(lion, bear)\nTEXT: If the lion sees the bear then the bear is blue.\nFOL: (Sees(lion, bear) -> Blue(bear))\nTEXT: If something chases the bear then the bear is blue.\nFOL: all x. (Chases(x, bear) -> Blue(bear))\nTEXT: If the bear chases the lion then the lion is big.\nFOL: (Chases(bear, lion) -> Big(lion))\nTEXT: If something chases the lion then it sees the lion.\nFOL: all x. (Chases(x, lion) -> Sees(x, lion))\nTEXT: If something visits the lion and the lion does not chase the bear then the bear chases the lion.\nFOL: all x. ((Visits(x, lion) & -Chases(lion, bear)) -> Chases(bear, lion))\nTEXT: If something visits the bear then the bear does not chase the lion.\nFOL: all x. (Visits(x, bear) -> -Chases(bear, lion))\nTEXT: If something sees the bear and the bear does not chase the lion then the bear does not see the lion.\nFOL: all x. ((Sees(x, bear) & -Chases(bear, lion)) -> -Sees(x, lion))\nTEXT: If something is red and it does not see the lion then the lion is blue.\nFOL: all x. ((Red(x) & -Sees(x, lion)) -> Blue(lion))\nTEXT: The bear sees the bear.\nFOL: Sees(bear, bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is big.\nFOL: Big(bear)\nTEXT: The bear is blue.\nFOL: Blue(bear)\nTEXT: The bear is nice.\nFOL: Nice(bear)\nTEXT: The bear is red.\nFOL: Red(bear)\nTEXT: The bear visits the lion.\nFOL: Visits(bear, lion)\nTEXT: The lion chases the bear.\nFOL: Chases(lion, bear)\nTEXT: The lion is big.\nFOL: Big(lion)\nTEXT: The lion is not green.\nFOL: -Green(lion)\nTEXT: The lion sees the bear.\nFOL: Sees(lion, bear)\nTEXT: The lion visits the bear.\nFOL: Visits(lion, bear)\nTEXT: If the lion sees the bear then the bear is blue.\nFOL: (Sees(lion, bear) -> Blue(bear))\nTEXT: If something chases the bear then the bear is blue.\nFOL: all x. (Chases(x, bear) -> Blue(bear))\nTEXT: If the bear chases the lion then the lion is big.\nFOL: (Chases(bear, lion) -> Big(lion))\nTEXT: If something chases the lion then it sees the lion.\nFOL: all x. (Chases(x, lion) -> Sees(x, lion))\nTEXT: If something visits the lion and the lion does not chase the bear then the bear chases the lion.\nFOL: (Visits(x, lion) & -Chases(lion, bear) -> Chases(bear, lion))\nTEXT: If something visits the bear then the bear does not chase the lion.\nFOL: all x. (Visits(x, bear) -> -Chases(bear, lion))\nTEXT: If something sees the bear and the bear does not chase the lion then the bear does not see the lion.\nFOL: all x. ((Sees(x, bear) & -Chases(bear, lion)) -> -Sees(x, lion))\nTEXT: If something is red and it does not see the lion then the lion is blue.\nFOL: all x. ((Red(x) & -Sees(x, lion)) -> Blue(lion))\nTEXT: The bear sees the bear.\nFOL: Sees(bear, bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is big.\nFOL: Big(bear)\nTEXT: The bear is blue.\nFOL: Blue(bear)\nTEXT: The bear is nice.\nFOL: Nice(bear)\nTEXT: The bear is red.\nFOL: Red(bear)\nTEXT: The bear visits the lion.\nFOL: Visits(bear, lion)\nTEXT: The lion chases the bear.\nFOL: Chases(lion, bear)\nTEXT: The lion is big.\nFOL: Big(lion)\nTEXT: The lion is not green.\nFOL: -Green(lion)\nTEXT: The lion sees the bear.\nFOL: Sees(lion, bear)\nTEXT: The lion visits the bear.\nFOL: Visits(lion, bear)\nTEXT: If the lion sees the bear then the bear is blue.\nFOL: Sees(lion, bear) -> Blue(bear)\nTEXT: If something chases the bear then the bear is blue.\nFOL: all x. (Chases(x, bear) -> Blue(bear))\nTEXT: If the bear chases the lion then the lion is big.\nFOL: Chases(bear, lion) -> Big(lion)\nTEXT: If something chases the lion then it sees the lion.\nFOL: all x. (Chases(x, lion) -> Sees(x, lion))\nTEXT: If something visits the lion and the lion does not chase the bear then the bear chases the lion.\nFOL: all x. ((Visits(x, lion) & -Chases(lion, bear)) -> Chases(bear, lion))\nTEXT: If something visits the bear then the bear does not chase the lion.\nFOL: all x. (Visits(x, bear) -> -Chases(bear, lion))\nTEXT: If something sees the bear and the bear does not chase the lion then the bear does not see the lion.\nFOL: all x. ((Sees(x, bear) & -Chases(bear, lion)) -> -Sees(x, lion))\nTEXT: If something is red and it does not see the lion then the lion is blue.\nFOL: all x. ((Red(x) & -Sees(x, lion)) -> Blue(lion))\nTEXT: The bear sees the bear.\nFOL: Sees(bear, bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is big.\nFOL: Big(bear)\nTEXT: The bear is blue.\nFOL: Blue(bear)\nTEXT: The bear is nice.\nFOL: Nice(bear)\nTEXT: The bear is red.\nFOL: Red(bear)\nTEXT: The bear visits the lion.\nFOL: Visits(bear, lion)\nTEXT: The lion chases the bear.\nFOL: Chases(lion, bear)\nTEXT: The lion is big.\nFOL: Big(lion)\nTEXT: The lion is not green.\nFOL: -Green(lion)\nTEXT: The lion sees the bear.\nFOL: Sees(lion, bear)\nTEXT: The lion visits the bear.\nFOL: Visits(lion, bear)\nTEXT: If the lion sees the bear then the bear is blue.\nFOL: Sees(lion, bear) -> Blue(bear)\nTEXT: If something chases the bear then the bear is blue.\nFOL: Chases(x, bear) -> Blue(bear)\nTEXT: If the bear chases the lion then the lion is big.\nFOL: Chases(bear, lion) -> Big(lion)\nTEXT: If something chases the lion then it sees the lion.\nFOL: Chases(x, lion) -> Sees(x, lion)\nTEXT: If something visits the lion and the lion does not chase the bear then the bear chases the lion.\nFOL: (Visits(x, lion) & -Chases(lion, bear)) -> Chases(bear, lion)\nTEXT: If something visits the bear then the bear does not chase the lion.\nFOL: Visits(x, bear) -> -Chases(bear, lion)\nTEXT: If something sees the bear and the bear does not chase the lion then the bear does not see the lion.\nFOL: (Sees(x, bear) & -Chases(bear, lion)) -> -Sees(x, lion)\nTEXT: If something is red and it does not see the lion then the lion is blue.\nFOL: (Red(x) & -Sees(x, lion)) -> Blue(lion)\nTEXT: The bear sees the bear.\nFOL: Sees(bear, bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is big.\nFOL: Big(bear)\nTEXT: The bear is blue.\nFOL: Blue(bear)\nTEXT: The bear is nice.\nFOL: Nice(bear)\nTEXT: The bear is red.\nFOL: Red(bear)\nTEXT: The bear visits the lion.\nFOL: Visits(bear, lion)\nTEXT: The lion chases the bear.\nFOL: Chases(lion, bear)\nTEXT: The lion is big.\nFOL: Big(lion)\nTEXT: The lion is not green.\nFOL: -Green(lion)\nTEXT: The lion sees the bear.\nFOL: Sees(lion, bear)\nTEXT: The lion visits the bear.\nFOL: Visits(lion, bear)\nTEXT: If the lion sees the bear then the bear is blue.\nFOL: Sees(lion, bear) -> Blue(bear)\nTEXT: If something chases the bear then the bear is blue.\nFOL: all x. (Chases(x, bear) -> Blue(bear))\nTEXT: If the bear chases the lion then the lion is big.\nFOL: Chases(bear, lion) -> Big(lion)\nTEXT: If something chases the lion then it sees the lion.\nFOL: all x. (Chases(x, lion) -> Sees(x, lion))\nTEXT: If something visits the lion and the lion does not chase the bear then the bear chases the lion.\nFOL: (Visits(x, lion) & -Chases(lion, bear)) -> Chases(bear, lion)\nTEXT: If something visits the bear then the bear does not chase the lion.\nFOL: Visits(x, bear) -> -Chases(bear, lion)\nTEXT: If something sees the bear and the bear does not chase the lion then the bear does not see the lion.\nFOL: (Sees(x, bear) & -Chases(bear, lion)) -> -Sees(x, lion)\nTEXT: If something is red and it does not see the lion then the lion is blue.\nFOL: (Red(x) & -Sees(x, lion)) -> Blue(lion)\nTEXT: The bear sees the bear.\nFOL: Sees(bear, bear)\n</EVALUATE>"
  ]
 },
 {
  "index": 118,
  "responses": [
   "<EVALUATE>\nTEXT: Alan may be young but he is nice, wears green shoes and is cold.\nFOL: Young(alan) | Nice(alan) & GreenShoes(alan) & Cold(alan)\nTEXT: Bob is green with envy, and rough with his kids, but overall is just a nice, round individual.\nFOL: GreenWithEnvy(bob) & RoughWithKids(bob) & Nice(bob) & Round(bob)\nTEXT: That guy Dave sure is nice.\nFOL: Nice(dave)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: GreenToJob(fred) & Blue(fred) & Cold(fred)\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) -> Rough(x))\nTEXT: If a person has a rough and round shape and is nice, then they will be big too.\nFOL: all x. (Rough(x) & Round(x) & Nice(x) -> Big(x))\nTEXT: Truth be told, every big, rough person out there that is green, will also be colored blue.\nFOL: all x. (Big(x) & Rough(x) & Green(x) -> Blue(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. (Blue(x) & Green(x) -> Red(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Kind(x) & Round(x) -> Big(x))\nTEXT: If a person is blue and red and big, then that person is cold.\nFOL: all x. (Blue(x) & Red(x) & Big(x) -> Cold(x))\nTEXT: Bob is blue.\nFOL: Blue(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan may be young but he is nice, wears green shoes and is cold.\nFOL: Young(alan) | Nice(alan) & GreenShoes(alan) & Cold(alan)\nTEXT: Bob is green with envy, and rough with his kids, but overall is just a nice, round individual.\nFOL: GreenWithEnvy(bob) & RoughWithKids(bob) & Nice(bob) & Round(bob)\nTEXT: That guy Dave sure is nice.\nFOL: Nice(dave)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: GreenToJob(fred) & Blue(fred)\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) -> Rough(x))\nTEXT: If a person has a rough and round shape and is nice, then they will be big too.\nFOL: (Rough(x) & Round(x) & Nice(x)) -> Big(x)\nTEXT: Truth be told, every big, rough person out there that is green, will also be colored blue.\nFOL: all x. (Big(x) & Rough(x) & Green(x) -> Blue(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. (Blue(x) & Green(x) -> Red(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Kind(x) & Round(x) -> Big(x))\nTEXT: If a person is blue and red and big, then that person is cold.\nFOL: (Blue(x) & Red(x) & Big(x)) -> Cold(x)\nTEXT: Bob is blue.\nFOL: Blue(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan may be young but he is nice, wears green shoes and is cold.\nFOL: Young(alan) | Nice(alan) & GreenShoes(alan) & Cold(alan)\nTEXT: Bob is green with envy, and rough with his kids, but overall is just a nice, round individual.\nFOL: GreenWithEnvy(bob) & RoughWithKids(bob) & Nice(bob) & Round(bob)\nTEXT: That guy Dave sure is nice.\nFOL: Nice(dave)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: GreenToJob(fred) & Blue(fred) & Cold(fred)\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) -> Rough(x))\nTEXT: If a person has a rough and round shape and is nice, then they will be big too.\nFOL: all x. ((Rough(x) & Round(x) & Nice(x)) -> Big(x))\nTEXT: Truth be told, every big, rough person out there that is green, will also be colored blue.\nFOL: all x. (Big(x) & Rough(x) & Green(x) -> Blue(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. (Blue(x) & Green(x) -> Red(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Kind(x) & Round(x) -> Big(x))\nTEXT: If a person is blue and red and big, then that person is cold.\nFOL: all x. ((Blue(x) & Red(x) & Big(x)) -> Cold(x))\nTEXT: Bob is blue.\nFOL: Blue(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan may be young but he is nice, wears green shoes and is cold.\nFOL: Young(alan) | Nice(alan) & GreenShoes(alan) & Cold(alan)\nTEXT: Bob is green with envy, and rough with his kids, but overall is just a nice, round individual.\nFOL: GreenWithEnvy(bob) & RoughWithKids(bob) & Nice(bob) & Round(bob)\nTEXT: That guy Dave sure is nice.\nFOL: Nice(dave)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: GreenToJob(fred) & Blue(fred)\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) -> Rough(x))\nTEXT: If a person has a rough and round shape and is nice, then they will be big too.\nFOL: all x. ((Rough(x) & Round(x) & Nice(x)) -> Big(x))\nTEXT: Truth be told, every big, rough person out there that is green, will also be colored blue.\nFOL: all x. (Big(x) & Rough(x) & Green(x) -> Blue(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. (Blue(x) & Green(x) -> Red(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Kind(x) & Round(x) -> Big(x))\nTEXT: If a person is blue and red and big, then that person is cold.\nFOL: all x. (Blue(x) & Red(x) & Big(x) -> Cold(x))\nTEXT: Bob is blue.\nFOL: Blue(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan may be young but he is nice, wears green shoes and is cold.\nFOL: (Young(alan) & Nice(alan) & GreenShoes(alan) & Cold(alan))\nTEXT: Bob is green with envy, and rough with his kids, but overall is just a nice, round individual.\nFOL: GreenWithEnvy(bob) & RoughWithKids(bob) & Nice(bob) & Round(bob)\nTEXT: That guy Dave sure is nice.\nFOL: Nice(dave)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: GreenToJob(fred) & Blue(fred) & Cold(fred)\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) -> Rough(x))\nTEXT: If a person has a rough and round shape and is nice, then they will be big too.\nFOL: all x. ((Rough(x) & Round(x) & Nice(x)) -> Big(x))\nTEXT: Truth be told, every big, rough person out there that is green, will also be colored blue.\nFOL: all x. (Big(x) & Rough(x) & Green(x) -> Blue(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. (Blue(x) & Green(x) -> Red(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Kind(x) & Round(x) -> Big(x))\nTEXT: If a person is blue and red and big, then that person is cold.\nFOL: all x. ((Blue(x) & Red(x) & Big(x)) -> Cold(x))\nTEXT: Bob is blue.\nFOL: Blue(bob)\n</EVALUATE>"
  ]
 },
 {
  "index": 119,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Charlie is cold.\nFOL: Cold(charlie)\nTEXT: Gary is quiet.\nFOL: Quiet(gary)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: Cold, quiet people are smart.\nFOL: all x. (Cold(x) & Quiet(x) -> Smart(x))\nTEXT: All smart people are white.\nFOL: all x. (Smart(x) -> White(x))\nTEXT: If Charlie is cold then Charlie is quiet.\nFOL: Cold(charlie) -> Quiet(charlie)\nTEXT: Charlie is not white.\nFOL: -White(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Charlie is cold.\nFOL: Cold(charlie)\nTEXT: Gary is quiet.\nFOL: Quiet(gary)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: Cold, quiet people are smart.\nFOL: all x. (Cold(x) & Quiet(x) -> Smart(x))\nTEXT: All smart people are white.\nFOL: all x. (Smart(x) -> White(x))\nTEXT: If Charlie is cold then Charlie is quiet.\nFOL: (Cold(charlie) -> Quiet(charlie))\nTEXT: Charlie is not white.\nFOL: -White(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Charlie is cold.\nFOL: Cold(charlie)\nTEXT: Gary is quiet.\nFOL: Quiet(gary)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: Cold, quiet people are smart.\nFOL: all x. ((Cold(x) & Quiet(x)) -> Smart(x))\nTEXT: All smart people are white.\nFOL: all x. (Smart(x) -> White(x))\nTEXT: If Charlie is cold then Charlie is quiet.\nFOL: Cold(charlie) -> Quiet(charlie)\nTEXT: Charlie is not white.\nFOL: -White(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Charlie is cold.\nFOL: Cold(charlie)\nTEXT: Gary is quiet.\nFOL: Quiet(gary)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: Cold, quiet people are smart.\nFOL: all x. (Cold(x) & Quiet(x) -> Smart(x))\nTEXT: All smart people are white.\nFOL: all x. (Smart(x) -> White(x))\nTEXT: If Charlie is cold then Charlie is quiet.\nFOL: -Cold(charlie) | Quiet(charlie)\nTEXT: Charlie is not white.\nFOL: -White(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(bob)\n\nTEXT: Charlie is cold.\nFOL: Cold(charlie)\n\nTEXT: Gary is quiet.\nFOL: Quiet(gary)\n\nTEXT: Harry is smart.\nFOL: Smart(harry)\n\nTEXT: Cold, quiet people are smart.\nFOL: all x. (Cold(x) & Quiet(x) -> Smart(x))\n\nTEXT: All smart people are white.\nFOL: all x. (Smart(x) -> White(x))\n\nTEXT: If Charlie is cold then Charlie is quiet.\nFOL: Cold(charlie) -> Quiet(charlie)\n\nTEXT: Charlie is not white.\nFOL: -White(charlie)\n</EVALUATE>"
  ]
 },
 {
  "index": 120,
  "responses": [
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: Rough(cat)\nTEXT: The cat is round.\nFOL: Round(cat)\nTEXT: The dog does not chase the lion.\nFOL: -Chase(dog, lion)\nTEXT: The dog eats the cat.\nFOL: Eat(dog, cat)\nTEXT: The dog does not like the cat.\nFOL: -Like(dog, cat)\nTEXT: The lion chases the dog.\nFOL: Chase(lion, dog)\nTEXT: The lion is green.\nFOL: Green(lion)\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: (Green(x) & Like(x, lion)) -> Eat(x, dog)\nTEXT: If someone is round then they chase the lion.\nFOL: Round(x) -> Chase(x, lion)\nTEXT: If someone chases the lion then they like the dog.\nFOL: Chase(x, lion) -> Like(x, dog)\nTEXT: If someone eats the dog then they are not round.\nFOL: Eat(x, dog) -> -Round(x)\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: -Like(dog, lion) -> Red(lion)\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: (Like(x, lion) & Like(lion, cat)) -> Chase(x, dog)\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: (Like(x, lion) & Green(lion)) -> Round(lion)\nTEXT: If someone likes the dog then they eat the lion.\nFOL: Like(x, dog) -> Eat(x, lion)\nTEXT: The cat does not eat the dog.\nFOL: -Eat(cat, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: Rough(cat)\nTEXT: The cat is round.\nFOL: Round(cat)\nTEXT: The dog does not chase the lion.\nFOL: -Chase(dog, lion)\nTEXT: The dog eats the cat.\nFOL: Eat(dog, cat)\nTEXT: The dog does not like the cat.\nFOL: -Like(dog, cat)\nTEXT: The lion chases the dog.\nFOL: Chase(lion, dog)\nTEXT: The lion is green.\nFOL: Green(lion)\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x. ((Green(x) & Like(x, lion)) -> Eat(x, dog))\nTEXT: If someone is round then they chase the lion.\nFOL: all x. (Round(x) -> Chase(x, lion))\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x. (Chase(x, lion) -> Like(x, dog))\nTEXT: If someone eats the dog then they are not round.\nFOL: all x. (Eat(x, dog) -> -Round(x))\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: -Like(dog, lion) -> Red(lion)\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x. ((Like(x, lion) & Like(lion, cat)) -> Chase(x, dog))\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x. ((Like(x, lion) & Green(lion)) -> Round(lion))\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x. (Like(x, dog) -> Eat(x, lion))\nTEXT: The cat does not eat the dog.\nFOL: -Eat(cat, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: Rough(cat)\nTEXT: The cat is round.\nFOL: Round(cat)\nTEXT: The dog does not chase the lion.\nFOL: -Chase(dog, lion)\nTEXT: The dog eats the cat.\nFOL: Eat(dog, cat)\nTEXT: The dog does not like the cat.\nFOL: -Like(dog, cat)\nTEXT: The lion chases the dog.\nFOL: Chase(lion, dog)\nTEXT: The lion is green.\nFOL: Green(lion)\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x. (Green(x) & Like(x, lion) -> Eat(x, dog))\nTEXT: If someone is round then they chase the lion.\nFOL: all x. (Round(x) -> Chase(x, lion))\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x. (Chase(x, lion) -> Like(x, dog))\nTEXT: If someone eats the dog then they are not round.\nFOL: all x. (Eat(x, dog) -> -Round(x))\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: -Like(dog, lion) -> Red(lion)\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x. ((Like(x, lion) & Like(lion, cat)) -> Chase(x, dog))\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x. ((Like(x, lion) & Green(lion)) -> Round(lion))\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x. (Like(x, dog) -> Eat(x, lion))\nTEXT: The cat does not eat the dog.\nFOL: -Eat(cat, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: Rough(cat)\nTEXT: The cat is round.\nFOL: Round(cat)\nTEXT: The dog does not chase the lion.\nFOL: -Chase(dog, lion)\nTEXT: The dog eats the cat.\nFOL: Eat(dog, cat)\nTEXT: The dog does not like the cat.\nFOL: -Like(dog, cat)\nTEXT: The lion chases the dog.\nFOL: Chase(lion, dog)\nTEXT: The lion is green.\nFOL: Green(lion)\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: (Green(x) & Like(x, lion) -> Eat(x, dog))\nTEXT: If someone is round then they chase the lion.\nFOL: all x. (Round(x) -> Chase(x, lion))\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x. (Chase(x, lion) -> Like(x, dog))\nTEXT: If someone eats the dog then they are not round.\nFOL: all x. (Eat(x, dog) -> -Round(x))\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: -Like(dog, lion) -> Red(lion)\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x. ((Like(x, lion) & Like(lion, cat)) -> Chase(x, dog))\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x. ((Like(x, lion) & Green(lion)) -> Round(lion))\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x. (Like(x, dog) -> Eat(x, lion))\nTEXT: The cat does not eat the dog.\nFOL: -Eat(cat, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: Rough(cat)\nTEXT: The cat is round.\nFOL: Round(cat)\nTEXT: The dog does not chase the lion.\nFOL: -Chase(dog, lion)\nTEXT: The dog eats the cat.\nFOL: Eat(dog, cat)\nTEXT: The dog does not like the cat.\nFOL: -Like(dog, cat)\nTEXT: The lion chases the dog.\nFOL: Chase(lion, dog)\nTEXT: The lion is green.\nFOL: Green(lion)\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: (Green(x) & Like(x, lion)) -> Eat(x, dog)\nTEXT: If someone is round then they chase the lion.\nFOL: all x. (Round(x) -> Chase(x, lion))\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x. (Chase(x, lion) -> Like(x, dog))\nTEXT: If someone eats the dog then they are not round.\nFOL: all x. (Eat(x, dog) -> -Round(x))\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: -Like(dog, lion) -> Red(lion)\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x. ((Like(x, lion) & Like(lion, cat)) -> Chase(x, dog))\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x. ((Like(x, lion) & Green(lion)) -> Round(lion))\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x. (Like(x, dog) -> Eat(x, lion))\nTEXT: The cat does not eat the dog.\nFOL: -Eat(cat, dog)\n</EVALUATE>"
  ]
 },
 {
  "index": 121,
  "responses": [
   "<EVALUATE>\nTEXT: The mouse is round.\nFOL: Round(mouse)\nTEXT: Round things are not kind.\nFOL: all x. (Round(x) -> -Kind(x))\nTEXT: If something is round and not kind then it is young.\nFOL: all x. ((Round(x) & -Kind(x)) -> Young(x))\nTEXT: If something is young and round then it is not red.\nFOL: all x. ((Young(x) & Round(x)) -> -Red(x))\nTEXT: The mouse is kind.\nFOL: Kind(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse is round.\nFOL: Round(mouse)\nTEXT: Round things are not kind.\nFOL: all x. (Round(x) -> -Kind(x))\nTEXT: If something is round and not kind then it is young.\nFOL: all x. (Round(x) & -Kind(x) -> Young(x))\nTEXT: If something is young and round then it is not red.\nFOL: all x. (Young(x) & Round(x) -> -Red(x))\nTEXT: The mouse is kind.\nFOL: Kind(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse is round.\nFOL: Round(mouse)\nTEXT: Round things are not kind.\nFOL: all x. (Round(x) -> -Kind(x))\nTEXT: If something is round and not kind then it is young.\nFOL: all x. ((Round(x) & -Kind(x)) -> Young(x))\nTEXT: If something is young and round then it is not red.\nFOL: all x. (Young(x) & Round(x) -> -Red(x))\nTEXT: The mouse is kind.\nFOL: Kind(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse is round.\nFOL: Round(mouse)\nTEXT: Round things are not kind.\nFOL: all x. (Round(x) -> -Kind(x))\nTEXT: If something is round and not kind then it is young.\nFOL: all x. (Round(x) & -Kind(x) -> Young(x))\nTEXT: If something is young and round then it is not red.\nFOL: all x. ((Young(x) & Round(x)) -> -Red(x))\nTEXT: The mouse is kind.\nFOL: Kind(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse is round.\nFOL: round(mouse)\nTEXT: Round things are not kind.\nFOL: all x. (round(x) -> -kind(x))\nTEXT: If something is round and not kind then it is young.\nFOL: all x. (round(x) & -kind(x) -> young(x))\nTEXT: If something is young and round then it is not red.\nFOL: all x. (young(x) & round(x) -> -red(x))\nTEXT: The mouse is kind.\nFOL: kind(mouse)\n</EVALUATE>"
  ]
 },
 {
  "index": 122,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle is kind.\nFOL: Kind(baldEagle)\nTEXT: The bald eagle is young.\nFOL: Young(baldEagle)\nTEXT: The bald eagle sees the cat.\nFOL: Sees(baldEagle, cat)\nTEXT: The bald eagle visits the cat.\nFOL: Visits(baldEagle, cat)\nTEXT: The bald eagle visits the dog.\nFOL: Visits(baldEagle, dog)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat sees the dog.\nFOL: Sees(cat, dog)\nTEXT: The dog eats the bald eagle.\nFOL: Eats(dog, baldEagle)\nTEXT: The dog eats the cat.\nFOL: Eats(dog, cat)\nTEXT: The dog is cold.\nFOL: Cold(dog)\nTEXT: The dog is round.\nFOL: Round(dog)\nTEXT: The dog sees the bald eagle.\nFOL: Sees(dog, baldEagle)\nTEXT: The dog sees the cat.\nFOL: Sees(dog, cat)\nTEXT: The dog visits the bald eagle.\nFOL: Visits(dog, baldEagle)\nTEXT: The dog visits the cat.\nFOL: Visits(dog, cat)\nTEXT: If the dog visits the cat then the cat eats the dog.\nFOL: Visits(dog, cat) -> Eats(cat, dog)\nTEXT: If something is kind then it sees the dog.\nFOL: Kind(x) -> Sees(x, dog)\nTEXT: If the bald eagle sees the dog then the dog is cold.\nFOL: Sees(baldEagle, dog) -> Cold(dog)\nTEXT: If something visits the cat and the cat eats the dog then the dog is kind.\nFOL: (Visits(x, cat) & Eats(cat, dog)) -> Kind(dog)\nTEXT: If something eats the cat and it is round then the cat is rough.\nFOL: (Eats(x, cat) & Round(x)) -> Rough(cat)\nTEXT: If something visits the cat and the cat visits the bald eagle then the cat visits the dog.\nFOL: (Visits(x, cat) & Visits(cat, baldEagle)) -> Visits(x, dog)\nTEXT: The cat does not eat the dog.\nFOL: -Eats(cat, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle is kind.\nFOL: Kind(baldEagle)\nTEXT: The bald eagle is young.\nFOL: Young(baldEagle)\nTEXT: The bald eagle sees the cat.\nFOL: Sees(baldEagle, cat)\nTEXT: The bald eagle visits the cat.\nFOL: Visits(baldEagle, cat)\nTEXT: The bald eagle visits the dog.\nFOL: Visits(baldEagle, dog)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat sees the dog.\nFOL: Sees(cat, dog)\nTEXT: The dog eats the bald eagle.\nFOL: Eats(dog, baldEagle)\nTEXT: The dog eats the cat.\nFOL: Eats(dog, cat)\nTEXT: The dog is cold.\nFOL: Cold(dog)\nTEXT: The dog is round.\nFOL: Round(dog)\nTEXT: The dog sees the bald eagle.\nFOL: Sees(dog, baldEagle)\nTEXT: The dog sees the cat.\nFOL: Sees(dog, cat)\nTEXT: The dog visits the bald eagle.\nFOL: Visits(dog, baldEagle)\nTEXT: The dog visits the cat.\nFOL: Visits(dog, cat)\nTEXT: If the dog visits the cat then the cat eats the dog.\nFOL: Visits(dog, cat) -> Eats(cat, dog)\nTEXT: If something is kind then it sees the dog.\nFOL: all x. (Kind(x) -> Sees(x, dog))\nTEXT: If the bald eagle sees the dog then the dog is cold.\nFOL: Sees(baldEagle, dog) -> Cold(dog)\nTEXT: If something visits the cat and the cat eats the dog then the dog is kind.\nFOL: (Visits(x, cat) & Eats(cat, dog)) -> Kind(dog)\nTEXT: If something eats the cat and it is round then the cat is rough.\nFOL: (Eats(x, cat) & Round(x)) -> Rough(cat)\nTEXT: If something visits the cat and the cat visits the bald eagle then the cat visits the dog.\nFOL: (Visits(x, cat) & Visits(cat, baldEagle)) -> Visits(x, dog)\nTEXT: The cat does not eat the dog.\nFOL: -Eats(cat, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle is kind.\nFOL: Kind(baldEagle)\nTEXT: The bald eagle is young.\nFOL: Young(baldEagle)\nTEXT: The bald eagle sees the cat.\nFOL: Sees(baldEagle, cat)\nTEXT: The bald eagle visits the cat.\nFOL: Visits(baldEagle, cat)\nTEXT: The bald eagle visits the dog.\nFOL: Visits(baldEagle, dog)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat sees the dog.\nFOL: Sees(cat, dog)\nTEXT: The dog eats the bald eagle.\nFOL: Eats(dog, baldEagle)\nTEXT: The dog eats the cat.\nFOL: Eats(dog, cat)\nTEXT: The dog is cold.\nFOL: Cold(dog)\nTEXT: The dog is round.\nFOL: Round(dog)\nTEXT: The dog sees the bald eagle.\nFOL: Sees(dog, baldEagle)\nTEXT: The dog sees the cat.\nFOL: Sees(dog, cat)\nTEXT: The dog visits the bald eagle.\nFOL: Visits(dog, baldEagle)\nTEXT: The dog visits the cat.\nFOL: Visits(dog, cat)\nTEXT: If the dog visits the cat then the cat eats the dog.\nFOL: Visits(dog, cat) -> Eats(cat, dog)\nTEXT: If something is kind then it sees the dog.\nFOL: all x. (Kind(x) -> Sees(x, dog))\nTEXT: If the bald eagle sees the dog then the dog is cold.\nFOL: Sees(baldEagle, dog) -> Cold(dog)\nTEXT: If something visits the cat and the cat eats the dog then the dog is kind.\nFOL: all x. ((Visits(x, cat) & Eats(cat, dog)) -> Kind(dog))\nTEXT: If something eats the cat and it is round then the cat is rough.\nFOL: all x. ((Eats(x, cat) & Round(x)) -> Rough(cat))\nTEXT: If something visits the cat and the cat visits the bald eagle then the cat visits the dog.\nFOL: all x. ((Visits(x, cat) & Visits(cat, baldEagle)) -> Visits(x, dog))\nTEXT: The cat does not eat the dog.\nFOL: -Eats(cat, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle is kind.\nFOL: Kind(baldEagle)\nTEXT: The bald eagle is young.\nFOL: Young(baldEagle)\nTEXT: The bald eagle sees the cat.\nFOL: Sees(baldEagle, cat)\nTEXT: The bald eagle visits the cat.\nFOL: Visits(baldEagle, cat)\nTEXT: The bald eagle visits the dog.\nFOL: Visits(baldEagle, dog)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat sees the dog.\nFOL: Sees(cat, dog)\nTEXT: The dog eats the bald eagle.\nFOL: Eats(dog, baldEagle)\nTEXT: The dog eats the cat.\nFOL: Eats(dog, cat)\nTEXT: The dog is cold.\nFOL: Cold(dog)\nTEXT: The dog is round.\nFOL: Round(dog)\nTEXT: The dog sees the bald eagle.\nFOL: Sees(dog, baldEagle)\nTEXT: The dog sees the cat.\nFOL: Sees(dog, cat)\nTEXT: The dog visits the bald eagle.\nFOL: Visits(dog, baldEagle)\nTEXT: The dog visits the cat.\nFOL: Visits(dog, cat)\nTEXT: If the dog visits the cat then the cat eats the dog.\nFOL: Visits(dog, cat) -> Eats(cat, dog)\nTEXT: If something is kind then it sees the dog.\nFOL: all x. (Kind(x) -> Sees(x, dog))\nTEXT: If the bald eagle sees the dog then the dog is cold.\nFOL: Sees(baldEagle, dog) -> Cold(dog)\nTEXT: If something visits the cat and the cat eats the dog then the dog is kind.\nFOL: all x. (Visits(x, cat) & Eats(cat, dog) -> Kind(dog))\nTEXT: If something eats the cat and it is round then the cat is rough.\nFOL: all x. (Eats(x, cat) & Round(x) -> Rough(cat))\nTEXT: If something visits the cat and the cat visits the bald eagle then the cat visits the dog.\nFOL: all x. (Visits(x, cat) & Visits(cat, baldEagle) -> Visits(x, dog))\nTEXT: The cat does not eat the dog.\nFOL: -Eats(cat, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle is kind.\nFOL: Kind(baldEagle)\nTEXT: The bald eagle is young.\nFOL: Young(baldEagle)\nTEXT: The bald eagle sees the cat.\nFOL: Sees(baldEagle, cat)\nTEXT: The bald eagle visits the cat.\nFOL: Visits(baldEagle, cat)\nTEXT: The bald eagle visits the dog.\nFOL: Visits(baldEagle, dog)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat sees the dog.\nFOL: Sees(cat, dog)\nTEXT: The dog eats the bald eagle.\nFOL: Eats(dog, baldEagle)\nTEXT: The dog eats the cat.\nFOL: Eats(dog, cat)\nTEXT: The dog is cold.\nFOL: Cold(dog)\nTEXT: The dog is round.\nFOL: Round(dog)\nTEXT: The dog sees the bald eagle.\nFOL: Sees(dog, baldEagle)\nTEXT: The dog sees the cat.\nFOL: Sees(dog, cat)\nTEXT: The dog visits the bald eagle.\nFOL: Visits(dog, baldEagle)\nTEXT: The dog visits the cat.\nFOL: Visits(dog, cat)\nTEXT: If the dog visits the cat then the cat eats the dog.\nFOL: (Visits(dog, cat) -> Eats(cat, dog))\nTEXT: If something is kind then it sees the dog.\nFOL: all x. (Kind(x) -> Sees(x, dog))\nTEXT: If the bald eagle sees the dog then the dog is cold.\nFOL: (Sees(baldEagle, dog) -> Cold(dog))\nTEXT: If something visits the cat and the cat eats the dog then the dog is kind.\nFOL: all x. ((Visits(x, cat) & Eats(cat, dog)) -> Kind(dog))\nTEXT: If something eats the cat and it is round then the cat is rough.\nFOL: all x. ((Eats(x, cat) & Round(x)) -> Rough(cat))\nTEXT: If something visits the cat and the cat visits the bald eagle then the cat visits the dog.\nFOL: all x. ((Visits(x, cat) & Visits(cat, baldEagle)) -> Visits(x, dog))\nTEXT: The cat does not eat the dog.\nFOL: -Eats(cat, dog)\n</EVALUATE>"
  ]
 },
 {
  "index": 123,
  "responses": [
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: Rough(cat)\nTEXT: The cat is round.\nFOL: Round(cat)\nTEXT: The dog does not chase the lion.\nFOL: -Chase(dog, lion)\nTEXT: The dog eats the cat.\nFOL: Eat(dog, cat)\nTEXT: The dog does not like the cat.\nFOL: -Like(dog, cat)\nTEXT: The lion chases the dog.\nFOL: Chase(lion, dog)\nTEXT: The lion is green.\nFOL: Green(lion)\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: (Green(x) & Like(x, lion)) -> Eat(x, dog)\nTEXT: If someone is round then they chase the lion.\nFOL: Round(x) -> Chase(x, lion)\nTEXT: If someone chases the lion then they like the dog.\nFOL: Chase(x, lion) -> Like(x, dog)\nTEXT: If someone eats the dog then they are not round.\nFOL: Eat(x, dog) -> -Round(x)\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: -Like(dog, lion) -> Red(lion)\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: (Like(x, lion) & Like(lion, cat)) -> Chase(x, dog)\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: (Like(x, lion) & Green(lion)) -> Round(lion)\nTEXT: If someone likes the dog then they eat the lion.\nFOL: Like(x, dog) -> Eat(x, lion)\nTEXT: The cat likes the lion.\nFOL: Like(cat, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: Rough(cat)\nTEXT: The cat is round.\nFOL: Round(cat)\nTEXT: The dog does not chase the lion.\nFOL: -Chase(dog, lion)\nTEXT: The dog eats the cat.\nFOL: Eat(dog, cat)\nTEXT: The dog does not like the cat.\nFOL: -Like(dog, cat)\nTEXT: The lion chases the dog.\nFOL: Chase(lion, dog)\nTEXT: The lion is green.\nFOL: Green(lion)\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x. ((Green(x) & Like(x, lion)) -> Eat(x, dog))\nTEXT: If someone is round then they chase the lion.\nFOL: all x. (Round(x) -> Chase(x, lion))\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x. (Chase(x, lion) -> Like(x, dog))\nTEXT: If someone eats the dog then they are not round.\nFOL: all x. (Eat(x, dog) -> -Round(x))\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: -Like(dog, lion) -> Red(lion)\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x. ((Like(x, lion) & Like(lion, cat)) -> Chase(x, dog))\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x. ((Like(x, lion) & Green(lion)) -> Round(lion))\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x. (Like(x, dog) -> Eat(x, lion))\nTEXT: The cat likes the lion.\nFOL: Like(cat, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: Rough(cat)\nTEXT: The cat is round.\nFOL: Round(cat)\nTEXT: The dog does not chase the lion.\nFOL: -Chase(dog, lion)\nTEXT: The dog eats the cat.\nFOL: Eat(dog, cat)\nTEXT: The dog does not like the cat.\nFOL: -Like(dog, cat)\nTEXT: The lion chases the dog.\nFOL: Chase(lion, dog)\nTEXT: The lion is green.\nFOL: Green(lion)\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x. (Green(x) & Like(x, lion) -> Eat(x, dog))\nTEXT: If someone is round then they chase the lion.\nFOL: all x. (Round(x) -> Chase(x, lion))\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x. (Chase(x, lion) -> Like(x, dog))\nTEXT: If someone eats the dog then they are not round.\nFOL: all x. (Eat(x, dog) -> -Round(x))\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: -Like(dog, lion) -> Red(lion)\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x. ((Like(x, lion) & Like(lion, cat)) -> Chase(x, dog))\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x. ((Like(x, lion) & Green(lion)) -> Round(lion))\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x. (Like(x, dog) -> Eat(x, lion))\nTEXT: The cat likes the lion.\nFOL: Like(cat, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: Rough(cat)\nTEXT: The cat is round.\nFOL: Round(cat)\nTEXT: The dog does not chase the lion.\nFOL: -Chase(dog, lion)\nTEXT: The dog eats the cat.\nFOL: Eat(dog, cat)\nTEXT: The dog does not like the cat.\nFOL: -Like(dog, cat)\nTEXT: The lion chases the dog.\nFOL: Chase(lion, dog)\nTEXT: The lion is green.\nFOL: Green(lion)\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: (Green(x) & Like(x, lion) -> Eat(x, dog))\nTEXT: If someone is round then they chase the lion.\nFOL: all x. (Round(x) -> Chase(x, lion))\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x. (Chase(x, lion) -> Like(x, dog))\nTEXT: If someone eats the dog then they are not round.\nFOL: all x. (Eat(x, dog) -> -Round(x))\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: -Like(dog, lion) -> Red(lion)\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x. ((Like(x, lion) & Like(lion, cat)) -> Chase(x, dog))\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x. ((Like(x, lion) & Green(lion)) -> Round(lion))\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x. (Like(x, dog) -> Eat(x, lion))\nTEXT: The cat likes the lion.\nFOL: Like(cat, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: Rough(cat)\nTEXT: The cat is round.\nFOL: Round(cat)\nTEXT: The dog does not chase the lion.\nFOL: -Chase(dog, lion)\nTEXT: The dog eats the cat.\nFOL: Eat(dog, cat)\nTEXT: The dog does not like the cat.\nFOL: -Like(dog, cat)\nTEXT: The lion chases the dog.\nFOL: Chase(lion, dog)\nTEXT: The lion is green.\nFOL: Green(lion)\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x. (Green(x) & Like(x, lion) -> Eat(x, dog))\nTEXT: If someone is round then they chase the lion.\nFOL: all x. (Round(x) -> Chase(x, lion))\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x. (Chase(x, lion) -> Like(x, dog))\nTEXT: If someone eats the dog then they are not round.\nFOL: all x. (Eat(x, dog) -> -Round(x))\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: -Like(dog, lion) -> Red(lion)\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x. (Like(x, lion) & Like(lion, cat) -> Chase(x, dog))\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x. (Like(x, lion) & Green(lion) -> Round(lion))\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x. (Like(x, dog) -> Eat(x, lion))\nTEXT: The cat likes the lion.\nFOL: Like(cat, lion)\n</EVALUATE>"
  ]
 },
 {
  "index": 124,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is smart.\nFOL: Smart(charlie)\nTEXT: If Bob is furry then Bob is cold.\nFOL: Furry(bob) -> Cold(bob)\nTEXT: If Bob is furry then Bob is kind.\nFOL: Furry(bob) -> Kind(bob)\nTEXT: All smart people are furry.\nFOL: all x. (Smart(x) -> Furry(x))\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If someone is cold and not smart then they are kind.\nFOL: (Cold(x) & -Smart(x)) -> Kind(x)\nTEXT: All smart, cold people are white.\nFOL: all x. ((Smart(x) & Cold(x)) -> White(x))\nTEXT: Kind, cold people are white.\nFOL: (Kind(x) & Cold(x)) -> White(x)\nTEXT: If someone is smart and not cold then they are not white.\nFOL: (Smart(x) & -Cold(x)) -> -White(x)\nTEXT: Charlie is not big.\nFOL: -Big(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is smart.\nFOL: Smart(charlie)\nTEXT: If Bob is furry then Bob is cold.\nFOL: Furry(bob) -> Cold(bob)\nTEXT: If Bob is furry then Bob is kind.\nFOL: Furry(bob) -> Kind(bob)\nTEXT: All smart people are furry.\nFOL: all x. (Smart(x) -> Furry(x))\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If someone is cold and not smart then they are kind.\nFOL: all x. ((Cold(x) & -Smart(x)) -> Kind(x))\nTEXT: All smart, cold people are white.\nFOL: all x. ((Smart(x) & Cold(x)) -> White(x))\nTEXT: Kind, cold people are white.\nFOL: all x. ((Kind(x) & Cold(x)) -> White(x))\nTEXT: If someone is smart and not cold then they are not white.\nFOL: all x. ((Smart(x) & -Cold(x)) -> -White(x))\nTEXT: Charlie is not big.\nFOL: -Big(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is smart.\nFOL: Smart(charlie)\nTEXT: If Bob is furry then Bob is cold.\nFOL: Furry(bob) -> Cold(bob)\nTEXT: If Bob is furry then Bob is kind.\nFOL: Furry(bob) -> Kind(bob)\nTEXT: All smart people are furry.\nFOL: all x. (Smart(x) -> Furry(x))\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If someone is cold and not smart then they are kind.\nFOL: (Cold(x) & -Smart(x)) -> Kind(x)\nTEXT: All smart, cold people are white.\nFOL: all x. (Smart(x) & Cold(x) -> White(x))\nTEXT: Kind, cold people are white.\nFOL: (Kind(x) & Cold(x)) -> White(x)\nTEXT: If someone is smart and not cold then they are not white.\nFOL: (Smart(x) & -Cold(x)) -> -White(x)\nTEXT: Charlie is not big.\nFOL: -Big(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is smart.\nFOL: Smart(charlie)\nTEXT: If Bob is furry then Bob is cold.\nFOL: (Furry(bob) -> Cold(bob))\nTEXT: If Bob is furry then Bob is kind.\nFOL: (Furry(bob) -> Kind(bob))\nTEXT: All smart people are furry.\nFOL: all x. (Smart(x) -> Furry(x))\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If someone is cold and not smart then they are kind.\nFOL: all x. ((Cold(x) & -Smart(x)) -> Kind(x))\nTEXT: All smart, cold people are white.\nFOL: all x. ((Smart(x) & Cold(x)) -> White(x))\nTEXT: Kind, cold people are white.\nFOL: all x. ((Kind(x) & Cold(x)) -> White(x))\nTEXT: If someone is smart and not cold then they are not white.\nFOL: all x. ((Smart(x) & -Cold(x)) -> -White(x))\nTEXT: Charlie is not big.\nFOL: -Big(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is smart.\nFOL: Smart(charlie)\nTEXT: If Bob is furry then Bob is cold.\nFOL: Furry(bob) -> Cold(bob)\nTEXT: If Bob is furry then Bob is kind.\nFOL: Furry(bob) -> Kind(bob)\nTEXT: All smart people are furry.\nFOL: all x. (Smart(x) -> Furry(x))\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If someone is cold and not smart then they are kind.\nFOL: (Cold(x) & -Smart(x)) -> Kind(x)\nTEXT: All smart, cold people are white.\nFOL: all x. ((Smart(x) & Cold(x)) -> White(x))\nTEXT: Kind, cold people are white.\nFOL: all x. ((Kind(x) & Cold(x)) -> White(x))\nTEXT: If someone is smart and not cold then they are not white.\nFOL: (Smart(x) & -Cold(x)) -> -White(x)\nTEXT: Charlie is not big.\nFOL: -Big(charlie)\n</EVALUATE>"
  ]
 },
 {
  "index": 125,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Bob is green.\nFOL: Green(bob)\nTEXT: Erin is not blue.\nFOL: -Blue(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is not nice.\nFOL: -Nice(erin)\nTEXT: Gary is not green.\nFOL: -Green(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: If someone is green and blue then they are round.\nFOL: (Green(x) & Blue(x)) -> Round(x)\nTEXT: If Erin is not green then Erin is blue.\nFOL: -Green(erin) -> Blue(erin)\nTEXT: If someone is green and round then they are not cold.\nFOL: (Green(x) & Round(x)) -> -Cold(x)\nTEXT: If someone is red then they are not blue.\nFOL: Red(x) -> -Blue(x)\nTEXT: If Bob is not green then Bob is nice.\nFOL: -Green(bob) -> Nice(bob)\nTEXT: If someone is blue and not cold then they are nice.\nFOL: (Blue(x) & -Cold(x)) -> Nice(x)\nTEXT: If Erin is nice then Erin is not smart.\nFOL: Nice(erin) -> -Smart(erin)\nTEXT: If Erin is red then Erin is smart.\nFOL: Red(erin) -> Smart(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Bob is green.\nFOL: Green(bob)\nTEXT: Erin is not blue.\nFOL: -Blue(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is not nice.\nFOL: -Nice(erin)\nTEXT: Gary is not green.\nFOL: -Green(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: If someone is green and blue then they are round.\nFOL: all x. (Green(x) & Blue(x) -> Round(x))\nTEXT: If Erin is not green then Erin is blue.\nFOL: -Green(erin) -> Blue(erin)\nTEXT: If someone is green and round then they are not cold.\nFOL: all x. (Green(x) & Round(x) -> -Cold(x))\nTEXT: If someone is red then they are not blue.\nFOL: all x. (Red(x) -> -Blue(x))\nTEXT: If Bob is not green then Bob is nice.\nFOL: -Green(bob) -> Nice(bob)\nTEXT: If someone is blue and not cold then they are nice.\nFOL: all x. (Blue(x) & -Cold(x) -> Nice(x))\nTEXT: If Erin is nice then Erin is not smart.\nFOL: Nice(erin) -> -Smart(erin)\nTEXT: If Erin is red then Erin is smart.\nFOL: Red(erin) -> Smart(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Bob is green.\nFOL: Green(bob)\nTEXT: Erin is not blue.\nFOL: -Blue(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is not nice.\nFOL: -Nice(erin)\nTEXT: Gary is not green.\nFOL: -Green(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: If someone is green and blue then they are round.\nFOL: all x. ((Green(x) & Blue(x)) -> Round(x))\nTEXT: If Erin is not green then Erin is blue.\nFOL: -Green(erin) -> Blue(erin)\nTEXT: If someone is green and round then they are not cold.\nFOL: all x. ((Green(x) & Round(x)) -> -Cold(x))\nTEXT: If someone is red then they are not blue.\nFOL: all x. (Red(x) -> -Blue(x))\nTEXT: If Bob is not green then Bob is nice.\nFOL: -Green(bob) -> Nice(bob)\nTEXT: If someone is blue and not cold then they are nice.\nFOL: all x. ((Blue(x) & -Cold(x)) -> Nice(x))\nTEXT: If Erin is nice then Erin is not smart.\nFOL: Nice(erin) -> -Smart(erin)\nTEXT: If Erin is red then Erin is smart.\nFOL: Red(erin) -> Smart(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Bob is green.\nFOL: Green(bob)\nTEXT: Erin is not blue.\nFOL: -Blue(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is not nice.\nFOL: -Nice(erin)\nTEXT: Gary is not green.\nFOL: -Green(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: If someone is green and blue then they are round.\nFOL: (Green(x) & Blue(x)) -> Round(x)\nTEXT: If Erin is not green then Erin is blue.\nFOL: -Green(erin) -> Blue(erin)\nTEXT: If someone is green and round then they are not cold.\nFOL: (Green(x) & Round(x)) -> -Cold(x)\nTEXT: If someone is red then they are not blue.\nFOL: Red(x) -> -Blue(x)\nTEXT: If Bob is not green then Bob is nice.\nFOL: -Green(bob) -> Nice(bob)\nTEXT: If someone is blue and not cold then they are nice.\nFOL: (Blue(x) & -Cold(x)) -> Nice(x)\nTEXT: If Erin is nice then Erin is not smart.\nFOL: Nice(erin) -> -Smart(erin)\nTEXT: If Erin is red then Erin is smart.\nFOL: Red(erin) -> Smart(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Bob is green.\nFOL: Green(bob)\nTEXT: Erin is not blue.\nFOL: -Blue(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is not nice.\nFOL: -Nice(erin)\nTEXT: Gary is not green.\nFOL: -Green(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: If someone is green and blue then they are round.\nFOL: all x. (Green(x) & Blue(x) -> Round(x))\nTEXT: If Erin is not green then Erin is blue.\nFOL: -Green(erin) -> Blue(erin)\nTEXT: If someone is green and round then they are not cold.\nFOL: all x. (Green(x) & Round(x) -> -Cold(x))\nTEXT: If someone is red then they are not blue.\nFOL: all x. (Red(x) -> -Blue(x))\nTEXT: If Bob is not green then Bob is nice.\nFOL: -Green(bob) -> Nice(bob)\nTEXT: If someone is blue and not cold then they are nice.\nFOL: all x. (Blue(x) & -Cold(x) -> Nice(x))\nTEXT: If Erin is nice then Erin is not smart.\nFOL: Nice(erin) -> -Smart(erin)\nTEXT: If Erin is red then Erin is smart.\nFOL: Red(erin) -> Smart(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\n</EVALUATE>"
  ]
 },
 {
  "index": 126,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x. (Blue(x) & Cold(x) -> -Big(x))\nTEXT: Fiona is not big.\nFOL: -Big(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x. ((Blue(x) & Cold(x)) -> -Big(x))\nTEXT: Fiona is not big.\nFOL: -Big(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: If someone is blue and cold then they are not big.\nFOL: (Blue(x) & Cold(x) -> -Big(x))\nTEXT: Fiona is not big.\nFOL: -Big(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: If someone is blue and cold then they are not big.\nFOL: (Blue(x) & Cold(x)) -> -Big(x)\nTEXT: Fiona is not big.\nFOL: -Big(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: If someone is blue and cold then they are not big.\nFOL: Blue(x) & Cold(x) -> -Big(x)\nTEXT: Fiona is not big.\nFOL: -Big(fiona)\n</EVALUATE>"
  ]
 },
 {
  "index": 127,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle does not chase the cow.\nFOL: -Chase(baldEagle, cow)\nTEXT: The bald eagle is not kind.\nFOL: -Kind(baldEagle)\nTEXT: The bald eagle is not red.\nFOL: -Red(baldEagle)\nTEXT: The bald eagle likes the cow.\nFOL: Like(baldEagle, cow)\nTEXT: The bald eagle likes the mouse.\nFOL: Like(baldEagle, mouse)\nTEXT: The cow chases the bald eagle.\nFOL: Chase(cow, baldEagle)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow likes the mouse.\nFOL: Like(cow, mouse)\nTEXT: The cow visits the mouse.\nFOL: Visit(cow, mouse)\nTEXT: The mouse chases the cow.\nFOL: Chase(mouse, cow)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: The mouse does not like the cow.\nFOL: -Like(mouse, cow)\nTEXT: If the mouse chases the bald eagle and the mouse is kind then the mouse does not like the cow.\nFOL: (Chase(mouse, baldEagle) & Kind(mouse)) -> -Like(mouse, cow)\nTEXT: If the mouse is young then the mouse likes the cow.\nFOL: Young(mouse) -> Like(mouse, cow)\nTEXT: If someone chases the mouse then the mouse likes the cow.\nFOL: all x. (Chase(x, mouse) -> Like(mouse, cow))\nTEXT: If someone is red and not green then they do not chase the cow.\nFOL: all x. ((Red(x) & -Green(x)) -> -Chase(x, cow))\nTEXT: If someone visits the mouse then the mouse likes the bald eagle.\nFOL: all x. (Visit(x, mouse) -> Like(mouse, baldEagle))\nTEXT: If someone likes the bald eagle then they are red.\nFOL: all x. (Like(x, baldEagle) -> Red(x))\nTEXT: If someone visits the bald eagle then the bald eagle does not chase the mouse.\nFOL: all x. (Visit(x, baldEagle) -> -Chase(baldEagle, mouse))\nTEXT: If someone is red then they visit the cow.\nFOL: all x. (Red(x) -> Visit(x, cow))\nTEXT: The mouse likes the bald eagle.\nFOL: Like(mouse, baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle does not chase the cow.\nFOL: -Chase(baldEagle, cow)\nTEXT: The bald eagle is not kind.\nFOL: -Kind(baldEagle)\nTEXT: The bald eagle is not red.\nFOL: -Red(baldEagle)\nTEXT: The bald eagle likes the cow.\nFOL: Likes(baldEagle, cow)\nTEXT: The bald eagle likes the mouse.\nFOL: Likes(baldEagle, mouse)\nTEXT: The cow chases the bald eagle.\nFOL: Chase(cow, baldEagle)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow likes the mouse.\nFOL: Likes(cow, mouse)\nTEXT: The cow visits the mouse.\nFOL: Visit(cow, mouse)\nTEXT: The mouse chases the cow.\nFOL: Chase(mouse, cow)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: The mouse does not like the cow.\nFOL: -Likes(mouse, cow)\nTEXT: If the mouse chases the bald eagle and the mouse is kind then the mouse does not like the cow.\nFOL: (Chase(mouse, baldEagle) & Kind(mouse)) -> -Likes(mouse, cow)\nTEXT: If the mouse is young then the mouse likes the cow.\nFOL: Young(mouse) -> Likes(mouse, cow)\nTEXT: If someone chases the mouse then the mouse likes the cow.\nFOL: all x. (Chase(x, mouse) -> Likes(mouse, cow))\nTEXT: If someone is red and not green then they do not chase the cow.\nFOL: all x. ((Red(x) & -Green(x)) -> -Chase(x, cow))\nTEXT: If someone visits the mouse then the mouse likes the bald eagle.\nFOL: all x. (Visit(x, mouse) -> Likes(mouse, baldEagle))\nTEXT: If someone likes the bald eagle then they are red.\nFOL: all x. (Likes(x, baldEagle) -> Red(x))\nTEXT: If someone visits the bald eagle then the bald eagle does not chase the mouse.\nFOL: all x. (Visit(x, baldEagle) -> -Chase(baldEagle, mouse))\nTEXT: If someone is red then they visit the cow.\nFOL: all x. (Red(x) -> Visit(x, cow))\nTEXT: The mouse likes the bald eagle.\nFOL: Likes(mouse, baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle does not chase the cow.\nFOL: -Chase(baldEagle, cow)\nTEXT: The bald eagle is not kind.\nFOL: -Kind(baldEagle)\nTEXT: The bald eagle is not red.\nFOL: -Red(baldEagle)\nTEXT: The bald eagle likes the cow.\nFOL: Like(baldEagle, cow)\nTEXT: The bald eagle likes the mouse.\nFOL: Like(baldEagle, mouse)\nTEXT: The cow chases the bald eagle.\nFOL: Chase(cow, baldEagle)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow likes the mouse.\nFOL: Like(cow, mouse)\nTEXT: The cow visits the mouse.\nFOL: Visit(cow, mouse)\nTEXT: The mouse chases the cow.\nFOL: Chase(mouse, cow)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: The mouse does not like the cow.\nFOL: -Like(mouse, cow)\nTEXT: If the mouse chases the bald eagle and the mouse is kind then the mouse does not like the cow.\nFOL: (Chase(mouse, baldEagle) & Kind(mouse) -> -Like(mouse, cow))\nTEXT: If the mouse is young then the mouse likes the cow.\nFOL: (Young(mouse) -> Like(mouse, cow))\nTEXT: If someone chases the mouse then the mouse likes the cow.\nFOL: all x. (Chase(x, mouse) -> Like(mouse, cow))\nTEXT: If someone is red and not green then they do not chase the cow.\nFOL: all x. ((Red(x) & -Green(x)) -> -Chase(x, cow))\nTEXT: If someone visits the mouse then the mouse likes the bald eagle.\nFOL: all x. (Visit(x, mouse) -> Like(mouse, baldEagle))\nTEXT: If someone likes the bald eagle then they are red.\nFOL: all x. (Like(x, baldEagle) -> Red(x))\nTEXT: If someone visits the bald eagle then the bald eagle does not chase the mouse.\nFOL: all x. (Visit(x, baldEagle) -> -Chase(baldEagle, mouse))\nTEXT: If someone is red then they visit the cow.\nFOL: all x. (Red(x) -> Visit(x, cow))\nTEXT: The mouse likes the bald eagle.\nFOL: Like(mouse, baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle does not chase the cow.\nFOL: -Chase(baldEagle, cow)\nTEXT: The bald eagle is not kind.\nFOL: -Kind(baldEagle)\nTEXT: The bald eagle is not red.\nFOL: -Red(baldEagle)\nTEXT: The bald eagle likes the cow.\nFOL: Like(baldEagle, cow)\nTEXT: The bald eagle likes the mouse.\nFOL: Like(baldEagle, mouse)\nTEXT: The cow chases the bald eagle.\nFOL: Chase(cow, baldEagle)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow likes the mouse.\nFOL: Like(cow, mouse)\nTEXT: The cow visits the mouse.\nFOL: Visit(cow, mouse)\nTEXT: The mouse chases the cow.\nFOL: Chase(mouse, cow)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: The mouse does not like the cow.\nFOL: -Like(mouse, cow)\nTEXT: If the mouse chases the bald eagle and the mouse is kind then the mouse does not like the cow.\nFOL: (Chase(mouse, baldEagle) & Kind(mouse)) -> -Like(mouse, cow)\nTEXT: If the mouse is young then the mouse likes the cow.\nFOL: Young(mouse) -> Like(mouse, cow)\nTEXT: If someone chases the mouse then the mouse likes the cow.\nFOL: all x. (Chase(x, mouse) -> Like(mouse, cow))\nTEXT: If someone is red and not green then they do not chase the cow.\nFOL: all x. (Red(x) & -Green(x) -> -Chase(x, cow))\nTEXT: If someone visits the mouse then the mouse likes the bald eagle.\nFOL: all x. (Visit(x, mouse) -> Like(mouse, baldEagle))\nTEXT: If someone likes the bald eagle then they are red.\nFOL: all x. (Like(x, baldEagle) -> Red(x))\nTEXT: If someone visits the bald eagle then the bald eagle does not chase the mouse.\nFOL: all x. (Visit(x, baldEagle) -> -Chase(baldEagle, mouse))\nTEXT: If someone is red then they visit the cow.\nFOL: all x. (Red(x) -> Visit(x, cow))\nTEXT: The mouse likes the bald eagle.\nFOL: Like(mouse, baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle does not chase the cow.\nFOL: -Chase(baldEagle, cow)\nTEXT: The bald eagle is not kind.\nFOL: -Kind(baldEagle)\nTEXT: The bald eagle is not red.\nFOL: -Red(baldEagle)\nTEXT: The bald eagle likes the cow.\nFOL: Like(baldEagle, cow)\nTEXT: The bald eagle likes the mouse.\nFOL: Like(baldEagle, mouse)\nTEXT: The cow chases the bald eagle.\nFOL: Chase(cow, baldEagle)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow likes the mouse.\nFOL: Like(cow, mouse)\nTEXT: The cow visits the mouse.\nFOL: Visit(cow, mouse)\nTEXT: The mouse chases the cow.\nFOL: Chase(mouse, cow)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: The mouse does not like the cow.\nFOL: -Like(mouse, cow)\nTEXT: If the mouse chases the bald eagle and the mouse is kind then the mouse does not like the cow.\nFOL: (Chase(mouse, baldEagle) & Kind(mouse)) -> -Like(mouse, cow)\nTEXT: If the mouse is young then the mouse likes the cow.\nFOL: -Young(mouse) -> Like(mouse, cow)\nTEXT: If someone chases the mouse then the mouse likes the cow.\nFOL: all x. (Chase(x, mouse) -> Like(mouse, cow))\nTEXT: If someone is red and not green then they do not chase the cow.\nFOL: all x. ((Red(x) & -Green(x)) -> -Chase(x, cow))\nTEXT: If someone visits the mouse then the mouse likes the bald eagle.\nFOL: all x. (Visit(x, mouse) -> Like(mouse, baldEagle))\nTEXT: If someone likes the bald eagle then they are red.\nFOL: all x. (Like(x, baldEagle) -> Red(x))\nTEXT: If someone visits the bald eagle then the bald eagle does not chase the mouse.\nFOL: all x. (Visit(x, baldEagle) -> -Chase(baldEagle, mouse))\nTEXT: If someone is red then they visit the cow.\nFOL: all x. (Red(x) -> Visit(x, cow))\nTEXT: The mouse likes the bald eagle.\nFOL: Like(mouse, baldEagle)\n</EVALUATE>"
  ]
 },
 {
  "index": 128,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is quiet.\nFOL: Quiet(anne)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Fiona is smart.\nFOL: Smart(fiona)\nTEXT: Gary is green.\nFOL: Green(gary)\nTEXT: Nice, blue things are kind.\nFOL: all x. (Nice(x) & Blue(x) -> Kind(x))\nTEXT: All kind things are blue.\nFOL: all x. (Kind(x) -> Blue(x))\nTEXT: Blue, smart things are nice.\nFOL: all x. (Blue(x) & Smart(x) -> Nice(x))\nTEXT: All kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: Big, kind things are quiet.\nFOL: all x. (Big(x) & Kind(x) -> Quiet(x))\nTEXT: If Fiona is green and Fiona is nice then Fiona is quiet.\nFOL: (Green(fiona) & Nice(fiona) -> Quiet(fiona))\nTEXT: If something is nice then it is big.\nFOL: all x. (Nice(x) -> Big(x))\nTEXT: Blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is quiet.\nFOL: Quiet(anne)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Fiona is smart.\nFOL: Smart(fiona)\nTEXT: Gary is green.\nFOL: Green(gary)\nTEXT: Nice, blue things are kind.\nFOL: all x. ((Nice(x) & Blue(x)) -> Kind(x))\nTEXT: All kind things are blue.\nFOL: all x. (Kind(x) -> Blue(x))\nTEXT: Blue, smart things are nice.\nFOL: all x. ((Blue(x) & Smart(x)) -> Nice(x))\nTEXT: All kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: Big, kind things are quiet.\nFOL: all x. ((Big(x) & Kind(x)) -> Quiet(x))\nTEXT: If Fiona is green and Fiona is nice then Fiona is quiet.\nFOL: (Green(fiona) & Nice(fiona) -> Quiet(fiona))\nTEXT: If something is nice then it is big.\nFOL: all x. (Nice(x) -> Big(x))\nTEXT: Blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is quiet.\nFOL: Quiet(anne)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Fiona is smart.\nFOL: Smart(fiona)\nTEXT: Gary is green.\nFOL: Green(gary)\nTEXT: Nice, blue things are kind.\nFOL: all x. (Nice(x) & Blue(x) -> Kind(x))\nTEXT: All kind things are blue.\nFOL: all x. (Kind(x) -> Blue(x))\nTEXT: Blue, smart things are nice.\nFOL: all x. (Blue(x) & Smart(x) -> Nice(x))\nTEXT: All kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: Big, kind things are quiet.\nFOL: all x. (Big(x) & Kind(x) -> Quiet(x))\nTEXT: If Fiona is green and Fiona is nice then Fiona is quiet.\nFOL: (Green(fiona) & Nice(fiona) -> Quiet(fiona))\nTEXT: If something is nice then it is big.\nFOL: all x. (Nice(x) -> Big(x))\nTEXT: Blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is quiet.\nFOL: Quiet(anne)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Fiona is smart.\nFOL: Smart(fiona)\nTEXT: Gary is green.\nFOL: Green(gary)\nTEXT: Nice, blue things are kind.\nFOL: all x. (Blue(x) & Nice(x) -> Kind(x))\nTEXT: All kind things are blue.\nFOL: all x. (Kind(x) -> Blue(x))\nTEXT: Blue, smart things are nice.\nFOL: all x. (Blue(x) & Smart(x) -> Nice(x))\nTEXT: All kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: Big, kind things are quiet.\nFOL: all x. (Big(x) & Kind(x) -> Quiet(x))\nTEXT: If Fiona is green and Fiona is nice then Fiona is quiet.\nFOL: (Green(fiona) & Nice(fiona) -> Quiet(fiona))\nTEXT: If something is nice then it is big.\nFOL: all x. (Nice(x) -> Big(x))\nTEXT: Blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is quiet.\nFOL: Quiet(anne)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Fiona is smart.\nFOL: Smart(fiona)\nTEXT: Gary is green.\nFOL: Green(gary)\nTEXT: Nice, blue things are kind.\nFOL: all x. ((Nice(x) & Blue(x)) -> Kind(x))\nTEXT: All kind things are blue.\nFOL: all x. (Kind(x) -> Blue(x))\nTEXT: Blue, smart things are nice.\nFOL: all x. ((Blue(x) & Smart(x)) -> Nice(x))\nTEXT: All kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: Big, kind things are quiet.\nFOL: all x. ((Big(x) & Kind(x)) -> Quiet(x))\nTEXT: If Fiona is green and Fiona is nice then Fiona is quiet.\nFOL: (Green(fiona) & Nice(fiona)) -> Quiet(fiona)\nTEXT: If something is nice then it is big.\nFOL: all x. (Nice(x) -> Big(x))\nTEXT: Blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>"
  ]
 },
 {
  "index": 129,
  "responses": [
   "<EVALUATE>\nTEXT: The cat is blue.\nFOL: Blue(cat)\nTEXT: The cat is green.\nFOL: Green(cat)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat is young.\nFOL: Young(cat)\nTEXT: The cat likes the mouse.\nFOL: Likes(cat, mouse)\nTEXT: The cat sees the mouse.\nFOL: Sees(cat, mouse)\nTEXT: The cat visits the mouse.\nFOL: Visits(cat, mouse)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: The mouse likes the cat.\nFOL: Likes(mouse, cat)\nTEXT: The mouse sees the cat.\nFOL: Sees(mouse, cat)\nTEXT: The mouse visits the cat.\nFOL: Visits(mouse, cat)\nTEXT: If someone is green then they like the cat.\nFOL: all x. (Green(x) -> Likes(x, cat))\nTEXT: If someone is kind then they like the mouse.\nFOL: all x. (Kind(x) -> Likes(x, mouse))\nTEXT: If someone sees the cat and the cat sees the mouse then the mouse is blue.\nFOL: all x. ((Sees(x, cat) & Sees(cat, mouse)) -> Blue(mouse))\nTEXT: If someone likes the mouse and the mouse is blue then they visit the mouse.\nFOL: all x. ((Likes(x, mouse) & Blue(mouse)) -> Visits(x, mouse))\nTEXT: If the mouse likes the cat then the mouse is kind.\nFOL: (Likes(mouse, cat) -> Kind(mouse))\nTEXT: If someone likes the cat then they visit the cat.\nFOL: all x. (Likes(x, cat) -> Visits(x, cat))\nTEXT: The mouse is nice.\nFOL: Nice(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is blue.\nFOL: Blue(cat)\nTEXT: The cat is green.\nFOL: Green(cat)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat is young.\nFOL: Young(cat)\nTEXT: The cat likes the mouse.\nFOL: Likes(cat, mouse)\nTEXT: The cat sees the mouse.\nFOL: Sees(cat, mouse)\nTEXT: The cat visits the mouse.\nFOL: Visits(cat, mouse)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: The mouse likes the cat.\nFOL: Likes(mouse, cat)\nTEXT: The mouse sees the cat.\nFOL: Sees(mouse, cat)\nTEXT: The mouse visits the cat.\nFOL: Visits(mouse, cat)\nTEXT: If someone is green then they like the cat.\nFOL: all x. (Green(x) -> Likes(x, cat))\nTEXT: If someone is kind then they like the mouse.\nFOL: all x. (Kind(x) -> Likes(x, mouse))\nTEXT: If someone sees the cat and the cat sees the mouse then the mouse is blue.\nFOL: all x. (Sees(x, cat) & Sees(cat, mouse) -> Blue(mouse))\nTEXT: If someone likes the mouse and the mouse is blue then they visit the mouse.\nFOL: all x. ((Likes(x, mouse) & Blue(mouse)) -> Visits(x, mouse))\nTEXT: If the mouse likes the cat then the mouse is kind.\nFOL: Likes(mouse, cat) -> Kind(mouse)\nTEXT: If someone likes the cat then they visit the cat.\nFOL: all x. (Likes(x, cat) -> Visits(x, cat))\nTEXT: The mouse is nice.\nFOL: Nice(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is blue.\nFOL: Blue(cat)\nTEXT: The cat is green.\nFOL: Green(cat)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat is young.\nFOL: Young(cat)\nTEXT: The cat likes the mouse.\nFOL: Likes(cat, mouse)\nTEXT: The cat sees the mouse.\nFOL: Sees(cat, mouse)\nTEXT: The cat visits the mouse.\nFOL: Visits(cat, mouse)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: The mouse likes the cat.\nFOL: Likes(mouse, cat)\nTEXT: The mouse sees the cat.\nFOL: Sees(mouse, cat)\nTEXT: The mouse visits the cat.\nFOL: Visits(mouse, cat)\nTEXT: If someone is green then they like the cat.\nFOL: all x. (Green(x) -> Likes(x, cat))\nTEXT: If someone is kind then they like the mouse.\nFOL: all x. (Kind(x) -> Likes(x, mouse))\nTEXT: If someone sees the cat and the cat sees the mouse then the mouse is blue.\nFOL: all x. ((Sees(x, cat) & Sees(cat, mouse)) -> Blue(mouse))\nTEXT: If someone likes the mouse and the mouse is blue then they visit the mouse.\nFOL: all x. ((Likes(x, mouse) & Blue(mouse)) -> Visits(x, mouse))\nTEXT: If the mouse likes the cat then the mouse is kind.\nFOL: Likes(mouse, cat) -> Kind(mouse)\nTEXT: If someone likes the cat then they visit the cat.\nFOL: all x. (Likes(x, cat) -> Visits(x, cat))\nTEXT: The mouse is nice.\nFOL: Nice(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is blue.\nFOL: Blue(cat)\nTEXT: The cat is green.\nFOL: Green(cat)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat is young.\nFOL: Young(cat)\nTEXT: The cat likes the mouse.\nFOL: Likes(cat, mouse)\nTEXT: The cat sees the mouse.\nFOL: Sees(cat, mouse)\nTEXT: The cat visits the mouse.\nFOL: Visits(cat, mouse)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: The mouse likes the cat.\nFOL: Likes(mouse, cat)\nTEXT: The mouse sees the cat.\nFOL: Sees(mouse, cat)\nTEXT: The mouse visits the cat.\nFOL: Visits(mouse, cat)\nTEXT: If someone is green then they like the cat.\nFOL: all x. (Green(x) -> Likes(x, cat))\nTEXT: If someone is kind then they like the mouse.\nFOL: all x. (Kind(x) -> Likes(x, mouse))\nTEXT: If someone sees the cat and the cat sees the mouse then the mouse is blue.\nFOL: all x. (Sees(x, cat) & Sees(cat, mouse) -> Blue(mouse))\nTEXT: If someone likes the mouse and the mouse is blue then they visit the mouse.\nFOL: all x. (Likes(x, mouse) & Blue(mouse) -> Visits(x, mouse))\nTEXT: If the mouse likes the cat then the mouse is kind.\nFOL: Likes(mouse, cat) -> Kind(mouse)\nTEXT: If someone likes the cat then they visit the cat.\nFOL: all x. (Likes(x, cat) -> Visits(x, cat))\nTEXT: The mouse is nice.\nFOL: Nice(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is blue.\nFOL: Blue(cat)\nTEXT: The cat is green.\nFOL: Green(cat)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat is young.\nFOL: Young(cat)\nTEXT: The cat likes the mouse.\nFOL: Likes(cat, mouse)\nTEXT: The cat sees the mouse.\nFOL: Sees(cat, mouse)\nTEXT: The cat visits the mouse.\nFOL: Visits(cat, mouse)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: The mouse likes the cat.\nFOL: Likes(mouse, cat)\nTEXT: The mouse sees the cat.\nFOL: Sees(mouse, cat)\nTEXT: The mouse visits the cat.\nFOL: Visits(mouse, cat)\nTEXT: If someone is green then they like the cat.\nFOL: all x. (Green(x) -> Likes(x, cat))\nTEXT: If someone is kind then they like the mouse.\nFOL: all x. (Kind(x) -> Likes(x, mouse))\nTEXT: If someone sees the cat and the cat sees the mouse then the mouse is blue.\nFOL: all x. (Sees(x, cat) & Sees(cat, mouse) -> Blue(mouse))\nTEXT: If someone likes the mouse and the mouse is blue then they visit the mouse.\nFOL: all x. ((Likes(x, mouse) & Blue(mouse)) -> Visits(x, mouse))\nTEXT: If the mouse likes the cat then the mouse is kind.\nFOL: (Likes(mouse, cat) -> Kind(mouse))\nTEXT: If someone likes the cat then they visit the cat.\nFOL: all x. (Likes(x, cat) -> Visits(x, cat))\nTEXT: The mouse is nice.\nFOL: Nice(mouse)\n</EVALUATE>"
  ]
 },
 {
  "index": 130,
  "responses": [
   "<EVALUATE>\nTEXT: The rabbit is green.\nFOL: Green(rabbit)\nTEXT: If someone is nice then they are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: All nice people are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\nTEXT: If the rabbit is cold and the rabbit is not green then the rabbit is not big.\nFOL: Cold(rabbit) & -Green(rabbit) -> -Big(rabbit)\nTEXT: If someone is cold and green then they are nice.\nFOL: all x. (Cold(x) & Green(x) -> Nice(x))\nTEXT: All big, young people are nice.\nFOL: all x. ((Big(x) & Young(x)) -> Nice(x))\nTEXT: All green people are cold.\nFOL: all x. (Green(x) -> Cold(x))\nTEXT: The rabbit does not eat the rabbit.\nFOL: -Eats(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The rabbit is green.\nFOL: Green(rabbit)\nTEXT: If someone is nice then they are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: All nice people are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\nTEXT: If the rabbit is cold and the rabbit is not green then the rabbit is not big.\nFOL: (Cold(rabbit) & -Green(rabbit)) -> -Big(rabbit)\nTEXT: If someone is cold and green then they are nice.\nFOL: all x. ((Cold(x) & Green(x)) -> Nice(x))\nTEXT: All big, young people are nice.\nFOL: all x. ((Big(x) & Young(x)) -> Nice(x))\nTEXT: All green people are cold.\nFOL: all x. (Green(x) -> Cold(x))\nTEXT: The rabbit does not eat the rabbit.\nFOL: -Eats(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The rabbit is green.\nFOL: Green(rabbit)\nTEXT: If someone is nice then they are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: All nice people are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\nTEXT: If the rabbit is cold and the rabbit is not green then the rabbit is not big.\nFOL: (Cold(rabbit) & -Green(rabbit) -> -Big(rabbit))\nTEXT: If someone is cold and green then they are nice.\nFOL: all x. ((Cold(x) & Green(x)) -> Nice(x))\nTEXT: All big, young people are nice.\nFOL: all x. ((Big(x) & Young(x)) -> Nice(x))\nTEXT: All green people are cold.\nFOL: all x. (Green(x) -> Cold(x))\nTEXT: The rabbit does not eat the rabbit.\nFOL: -Eats(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The rabbit is green.\nFOL: Green(rabbit)\nTEXT: If someone is nice then they are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: All nice people are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\nTEXT: If the rabbit is cold and the rabbit is not green then the rabbit is not big.\nFOL: Cold(rabbit) & -Green(rabbit) -> -Big(rabbit)\nTEXT: If someone is cold and green then they are nice.\nFOL: all x. (Cold(x) & Green(x) -> Nice(x))\nTEXT: All big, young people are nice.\nFOL: all x. ((Big(x) & Young(x)) -> Nice(x))\nTEXT: All green people are cold.\nFOL: all x. (Green(x) -> Cold(x))\nTEXT: The rabbit does not eat the rabbit.\nFOL: -Eat(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The rabbit is green.\nFOL: Green(rabbit)\nTEXT: If someone is nice then they are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: All nice people are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\nTEXT: If the rabbit is cold and the rabbit is not green then the rabbit is not big.\nFOL: (Cold(rabbit) & -Green(rabbit)) -> -Big(rabbit)\nTEXT: If someone is cold and green then they are nice.\nFOL: all x. ((Cold(x) & Green(x)) -> Nice(x))\nTEXT: All big, young people are nice.\nFOL: all x. ((Big(x) & Young(x)) -> Nice(x))\nTEXT: All green people are cold.\nFOL: all x. (Green(x) -> Cold(x))\nTEXT: The rabbit does not eat the rabbit.\nFOL: -Eat(rabbit, rabbit)\n</EVALUATE>"
  ]
 },
 {
  "index": 131,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is green to the job, which is why he turned blue from being so cold.\nFOL: Green(bob) & Cold(bob) -> Blue(bob)\nTEXT: Green, big and red are qualities which all describe Charlie.\nFOL: Green(charlie) & Big(charlie) & Red(charlie)\nTEXT: Dave is a kind person and he is also often cold.\nFOL: Kind(dave) & Cold(dave)\nTEXT: Gary is a really nice guy with a big round body, usually wearing red.\nFOL: Nice(gary) & Big(gary) & Round(gary) & Red(gary)\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: Big(x) & Round(x) & Kind(x) -> Naive(x)\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: Blue(x) & Big(x) -> Cold(x)\nTEXT: Do not fear big cold people for they are often kind.\nFOL: all x. (Big(x) & Cold(x) -> Kind(x))\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: Big(x) & Red(x) -> Blue(x)\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> Kind(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: Cold(x) & Red(x) & Blue(x) -> Big(x)\nTEXT: Charlie is big.\nFOL: Big(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green to the job, which is why he turned blue from being so cold.\nFOL: Green(bob) & Cold(bob) -> Blue(bob)\nTEXT: Green, big and red are qualities which all describe Charlie.\nFOL: Green(charlie) & Big(charlie) & Red(charlie)\nTEXT: Dave is a kind person and he is also often cold.\nFOL: Kind(dave) & Cold(dave)\nTEXT: Gary is a really nice guy with a big round body, usually wearing red.\nFOL: Nice(gary) & Big(gary) & Round(gary) & Red(gary)\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: Big(x) & Round(x) & Kind(x) -> Naive(x)\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: Blue(x) & Big(x) -> Cold(x)\nTEXT: Do not fear big cold people for they are often kind.\nFOL: all x. (Big(x) & Cold(x) -> Kind(x))\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: Big(x) & Red(x) -> Blue(x)\nTEXT: Cold and red people are always kind to others.\nFOL: all x. ((Cold(x) & Red(x)) -> Kind(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: Cold(x) & Red(x) & Blue(x) -> Big(x)\nTEXT: Charlie is big.\nFOL: Big(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green to the job, which is why he turned blue from being so cold.\nFOL: Green(bob) & Cold(bob) -> Blue(bob)\nTEXT: Green, big and red are qualities which all describe Charlie.\nFOL: Green(charlie) & Big(charlie) & Red(charlie)\nTEXT: Dave is a kind person and he is also often cold.\nFOL: Kind(dave) & Cold(dave)\nTEXT: Gary is a really nice guy with a big round body, usually wearing red.\nFOL: Nice(gary) & Big(gary) & Round(gary) & Red(gary)\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: Big(x) & Round(x) & Kind(x) -> Naive(x)\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: Blue(x) & Big(x) -> Cold(x)\nTEXT: Do not fear big cold people for they are often kind.\nFOL: all x. (Big(x) & Cold(x) -> Kind(x))\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: Big(x) & Red(x) -> Blue(x)\nTEXT: Cold and red people are always kind to others.\nFOL: (Cold(x) & Red(x)) -> Kind(x)\nTEXT: A person who is cold and red and blue is big.\nFOL: Cold(x) & Red(x) & Blue(x) -> Big(x)\nTEXT: Charlie is big.\nFOL: Big(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green to the job, which is why he turned blue from being so cold.\nFOL: Green(bob) & Cold(bob) -> Blue(bob)\nTEXT: Green, big and red are qualities which all describe Charlie.\nFOL: Green(charlie) & Big(charlie) & Red(charlie)\nTEXT: Dave is a kind person and he is also often cold.\nFOL: Kind(dave) & Cold(dave)\nTEXT: Gary is a really nice guy with a big round body, usually wearing red.\nFOL: Nice(gary) & Big(gary) & Round(gary) & Red(gary)\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: (Big(x) & Round(x) & Kind(x)) -> Naive(x)\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: Blue(x) & Big(x) -> Cold(x)\nTEXT: Do not fear big cold people for they are often kind.\nFOL: all x. (Big(x) & Cold(x) -> Kind(x))\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: Big(x) & Red(x) -> Blue(x)\nTEXT: Cold and red people are always kind to others.\nFOL: (Cold(x) & Red(x)) -> Kind(x)\nTEXT: A person who is cold and red and blue is big.\nFOL: Cold(x) & Red(x) & Blue(x) -> Big(x)\nTEXT: Charlie is big.\nFOL: Big(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green to the job, which is why he turned blue from being so cold.\nFOL: Green(bob) & Cold(bob) -> Blue(bob)\nTEXT: Green, big and red are qualities which all describe Charlie.\nFOL: Green(charlie) & Big(charlie) & Red(charlie)\nTEXT: Dave is a kind person and he is also often cold.\nFOL: Kind(dave) & Cold(dave)\nTEXT: Gary is a really nice guy with a big round body, usually wearing red.\nFOL: Nice(gary) & Big(gary) & Round(gary) & Red(gary)\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: (Big(x) & Round(x) & Kind(x)) -> Naive(x)\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: Blue(x) & Big(x) -> Cold(x)\nTEXT: Do not fear big cold people for they are often kind.\nFOL: all x. (Big(x) & Cold(x) -> Kind(x))\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: Big(x) & Red(x) -> Blue(x)\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> Kind(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: Cold(x) & Red(x) & Blue(x) -> Big(x)\nTEXT: Charlie is big.\nFOL: Big(charlie)\n</EVALUATE>"
  ]
 },
 {
  "index": 132,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle sees the rabbit.\nFOL: Sees(baldEagle, rabbit)\nTEXT: The lion is not big.\nFOL: -Big(lion)\nTEXT: The lion is kind.\nFOL: Kind(lion)\nTEXT: The lion likes the bald eagle.\nFOL: Likes(lion, baldEagle)\nTEXT: The lion sees the squirrel.\nFOL: Sees(lion, squirrel)\nTEXT: The rabbit is not big.\nFOL: -Big(rabbit)\nTEXT: The squirrel is not green.\nFOL: -Green(squirrel)\nTEXT: The squirrel is red.\nFOL: Red(squirrel)\nTEXT: The squirrel does not like the lion.\nFOL: -Likes(squirrel, lion)\nTEXT: The squirrel sees the rabbit.\nFOL: Sees(squirrel, rabbit)\nTEXT: If something likes the squirrel and it likes the rabbit then it does not see the bald eagle.\nFOL: (Likes(x, squirrel) & Likes(x, rabbit) -> -Sees(x, baldEagle))\nTEXT: If something likes the rabbit then it chases the lion.\nFOL: (Likes(x, rabbit) -> Chases(x, lion))\nTEXT: If something likes the lion then the lion sees the bald eagle.\nFOL: (Likes(x, lion) -> Sees(lion, baldEagle))\nTEXT: If something is nice and it chases the rabbit then the rabbit likes the lion.\nFOL: (Nice(x) & Chases(x, rabbit) -> Likes(rabbit, lion))\nTEXT: If something chases the lion then it is nice.\nFOL: (Chases(x, lion) -> Nice(x))\nTEXT: If something is red then it likes the rabbit.\nFOL: (Red(x) -> Likes(x, rabbit))\nTEXT: The squirrel is nice.\nFOL: Nice(squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle sees the rabbit.\nFOL: Sees(baldEagle, rabbit)\nTEXT: The lion is not big.\nFOL: -Big(lion)\nTEXT: The lion is kind.\nFOL: Kind(lion)\nTEXT: The lion likes the bald eagle.\nFOL: Likes(lion, baldEagle)\nTEXT: The lion sees the squirrel.\nFOL: Sees(lion, squirrel)\nTEXT: The rabbit is not big.\nFOL: -Big(rabbit)\nTEXT: The squirrel is not green.\nFOL: -Green(squirrel)\nTEXT: The squirrel is red.\nFOL: Red(squirrel)\nTEXT: The squirrel does not like the lion.\nFOL: -Likes(squirrel, lion)\nTEXT: The squirrel sees the rabbit.\nFOL: Sees(squirrel, rabbit)\nTEXT: If something likes the squirrel and it likes the rabbit then it does not see the bald eagle.\nFOL: all x. ((Likes(x, squirrel) & Likes(x, rabbit)) -> -Sees(x, baldEagle))\nTEXT: If something likes the rabbit then it chases the lion.\nFOL: all x. (Likes(x, rabbit) -> Chases(x, lion))\nTEXT: If something likes the lion then the lion sees the bald eagle.\nFOL: all x. (Likes(x, lion) -> Sees(lion, baldEagle))\nTEXT: If something is nice and it chases the rabbit then the rabbit likes the lion.\nFOL: all x. ((Nice(x) & Chases(x, rabbit)) -> Likes(rabbit, lion))\nTEXT: If something chases the lion then it is nice.\nFOL: all x. (Chases(x, lion) -> Nice(x))\nTEXT: If something is red then it likes the rabbit.\nFOL: all x. (Red(x) -> Likes(x, rabbit))\nTEXT: The squirrel is nice.\nFOL: Nice(squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle sees the rabbit.\nFOL: Sees(baldEagle, rabbit)\nTEXT: The lion is not big.\nFOL: -Big(lion)\nTEXT: The lion is kind.\nFOL: Kind(lion)\nTEXT: The lion likes the bald eagle.\nFOL: Likes(lion, baldEagle)\nTEXT: The lion sees the squirrel.\nFOL: Sees(lion, squirrel)\nTEXT: The rabbit is not big.\nFOL: -Big(rabbit)\nTEXT: The squirrel is not green.\nFOL: -Green(squirrel)\nTEXT: The squirrel is red.\nFOL: Red(squirrel)\nTEXT: The squirrel does not like the lion.\nFOL: -Likes(squirrel, lion)\nTEXT: The squirrel sees the rabbit.\nFOL: Sees(squirrel, rabbit)\nTEXT: If something likes the squirrel and it likes the rabbit then it does not see the bald eagle.\nFOL: all x. ((Likes(x, squirrel) & Likes(x, rabbit)) -> -Sees(x, baldEagle))\nTEXT: If something likes the rabbit then it chases the lion.\nFOL: all x. (Likes(x, rabbit) -> Chases(x, lion))\nTEXT: If something likes the lion then the lion sees the bald eagle.\nFOL: all x. (Likes(x, lion) -> Sees(lion, baldEagle))\nTEXT: If something is nice and it chases the rabbit then the rabbit likes the lion.\nFOL: all x. (Nice(x) & Chases(x, rabbit) -> Likes(rabbit, lion))\nTEXT: If something chases the lion then it is nice.\nFOL: all x. (Chases(x, lion) -> Nice(x))\nTEXT: If something is red then it likes the rabbit.\nFOL: all x. (Red(x) -> Likes(x, rabbit))\nTEXT: The squirrel is nice.\nFOL: Nice(squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle sees the rabbit.\nFOL: Sees(baldEagle, rabbit)\nTEXT: The lion is not big.\nFOL: -Big(lion)\nTEXT: The lion is kind.\nFOL: Kind(lion)\nTEXT: The lion likes the bald eagle.\nFOL: Likes(lion, baldEagle)\nTEXT: The lion sees the squirrel.\nFOL: Sees(lion, squirrel)\nTEXT: The rabbit is not big.\nFOL: -Big(rabbit)\nTEXT: The squirrel is not green.\nFOL: -Green(squirrel)\nTEXT: The squirrel is red.\nFOL: Red(squirrel)\nTEXT: The squirrel does not like the lion.\nFOL: -Likes(squirrel, lion)\nTEXT: The squirrel sees the rabbit.\nFOL: Sees(squirrel, rabbit)\nTEXT: If something likes the squirrel and it likes the rabbit then it does not see the bald eagle.\nFOL: all x. (Likes(x, squirrel) & Likes(x, rabbit) -> -Sees(x, baldEagle))\nTEXT: If something likes the rabbit then it chases the lion.\nFOL: all x. (Likes(x, rabbit) -> Chases(x, lion))\nTEXT: If something likes the lion then the lion sees the bald eagle.\nFOL: all x. (Likes(x, lion) -> Sees(lion, baldEagle))\nTEXT: If something is nice and it chases the rabbit then the rabbit likes the lion.\nFOL: all x. (Nice(x) & Chases(x, rabbit) -> Likes(rabbit, lion))\nTEXT: If something chases the lion then it is nice.\nFOL: all x. (Chases(x, lion) -> Nice(x))\nTEXT: If something is red then it likes the rabbit.\nFOL: all x. (Red(x) -> Likes(x, rabbit))\nTEXT: The squirrel is nice.\nFOL: Nice(squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle sees the rabbit.\nFOL: Sees(baldEagle, rabbit)\nTEXT: The lion is not big.\nFOL: -Big(lion)\nTEXT: The lion is kind.\nFOL: Kind(lion)\nTEXT: The lion likes the bald eagle.\nFOL: Likes(lion, baldEagle)\nTEXT: The lion sees the squirrel.\nFOL: Sees(lion, squirrel)\nTEXT: The rabbit is not big.\nFOL: -Big(rabbit)\nTEXT: The squirrel is not green.\nFOL: -Green(squirrel)\nTEXT: The squirrel is red.\nFOL: Red(squirrel)\nTEXT: The squirrel does not like the lion.\nFOL: -Likes(squirrel, lion)\nTEXT: The squirrel sees the rabbit.\nFOL: Sees(squirrel, rabbit)\nTEXT: If something likes the squirrel and it likes the rabbit then it does not see the bald eagle.\nFOL: (Likes(x, squirrel) & Likes(x, rabbit) -> -Sees(x, baldEagle))\nTEXT: If something likes the rabbit then it chases the lion.\nFOL: (Likes(x, rabbit) -> Chases(x, lion))\nTEXT: If something likes the lion then the lion sees the bald eagle.\nFOL: (Likes(x, lion) -> Sees(lion, baldEagle))\nTEXT: If something is nice and it chases the rabbit then the rabbit likes the lion.\nFOL: ((Nice(x) & Chases(x, rabbit)) -> Likes(rabbit, lion))\nTEXT: If something chases the lion then it is nice.\nFOL: (Chases(x, lion) -> Nice(x))\nTEXT: If something is red then it likes the rabbit.\nFOL: (Red(x) -> Likes(x, rabbit))\nTEXT: The squirrel is nice.\nFOL: Nice(squirrel)\n</EVALUATE>"
  ]
 },
 {
  "index": 133,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: Eats(baldEagle, rabbit)\nTEXT: The bald eagle is green.\nFOL: Green(baldEagle)\nTEXT: The bald eagle is kind.\nFOL: Kind(baldEagle)\nTEXT: The bald eagle needs the tiger.\nFOL: Needs(baldEagle, tiger)\nTEXT: The cat is green.\nFOL: Green(cat)\nTEXT: The cat needs the rabbit.\nFOL: Needs(cat, rabbit)\nTEXT: The rabbit chases the cat.\nFOL: Chases(rabbit, cat)\nTEXT: The rabbit eats the cat.\nFOL: Eats(rabbit, cat)\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\nTEXT: The rabbit needs the tiger.\nFOL: Needs(rabbit, tiger)\nTEXT: The tiger chases the cat.\nFOL: Chases(tiger, cat)\nTEXT: The tiger needs the bald eagle.\nFOL: Needs(tiger, baldEagle)\nTEXT: If something needs the rabbit and it is kind then it eats the rabbit.\nFOL: all x. (Needs(x, rabbit) & Kind(x) -> Eats(x, rabbit))\nTEXT: If something needs the bald eagle and it chases the cat then the cat is young.\nFOL: all x. (Needs(x, baldEagle) & Chases(x, cat) -> Young(cat))\nTEXT: If the tiger chases the cat then the cat is round.\nFOL: Chases(tiger, cat) -> Round(cat)\nTEXT: If something chases the cat then it needs the rabbit.\nFOL: all x. (Chases(x, cat) -> Needs(x, rabbit))\nTEXT: If something needs the rabbit then it eats the cat.\nFOL: all x. (Needs(x, rabbit) -> Eats(x, cat))\nTEXT: If something eats the cat then it chases the tiger.\nFOL: all x. (Eats(x, cat) -> Chases(x, tiger))\nTEXT: The cat needs the tiger.\nFOL: Needs(cat, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: Eats(baldEagle, rabbit)\nTEXT: The bald eagle is green.\nFOL: Green(baldEagle)\nTEXT: The bald eagle is kind.\nFOL: Kind(baldEagle)\nTEXT: The bald eagle needs the tiger.\nFOL: Needs(baldEagle, tiger)\nTEXT: The cat is green.\nFOL: Green(cat)\nTEXT: The cat needs the rabbit.\nFOL: Needs(cat, rabbit)\nTEXT: The rabbit chases the cat.\nFOL: Chases(rabbit, cat)\nTEXT: The rabbit eats the cat.\nFOL: Eats(rabbit, cat)\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\nTEXT: The rabbit needs the tiger.\nFOL: Needs(rabbit, tiger)\nTEXT: The tiger chases the cat.\nFOL: Chases(tiger, cat)\nTEXT: The tiger needs the bald eagle.\nFOL: Needs(tiger, baldEagle)\nTEXT: If something needs the rabbit and it is kind then it eats the rabbit.\nFOL: all x. (Needs(x, rabbit) & Kind(x) -> Eats(x, rabbit))\nTEXT: If something needs the bald eagle and it chases the cat then the cat is young.\nFOL: all x. (Needs(x, baldEagle) & Chases(x, cat) -> Young(cat))\nTEXT: If the tiger chases the cat then the cat is round.\nFOL: (Chases(tiger, cat) -> Round(cat))\nTEXT: If something chases the cat then it needs the rabbit.\nFOL: all x. (Chases(x, cat) -> Needs(x, rabbit))\nTEXT: If something needs the rabbit then it eats the cat.\nFOL: all x. (Needs(x, rabbit) -> Eats(x, cat))\nTEXT: If something eats the cat then it chases the tiger.\nFOL: all x. (Eats(x, cat) -> Chases(x, tiger))\nTEXT: The cat needs the tiger.\nFOL: Needs(cat, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: Eats(baldEagle, rabbit)\nTEXT: The bald eagle is green.\nFOL: Green(baldEagle)\nTEXT: The bald eagle is kind.\nFOL: Kind(baldEagle)\nTEXT: The bald eagle needs the tiger.\nFOL: Needs(baldEagle, tiger)\nTEXT: The cat is green.\nFOL: Green(cat)\nTEXT: The cat needs the rabbit.\nFOL: Needs(cat, rabbit)\nTEXT: The rabbit chases the cat.\nFOL: Chases(rabbit, cat)\nTEXT: The rabbit eats the cat.\nFOL: Eats(rabbit, cat)\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\nTEXT: The rabbit needs the tiger.\nFOL: Needs(rabbit, tiger)\nTEXT: The tiger chases the cat.\nFOL: Chases(tiger, cat)\nTEXT: The tiger needs the bald eagle.\nFOL: Needs(tiger, baldEagle)\nTEXT: If something needs the rabbit and it is kind then it eats the rabbit.\nFOL: (Needs(x, rabbit) & Kind(x) -> Eats(x, rabbit))\nTEXT: If something needs the bald eagle and it chases the cat then the cat is young.\nFOL: (Needs(x, baldEagle) & Chases(x, cat) -> Young(cat))\nTEXT: If the tiger chases the cat then the cat is round.\nFOL: (Chases(tiger, cat) -> Round(cat))\nTEXT: If something chases the cat then it needs the rabbit.\nFOL: (Chases(x, cat) -> Needs(x, rabbit))\nTEXT: If something needs the rabbit then it eats the cat.\nFOL: (Needs(x, rabbit) -> Eats(x, cat))\nTEXT: If something eats the cat then it chases the tiger.\nFOL: (Eats(x, cat) -> Chases(x, tiger))\nTEXT: The cat needs the tiger.\nFOL: Needs(cat, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: Eats(baldEagle, rabbit)\nTEXT: The bald eagle is green.\nFOL: Green(baldEagle)\nTEXT: The bald eagle is kind.\nFOL: Kind(baldEagle)\nTEXT: The bald eagle needs the tiger.\nFOL: Needs(baldEagle, tiger)\nTEXT: The cat is green.\nFOL: Green(cat)\nTEXT: The cat needs the rabbit.\nFOL: Needs(cat, rabbit)\nTEXT: The rabbit chases the cat.\nFOL: Chases(rabbit, cat)\nTEXT: The rabbit eats the cat.\nFOL: Eats(rabbit, cat)\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\nTEXT: The rabbit needs the tiger.\nFOL: Needs(rabbit, tiger)\nTEXT: The tiger chases the cat.\nFOL: Chases(tiger, cat)\nTEXT: The tiger needs the bald eagle.\nFOL: Needs(tiger, baldEagle)\nTEXT: If something needs the rabbit and it is kind then it eats the rabbit.\nFOL: all x. ((Needs(x, rabbit) & Kind(x)) -> Eats(x, rabbit))\nTEXT: If something needs the bald eagle and it chases the cat then the cat is young.\nFOL: all x. ((Needs(x, baldEagle) & Chases(x, cat)) -> Young(cat))\nTEXT: If the tiger chases the cat then the cat is round.\nFOL: (Chases(tiger, cat) -> Round(cat))\nTEXT: If something chases the cat then it needs the rabbit.\nFOL: all x. (Chases(x, cat) -> Needs(x, rabbit))\nTEXT: If something needs the rabbit then it eats the cat.\nFOL: all x. (Needs(x, rabbit) -> Eats(x, cat))\nTEXT: If something eats the cat then it chases the tiger.\nFOL: all x. (Eats(x, cat) -> Chases(x, tiger))\nTEXT: The cat needs the tiger.\nFOL: Needs(cat, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: Eagle(baldEagle) & Rabbit(rabbit) -> Eats(baldEagle, rabbit)\nTEXT: The bald eagle is green.\nFOL: Eagle(baldEagle) -> Green(baldEagle)\nTEXT: The bald eagle is kind.\nFOL: Eagle(baldEagle) -> Kind(baldEagle)\nTEXT: The bald eagle needs the tiger.\nFOL: Eagle(baldEagle) & Tiger(tiger) -> Needs(baldEagle, tiger)\nTEXT: The cat is green.\nFOL: Cat(cat) -> Green(cat)\nTEXT: The cat needs the rabbit.\nFOL: Cat(cat) & Rabbit(rabbit) -> Needs(cat, rabbit)\nTEXT: The rabbit chases the cat.\nFOL: Rabbit(rabbit) & Cat(cat) -> Chases(rabbit, cat)\nTEXT: The rabbit eats the cat.\nFOL: Rabbit(rabbit) & Cat(cat) -> Eats(rabbit, cat)\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(rabbit) & Tiger(tiger) -> Eats(rabbit, tiger)\nTEXT: The rabbit needs the tiger.\nFOL: Rabbit(rabbit) & Tiger(tiger) -> Needs(rabbit, tiger)\nTEXT: The tiger chases the cat.\nFOL: Tiger(tiger) & Cat(cat) -> Chases(tiger, cat)\nTEXT: The tiger needs the bald eagle.\nFOL: Tiger(tiger) & Eagle(baldEagle) -> Needs(tiger, baldEagle)\nTEXT: If something needs the rabbit and it is kind then it eats the rabbit.\nFOL: (exists x. (Eagle(x) & Rabbit(rabbit) & Needs(x, rabbit) & Kind(x)) -> Eats(x, rabbit))\nTEXT: If something needs the bald eagle and it chases the cat then the cat is young.\nFOL: (exists x. (Eagle(x) & Tiger(tiger) & Needs(x, baldEagle) & Chases(x, cat)) -> Young(cat))\nTEXT: If the tiger chases the cat then the cat is round.\nFOL: Chases(tiger, cat) -> Round(cat)\nTEXT: If something chases the cat then it needs the rabbit.\nFOL: (exists x. (Eagle(x) & Cat(cat) & Chases(x, cat)) -> Needs(x, rabbit))\nTEXT: If something needs the rabbit then it eats the cat.\nFOL: (exists x. (Eagle(x) & Rabbit(rabbit) & Needs(x, rabbit)) -> Eats(x, cat))\nTEXT: If something eats the cat then it chases the tiger.\nFOL: (exists x. (Eagle(x) & Cat(cat) & Eats(x, cat)) -> Chases(x, tiger))\nTEXT: The cat needs the tiger.\nFOL: Cat(cat) & Tiger(tiger) -> Needs(cat, tiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 134,
  "responses": [
   "<EVALUATE>\nTEXT: No one knows Bob like me and he is a kind guy, very round in the belly and green as grass.\nFOL: -KnowsBobLikeMe(x) & Kind(x) & RoundInBelly(x) & GreenAsGrass(x)\nTEXT: That guy Charlie sure is nice.\nFOL: Nice(charlie)\nTEXT: Dave is shaped big and round like a balloon.\nFOL: BigAndRound(dave)\nTEXT: His red color shows how kind he is.\nFOL: Red(dave) -> Kind(dave)\nTEXT: Young Gary here is always rough but nice and yes he is big.\nFOL: Young(gary) & Rough(gary) & Nice(gary) & Big(gary)\nTEXT: Young, red people are usually quite blue too.\nFOL: all x. (Young(x) & Red(x) -> Blue(x))\nTEXT: A nice but rough person will also be green and cold.\nFOL: all x. (Nice(x) & Rough(x) -> (Green(x) & Cold(x)))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Kind(x) -> Red(x))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x. (Round(x) & Blue(x) -> Young(x))\nTEXT: Young and red people look round.\nFOL: all x. (Young(x) & Red(x) -> Round(x))\nTEXT: I bet anyone who is round and kind is also pretty young.\nFOL: all x. (Round(x) & Kind(x) -> Young(x))\nTEXT: Dave is not cold.\nFOL: -Cold(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: No one knows Bob like me and he is a kind guy, very round in the belly and green as grass.\nFOL: -KnowsBobLikeMe(x) & Kind(x) & RoundInBelly(x) & GreenAsGrass(x)\nTEXT: That guy Charlie sure is nice.\nFOL: Nice(charlie)\nTEXT: Dave is shaped big and round like a balloon.\nFOL: BigAndRound(dave)\nTEXT: His red color shows how kind he is.\nFOL: Red(dave) -> Kind(dave)\nTEXT: Young Gary here is always rough but nice and yes he is big.\nFOL: Young(gary) & Rough(gary) & Nice(gary) & Big(gary)\nTEXT: Young, red people are usually quite blue too.\nFOL: Young(x) & Red(x) -> Blue(x)\nTEXT: A nice but rough person will also be green and cold.\nFOL: (Nice(x) & Rough(x)) -> (Green(x) & Cold(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Kind(x) -> Red(x))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x. (Round(x) & Blue(x) -> Young(x))\nTEXT: Young and red people look round.\nFOL: (Young(x) & Red(x)) -> Round(x)\nTEXT: I bet anyone who is round and kind is also pretty young.\nFOL: all x. (Round(x) & Kind(x) -> Young(x))\nTEXT: Dave is not cold.\nFOL: -Cold(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: No one knows Bob like me and he is a kind guy, very round in the belly and green as grass.\nFOL: -KnowsBobLikeMe(x) & Kind(x) & RoundInBelly(x) & GreenAsGrass(x)\nTEXT: That guy Charlie sure is nice.\nFOL: Nice(charlie)\nTEXT: Dave is shaped big and round like a balloon.\nFOL: BigAndRound(dave)\nTEXT: His red color shows how kind he is.\nFOL: Red(dave) -> Kind(dave)\nTEXT: Young Gary here is always rough but nice and yes he is big.\nFOL: Young(gary) & Rough(gary) & Nice(gary) & Big(gary)\nTEXT: Young, red people are usually quite blue too.\nFOL: all x. (Young(x) & Red(x) -> Blue(x))\nTEXT: A nice but rough person will also be green and cold.\nFOL: Nice(x) & Rough(x) -> (Green(x) & Cold(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Kind(x) -> Red(x))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x. (Round(x) & Blue(x) -> Young(x))\nTEXT: Young and red people look round.\nFOL: (Young(x) & Red(x)) -> Round(x)\nTEXT: I bet anyone who is round and kind is also pretty young.\nFOL: all x. (Round(x) & Kind(x) -> Young(x))\nTEXT: Dave is not cold.\nFOL: -Cold(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: No one knows Bob like me and he is a kind guy, very round in the belly and green as grass.\nFOL: -KnowsBobLikeMe(x) & Kind(x) & RoundInBelly(x) & GreenAsGrass(x)\nTEXT: That guy Charlie sure is nice.\nFOL: Nice(charlie)\nTEXT: Dave is shaped big and round like a balloon.\nFOL: BigAndRound(dave)\nTEXT: His red color shows how kind he is.\nFOL: Red(dave) -> Kind(dave)\nTEXT: Young Gary here is always rough but nice and yes he is big.\nFOL: Young(gary) & Rough(gary) & Nice(gary) & Big(gary)\nTEXT: Young, red people are usually quite blue too.\nFOL: Young(x) & Red(x) -> Blue(x)\nTEXT: A nice but rough person will also be green and cold.\nFOL: (Nice(x) & Rough(x)) -> (Green(x) & Cold(x))\nTEXT: Most young kind people tend to be red too.\nFOL: most x. (Young(x) & Kind(x) -> Red(x))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x. (Round(x) & Blue(x) -> Young(x))\nTEXT: Young and red people look round.\nFOL: (Young(x) & Red(x)) -> Round(x)\nTEXT: I bet anyone who is round and kind is also pretty young.\nFOL: all x. (Round(x) & Kind(x) -> Young(x))\nTEXT: Dave is not cold.\nFOL: -Cold(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: No one knows Bob like me and he is a kind guy, very round in the belly and green as grass.\nFOL: -KnowsBobLikeMe(x) & Kind(x) & RoundInBelly(x) & GreenAsGrass(x)\nTEXT: That guy Charlie sure is nice.\nFOL: Nice(charlie)\nTEXT: Dave is shaped big and round like a balloon.\nFOL: ShapedBigAndRound(dave)\nTEXT: His red color shows how kind he is.\nFOL: Red(dave) -> Kind(dave)\nTEXT: Young Gary here is always rough but nice and yes he is big.\nFOL: Young(gary) & Rough(gary) & Nice(gary) & Big(gary)\nTEXT: Young, red people are usually quite blue too.\nFOL: all x. (Young(x) & Red(x) -> Blue(x))\nTEXT: A nice but rough person will also be green and cold.\nFOL: Nice(x) & Rough(x) -> (Green(x) & Cold(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Kind(x) -> Red(x))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x. (Round(x) & Blue(x) -> Young(x))\nTEXT: Young and red people look round.\nFOL: (Young(x) & Red(x)) -> Round(x)\nTEXT: I bet anyone who is round and kind is also pretty young.\nFOL: all x. (Round(x) & Kind(x) -> Young(x))\nTEXT: Dave is not cold.\nFOL: -Cold(dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 135,
  "responses": [
   "<EVALUATE>\nTEXT: The dog is red.\nFOL: Red(dog)\nTEXT: The squirrel is cold.\nFOL: Cold(squirrel)\nTEXT: The tiger eats the dog.\nFOL: Eats(tiger, dog)\nTEXT: If someone eats the dog then the dog sees the squirrel.\nFOL: all x. (Eats(x, dog) -> Sees(dog, squirrel))\nTEXT: If someone sees the tiger then the tiger eats the dog.\nFOL: all x. (Sees(x, tiger) -> Eats(tiger, dog))\nTEXT: If someone eats the tiger then they chase the dog.\nFOL: all x. (Eats(x, tiger) -> Chase(x, dog))\nTEXT: If someone chases the dog and they are kind then they are cold.\nFOL: all x. ((Chase(x, dog) & Kind(x)) -> Cold(x))\nTEXT: If someone is kind and they chase the squirrel then the squirrel eats the dog.\nFOL: all x. ((Kind(x) & Chase(x, squirrel)) -> Eats(squirrel, dog))\nTEXT: If someone sees the squirrel then the squirrel eats the tiger.\nFOL: all x. (Sees(x, squirrel) -> Eats(squirrel, tiger))\nTEXT: The squirrel chases the dog.\nFOL: Chase(squirrel, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is red.\nFOL: Red(dog)\nTEXT: The squirrel is cold.\nFOL: Cold(squirrel)\nTEXT: The tiger eats the dog.\nFOL: Eats(tiger, dog)\nTEXT: If someone eats the dog then the dog sees the squirrel.\nFOL: all x. (Eats(x, dog) -> Sees(dog, squirrel))\nTEXT: If someone sees the tiger then the tiger eats the dog.\nFOL: all x. (Sees(x, tiger) -> Eats(tiger, dog))\nTEXT: If someone eats the tiger then they chase the dog.\nFOL: all x. (Eats(x, tiger) -> Chases(x, dog))\nTEXT: If someone chases the dog and they are kind then they are cold.\nFOL: all x. ((Chases(x, dog) & Kind(x)) -> Cold(x))\nTEXT: If someone is kind and they chase the squirrel then the squirrel eats the dog.\nFOL: all x. ((Kind(x) & Chases(x, squirrel)) -> Eats(squirrel, dog))\nTEXT: If someone sees the squirrel then the squirrel eats the tiger.\nFOL: all x. (Sees(x, squirrel) -> Eats(squirrel, tiger))\nTEXT: The squirrel chases the dog.\nFOL: Chases(squirrel, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is red.\nFOL: Red(dog)\nTEXT: The squirrel is cold.\nFOL: Cold(squirrel)\nTEXT: The tiger eats the dog.\nFOL: Eats(tiger, dog)\nTEXT: If someone eats the dog then the dog sees the squirrel.\nFOL: all x. (Eats(x, dog) -> Sees(dog, squirrel))\nTEXT: If someone sees the tiger then the tiger eats the dog.\nFOL: all x. (Sees(x, tiger) -> Eats(tiger, dog))\nTEXT: If someone eats the tiger then they chase the dog.\nFOL: all x. (Eats(x, tiger) -> Chase(x, dog))\nTEXT: If someone chases the dog and they are kind then they are cold.\nFOL: all x. ((Chase(x, dog) & Kind(x)) -> Cold(x))\nTEXT: If someone is kind and they chase the squirrel then the squirrel eats the dog.\nFOL: all x. (Kind(x) & Chase(x, squirrel) -> Eats(squirrel, dog))\nTEXT: If someone sees the squirrel then the squirrel eats the tiger.\nFOL: all x. (Sees(x, squirrel) -> Eats(squirrel, tiger))\nTEXT: The squirrel chases the dog.\nFOL: Chase(squirrel, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is red.\nFOL: Red(dog)\nTEXT: The squirrel is cold.\nFOL: Cold(squirrel)\nTEXT: The tiger eats the dog.\nFOL: Eats(tiger, dog)\nTEXT: If someone eats the dog then the dog sees the squirrel.\nFOL: all x. (Eats(x, dog) -> Sees(dog, squirrel))\nTEXT: If someone sees the tiger then the tiger eats the dog.\nFOL: all x. (Sees(x, tiger) -> Eats(tiger, dog))\nTEXT: If someone eats the tiger then they chase the dog.\nFOL: all x. (Eats(x, tiger) -> Chases(x, dog))\nTEXT: If someone chases the dog and they are kind then they are cold.\nFOL: all x. ((Chases(x, dog) & Kind(x)) -> Cold(x))\nTEXT: If someone is kind and they chase the squirrel then the squirrel eats the dog.\nFOL: all x. (Kind(x) & Chases(x, squirrel) -> Eats(squirrel, dog))\nTEXT: If someone sees the squirrel then the squirrel eats the tiger.\nFOL: all x. (Sees(x, squirrel) -> Eats(squirrel, tiger))\nTEXT: The squirrel chases the dog.\nFOL: Chases(squirrel, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is red.\nFOL: Red(dog)\nTEXT: The squirrel is cold.\nFOL: Cold(squirrel)\nTEXT: The tiger eats the dog.\nFOL: Eats(tiger, dog)\nTEXT: If someone eats the dog then the dog sees the squirrel.\nFOL: all x. (Eats(x, dog) -> Sees(dog, squirrel))\nTEXT: If someone sees the tiger then the tiger eats the dog.\nFOL: all x. (Sees(x, tiger) -> Eats(tiger, dog))\nTEXT: If someone eats the tiger then they chase the dog.\nFOL: all x. (Eats(x, tiger) -> Chase(x, dog))\nTEXT: If someone chases the dog and they are kind then they are cold.\nFOL: all x. (Chase(x, dog) & Kind(x) -> Cold(x))\nTEXT: If someone is kind and they chase the squirrel then the squirrel eats the dog.\nFOL: all x. (Kind(x) & Chase(x, squirrel) -> Eats(squirrel, dog))\nTEXT: If someone sees the squirrel then the squirrel eats the tiger.\nFOL: all x. (Sees(x, squirrel) -> Eats(squirrel, tiger))\nTEXT: The squirrel chases the dog.\nFOL: Chase(squirrel, dog)\n</EVALUATE>"
  ]
 },
 {
  "index": 136,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is rough.\nFOL: Rough(bob)\nTEXT: Dave is cold.\nFOL: Cold(dave)\nTEXT: Round people are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If someone is cold and round then they are green.\nFOL: all x. ((Cold(x) & Round(x)) -> Green(x))\nTEXT: All blue people are rough.\nFOL: all x. (Blue(x) -> Rough(x))\nTEXT: If someone is round then they are nice.\nFOL: all x. (Round(x) -> Nice(x))\nTEXT: If someone is big and round then they are cold.\nFOL: all x. ((Big(x) & Round(x)) -> Cold(x))\nTEXT: If someone is rough then they are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: Nice, big people are green.\nFOL: all x. ((Nice(x) & Big(x)) -> Green(x))\nTEXT: If Bob is green and Bob is rough then Bob is nice.\nFOL: (Green(bob) & Rough(bob)) -> Nice(bob)\nTEXT: Dave is not blue.\nFOL: -Blue(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is rough.\nFOL: Rough(bob)\nTEXT: Dave is cold.\nFOL: Cold(dave)\nTEXT: Round people are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If someone is cold and round then they are green.\nFOL: all x. (Cold(x) & Round(x) -> Green(x))\nTEXT: All blue people are rough.\nFOL: all x. (Blue(x) -> Rough(x))\nTEXT: If someone is round then they are nice.\nFOL: all x. (Round(x) -> Nice(x))\nTEXT: If someone is big and round then they are cold.\nFOL: all x. (Big(x) & Round(x) -> Cold(x))\nTEXT: If someone is rough then they are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: Nice, big people are green.\nFOL: all x. (Nice(x) & Big(x) -> Green(x))\nTEXT: If Bob is green and Bob is rough then Bob is nice.\nFOL: (Green(bob) & Rough(bob)) -> Nice(bob)\nTEXT: Dave is not blue.\nFOL: -Blue(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is rough.\nFOL: Rough(bob)\nTEXT: Dave is cold.\nFOL: Cold(dave)\nTEXT: Round people are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If someone is cold and round then they are green.\nFOL: all x. (Cold(x) & Round(x) -> Green(x))\nTEXT: All blue people are rough.\nFOL: all x. (Blue(x) -> Rough(x))\nTEXT: If someone is round then they are nice.\nFOL: all x. (Round(x) -> Nice(x))\nTEXT: If someone is big and round then they are cold.\nFOL: all x. (Big(x) & Round(x) -> Cold(x))\nTEXT: If someone is rough then they are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: Nice, big people are green.\nFOL: all x. ((Nice(x) & Big(x)) -> Green(x))\nTEXT: If Bob is green and Bob is rough then Bob is nice.\nFOL: (Green(bob) & Rough(bob)) -> Nice(bob)\nTEXT: Dave is not blue.\nFOL: -Blue(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is rough.\nFOL: Rough(bob)\nTEXT: Dave is cold.\nFOL: Cold(dave)\nTEXT: Round people are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If someone is cold and round then they are green.\nFOL: all x. ((Cold(x) & Round(x)) -> Green(x))\nTEXT: All blue people are rough.\nFOL: all x. (Blue(x) -> Rough(x))\nTEXT: If someone is round then they are nice.\nFOL: all x. (Round(x) -> Nice(x))\nTEXT: If someone is big and round then they are cold.\nFOL: all x. ((Big(x) & Round(x)) -> Cold(x))\nTEXT: If someone is rough then they are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: Nice, big people are green.\nFOL: all x. (Nice(x) & Big(x) -> Green(x))\nTEXT: If Bob is green and Bob is rough then Bob is nice.\nFOL: (Green(bob) & Rough(bob)) -> Nice(bob)\nTEXT: Dave is not blue.\nFOL: -Blue(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is rough.\nFOL: Rough(bob)\nTEXT: Dave is cold.\nFOL: Cold(dave)\nTEXT: Round people are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If someone is cold and round then they are green.\nFOL: all x. (Cold(x) & Round(x) -> Green(x))\nTEXT: All blue people are rough.\nFOL: all x. (Blue(x) -> Rough(x))\nTEXT: If someone is round then they are nice.\nFOL: all x. (Round(x) -> Nice(x))\nTEXT: If someone is big and round then they are cold.\nFOL: all x. (Big(x) & Round(x) -> Cold(x))\nTEXT: If someone is rough then they are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: Nice, big people are green.\nFOL: all x. (Nice(x) & Big(x) -> Green(x))\nTEXT: If Bob is green and Bob is rough then Bob is nice.\nFOL: (Green(bob) & Rough(bob) -> Nice(bob))\nTEXT: Dave is not blue.\nFOL: -Blue(dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 137,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Erin is young.\nFOL: Young(erin)\nTEXT: Gary is white.\nFOL: White(gary)\nTEXT: All white, young things are not smart.\nFOL: all x. (White(x) & Young(x) -> -Smart(x))\nTEXT: All rough things are not smart.\nFOL: all x. (Rough(x) -> -Smart(x))\nTEXT: Green things are cold.\nFOL: all x. (Green(x) -> Cold(x))\nTEXT: If something is rough then it is not green.\nFOL: all x. (Rough(x) -> -Green(x))\nTEXT: Young things are green.\nFOL: all x. (Young(x) -> Green(x))\nTEXT: Rough, young things are blue.\nFOL: all x. (Rough(x) & Young(x) -> Blue(x))\nTEXT: White things are young.\nFOL: all x. (White(x) -> Young(x))\nTEXT: If something is white and not rough then it is young.\nFOL: all x. ((White(x) & -Rough(x)) -> Young(x))\nTEXT: Erin is not white.\nFOL: -White(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Erin is young.\nFOL: Young(erin)\nTEXT: Gary is white.\nFOL: White(gary)\nTEXT: All white, young things are not smart.\nFOL: all x. (White(x) & Young(x) -> -Smart(x))\nTEXT: All rough things are not smart.\nFOL: all x. (Rough(x) -> -Smart(x))\nTEXT: Green things are cold.\nFOL: all x. (Green(x) -> Cold(x))\nTEXT: If something is rough then it is not green.\nFOL: all x. (Rough(x) -> -Green(x))\nTEXT: Young things are green.\nFOL: all x. (Young(x) -> Green(x))\nTEXT: Rough, young things are blue.\nFOL: all x. (Rough(x) & Young(x) -> Blue(x))\nTEXT: White things are young.\nFOL: all x. (White(x) -> Young(x))\nTEXT: If something is white and not rough then it is young.\nFOL: all x. (White(x) & -Rough(x) -> Young(x))\nTEXT: Erin is not white.\nFOL: -White(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Erin is young.\nFOL: Young(erin)\nTEXT: Gary is white.\nFOL: White(gary)\nTEXT: All white, young things are not smart.\nFOL: all x. (White(x) & Young(x) -> -Smart(x))\nTEXT: All rough things are not smart.\nFOL: all x. (Rough(x) -> -Smart(x))\nTEXT: Green things are cold.\nFOL: all x. (Green(x) -> Cold(x))\nTEXT: If something is rough then it is not green.\nFOL: all x. (Rough(x) -> -Green(x))\nTEXT: Young things are green.\nFOL: all x. (Young(x) -> Green(x))\nTEXT: Rough, young things are blue.\nFOL: all x. (Rough(x) & Young(x) -> Blue(x))\nTEXT: White things are young.\nFOL: all x. (White(x) -> Young(x))\nTEXT: If something is white and not rough then it is young.\nFOL: all x. ((White(x) & -Rough(x)) -> Young(x))\nTEXT: Erin is not white.\nFOL: -White(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Erin is young.\nFOL: Young(erin)\nTEXT: Gary is white.\nFOL: White(gary)\nTEXT: All white, young things are not smart.\nFOL: all x. ((White(x) & Young(x)) -> -Smart(x))\nTEXT: All rough things are not smart.\nFOL: all x. (Rough(x) -> -Smart(x))\nTEXT: Green things are cold.\nFOL: all x. (Green(x) -> Cold(x))\nTEXT: If something is rough then it is not green.\nFOL: all x. (Rough(x) -> -Green(x))\nTEXT: Young things are green.\nFOL: all x. (Young(x) -> Green(x))\nTEXT: Rough, young things are blue.\nFOL: all x. ((Rough(x) & Young(x)) -> Blue(x))\nTEXT: White things are young.\nFOL: all x. (White(x) -> Young(x))\nTEXT: If something is white and not rough then it is young.\nFOL: all x. ((White(x) & -Rough(x)) -> Young(x))\nTEXT: Erin is not white.\nFOL: -White(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Erin is young.\nFOL: Young(erin)\nTEXT: Gary is white.\nFOL: White(gary)\nTEXT: All white, young things are not smart.\nFOL: all x. (White(x) & Young(x) -> -Smart(x))\nTEXT: All rough things are not smart.\nFOL: all x. (Rough(x) -> -Smart(x))\nTEXT: Green things are cold.\nFOL: all x. (Green(x) -> Cold(x))\nTEXT: If something is rough then it is not green.\nFOL: all x. (Rough(x) -> -Green(x))\nTEXT: Young things are green.\nFOL: all x. (Young(x) -> Green(x))\nTEXT: Rough, young things are blue.\nFOL: all x. ((Rough(x) & Young(x)) -> Blue(x))\nTEXT: White things are young.\nFOL: all x. (White(x) -> Young(x))\nTEXT: If something is white and not rough then it is young.\nFOL: all x. ((White(x) & -Rough(x)) -> Young(x))\nTEXT: Erin is not white.\nFOL: -White(erin)\n</EVALUATE>"
  ]
 },
 {
  "index": 138,
  "responses": [
   "<EVALUATE>\nTEXT: Charlie is green.\nFOL: Green(charlie)\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\nTEXT: Charlie is white.\nFOL: White(charlie)\nTEXT: Dave is furry.\nFOL: Furry(dave)\nTEXT: Dave is quiet.\nFOL: Quiet(dave)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\nTEXT: Gary is furry.\nFOL: Furry(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Gary is rough.\nFOL: Rough(gary)\nTEXT: All furry, rough people are quiet.\nFOL: all x. (Furry(x) & Rough(x) -> Quiet(x))\nTEXT: If someone is green and smart then they are quiet.\nFOL: all x. ((Green(x) & Smart(x)) -> Quiet(x))\nTEXT: All furry, quiet people are kind.\nFOL: all x. (Furry(x) & Quiet(x) -> Kind(x))\nTEXT: All white, furry people are kind.\nFOL: all x. (White(x) & Furry(x) -> Kind(x))\nTEXT: If Dave is white and Dave is kind then Dave is green.\nFOL: (White(dave) & Kind(dave)) -> Green(dave)\nTEXT: If someone is quiet then they are kind.\nFOL: all x. (Quiet(x) -> Kind(x))\nTEXT: All kind people are white.\nFOL: all x. (Kind(x) -> White(x))\nTEXT: White, green people are smart.\nFOL: all x. ((White(x) & Green(x)) -> Smart(x))\nTEXT: Gary is smart.\nFOL: Smart(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is green.\nFOL: Green(charlie)\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\nTEXT: Charlie is white.\nFOL: White(charlie)\nTEXT: Dave is furry.\nFOL: Furry(dave)\nTEXT: Dave is quiet.\nFOL: Quiet(dave)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\nTEXT: Gary is furry.\nFOL: Furry(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Gary is rough.\nFOL: Rough(gary)\nTEXT: All furry, rough people are quiet.\nFOL: all x. (Furry(x) & Rough(x) -> Quiet(x))\nTEXT: If someone is green and smart then they are quiet.\nFOL: all x. (Green(x) & Smart(x) -> Quiet(x))\nTEXT: All furry, quiet people are kind.\nFOL: all x. (Furry(x) & Quiet(x) -> Kind(x))\nTEXT: All white, furry people are kind.\nFOL: all x. (White(x) & Furry(x) -> Kind(x))\nTEXT: If Dave is white and Dave is kind then Dave is green.\nFOL: (White(dave) & Kind(dave)) -> Green(dave)\nTEXT: If someone is quiet then they are kind.\nFOL: all x. (Quiet(x) -> Kind(x))\nTEXT: All kind people are white.\nFOL: all x. (Kind(x) -> White(x))\nTEXT: White, green people are smart.\nFOL: all x. (White(x) & Green(x) -> Smart(x))\nTEXT: Gary is smart.\nFOL: Smart(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is green.\nFOL: Green(charlie)\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\nTEXT: Charlie is white.\nFOL: White(charlie)\nTEXT: Dave is furry.\nFOL: Furry(dave)\nTEXT: Dave is quiet.\nFOL: Quiet(dave)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\nTEXT: Gary is furry.\nFOL: Furry(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Gary is rough.\nFOL: Rough(gary)\nTEXT: All furry, rough people are quiet.\nFOL: all x. (Furry(x) & Rough(x) -> Quiet(x))\nTEXT: If someone is green and smart then they are quiet.\nFOL: all x. ((Green(x) & Smart(x)) -> Quiet(x))\nTEXT: All furry, quiet people are kind.\nFOL: all x. (Furry(x) & Quiet(x) -> Kind(x))\nTEXT: All white, furry people are kind.\nFOL: all x. (White(x) & Furry(x) -> Kind(x))\nTEXT: If Dave is white and Dave is kind then Dave is green.\nFOL: (White(dave) & Kind(dave)) -> Green(dave)\nTEXT: If someone is quiet then they are kind.\nFOL: all x. (Quiet(x) -> Kind(x))\nTEXT: All kind people are white.\nFOL: all x. (Kind(x) -> White(x))\nTEXT: White, green people are smart.\nFOL: all x. (White(x) & Green(x) -> Smart(x))\nTEXT: Gary is smart.\nFOL: Smart(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is green.\nFOL: Green(charlie)\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\nTEXT: Charlie is white.\nFOL: White(charlie)\nTEXT: Dave is furry.\nFOL: Furry(dave)\nTEXT: Dave is quiet.\nFOL: Quiet(dave)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\nTEXT: Gary is furry.\nFOL: Furry(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Gary is rough.\nFOL: Rough(gary)\nTEXT: All furry, rough people are quiet.\nFOL: all x. (Furry(x) & Rough(x) -> Quiet(x))\nTEXT: If someone is green and smart then they are quiet.\nFOL: all x. (Green(x) & Smart(x) -> Quiet(x))\nTEXT: All furry, quiet people are kind.\nFOL: all x. (Furry(x) & Quiet(x) -> Kind(x))\nTEXT: All white, furry people are kind.\nFOL: all x. (White(x) & Furry(x) -> Kind(x))\nTEXT: If Dave is white and Dave is kind then Dave is green.\nFOL: (White(dave) & Kind(dave) -> Green(dave))\nTEXT: If someone is quiet then they are kind.\nFOL: all x. (Quiet(x) -> Kind(x))\nTEXT: All kind people are white.\nFOL: all x. (Kind(x) -> White(x))\nTEXT: White, green people are smart.\nFOL: all x. (White(x) & Green(x) -> Smart(x))\nTEXT: Gary is smart.\nFOL: Smart(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is green.\nFOL: Green(charlie)\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\nTEXT: Charlie is white.\nFOL: White(charlie)\nTEXT: Dave is furry.\nFOL: Furry(dave)\nTEXT: Dave is quiet.\nFOL: Quiet(dave)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\nTEXT: Gary is furry.\nFOL: Furry(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Gary is rough.\nFOL: Rough(gary)\nTEXT: All furry, rough people are quiet.\nFOL: all x. (Furry(x) & Rough(x) -> Quiet(x))\nTEXT: If someone is green and smart then they are quiet.\nFOL: all x. ((Green(x) & Smart(x)) -> Quiet(x))\nTEXT: All furry, quiet people are kind.\nFOL: all x. (Furry(x) & Quiet(x) -> Kind(x))\nTEXT: All white, furry people are kind.\nFOL: all x. (White(x) & Furry(x) -> Kind(x))\nTEXT: If Dave is white and Dave is kind then Dave is green.\nFOL: (White(dave) & Kind(dave)) -> Green(dave)\nTEXT: If someone is quiet then they are kind.\nFOL: all x. (Quiet(x) -> Kind(x))\nTEXT: All kind people are white.\nFOL: all x. (Kind(x) -> White(x))\nTEXT: White, green people are smart.\nFOL: all x. ((White(x) & Green(x)) -> Smart(x))\nTEXT: Gary is smart.\nFOL: Smart(gary)\n</EVALUATE>"
  ]
 },
 {
  "index": 139,
  "responses": [
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: Bob is kind and nice and looks green.\nFOL: Kind(bob) & Nice(bob) & Green(bob)\nTEXT: Harry is a young man who is rather round and kind.\nFOL: Young(harry) & Round(harry) & Kind(harry)\nTEXT: Harry is feeling blue because he has a sunburn that is making him rather red and he is also rather ill which makes him appear green.\nFOL: Blue(harry) & Red(harry) & Ill(harry) & Green(harry)\nTEXT: A very nice person who is also green is certainly kind.\nFOL: Nice(x) & Green(x) -> Kind(x)\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: Rough(x) & Nice(x) & Round(x) -> Big(x)\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: Kind(x) & Cold(x) & Blue(x) -> VeryBig(x)\nTEXT: A person who is kind and rough and blue is young.\nFOL: Kind(x) & Rough(x) & Blue(x) -> Young(x)\nTEXT: People turn green when they are feeling blue.\nFOL: Blue(x) -> Green(x)\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: Blue(x) & Kind(x) & Nice(x) -> Cold(x)\nTEXT: A nice and green man or woman is also red in color.\nFOL: Nice(x) & Green(x) -> Red(x)\nTEXT: Alan is round.\nFOL: Round(alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: Bob is kind and nice and looks green.\nFOL: Kind(bob) & Nice(bob) & Green(bob)\nTEXT: Harry is a young man who is rather round and kind.\nFOL: YoungMan(harry) & Round(harry) & Kind(harry)\nTEXT: Harry is feeling blue because he has a sunburn that is making him rather red and he is also rather ill which makes him appear green.\nFOL: Blue(harry) & Red(harry) & Ill(harry) & Green(harry)\nTEXT: A very nice person who is also green is certainly kind.\nFOL: Nice(x) & Green(x) -> Kind(x)\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: Rough(x) & Nice(x) & Round(x) -> Big(x)\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: Kind(x) & Cold(x) & Blue(x) -> VeryBig(x)\nTEXT: A person who is kind and rough and blue is young.\nFOL: Kind(x) & Rough(x) & Blue(x) -> Young(x)\nTEXT: People turn green when they are feeling blue.\nFOL: Blue(x) -> Green(x)\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: Blue(x) & Kind(x) & Nice(x) -> Cold(x)\nTEXT: A nice and green man or woman is also red in color.\nFOL: Nice(x) & Green(x) -> Red(x)\nTEXT: Alan is round.\nFOL: Round(alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: Bob is kind and nice and looks green.\nFOL: Kind(bob) & Nice(bob) & Green(bob)\nTEXT: Harry is a young man who is rather round and kind.\nFOL: Young(harry) & Round(harry) & Kind(harry)\nTEXT: Harry is feeling blue because he has a sunburn that is making him rather red and he is also rather ill which makes him appear green.\nFOL: Blue(harry) & Red(harry) & Ill(harry) & Green(harry)\nTEXT: A very nice person who is also green is certainly kind.\nFOL: Nice(x) & Green(x) -> Kind(x)\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: all x. (Rough(x) & Nice(x) & Round(x) -> Big(x))\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: all x. (Kind(x) & Cold(x) & Blue(x) -> VeryBig(x))\nTEXT: A person who is kind and rough and blue is young.\nFOL: Kind(x) & Rough(x) & Blue(x) -> Young(x)\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Blue(x) -> Green(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: all x. (Blue(x) & Kind(x) & Nice(x) -> Cold(x))\nTEXT: A nice and green man or woman is also red in color.\nFOL: Nice(x) & Green(x) -> Red(x)\nTEXT: Alan is round.\nFOL: Round(alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: Bob is kind and nice and looks green.\nFOL: Kind(bob) & Nice(bob) & Green(bob)\nTEXT: Harry is a young man who is rather round and kind.\nFOL: YoungMan(harry) & Round(harry) & Kind(harry)\nTEXT: Harry is feeling blue because he has a sunburn that is making him rather red and he is also rather ill which makes him appear green.\nFOL: Blue(harry) & Red(harry) & Ill(harry) & Green(harry)\nTEXT: A very nice person who is also green is certainly kind.\nFOL: Nice(x) & Green(x) -> Kind(x)\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: all x. (Rough(x) & Nice(x) & Round(x) -> Big(x))\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: all x. (Kind(x) & Cold(x) & Blue(x) -> VeryBig(x))\nTEXT: A person who is kind and rough and blue is young.\nFOL: Kind(x) & Rough(x) & Blue(x) -> Young(x)\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Blue(x) -> Green(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: all x. (Blue(x) & Kind(x) & Nice(x) -> Cold(x))\nTEXT: A nice and green man or woman is also red in color.\nFOL: Nice(x) & Green(x) -> Red(x)\nTEXT: Alan is round.\nFOL: Round(alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: Bob is kind and nice and looks green.\nFOL: Kind(bob) & Nice(bob) & Green(bob)\nTEXT: Harry is a young man who is rather round and kind.\nFOL: YoungMan(harry) & Round(harry) & Kind(harry)\nTEXT: Harry is feeling blue because he has a sunburn that is making him rather red and he is also rather ill which makes him appear green.\nFOL: Blue(harry) & Red(harry) & Ill(harry) & Green(harry)\nTEXT: A very nice person who is also green is certainly kind.\nFOL: Nice(x) & Green(x) -> Kind(x)\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: all x. (Rough(x) & Nice(x) & Round(x) -> Big(x))\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: all x. (Kind(x) & Cold(x) & Blue(x) -> VeryBig(x))\nTEXT: A person who is kind and rough and blue is young.\nFOL: Kind(x) & Rough(x) & Blue(x) -> YoungMan(x)\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Blue(x) -> Green(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: all x. (Blue(x) & Kind(x) & Nice(x) -> Cold(x))\nTEXT: A nice and green man or woman is also red in color.\nFOL: Nice(x) & Green(x) -> Red(x)\nTEXT: Alan is round.\nFOL: Round(alan)\n</EVALUATE>"
  ]
 },
 {
  "index": 140,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle visits the rabbit.\nFOL: Visits(baldEagle, rabbit)\nTEXT: The rabbit chases the bald eagle.\nFOL: Chases(rabbit, baldEagle)\nTEXT: The rabbit visits the bald eagle.\nFOL: Visits(rabbit, baldEagle)\nTEXT: If something chases the bald eagle and it visits the bald eagle then it sees the bald eagle.\nFOL: all x. ((Chases(x, baldEagle) & Visits(x, baldEagle)) -> Sees(x, baldEagle))\nTEXT: If something sees the rabbit then the rabbit chases the bald eagle.\nFOL: all x. (Sees(x, rabbit) -> Chases(rabbit, baldEagle))\nTEXT: If something is red and it chases the rabbit then the rabbit is big.\nFOL: all x. ((Red(x) & Chases(x, rabbit)) -> Big(rabbit))\nTEXT: The rabbit visits the bald eagle.\nFOL: Visits(rabbit, baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle visits the rabbit.\nFOL: Visits(baldEagle, rabbit)\nTEXT: The rabbit chases the bald eagle.\nFOL: Chases(rabbit, baldEagle)\nTEXT: The rabbit visits the bald eagle.\nFOL: Visits(rabbit, baldEagle)\nTEXT: If something chases the bald eagle and it visits the bald eagle then it sees the bald eagle.\nFOL: all x. (Chases(x, baldEagle) & Visits(x, baldEagle) -> Sees(x, baldEagle))\nTEXT: If something sees the rabbit then the rabbit chases the bald eagle.\nFOL: all x. (Sees(x, rabbit) -> Chases(rabbit, baldEagle))\nTEXT: If something is red and it chases the rabbit then the rabbit is big.\nFOL: all x. ((Red(x) & Chases(x, rabbit)) -> Big(rabbit))\nTEXT: The rabbit visits the bald eagle.\nFOL: Visits(rabbit, baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle visits the rabbit.\nFOL: Visits(baldEagle, rabbit)\nTEXT: The rabbit chases the bald eagle.\nFOL: Chases(rabbit, baldEagle)\nTEXT: The rabbit visits the bald eagle.\nFOL: Visits(rabbit, baldEagle)\nTEXT: If something chases the bald eagle and it visits the bald eagle then it sees the bald eagle.\nFOL: all x. (Chases(x, baldEagle) & Visits(x, baldEagle) -> Sees(x, baldEagle))\nTEXT: If something sees the rabbit then the rabbit chases the bald eagle.\nFOL: all x. (Sees(x, rabbit) -> Chases(rabbit, baldEagle))\nTEXT: If something is red and it chases the rabbit then the rabbit is big.\nFOL: all x. (Red(x) & Chases(x, rabbit) -> Big(rabbit))\nTEXT: The rabbit visits the bald eagle.\nFOL: Visits(rabbit, baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle visits the rabbit.\nFOL: Visits(baldEagle, rabbit)\nTEXT: The rabbit chases the bald eagle.\nFOL: Chases(rabbit, baldEagle)\nTEXT: The rabbit visits the bald eagle.\nFOL: Visits(rabbit, baldEagle)\nTEXT: If something chases the bald eagle and it visits the bald eagle then it sees the bald eagle.\nFOL: (Chases(x, baldEagle) & Visits(x, baldEagle)) -> Sees(x, baldEagle)\nTEXT: If something sees the rabbit then the rabbit chases the bald eagle.\nFOL: (Sees(x, rabbit) -> Chases(rabbit, baldEagle))\nTEXT: If something is red and it chases the rabbit then the rabbit is big.\nFOL: (Red(x) & Chases(x, rabbit)) -> Big(rabbit)\nTEXT: The rabbit visits the bald eagle.\nFOL: Visits(rabbit, baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle visits the rabbit.\nFOL: Visits(baldEagle, rabbit)\nTEXT: The rabbit chases the bald eagle.\nFOL: Chases(rabbit, baldEagle)\nTEXT: The rabbit visits the bald eagle.\nFOL: Visits(rabbit, baldEagle)\nTEXT: If something chases the bald eagle and it visits the bald eagle then it sees the bald eagle.\nFOL: (Chases(x, baldEagle) & Visits(x, baldEagle)) -> Sees(x, baldEagle)\nTEXT: If something sees the rabbit then the rabbit chases the bald eagle.\nFOL: Sees(x, rabbit) -> Chases(rabbit, baldEagle)\nTEXT: If something is red and it chases the rabbit then the rabbit is big.\nFOL: (Red(x) & Chases(x, rabbit)) -> Big(rabbit)\nTEXT: The rabbit visits the bald eagle.\nFOL: Visits(rabbit, baldEagle)\n</EVALUATE>"
  ]
 },
 {
  "index": 141,
  "responses": [
   "<EVALUATE>\nTEXT: Charlie is round but he is also nice and kind.\nFOL: (Round(charlie) & Nice(charlie) & Kind(charlie))\nTEXT: Dave is both young and red, but is nice and kind but he can be cold.\nFOL: (Young(dave) & Red(dave) & Nice(dave) & Kind(dave) & Cold(dave))\nTEXT: The young person who is always feeling cold is named Fred.\nFOL: Young(fred) & Cold(fred)\nTEXT: Gary may be round, but he is also kind.\nFOL: -Round(gary) | Kind(gary)\nTEXT: Young people that are turning blue from being cold will be rough looking.\nFOL: all x. (Young(x) & Cold(x) & Blue(x) -> Rough(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: A person that is both nice and rough is someone who is also big.\nFOL: all x. (Nice(x) & Rough(x) -> Big(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Kind(x) & Round(x) -> Big(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> Kind(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: Cold(blue) & Rough(blue) & Kind(blue)\nTEXT: Dave is rough.\nFOL: Rough(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is round but he is also nice and kind.\nFOL: (Round(charlie) & Nice(charlie) & Kind(charlie))\nTEXT: Dave is both young and red, but is nice and kind but he can be cold.\nFOL: (Young(dave) & Red(dave) & Nice(dave) & Kind(dave) & Cold(dave))\nTEXT: The young person who is always feeling cold is named Fred.\nFOL: Young(fred) & Cold(fred)\nTEXT: Gary may be round, but he is also kind.\nFOL: (Round(gary) | Kind(gary))\nTEXT: Young people that are turning blue from being cold will be rough looking.\nFOL: all x. (Young(x) & Cold(x) & Blue(x) -> Rough(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: A person that is both nice and rough is someone who is also big.\nFOL: all x. ((Nice(x) & Rough(x)) -> Big(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Kind(x) & Round(x) -> Big(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> Kind(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: (Cold(bluePerson) & Rough(bluePerson) -> Kind(bluePerson))\nTEXT: Dave is rough.\nFOL: Rough(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is round but he is also nice and kind.\nFOL: (Round(charlie) & Nice(charlie) & Kind(charlie))\nTEXT: Dave is both young and red, but is nice and kind but he can be cold.\nFOL: (Young(dave) & Red(dave) & Nice(dave) & Kind(dave) & Cold(dave))\nTEXT: The young person who is always feeling cold is named Fred.\nFOL: Young(fred) & Cold(fred)\nTEXT: Gary may be round, but he is also kind.\nFOL: (Round(gary) | Kind(gary))\nTEXT: Young people that are turning blue from being cold will be rough looking.\nFOL: all x. (Young(x) & Cold(x) & Blue(x) -> Rough(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: A person that is both nice and rough is someone who is also big.\nFOL: all x. (Nice(x) & Rough(x) -> Big(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Kind(x) & Round(x) -> Big(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> Kind(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: (Cold(bluePerson) & Rough(bluePerson) -> Kind(bluePerson))\nTEXT: Dave is rough.\nFOL: Rough(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is round but he is also nice and kind.\nFOL: (Round(charlie) & Nice(charlie) & Kind(charlie))\nTEXT: Dave is both young and red, but is nice and kind but he can be cold.\nFOL: (Young(dave) & Red(dave) & Nice(dave) & Kind(dave) & Cold(dave))\nTEXT: The young person who is always feeling cold is named Fred.\nFOL: Young(fred) & Cold(fred)\nTEXT: Gary may be round, but he is also kind.\nFOL: (Round(gary) | Kind(gary))\nTEXT: Young people that are turning blue from being cold will be rough looking.\nFOL: all x. (Young(x) & Cold(x) & Blue(x) -> Rough(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: A person that is both nice and rough is someone who is also big.\nFOL: all x. (Nice(x) & Rough(x) -> Big(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Kind(x) & Round(x) -> Big(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> Kind(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: (Cold(bluePerson) & Rough(bluePerson) & Kind(bluePerson))\nTEXT: Dave is rough.\nFOL: Rough(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is round but he is also nice and kind.\nFOL: (Round(charlie) & Nice(charlie) & Kind(charlie))\nTEXT: Dave is both young and red, but is nice and kind but he can be cold.\nFOL: (Young(dave) & Red(dave) & Nice(dave) & Kind(dave) & Cold(dave))\nTEXT: The young person who is always feeling cold is named Fred.\nFOL: Young(fred) & Cold(fred)\nTEXT: Gary may be round, but he is also kind.\nFOL: (Round(gary) | Kind(gary))\nTEXT: Young people that are turning blue from being cold will be rough looking.\nFOL: all x. (Young(x) & Cold(x) & Blue(x) -> Rough(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: A person that is both nice and rough is someone who is also big.\nFOL: all x. ((Nice(x) & Rough(x)) -> Big(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Kind(x) & Round(x) -> Big(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> Kind(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: (Cold(bluePerson) & Rough(bluePerson) & Kind(bluePerson))\nTEXT: Dave is rough.\nFOL: Rough(dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 142,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is quiet.\nFOL: Quiet(dave)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Fiona is quiet.\nFOL: Quiet(fiona)\nTEXT: Gary is green.\nFOL: Green(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is furry.\nFOL: Furry(harry)\nTEXT: Harry is kind.\nFOL: Kind(harry)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: Quiet, furry things are green.\nFOL: all x. (Quiet(x) & Furry(x) -> Green(x))\nTEXT: All furry, rough things are quiet.\nFOL: all x. (Furry(x) & Rough(x) -> Quiet(x))\nTEXT: If Fiona is quiet then Fiona is furry.\nFOL: Quiet(fiona) -> Furry(fiona)\nTEXT: Dave is smart.\nFOL: Smart(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is quiet.\nFOL: Quiet(dave)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Fiona is quiet.\nFOL: Quiet(fiona)\nTEXT: Gary is green.\nFOL: Green(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is furry.\nFOL: Furry(harry)\nTEXT: Harry is kind.\nFOL: Kind(harry)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: Quiet, furry things are green.\nFOL: all x. ((Quiet(x) & Furry(x)) -> Green(x))\nTEXT: All furry, rough things are quiet.\nFOL: all x. ((Furry(x) & Rough(x)) -> Quiet(x))\nTEXT: If Fiona is quiet then Fiona is furry.\nFOL: Quiet(fiona) -> Furry(fiona)\nTEXT: Dave is smart.\nFOL: Smart(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is quiet.\nFOL: Quiet(dave)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Fiona is quiet.\nFOL: Quiet(fiona)\nTEXT: Gary is green.\nFOL: Green(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is furry.\nFOL: Furry(harry)\nTEXT: Harry is kind.\nFOL: Kind(harry)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: Quiet, furry things are green.\nFOL: all x. ((Quiet(x) & Furry(x)) -> Green(x))\nTEXT: All furry, rough things are quiet.\nFOL: all x. (Furry(x) & Rough(x) -> Quiet(x))\nTEXT: If Fiona is quiet then Fiona is furry.\nFOL: Quiet(fiona) -> Furry(fiona)\nTEXT: Dave is smart.\nFOL: Smart(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is quiet.\nFOL: Quiet(dave)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Fiona is quiet.\nFOL: Quiet(fiona)\nTEXT: Gary is green.\nFOL: Green(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is furry.\nFOL: Furry(harry)\nTEXT: Harry is kind.\nFOL: Kind(harry)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: Quiet, furry things are green.\nFOL: all x. (Quiet(x) & Furry(x) -> Green(x))\nTEXT: All furry, rough things are quiet.\nFOL: all x. ((Furry(x) & Rough(x)) -> Quiet(x))\nTEXT: If Fiona is quiet then Fiona is furry.\nFOL: Quiet(fiona) -> Furry(fiona)\nTEXT: Dave is smart.\nFOL: Smart(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is quiet.\nFOL: Quiet(dave)\nTEXT: Dave is rough.\nFOL: Rough(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Fiona is quiet.\nFOL: Quiet(fiona)\nTEXT: Gary is green.\nFOL: Green(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is furry.\nFOL: Furry(harry)\nTEXT: Harry is kind.\nFOL: Kind(harry)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: Quiet, furry things are green.\nFOL: all x. (Quiet(x) & Furry(x) -> Green(x))\nTEXT: All furry, rough things are quiet.\nFOL: all x. (Furry(x) & Rough(x) -> Quiet(x))\nTEXT: If Fiona is quiet then Fiona is furry.\nFOL: (Quiet(fiona) -> Furry(fiona))\nTEXT: Dave is smart.\nFOL: Smart(dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 143,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: Eats(baldEagle, rabbit)\nTEXT: The bald eagle is not blue.\nFOL: -Blue(baldEagle)\nTEXT: The bald eagle sees the mouse.\nFOL: Sees(baldEagle, mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: Sees(baldEagle, tiger)\nTEXT: The mouse is not kind.\nFOL: -Kind(mouse)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger sees the rabbit.\nFOL: Sees(tiger, rabbit)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: (Young(mouse) & Eats(mouse, baldEagle)) -> Needs(mouse, rabbit)\nTEXT: If something is blue then it eats the mouse.\nFOL: all x. (Blue(x) -> Eats(x, mouse))\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: all x. ((Kind(x) & -Young(x)) -> Eats(x, mouse))\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: all x. (Sees(x, tiger) -> Eats(x, rabbit))\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: all x. (Sees(x, rabbit) -> -Blue(rabbit))\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: all x. (Eats(x, mouse) -> Blue(mouse))\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: all x. ((Needs(x, rabbit) & Eats(rabbit, tiger)) -> Sees(tiger, rabbit))\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: all x. ((Eats(x, mouse) & Eats(mouse, tiger)) -> -Sees(mouse, rabbit))\nTEXT: The tiger is round.\nFOL: Round(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: Eats(baldEagle, rabbit)\nTEXT: The bald eagle is not blue.\nFOL: -Blue(baldEagle)\nTEXT: The bald eagle sees the mouse.\nFOL: Sees(baldEagle, mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: Sees(baldEagle, tiger)\nTEXT: The mouse is not kind.\nFOL: -Kind(mouse)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger sees the rabbit.\nFOL: Sees(tiger, rabbit)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: (Young(mouse) & Eats(mouse, baldEagle) -> Needs(mouse, rabbit))\nTEXT: If something is blue then it eats the mouse.\nFOL: all x. (Blue(x) -> Eats(x, mouse))\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: all x. ((Kind(x) & -Young(x)) -> Eats(x, mouse))\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: all x. (Sees(x, tiger) -> Eats(x, rabbit))\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: all x. (Sees(x, rabbit) -> -Blue(rabbit))\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: all x. (Eats(x, mouse) -> Blue(mouse))\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: all x. ((Needs(x, rabbit) & Eats(rabbit, tiger)) -> Sees(tiger, rabbit))\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: all x. ((Eats(x, mouse) & Eats(mouse, tiger)) -> -Sees(mouse, rabbit))\nTEXT: The tiger is round.\nFOL: Round(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: Eats(baldEagle, rabbit)\nTEXT: The bald eagle is not blue.\nFOL: -Blue(baldEagle)\nTEXT: The bald eagle sees the mouse.\nFOL: Sees(baldEagle, mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: Sees(baldEagle, tiger)\nTEXT: The mouse is not kind.\nFOL: -Kind(mouse)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger sees the rabbit.\nFOL: Sees(tiger, rabbit)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: (Young(mouse) & Eats(mouse, baldEagle)) -> Needs(mouse, rabbit)\nTEXT: If something is blue then it eats the mouse.\nFOL: all x. (Blue(x) -> Eats(x, mouse))\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: all x. ((Kind(x) & -Young(x)) -> Eats(x, mouse))\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: all x. (Sees(x, tiger) -> Eats(x, rabbit))\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: all x. (Sees(x, rabbit) -> -Blue(rabbit))\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: all x. (Eats(x, mouse) -> Blue(mouse))\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: all x. ((Needs(x, rabbit) & Eats(rabbit, tiger)) -> Sees(x, rabbit))\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: all x. ((Eats(x, mouse) & Eats(mouse, tiger)) -> -Sees(x, rabbit))\nTEXT: The tiger is round.\nFOL: Round(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: Eats(baldEagle, rabbit)\nTEXT: The bald eagle is not blue.\nFOL: -Blue(baldEagle)\nTEXT: The bald eagle sees the mouse.\nFOL: Sees(baldEagle, mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: Sees(baldEagle, tiger)\nTEXT: The mouse is not kind.\nFOL: -Kind(mouse)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger sees the rabbit.\nFOL: Sees(tiger, rabbit)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: (Young(mouse) & Eats(mouse, baldEagle)) -> Needs(mouse, rabbit)\nTEXT: If something is blue then it eats the mouse.\nFOL: all x. (Blue(x) -> Eats(x, mouse))\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: all x. (Kind(x) & -Young(x) -> Eats(x, mouse))\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: all x. (Sees(x, tiger) -> Eats(x, rabbit))\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: all x. (Sees(x, rabbit) -> -Blue(rabbit))\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: all x. (Eats(x, mouse) -> Blue(mouse))\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: all x. (Needs(x, rabbit) & Eats(rabbit, tiger) -> Sees(tiger, rabbit))\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: all x. (Eats(x, mouse) & Eats(mouse, tiger) -> -Sees(mouse, rabbit))\nTEXT: The tiger is round.\nFOL: Round(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: BaldEagle(x) & Rabbit(y) -> Eats(x, y)\nTEXT: The bald eagle is not blue.\nFOL: -Blue(baldEagle)\nTEXT: The bald eagle sees the mouse.\nFOL: BaldEagle(x) & Mouse(y) -> Sees(x, y)\nTEXT: The bald eagle sees the tiger.\nFOL: BaldEagle(x) & Tiger(y) -> Sees(x, y)\nTEXT: The mouse is not kind.\nFOL: -Kind(mouse)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger sees the rabbit.\nFOL: Tiger(x) & Rabbit(y) -> Sees(x, y)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: Young(mouse) & Eats(mouse, baldEagle) -> Needs(mouse, rabbit)\nTEXT: If something is blue then it eats the mouse.\nFOL: all x. (Blue(x) -> Eats(x, mouse))\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: all x. ((Kind(x) & -Young(x)) -> Eats(x, mouse))\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: all x. (Sees(x, tiger) -> Eats(x, rabbit))\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: all x. (Sees(x, rabbit) -> -Blue(rabbit))\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: all x. (Eats(x, mouse) -> Blue(mouse))\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: all x. ((Needs(x, rabbit) & Eats(rabbit, tiger)) -> Sees(tiger, rabbit))\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: all x. ((Eats(x, mouse) & Eats(mouse, tiger)) -> -Sees(mouse, rabbit))\nTEXT: The tiger is round.\nFOL: Round(tiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 144,
  "responses": [
   "<EVALUATE>\nTEXT: Fiona is big.\nFOL: Big(fiona)\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\nTEXT: Fiona is quiet.\nFOL: Quiet(fiona)\nTEXT: All furry things are nice.\nFOL: all x. (Furry(x) -> Nice(x))\nTEXT: If something is quiet and furry then it is rough.\nFOL: all x. (Quiet(x) & Furry(x) -> Rough(x))\nTEXT: If Fiona is big and Fiona is white then Fiona is quiet.\nFOL: (Big(fiona) & White(fiona) -> Quiet(fiona))\nTEXT: If something is white then it is smart.\nFOL: all x. (White(x) -> Smart(x))\nTEXT: If Fiona is nice then Fiona is big.\nFOL: Nice(fiona) -> Big(fiona)\nTEXT: If Fiona is rough then Fiona is white.\nFOL: Rough(fiona) -> White(fiona)\nTEXT: Fiona is not smart.\nFOL: -Smart(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Fiona is big.\nFOL: Big(fiona)\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\nTEXT: Fiona is quiet.\nFOL: Quiet(fiona)\nTEXT: All furry things are nice.\nFOL: all x. (Furry(x) -> Nice(x))\nTEXT: If something is quiet and furry then it is rough.\nFOL: all x. ((Quiet(x) & Furry(x)) -> Rough(x))\nTEXT: If Fiona is big and Fiona is white then Fiona is quiet.\nFOL: (Big(fiona) & White(fiona)) -> Quiet(fiona)\nTEXT: If something is white then it is smart.\nFOL: all x. (White(x) -> Smart(x))\nTEXT: If Fiona is nice then Fiona is big.\nFOL: Nice(fiona) -> Big(fiona)\nTEXT: If Fiona is rough then Fiona is white.\nFOL: Rough(fiona) -> White(fiona)\nTEXT: Fiona is not smart.\nFOL: -Smart(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Fiona is big.\nFOL: Big(fiona)\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\nTEXT: Fiona is quiet.\nFOL: Quiet(fiona)\nTEXT: All furry things are nice.\nFOL: all x. (Furry(x) -> Nice(x))\nTEXT: If something is quiet and furry then it is rough.\nFOL: all x. ((Quiet(x) & Furry(x)) -> Rough(x))\nTEXT: If Fiona is big and Fiona is white then Fiona is quiet.\nFOL: (Big(fiona) & White(fiona) -> Quiet(fiona))\nTEXT: If something is white then it is smart.\nFOL: all x. (White(x) -> Smart(x))\nTEXT: If Fiona is nice then Fiona is big.\nFOL: Nice(fiona) -> Big(fiona)\nTEXT: If Fiona is rough then Fiona is white.\nFOL: Rough(fiona) -> White(fiona)\nTEXT: Fiona is not smart.\nFOL: -Smart(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Fiona is big.\nFOL: Big(fiona)\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\nTEXT: Fiona is quiet.\nFOL: Quiet(fiona)\nTEXT: All furry things are nice.\nFOL: all x. (Furry(x) -> Nice(x))\nTEXT: If something is quiet and furry then it is rough.\nFOL: all x. (Quiet(x) & Furry(x) -> Rough(x))\nTEXT: If Fiona is big and Fiona is white then Fiona is quiet.\nFOL: Big(fiona) & White(fiona) -> Quiet(fiona)\nTEXT: If something is white then it is smart.\nFOL: all x. (White(x) -> Smart(x))\nTEXT: If Fiona is nice then Fiona is big.\nFOL: Nice(fiona) -> Big(fiona)\nTEXT: If Fiona is rough then Fiona is white.\nFOL: Rough(fiona) -> White(fiona)\nTEXT: Fiona is not smart.\nFOL: -Smart(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Fiona is big.\nFOL: Big(fiona)\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\nTEXT: Fiona is quiet.\nFOL: Quiet(fiona)\nTEXT: All furry things are nice.\nFOL: all x. (Furry(x) -> Nice(x))\nTEXT: If something is quiet and furry then it is rough.\nFOL: (Quiet(x) & Furry(x)) -> Rough(x)\nTEXT: If Fiona is big and Fiona is white then Fiona is quiet.\nFOL: (Big(fiona) & White(fiona)) -> Quiet(fiona)\nTEXT: If something is white then it is smart.\nFOL: all x. (White(x) -> Smart(x))\nTEXT: If Fiona is nice then Fiona is big.\nFOL: Nice(fiona) -> Big(fiona)\nTEXT: If Fiona is rough then Fiona is white.\nFOL: Rough(fiona) -> White(fiona)\nTEXT: Fiona is not smart.\nFOL: -Smart(fiona)\n</EVALUATE>"
  ]
 },
 {
  "index": 145,
  "responses": [
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: YoungAndCold(charlie)\nTEXT: Eric is kind.\nFOL: Kind(eric)\nTEXT: He is also very cold and blue.\nFOL: Cold(he) & Blue(he)\nTEXT: Fred seems to be round.\nFOL: Round(fred)\nTEXT: Harry is green and cold too.\nFOL: Green(harry) & Cold(harry)\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> Nice(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) -> Kind(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Red(x) -> Young(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & (Nice(x) | Red(x)))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: all x. (Blue(x) & Kind(x) & Nice(x) -> Cold(x))\nTEXT: Harry is not young.\nFOL: -Young(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: YoungAndCold(charlie)\nTEXT: Eric is kind.\nFOL: Kind(eric)\nTEXT: He is also very cold and blue.\nFOL: Cold(he) & Blue(he)\nTEXT: Fred seems to be round.\nFOL: Round(fred)\nTEXT: Harry is green and cold too.\nFOL: Green(harry) & Cold(harry)\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> Nice(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) -> Kind(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Red(x) -> Young(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & (Nice(x) | Red(x)))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: all x. ((Blue(x) & Kind(x) & Nice(x)) -> Cold(x))\nTEXT: Harry is not young.\nFOL: -Young(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: YoungAndCold(charlie)\nTEXT: Eric is kind.\nFOL: Kind(eric)\nTEXT: He is also very cold and blue.\nFOL: Cold(he) & Blue(he)\nTEXT: Fred seems to be round.\nFOL: Round(fred)\nTEXT: Harry is green and cold too.\nFOL: Green(harry) & Cold(harry)\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> Nice(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) -> Kind(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Red(x) -> Young(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & (Nice(x) | Red(x)))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: all x. ((Blue(x) & (Kind(x) & Nice(x))) -> Cold(x))\nTEXT: Harry is not young.\nFOL: -Young(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: YoungAndCold(charlie)\nTEXT: Eric is kind.\nFOL: Kind(eric)\nTEXT: He is also very cold and blue.\nFOL: Cold(he) & Blue(he)\nTEXT: Fred seems to be round.\nFOL: Round(fred)\nTEXT: Harry is green and cold too.\nFOL: Green(harry) & Cold(harry)\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> Nice(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) -> Kind(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Red(x) -> Young(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x) & Red(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: all x. (Blue(x) & Kind(x) & Nice(x) -> Cold(x))\nTEXT: Harry is not young.\nFOL: -Young(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Young(x) & AlwaysCold(x) -> Charlie(x))\nTEXT: Eric is kind.\nFOL: Kind(eric)\nTEXT: He is also very cold and blue.\nFOL: VeryCold(he) & Blue(he)\nTEXT: Fred seems to be round.\nFOL: Round(fred)\nTEXT: Harry is green and cold too.\nFOL: Green(harry) & Cold(harry)\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> Nice(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) -> Kind(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Red(x) -> Young(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & (Nice(x) | Red(x)))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: all x. ((Blue(x) & Kind(x) & Nice(x)) -> Cold(x))\nTEXT: Harry is not young.\nFOL: -Young(harry)\n</EVALUATE>"
  ]
 },
 {
  "index": 146,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is rough.\nFOL: Rough(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Charlie is red.\nFOL: Red(charlie)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: If Harry is nice then Harry is big.\nFOL: Nice(harry) -> Big(harry)\nTEXT: All young, white people are round.\nFOL: all x. (Young(x) & White(x) -> Round(x))\nTEXT: Red people are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If Charlie is nice and Charlie is round then Charlie is red.\nFOL: (Nice(charlie) & Round(charlie)) -> Red(charlie)\nTEXT: Rough, red people are big.\nFOL: all x. (Rough(x) & Red(x) -> Big(x))\nTEXT: All big people are white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: Harry is not big.\nFOL: -Big(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is rough.\nFOL: Rough(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Charlie is red.\nFOL: Red(charlie)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: If Harry is nice then Harry is big.\nFOL: Nice(harry) -> Big(harry)\nTEXT: All young, white people are round.\nFOL: all x. ((Young(x) & White(x)) -> Round(x))\nTEXT: Red people are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If Charlie is nice and Charlie is round then Charlie is red.\nFOL: (Nice(charlie) & Round(charlie)) -> Red(charlie)\nTEXT: Rough, red people are big.\nFOL: all x. (Rough(x) & Red(x) -> Big(x))\nTEXT: All big people are white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: Harry is not big.\nFOL: -Big(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is rough.\nFOL: Rough(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Charlie is red.\nFOL: Red(charlie)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: If Harry is nice then Harry is big.\nFOL: (Nice(harry) -> Big(harry))\nTEXT: All young, white people are round.\nFOL: all x. (Young(x) & White(x) -> Round(x))\nTEXT: Red people are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If Charlie is nice and Charlie is round then Charlie is red.\nFOL: (Nice(charlie) & Round(charlie) -> Red(charlie))\nTEXT: Rough, red people are big.\nFOL: all x. (Rough(x) & Red(x) -> Big(x))\nTEXT: All big people are white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: Harry is not big.\nFOL: -Big(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is rough.\nFOL: Rough(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Charlie is red.\nFOL: Red(charlie)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: If Harry is nice then Harry is big.\nFOL: Nice(harry) -> Big(harry)\nTEXT: All young, white people are round.\nFOL: all x. (Young(x) & White(x) -> Round(x))\nTEXT: Red people are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If Charlie is nice and Charlie is round then Charlie is red.\nFOL: (Nice(charlie) & Round(charlie)) -> Red(charlie)\nTEXT: Rough, red people are big.\nFOL: all x. ((Rough(x) & Red(x)) -> Big(x))\nTEXT: All big people are white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: Harry is not big.\nFOL: -Big(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is rough.\nFOL: Rough(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Charlie is red.\nFOL: Red(charlie)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: If Harry is nice then Harry is big.\nFOL: (Nice(harry) -> Big(harry))\nTEXT: All young, white people are round.\nFOL: all x. ((Young(x) & White(x)) -> Round(x))\nTEXT: Red people are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If Charlie is nice and Charlie is round then Charlie is red.\nFOL: (Nice(charlie) & Round(charlie) -> Red(charlie))\nTEXT: Rough, red people are big.\nFOL: all x. (Rough(x) & Red(x) -> Big(x))\nTEXT: All big people are white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: Harry is not big.\nFOL: -Big(harry)\n</EVALUATE>"
  ]
 },
 {
  "index": 147,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is cold.\nFOL: Cold(dave)\nTEXT: Dave is furry.\nFOL: Furry(dave)\nTEXT: Dave is not red.\nFOL: -Red(dave)\nTEXT: Dave is round.\nFOL: Round(dave)\nTEXT: Fiona is not red.\nFOL: -Red(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: If someone is red and not blue then they are big.\nFOL: all x. (Red(x) & -Blue(x) -> Big(x))\nTEXT: All furry people are big.\nFOL: all x. (Furry(x) -> Big(x))\nTEXT: If someone is kind and not red then they are furry.\nFOL: all x. (Kind(x) & -Red(x) -> Furry(x))\nTEXT: If Fiona is round then Fiona is kind.\nFOL: Round(fiona) -> Kind(fiona)\nTEXT: If Fiona is round then Fiona is cold.\nFOL: Round(fiona) -> Cold(fiona)\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x. (Red(x) & -Kind(x) -> Cold(x))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: Dave is not red.\nFOL: -Red(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is cold.\nFOL: Cold(dave)\nTEXT: Dave is furry.\nFOL: Furry(dave)\nTEXT: Dave is not red.\nFOL: -Red(dave)\nTEXT: Dave is round.\nFOL: Round(dave)\nTEXT: Fiona is not red.\nFOL: -Red(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: If someone is red and not blue then they are big.\nFOL: (Red(x) & -Blue(x) -> Big(x))\nTEXT: All furry people are big.\nFOL: all x. (Furry(x) -> Big(x))\nTEXT: If someone is kind and not red then they are furry.\nFOL: all x. (Kind(x) & -Red(x) -> Furry(x))\nTEXT: If Fiona is round then Fiona is kind.\nFOL: Round(fiona) -> Kind(fiona)\nTEXT: If Fiona is round then Fiona is cold.\nFOL: Round(fiona) -> Cold(fiona)\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x. (Red(x) & -Kind(x) -> Cold(x))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: Dave is not red.\nFOL: -Red(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is cold.\nFOL: Cold(dave)\nTEXT: Dave is furry.\nFOL: Furry(dave)\nTEXT: Dave is not red.\nFOL: -Red(dave)\nTEXT: Dave is round.\nFOL: Round(dave)\nTEXT: Fiona is not red.\nFOL: -Red(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: If someone is red and not blue then they are big.\nFOL: (Red(x) & -Blue(x) -> Big(x))\nTEXT: All furry people are big.\nFOL: all x. (Furry(x) -> Big(x))\nTEXT: If someone is kind and not red then they are furry.\nFOL: (Kind(x) & -Red(x) -> Furry(x))\nTEXT: If Fiona is round then Fiona is kind.\nFOL: Round(fiona) -> Kind(fiona)\nTEXT: If Fiona is round then Fiona is cold.\nFOL: Round(fiona) -> Cold(fiona)\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: (Red(x) & -Kind(x) -> Cold(x))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: Dave is not red.\nFOL: -Red(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is cold.\nFOL: Cold(dave)\nTEXT: Dave is furry.\nFOL: Furry(dave)\nTEXT: Dave is not red.\nFOL: -Red(dave)\nTEXT: Dave is round.\nFOL: Round(dave)\nTEXT: Fiona is not red.\nFOL: -Red(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: If someone is red and not blue then they are big.\nFOL: all x. ((Red(x) & -Blue(x)) -> Big(x))\nTEXT: All furry people are big.\nFOL: all x. (Furry(x) -> Big(x))\nTEXT: If someone is kind and not red then they are furry.\nFOL: all x. ((Kind(x) & -Red(x)) -> Furry(x))\nTEXT: If Fiona is round then Fiona is kind.\nFOL: Round(fiona) -> Kind(fiona)\nTEXT: If Fiona is round then Fiona is cold.\nFOL: Round(fiona) -> Cold(fiona)\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x. ((Red(x) & -Kind(x)) -> Cold(x))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: Dave is not red.\nFOL: -Red(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Big(dave)\nTEXT: Dave is cold.\nFOL: Cold(dave)\nTEXT: Dave is furry.\nFOL: Furry(dave)\nTEXT: Dave is not red.\nFOL: -Red(dave)\nTEXT: Dave is round.\nFOL: Round(dave)\nTEXT: Fiona is not red.\nFOL: -Red(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: If someone is red and not blue then they are big.\nFOL: all x. (Red(x) & -Blue(x) -> Big(x))\nTEXT: All furry people are big.\nFOL: all x. (Furry(x) -> Big(x))\nTEXT: If someone is kind and not red then they are furry.\nFOL: all x. (Kind(x) & -Red(x) -> Furry(x))\nTEXT: If Fiona is round then Fiona is kind.\nFOL: Kind(fiona) | -Round(fiona)\nTEXT: If Fiona is round then Fiona is cold.\nFOL: Cold(fiona) | -Round(fiona)\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x. (Red(x) & -Kind(x) -> Cold(x))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: Dave is not red.\nFOL: -Red(dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 148,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is kind.\nFOL: Kind(anne)\nTEXT: Fiona is blue.\nFOL: Blue(fiona)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is not round.\nFOL: -Round(fiona)\nTEXT: Fiona is young.\nFOL: Young(fiona)\nTEXT: Gary is blue.\nFOL: Blue(gary)\nTEXT: Gary is nice.\nFOL: Nice(gary)\nTEXT: Gary is quiet.\nFOL: Quiet(gary)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: If something is blue then it is white.\nFOL: all x. (Blue(x) -> White(x))\nTEXT: Nice, quiet things are white.\nFOL: all x. (Nice(x) & Quiet(x) -> White(x))\nTEXT: If something is blue then it is white.\nFOL: all x. (Blue(x) -> White(x))\nTEXT: If something is round then it is white.\nFOL: all x. (Round(x) -> White(x))\nTEXT: All white, quiet things are kind.\nFOL: all x. (White(x) & Quiet(x) -> Kind(x))\nTEXT: If Gary is kind then Gary is not young.\nFOL: Kind(gary) -> -Young(gary)\nTEXT: Anne is not blue.\nFOL: -Blue(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is kind.\nFOL: Kind(anne)\nTEXT: Fiona is blue.\nFOL: Blue(fiona)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is not round.\nFOL: -Round(fiona)\nTEXT: Fiona is young.\nFOL: Young(fiona)\nTEXT: Gary is blue.\nFOL: Blue(gary)\nTEXT: Gary is nice.\nFOL: Nice(gary)\nTEXT: Gary is quiet.\nFOL: Quiet(gary)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: If something is blue then it is white.\nFOL: all x. (Blue(x) -> White(x))\nTEXT: Nice, quiet things are white.\nFOL: all x. ((Nice(x) & Quiet(x)) -> White(x))\nTEXT: If something is blue then it is white.\nFOL: all x. (Blue(x) -> White(x))\nTEXT: If something is round then it is white.\nFOL: all x. (Round(x) -> White(x))\nTEXT: All white, quiet things are kind.\nFOL: all x. ((White(x) & Quiet(x)) -> Kind(x))\nTEXT: If Gary is kind then Gary is not young.\nFOL: Kind(gary) -> -Young(gary)\nTEXT: Anne is not blue.\nFOL: -Blue(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is kind.\nFOL: Kind(anne)\nTEXT: Fiona is blue.\nFOL: Blue(fiona)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is not round.\nFOL: -Round(fiona)\nTEXT: Fiona is young.\nFOL: Young(fiona)\nTEXT: Gary is blue.\nFOL: Blue(gary)\nTEXT: Gary is nice.\nFOL: Nice(gary)\nTEXT: Gary is quiet.\nFOL: Quiet(gary)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: If something is blue then it is white.\nFOL: all x. (Blue(x) -> White(x))\nTEXT: Nice, quiet things are white.\nFOL: all x. (Nice(x) & Quiet(x) -> White(x))\nTEXT: If something is blue then it is white.\nFOL: all x. (Blue(x) -> White(x))\nTEXT: If something is round then it is white.\nFOL: all x. (Round(x) -> White(x))\nTEXT: All white, quiet things are kind.\nFOL: all x. (White(x) & Quiet(x) -> Kind(x))\nTEXT: If Gary is kind then Gary is not young.\nFOL: (Kind(gary) -> -Young(gary))\nTEXT: Anne is not blue.\nFOL: -Blue(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is kind.\nFOL: Kind(anne)\nTEXT: Fiona is blue.\nFOL: Blue(fiona)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is not round.\nFOL: -Round(fiona)\nTEXT: Fiona is young.\nFOL: Young(fiona)\nTEXT: Gary is blue.\nFOL: Blue(gary)\nTEXT: Gary is nice.\nFOL: Nice(gary)\nTEXT: Gary is quiet.\nFOL: Quiet(gary)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: If something is blue then it is white.\nFOL: all x. (Blue(x) -> White(x))\nTEXT: Nice, quiet things are white.\nFOL: all x. ((Nice(x) & Quiet(x)) -> White(x))\nTEXT: If something is blue then it is white.\nFOL: all x. (Blue(x) -> White(x))\nTEXT: If something is round then it is white.\nFOL: all x. (Round(x) -> White(x))\nTEXT: All white, quiet things are kind.\nFOL: all x. (White(x) & Quiet(x) -> Kind(x))\nTEXT: If Gary is kind then Gary is not young.\nFOL: Kind(gary) -> -Young(gary)\nTEXT: Anne is not blue.\nFOL: -Blue(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is kind.\nFOL: Kind(anne)\nTEXT: Fiona is blue.\nFOL: Blue(fiona)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is not round.\nFOL: -Round(fiona)\nTEXT: Fiona is young.\nFOL: Young(fiona)\nTEXT: Gary is blue.\nFOL: Blue(gary)\nTEXT: Gary is nice.\nFOL: Nice(gary)\nTEXT: Gary is quiet.\nFOL: Quiet(gary)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: If something is blue then it is white.\nFOL: all x. (Blue(x) -> White(x))\nTEXT: Nice, quiet things are white.\nFOL: all x. ((Nice(x) & Quiet(x)) -> White(x))\nTEXT: If something is blue then it is white.\nFOL: all x. (Blue(x) -> White(x))\nTEXT: If something is round then it is white.\nFOL: all x. (Round(x) -> White(x))\nTEXT: All white, quiet things are kind.\nFOL: all x. ((White(x) & Quiet(x)) -> Kind(x))\nTEXT: If Gary is kind then Gary is not young.\nFOL: (Kind(gary) -> -Young(gary))\nTEXT: Anne is not blue.\nFOL: -Blue(anne)\n</EVALUATE>"
  ]
 },
 {
  "index": 149,
  "responses": [
   "<EVALUATE>\nTEXT: The bear needs the cat.\nFOL: Needs(bear, cat)\nTEXT: The cat needs the bear.\nFOL: Needs(cat, bear)\nTEXT: The lion chases the bear.\nFOL: Chases(lion, bear)\nTEXT: The lion needs the bear.\nFOL: Needs(lion, bear)\nTEXT: The lion needs the cat.\nFOL: Needs(lion, cat)\nTEXT: The lion sees the bear.\nFOL: Sees(lion, bear)\nTEXT: The lion sees the cat.\nFOL: Sees(lion, cat)\nTEXT: If something is round and it needs the lion then the lion sees the bear.\nFOL: (Round(x) & Needs(x, lion) -> Sees(lion, bear))\nTEXT: If the lion needs the bear and the lion sees the bear then the bear is blue.\nFOL: (Needs(lion, bear) & Sees(lion, bear) -> Blue(bear))\nTEXT: If the bear is green and the bear is rough then the bear is blue.\nFOL: (Green(bear) & Rough(bear) -> Blue(bear))\nTEXT: If something sees the lion and the lion sees the cat then the lion chases the bear.\nFOL: (Sees(x, lion) & Sees(lion, cat) -> Chases(lion, bear))\nTEXT: If something chases the lion then the lion does not chase the bear.\nFOL: (Chases(x, lion) -> -Chases(lion, bear))\nTEXT: If something sees the bear and it is cold then it is not round.\nFOL: (Sees(x, bear) & Cold(x) -> -Round(x))\nTEXT: If something needs the cat then it is round.\nFOL: (Needs(x, cat) -> Round(x))\nTEXT: If something chases the bear and the bear sees the lion then the bear chases the lion.\nFOL: (Chases(x, bear) & Sees(bear, lion) -> Chases(bear, lion))\nTEXT: The bear does not chase the lion.\nFOL: -Chases(bear, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear needs the cat.\nFOL: Needs(bear, cat)\nTEXT: The cat needs the bear.\nFOL: Needs(cat, bear)\nTEXT: The lion chases the bear.\nFOL: Chases(lion, bear)\nTEXT: The lion needs the bear.\nFOL: Needs(lion, bear)\nTEXT: The lion needs the cat.\nFOL: Needs(lion, cat)\nTEXT: The lion sees the bear.\nFOL: Sees(lion, bear)\nTEXT: The lion sees the cat.\nFOL: Sees(lion, cat)\nTEXT: If something is round and it needs the lion then the lion sees the bear.\nFOL: all x. ((Round(x) & Needs(x, lion)) -> Sees(lion, bear))\nTEXT: If the lion needs the bear and the lion sees the bear then the bear is blue.\nFOL: (Needs(lion, bear) & Sees(lion, bear)) -> Blue(bear)\nTEXT: If the bear is green and the bear is rough then the bear is blue.\nFOL: (Green(bear) & Rough(bear)) -> Blue(bear)\nTEXT: If something sees the lion and the lion sees the cat then the lion chases the bear.\nFOL: all x. ((Sees(x, lion) & Sees(lion, cat)) -> Chases(lion, bear))\nTEXT: If something chases the lion then the lion does not chase the bear.\nFOL: all x. (Chases(x, lion) -> -Chases(lion, bear))\nTEXT: If something sees the bear and it is cold then it is not round.\nFOL: all x. ((Sees(x, bear) & Cold(x)) -> -Round(x))\nTEXT: If something needs the cat then it is round.\nFOL: all x. (Needs(x, cat) -> Round(x))\nTEXT: If something chases the bear and the bear sees the lion then the bear chases the lion.\nFOL: all x. ((Chases(x, bear) & Sees(bear, lion)) -> Chases(bear, lion))\nTEXT: The bear does not chase the lion.\nFOL: -Chases(bear, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear needs the cat.\nFOL: Needs(bear, cat)\nTEXT: The cat needs the bear.\nFOL: Needs(cat, bear)\nTEXT: The lion chases the bear.\nFOL: Chases(lion, bear)\nTEXT: The lion needs the bear.\nFOL: Needs(lion, bear)\nTEXT: The lion needs the cat.\nFOL: Needs(lion, cat)\nTEXT: The lion sees the bear.\nFOL: Sees(lion, bear)\nTEXT: The lion sees the cat.\nFOL: Sees(lion, cat)\nTEXT: If something is round and it needs the lion then the lion sees the bear.\nFOL: (Round(x) & Needs(x, lion) -> Sees(lion, bear))\nTEXT: If the lion needs the bear and the lion sees the bear then the bear is blue.\nFOL: (Needs(lion, bear) & Sees(lion, bear) -> Blue(bear))\nTEXT: If the bear is green and the bear is rough then the bear is blue.\nFOL: (Green(bear) & Rough(bear) -> Blue(bear))\nTEXT: If something sees the lion and the lion sees the cat then the lion chases the bear.\nFOL: (Sees(x, lion) & Sees(lion, cat) -> Chases(lion, bear))\nTEXT: If something chases the lion then the lion does not chase the bear.\nFOL: Chases(x, lion) -> -Chases(lion, bear)\nTEXT: If something sees the bear and it is cold then it is not round.\nFOL: (Sees(x, bear) & Cold(x) -> -Round(x))\nTEXT: If something needs the cat then it is round.\nFOL: Needs(x, cat) -> Round(x)\nTEXT: If something chases the bear and the bear sees the lion then the bear chases the lion.\nFOL: (Chases(x, bear) & Sees(bear, lion) -> Chases(bear, lion))\nTEXT: The bear does not chase the lion.\nFOL: -Chases(bear, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear needs the cat.\nFOL: Needs(bear, cat)\nTEXT: The cat needs the bear.\nFOL: Needs(cat, bear)\nTEXT: The lion chases the bear.\nFOL: Chases(lion, bear)\nTEXT: The lion needs the bear.\nFOL: Needs(lion, bear)\nTEXT: The lion needs the cat.\nFOL: Needs(lion, cat)\nTEXT: The lion sees the bear.\nFOL: Sees(lion, bear)\nTEXT: The lion sees the cat.\nFOL: Sees(lion, cat)\nTEXT: If something is round and it needs the lion then the lion sees the bear.\nFOL: all x. (Round(x) & Needs(x, lion) -> Sees(lion, bear))\nTEXT: If the lion needs the bear and the lion sees the bear then the bear is blue.\nFOL: (Needs(lion, bear) & Sees(lion, bear)) -> Blue(bear)\nTEXT: If the bear is green and the bear is rough then the bear is blue.\nFOL: (Green(bear) & Rough(bear)) -> Blue(bear)\nTEXT: If something sees the lion and the lion sees the cat then the lion chases the bear.\nFOL: (Sees(x, lion) & Sees(lion, cat)) -> Chases(lion, bear)\nTEXT: If something chases the lion then the lion does not chase the bear.\nFOL: Chases(x, lion) -> -Chases(lion, bear)\nTEXT: If something sees the bear and it is cold then it is not round.\nFOL: (Sees(x, bear) & Cold(x)) -> -Round(x)\nTEXT: If something needs the cat then it is round.\nFOL: Needs(x, cat) -> Round(x)\nTEXT: If something chases the bear and the bear sees the lion then the bear chases the lion.\nFOL: (Chases(x, bear) & Sees(bear, lion)) -> Chases(bear, lion)\nTEXT: The bear does not chase the lion.\nFOL: -Chases(bear, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear needs the cat.\nFOL: Needs(bear, cat)\nTEXT: The cat needs the bear.\nFOL: Needs(cat, bear)\nTEXT: The lion chases the bear.\nFOL: Chases(lion, bear)\nTEXT: The lion needs the bear.\nFOL: Needs(lion, bear)\nTEXT: The lion needs the cat.\nFOL: Needs(lion, cat)\nTEXT: The lion sees the bear.\nFOL: Sees(lion, bear)\nTEXT: The lion sees the cat.\nFOL: Sees(lion, cat)\nTEXT: If something is round and it needs the lion then the lion sees the bear.\nFOL: all x. (Round(x) & Needs(x, lion) -> Sees(lion, bear))\nTEXT: If the lion needs the bear and the lion sees the bear then the bear is blue.\nFOL: (Needs(lion, bear) & Sees(lion, bear) -> Blue(bear))\nTEXT: If the bear is green and the bear is rough then the bear is blue.\nFOL: (Green(bear) & Rough(bear) -> Blue(bear))\nTEXT: If something sees the lion and the lion sees the cat then the lion chases the bear.\nFOL: (Sees(x, lion) & Sees(lion, cat) -> Chases(lion, bear))\nTEXT: If something chases the lion then the lion does not chase the bear.\nFOL: all x. (Chases(x, lion) -> -Chases(lion, bear))\nTEXT: If something sees the bear and it is cold then it is not round.\nFOL: all x. (Sees(x, bear) & Cold(x) -> -Round(x))\nTEXT: If something needs the cat then it is round.\nFOL: all x. (Needs(x, cat) -> Round(x))\nTEXT: If something chases the bear and the bear sees the lion then the bear chases the lion.\nFOL: (Chases(x, bear) & Sees(bear, lion) -> Chases(bear, lion))\nTEXT: The bear does not chase the lion.\nFOL: -Chases(bear, lion)\n</EVALUATE>"
  ]
 },
 {
  "index": 150,
  "responses": [
   "<EVALUATE>\nTEXT: The bear does not chase the mouse.\nFOL: -Chase(bear, mouse)\nTEXT: The bear eats the lion.\nFOL: Eat(bear, lion)\nTEXT: The bear is green.\nFOL: Green(bear)\nTEXT: The bear is round.\nFOL: Round(bear)\nTEXT: The bear is young.\nFOL: Young(bear)\nTEXT: The bear does not need the mouse.\nFOL: -Need(bear, mouse)\nTEXT: The lion does not chase the mouse.\nFOL: -Chase(lion, mouse)\nTEXT: The lion eats the tiger.\nFOL: Eat(lion, tiger)\nTEXT: The mouse chases the bear.\nFOL: Chase(mouse, bear)\nTEXT: The mouse does not eat the lion.\nFOL: -Eat(mouse, lion)\nTEXT: The mouse is young.\nFOL: Young(mouse)\nTEXT: The mouse does not need the bear.\nFOL: -Need(mouse, bear)\nTEXT: The mouse needs the lion.\nFOL: Need(mouse, lion)\nTEXT: The tiger chases the mouse.\nFOL: Chase(tiger, mouse)\nTEXT: The tiger eats the bear.\nFOL: Eat(tiger, bear)\nTEXT: The tiger is round.\nFOL: Round(tiger)\nTEXT: If the tiger eats the mouse and the mouse is young then the mouse is red.\nFOL: (Eat(tiger, mouse) & Young(mouse)) -> Red(mouse)\nTEXT: If someone is young then they need the tiger.\nFOL: Young(x) -> Need(x, tiger)\nTEXT: If someone needs the tiger and they are not young then they are red.\nFOL: (Need(x, tiger) & -Young(x)) -> Red(x)\nTEXT: If someone is red then they chase the mouse.\nFOL: Red(x) -> Chase(x, mouse)\nTEXT: If the tiger is young and the tiger is red then the tiger needs the mouse.\nFOL: (Young(tiger) & Red(tiger)) -> Need(tiger, mouse)\nTEXT: If someone is round then they eat the mouse.\nFOL: Round(x) -> Eat(x, mouse)\nTEXT: If the tiger needs the bear and the tiger does not chase the lion then the bear eats the lion.\nFOL: (Need(tiger, bear) & -Chase(tiger, lion)) -> Eat(bear, lion)\nTEXT: If the bear is not red and the bear does not need the mouse then the bear chases the mouse.\nFOL: (-Red(bear) & -Need(bear, mouse)) -> Chase(bear, mouse)\nTEXT: The bear eats the mouse.\nFOL: Eat(bear, mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear does not chase the mouse.\nFOL: -Chase(bear, mouse)\nTEXT: The bear eats the lion.\nFOL: Eat(bear, lion)\nTEXT: The bear is green.\nFOL: Color(bear, green)\nTEXT: The bear is round.\nFOL: Shape(bear, round)\nTEXT: The bear is young.\nFOL: Age(bear, young)\nTEXT: The bear does not need the mouse.\nFOL: -Need(bear, mouse)\nTEXT: The lion does not chase the mouse.\nFOL: -Chase(lion, mouse)\nTEXT: The lion eats the tiger.\nFOL: Eat(lion, tiger)\nTEXT: The mouse chases the bear.\nFOL: Chase(mouse, bear)\nTEXT: The mouse does not eat the lion.\nFOL: -Eat(mouse, lion)\nTEXT: The mouse is young.\nFOL: Age(mouse, young)\nTEXT: The mouse does not need the bear.\nFOL: -Need(mouse, bear)\nTEXT: The mouse needs the lion.\nFOL: Need(mouse, lion)\nTEXT: The tiger chases the mouse.\nFOL: Chase(tiger, mouse)\nTEXT: The tiger eats the bear.\nFOL: Eat(tiger, bear)\nTEXT: The tiger is round.\nFOL: Shape(tiger, round)\nTEXT: If the tiger eats the mouse and the mouse is young then the mouse is red.\nFOL: (Eat(tiger, mouse) & Age(mouse, young)) -> Color(mouse, red)\nTEXT: If someone is young then they need the tiger.\nFOL: Age(x, young) -> Need(x, tiger)\nTEXT: If someone needs the tiger and they are not young then they are red.\nFOL: (Need(x, tiger) & -Age(x, young)) -> Color(x, red)\nTEXT: If someone is red then they chase the mouse.\nFOL: Color(x, red) -> Chase(x, mouse)\nTEXT: If the tiger is young and the tiger is red then the tiger needs the mouse.\nFOL: (Age(tiger, young) & Color(tiger, red)) -> Need(tiger, mouse)\nTEXT: If someone is round then they eat the mouse.\nFOL: Shape(x, round) -> Eat(x, mouse)\nTEXT: If the tiger needs the bear and the tiger does not chase the lion then the bear eats the lion.\nFOL: (Need(tiger, bear) & -Chase(tiger, lion)) -> Eat(bear, lion)\nTEXT: If the bear is not red and the bear does not need the mouse then the bear chases the mouse.\nFOL: (-Color(bear, red) & -Need(bear, mouse)) -> Chase(bear, mouse)\nTEXT: The bear eats the mouse.\nFOL: Eat(bear, mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear does not chase the mouse.\nFOL: -Chase(bear, mouse)\nTEXT: The bear eats the lion.\nFOL: Eat(bear, lion)\nTEXT: The bear is green.\nFOL: Green(bear)\nTEXT: The bear is round.\nFOL: Round(bear)\nTEXT: The bear is young.\nFOL: Young(bear)\nTEXT: The bear does not need the mouse.\nFOL: -Need(bear, mouse)\nTEXT: The lion does not chase the mouse.\nFOL: -Chase(lion, mouse)\nTEXT: The lion eats the tiger.\nFOL: Eat(lion, tiger)\nTEXT: The mouse chases the bear.\nFOL: Chase(mouse, bear)\nTEXT: The mouse does not eat the lion.\nFOL: -Eat(mouse, lion)\nTEXT: The mouse is young.\nFOL: Young(mouse)\nTEXT: The mouse does not need the bear.\nFOL: -Need(mouse, bear)\nTEXT: The mouse needs the lion.\nFOL: Need(mouse, lion)\nTEXT: The tiger chases the mouse.\nFOL: Chase(tiger, mouse)\nTEXT: The tiger eats the bear.\nFOL: Eat(tiger, bear)\nTEXT: The tiger is round.\nFOL: Round(tiger)\nTEXT: If the tiger eats the mouse and the mouse is young then the mouse is red.\nFOL: (Eat(tiger, mouse) & Young(mouse)) -> Red(mouse)\nTEXT: If someone is young then they need the tiger.\nFOL: all x. (Young(x) -> Need(x, tiger))\nTEXT: If someone needs the tiger and they are not young then they are red.\nFOL: all x. ((Need(x, tiger) & -Young(x)) -> Red(x))\nTEXT: If someone is red then they chase the mouse.\nFOL: all x. (Red(x) -> Chase(x, mouse))\nTEXT: If the tiger is young and the tiger is red then the tiger needs the mouse.\nFOL: (Young(tiger) & Red(tiger)) -> Need(tiger, mouse)\nTEXT: If someone is round then they eat the mouse.\nFOL: all x. (Round(x) -> Eat(x, mouse))\nTEXT: If the tiger needs the bear and the tiger does not chase the lion then the bear eats the lion.\nFOL: (Need(tiger, bear) & -Chase(tiger, lion)) -> Eat(bear, lion)\nTEXT: If the bear is not red and the bear does not need the mouse then the bear chases the mouse.\nFOL: ((-Red(bear) & -Need(bear, mouse)) -> Chase(bear, mouse))\nTEXT: The bear eats the mouse.\nFOL: Eat(bear, mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear does not chase the mouse.\nFOL: -Chase(bear, mouse)\nTEXT: The bear eats the lion.\nFOL: Eat(bear, lion)\nTEXT: The bear is green.\nFOL: Green(bear)\nTEXT: The bear is round.\nFOL: Round(bear)\nTEXT: The bear is young.\nFOL: Young(bear)\nTEXT: The bear does not need the mouse.\nFOL: -Need(bear, mouse)\nTEXT: The lion does not chase the mouse.\nFOL: -Chase(lion, mouse)\nTEXT: The lion eats the tiger.\nFOL: Eat(lion, tiger)\nTEXT: The mouse chases the bear.\nFOL: Chase(mouse, bear)\nTEXT: The mouse does not eat the lion.\nFOL: -Eat(mouse, lion)\nTEXT: The mouse is young.\nFOL: Young(mouse)\nTEXT: The mouse does not need the bear.\nFOL: -Need(mouse, bear)\nTEXT: The mouse needs the lion.\nFOL: Need(mouse, lion)\nTEXT: The tiger chases the mouse.\nFOL: Chase(tiger, mouse)\nTEXT: The tiger eats the bear.\nFOL: Eat(tiger, bear)\nTEXT: The tiger is round.\nFOL: Round(tiger)\nTEXT: If the tiger eats the mouse and the mouse is young then the mouse is red.\nFOL: (Eat(tiger, mouse) & Young(mouse)) -> Red(mouse)\nTEXT: If someone is young then they need the tiger.\nFOL: all x. (Young(x) -> Need(x, tiger))\nTEXT: If someone needs the tiger and they are not young then they are red.\nFOL: all x. ((Need(x, tiger) & -Young(x)) -> Red(x))\nTEXT: If someone is red then they chase the mouse.\nFOL: all x. (Red(x) -> Chase(x, mouse))\nTEXT: If the tiger is young and the tiger is red then the tiger needs the mouse.\nFOL: (Young(tiger) & Red(tiger)) -> Need(tiger, mouse)\nTEXT: If someone is round then they eat the mouse.\nFOL: all x. (Round(x) -> Eat(x, mouse))\nTEXT: If the tiger needs the bear and the tiger does not chase the lion then the bear eats the lion.\nFOL: (Need(tiger, bear) & -Chase(tiger, lion)) -> Eat(bear, lion)\nTEXT: If the bear is not red and the bear does not need the mouse then the bear chases the mouse.\nFOL: (-Red(bear) & -Need(bear, mouse)) -> Chase(bear, mouse)\nTEXT: The bear eats the mouse.\nFOL: Eat(bear, mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear does not chase the mouse.\nFOL: -Chase(bear, mouse)\nTEXT: The bear eats the lion.\nFOL: Eat(bear, lion)\nTEXT: The bear is green.\nFOL: Color(bear, green)\nTEXT: The bear is round.\nFOL: Shape(bear, round)\nTEXT: The bear is young.\nFOL: Age(bear, young)\nTEXT: The bear does not need the mouse.\nFOL: -Need(bear, mouse)\nTEXT: The lion does not chase the mouse.\nFOL: -Chase(lion, mouse)\nTEXT: The lion eats the tiger.\nFOL: Eat(lion, tiger)\nTEXT: The mouse chases the bear.\nFOL: Chase(mouse, bear)\nTEXT: The mouse does not eat the lion.\nFOL: -Eat(mouse, lion)\nTEXT: The mouse is young.\nFOL: Age(mouse, young)\nTEXT: The mouse does not need the bear.\nFOL: -Need(mouse, bear)\nTEXT: The mouse needs the lion.\nFOL: Need(mouse, lion)\nTEXT: The tiger chases the mouse.\nFOL: Chase(tiger, mouse)\nTEXT: The tiger eats the bear.\nFOL: Eat(tiger, bear)\nTEXT: The tiger is round.\nFOL: Shape(tiger, round)\nTEXT: If the tiger eats the mouse and the mouse is young then the mouse is red.\nFOL: (Eat(tiger, mouse) & Age(mouse, young)) -> Color(mouse, red)\nTEXT: If someone is young then they need the tiger.\nFOL: all x. (Age(x, young) -> Need(x, tiger))\nTEXT: If someone needs the tiger and they are not young then they are red.\nFOL: all x. ((Need(x, tiger) & -Age(x, young)) -> Color(x, red))\nTEXT: If someone is red then they chase the mouse.\nFOL: all x. (Color(x, red) -> Chase(x, mouse))\nTEXT: If the tiger is young and the tiger is red then the tiger needs the mouse.\nFOL: (Age(tiger, young) & Color(tiger, red)) -> Need(tiger, mouse)\nTEXT: If someone is round then they eat the mouse.\nFOL: all x. (Shape(x, round) -> Eat(x, mouse))\nTEXT: If the tiger needs the bear and the tiger does not chase the lion then the bear eats the lion.\nFOL: (Need(tiger, bear) & -Chase(tiger, lion)) -> Eat(bear, lion)\nTEXT: If the bear is not red and the bear does not need the mouse then the bear chases the mouse.\nFOL: ((-Color(bear, red) & -Need(bear, mouse)) -> Chase(bear, mouse))\nTEXT: The bear eats the mouse.\nFOL: Eat(bear, mouse)\n</EVALUATE>"
  ]
 },
 {
  "index": 151,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: Chases(baldEagle, rabbit)\nTEXT: The bald eagle needs the cat.\nFOL: Needs(baldEagle, cat)\nTEXT: The bald eagle needs the rabbit.\nFOL: Needs(baldEagle, rabbit)\nTEXT: The bald eagle visits the cat.\nFOL: Visits(baldEagle, cat)\nTEXT: The cat is big.\nFOL: Big(cat)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat needs the bald eagle.\nFOL: Needs(cat, baldEagle)\nTEXT: The rabbit is big.\nFOL: Big(rabbit)\nTEXT: The rabbit is cold.\nFOL: Cold(rabbit)\nTEXT: The rabbit needs the cat.\nFOL: Needs(rabbit, cat)\nTEXT: The rabbit visits the bald eagle.\nFOL: Visits(rabbit, baldEagle)\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x. (Visits(x, cat) -> Needs(x, cat))\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (Visits(x, rabbit) -> Visits(rabbit, baldEagle))\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x. ((Visits(x, cat) & Visits(cat, baldEagle)) -> Visits(baldEagle, rabbit))\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x. (Needs(x, cat) -> Needs(x, rabbit))\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x. (Needs(x, baldEagle) -> Visits(x, cat))\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: (Kind(rabbit) & Needs(rabbit, cat)) -> Needs(rabbit, baldEagle)\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x. ((Kind(x) & Needs(x, rabbit)) -> Visits(rabbit, baldEagle))\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x. (Needs(x, rabbit) -> Visits(x, rabbit))\nTEXT: The bald eagle is not big.\nFOL: -Big(baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: Chases(baldEagle, rabbit)\nTEXT: The bald eagle needs the cat.\nFOL: Needs(baldEagle, cat)\nTEXT: The bald eagle needs the rabbit.\nFOL: Needs(baldEagle, rabbit)\nTEXT: The bald eagle visits the cat.\nFOL: Visits(baldEagle, cat)\nTEXT: The cat is big.\nFOL: Big(cat)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat needs the bald eagle.\nFOL: Needs(cat, baldEagle)\nTEXT: The rabbit is big.\nFOL: Big(rabbit)\nTEXT: The rabbit is cold.\nFOL: Cold(rabbit)\nTEXT: The rabbit needs the cat.\nFOL: Needs(rabbit, cat)\nTEXT: The rabbit visits the bald eagle.\nFOL: Visits(rabbit, baldEagle)\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x. (Visits(x, cat) -> Needs(x, cat))\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (Visits(x, rabbit) -> Visits(rabbit, baldEagle))\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x. ((Visits(x, cat) & Visits(cat, baldEagle)) -> Visits(baldEagle, rabbit))\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x. (Needs(x, cat) -> Needs(x, rabbit))\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x. (Needs(x, baldEagle) -> Visits(x, cat))\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: (Kind(rabbit) & Needs(rabbit, cat)) -> Needs(rabbit, baldEagle)\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: (Kind(x) & Needs(x, rabbit)) -> Visits(rabbit, baldEagle)\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x. (Needs(x, rabbit) -> Visits(x, rabbit))\nTEXT: The bald eagle is not big.\nFOL: -Big(baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: Chases(baldEagle, rabbit)\n\nTEXT: The bald eagle needs the cat.\nFOL: Needs(baldEagle, cat)\n\nTEXT: The bald eagle needs the rabbit.\nFOL: Needs(baldEagle, rabbit)\n\nTEXT: The bald eagle visits the cat.\nFOL: Visits(baldEagle, cat)\n\nTEXT: The cat is big.\nFOL: Big(cat)\n\nTEXT: The cat is kind.\nFOL: Kind(cat)\n\nTEXT: The cat needs the bald eagle.\nFOL: Needs(cat, baldEagle)\n\nTEXT: The rabbit is big.\nFOL: Big(rabbit)\n\nTEXT: The rabbit is cold.\nFOL: Cold(rabbit)\n\nTEXT: The rabbit needs the cat.\nFOL: Needs(rabbit, cat)\n\nTEXT: The rabbit visits the bald eagle.\nFOL: Visits(rabbit, baldEagle)\n\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\n\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x. (Visits(x, cat) -> Needs(x, cat))\n\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (Visits(x, rabbit) -> Visits(rabbit, baldEagle))\n\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x. ((Visits(x, cat) & Visits(cat, baldEagle)) -> Visits(baldEagle, rabbit))\n\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x. (Needs(x, cat) -> Needs(x, rabbit))\n\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x. (Needs(x, baldEagle) -> Visits(x, cat))\n\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: (Kind(rabbit) & Needs(rabbit, cat)) -> Needs(rabbit, baldEagle)\n\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x. ((Kind(x) & Needs(x, rabbit)) -> Visits(rabbit, baldEagle))\n\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x. (Needs(x, rabbit) -> Visits(x, rabbit))\n\nTEXT: The bald eagle is not big.\nFOL: -Big(baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: Chases(baldEagle, rabbit)\nTEXT: The bald eagle needs the cat.\nFOL: Needs(baldEagle, cat)\nTEXT: The bald eagle needs the rabbit.\nFOL: Needs(baldEagle, rabbit)\nTEXT: The bald eagle visits the cat.\nFOL: Visits(baldEagle, cat)\nTEXT: The cat is big.\nFOL: Big(cat)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat needs the bald eagle.\nFOL: Needs(cat, baldEagle)\nTEXT: The rabbit is big.\nFOL: Big(rabbit)\nTEXT: The rabbit is cold.\nFOL: Cold(rabbit)\nTEXT: The rabbit needs the cat.\nFOL: Needs(rabbit, cat)\nTEXT: The rabbit visits the bald eagle.\nFOL: Visits(rabbit, baldEagle)\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x. (Visits(x, cat) -> Needs(x, cat))\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (Visits(x, rabbit) -> Visits(rabbit, baldEagle))\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x. (Visits(x, cat) & Visits(cat, baldEagle) -> Visits(baldEagle, rabbit))\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x. (Needs(x, cat) -> Needs(x, rabbit))\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x. (Needs(x, baldEagle) -> Visits(x, cat))\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: (Kind(rabbit) & Needs(rabbit, cat)) -> Needs(rabbit, baldEagle)\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (Kind(x) & Needs(x, rabbit) -> Visits(rabbit, baldEagle))\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x. (Needs(x, rabbit) -> Visits(x, rabbit))\nTEXT: The bald eagle is not big.\nFOL: -Big(baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: Chases(baldEagle, rabbit)\nTEXT: The bald eagle needs the cat.\nFOL: Needs(baldEagle, cat)\nTEXT: The bald eagle needs the rabbit.\nFOL: Needs(baldEagle, rabbit)\nTEXT: The bald eagle visits the cat.\nFOL: Visits(baldEagle, cat)\nTEXT: The cat is big.\nFOL: Big(cat)\nTEXT: The cat is kind.\nFOL: Kind(cat)\nTEXT: The cat needs the bald eagle.\nFOL: Needs(cat, baldEagle)\nTEXT: The rabbit is big.\nFOL: Big(rabbit)\nTEXT: The rabbit is cold.\nFOL: Cold(rabbit)\nTEXT: The rabbit needs the cat.\nFOL: Needs(rabbit, cat)\nTEXT: The rabbit visits the bald eagle.\nFOL: Visits(rabbit, baldEagle)\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x. (Visits(x, cat) -> Needs(x, cat))\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (Visits(x, rabbit) -> Visits(rabbit, baldEagle))\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x. ((Visits(x, cat) & Visits(cat, baldEagle)) -> Visits(baldEagle, rabbit))\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x. (Needs(x, cat) -> Needs(x, rabbit))\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x. (Needs(x, baldEagle) -> Visits(x, cat))\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: (Kind(rabbit) & Needs(rabbit, cat)) -> Needs(rabbit, baldEagle)\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (Kind(x) & Needs(x, rabbit) -> Visits(rabbit, baldEagle))\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x. (Needs(x, rabbit) -> Visits(x, rabbit))\nTEXT: The bald eagle is not big.\nFOL: -Big(baldEagle)\n</EVALUATE>"
  ]
 },
 {
  "index": 152,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is red.\nFOL: Red(anne)\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is kind.\nFOL: Kind(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: If Anne is kind then Anne is red.\nFOL: Kind(anne) -> Red(anne)\nTEXT: Red, smart people are white.\nFOL: all x. (Red(x) & Smart(x) -> White(x))\nTEXT: If Bob is white then Bob is kind.\nFOL: White(bob) -> Kind(bob)\nTEXT: If someone is big and red then they are kind.\nFOL: all x. (Big(x) & Red(x) -> Kind(x))\nTEXT: All white, round people are smart.\nFOL: all x. (White(x) & Round(x) -> Smart(x))\nTEXT: All kind people are round.\nFOL: all x. (Kind(x) -> Round(x))\nTEXT: All round, blue people are white.\nFOL: all x. (Round(x) & Blue(x) -> White(x))\nTEXT: Big people are blue.\nFOL: all x. (Big(x) -> Blue(x))\nTEXT: Anne is white.\nFOL: White(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is red.\nFOL: Red(anne)\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is kind.\nFOL: Kind(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: If Anne is kind then Anne is red.\nFOL: Kind(anne) -> Red(anne)\nTEXT: Red, smart people are white.\nFOL: (Red(x) & Smart(x)) -> White(x)\nTEXT: If Bob is white then Bob is kind.\nFOL: White(bob) -> Kind(bob)\nTEXT: If someone is big and red then they are kind.\nFOL: (Big(x) & Red(x)) -> Kind(x)\nTEXT: All white, round people are smart.\nFOL: all x. (White(x) & Round(x) -> Smart(x))\nTEXT: All kind people are round.\nFOL: all x. (Kind(x) -> Round(x))\nTEXT: All round, blue people are white.\nFOL: all x. (Round(x) & Blue(x) -> White(x))\nTEXT: Big people are blue.\nFOL: all x. (Big(x) -> Blue(x))\nTEXT: Anne is white.\nFOL: White(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is red.\nFOL: Red(anne)\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is kind.\nFOL: Kind(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: If Anne is kind then Anne is red.\nFOL: Kind(anne) -> Red(anne)\nTEXT: Red, smart people are white.\nFOL: all x. ((Red(x) & Smart(x)) -> White(x))\nTEXT: If Bob is white then Bob is kind.\nFOL: White(bob) -> Kind(bob)\nTEXT: If someone is big and red then they are kind.\nFOL: all x. (Big(x) & Red(x) -> Kind(x))\nTEXT: All white, round people are smart.\nFOL: all x. (White(x) & Round(x) -> Smart(x))\nTEXT: All kind people are round.\nFOL: all x. (Kind(x) -> Round(x))\nTEXT: All round, blue people are white.\nFOL: all x. (Round(x) & Blue(x) -> White(x))\nTEXT: Big people are blue.\nFOL: all x. (Big(x) -> Blue(x))\nTEXT: Anne is white.\nFOL: White(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is red.\nFOL: Red(anne)\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is kind.\nFOL: Kind(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: If Anne is kind then Anne is red.\nFOL: (Kind(anne) -> Red(anne))\nTEXT: Red, smart people are white.\nFOL: all x. (Red(x) & Smart(x) -> White(x))\nTEXT: If Bob is white then Bob is kind.\nFOL: (White(bob) -> Kind(bob))\nTEXT: If someone is big and red then they are kind.\nFOL: all x. (Big(x) & Red(x) -> Kind(x))\nTEXT: All white, round people are smart.\nFOL: all x. (White(x) & Round(x) -> Smart(x))\nTEXT: All kind people are round.\nFOL: all x. (Kind(x) -> Round(x))\nTEXT: All round, blue people are white.\nFOL: all x. (Round(x) & Blue(x) -> White(x))\nTEXT: Big people are blue.\nFOL: all x. (Big(x) -> Blue(x))\nTEXT: Anne is white.\nFOL: White(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is red.\nFOL: Red(anne)\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is kind.\nFOL: Kind(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: If Anne is kind then Anne is red.\nFOL: (Kind(anne) -> Red(anne))\nTEXT: Red, smart people are white.\nFOL: all x. ((Red(x) & Smart(x)) -> White(x))\nTEXT: If Bob is white then Bob is kind.\nFOL: (White(bob) -> Kind(bob))\nTEXT: If someone is big and red then they are kind.\nFOL: all x. ((Big(x) & Red(x)) -> Kind(x))\nTEXT: All white, round people are smart.\nFOL: all x. ((White(x) & Round(x)) -> Smart(x))\nTEXT: All kind people are round.\nFOL: all x. (Kind(x) -> Round(x))\nTEXT: All round, blue people are white.\nFOL: all x. ((Round(x) & Blue(x)) -> White(x))\nTEXT: Big people are blue.\nFOL: all x. (Big(x) -> Blue(x))\nTEXT: Anne is white.\nFOL: White(anne)\n</EVALUATE>"
  ]
 },
 {
  "index": 153,
  "responses": [
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: Big(dog)\nTEXT: The dog is not green.\nFOL: -Green(dog)\nTEXT: The dog is not red.\nFOL: -Red(dog)\nTEXT: The dog is round.\nFOL: Round(dog)\nTEXT: The dog needs the lion.\nFOL: Needs(dog, lion)\nTEXT: The dog sees the lion.\nFOL: Sees(dog, lion)\nTEXT: The dog visits the lion.\nFOL: Visits(dog, lion)\nTEXT: The lion is not big.\nFOL: -Big(lion)\nTEXT: The lion is green.\nFOL: Green(lion)\nTEXT: The lion is kind.\nFOL: Kind(lion)\nTEXT: The lion is red.\nFOL: Red(lion)\nTEXT: The lion is round.\nFOL: Round(lion)\nTEXT: The lion needs the dog.\nFOL: Needs(lion, dog)\nTEXT: The lion sees the dog.\nFOL: Sees(lion, dog)\nTEXT: The lion visits the dog.\nFOL: Visits(lion, dog)\nTEXT: If the lion visits the dog and the dog visits the lion then the lion sees the dog.\nFOL: (Visits(lion, dog) & Visits(dog, lion)) -> Sees(lion, dog)\nTEXT: If something visits the lion then it does not see the dog.\nFOL: all x. (Visits(x, lion) -> -Sees(x, dog))\nTEXT: If something needs the lion and it does not visit the lion then the lion needs the dog.\nFOL: all x. ((Needs(x, lion) & -Visits(x, lion)) -> Needs(lion, x))\nTEXT: The dog is kind.\nFOL: Kind(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: Big(dog)\nTEXT: The dog is not green.\nFOL: -Green(dog)\nTEXT: The dog is not red.\nFOL: -Red(dog)\nTEXT: The dog is round.\nFOL: Round(dog)\nTEXT: The dog needs the lion.\nFOL: Needs(dog, lion)\nTEXT: The dog sees the lion.\nFOL: Sees(dog, lion)\nTEXT: The dog visits the lion.\nFOL: Visits(dog, lion)\nTEXT: The lion is not big.\nFOL: -Big(lion)\nTEXT: The lion is green.\nFOL: Green(lion)\nTEXT: The lion is kind.\nFOL: Kind(lion)\nTEXT: The lion is red.\nFOL: Red(lion)\nTEXT: The lion is round.\nFOL: Round(lion)\nTEXT: The lion needs the dog.\nFOL: Needs(lion, dog)\nTEXT: The lion sees the dog.\nFOL: Sees(lion, dog)\nTEXT: The lion visits the dog.\nFOL: Visits(lion, dog)\nTEXT: If the lion visits the dog and the dog visits the lion then the lion sees the dog.\nFOL: (Visits(lion, dog) & Visits(dog, lion)) -> Sees(lion, dog)\nTEXT: If something visits the lion then it does not see the dog.\nFOL: Visits(x, lion) -> -Sees(x, dog)\nTEXT: If something needs the lion and it does not visit the lion then the lion needs the dog.\nFOL: (Needs(x, lion) & -Visits(x, lion)) -> Needs(lion, x)\nTEXT: The dog is kind.\nFOL: Kind(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: Big(dog)\nTEXT: The dog is not green.\nFOL: -Green(dog)\nTEXT: The dog is not red.\nFOL: -Red(dog)\nTEXT: The dog is round.\nFOL: Round(dog)\nTEXT: The dog needs the lion.\nFOL: Needs(dog, lion)\nTEXT: The dog sees the lion.\nFOL: Sees(dog, lion)\nTEXT: The dog visits the lion.\nFOL: Visits(dog, lion)\nTEXT: The lion is not big.\nFOL: -Big(lion)\nTEXT: The lion is green.\nFOL: Green(lion)\nTEXT: The lion is kind.\nFOL: Kind(lion)\nTEXT: The lion is red.\nFOL: Red(lion)\nTEXT: The lion is round.\nFOL: Round(lion)\nTEXT: The lion needs the dog.\nFOL: Needs(lion, dog)\nTEXT: The lion sees the dog.\nFOL: Sees(lion, dog)\nTEXT: The lion visits the dog.\nFOL: Visits(lion, dog)\nTEXT: If the lion visits the dog and the dog visits the lion then the lion sees the dog.\nFOL: (Visits(lion, dog) & Visits(dog, lion)) -> Sees(lion, dog)\nTEXT: If something visits the lion then it does not see the dog.\nFOL: Visits(x, lion) -> -Sees(x, dog)\nTEXT: If something needs the lion and it does not visit the lion then the lion needs the dog.\nFOL: (Needs(x, lion) & -Visits(x, lion)) -> Needs(lion, dog)\nTEXT: The dog is kind.\nFOL: Kind(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: Big(dog)\nTEXT: The dog is not green.\nFOL: -Green(dog)\nTEXT: The dog is not red.\nFOL: -Red(dog)\nTEXT: The dog is round.\nFOL: Round(dog)\nTEXT: The dog needs the lion.\nFOL: Needs(dog, lion)\nTEXT: The dog sees the lion.\nFOL: Sees(dog, lion)\nTEXT: The dog visits the lion.\nFOL: Visits(dog, lion)\nTEXT: The lion is not big.\nFOL: -Big(lion)\nTEXT: The lion is green.\nFOL: Green(lion)\nTEXT: The lion is kind.\nFOL: Kind(lion)\nTEXT: The lion is red.\nFOL: Red(lion)\nTEXT: The lion is round.\nFOL: Round(lion)\nTEXT: The lion needs the dog.\nFOL: Needs(lion, dog)\nTEXT: The lion sees the dog.\nFOL: Sees(lion, dog)\nTEXT: The lion visits the dog.\nFOL: Visits(lion, dog)\nTEXT: If the lion visits the dog and the dog visits the lion then the lion sees the dog.\nFOL: (Visits(lion, dog) & Visits(dog, lion)) -> Sees(lion, dog)\nTEXT: If something visits the lion then it does not see the dog.\nFOL: (Visits(x, lion) -> -Sees(x, dog))\nTEXT: If something needs the lion and it does not visit the lion then the lion needs the dog.\nFOL: (Needs(x, lion) & -Visits(x, lion)) -> Needs(lion, x)\nTEXT: The dog is kind.\nFOL: Kind(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: Big(dog)\nTEXT: The dog is not green.\nFOL: -Green(dog)\nTEXT: The dog is not red.\nFOL: -Red(dog)\nTEXT: The dog is round.\nFOL: Round(dog)\nTEXT: The dog needs the lion.\nFOL: Needs(dog, lion)\nTEXT: The dog sees the lion.\nFOL: Sees(dog, lion)\nTEXT: The dog visits the lion.\nFOL: Visits(dog, lion)\nTEXT: The lion is not big.\nFOL: -Big(lion)\nTEXT: The lion is green.\nFOL: Green(lion)\nTEXT: The lion is kind.\nFOL: Kind(lion)\nTEXT: The lion is red.\nFOL: Red(lion)\nTEXT: The lion is round.\nFOL: Round(lion)\nTEXT: The lion needs the dog.\nFOL: Needs(lion, dog)\nTEXT: The lion sees the dog.\nFOL: Sees(lion, dog)\nTEXT: The lion visits the dog.\nFOL: Visits(lion, dog)\nTEXT: If the lion visits the dog and the dog visits the lion then the lion sees the dog.\nFOL: (Visits(lion, dog) & Visits(dog, lion)) -> Sees(lion, dog)\nTEXT: If something visits the lion then it does not see the dog.\nFOL: all x. (Visits(x, lion) -> -Sees(x, dog))\nTEXT: If something needs the lion and it does not visit the lion then the lion needs the dog.\nFOL: all x. (Needs(x, lion) & -Visits(x, lion) -> Needs(lion, x))\nTEXT: The dog is kind.\nFOL: Kind(dog)\n</EVALUATE>"
  ]
 },
 {
  "index": 154,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is green.\nFOL: Green(baldEagle)\nTEXT: The bald eagle is red.\nFOL: Red(baldEagle)\nTEXT: The tiger is red.\nFOL: Red(tiger)\nTEXT: If something visits the bald eagle and it is blue then the bald eagle likes the tiger.\nFOL: all x. (Visits(x, baldEagle) & Blue(x) -> Likes(baldEagle, tiger))\nTEXT: If something visits the bald eagle and it is red then the bald eagle needs the tiger.\nFOL: all x. (Visits(x, baldEagle) & Red(x) -> Needs(baldEagle, tiger))\nTEXT: If something needs the bald eagle and the bald eagle is red then the bald eagle likes the tiger.\nFOL: all x. (Needs(x, baldEagle) & Red(baldEagle) -> Likes(baldEagle, tiger))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Green(x) -> Needs(x, baldEagle))\nTEXT: If something visits the bald eagle then the bald eagle visits the tiger.\nFOL: all x. (Visits(x, baldEagle) -> Visits(baldEagle, tiger))\nTEXT: If something is blue and it likes the tiger then the tiger likes the bald eagle.\nFOL: all x. (Blue(x) & Likes(x, tiger) -> Likes(tiger, baldEagle))\nTEXT: The bald eagle visits the bald eagle.\nFOL: Visits(baldEagle, baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is green.\nFOL: Green(baldEagle)\nTEXT: The bald eagle is red.\nFOL: Red(baldEagle)\nTEXT: The tiger is red.\nFOL: Red(tiger)\nTEXT: If something visits the bald eagle and it is blue then the bald eagle likes the tiger.\nFOL: all x. (Visit(x, baldEagle) & Blue(x) -> Likes(baldEagle, tiger))\nTEXT: If something visits the bald eagle and it is red then the bald eagle needs the tiger.\nFOL: all x. (Visit(x, baldEagle) & Red(x) -> Needs(baldEagle, tiger))\nTEXT: If something needs the bald eagle and the bald eagle is red then the bald eagle likes the tiger.\nFOL: all x. (Needs(x, baldEagle) & Red(baldEagle) -> Likes(baldEagle, tiger))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Green(x) -> Needs(x, baldEagle))\nTEXT: If something visits the bald eagle then the bald eagle visits the tiger.\nFOL: all x. (Visit(x, baldEagle) -> Visit(baldEagle, tiger))\nTEXT: If something is blue and it likes the tiger then the tiger likes the bald eagle.\nFOL: all x. (Blue(x) & Likes(x, tiger) -> Likes(tiger, baldEagle))\nTEXT: The bald eagle visits the bald eagle.\nFOL: Visit(baldEagle, baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is green.\nFOL: Eagle(baldEagle) & Green(baldEagle)\nTEXT: The bald eagle is red.\nFOL: Eagle(baldEagle) & Red(baldEagle)\nTEXT: The tiger is red.\nFOL: Eagle(tiger) & Red(tiger)\nTEXT: If something visits the bald eagle and it is blue then the bald eagle likes the tiger.\nFOL: all x. (Visits(x, baldEagle) & Blue(x) -> Likes(baldEagle, tiger))\nTEXT: If something visits the bald eagle and it is red then the bald eagle needs the tiger.\nFOL: all x. (Visits(x, baldEagle) & Red(x) -> Needs(baldEagle, tiger))\nTEXT: If something needs the bald eagle and the bald eagle is red then the bald eagle likes the tiger.\nFOL: all x. (Needs(x, baldEagle) & Red(baldEagle) -> Likes(baldEagle, tiger))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Green(x) -> Needs(x, baldEagle))\nTEXT: If something visits the bald eagle then the bald eagle visits the tiger.\nFOL: all x. (Visits(x, baldEagle) -> Visits(baldEagle, tiger))\nTEXT: If something is blue and it likes the tiger then the tiger likes the bald eagle.\nFOL: all x. (Blue(x) & Likes(x, tiger) -> Likes(tiger, baldEagle))\nTEXT: The bald eagle visits the bald eagle.\nFOL: Visits(baldEagle, baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is green.\nFOL: Green(baldEagle)\nTEXT: The bald eagle is red.\nFOL: Red(baldEagle)\nTEXT: The tiger is red.\nFOL: Red(tiger)\nTEXT: If something visits the bald eagle and it is blue then the bald eagle likes the tiger.\nFOL: all x. (Visits(x, baldEagle) & Blue(x) -> Likes(baldEagle, tiger))\nTEXT: If something visits the bald eagle and it is red then the bald eagle needs the tiger.\nFOL: all x. (Visits(x, baldEagle) & Red(x) -> Needs(baldEagle, tiger))\nTEXT: If something needs the bald eagle and the bald eagle is red then the bald eagle likes the tiger.\nFOL: all x. (Needs(x, baldEagle) & Red(baldEagle) -> Likes(baldEagle, tiger))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Green(x) -> Needs(x, baldEagle))\nTEXT: If something visits the bald eagle then the bald eagle visits the tiger.\nFOL: all x. (Visits(x, baldEagle) -> Visits(baldEagle, tiger))\nTEXT: If something is blue and it likes the tiger then the tiger likes the bald eagle.\nFOL: all x. ((Blue(x) & Likes(x, tiger)) -> Likes(tiger, baldEagle))\nTEXT: The bald eagle visits the bald eagle.\nFOL: Visits(baldEagle, baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is green.\nFOL: Green(baldEagle)\nTEXT: The bald eagle is red.\nFOL: Red(baldEagle)\nTEXT: The tiger is red.\nFOL: Red(tiger)\nTEXT: If something visits the bald eagle and it is blue then the bald eagle likes the tiger.\nFOL: all x. (Visits(x, baldEagle) & Blue(x) -> Likes(baldEagle, tiger))\nTEXT: If something visits the bald eagle and it is red then the bald eagle needs the tiger.\nFOL: all x. (Visits(x, baldEagle) & Red(x) -> Needs(baldEagle, tiger))\nTEXT: If something needs the bald eagle and the bald eagle is red then the bald eagle likes the tiger.\nFOL: all x. ((Needs(x, baldEagle) & Red(baldEagle)) -> Likes(baldEagle, tiger))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Green(x) -> Needs(x, baldEagle))\nTEXT: If something visits the bald eagle then the bald eagle visits the tiger.\nFOL: all x. (Visits(x, baldEagle) -> Visits(baldEagle, tiger))\nTEXT: If something is blue and it likes the tiger then the tiger likes the bald eagle.\nFOL: all x. (Blue(x) & Likes(x, tiger) -> Likes(tiger, baldEagle))\nTEXT: The bald eagle visits the bald eagle.\nFOL: Visits(baldEagle, baldEagle)\n</EVALUATE>"
  ]
 },
 {
  "index": 155,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle eats the lion.\nFOL: Eats(baldEagle, lion)\nTEXT: The bald eagle eats the tiger.\nFOL: Eats(baldEagle, tiger)\nTEXT: The bald eagle is green.\nFOL: Green(baldEagle)\nTEXT: The bald eagle needs the mouse.\nFOL: Needs(baldEagle, mouse)\nTEXT: The bald eagle sees the mouse.\nFOL: Sees(baldEagle, mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: Sees(baldEagle, tiger)\nTEXT: The lion eats the bald eagle.\nFOL: Eats(lion, baldEagle)\nTEXT: The lion eats the mouse.\nFOL: Eats(lion, mouse)\nTEXT: The lion is red.\nFOL: Red(lion)\nTEXT: The lion needs the mouse.\nFOL: Needs(lion, mouse)\nTEXT: The mouse is red.\nFOL: Red(mouse)\nTEXT: The mouse is round.\nFOL: Round(mouse)\nTEXT: The mouse needs the lion.\nFOL: Needs(mouse, lion)\nTEXT: The mouse sees the bald eagle.\nFOL: Sees(mouse, baldEagle)\nTEXT: The mouse sees the lion.\nFOL: Sees(mouse, lion)\nTEXT: The tiger needs the lion.\nFOL: Needs(tiger, lion)\nTEXT: If someone needs the mouse and they need the tiger then the mouse is green.\nFOL: (Needs(x, mouse) & Needs(x, tiger)) -> Green(mouse)\nTEXT: If someone is nice and they need the mouse then they eat the mouse.\nFOL: (Nice(x) & Needs(x, mouse)) -> Eats(x, mouse)\nTEXT: If someone is green and they see the tiger then the tiger needs the bald eagle.\nFOL: (Green(x) & Sees(x, tiger)) -> Needs(tiger, baldEagle)\nTEXT: If someone is round and they see the tiger then the tiger is red.\nFOL: (Round(x) & Sees(x, tiger)) -> Red(tiger)\nTEXT: If someone sees the bald eagle then the bald eagle is cold.\nFOL: Sees(x, baldEagle) -> Cold(baldEagle)\nTEXT: If someone is green then they need the tiger.\nFOL: Green(x) -> Needs(x, tiger)\nTEXT: The mouse does not need the tiger.\nFOL: -Needs(mouse, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the lion.\nFOL: Eats(baldEagle, lion)\nTEXT: The bald eagle eats the tiger.\nFOL: Eats(baldEagle, tiger)\nTEXT: The bald eagle is green.\nFOL: Green(baldEagle)\nTEXT: The bald eagle needs the mouse.\nFOL: Needs(baldEagle, mouse)\nTEXT: The bald eagle sees the mouse.\nFOL: Sees(baldEagle, mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: Sees(baldEagle, tiger)\nTEXT: The lion eats the bald eagle.\nFOL: Eats(lion, baldEagle)\nTEXT: The lion eats the mouse.\nFOL: Eats(lion, mouse)\nTEXT: The lion is red.\nFOL: Red(lion)\nTEXT: The lion needs the mouse.\nFOL: Needs(lion, mouse)\nTEXT: The mouse is red.\nFOL: Red(mouse)\nTEXT: The mouse is round.\nFOL: Round(mouse)\nTEXT: The mouse needs the lion.\nFOL: Needs(mouse, lion)\nTEXT: The mouse sees the bald eagle.\nFOL: Sees(mouse, baldEagle)\nTEXT: The mouse sees the lion.\nFOL: Sees(mouse, lion)\nTEXT: The tiger needs the lion.\nFOL: Needs(tiger, lion)\nTEXT: If someone needs the mouse and they need the tiger then the mouse is green.\nFOL: (Needs(x, mouse) & Needs(x, tiger) -> Green(mouse))\nTEXT: If someone is nice and they need the mouse then they eat the mouse.\nFOL: (Nice(x) & Needs(x, mouse) -> Eats(x, mouse))\nTEXT: If someone is green and they see the tiger then the tiger needs the bald eagle.\nFOL: (Green(x) & Sees(x, tiger) -> Needs(tiger, baldEagle))\nTEXT: If someone is round and they see the tiger then the tiger is red.\nFOL: (Round(x) & Sees(x, tiger) -> Red(tiger))\nTEXT: If someone sees the bald eagle then the bald eagle is cold.\nFOL: (Sees(x, baldEagle) -> Cold(baldEagle))\nTEXT: If someone is green then they need the tiger.\nFOL: (Green(x) -> Needs(x, tiger))\nTEXT: The mouse does not need the tiger.\nFOL: -Needs(mouse, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the lion.\nFOL: Eats(baldEagle, lion)\nTEXT: The bald eagle eats the tiger.\nFOL: Eats(baldEagle, tiger)\nTEXT: The bald eagle is green.\nFOL: Green(baldEagle)\nTEXT: The bald eagle needs the mouse.\nFOL: Needs(baldEagle, mouse)\nTEXT: The bald eagle sees the mouse.\nFOL: Sees(baldEagle, mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: Sees(baldEagle, tiger)\nTEXT: The lion eats the bald eagle.\nFOL: Eats(lion, baldEagle)\nTEXT: The lion eats the mouse.\nFOL: Eats(lion, mouse)\nTEXT: The lion is red.\nFOL: Red(lion)\nTEXT: The lion needs the mouse.\nFOL: Needs(lion, mouse)\nTEXT: The mouse is red.\nFOL: Red(mouse)\nTEXT: The mouse is round.\nFOL: Round(mouse)\nTEXT: The mouse needs the lion.\nFOL: Needs(mouse, lion)\nTEXT: The mouse sees the bald eagle.\nFOL: Sees(mouse, baldEagle)\nTEXT: The mouse sees the lion.\nFOL: Sees(mouse, lion)\nTEXT: The tiger needs the lion.\nFOL: Needs(tiger, lion)\nTEXT: If someone needs the mouse and they need the tiger then the mouse is green.\nFOL: all x. (Needs(x, mouse) & Needs(x, tiger) -> Green(mouse))\nTEXT: If someone is nice and they need the mouse then they eat the mouse.\nFOL: all x. (Nice(x) & Needs(x, mouse) -> Eats(x, mouse))\nTEXT: If someone is green and they see the tiger then the tiger needs the bald eagle.\nFOL: all x. (Green(x) & Sees(x, tiger) -> Needs(tiger, baldEagle))\nTEXT: If someone is round and they see the tiger then the tiger is red.\nFOL: all x. (Round(x) & Sees(x, tiger) -> Red(tiger))\nTEXT: If someone sees the bald eagle then the bald eagle is cold.\nFOL: all x. (Sees(x, baldEagle) -> Cold(baldEagle))\nTEXT: If someone is green then they need the tiger.\nFOL: all x. (Green(x) -> Needs(x, tiger))\nTEXT: The mouse does not need the tiger.\nFOL: -Needs(mouse, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the lion.\nFOL: Eats(baldEagle, lion)\nTEXT: The bald eagle eats the tiger.\nFOL: Eats(baldEagle, tiger)\nTEXT: The bald eagle is green.\nFOL: Green(baldEagle)\nTEXT: The bald eagle needs the mouse.\nFOL: Needs(baldEagle, mouse)\nTEXT: The bald eagle sees the mouse.\nFOL: Sees(baldEagle, mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: Sees(baldEagle, tiger)\nTEXT: The lion eats the bald eagle.\nFOL: Eats(lion, baldEagle)\nTEXT: The lion eats the mouse.\nFOL: Eats(lion, mouse)\nTEXT: The lion is red.\nFOL: Red(lion)\nTEXT: The lion needs the mouse.\nFOL: Needs(lion, mouse)\nTEXT: The mouse is red.\nFOL: Red(mouse)\nTEXT: The mouse is round.\nFOL: Round(mouse)\nTEXT: The mouse needs the lion.\nFOL: Needs(mouse, lion)\nTEXT: The mouse sees the bald eagle.\nFOL: Sees(mouse, baldEagle)\nTEXT: The mouse sees the lion.\nFOL: Sees(mouse, lion)\nTEXT: The tiger needs the lion.\nFOL: Needs(tiger, lion)\nTEXT: If someone needs the mouse and they need the tiger then the mouse is green.\nFOL: all x. ((Needs(x, mouse) & Needs(x, tiger)) -> Green(mouse))\nTEXT: If someone is nice and they need the mouse then they eat the mouse.\nFOL: all x. (Nice(x) & Needs(x, mouse) -> Eats(x, mouse))\nTEXT: If someone is green and they see the tiger then the tiger needs the bald eagle.\nFOL: all x. (Green(x) & Sees(x, tiger) -> Needs(tiger, baldEagle))\nTEXT: If someone is round and they see the tiger then the tiger is red.\nFOL: all x. (Round(x) & Sees(x, tiger) -> Red(tiger))\nTEXT: If someone sees the bald eagle then the bald eagle is cold.\nFOL: all x. (Sees(x, baldEagle) -> Cold(baldEagle))\nTEXT: If someone is green then they need the tiger.\nFOL: all x. (Green(x) -> Needs(x, tiger))\nTEXT: The mouse does not need the tiger.\nFOL: -Needs(mouse, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the lion.\nFOL: Eats(baldEagle, lion)\nTEXT: The bald eagle eats the tiger.\nFOL: Eats(baldEagle, tiger)\nTEXT: The bald eagle is green.\nFOL: Green(baldEagle)\nTEXT: The bald eagle needs the mouse.\nFOL: Needs(baldEagle, mouse)\nTEXT: The bald eagle sees the mouse.\nFOL: Sees(baldEagle, mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: Sees(baldEagle, tiger)\nTEXT: The lion eats the bald eagle.\nFOL: Eats(lion, baldEagle)\nTEXT: The lion eats the mouse.\nFOL: Eats(lion, mouse)\nTEXT: The lion is red.\nFOL: Red(lion)\nTEXT: The lion needs the mouse.\nFOL: Needs(lion, mouse)\nTEXT: The mouse is red.\nFOL: Red(mouse)\nTEXT: The mouse is round.\nFOL: Round(mouse)\nTEXT: The mouse needs the lion.\nFOL: Needs(mouse, lion)\nTEXT: The mouse sees the bald eagle.\nFOL: Sees(mouse, baldEagle)\nTEXT: The mouse sees the lion.\nFOL: Sees(mouse, lion)\nTEXT: The tiger needs the lion.\nFOL: Needs(tiger, lion)\nTEXT: If someone needs the mouse and they need the tiger then the mouse is green.\nFOL: (Needs(x, mouse) & Needs(x, tiger)) -> Green(mouse)\nTEXT: If someone is nice and they need the mouse then they eat the mouse.\nFOL: Nice(x) & Needs(x, mouse) -> Eats(x, mouse)\nTEXT: If someone is green and they see the tiger then the tiger needs the bald eagle.\nFOL: Green(x) & Sees(x, tiger) -> Needs(tiger, baldEagle)\nTEXT: If someone is round and they see the tiger then the tiger is red.\nFOL: Round(x) & Sees(x, tiger) -> Red(tiger)\nTEXT: If someone sees the bald eagle then the bald eagle is cold.\nFOL: Sees(x, baldEagle) -> Cold(baldEagle)\nTEXT: If someone is green then they need the tiger.\nFOL: Green(x) -> Needs(x, tiger)\nTEXT: The mouse does not need the tiger.\nFOL: -Needs(mouse, tiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 156,
  "responses": [
   "<EVALUATE>\nTEXT: Charlie is a really nice guy with a big round body, usually wearing red.\nFOL: Nice(charlie) & Round(charlie) & Big(charlie) & Red(charlie)\nTEXT: Dave seems to be round.\nFOL: Round(dave)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(eric)\nTEXT: Fred is still young, which explains why he is round and cold, however, most people still think Fred is nice.\nFOL: Young(fred) & Round(fred) & Cold(fred) & Nice(fred)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x) & Red(x))\nTEXT: Rough people who are red in color and big are usally round in shape.\nFOL: all x. (Rough(x) & Red(x) & Big(x) -> Round(x))\nTEXT: I've noticed that nice people who have rough, green skin have a tendancy to be round.\nFOL: all x. (Nice(x) & Rough(x) & GreenSkin(x) -> Round(x))\nTEXT: Having cold and red qualities means a person will also have a rough quality.\nFOL: all x. (Cold(x) & Red(x) -> Rough(x))\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: all x. (Cold(x) & Red(x) -> Young(x))\nTEXT: Red people, who are also round and young, are often quite blue as well.\nFOL: all x. (Red(x) & Round(x) & Young(x) -> Blue(x))\nTEXT: When someone is blue, nice and young they will also be as big as the sun.\nFOL: all x. (Blue(x) & Nice(x) & Young(x) -> BigAsSun(x))\nTEXT: Charlie is not blue.\nFOL: -Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is a really nice guy with a big round body, usually wearing red.\nFOL: Nice(charlie) & Round(charlie) & Big(charlie) & Red(charlie)\nTEXT: Dave seems to be round.\nFOL: Round(dave)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(eric)\nTEXT: Fred is still young, which explains why he is round and cold, however, most people still think Fred is nice.\nFOL: Young(fred) & Round(fred) & Cold(fred) & Nice(fred)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x) & Red(x))\nTEXT: Rough people who are red in color and big are usally round in shape.\nFOL: all x. (Rough(x) & Red(x) & Big(x) -> Round(x))\nTEXT: I've noticed that nice people who have rough, green skin have a tendancy to be round.\nFOL: all x. (Nice(x) & Rough(x) & GreenSkin(x) -> Round(x))\nTEXT: Having cold and red qualities means a person will also have a rough quality.\nFOL: all x. (Cold(x) & Red(x) -> Rough(x))\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: all x. (Nice(x) & Cold(x) & Red(x) -> Young(x))\nTEXT: Red people, who are also round and young, are often quite blue as well.\nFOL: all x. (Red(x) & Round(x) & Young(x) -> Blue(x))\nTEXT: When someone is blue, nice and young they will also be as big as the sun.\nFOL: all x. (Blue(x) & Nice(x) & Young(x) -> BigAsSun(x))\nTEXT: Charlie is not blue.\nFOL: -Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is a really nice guy with a big round body, usually wearing red.\nFOL: Nice(charlie) & Round(charlie) & Big(charlie) & Red(charlie)\nTEXT: Dave seems to be round.\nFOL: Round(dave)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(eric)\nTEXT: Fred is still young, which explains why he is round and cold, however, most people still think Fred is nice.\nFOL: Young(fred) & Round(fred) & Cold(fred) & Nice(fred)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x)) | exists x. (Cold(x) & Red(x))\nTEXT: Rough people who are red in color and big are usally round in shape.\nFOL: all x. (Rough(x) & Red(x) & Big(x) -> Round(x))\nTEXT: I've noticed that nice people who have rough, green skin have a tendancy to be round.\nFOL: all x. (Nice(x) & Rough(x) & Green(x) -> Round(x))\nTEXT: Having cold and red qualities means a person will also have a rough quality.\nFOL: all x. (Cold(x) & Red(x) -> Rough(x))\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: all x. (Cold(x) & Red(x) -> Young(x))\nTEXT: Red people, who are also round and young, are often quite blue as well.\nFOL: all x. (Red(x) & Round(x) & Young(x) -> Blue(x))\nTEXT: When someone is blue, nice and young they will also be as big as the sun.\nFOL: all x. (Blue(x) & Nice(x) & Young(x) -> BigAsSun(x))\nTEXT: Charlie is not blue.\nFOL: -Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is a really nice guy with a big round body, usually wearing red.\nFOL: Nice(charlie) & Round(charlie) & Big(charlie) & Red(charlie)\nTEXT: Dave seems to be round.\nFOL: Round(dave)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(eric)\nTEXT: Fred is still young, which explains why he is round and cold, however, most people still think Fred is nice.\nFOL: Young(fred) & Round(fred) & Cold(fred) & Nice(fred)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x)) | exists x. (Cold(x) & Red(x))\nTEXT: Rough people who are red in color and big are usally round in shape.\nFOL: all x. (Rough(x) & Red(x) & Big(x) -> Round(x))\nTEXT: I've noticed that nice people who have rough, green skin have a tendancy to be round.\nFOL: all x. (Nice(x) & Rough(x) & Green(x) -> Round(x))\nTEXT: Having cold and red qualities means a person will also have a rough quality.\nFOL: all x. (Cold(x) & Red(x) -> Rough(x))\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: all x. (Nice(x) & Cold(x) & Red(x) -> Young(x))\nTEXT: Red people, who are also round and young, are often quite blue as well.\nFOL: all x. (Red(x) & Round(x) & Young(x) -> Blue(x))\nTEXT: When someone is blue, nice and young they will also be as big as the sun.\nFOL: all x. (Blue(x) & Nice(x) & Young(x) -> BigAsSun(x))\nTEXT: Charlie is not blue.\nFOL: -Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is a really nice guy with a big round body, usually wearing red.\nFOL: Nice(charlie) & Round(charlie) & Big(charlie) & Red(charlie)\nTEXT: Dave seems to be round.\nFOL: Round(dave)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(eric)\nTEXT: Fred is still young, which explains why he is round and cold, however, most people still think Fred is nice.\nFOL: Young(fred) & Round(fred) & Cold(fred) & Nice(fred)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x)) | exists x. (Cold(x) & Red(x))\nTEXT: Rough people who are red in color and big are usally round in shape.\nFOL: all x. (Rough(x) & Red(x) & Big(x) -> Round(x))\nTEXT: I've noticed that nice people who have rough, green skin have a tendancy to be round.\nFOL: all x. (Nice(x) & Rough(x) & Green(x) -> Round(x))\nTEXT: Having cold and red qualities means a person will also have a rough quality.\nFOL: all x. (Cold(x) & Red(x) -> Rough(x))\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: all x. (Nice(x) & Cold(x) & Red(x) -> Young(x))\nTEXT: Red people, who are also round and young, are often quite blue as well.\nFOL: all x. (Red(x) & Round(x) & Young(x) -> Blue(x))\nTEXT: When someone is blue, nice and young they will also be as big as the sun.\nFOL: all x. (Blue(x) & Nice(x) & Young(x) -> Big(x))\nTEXT: Charlie is not blue.\nFOL: -Blue(charlie)\n</EVALUATE>"
  ]
 },
 {
  "index": 157,
  "responses": [
   "<EVALUATE>\nTEXT: Bob may be young but he is nice, wears green shoes and is cold.\nFOL: (Young(bob) | -Young(bob)) & Nice(bob) & GreenShoes(bob) & Cold(bob)\nTEXT: Eric was proud of being round, yet rough.\nFOL: Proud(Eric, Round(Eric)) & Rough(Eric)\nTEXT: His red cheeks glowed.\nFOL: Glowed(RedCheeks)\nTEXT: Fred is feeling cold -- he is also feeling quite rough, red, nice and round.\nFOL: Cold(Fred) & Rough(Fred) & Red(Fred) & Nice(Fred) & Round(Fred)\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: all x. ((Rough(x) & Tumble(x) & Gentle(x) & Kind(x)) -> Blue(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) -> Rough(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: all x. (Nice(x) & Green(x) & Big(x) -> Young(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: Cold(x) & Red(x) & Blue(x) -> Big(x)\nTEXT: Fred is not blue.\nFOL: -Blue(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob may be young but he is nice, wears green shoes and is cold.\nFOL: (Young(bob) | -Young(bob)) & Nice(bob) & GreenShoes(bob) & Cold(bob)\nTEXT: Eric was proud of being round, yet rough.\nFOL: Proud(Eric, Round(Eric)) & Rough(Eric)\nTEXT: His red cheeks glowed.\nFOL: Glowed(RedCheeks)\nTEXT: Fred is feeling cold -- he is also feeling quite rough, red, nice and round.\nFOL: Cold(Fred) & Rough(Fred) & Red(Fred) & Nice(Fred) & Round(Fred)\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: all x. ((Rough(x) & Tumble(x) & Gentle(x) & Kind(x)) -> Blue(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) -> Rough(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: all x. (Nice(x) & Green(x) & Big(x) -> Young(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: Cold(x) & Red(x) & Blue(x) -> Big(x)\nTEXT: Fred is not blue.\nFOL: -Blue(Fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob may be young but he is nice, wears green shoes and is cold.\nFOL: (Young(bob) | -Young(bob)) & Nice(bob) & GreenShoes(bob) & Cold(bob)\nTEXT: Eric was proud of being round, yet rough.\nFOL: Proud(Eric, Round) & Proud(Eric, Rough)\nTEXT: His red cheeks glowed.\nFOL: Glowed(RedCheeks)\nTEXT: Fred is feeling cold -- he is also feeling quite rough, red, nice and round.\nFOL: Cold(Fred) & Rough(Fred) & Red(Fred) & Nice(Fred) & Round(Fred)\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: all x. ((Rough(x) & Tumble(x) & Gentle(x) & Kind(x)) -> Blue(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) -> Rough(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: all x. (Nice(x) & Green(x) & Big(x) -> Young(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: Cold(x) & Red(x) & Blue(x) -> Big(x)\nTEXT: Fred is not blue.\nFOL: -Blue(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob may be young but he is nice, wears green shoes and is cold.\nFOL: (Young(bob) | -Young(bob)) & Nice(bob) & GreenShoes(bob) & Cold(bob)\nTEXT: Eric was proud of being round, yet rough.\nFOL: Proud(Eric, Round(Eric)) & Rough(Eric)\nTEXT: His red cheeks glowed.\nFOL: Glowed(RedCheeks)\nTEXT: Fred is feeling cold -- he is also feeling quite rough, red, nice and round.\nFOL: Cold(Fred) & Rough(Fred) & Red(Fred) & Nice(Fred) & Round(Fred)\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: all x. ((Rough(x) & Tumble(x) & Gentle(x) & Kind(x)) -> Blue(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) -> Rough(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: all x. (Nice(x) & Green(x) & Big(x) -> Young(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: all x. (Cold(x) & Red(x) & Blue(x) -> Big(x))\nTEXT: Fred is not blue.\nFOL: -Blue(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob may be young but he is nice, wears green shoes and is cold.\nFOL: (Young(bob) | -Young(bob)) & Nice(bob) & GreenShoes(bob) & Cold(bob)\nTEXT: Eric was proud of being round, yet rough.\nFOL: Proud(Eric, Round(Eric)) & Rough(Eric)\nTEXT: His red cheeks glowed.\nFOL: Red(Cheeks) & Glowed(Cheeks)\nTEXT: Fred is feeling cold -- he is also feeling quite rough, red, nice and round.\nFOL: Cold(Fred) & Rough(Fred) & Red(Fred) & Nice(Fred) & Round(Fred)\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: all x. ((Rough(x) & Tumble(x) & Gentle(x) & Kind(x)) -> Blue(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. ((Green(x) & Young(x) & Round(x)) -> Rough(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: all x. (Nice(x) & Green(x) & Big(x) -> Young(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: Cold(x) & Red(x) & Blue(x) -> Big(x)\nTEXT: Fred is not blue.\nFOL: -Blue(fred)\n</EVALUATE>"
  ]
 },
 {
  "index": 158,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(bob)\nTEXT: Bob is rough.\nFOL: Rough(bob)\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Charlie is green.\nFOL: Green(charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\nTEXT: Charlie is rough.\nFOL: Rough(charlie)\nTEXT: Charlie is round.\nFOL: Round(charlie)\nTEXT: Charlie is young.\nFOL: Young(charlie)\nTEXT: Harry is furry.\nFOL: Furry(harry)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is rough.\nFOL: Rough(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: Harry is young.\nFOL: Young(harry)\nTEXT: Round things are white.\nFOL: all x. (Round(x) -> White(x))\nTEXT: If something is rough then it is furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: All rough things are furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: Charlie is young.\nFOL: Young(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(bob)\nTEXT: Bob is rough.\nFOL: Rough(bob)\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Charlie is green.\nFOL: Green(charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\nTEXT: Charlie is rough.\nFOL: Rough(charlie)\nTEXT: Charlie is round.\nFOL: Round(charlie)\nTEXT: Charlie is young.\nFOL: Young(charlie)\nTEXT: Harry is furry.\nFOL: Furry(harry)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is rough.\nFOL: Rough(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: Harry is young.\nFOL: Young(harry)\nTEXT: Round things are white.\nFOL: all x. (Round(x) -> White(x))\nTEXT: If something is rough then it is furry.\nFOL: Rough(x) -> Furry(x)\nTEXT: All rough things are furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: Charlie is young.\nFOL: Young(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(bob)\n\nTEXT: Bob is rough.\nFOL: Rough(bob)\n\nTEXT: Bob is white.\nFOL: White(bob)\n\nTEXT: Bob is young.\nFOL: Young(bob)\n\nTEXT: Charlie is green.\nFOL: Green(charlie)\n\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\n\nTEXT: Charlie is rough.\nFOL: Rough(charlie)\n\nTEXT: Charlie is round.\nFOL: Round(charlie)\n\nTEXT: Charlie is young.\nFOL: Young(charlie)\n\nTEXT: Harry is furry.\nFOL: Furry(harry)\n\nTEXT: Harry is green.\nFOL: Green(harry)\n\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\n\nTEXT: Harry is rough.\nFOL: Rough(harry)\n\nTEXT: Harry is round.\nFOL: Round(harry)\n\nTEXT: Harry is white.\nFOL: White(harry)\n\nTEXT: Harry is young.\nFOL: Young(harry)\n\nTEXT: Round things are white.\nFOL: all x. (Round(x) -> White(x))\n\nTEXT: If something is rough then it is furry.\nFOL: all x. (Rough(x) -> Furry(x))\n\nTEXT: All rough things are furry.\nFOL: all x. (Rough(x) -> Furry(x))\n\nTEXT: Charlie is young.\nFOL: Young(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(bob)\nTEXT: Bob is rough.\nFOL: Rough(bob)\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Charlie is green.\nFOL: Green(charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\nTEXT: Charlie is rough.\nFOL: Rough(charlie)\nTEXT: Charlie is round.\nFOL: Round(charlie)\nTEXT: Charlie is young.\nFOL: Young(charlie)\nTEXT: Harry is furry.\nFOL: Furry(harry)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is rough.\nFOL: Rough(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: Harry is young.\nFOL: Young(harry)\nTEXT: Round things are white.\nFOL: all x. (Round(x) -> White(x))\nTEXT: If something is rough then it is furry.\nFOL: (Rough(x) -> Furry(x))\nTEXT: All rough things are furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: Charlie is young.\nFOL: Young(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(bob)\nTEXT: Bob is rough.\nFOL: Rough(bob)\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Charlie is green.\nFOL: Green(charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\nTEXT: Charlie is rough.\nFOL: Rough(charlie)\nTEXT: Charlie is round.\nFOL: Round(charlie)\nTEXT: Charlie is young.\nFOL: Young(charlie)\nTEXT: Harry is furry.\nFOL: Furry(harry)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is rough.\nFOL: Rough(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: Harry is young.\nFOL: Young(harry)\nTEXT: Round things are white.\nFOL: all x. (Round(x) -> White(x))\nTEXT: If something is rough then it is furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: All rough things are furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: Charlie is young.\nFOL: Young(charlie)\n</EVALUATE>"
  ]
 },
 {
  "index": 159,
  "responses": [
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: Big(dog)\nTEXT: If the dog is young then the dog is blue.\nFOL: Young(dog) -> Blue(dog)\nTEXT: Big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: The dog is not cold.\nFOL: -Cold(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: Big(dog)\nTEXT: If the dog is young then the dog is blue.\nFOL: (Young(dog) -> Blue(dog))\nTEXT: Big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: The dog is not cold.\nFOL: -Cold(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: Big(dog)\nTEXT: If the dog is young then the dog is blue.\nFOL: -Young(dog) | Blue(dog)\nTEXT: Big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: The dog is not cold.\nFOL: -Cold(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: Big(dog)\n\nTEXT: If the dog is young then the dog is blue.\nFOL: Young(dog) -> Blue(dog)\n\nTEXT: Big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\n\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) -> Young(x))\n\nTEXT: The dog is not cold.\nFOL: -Cold(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: Big(dog)\nTEXT: If the dog is young then the dog is blue.\nFOL: Young(dog) -> Blue(dog)\nTEXT: Big things are kind.\nFOL: Big(x) -> Kind(x)\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: The dog is not cold.\nFOL: -Cold(dog)\n</EVALUATE>"
  ]
 },
 {
  "index": 160,
  "responses": [
   "<EVALUATE>\nTEXT: The rabbit is cold.\nFOL: Cold(rabbit)\nTEXT: If something is rough and kind then it is blue.\nFOL: all x. (Rough(x) & Kind(x) -> Blue(x))\nTEXT: Nice, rough things are kind.\nFOL: all x. (Nice(x) & Rough(x) -> Kind(x))\nTEXT: If the rabbit is cold then the rabbit is nice.\nFOL: Cold(rabbit) -> Nice(rabbit)\nTEXT: Kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: Cold things are kind.\nFOL: all x. (Cold(x) -> Kind(x))\nTEXT: All nice things are rough.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: The rabbit is nice.\nFOL: Nice(rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The rabbit is cold.\nFOL: Cold(rabbit)\nTEXT: If something is rough and kind then it is blue.\nFOL: all x. (Rough(x) & Kind(x) -> Blue(x))\nTEXT: Nice, rough things are kind.\nFOL: all x. (Rough(x) & Nice(x) -> Kind(x))\nTEXT: If the rabbit is cold then the rabbit is nice.\nFOL: Cold(rabbit) -> Nice(rabbit)\nTEXT: Kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: Cold things are kind.\nFOL: all x. (Cold(x) -> Kind(x))\nTEXT: All nice things are rough.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: The rabbit is nice.\nFOL: Nice(rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The rabbit is cold.\nFOL: Cold(rabbit)\nTEXT: If something is rough and kind then it is blue.\nFOL: all x. ((Rough(x) & Kind(x)) -> Blue(x))\nTEXT: Nice, rough things are kind.\nFOL: all x. (Nice(x) & Rough(x) -> Kind(x))\nTEXT: If the rabbit is cold then the rabbit is nice.\nFOL: Cold(rabbit) -> Nice(rabbit)\nTEXT: Kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: Cold things are kind.\nFOL: all x. (Cold(x) -> Kind(x))\nTEXT: All nice things are rough.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: The rabbit is nice.\nFOL: Nice(rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The rabbit is cold.\nFOL: Cold(rabbit)\nTEXT: If something is rough and kind then it is blue.\nFOL: all x. (Rough(x) & Kind(x) -> Blue(x))\nTEXT: Nice, rough things are kind.\nFOL: all x. ((Nice(x) & Rough(x)) -> Kind(x))\nTEXT: If the rabbit is cold then the rabbit is nice.\nFOL: Cold(rabbit) -> Nice(rabbit)\nTEXT: Kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: Cold things are kind.\nFOL: all x. (Cold(x) -> Kind(x))\nTEXT: All nice things are rough.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: The rabbit is nice.\nFOL: Nice(rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The rabbit is cold.\nFOL: Cold(rabbit)\nTEXT: If something is rough and kind then it is blue.\nFOL: all x. ((Rough(x) & Kind(x)) -> Blue(x))\nTEXT: Nice, rough things are kind.\nFOL: all x. ((Nice(x) & Rough(x)) -> Kind(x))\nTEXT: If the rabbit is cold then the rabbit is nice.\nFOL: Cold(rabbit) -> Nice(rabbit)\nTEXT: Kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: Cold things are kind.\nFOL: all x. (Cold(x) -> Kind(x))\nTEXT: All nice things are rough.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: The rabbit is nice.\nFOL: Nice(rabbit)\n</EVALUATE>"
  ]
 },
 {
  "index": 161,
  "responses": [
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: Bob is cold but nice with red hair and dresses green.\nFOL: Cold(bob) & Nice(bob) & RedHair(bob) & DressesGreen(bob)\nTEXT: Young Dave here is always rough but nice and yes he is big.\nFOL: Young(dave) & Rough(dave) & Nice(dave) & Big(dave)\nTEXT: Eric seems to be round.\nFOL: Round(eric)\nTEXT: If you run across a young person with rough skin and a round figure, you can count on them being kind.\nFOL: all x. (Young(x) & RoughSkin(x) & Round(x) -> Kind(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) & Rough(x) -> Red(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: all x. (Big(x) & Blue(x) & Red(x) -> RoughSkin(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: (Young(x) & Big(x) & Rough(x) & Big(x)) -> Round(x)\nTEXT: People who are round and green while being cold are also red.\nFOL: all x. (Round(x) & Green(x) & Cold(x) -> Red(x))\nTEXT: Alan is not big.\nFOL: -Big(alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: Bob is cold but nice with red hair and dresses green.\nFOL: Cold(bob) & Nice(bob) & RedHair(bob) & DressesGreen(bob)\nTEXT: Young Dave here is always rough but nice and yes he is big.\nFOL: Young(dave) & Rough(dave) & Nice(dave) & Big(dave)\nTEXT: Eric seems to be round.\nFOL: Round(eric)\nTEXT: If you run across a young person with rough skin and a round figure, you can count on them being kind.\nFOL: all x. (Young(x) & RoughSkin(x) & Round(x) -> Kind(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) & Rough(x) -> Red(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: all x. (Big(x) & Blue(x) & Red(x) -> RoughSkin(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: (Young(x) & Big(x) & Rough(x) & Big(x)) -> Round(x)\nTEXT: People who are round and green while being cold are also red.\nFOL: all x. ((Round(x) & Green(x) & Cold(x)) -> Red(x))\nTEXT: Alan is not big.\nFOL: -Big(alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: Bob is cold but nice with red hair and dresses green.\nFOL: Cold(bob) & Nice(bob) & RedHair(bob) & DressesGreen(bob)\nTEXT: Young Dave here is always rough but nice and yes he is big.\nFOL: Young(dave) & Rough(dave) & Nice(dave) & Big(dave)\nTEXT: Eric seems to be round.\nFOL: Round(eric)\nTEXT: If you run across a young person with rough skin and a round figure, you can count on them being kind.\nFOL: all x. (Young(x) & RoughSkin(x) & Round(x) -> Kind(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) -> Red(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: all x. (Big(x) & Blue(x) & Red(x) -> RoughSkin(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: (Young(x) & Big(x) & Rough(x) & Big(x)) -> Round(x)\nTEXT: People who are round and green while being cold are also red.\nFOL: all x. ((Round(x) & Green(x) & Cold(x)) -> Red(x))\nTEXT: Alan is not big.\nFOL: -Big(alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: Bob is cold but nice with red hair and dresses green.\nFOL: Cold(bob) & Nice(bob) & RedHair(bob) & DressesGreen(bob)\nTEXT: Young Dave here is always rough but nice and yes he is big.\nFOL: Young(dave) & Rough(dave) & Nice(dave) & Big(dave)\nTEXT: Eric seems to be round.\nFOL: Round(eric)\nTEXT: If you run across a young person with rough skin and a round figure, you can count on them being kind.\nFOL: all x. (Young(x) & RoughSkin(x) & Round(x) -> Kind(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) & Rough(x) -> Red(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: all x. (Big(x) & Blue(x) & Red(x) -> RoughSkin(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: (Young(x) & Big(x) & Rough(x) & Big(x)) -> Round(x)\nTEXT: People who are round and green while being cold are also red.\nFOL: all x. (Round(x) & Green(x) & Cold(x) -> Red(x))\nTEXT: Alan is not big.\nFOL: -Big(alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: Bob is cold but nice with red hair and dresses green.\nFOL: Cold(bob) & Nice(bob) & RedHair(bob) & DressesGreen(bob)\nTEXT: Young Dave here is always rough but nice and yes he is big.\nFOL: Young(dave) & Rough(dave) & Nice(dave) & Big(dave)\nTEXT: Eric seems to be round.\nFOL: Round(eric)\nTEXT: If you run across a young person with rough skin and a round figure, you can count on them being kind.\nFOL: all x. (Young(x) & RoughSkin(x) & Round(x) -> Kind(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) & Rough(x) -> Red(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: all x. (Big(x) & Blue(x) & Red(x) -> RoughSkin(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: (Young(x) & Big(x) & Rough(x) & Big(x)) -> Round(x)\nTEXT: People who are round and green while being cold are also red.\nFOL: all x. ((Round(x) & Green(x) & Cold(x)) -> Red(x))\nTEXT: Alan is not big.\nFOL: -Big(alan)\n</EVALUATE>"
  ]
 },
 {
  "index": 162,
  "responses": [
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: Cold(cow)\nTEXT: The cow is kind.\nFOL: Kind(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow is rough.\nFOL: Rough(cow)\nTEXT: The cow is round.\nFOL: Round(cow)\nTEXT: All cold people are red.\nFOL: all x. (Cold(x) -> Red(x))\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) -> Kind(x))\nTEXT: If someone is kind and round then they are cold.\nFOL: all x. ((Kind(x) & Round(x)) -> Cold(x))\nTEXT: All kind people are cold.\nFOL: all x. (Kind(x) -> Cold(x))\nTEXT: If someone is rough then they are red.\nFOL: all x. (Rough(x) -> Red(x))\nTEXT: All cold people are round.\nFOL: all x. (Cold(x) -> Round(x))\nTEXT: The cow is round.\nFOL: Round(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: Cold(cow)\nTEXT: The cow is kind.\nFOL: Kind(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow is rough.\nFOL: Rough(cow)\nTEXT: The cow is round.\nFOL: Round(cow)\nTEXT: All cold people are red.\nFOL: all x. (Cold(x) -> Red(x))\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) -> Kind(x))\nTEXT: If someone is kind and round then they are cold.\nFOL: all x. (Kind(x) & Round(x) -> Cold(x))\nTEXT: All kind people are cold.\nFOL: all x. (Kind(x) -> Cold(x))\nTEXT: If someone is rough then they are red.\nFOL: all x. (Rough(x) -> Red(x))\nTEXT: All cold people are round.\nFOL: all x. (Cold(x) -> Round(x))\nTEXT: The cow is round.\nFOL: Round(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: Cold(cow)\nTEXT: The cow is kind.\nFOL: Kind(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow is rough.\nFOL: Rough(cow)\nTEXT: The cow is round.\nFOL: Round(cow)\nTEXT: All cold people are red.\nFOL: all x. (Cold(x) -> Red(x))\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) -> Kind(x))\nTEXT: If someone is kind and round then they are cold.\nFOL: (Kind(x) & Round(x)) -> Cold(x)\nTEXT: All kind people are cold.\nFOL: all x. (Kind(x) -> Cold(x))\nTEXT: If someone is rough then they are red.\nFOL: Rough(x) -> Red(x)\nTEXT: All cold people are round.\nFOL: all x. (Cold(x) -> Round(x))\nTEXT: The cow is round.\nFOL: Round(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: Cold(cow)\nTEXT: The cow is kind.\nFOL: Kind(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow is rough.\nFOL: Rough(cow)\nTEXT: The cow is round.\nFOL: Round(cow)\nTEXT: All cold people are red.\nFOL: all x. (Cold(x) -> Red(x))\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) -> Kind(x))\nTEXT: If someone is kind and round then they are cold.\nFOL: (Kind(x) & Round(x)) -> Cold(x)\nTEXT: All kind people are cold.\nFOL: all x. (Kind(x) -> Cold(x))\nTEXT: If someone is rough then they are red.\nFOL: all x. (Rough(x) -> Red(x))\nTEXT: All cold people are round.\nFOL: all x. (Cold(x) -> Round(x))\nTEXT: The cow is round.\nFOL: Round(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: Cold(cow)\n\nTEXT: The cow is kind.\nFOL: Kind(cow)\n\nTEXT: The cow is red.\nFOL: Red(cow)\n\nTEXT: The cow is rough.\nFOL: Rough(cow)\n\nTEXT: The cow is round.\nFOL: Round(cow)\n\nTEXT: All cold people are red.\nFOL: all x. (Cold(x) -> Red(x))\n\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) -> Kind(x))\n\nTEXT: If someone is kind and round then they are cold.\nFOL: all x. ((Kind(x) & Round(x)) -> Cold(x))\n\nTEXT: All kind people are cold.\nFOL: all x. (Kind(x) -> Cold(x))\n\nTEXT: If someone is rough then they are red.\nFOL: all x. (Rough(x) -> Red(x))\n\nTEXT: All cold people are round.\nFOL: all x. (Cold(x) -> Round(x))\n\nTEXT: The cow is round.\nFOL: Round(cow)\n</EVALUATE>"
  ]
 },
 {
  "index": 163,
  "responses": [
   "<EVALUATE>\nTEXT: The mouse chases the squirrel.\nFOL: Chases(mouse, squirrel)\nTEXT: The mouse is big.\nFOL: Big(mouse)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: The mouse is young.\nFOL: Young(mouse)\nTEXT: The mouse sees the squirrel.\nFOL: Sees(mouse, squirrel)\nTEXT: The squirrel is big.\nFOL: Big(squirrel)\nTEXT: The squirrel is blue.\nFOL: Blue(squirrel)\nTEXT: The squirrel is round.\nFOL: Round(squirrel)\nTEXT: The squirrel sees the mouse.\nFOL: Sees(squirrel, mouse)\nTEXT: The squirrel visits the mouse.\nFOL: Visits(squirrel, mouse)\nTEXT: If something visits the mouse then the mouse chases the squirrel.\nFOL: all x. (Visits(x, mouse) -> Chases(mouse, squirrel))\nTEXT: If the squirrel sees the mouse and the squirrel is young then the squirrel is round.\nFOL: (Sees(squirrel, mouse) & Young(squirrel)) -> Round(squirrel)\nTEXT: If something is nice then it visits the mouse.\nFOL: all x. (Nice(x) -> Visits(x, mouse))\nTEXT: If something is big and it chases the squirrel then it visits the squirrel.\nFOL: all x. ((Big(x) & Chases(x, squirrel)) -> Visits(x, squirrel))\nTEXT: If the squirrel visits the mouse and the mouse visits the squirrel then the mouse is nice.\nFOL: (Visits(squirrel, mouse) & Visits(mouse, squirrel)) -> Nice(mouse)\nTEXT: If something chases the squirrel and the squirrel chases the mouse then it visits the squirrel.\nFOL: all x. ((Chases(x, squirrel) & Chases(squirrel, mouse)) -> Visits(x, squirrel))\nTEXT: The mouse visits the squirrel.\nFOL: Visits(mouse, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse chases the squirrel.\nFOL: Chase(mouse, squirrel)\nTEXT: The mouse is big.\nFOL: Big(mouse)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: The mouse is young.\nFOL: Young(mouse)\nTEXT: The mouse sees the squirrel.\nFOL: See(mouse, squirrel)\nTEXT: The squirrel is big.\nFOL: Big(squirrel)\nTEXT: The squirrel is blue.\nFOL: Blue(squirrel)\nTEXT: The squirrel is round.\nFOL: Round(squirrel)\nTEXT: The squirrel sees the mouse.\nFOL: See(squirrel, mouse)\nTEXT: The squirrel visits the mouse.\nFOL: Visit(squirrel, mouse)\nTEXT: If something visits the mouse then the mouse chases the squirrel.\nFOL: all x. (Visit(x, mouse) -> Chase(x, squirrel))\nTEXT: If the squirrel sees the mouse and the squirrel is young then the squirrel is round.\nFOL: (See(squirrel, mouse) & Young(squirrel)) -> Round(squirrel)\nTEXT: If something is nice then it visits the mouse.\nFOL: all x. (Nice(x) -> Visit(x, mouse))\nTEXT: If something is big and it chases the squirrel then it visits the squirrel.\nFOL: all x. ((Big(x) & Chase(x, squirrel)) -> Visit(x, squirrel))\nTEXT: If the squirrel visits the mouse and the mouse visits the squirrel then the mouse is nice.\nFOL: (Visit(squirrel, mouse) & Visit(mouse, squirrel)) -> Nice(mouse)\nTEXT: If something chases the squirrel and the squirrel chases the mouse then it visits the squirrel.\nFOL: all x. ((Chase(x, squirrel) & Chase(squirrel, mouse)) -> Visit(x, squirrel))\nTEXT: The mouse visits the squirrel.\nFOL: Visit(mouse, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse chases the squirrel.\nFOL: Chases(mouse, squirrel)\nTEXT: The mouse is big.\nFOL: Big(mouse)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: The mouse is young.\nFOL: Young(mouse)\nTEXT: The mouse sees the squirrel.\nFOL: Sees(mouse, squirrel)\nTEXT: The squirrel is big.\nFOL: Big(squirrel)\nTEXT: The squirrel is blue.\nFOL: Blue(squirrel)\nTEXT: The squirrel is round.\nFOL: Round(squirrel)\nTEXT: The squirrel sees the mouse.\nFOL: Sees(squirrel, mouse)\nTEXT: The squirrel visits the mouse.\nFOL: Visits(squirrel, mouse)\nTEXT: If something visits the mouse then the mouse chases the squirrel.\nFOL: all x. (Visits(x, mouse) -> Chases(mouse, squirrel))\nTEXT: If the squirrel sees the mouse and the squirrel is young then the squirrel is round.\nFOL: (Sees(squirrel, mouse) & Young(squirrel)) -> Round(squirrel)\nTEXT: If something is nice then it visits the mouse.\nFOL: all x. (Nice(x) -> Visits(x, mouse))\nTEXT: If something is big and it chases the squirrel then it visits the squirrel.\nFOL: all x. (Big(x) & Chases(x, squirrel) -> Visits(x, squirrel))\nTEXT: If the squirrel visits the mouse and the mouse visits the squirrel then the mouse is nice.\nFOL: (Visits(squirrel, mouse) & Visits(mouse, squirrel)) -> Nice(mouse)\nTEXT: If something chases the squirrel and the squirrel chases the mouse then it visits the squirrel.\nFOL: all x. ((Chases(x, squirrel) & Chases(squirrel, mouse)) -> Visits(x, squirrel))\nTEXT: The mouse visits the squirrel.\nFOL: Visits(mouse, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse chases the squirrel.\nFOL: Chases(mouse, squirrel)\nTEXT: The mouse is big.\nFOL: Big(mouse)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: The mouse is young.\nFOL: Young(mouse)\nTEXT: The mouse sees the squirrel.\nFOL: Sees(mouse, squirrel)\nTEXT: The squirrel is big.\nFOL: Big(squirrel)\nTEXT: The squirrel is blue.\nFOL: Blue(squirrel)\nTEXT: The squirrel is round.\nFOL: Round(squirrel)\nTEXT: The squirrel sees the mouse.\nFOL: Sees(squirrel, mouse)\nTEXT: The squirrel visits the mouse.\nFOL: Visits(squirrel, mouse)\nTEXT: If something visits the mouse then the mouse chases the squirrel.\nFOL: all x. (Visits(x, mouse) -> Chases(mouse, squirrel))\nTEXT: If the squirrel sees the mouse and the squirrel is young then the squirrel is round.\nFOL: (Sees(squirrel, mouse) & Young(squirrel)) -> Round(squirrel)\nTEXT: If something is nice then it visits the mouse.\nFOL: all x. (Nice(x) -> Visits(x, mouse))\nTEXT: If something is big and it chases the squirrel then it visits the squirrel.\nFOL: all x. (Big(x) & Chases(x, squirrel) -> Visits(x, squirrel))\nTEXT: If the squirrel visits the mouse and the mouse visits the squirrel then the mouse is nice.\nFOL: (Visits(squirrel, mouse) & Visits(mouse, squirrel)) -> Nice(mouse)\nTEXT: If something chases the squirrel and the squirrel chases the mouse then it visits the squirrel.\nFOL: all x. (Chases(x, squirrel) & Chases(squirrel, mouse) -> Visits(x, squirrel))\nTEXT: The mouse visits the squirrel.\nFOL: Visits(mouse, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse chases the squirrel.\nFOL: Chases(mouse, squirrel)\n\nTEXT: The mouse is big.\nFOL: Big(mouse)\n\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\n\nTEXT: The mouse is young.\nFOL: Young(mouse)\n\nTEXT: The mouse sees the squirrel.\nFOL: Sees(mouse, squirrel)\n\nTEXT: The squirrel is big.\nFOL: Big(squirrel)\n\nTEXT: The squirrel is blue.\nFOL: Blue(squirrel)\n\nTEXT: The squirrel is round.\nFOL: Round(squirrel)\n\nTEXT: The squirrel sees the mouse.\nFOL: Sees(squirrel, mouse)\n\nTEXT: The squirrel visits the mouse.\nFOL: Visits(squirrel, mouse)\n\nTEXT: If something visits the mouse then the mouse chases the squirrel.\nFOL: all x. (Visits(x, mouse) -> Chases(mouse, squirrel))\n\nTEXT: If the squirrel sees the mouse and the squirrel is young then the squirrel is round.\nFOL: (Sees(squirrel, mouse) & Young(squirrel)) -> Round(squirrel)\n\nTEXT: If something is nice then it visits the mouse.\nFOL: all x. (Nice(x) -> Visits(x, mouse))\n\nTEXT: If something is big and it chases the squirrel then it visits the squirrel.\nFOL: all x. ((Big(x) & Chases(x, squirrel)) -> Visits(x, squirrel))\n\nTEXT: If the squirrel visits the mouse and the mouse visits the squirrel then the mouse is nice.\nFOL: (Visits(squirrel, mouse) & Visits(mouse, squirrel)) -> Nice(mouse)\n\nTEXT: If something chases the squirrel and the squirrel chases the mouse then it visits the squirrel.\nFOL: all x. ((Chases(x, squirrel) & Chases(squirrel, mouse)) -> Visits(x, squirrel))\n\nTEXT: The mouse visits the squirrel.\nFOL: Visits(mouse, squirrel)\n</EVALUATE>"
  ]
 },
 {
  "index": 164,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Erin is blue.\nFOL: Blue(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: Erin is rough.\nFOL: Rough(erin)\nTEXT: Harry is red.\nFOL: Red(harry)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: Furry things are smart.\nFOL: all x. (Furry(x) -> Smart(x))\nTEXT: If something is smart and green then it is furry.\nFOL: all x. ((Smart(x) & Green(x)) -> Furry(x))\nTEXT: Harry is not furry.\nFOL: -Furry(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Erin is blue.\nFOL: Blue(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: Erin is rough.\nFOL: Rough(erin)\nTEXT: Harry is red.\nFOL: Red(harry)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: Furry things are smart.\nFOL: all x. (Furry(x) -> Smart(x))\nTEXT: If something is smart and green then it is furry.\nFOL: all x. ((Smart(x) & Green(x)) -> Furry(x))\nTEXT: Harry is not furry.\nFOL: -Furry(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Erin is blue.\nFOL: Blue(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: Erin is rough.\nFOL: Rough(erin)\nTEXT: Harry is red.\nFOL: Red(harry)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: Furry things are smart.\nFOL: all x. (Furry(x) -> Smart(x))\nTEXT: If something is smart and green then it is furry.\nFOL: all x. (Smart(x) & Green(x) -> Furry(x))\nTEXT: Harry is not furry.\nFOL: -Furry(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Erin is blue.\nFOL: Blue(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: Erin is rough.\nFOL: Rough(erin)\nTEXT: Harry is red.\nFOL: Red(harry)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: Furry things are smart.\nFOL: all x. (Furry(x) -> Smart(x))\nTEXT: If something is smart and green then it is furry.\nFOL: all x. (Smart(x) & Green(x) -> Furry(x))\nTEXT: Harry is not furry.\nFOL: -Furry(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Erin is blue.\nFOL: Blue(erin)\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: Erin is rough.\nFOL: Rough(erin)\nTEXT: Harry is red.\nFOL: Red(harry)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: Furry things are smart.\nFOL: all x. (Furry(x) -> Smart(x))\nTEXT: If something is smart and green then it is furry.\nFOL: (Smart(x) & Green(x)) -> Furry(x)\nTEXT: Harry is not furry.\nFOL: -Furry(harry)\n</EVALUATE>"
  ]
 },
 {
  "index": 165,
  "responses": [
   "<EVALUATE>\nTEXT: Alan is big, rough and red, but that's because he's often blue.\nFOL: Big(alan) & Rough(alan) & Red(alan) & Blue(alan)\nTEXT: Really, his is nice and kind.\nFOL: Nice(his) & Kind(his)\nTEXT: Dave is cold to his ex-wife.\nFOL: ColdToExWife(dave)\nTEXT: She knows he is round and red.\nFOL: Knows(she, RoundAndRed(he))\nTEXT: He is kind to everyone else.\nFOL: KindToEveryoneElse(he)\nTEXT: Fred is green and cold too.\nFOL: Green(fred) & Cold(fred)\nTEXT: If a person is described as being nice, cold and young it usually follow that they are red.\nFOL: all x. (Nice(x) & Cold(x) & Young(x) -> Red(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: all x. (Blue(x) & Red(x) & Nice(x) -> Young(x))\nTEXT: It's pretty typical of red, rough, and cold people to be round.\nFOL: all x. (Red(x) & Rough(x) & Cold(x) -> Round(x))\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: YoungAgedAndBigBlue(x) -> Cold(x)\nTEXT: A kind person will certainly be young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: Eric is young.\nFOL: Young(eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is big, rough and red, but that's because he's often blue.\nFOL: Big(alan) & Rough(alan) & Red(alan) & Blue(alan)\nTEXT: Really, his is nice and kind.\nFOL: Nice(his) & Kind(his)\nTEXT: Dave is cold to his ex-wife.\nFOL: ColdToExWife(dave)\nTEXT: She knows he is round and red.\nFOL: Knows(she, RoundAndRed(he))\nTEXT: He is kind to everyone else.\nFOL: KindToEveryoneElse(he)\nTEXT: Fred is green and cold too.\nFOL: Green(fred) & Cold(fred)\nTEXT: If a person is described as being nice, cold and young it usually follow that they are red.\nFOL: all x. (Nice(x) & Cold(x) & Young(x) -> Red(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: all x. (Blue(x) & Red(x) & Nice(x) -> Young(x))\nTEXT: It's pretty typical of red, rough, and cold people to be round.\nFOL: all x. (Red(x) & Rough(x) & Cold(x) -> Round(x))\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: YoungAgedAndBigBlue(x) -> Cold(x)\nTEXT: A kind person will certainly be young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: Eric is young.\nFOL: Young(erick)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is big, rough and red, but that's because he's often blue.\nFOL: Big(alan) & Rough(alan) & Red(alan) & Blue(alan)\nTEXT: Really, his is nice and kind.\nFOL: Nice(his) & Kind(his)\nTEXT: Dave is cold to his ex-wife.\nFOL: ColdToExWife(dave)\nTEXT: She knows he is round and red.\nFOL: Knows(she, RoundAndRed(he))\nTEXT: He is kind to everyone else.\nFOL: KindToEveryoneElse(he)\nTEXT: Fred is green and cold too.\nFOL: Green(fred) & Cold(fred)\nTEXT: If a person is described as being nice, cold and young it usually follow that they are red.\nFOL: all x. (Nice(x) & Cold(x) & Young(x) -> Red(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: all x. (Blue(x) & Red(x) & Nice(x) -> Young(x))\nTEXT: It's pretty typical of red, rough, and cold people to be round.\nFOL: all x. (Red(x) & Rough(x) & Cold(x) -> Round(x))\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: YoungAgedAndBigBlue(x) -> Cold(x)\nTEXT: A kind person will certainly be young.\nFOL: Kind(x) -> Young(x)\nTEXT: Eric is young.\nFOL: Young(eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is big, rough and red, but that's because he's often blue.\nFOL: Big(alan) & Rough(alan) & Red(alan) & Blue(alan)\nTEXT: Really, his is nice and kind.\nFOL: Nice(his) & Kind(his)\nTEXT: Dave is cold to his ex-wife.\nFOL: ColdToExWife(dave)\nTEXT: She knows he is round and red.\nFOL: Knows(she, RoundAndRed(he))\nTEXT: He is kind to everyone else.\nFOL: KindToEveryoneElse(he)\nTEXT: Fred is green and cold too.\nFOL: Green(fred) & Cold(fred)\nTEXT: If a person is described as being nice, cold and young it usually follow that they are red.\nFOL: all x. (Nice(x) & Cold(x) & Young(x) -> Red(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: all x. (Blue(x) & Red(x) & Nice(x) -> Young(x))\nTEXT: It's pretty typical of red, rough, and cold people to be round.\nFOL: all x. (Red(x) & Rough(x) & Cold(x) -> Round(x))\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: YoungAgedAndBigBlue(x) -> Cold(x)\nTEXT: A kind person will certainly be young.\nFOL: Kind(x) -> Young(x)\nTEXT: Eric is young.\nFOL: Young(erick)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is big, rough and red, but that's because he's often blue.\nFOL: (Big(alan) & Rough(alan) & Red(alan)) & Blue(alan)\nTEXT: Really, his is nice and kind.\nFOL: Nice(his) & Kind(his)\nTEXT: Dave is cold to his ex-wife.\nFOL: ColdToExWife(dave)\nTEXT: She knows he is round and red.\nFOL: Knows(she, RoundAndRed(he))\nTEXT: He is kind to everyone else.\nFOL: KindToEveryoneElse(he)\nTEXT: Fred is green and cold too.\nFOL: Green(fred) & Cold(fred)\nTEXT: If a person is described as being nice, cold and young it usually follow that they are red.\nFOL: all x. (Nice(x) & Cold(x) & Young(x) -> Red(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: all x. (Blue(x) & Red(x) & Nice(x) -> Young(x))\nTEXT: It's pretty typical of red, rough, and cold people to be round.\nFOL: all x. (Red(x) & Rough(x) & Cold(x) -> Round(x))\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: YoungAgedAndBigBlue(x) -> Cold(x)\nTEXT: A kind person will certainly be young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: Eric is young.\nFOL: Young(erick)\n</EVALUATE>"
  ]
 },
 {
  "index": 166,
  "responses": [
   "<EVALUATE>\nTEXT: The bear eats the squirrel.\nFOL: Eats(bear, squirrel)\nTEXT: The bear is cold.\nFOL: Cold(bear)\nTEXT: The bear is nice.\nFOL: Nice(bear)\nTEXT: The bear needs the tiger.\nFOL: Needs(bear, tiger)\nTEXT: The squirrel chases the bear.\nFOL: Chases(squirrel, bear)\nTEXT: The squirrel is cold.\nFOL: Cold(squirrel)\nTEXT: The squirrel is young.\nFOL: Young(squirrel)\nTEXT: The squirrel needs the bear.\nFOL: Needs(squirrel, bear)\nTEXT: The tiger does not eat the bear.\nFOL: -Eats(tiger, bear)\nTEXT: The tiger is young.\nFOL: Young(tiger)\nTEXT: If the bear chases the tiger and the tiger does not eat the squirrel then the tiger chases the bear.\nFOL: (Chases(bear, tiger) & -Eats(tiger, squirrel)) -> Chases(tiger, bear)\nTEXT: If something eats the tiger then it chases the squirrel.\nFOL: all x. (Eats(x, tiger) -> Chases(x, squirrel))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (Needs(x, tiger) -> Eats(x, tiger))\nTEXT: All blue things are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: If something eats the squirrel then it is blue.\nFOL: all x. (Eats(x, squirrel) -> Blue(x))\nTEXT: If something eats the squirrel and the squirrel chases the bear then the squirrel needs the tiger.\nFOL: all x. ((Eats(x, squirrel) & Chases(squirrel, bear)) -> Needs(squirrel, tiger))\nTEXT: If the tiger chases the squirrel and the squirrel does not eat the tiger then the squirrel is not green.\nFOL: (Chases(tiger, squirrel) & -Eats(squirrel, tiger)) -> -Green(squirrel)\nTEXT: If something is nice and it does not chase the bear then it needs the squirrel.\nFOL: all x. ((Nice(x) & -Chases(x, bear)) -> Needs(x, squirrel))\nTEXT: The tiger is cold.\nFOL: Cold(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear eats the squirrel.\nFOL: Eats(bear, squirrel)\nTEXT: The bear is cold.\nFOL: Cold(bear)\nTEXT: The bear is nice.\nFOL: Nice(bear)\nTEXT: The bear needs the tiger.\nFOL: Needs(bear, tiger)\nTEXT: The squirrel chases the bear.\nFOL: Chases(squirrel, bear)\nTEXT: The squirrel is cold.\nFOL: Cold(squirrel)\nTEXT: The squirrel is young.\nFOL: Young(squirrel)\nTEXT: The squirrel needs the bear.\nFOL: Needs(squirrel, bear)\nTEXT: The tiger does not eat the bear.\nFOL: -Eats(tiger, bear)\nTEXT: The tiger is young.\nFOL: Young(tiger)\nTEXT: If the bear chases the tiger and the tiger does not eat the squirrel then the tiger chases the bear.\nFOL: (Chases(bear, tiger) & -Eats(tiger, squirrel)) -> Chases(tiger, bear)\nTEXT: If something eats the tiger then it chases the squirrel.\nFOL: all x. (Eats(x, tiger) -> Chases(x, squirrel))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (Needs(x, tiger) -> Eats(x, tiger))\nTEXT: All blue things are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: If something eats the squirrel then it is blue.\nFOL: all x. (Eats(x, squirrel) -> Blue(x))\nTEXT: If something eats the squirrel and the squirrel chases the bear then the squirrel needs the tiger.\nFOL: (Eats(x, squirrel) & Chases(squirrel, bear)) -> Needs(squirrel, tiger)\nTEXT: If the tiger chases the squirrel and the squirrel does not eat the tiger then the squirrel is not green.\nFOL: (Chases(tiger, squirrel) & -Eats(squirrel, tiger)) -> -Green(squirrel)\nTEXT: If something is nice and it does not chase the bear then it needs the squirrel.\nFOL: all x. ((Nice(x) & -Chases(x, bear)) -> Needs(x, squirrel))\nTEXT: The tiger is cold.\nFOL: Cold(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear eats the squirrel.\nFOL: Eats(bear, squirrel)\nTEXT: The bear is cold.\nFOL: Cold(bear)\nTEXT: The bear is nice.\nFOL: Nice(bear)\nTEXT: The bear needs the tiger.\nFOL: Needs(bear, tiger)\nTEXT: The squirrel chases the bear.\nFOL: Chases(squirrel, bear)\nTEXT: The squirrel is cold.\nFOL: Cold(squirrel)\nTEXT: The squirrel is young.\nFOL: Young(squirrel)\nTEXT: The squirrel needs the bear.\nFOL: Needs(squirrel, bear)\nTEXT: The tiger does not eat the bear.\nFOL: -Eats(tiger, bear)\nTEXT: The tiger is young.\nFOL: Young(tiger)\nTEXT: If the bear chases the tiger and the tiger does not eat the squirrel then the tiger chases the bear.\nFOL: (Chases(bear, tiger) & -Eats(tiger, squirrel)) -> Chases(tiger, bear)\nTEXT: If something eats the tiger then it chases the squirrel.\nFOL: all x. (Eats(x, tiger) -> Chases(x, squirrel))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (Needs(x, tiger) -> Eats(x, tiger))\nTEXT: All blue things are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: If something eats the squirrel then it is blue.\nFOL: all x. (Eats(x, squirrel) -> Blue(x))\nTEXT: If something eats the squirrel and the squirrel chases the bear then the squirrel needs the tiger.\nFOL: (Eats(x, squirrel) & Chases(squirrel, bear)) -> Needs(squirrel, tiger)\nTEXT: If the tiger chases the squirrel and the squirrel does not eat the tiger then the squirrel is not green.\nFOL: (Chases(tiger, squirrel) & -Eats(squirrel, tiger)) -> -Green(squirrel)\nTEXT: If something is nice and it does not chase the bear then it needs the squirrel.\nFOL: all x. (Nice(x) & -Chases(x, bear)) -> Needs(x, squirrel)\nTEXT: The tiger is cold.\nFOL: Cold(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear eats the squirrel.\nFOL: Eats(bear, squirrel)\nTEXT: The bear is cold.\nFOL: Cold(bear)\nTEXT: The bear is nice.\nFOL: Nice(bear)\nTEXT: The bear needs the tiger.\nFOL: Needs(bear, tiger)\nTEXT: The squirrel chases the bear.\nFOL: Chases(squirrel, bear)\nTEXT: The squirrel is cold.\nFOL: Cold(squirrel)\nTEXT: The squirrel is young.\nFOL: Young(squirrel)\nTEXT: The squirrel needs the bear.\nFOL: Needs(squirrel, bear)\nTEXT: The tiger does not eat the bear.\nFOL: -Eats(tiger, bear)\nTEXT: The tiger is young.\nFOL: Young(tiger)\nTEXT: If the bear chases the tiger and the tiger does not eat the squirrel then the tiger chases the bear.\nFOL: (Chases(bear, tiger) & -Eats(tiger, squirrel)) -> Chases(tiger, bear)\nTEXT: If something eats the tiger then it chases the squirrel.\nFOL: all x. (Eats(x, tiger) -> Chases(x, squirrel))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (Needs(x, tiger) -> Eats(x, tiger))\nTEXT: All blue things are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: If something eats the squirrel then it is blue.\nFOL: all x. (Eats(x, squirrel) -> Blue(x))\nTEXT: If something eats the squirrel and the squirrel chases the bear then the squirrel needs the tiger.\nFOL: all x. ((Eats(x, squirrel) & Chases(squirrel, bear)) -> Needs(squirrel, tiger))\nTEXT: If the tiger chases the squirrel and the squirrel does not eat the tiger then the squirrel is not green.\nFOL: (Chases(tiger, squirrel) & -Eats(squirrel, tiger)) -> -Green(squirrel)\nTEXT: If something is nice and it does not chase the bear then it needs the squirrel.\nFOL: all x. (Nice(x) & -Chases(x, bear) -> Needs(x, squirrel))\nTEXT: The tiger is cold.\nFOL: Cold(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear eats the squirrel.\nFOL: Eats(bear, squirrel)\nTEXT: The bear is cold.\nFOL: Cold(bear)\nTEXT: The bear is nice.\nFOL: Nice(bear)\nTEXT: The bear needs the tiger.\nFOL: Needs(bear, tiger)\nTEXT: The squirrel chases the bear.\nFOL: Chases(squirrel, bear)\nTEXT: The squirrel is cold.\nFOL: Cold(squirrel)\nTEXT: The squirrel is young.\nFOL: Young(squirrel)\nTEXT: The squirrel needs the bear.\nFOL: Needs(squirrel, bear)\nTEXT: The tiger does not eat the bear.\nFOL: -Eats(tiger, bear)\nTEXT: The tiger is young.\nFOL: Young(tiger)\nTEXT: If the bear chases the tiger and the tiger does not eat the squirrel then the tiger chases the bear.\nFOL: (Chases(bear, tiger) & -Eats(tiger, squirrel)) -> Chases(tiger, bear)\nTEXT: If something eats the tiger then it chases the squirrel.\nFOL: all x. (Eats(x, tiger) -> Chases(x, squirrel))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (Needs(x, tiger) -> Eats(x, tiger))\nTEXT: All blue things are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: If something eats the squirrel then it is blue.\nFOL: all x. (Eats(x, squirrel) -> Blue(x))\nTEXT: If something eats the squirrel and the squirrel chases the bear then the squirrel needs the tiger.\nFOL: all x. ((Eats(x, squirrel) & Chases(squirrel, bear)) -> Needs(squirrel, tiger))\nTEXT: If the tiger chases the squirrel and the squirrel does not eat the tiger then the squirrel is not green.\nFOL: all x. ((Chases(tiger, squirrel) & -Eats(squirrel, tiger)) -> -Green(x))\nTEXT: If something is nice and it does not chase the bear then it needs the squirrel.\nFOL: all x. ((Nice(x) & -Chases(x, bear)) -> Needs(x, squirrel))\nTEXT: The tiger is cold.\nFOL: Cold(tiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 167,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Bob is nice.\nFOL: Nice(bob)\nTEXT: Fiona is cold.\nFOL: Cold(fiona)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is not rough.\nFOL: -Rough(fiona)\nTEXT: Gary is blue.\nFOL: Blue(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Gary is nice.\nFOL: Nice(gary)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is cold.\nFOL: Cold(harry)\nTEXT: Harry is rough.\nFOL: Rough(harry)\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: If Gary is big and Gary is not kind then Gary is blue.\nFOL: (Big(gary) & -Kind(gary)) -> Blue(gary)\nTEXT: Big, cold things are red.\nFOL: all x. ((Big(x) & Cold(x)) -> Red(x))\nTEXT: All big things are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: All rough, blue things are nice.\nFOL: all x. ((Rough(x) & Blue(x)) -> Nice(x))\nTEXT: If something is nice and blue then it is rough.\nFOL: (Nice(x) & Blue(x)) -> Rough(x)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Bob is nice.\nFOL: Nice(bob)\nTEXT: Fiona is cold.\nFOL: Cold(fiona)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is not rough.\nFOL: -Rough(fiona)\nTEXT: Gary is blue.\nFOL: Blue(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Gary is nice.\nFOL: Nice(gary)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is cold.\nFOL: Cold(harry)\nTEXT: Harry is rough.\nFOL: Rough(harry)\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: If Gary is big and Gary is not kind then Gary is blue.\nFOL: (Big(gary) & -Kind(gary)) -> Blue(gary)\nTEXT: Big, cold things are red.\nFOL: all x. ((Big(x) & Cold(x)) -> Red(x))\nTEXT: All big things are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: All rough, blue things are nice.\nFOL: all x. ((Rough(x) & Blue(x)) -> Nice(x))\nTEXT: If something is nice and blue then it is rough.\nFOL: all x. ((Nice(x) & Blue(x)) -> Rough(x))\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Bob is nice.\nFOL: Nice(bob)\nTEXT: Fiona is cold.\nFOL: Cold(fiona)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is not rough.\nFOL: -Rough(fiona)\nTEXT: Gary is blue.\nFOL: Blue(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Gary is nice.\nFOL: Nice(gary)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is cold.\nFOL: Cold(harry)\nTEXT: Harry is rough.\nFOL: Rough(harry)\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: If Gary is big and Gary is not kind then Gary is blue.\nFOL: (Big(gary) & -Kind(gary) -> Blue(gary))\nTEXT: Big, cold things are red.\nFOL: all x. ((Big(x) & Cold(x)) -> Red(x))\nTEXT: All big things are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: All rough, blue things are nice.\nFOL: all x. ((Rough(x) & Blue(x)) -> Nice(x))\nTEXT: If something is nice and blue then it is rough.\nFOL: all x. ((Nice(x) & Blue(x)) -> Rough(x))\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Bob is nice.\nFOL: Nice(bob)\nTEXT: Fiona is cold.\nFOL: Cold(fiona)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is not rough.\nFOL: -Rough(fiona)\nTEXT: Gary is blue.\nFOL: Blue(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Gary is nice.\nFOL: Nice(gary)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is cold.\nFOL: Cold(harry)\nTEXT: Harry is rough.\nFOL: Rough(harry)\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: If Gary is big and Gary is not kind then Gary is blue.\nFOL: (Big(gary) & -Kind(gary) -> Blue(gary))\nTEXT: Big, cold things are red.\nFOL: all x. ((Big(x) & Cold(x)) -> Red(x))\nTEXT: All big things are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: All rough, blue things are nice.\nFOL: all x. ((Rough(x) & Blue(x)) -> Nice(x))\nTEXT: If something is nice and blue then it is rough.\nFOL: all x. (Nice(x) & Blue(x) -> Rough(x))\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Bob is nice.\nFOL: Nice(bob)\nTEXT: Fiona is cold.\nFOL: Cold(fiona)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is not rough.\nFOL: -Rough(fiona)\nTEXT: Gary is blue.\nFOL: Blue(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Gary is nice.\nFOL: Nice(gary)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is cold.\nFOL: Cold(harry)\nTEXT: Harry is rough.\nFOL: Rough(harry)\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: If Gary is big and Gary is not kind then Gary is blue.\nFOL: (Big(gary) & -Kind(gary)) -> Blue(gary)\nTEXT: Big, cold things are red.\nFOL: all x. ((Big(x) & Cold(x)) -> Red(x))\nTEXT: All big things are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: All rough, blue things are nice.\nFOL: all x. ((Rough(x) & Blue(x)) -> Nice(x))\nTEXT: If something is nice and blue then it is rough.\nFOL: all x. (Nice(x) & Blue(x) -> Rough(x))\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\n</EVALUATE>"
  ]
 },
 {
  "index": 168,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is red.\nFOL: Red(anne)\nTEXT: Anne is young.\nFOL: Young(anne)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\nTEXT: Fiona is smart.\nFOL: Smart(fiona)\nTEXT: Gary is cold.\nFOL: Cold(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: If someone is blue then they are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: If someone is nice then they are red.\nFOL: all x. (Nice(x) -> Red(x))\nTEXT: Nice, smart people are young.\nFOL: all x. ((Nice(x) & Smart(x)) -> Young(x))\nTEXT: All furry people are blue.\nFOL: all x. (Furry(x) -> Blue(x))\nTEXT: If someone is blue then they are red.\nFOL: all x. (Blue(x) -> Red(x))\nTEXT: If Fiona is cold then Fiona is smart.\nFOL: Cold(fiona) -> Smart(fiona)\nTEXT: If someone is furry then they are smart.\nFOL: all x. (Furry(x) -> Smart(x))\nTEXT: Red, furry people are smart.\nFOL: all x. ((Red(x) & Furry(x)) -> Smart(x))\nTEXT: Anne is not nice.\nFOL: -Nice(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is red.\nFOL: Red(anne)\nTEXT: Anne is young.\nFOL: Young(anne)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\nTEXT: Fiona is smart.\nFOL: Smart(fiona)\nTEXT: Gary is cold.\nFOL: Cold(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: If someone is blue then they are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: If someone is nice then they are red.\nFOL: all x. (Nice(x) -> Red(x))\nTEXT: Nice, smart people are young.\nFOL: all x. (Nice(x) & Smart(x) -> Young(x))\nTEXT: All furry people are blue.\nFOL: all x. (Furry(x) -> Blue(x))\nTEXT: If someone is blue then they are red.\nFOL: all x. (Blue(x) -> Red(x))\nTEXT: If Fiona is cold then Fiona is smart.\nFOL: Cold(fiona) -> Smart(fiona)\nTEXT: If someone is furry then they are smart.\nFOL: all x. (Furry(x) -> Smart(x))\nTEXT: Red, furry people are smart.\nFOL: all x. ((Red(x) & Furry(x)) -> Smart(x))\nTEXT: Anne is not nice.\nFOL: -Nice(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is red.\nFOL: Red(anne)\nTEXT: Anne is young.\nFOL: Young(anne)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\nTEXT: Fiona is smart.\nFOL: Smart(fiona)\nTEXT: Gary is cold.\nFOL: Cold(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: If someone is blue then they are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: If someone is nice then they are red.\nFOL: all x. (Nice(x) -> Red(x))\nTEXT: Nice, smart people are young.\nFOL: all x. (Nice(x) & Smart(x) -> Young(x))\nTEXT: All furry people are blue.\nFOL: all x. (Furry(x) -> Blue(x))\nTEXT: If someone is blue then they are red.\nFOL: all x. (Blue(x) -> Red(x))\nTEXT: If Fiona is cold then Fiona is smart.\nFOL: Cold(fiona) -> Smart(fiona)\nTEXT: If someone is furry then they are smart.\nFOL: all x. (Furry(x) -> Smart(x))\nTEXT: Red, furry people are smart.\nFOL: all x. (Red(x) & Furry(x) -> Smart(x))\nTEXT: Anne is not nice.\nFOL: -Nice(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is red.\nFOL: Red(anne)\nTEXT: Anne is young.\nFOL: Young(anne)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\nTEXT: Fiona is smart.\nFOL: Smart(fiona)\nTEXT: Gary is cold.\nFOL: Cold(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: If someone is blue then they are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: If someone is nice then they are red.\nFOL: all x. (Nice(x) -> Red(x))\nTEXT: Nice, smart people are young.\nFOL: all x. (Nice(x) & Smart(x) -> Young(x))\nTEXT: All furry people are blue.\nFOL: all x. (Furry(x) -> Blue(x))\nTEXT: If someone is blue then they are red.\nFOL: all x. (Blue(x) -> Red(x))\nTEXT: If Fiona is cold then Fiona is smart.\nFOL: Cold(fiona) -> Smart(fiona)\nTEXT: If someone is furry then they are smart.\nFOL: all x. (Furry(x) -> Smart(x))\nTEXT: Red, furry people are smart.\nFOL: all x. ((Red(x) & Furry(x)) -> Smart(x))\nTEXT: Anne is not nice.\nFOL: -Nice(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is red.\nFOL: Red(anne)\nTEXT: Anne is young.\nFOL: Young(anne)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\nTEXT: Fiona is smart.\nFOL: Smart(fiona)\nTEXT: Gary is cold.\nFOL: Cold(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: If someone is blue then they are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: If someone is nice then they are red.\nFOL: all x. (Nice(x) -> Red(x))\nTEXT: Nice, smart people are young.\nFOL: all x. ((Nice(x) & Smart(x)) -> Young(x))\nTEXT: All furry people are blue.\nFOL: all x. (Furry(x) -> Blue(x))\nTEXT: If someone is blue then they are red.\nFOL: all x. (Blue(x) -> Red(x))\nTEXT: If Fiona is cold then Fiona is smart.\nFOL: Cold(fiona) -> Smart(fiona)\nTEXT: If someone is furry then they are smart.\nFOL: all x. (Furry(x) -> Smart(x))\nTEXT: Red, furry people are smart.\nFOL: all x. ((Red(x) & Furry(x)) -> Smart(x))\nTEXT: Anne is not nice.\nFOL: -Nice(anne)\n</EVALUATE>"
  ]
 },
 {
  "index": 169,
  "responses": [
   "<EVALUATE>\nTEXT: Charlie is big.\nFOL: Big(charlie)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Fiona is not blue.\nFOL: -Blue(fiona)\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\nTEXT: Fiona is red.\nFOL: Red(fiona)\nTEXT: Fiona is not round.\nFOL: -Round(fiona)\nTEXT: Gary is not big.\nFOL: -Big(gary)\nTEXT: Gary is cold.\nFOL: Cold(gary)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is red.\nFOL: Red(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: Harry is young.\nFOL: Young(harry)\nTEXT: Blue things are young.\nFOL: all x. (Blue(x) -> Young(x))\nTEXT: If Gary is round and Gary is cold then Gary is not furry.\nFOL: (Round(gary) & Cold(gary)) -> -Furry(gary)\nTEXT: Young, cold things are furry.\nFOL: all x. ((Young(x) & Cold(x)) -> Furry(x))\nTEXT: All young things are furry.\nFOL: all x. (Young(x) -> Furry(x))\nTEXT: If something is furry and not young then it is red.\nFOL: all x. ((Furry(x) & -Young(x)) -> Red(x))\nTEXT: All furry things are red.\nFOL: all x. (Furry(x) -> Red(x))\nTEXT: Gary is not furry.\nFOL: -Furry(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is big.\nFOL: Big(charlie)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Fiona is not blue.\nFOL: -Blue(fiona)\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\nTEXT: Fiona is red.\nFOL: Red(fiona)\nTEXT: Fiona is not round.\nFOL: -Round(fiona)\nTEXT: Gary is not big.\nFOL: -Big(gary)\nTEXT: Gary is cold.\nFOL: Cold(gary)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is red.\nFOL: Red(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: Harry is young.\nFOL: Young(harry)\nTEXT: Blue things are young.\nFOL: all x. (Blue(x) -> Young(x))\nTEXT: If Gary is round and Gary is cold then Gary is not furry.\nFOL: (Round(gary) & Cold(gary) -> -Furry(gary))\nTEXT: Young, cold things are furry.\nFOL: all x. ((Young(x) & Cold(x)) -> Furry(x))\nTEXT: All young things are furry.\nFOL: all x. (Young(x) -> Furry(x))\nTEXT: If something is furry and not young then it is red.\nFOL: all x. ((Furry(x) & -Young(x)) -> Red(x))\nTEXT: All furry things are red.\nFOL: all x. (Furry(x) -> Red(x))\nTEXT: Gary is not furry.\nFOL: -Furry(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is big.\nFOL: Big(charlie)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Fiona is not blue.\nFOL: -Blue(fiona)\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\nTEXT: Fiona is red.\nFOL: Red(fiona)\nTEXT: Fiona is not round.\nFOL: -Round(fiona)\nTEXT: Gary is not big.\nFOL: -Big(gary)\nTEXT: Gary is cold.\nFOL: Cold(gary)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is red.\nFOL: Red(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: Harry is young.\nFOL: Young(harry)\nTEXT: Blue things are young.\nFOL: all x. (Blue(x) -> Young(x))\nTEXT: If Gary is round and Gary is cold then Gary is not furry.\nFOL: (Round(gary) & Cold(gary)) -> -Furry(gary)\nTEXT: Young, cold things are furry.\nFOL: all x. ((Young(x) & Cold(x)) -> Furry(x))\nTEXT: All young things are furry.\nFOL: all x. (Young(x) -> Furry(x))\nTEXT: If something is furry and not young then it is red.\nFOL: (Furry(x) & -Young(x)) -> Red(x)\nTEXT: All furry things are red.\nFOL: all x. (Furry(x) -> Red(x))\nTEXT: Gary is not furry.\nFOL: -Furry(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is big.\nFOL: Big(charlie)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Fiona is not blue.\nFOL: -Blue(fiona)\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\nTEXT: Fiona is red.\nFOL: Red(fiona)\nTEXT: Fiona is not round.\nFOL: -Round(fiona)\nTEXT: Gary is not big.\nFOL: -Big(gary)\nTEXT: Gary is cold.\nFOL: Cold(gary)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is red.\nFOL: Red(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: Harry is young.\nFOL: Young(harry)\nTEXT: Blue things are young.\nFOL: all x. (Blue(x) -> Young(x))\nTEXT: If Gary is round and Gary is cold then Gary is not furry.\nFOL: (Round(gary) & Cold(gary)) -> -Furry(gary)\nTEXT: Young, cold things are furry.\nFOL: all x. ((Young(x) & Cold(x)) -> Furry(x))\nTEXT: All young things are furry.\nFOL: all x. (Young(x) -> Furry(x))\nTEXT: If something is furry and not young then it is red.\nFOL: all x. (Furry(x) & -Young(x) -> Red(x))\nTEXT: All furry things are red.\nFOL: all x. (Furry(x) -> Red(x))\nTEXT: Gary is not furry.\nFOL: -Furry(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is big.\nFOL: Big(charlie)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Fiona is not blue.\nFOL: -Blue(fiona)\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\nTEXT: Fiona is red.\nFOL: Red(fiona)\nTEXT: Fiona is not round.\nFOL: -Round(fiona)\nTEXT: Gary is not big.\nFOL: -Big(gary)\nTEXT: Gary is cold.\nFOL: Cold(gary)\nTEXT: Harry is big.\nFOL: Big(harry)\nTEXT: Harry is red.\nFOL: Red(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: Harry is young.\nFOL: Young(harry)\nTEXT: Blue things are young.\nFOL: all x. (Blue(x) -> Young(x))\nTEXT: If Gary is round and Gary is cold then Gary is not furry.\nFOL: (Round(gary) & Cold(gary)) -> -Furry(gary)\nTEXT: Young, cold things are furry.\nFOL: all x. (Young(x) & Cold(x) -> Furry(x))\nTEXT: All young things are furry.\nFOL: all x. (Young(x) -> Furry(x))\nTEXT: If something is furry and not young then it is red.\nFOL: all x. ((Furry(x) & -Young(x)) -> Red(x))\nTEXT: All furry things are red.\nFOL: all x. (Furry(x) -> Red(x))\nTEXT: Gary is not furry.\nFOL: -Furry(gary)\n</EVALUATE>"
  ]
 },
 {
  "index": 170,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is big.\nFOL: Big(baldEagle)\nTEXT: The bear needs the cat.\nFOL: Needs(bear, cat)\nTEXT: The cat does not chase the bald eagle.\nFOL: -Chase(cat, baldEagle)\nTEXT: The lion is big.\nFOL: Big(lion)\nTEXT: If someone is kind then they do not eat the lion.\nFOL: all x. (Kind(x) -> -Eat(x, lion))\nTEXT: If the bald eagle is big then the bald eagle needs the lion.\nFOL: Big(baldEagle) -> Needs(baldEagle, lion)\nTEXT: If someone is rough and they chase the bear then they do not need the bear.\nFOL: all x. ((Rough(x) & Chase(x, bear)) -> -Needs(x, bear))\nTEXT: If someone needs the lion then the lion is kind.\nFOL: all x. (Needs(x, lion) -> Kind(lion))\nTEXT: If someone needs the bear then they chase the lion.\nFOL: all x. (Needs(x, bear) -> Chase(x, lion))\nTEXT: If someone chases the bear and they are kind then the bear chases the bald eagle.\nFOL: all x. ((Chase(x, bear) & Kind(x)) -> Chase(bear, baldEagle))\nTEXT: The bald eagle is rough.\nFOL: Rough(baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is big.\nFOL: Big(baldEagle)\nTEXT: The bear needs the cat.\nFOL: Needs(bear, cat)\nTEXT: The cat does not chase the bald eagle.\nFOL: -Chase(cat, baldEagle)\nTEXT: The lion is big.\nFOL: Big(lion)\nTEXT: If someone is kind then they do not eat the lion.\nFOL: all x. (Kind(x) -> -Eat(x, lion))\nTEXT: If the bald eagle is big then the bald eagle needs the lion.\nFOL: Big(baldEagle) -> Needs(baldEagle, lion)\nTEXT: If someone is rough and they chase the bear then they do not need the bear.\nFOL: all x. (Rough(x) & Chase(x, bear) -> -Needs(x, bear))\nTEXT: If someone needs the lion then the lion is kind.\nFOL: all x. (Needs(x, lion) -> Kind(lion))\nTEXT: If someone needs the bear then they chase the lion.\nFOL: all x. (Needs(x, bear) -> Chase(x, lion))\nTEXT: If someone chases the bear and they are kind then the bear chases the bald eagle.\nFOL: all x. ((Chase(x, bear) & Kind(x)) -> Chase(bear, baldEagle))\nTEXT: The bald eagle is rough.\nFOL: Rough(baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is big.\nFOL: Big(baldEagle)\nTEXT: The bear needs the cat.\nFOL: Needs(bear, cat)\nTEXT: The cat does not chase the bald eagle.\nFOL: -Chases(cat, baldEagle)\nTEXT: The lion is big.\nFOL: Big(lion)\nTEXT: If someone is kind then they do not eat the lion.\nFOL: all x. (Kind(x) -> -Eats(x, lion))\nTEXT: If the bald eagle is big then the bald eagle needs the lion.\nFOL: Big(baldEagle) -> Needs(baldEagle, lion)\nTEXT: If someone is rough and they chase the bear then they do not need the bear.\nFOL: all x. ((Rough(x) & Chases(x, bear)) -> -Needs(x, bear))\nTEXT: If someone needs the lion then the lion is kind.\nFOL: all x. (Needs(x, lion) -> Kind(lion))\nTEXT: If someone needs the bear then they chase the lion.\nFOL: all x. (Needs(x, bear) -> Chases(x, lion))\nTEXT: If someone chases the bear and they are kind then the bear chases the bald eagle.\nFOL: all x. ((Chases(x, bear) & Kind(x)) -> Chases(bear, baldEagle))\nTEXT: The bald eagle is rough.\nFOL: Rough(baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is big.\nFOL: Big(baldEagle)\nTEXT: The bear needs the cat.\nFOL: Needs(bear, cat)\nTEXT: The cat does not chase the bald eagle.\nFOL: -Chase(cat, baldEagle)\nTEXT: The lion is big.\nFOL: Big(lion)\nTEXT: If someone is kind then they do not eat the lion.\nFOL: all x. (Kind(x) -> -Eat(x, lion))\nTEXT: If the bald eagle is big then the bald eagle needs the lion.\nFOL: (Big(baldEagle) -> Needs(baldEagle, lion))\nTEXT: If someone is rough and they chase the bear then they do not need the bear.\nFOL: all x. ((Rough(x) & Chase(x, bear)) -> -Needs(x, bear))\nTEXT: If someone needs the lion then the lion is kind.\nFOL: all x. (Needs(x, lion) -> Kind(lion))\nTEXT: If someone needs the bear then they chase the lion.\nFOL: all x. (Needs(x, bear) -> Chase(x, lion))\nTEXT: If someone chases the bear and they are kind then the bear chases the bald eagle.\nFOL: all x. ((Chase(x, bear) & Kind(x)) -> Chase(bear, baldEagle))\nTEXT: The bald eagle is rough.\nFOL: Rough(baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is big.\nFOL: Big(baldEagle)\nTEXT: The bear needs the cat.\nFOL: Needs(bear, cat)\nTEXT: The cat does not chase the bald eagle.\nFOL: -Chases(cat, baldEagle)\nTEXT: The lion is big.\nFOL: Big(lion)\nTEXT: If someone is kind then they do not eat the lion.\nFOL: all x. (Kind(x) -> -Eats(x, lion))\nTEXT: If the bald eagle is big then the bald eagle needs the lion.\nFOL: Big(baldEagle) -> Needs(baldEagle, lion)\nTEXT: If someone is rough and they chase the bear then they do not need the bear.\nFOL: all x. (Rough(x) & Chases(x, bear) -> -Needs(x, bear))\nTEXT: If someone needs the lion then the lion is kind.\nFOL: all x. (Needs(x, lion) -> Kind(lion))\nTEXT: If someone needs the bear then they chase the lion.\nFOL: all x. (Needs(x, bear) -> Chases(x, lion))\nTEXT: If someone chases the bear and they are kind then the bear chases the bald eagle.\nFOL: all x. ((Chases(x, bear) & Kind(x)) -> Chases(bear, baldEagle))\nTEXT: The bald eagle is rough.\nFOL: Rough(baldEagle)\n</EVALUATE>"
  ]
 },
 {
  "index": 171,
  "responses": [
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Eats(cat, rabbit)\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\nTEXT: The tiger sees the cat.\nFOL: Sees(tiger, cat)\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: -Sees(tiger, rabbit) -> Round(tiger)\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: Needs(cat, tiger) -> Round(tiger)\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: all x. (Needs(x, cat) -> -Needs(x, tiger))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x. (Sees(x, tiger) -> Big(tiger))\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: Round(tiger) -> Needs(tiger, rabbit)\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: all x. (Eats(x, rabbit) -> Needs(x, tiger))\nTEXT: The tiger does not see the cat.\nFOL: -Sees(tiger, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Eats(cat, rabbit)\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\nTEXT: The tiger sees the cat.\nFOL: Sees(tiger, cat)\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: -Sees(tiger, rabbit) -> Round(tiger)\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: Needs(cat, tiger) -> Round(tiger)\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: all x. (Needs(x, cat) -> -Needs(cat, tiger))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x. (Sees(x, tiger) -> Big(tiger))\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: Round(tiger) -> Needs(tiger, rabbit)\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: all x. (Eats(x, rabbit) -> Needs(x, tiger))\nTEXT: The tiger does not see the cat.\nFOL: -Sees(tiger, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Eat(cat, rabbit)\nTEXT: The rabbit eats the tiger.\nFOL: Eat(rabbit, tiger)\nTEXT: The tiger sees the cat.\nFOL: See(tiger, cat)\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: -See(tiger, rabbit) -> Round(tiger)\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: Need(cat, tiger) -> Round(tiger)\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: all x. (Need(x, cat) -> -Need(x, tiger))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x. (See(x, tiger) -> Big(tiger))\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: Round(tiger) -> Need(tiger, rabbit)\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: all x. (Eat(x, rabbit) -> Need(x, tiger))\nTEXT: The tiger does not see the cat.\nFOL: -See(tiger, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Eats(cat, rabbit)\n\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\n\nTEXT: The tiger sees the cat.\nFOL: Sees(tiger, cat)\n\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: -Sees(tiger, rabbit) -> Round(tiger)\n\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: Needs(cat, tiger) -> Round(tiger)\n\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: all x. (Needs(x, cat) -> -Needs(x, tiger))\n\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x. (Sees(x, tiger) -> Big(tiger))\n\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: Round(tiger) -> Needs(tiger, rabbit)\n\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: all x. (Eats(x, rabbit) -> Needs(x, tiger))\n\nTEXT: The tiger does not see the cat.\nFOL: -Sees(tiger, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Eats(cat, rabbit)\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\nTEXT: The tiger sees the cat.\nFOL: Sees(tiger, cat)\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: -Sees(tiger, rabbit) -> IsRound(tiger)\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: Needs(cat, tiger) -> IsRound(tiger)\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: all x. (Needs(x, cat) -> -Needs(x, tiger))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x. (Sees(x, tiger) -> IsBig(tiger))\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: IsRound(tiger) -> Needs(tiger, rabbit)\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: all x. (Eats(x, rabbit) -> Needs(x, tiger))\nTEXT: The tiger does not see the cat.\nFOL: -Sees(tiger, cat)\n</EVALUATE>"
  ]
 },
 {
  "index": 172,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is cold.\nFOL: Cold(bob)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Erin is not furry.\nFOL: -Furry(erin)\nTEXT: Gary is not blue.\nFOL: -Blue(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Gary is nice.\nFOL: Nice(gary)\nTEXT: If something is big and red then it is furry.\nFOL: all x. (Big(x) & Red(x) -> Furry(x))\nTEXT: If something is cold then it is blue.\nFOL: all x. (Cold(x) -> Blue(x))\nTEXT: Blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Charlie is not blue.\nFOL: -Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is cold.\nFOL: Cold(bob)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Erin is not furry.\nFOL: -Furry(erin)\nTEXT: Gary is not blue.\nFOL: -Blue(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Gary is nice.\nFOL: Nice(gary)\nTEXT: If something is big and red then it is furry.\nFOL: all x. (Big(x) & Red(x) -> Furry(x))\nTEXT: If something is cold then it is blue.\nFOL: all x. (Cold(x) -> Blue(x))\nTEXT: Blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Charlie is not blue.\nFOL: -Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is cold.\nFOL: Cold(bob)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Erin is not furry.\nFOL: -Furry(erin)\nTEXT: Gary is not blue.\nFOL: -Blue(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Gary is nice.\nFOL: Nice(gary)\nTEXT: If something is big and red then it is furry.\nFOL: all x. ((Big(x) & Red(x)) -> Furry(x))\nTEXT: If something is cold then it is blue.\nFOL: all x. (Cold(x) -> Blue(x))\nTEXT: Blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Charlie is not blue.\nFOL: -Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is cold.\nFOL: Cold(bob)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Erin is not furry.\nFOL: -Furry(erin)\nTEXT: Gary is not blue.\nFOL: -Blue(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Gary is nice.\nFOL: Nice(gary)\nTEXT: If something is big and red then it is furry.\nFOL: all x. ((Big(x) & Red(x)) -> Furry(x))\nTEXT: If something is cold then it is blue.\nFOL: all x. (Cold(x) -> Blue(x))\nTEXT: Blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Charlie is not blue.\nFOL: -Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is cold.\nFOL: Cold(bob)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Erin is not furry.\nFOL: -Furry(erin)\nTEXT: Gary is not blue.\nFOL: -Blue(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Gary is nice.\nFOL: Nice(gary)\nTEXT: If something is big and red then it is furry.\nFOL: (Big(x) & Red(x)) -> Furry(x)\nTEXT: If something is cold then it is blue.\nFOL: Cold(x) -> Blue(x)\nTEXT: Blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Charlie is not blue.\nFOL: -Blue(charlie)\n</EVALUATE>"
  ]
 },
 {
  "index": 173,
  "responses": [
   "<EVALUATE>\nTEXT: Alan is a big guy who is colored red from a sunburn.\nFOL: Big(guy) & Red(guy) & Sunburn(guy)\nTEXT: He also has a cold.\nFOL: Cold(guy)\nTEXT: Eric seems to be round.\nFOL: Round(eric)\nTEXT: Gary was proud of being round, yet rough.\nFOL: Proud(gary, Round(gary)) & Rough(gary)\nTEXT: His red cheeks glowed.\nFOL: Red(cheeks) & Glowed(cheeks)\nTEXT: Harry seems big and rough, but he's actually quite kind.\nFOL: Big(harry) & Rough(harry) & Kind(harry)\nTEXT: Even though young people are rough, they are still very red.\nFOL: Young(x) & Rough(x) -> Red(x)\nTEXT: Anybody young person covered in blue and green will be kind.\nFOL: Young(x) & Blue(x) & Green(x) -> Kind(x)\nTEXT: Anyone who is both red and green must be as cold as Christmas.\nFOL: Red(x) & Green(x) -> Cold(x)\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: Rough(x) & Cold(x) & Green(x) -> Big(x)\nTEXT: Most young kind people tend to be red too.\nFOL: Most x. (Young(x) & Kind(x) -> Red(x))\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: Red(x) -> Green(x)\nTEXT: Gary is cold.\nFOL: Cold(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a big guy who is colored red from a sunburn.\nFOL: Big(guy) & Red(guy) & Sunburn(guy)\nTEXT: He also has a cold.\nFOL: Cold(guy)\nTEXT: Eric seems to be round.\nFOL: Round(eric)\nTEXT: Gary was proud of being round, yet rough.\nFOL: Proud(gary, Round(gary)) & Rough(gary)\nTEXT: His red cheeks glowed.\nFOL: Red(cheeks) & Glowed(cheeks)\nTEXT: Harry seems big and rough, but he's actually quite kind.\nFOL: Big(harry) & Rough(harry) & Kind(harry)\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) -> Rough(x)) & all x. (Young(x) -> Red(x))\nTEXT: Anybody young person covered in blue and green will be kind.\nFOL: all x. (Young(x) & Blue(x) & Green(x) -> Kind(x))\nTEXT: Anyone who is both red and green must be as cold as Christmas.\nFOL: all x. (Red(x) & Green(x) -> Cold(x))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) -> Big(x))\nTEXT: Most young kind people tend to be red too.\nFOL: most x. (Young(x) & Kind(x) -> Red(x))\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: all x. (Red(x) -> Green(x))\nTEXT: Gary is cold.\nFOL: Cold(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a big guy who is colored red from a sunburn.\nFOL: Big(guy) & Red(guy) & Sunburn(guy)\nTEXT: He also has a cold.\nFOL: Cold(guy)\nTEXT: Eric seems to be round.\nFOL: Round(eric)\nTEXT: Gary was proud of being round, yet rough.\nFOL: Proud(gary, Round(gary)) & Rough(gary)\nTEXT: His red cheeks glowed.\nFOL: Red(cheeks) & Glowed(cheeks)\nTEXT: Harry seems big and rough, but he's actually quite kind.\nFOL: Big(harry) & Rough(harry) & Kind(harry)\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) -> Rough(x)) & all x. (Young(x) -> Red(x))\nTEXT: Anybody young person covered in blue and green will be kind.\nFOL: all x. (Young(x) & Blue(x) & Green(x) -> Kind(x))\nTEXT: Anyone who is both red and green must be as cold as Christmas.\nFOL: all x. (Red(x) & Green(x) -> Cold(x))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. (Rough(x) & Cold(x) & Green(x) -> Big(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Kind(x) -> Red(x))\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: all x. (Red(x) -> Green(x))\nTEXT: Gary is cold.\nFOL: Cold(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a big guy who is colored red from a sunburn.\nFOL: Big(guy) & Red(guy) & Sunburn(guy)\nTEXT: He also has a cold.\nFOL: Cold(guy)\nTEXT: Eric seems to be round.\nFOL: Round(eric)\nTEXT: Gary was proud of being round, yet rough.\nFOL: Proud(gary, Round(gary)) & Rough(gary)\nTEXT: His red cheeks glowed.\nFOL: Red(cheeks) & Glowed(cheeks)\nTEXT: Harry seems big and rough, but he's actually quite kind.\nFOL: Big(harry) & Rough(harry) & Kind(harry)\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) -> Rough(x)) & all x. (Young(x) -> Red(x))\nTEXT: Anybody young person covered in blue and green will be kind.\nFOL: all x. (Young(x) & Blue(x) & Green(x) -> Kind(x))\nTEXT: Anyone who is both red and green must be as cold as Christmas.\nFOL: all x. (Red(x) & Green(x) -> Cold(x))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. ((Rough(x) & Cold(x) & Green(x)) -> Big(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Kind(x) -> Red(x))\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: all x. (Red(x) -> Green(x))\nTEXT: Gary is cold.\nFOL: Cold(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a big guy who is colored red from a sunburn.\nFOL: Big(alan) & ColoredRedFromSunburn(alan)\nTEXT: He also has a cold.\nFOL: Cold(alan)\nTEXT: Eric seems to be round.\nFOL: Round(eric)\nTEXT: Gary was proud of being round, yet rough.\nFOL: ProudOfBeingRound(gary) & Rough(gary)\nTEXT: His red cheeks glowed.\nFOL: RedCheeks(gary) & Glowed(gary)\nTEXT: Harry seems big and rough, but he's actually quite kind.\nFOL: Big(harry) & Rough(harry) & Kind(harry)\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) -> Rough(x)) & all x. (Young(x) -> Red(x))\nTEXT: Anybody young person covered in blue and green will be kind.\nFOL: all x. (Young(x) & CoveredInBlueAndGreen(x) -> Kind(x))\nTEXT: Anyone who is both red and green must be as cold as Christmas.\nFOL: all x. ((Red(x) & Green(x)) -> AsColdAsChristmas(x))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: all x. ((Rough(x) & Cold(x) & Green(x)) -> Big(x))\nTEXT: Most young kind people tend to be red too.\nFOL: most x. (Young(x) & Kind(x) -> Red(x))\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: all x. (ShowsRed(x) -> ShowsGreen(x))\nTEXT: Gary is cold.\nFOL: Cold(gary)\n</EVALUATE>"
  ]
 },
 {
  "index": 174,
  "responses": [
   "<EVALUATE>\nTEXT: The cow is big.\nFOL: Big(cow)\nTEXT: The cow is blue.\nFOL: Blue(cow)\nTEXT: The cow likes the squirrel.\nFOL: Likes(cow, squirrel)\nTEXT: The cow sees the lion.\nFOL: Sees(cow, lion)\nTEXT: The lion eats the cow.\nFOL: Eats(lion, cow)\nTEXT: The lion eats the squirrel.\nFOL: Eats(lion, squirrel)\nTEXT: The lion is big.\nFOL: Big(lion)\nTEXT: The lion is kind.\nFOL: Kind(lion)\nTEXT: The lion is nice.\nFOL: Nice(lion)\nTEXT: The squirrel eats the cow.\nFOL: Eats(squirrel, cow)\nTEXT: The squirrel is kind.\nFOL: Kind(squirrel)\nTEXT: The squirrel is nice.\nFOL: Nice(squirrel)\nTEXT: If someone likes the cow then they are red.\nFOL: all x. (Likes(x, cow) -> Red(x))\nTEXT: If someone is big then they like the squirrel.\nFOL: all x. (Big(x) -> Likes(x, squirrel))\nTEXT: The lion likes the squirrel.\nFOL: Likes(lion, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is big.\nFOL: Big(cow)\n\nTEXT: The cow is blue.\nFOL: Blue(cow)\n\nTEXT: The cow likes the squirrel.\nFOL: Likes(cow, squirrel)\n\nTEXT: The cow sees the lion.\nFOL: Sees(cow, lion)\n\nTEXT: The lion eats the cow.\nFOL: Eats(lion, cow)\n\nTEXT: The lion eats the squirrel.\nFOL: Eats(lion, squirrel)\n\nTEXT: The lion is big.\nFOL: Big(lion)\n\nTEXT: The lion is kind.\nFOL: Kind(lion)\n\nTEXT: The lion is nice.\nFOL: Nice(lion)\n\nTEXT: The squirrel eats the cow.\nFOL: Eats(squirrel, cow)\n\nTEXT: The squirrel is kind.\nFOL: Kind(squirrel)\n\nTEXT: The squirrel is nice.\nFOL: Nice(squirrel)\n\nTEXT: If someone likes the cow then they are red.\nFOL: all x. (Likes(x, cow) -> Red(x))\n\nTEXT: If someone is big then they like the squirrel.\nFOL: all x. (Big(x) -> Likes(x, squirrel))\n\nTEXT: The lion likes the squirrel.\nFOL: Likes(lion, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is big.\nFOL: Big(cow)\nTEXT: The cow is blue.\nFOL: Blue(cow)\nTEXT: The cow likes the squirrel.\nFOL: likes(cow, squirrel)\nTEXT: The cow sees the lion.\nFOL: sees(cow, lion)\nTEXT: The lion eats the cow.\nFOL: eats(lion, cow)\nTEXT: The lion eats the squirrel.\nFOL: eats(lion, squirrel)\nTEXT: The lion is big.\nFOL: Big(lion)\nTEXT: The lion is kind.\nFOL: kind(lion)\nTEXT: The lion is nice.\nFOL: nice(lion)\nTEXT: The squirrel eats the cow.\nFOL: eats(squirrel, cow)\nTEXT: The squirrel is kind.\nFOL: kind(squirrel)\nTEXT: The squirrel is nice.\nFOL: nice(squirrel)\nTEXT: If someone likes the cow then they are red.\nFOL: all x. (likes(x, cow) -> Red(x))\nTEXT: If someone is big then they like the squirrel.\nFOL: all x. (Big(x) -> likes(x, squirrel))\nTEXT: The lion likes the squirrel.\nFOL: likes(lion, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is big.\nFOL: Big(cow)\nTEXT: The cow is blue.\nFOL: Blue(cow)\nTEXT: The cow likes the squirrel.\nFOL: likes(cow, squirrel)\nTEXT: The cow sees the lion.\nFOL: sees(cow, lion)\nTEXT: The lion eats the cow.\nFOL: eats(lion, cow)\nTEXT: The lion eats the squirrel.\nFOL: eats(lion, squirrel)\nTEXT: The lion is big.\nFOL: Big(lion)\nTEXT: The lion is kind.\nFOL: Kind(lion)\nTEXT: The lion is nice.\nFOL: Nice(lion)\nTEXT: The squirrel eats the cow.\nFOL: eats(squirrel, cow)\nTEXT: The squirrel is kind.\nFOL: Kind(squirrel)\nTEXT: The squirrel is nice.\nFOL: Nice(squirrel)\nTEXT: If someone likes the cow then they are red.\nFOL: all x. (likes(x, cow) -> Red(x))\nTEXT: If someone is big then they like the squirrel.\nFOL: all x. (Big(x) -> likes(x, squirrel))\nTEXT: The lion likes the squirrel.\nFOL: likes(lion, squirrel)\n</EVALUATE>",
   "<EVALUATE>\n\nTEXT: The cow is big.\nFOL: Big(cow)\n\nTEXT: The cow is blue.\nFOL: Blue(cow)\n\nTEXT: The cow likes the squirrel.\nFOL: Likes(cow, squirrel)\n\nTEXT: The cow sees the lion.\nFOL: Sees(cow, lion)\n\nTEXT: The lion eats the cow.\nFOL: Eats(lion, cow)\n\nTEXT: The lion eats the squirrel.\nFOL: Eats(lion, squirrel)\n\nTEXT: The lion is big.\nFOL: Big(lion)\n\nTEXT: The lion is kind.\nFOL: Kind(lion)\n\nTEXT: The lion is nice.\nFOL: Nice(lion)\n\nTEXT: The squirrel eats the cow.\nFOL: Eats(squirrel, cow)\n\nTEXT: The squirrel is kind.\nFOL: Kind(squirrel)\n\nTEXT: The squirrel is nice.\nFOL: Nice(squirrel)\n\nTEXT: If someone likes the cow then they are red.\nFOL: all x. (Likes(x, cow) -> Red(x))\n\nTEXT: If someone is big then they like the squirrel.\nFOL: all x. (Big(x) -> Likes(x, squirrel))\n\nTEXT: The lion likes the squirrel.\nFOL: Likes(lion, squirrel)\n\n</EVALUATE>"
  ]
 },
 {
  "index": 175,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Bob is nice.\nFOL: Nice(bob)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: Harry is not smart.\nFOL: -Smart(harry)\nTEXT: Furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nTEXT: Red, quiet things are young.\nFOL: all x. ((Red(x) & Quiet(x)) -> Young(x))\nTEXT: All cold, nice things are furry.\nFOL: all x. ((Cold(x) & Nice(x)) -> Furry(x))\nTEXT: Red things are furry.\nFOL: all x. (Red(x) -> Furry(x))\nTEXT: If something is quiet and cold then it is furry.\nFOL: all x. ((Quiet(x) & Cold(x)) -> Furry(x))\nTEXT: If something is red then it is smart.\nFOL: all x. (Red(x) -> Smart(x))\nTEXT: Erin is cold.\nFOL: Cold(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Bob is nice.\nFOL: Nice(bob)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: Harry is not smart.\nFOL: -Smart(harry)\nTEXT: Furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nTEXT: Red, quiet things are young.\nFOL: all x. ((Red(x) & Quiet(x)) -> Young(x))\nTEXT: All cold, nice things are furry.\nFOL: all x. ((Cold(x) & Nice(x)) -> Furry(x))\nTEXT: Red things are furry.\nFOL: all x. (Red(x) -> Furry(x))\nTEXT: If something is quiet and cold then it is furry.\nFOL: all x. ((Quiet(x) & Cold(x)) -> Furry(x))\nTEXT: If something is red then it is smart.\nFOL: all x. (Red(x) -> Smart(x))\nTEXT: Erin is cold.\nFOL: Cold(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Bob is nice.\nFOL: Nice(bob)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: Harry is not smart.\nFOL: -Smart(harry)\nTEXT: Furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nTEXT: Red, quiet things are young.\nFOL: all x. (Red(x) & Quiet(x) -> Young(x))\nTEXT: All cold, nice things are furry.\nFOL: all x. ((Cold(x) & Nice(x)) -> Furry(x))\nTEXT: Red things are furry.\nFOL: all x. (Red(x) -> Furry(x))\nTEXT: If something is quiet and cold then it is furry.\nFOL: all x. ((Quiet(x) & Cold(x)) -> Furry(x))\nTEXT: If something is red then it is smart.\nFOL: all x. (Red(x) -> Smart(x))\nTEXT: Erin is cold.\nFOL: Cold(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Bob is nice.\nFOL: Nice(bob)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: Harry is not smart.\nFOL: -Smart(harry)\nTEXT: Furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nTEXT: Red, quiet things are young.\nFOL: all x. (Red(x) & Quiet(x) -> Young(x))\nTEXT: All cold, nice things are furry.\nFOL: all x. ((Cold(x) & Nice(x)) -> Furry(x))\nTEXT: Red things are furry.\nFOL: all x. (Red(x) -> Furry(x))\nTEXT: If something is quiet and cold then it is furry.\nFOL: all x. ((Quiet(x) & Cold(x)) -> Furry(x))\nTEXT: If something is red then it is smart.\nFOL: all x. (Red(x) -> Smart(x))\nTEXT: Erin is cold.\nFOL: Cold(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Bob is nice.\nFOL: Nice(bob)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: Harry is not smart.\nFOL: -Smart(harry)\nTEXT: Furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nTEXT: Red, quiet things are young.\nFOL: all x. (Red(x) & Quiet(x) -> Young(x))\nTEXT: All cold, nice things are furry.\nFOL: all x. ((Cold(x) & Nice(x)) -> Furry(x))\nTEXT: Red things are furry.\nFOL: all x. (Red(x) -> Furry(x))\nTEXT: If something is quiet and cold then it is furry.\nFOL: all x. (Quiet(x) & Cold(x) -> Furry(x))\nTEXT: If something is red then it is smart.\nFOL: all x. (Red(x) -> Smart(x))\nTEXT: Erin is cold.\nFOL: Cold(erin)\n</EVALUATE>"
  ]
 },
 {
  "index": 176,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Anne is white.\nFOL: White(anne)\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: All round, red people are cold.\nFOL: all x. (Round(x) & Red(x) -> Cold(x))\nTEXT: White, round people are cold.\nFOL: all x. (White(x) & Round(x) -> Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x. (Nice(x) & Round(x) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x. (Smart(x) & Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: Round(anne) -> Cold(anne)\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Fiona is big.\nFOL: Big(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Anne is white.\nFOL: White(anne)\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: All round, red people are cold.\nFOL: all x. (Round(x) & Red(x) -> Cold(x))\nTEXT: White, round people are cold.\nFOL: all x. (White(x) & Round(x) -> Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x. (Nice(x) & Round(x) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x. (Smart(x) & Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: (Round(anne) -> Cold(anne))\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Fiona is big.\nFOL: Big(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Anne is white.\nFOL: White(anne)\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: All round, red people are cold.\nFOL: all x. (Round(x) & Red(x) -> Cold(x))\nTEXT: White, round people are cold.\nFOL: all x. (White(x) & Round(x) -> Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x. ((Nice(x) & Round(x)) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x. (Smart(x) & Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: (Round(anne) -> Cold(anne))\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Fiona is big.\nFOL: Big(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Anne is white.\nFOL: White(anne)\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: All round, red people are cold.\nFOL: all x. (Round(x) & Red(x) -> Cold(x))\nTEXT: White, round people are cold.\nFOL: all x. (White(x) & Round(x) -> Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x. ((Nice(x) & Round(x)) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x. (Smart(x) & Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: Round(anne) -> Cold(anne)\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Fiona is big.\nFOL: Big(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Anne is white.\nFOL: White(anne)\nTEXT: Bob is big.\nFOL: Big(bob)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: All round, red people are cold.\nFOL: all x. (Round(x) & Red(x) -> Cold(x))\nTEXT: White, round people are cold.\nFOL: all x. (White(x) & Round(x) -> Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x. (Nice(x) & Round(x) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x. (Smart(x) & Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: Round(anne) -> Cold(anne)\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Fiona is big.\nFOL: Big(fiona)\n</EVALUATE>"
  ]
 },
 {
  "index": 177,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle eats the squirrel.\nFOL: Eats(baldEagle, squirrel)\nTEXT: The squirrel eats the bald eagle.\nFOL: Eats(squirrel, baldEagle)\nTEXT: The squirrel is kind.\nFOL: Kind(squirrel)\nTEXT: If someone sees the squirrel then the squirrel eats the bald eagle.\nFOL: all x. (Sees(x, squirrel) -> Eats(squirrel, baldEagle))\nTEXT: If someone needs the bald eagle then the bald eagle does not see the squirrel.\nFOL: all x. (Needs(x, baldEagle) -> -Sees(baldEagle, squirrel))\nTEXT: If someone needs the bald eagle and they do not eat the squirrel then they need the squirrel.\nFOL: all x. ((Needs(x, baldEagle) & -Eats(x, squirrel)) -> Needs(x, squirrel))\nTEXT: If the bald eagle eats the squirrel then the squirrel does not see the bald eagle.\nFOL: Eats(baldEagle, squirrel) -> -Sees(squirrel, baldEagle)\nTEXT: If someone eats the squirrel then they need the bald eagle.\nFOL: all x. (Eats(x, squirrel) -> Needs(x, baldEagle))\nTEXT: If someone needs the bald eagle and the bald eagle does not see the squirrel then the bald eagle is nice.\nFOL: all x. ((Needs(x, baldEagle) & -Sees(baldEagle, squirrel)) -> Nice(baldEagle))\nTEXT: The bald eagle is nice.\nFOL: Nice(baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the squirrel.\nFOL: Eats(baldEagle, squirrel)\nTEXT: The squirrel eats the bald eagle.\nFOL: Eats(squirrel, baldEagle)\nTEXT: The squirrel is kind.\nFOL: Kind(squirrel)\nTEXT: If someone sees the squirrel then the squirrel eats the bald eagle.\nFOL: all x. (Sees(x, squirrel) -> Eats(squirrel, baldEagle))\nTEXT: If someone needs the bald eagle then the bald eagle does not see the squirrel.\nFOL: all x. (Needs(x, baldEagle) -> -Sees(baldEagle, squirrel))\nTEXT: If someone needs the bald eagle and they do not eat the squirrel then they need the squirrel.\nFOL: all x. ((Needs(x, baldEagle) & -Eats(x, squirrel)) -> Needs(x, squirrel))\nTEXT: If the bald eagle eats the squirrel then the squirrel does not see the bald eagle.\nFOL: (Eats(baldEagle, squirrel) -> -Sees(squirrel, baldEagle))\nTEXT: If someone eats the squirrel then they need the bald eagle.\nFOL: all x. (Eats(x, squirrel) -> Needs(x, baldEagle))\nTEXT: If someone needs the bald eagle and the bald eagle does not see the squirrel then the bald eagle is nice.\nFOL: all x. ((Needs(x, baldEagle) & -Sees(baldEagle, squirrel)) -> Nice(baldEagle))\nTEXT: The bald eagle is nice.\nFOL: Nice(baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the squirrel.\nFOL: Eat(baldEagle, squirrel)\nTEXT: The squirrel eats the bald eagle.\nFOL: Eat(squirrel, baldEagle)\nTEXT: The squirrel is kind.\nFOL: Kind(squirrel)\nTEXT: If someone sees the squirrel then the squirrel eats the bald eagle.\nFOL: all x. (See(x, squirrel) -> Eat(squirrel, baldEagle))\nTEXT: If someone needs the bald eagle then the bald eagle does not see the squirrel.\nFOL: all x. (Need(x, baldEagle) -> -See(baldEagle, squirrel))\nTEXT: If someone needs the bald eagle and they do not eat the squirrel then they need the squirrel.\nFOL: all x. ((Need(x, baldEagle) & -Eat(x, squirrel)) -> Need(x, squirrel))\nTEXT: If the bald eagle eats the squirrel then the squirrel does not see the bald eagle.\nFOL: Eat(baldEagle, squirrel) -> -See(squirrel, baldEagle)\nTEXT: If someone eats the squirrel then they need the bald eagle.\nFOL: all x. (Eat(x, squirrel) -> Need(x, baldEagle))\nTEXT: If someone needs the bald eagle and the bald eagle does not see the squirrel then the bald eagle is nice.\nFOL: all x. ((Need(x, baldEagle) & -See(baldEagle, squirrel)) -> Nice(baldEagle))\nTEXT: The bald eagle is nice.\nFOL: Nice(baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the squirrel.\nFOL: Eat(baldEagle, squirrel)\nTEXT: The squirrel eats the bald eagle.\nFOL: Eat(squirrel, baldEagle)\nTEXT: The squirrel is kind.\nFOL: Kind(squirrel)\nTEXT: If someone sees the squirrel then the squirrel eats the bald eagle.\nFOL: all x. (See(x, squirrel) -> Eat(squirrel, baldEagle))\nTEXT: If someone needs the bald eagle then the bald eagle does not see the squirrel.\nFOL: all x. (Need(x, baldEagle) -> -See(baldEagle, squirrel))\nTEXT: If someone needs the bald eagle and they do not eat the squirrel then they need the squirrel.\nFOL: all x. ((Need(x, baldEagle) & -Eat(x, squirrel)) -> Need(x, squirrel))\nTEXT: If the bald eagle eats the squirrel then the squirrel does not see the bald eagle.\nFOL: (Eat(baldEagle, squirrel) -> -See(squirrel, baldEagle))\nTEXT: If someone eats the squirrel then they need the bald eagle.\nFOL: all x. (Eat(x, squirrel) -> Need(x, baldEagle))\nTEXT: If someone needs the bald eagle and the bald eagle does not see the squirrel then the bald eagle is nice.\nFOL: all x. ((Need(x, baldEagle) & -See(baldEagle, squirrel)) -> Nice(baldEagle))\nTEXT: The bald eagle is nice.\nFOL: Nice(baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the squirrel.\nFOL: Eats(baldEagle, squirrel)\nTEXT: The squirrel eats the bald eagle.\nFOL: Eats(squirrel, baldEagle)\nTEXT: The squirrel is kind.\nFOL: Kind(squirrel)\nTEXT: If someone sees the squirrel then the squirrel eats the bald eagle.\nFOL: all x. (Sees(x, squirrel) -> Eats(squirrel, baldEagle))\nTEXT: If someone needs the bald eagle then the bald eagle does not see the squirrel.\nFOL: all x. (Needs(x, baldEagle) -> -Sees(baldEagle, squirrel))\nTEXT: If someone needs the bald eagle and they do not eat the squirrel then they need the squirrel.\nFOL: all x. (Needs(x, baldEagle) & -Eats(x, squirrel) -> Needs(x, squirrel))\nTEXT: If the bald eagle eats the squirrel then the squirrel does not see the bald eagle.\nFOL: Eats(baldEagle, squirrel) -> -Sees(squirrel, baldEagle)\nTEXT: If someone eats the squirrel then they need the bald eagle.\nFOL: all x. (Eats(x, squirrel) -> Needs(x, baldEagle))\nTEXT: If someone needs the bald eagle and the bald eagle does not see the squirrel then the bald eagle is nice.\nFOL: all x. (Needs(x, baldEagle) & -Sees(baldEagle, squirrel) -> Nice(baldEagle))\nTEXT: The bald eagle is nice.\nFOL: Nice(baldEagle)\n</EVALUATE>"
  ]
 },
 {
  "index": 178,
  "responses": [
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Young(x) & Cold(x) -> Charlie(x))\nTEXT: Dave is nice and kind,though he's also rather cold.\nFOL: Nice(dave) & Kind(dave) & Cold(dave)\nTEXT: Look, we know Gary is young and rough.\nFOL: Young(gary) & Rough(gary)\nTEXT: We have to accept he's also red, nice, cold, and blue.\nFOL: Red(gary) & Nice(gary) & Cold(gary) & Blue(gary)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & (Nice(x) | Red(x)))\nTEXT: A blue, cold natured person will be rough textured.\nFOL: all x. (Blue(x) & Cold(x) -> Rough(x))\nTEXT: People of young age are rough and cold but some are nice.\nFOL: all x. (Young(x) -> (Rough(x) & Cold(x))) & exists x. (Young(x) & Nice(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Young(x) & RedHands(x) -> Rough(x))\nTEXT: People who are young are also blue.\nFOL: all x. (Young(x) -> Blue(x))\nTEXT: Gary is green.\nFOL: Green(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Young(x) & Cold(x) -> Charlie(x))\nTEXT: Dave is nice and kind,though he's also rather cold.\nFOL: Nice(dave) & Kind(dave) & Cold(dave)\nTEXT: Look, we know Gary is young and rough.\nFOL: Young(gary) & Rough(gary)\nTEXT: We have to accept he's also red, nice, cold, and blue.\nFOL: Red(gary) & Nice(gary) & Cold(gary) & Blue(gary)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & (Nice(x) | Red(x)))\nTEXT: A blue, cold natured person will be rough textured.\nFOL: all x. (Blue(x) & Cold(x) -> Rough(x))\nTEXT: People of young age are rough and cold but some are nice.\nFOL: all x. (Young(x) -> (Rough(x) & Cold(x))) & exists x. (Young(x) & Nice(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Young(x) & Red(x) -> Rough(x))\nTEXT: People who are young are also blue.\nFOL: all x. (Young(x) -> Blue(x))\nTEXT: Gary is green.\nFOL: Green(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: Young(charlie) & Cold(charlie)\nTEXT: Dave is nice and kind,though he's also rather cold.\nFOL: Nice(dave) & Kind(dave) & Cold(dave)\nTEXT: Look, we know Gary is young and rough.\nFOL: Young(gary) & Rough(gary)\nTEXT: We have to accept he's also red, nice, cold, and blue.\nFOL: Red(gary) & Nice(gary) & Cold(gary) & Blue(gary)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & (Nice(x) | Red(x)))\nTEXT: A blue, cold natured person will be rough textured.\nFOL: all x. (Blue(x) & Cold(x) -> Rough(x))\nTEXT: People of young age are rough and cold but some are nice.\nFOL: all x. (Young(x) -> (Rough(x) & Cold(x))) & exists x. (Young(x) & Nice(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Young(x) & RedHands(x) -> Rough(x))\nTEXT: People who are young are also blue.\nFOL: all x. (Young(x) -> Blue(x))\nTEXT: Gary is green.\nFOL: Green(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: all x. (Young(x) & Cold(x) -> Charlie(x))\nTEXT: Dave is nice and kind, though he's also rather cold.\nFOL: Nice(dave) & Kind(dave) & Cold(dave)\nTEXT: Look, we know Gary is young and rough.\nFOL: Young(gary) & Rough(gary)\nTEXT: We have to accept he's also red, nice, cold, and blue.\nFOL: Red(gary) & Nice(gary) & Cold(gary) & Blue(gary)\nTEXT: Some cold people can be nice at times, and red at at other times.\nFOL: exists x. (Cold(x) & (Nice(x) | Red(x)))\nTEXT: A blue, cold natured person will be rough textured.\nFOL: all x. (Blue(x) & Cold(x) -> Rough(x))\nTEXT: People of young age are rough and cold but some are nice.\nFOL: all x. (Young(x) -> (Rough(x) & Cold(x))) & exists x. (Young(x) & Nice(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: all x. (Young(x) & RedHands(x) -> Rough(x))\nTEXT: People who are young are also blue.\nFOL: all x. (Young(x) -> Blue(x))\nTEXT: Gary is green.\nFOL: Green(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(alan)\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: Young(charlie) & Cold(charlie)\nTEXT: Dave is nice and kind,though he's also rather cold.\nFOL: Nice(dave) & Kind(dave) & Cold(dave)\nTEXT: Look, we know Gary is young and rough.\nFOL: Young(gary) & Rough(gary)\nTEXT: We have to accept he's also red, nice, cold, and blue.\nFOL: Red(gary) & Nice(gary) & Cold(gary) & Blue(gary)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & (Nice(x) | Red(x)))\nTEXT: A blue, cold natured person will be rough textured.\nFOL: Blue(x) & Cold(x) -> Rough(x)\nTEXT: People of young age are rough and cold but some are nice.\nFOL: all x. (Young(x) -> (Rough(x) & Cold(x))) & exists x. (Young(x) & Nice(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: Young(x) & RedHands(x) -> Rough(x)\nTEXT: People who are young are also blue.\nFOL: all x. (Young(x) -> Blue(x))\nTEXT: Gary is green.\nFOL: Green(gary)\n</EVALUATE>"
  ]
 },
 {
  "index": 179,
  "responses": [
   "<EVALUATE>\nTEXT: Bob may be round, but he is also kind.\nFOL: (Round(bob) & -Kind(bob)) | Kind(bob)\nTEXT: Charlie may be round, but he is also kind.\nFOL: (Round(charlie) & -Kind(charlie)) | Kind(charlie)\nTEXT: Dave may be round, but he is also kind.\nFOL: (Round(dave) & -Kind(dave)) | Kind(dave)\nTEXT: Eric is green and cold too.\nFOL: Green(erick) & Cold(erick)\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) -> Rough(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> exists y. Green(y))\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: all x. (Rough(x) & Kind(x) -> Cold(x))\nTEXT: A kind person will certainly be rough as well.\nFOL: all x. (Kind(x) -> Rough(x))\nTEXT: Nice people who feel blue often look green when ill.\nFOL: all x. (Nice(x) & Blue(x) -> Green(x))\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: (Cold(x) & Round(x)) -> Red(x)\nTEXT: Dave is kind.\nFOL: Kind(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob may be round, but he is also kind.\nFOL: (Round(bob) & -Kind(bob)) | Kind(bob)\nTEXT: Charlie may be round, but he is also kind.\nFOL: (Round(charlie) & -Kind(charlie)) | Kind(charlie)\nTEXT: Dave may be round, but he is also kind.\nFOL: (Round(dave) & -Kind(dave)) | Kind(dave)\nTEXT: Eric is green and cold too.\nFOL: Green(erick) & Cold(erick)\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) -> Rough(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> exists y. Green(y))\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: all x. (Rough(x) & Kind(x) -> Cold(x))\nTEXT: A kind person will certainly be rough as well.\nFOL: Kind(x) -> Rough(x)\nTEXT: Nice people who feel blue often look green when ill.\nFOL: all x. (Nice(x) & Blue(x) -> Green(x))\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: (Cold(x) & Round(x)) -> Red(x)\nTEXT: Dave is kind.\nFOL: Kind(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob may be round, but he is also kind.\nFOL: (Round(bob) & -Kind(bob)) | Kind(bob)\nTEXT: Charlie may be round, but he is also kind.\nFOL: (Round(charlie) & -Kind(charlie)) | Kind(charlie)\nTEXT: Dave may be round, but he is also kind.\nFOL: (Round(dave) & -Kind(dave)) | Kind(dave)\nTEXT: Eric is green and cold too.\nFOL: Green(erick) & Cold(erick)\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) -> Rough(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> exists y. Green(y))\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: all x. ((Rough(x) & Kind(x)) -> Cold(x))\nTEXT: A kind person will certainly be rough as well.\nFOL: all x. (Kind(x) -> Rough(x))\nTEXT: Nice people who feel blue often look green when ill.\nFOL: all x. (Nice(x) & Blue(x) -> Green(x))\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: (Cold(x) & Round(x)) -> Red(x)\nTEXT: Dave is kind.\nFOL: Kind(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob may be round, but he is also kind.\nFOL: (Round(bob) & -Kind(bob)) | Kind(bob)\nTEXT: Charlie may be round, but he is also kind.\nFOL: (Round(charlie) & -Kind(charlie)) | Kind(charlie)\nTEXT: Dave may be round, but he is also kind.\nFOL: (Round(dave) & -Kind(dave)) | Kind(dave)\nTEXT: Eric is green and cold too.\nFOL: Green(erick) & Cold(erick)\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) -> Rough(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> exists y. Green(y) & Area(y, x))\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: all x. (Rough(x) & Kind(x) -> Cold(x))\nTEXT: A kind person will certainly be rough as well.\nFOL: all x. (Kind(x) -> Rough(x))\nTEXT: Nice people who feel blue often look green when ill.\nFOL: all x. (Nice(x) & Blue(x) -> Green(x) & Ill(x))\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: (Cold(x) & Round(x)) -> Red(x)\nTEXT: Dave is kind.\nFOL: Kind(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob may be round, but he is also kind.\nFOL: (Round(bob) & -Kind(bob)) | Kind(bob)\nTEXT: Charlie may be round, but he is also kind.\nFOL: (Round(charlie) & -Kind(charlie)) | Kind(charlie)\nTEXT: Dave may be round, but he is also kind.\nFOL: (Round(dave) & -Kind(dave)) | Kind(dave)\nTEXT: Eric is green and cold too.\nFOL: Green(erick) & Cold(erick)\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) -> Rough(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> exists y. Green(y))\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: all x. (Rough(x) & Kind(x) -> Cold(x))\nTEXT: A kind person will certainly be rough as well.\nFOL: all x. (Kind(x) -> Rough(x))\nTEXT: Nice people who feel blue often look green when ill.\nFOL: all x. (Nice(x) & Blue(x) -> Green(x))\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: all x. (Cold(x) & Round(x) -> Red(x))\nTEXT: Dave is kind.\nFOL: Kind(dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 180,
  "responses": [
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Eats(cat, rabbit)\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\nTEXT: The tiger sees the cat.\nFOL: Sees(tiger, cat)\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: -Sees(tiger, rabbit) -> Round(tiger)\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: Needs(cat, tiger) -> Round(tiger)\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: all x. (Needs(x, cat) -> -Needs(x, tiger))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x. (Sees(x, tiger) -> Big(tiger))\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: Round(tiger) -> Needs(tiger, rabbit)\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: all x. (Eats(x, rabbit) -> Needs(x, tiger))\nTEXT: The tiger is not round.\nFOL: -Round(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Eats(cat, rabbit)\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\nTEXT: The tiger sees the cat.\nFOL: Sees(tiger, cat)\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: -Sees(tiger, rabbit) -> Round(tiger)\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: Needs(cat, tiger) -> Round(tiger)\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: all x. (Needs(x, cat) -> -Needs(cat, tiger))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x. (Sees(x, tiger) -> Big(tiger))\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: Round(tiger) -> Needs(tiger, rabbit)\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: all x. (Eats(x, rabbit) -> Needs(x, tiger))\nTEXT: The tiger is not round.\nFOL: -Round(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Eat(cat, rabbit)\nTEXT: The rabbit eats the tiger.\nFOL: Eat(rabbit, tiger)\nTEXT: The tiger sees the cat.\nFOL: See(tiger, cat)\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: -See(tiger, rabbit) -> Round(tiger)\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: Need(cat, tiger) -> Round(tiger)\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: all x. (Need(x, cat) -> -Need(x, tiger))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x. (See(x, tiger) -> Big(tiger))\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: Round(tiger) -> Need(tiger, rabbit)\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: all x. (Eat(x, rabbit) -> Need(x, tiger))\nTEXT: The tiger is not round.\nFOL: -Round(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Eats(cat, rabbit)\n\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\n\nTEXT: The tiger sees the cat.\nFOL: Sees(tiger, cat)\n\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: -Sees(tiger, rabbit) -> Round(tiger)\n\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: Needs(cat, tiger) -> Round(tiger)\n\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: all x. (Needs(x, cat) -> -Needs(x, tiger))\n\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x. (Sees(x, tiger) -> Big(tiger))\n\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: Round(tiger) -> Needs(tiger, rabbit)\n\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: all x. (Eats(x, rabbit) -> Needs(x, tiger))\n\nTEXT: The tiger is not round.\nFOL: -Round(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Eats(cat, rabbit)\nTEXT: The rabbit eats the tiger.\nFOL: Eats(rabbit, tiger)\nTEXT: The tiger sees the cat.\nFOL: Sees(tiger, cat)\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: -Sees(tiger, rabbit) -> Round(tiger)\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: Needs(cat, tiger) -> Round(tiger)\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: Needs(x, cat) -> -Needs(x, tiger)\nTEXT: If something sees the tiger then the tiger is big.\nFOL: Sees(x, tiger) -> Big(tiger)\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: Round(tiger) -> Needs(tiger, rabbit)\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: Eats(x, rabbit) -> Needs(x, tiger)\nTEXT: The tiger is not round.\nFOL: -Round(tiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 181,
  "responses": [
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: Cold(cow)\nTEXT: The dog is cold.\nFOL: Cold(dog)\nTEXT: The dog likes the cow.\nFOL: Likes(dog, cow)\nTEXT: If someone is big and nice then they need the dog.\nFOL: all x. (Big(x) & Nice(x) -> Needs(x, dog))\nTEXT: If someone chases the cow then the cow does not need the dog.\nFOL: all x. (Chases(x, cow) -> -Needs(cow, dog))\nTEXT: If the cow needs the dog and the dog likes the cow then the cow chases the dog.\nFOL: (Needs(cow, dog) & Likes(dog, cow)) -> Chases(cow, dog)\nTEXT: If someone likes the cow then they do not chase the cow.\nFOL: all x. (Likes(x, cow) -> -Chases(x, cow))\nTEXT: If someone chases the dog and they are not green then they are nice.\nFOL: all x. (Chases(x, dog) & -Green(x) -> Nice(x))\nTEXT: If someone needs the cow then the cow is not young.\nFOL: all x. (Needs(x, cow) -> -Young(cow))\nTEXT: If the dog does not chase the cow then the cow likes the dog.\nFOL: -Chases(dog, cow) -> Likes(cow, dog)\nTEXT: If someone likes the dog then the dog needs the cow.\nFOL: all x. (Likes(x, dog) -> Needs(dog, cow))\nTEXT: The cow is big.\nFOL: Big(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: Cold(cow)\nTEXT: The dog is cold.\nFOL: Cold(dog)\nTEXT: The dog likes the cow.\nFOL: Likes(dog, cow)\nTEXT: If someone is big and nice then they need the dog.\nFOL: all x. (Big(x) & Nice(x) -> Need(x, dog))\nTEXT: If someone chases the cow then the cow does not need the dog.\nFOL: all x. (Chases(x, cow) -> -Need(cow, dog))\nTEXT: If the cow needs the dog and the dog likes the cow then the cow chases the dog.\nFOL: (Need(cow, dog) & Likes(dog, cow)) -> Chases(cow, dog)\nTEXT: If someone likes the cow then they do not chase the cow.\nFOL: all x. (Likes(x, cow) -> -Chases(x, cow))\nTEXT: If someone chases the dog and they are not green then they are nice.\nFOL: all x. (Chases(x, dog) & -Green(x) -> Nice(x))\nTEXT: If someone needs the cow then the cow is not young.\nFOL: all x. (Need(x, cow) -> -Young(cow))\nTEXT: If the dog does not chase the cow then the cow likes the dog.\nFOL: -Chases(dog, cow) -> Likes(cow, dog)\nTEXT: If someone likes the dog then the dog needs the cow.\nFOL: all x. (Likes(x, dog) -> Need(dog, cow))\nTEXT: The cow is big.\nFOL: Big(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: Cold(cow)\nTEXT: The dog is cold.\nFOL: Cold(dog)\nTEXT: The dog likes the cow.\nFOL: Likes(dog, cow)\nTEXT: If someone is big and nice then they need the dog.\nFOL: all x. (Big(x) & Nice(x) -> Needs(x, dog))\nTEXT: If someone chases the cow then the cow does not need the dog.\nFOL: all x. (Chases(x, cow) -> -Needs(cow, dog))\nTEXT: If the cow needs the dog and the dog likes the cow then the cow chases the dog.\nFOL: (Needs(cow, dog) & Likes(dog, cow)) -> Chases(cow, dog)\nTEXT: If someone likes the cow then they do not chase the cow.\nFOL: all x. (Likes(x, cow) -> -Chases(x, cow))\nTEXT: If someone chases the dog and they are not green then they are nice.\nFOL: all x. ((Chases(x, dog) & -Green(x)) -> Nice(x))\nTEXT: If someone needs the cow then the cow is not young.\nFOL: all x. (Needs(x, cow) -> -Young(cow))\nTEXT: If the dog does not chase the cow then the cow likes the dog.\nFOL: -Chases(dog, cow) -> Likes(cow, dog)\nTEXT: If someone likes the dog then the dog needs the cow.\nFOL: all x. (Likes(x, dog) -> Needs(dog, cow))\nTEXT: The cow is big.\nFOL: Big(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: Cold(cow)\nTEXT: The dog is cold.\nFOL: Cold(dog)\nTEXT: The dog likes the cow.\nFOL: Likes(dog, cow)\nTEXT: If someone is big and nice then they need the dog.\nFOL: all x. (Big(x) & Nice(x) -> Needs(x, dog))\nTEXT: If someone chases the cow then the cow does not need the dog.\nFOL: all x. (Chases(x, cow) -> -Needs(cow, dog))\nTEXT: If the cow needs the dog and the dog likes the cow then the cow chases the dog.\nFOL: Needs(cow, dog) & Likes(dog, cow) -> Chases(cow, dog)\nTEXT: If someone likes the cow then they do not chase the cow.\nFOL: all x. (Likes(x, cow) -> -Chases(x, cow))\nTEXT: If someone chases the dog and they are not green then they are nice.\nFOL: all x. (Chases(x, dog) & -Green(x) -> Nice(x))\nTEXT: If someone needs the cow then the cow is not young.\nFOL: all x. (Needs(x, cow) -> -Young(cow))\nTEXT: If the dog does not chase the cow then the cow likes the dog.\nFOL: -Chases(dog, cow) -> Likes(cow, dog)\nTEXT: If someone likes the dog then the dog needs the cow.\nFOL: all x. (Likes(x, dog) -> Needs(dog, cow))\nTEXT: The cow is big.\nFOL: Big(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: Cold(cow)\nTEXT: The dog is cold.\nFOL: Cold(dog)\nTEXT: The dog likes the cow.\nFOL: Likes(dog, cow)\nTEXT: If someone is big and nice then they need the dog.\nFOL: all x. (Big(x) & Nice(x) -> Need(x, dog))\nTEXT: If someone chases the cow then the cow does not need the dog.\nFOL: all x. (Chase(x, cow) -> -Need(cow, dog))\nTEXT: If the cow needs the dog and the dog likes the cow then the cow chases the dog.\nFOL: (Need(cow, dog) & Likes(dog, cow)) -> Chase(cow, dog)\nTEXT: If someone likes the cow then they do not chase the cow.\nFOL: all x. (Likes(x, cow) -> -Chase(x, cow))\nTEXT: If someone chases the dog and they are not green then they are nice.\nFOL: all x. (Chase(x, dog) & -Green(x) -> Nice(x))\nTEXT: If someone needs the cow then the cow is not young.\nFOL: all x. (Need(x, cow) -> -Young(cow))\nTEXT: If the dog does not chase the cow then the cow likes the dog.\nFOL: -Chase(dog, cow) -> Likes(cow, dog)\nTEXT: If someone likes the dog then the dog needs the cow.\nFOL: all x. (Likes(x, dog) -> Need(dog, cow))\nTEXT: The cow is big.\nFOL: Big(cow)\n</EVALUATE>"
  ]
 }
]