[
 {
  "index": 0,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Dave(big)\nTEXT: Dave is green.\nFOL: Dave(green)\nTEXT: Dave is red.\nFOL: Dave(red)\nTEXT: Dave is rough.\nFOL: Dave(rough)\nTEXT: Dave is smart.\nFOL: Dave(smart)\nTEXT: Dave is young.\nFOL: Dave(young)\nTEXT: Erin is big.\nFOL: Erin(big)\nTEXT: Erin is green.\nFOL: Erin(green)\nTEXT: Erin is rough.\nFOL: Erin(rough)\nTEXT: Erin is smart.\nFOL: Erin(smart)\nTEXT: Erin is young.\nFOL: Erin(young)\nTEXT: Harry is big.\nFOL: Harry(big)\nTEXT: Harry is green.\nFOL: Harry(green)\nTEXT: Harry is nice.\nFOL: Harry(nice)\nTEXT: Harry is rough.\nFOL: Harry(rough)\nTEXT: Smart people are young.\nFOL: all x. (Smart(x) -> Young(x))\nTEXT: If Erin is red then Erin is big.\nFOL: Erin(red) -> Erin(big)\nTEXT: If Harry is red then Harry is smart.\nFOL: Harry(red) -> Harry(smart)\nTEXT: If Harry is green then Harry is red.\nFOL: Harry(green) -> Harry(red)\nTEXT: Red people are green.\nFOL: all x. (Red(x) -> Green(x))\nTEXT: Young people are big.\nFOL: all x. (Young(x) -> Big(x))\nTEXT: Erin is nice.\nFOL: Erin(nice)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Dave(big)\n\nTEXT: Dave is green.\nFOL: Dave(green)\n\nTEXT: Dave is red.\nFOL: Dave(red)\n\nTEXT: Dave is rough.\nFOL: Dave(rough)\n\nTEXT: Dave is smart.\nFOL: Dave(smart)\n\nTEXT: Dave is young.\nFOL: Dave(young)\n\nTEXT: Erin is big.\nFOL: Erin(big)\n\nTEXT: Erin is green.\nFOL: Erin(green)\n\nTEXT: Erin is rough.\nFOL: Erin(rough)\n\nTEXT: Erin is smart.\nFOL: Erin(smart)\n\nTEXT: Erin is young.\nFOL: Erin(young)\n\nTEXT: Harry is big.\nFOL: Harry(big)\n\nTEXT: Harry is green.\nFOL: Harry(green)\n\nTEXT: Harry is nice.\nFOL: Harry(nice)\n\nTEXT: Harry is rough.\nFOL: Harry(rough)\n\nTEXT: Smart people are young.\nFOL: all x. (Smart(x) -> Young(x))\n\nTEXT: If Erin is red then Erin is big.\nFOL: Erin(red) -> Erin(big)\n\nTEXT: If Harry is red then Harry is smart.\nFOL: Harry(red) -> Harry(smart)\n\nTEXT: If Harry is green then Harry is red.\nFOL: Harry(green) -> Harry(red)\n\nTEXT: Red people are green.\nFOL: all x. (Red(x) -> Green(x))\n\nTEXT: Young people are big.\nFOL: all x. (Young(x) -> Big(x))\n\nTEXT: Erin is nice.\nFOL: Erin(nice)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Dave(big)\nTEXT: Dave is green.\nFOL: Dave(green)\nTEXT: Dave is red.\nFOL: Dave(red)\nTEXT: Dave is rough.\nFOL: Dave(rough)\nTEXT: Dave is smart.\nFOL: Dave(smart)\nTEXT: Dave is young.\nFOL: Dave(young)\nTEXT: Erin is big.\nFOL: Erin(big)\nTEXT: Erin is green.\nFOL: Erin(green)\nTEXT: Erin is rough.\nFOL: Erin(rough)\nTEXT: Erin is smart.\nFOL: Erin(smart)\nTEXT: Erin is young.\nFOL: Erin(young)\nTEXT: Harry is big.\nFOL: Harry(big)\nTEXT: Harry is green.\nFOL: Harry(green)\nTEXT: Harry is nice.\nFOL: Harry(nice)\nTEXT: Harry is rough.\nFOL: Harry(rough)\nTEXT: Smart people are young.\nFOL: all x. (Smart(x) -> Young(x))\nTEXT: If Erin is red then Erin is big.\nFOL: Erin(red) -> Erin(big)\nTEXT: If Harry is red then Harry is smart.\nFOL: Harry(red) -> Harry(smart)\nTEXT: If Harry is green then Harry is red.\nFOL: Harry(green) -> Harry(red)\nTEXT: Red people are green.\nFOL: all x. (Red(x) -> Green(x))\nTEXT: Young people are big.\nFOL: all x. (Young(x) -> Big(x))\nTEXT: Erin is nice.\nFOL: Erin(nice)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Dave(big)\n\nTEXT: Dave is green.\nFOL: Dave(green)\n\nTEXT: Dave is red.\nFOL: Dave(red)\n\nTEXT: Dave is rough.\nFOL: Dave(rough)\n\nTEXT: Dave is smart.\nFOL: Dave(smart)\n\nTEXT: Dave is young.\nFOL: Dave(young)\n\nTEXT: Erin is big.\nFOL: Erin(big)\n\nTEXT: Erin is green.\nFOL: Erin(green)\n\nTEXT: Erin is rough.\nFOL: Erin(rough)\n\nTEXT: Erin is smart.\nFOL: Erin(smart)\n\nTEXT: Erin is young.\nFOL: Erin(young)\n\nTEXT: Harry is big.\nFOL: Harry(big)\n\nTEXT: Harry is green.\nFOL: Harry(green)\n\nTEXT: Harry is nice.\nFOL: Harry(nice)\n\nTEXT: Harry is rough.\nFOL: Harry(rough)\n\nTEXT: Smart people are young.\nFOL: all x. (Smart(x) -> Young(x))\n\nTEXT: If Erin is red then Erin is big.\nFOL: Erin(red) -> Erin(big)\n\nTEXT: If Harry is red then Harry is smart.\nFOL: Harry(red) -> Harry(smart)\n\nTEXT: If Harry is green then Harry is red.\nFOL: Harry(green) -> Harry(red)\n\nTEXT: Red people are green.\nFOL: all x. (Red(x) -> Green(x))\n\nTEXT: Young people are big.\nFOL: all x. (Young(x) -> Big(x))\n\nTEXT: Erin is nice.\nFOL: Erin(nice)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Dave(Big)\nTEXT: Dave is green.\nFOL: Dave(Green)\nTEXT: Dave is red.\nFOL: Dave(Red)\nTEXT: Dave is rough.\nFOL: Dave(Rough)\nTEXT: Dave is smart.\nFOL: Dave(Smart)\nTEXT: Dave is young.\nFOL: Dave(Young)\nTEXT: Erin is big.\nFOL: Erin(Big)\nTEXT: Erin is green.\nFOL: Erin(Green)\nTEXT: Erin is rough.\nFOL: Erin(Rough)\nTEXT: Erin is smart.\nFOL: Erin(Smart)\nTEXT: Erin is young.\nFOL: Erin(Young)\nTEXT: Harry is big.\nFOL: Harry(Big)\nTEXT: Harry is green.\nFOL: Harry(Green)\nTEXT: Harry is nice.\nFOL: Harry(Nice)\nTEXT: Harry is rough.\nFOL: Harry(Rough)\nTEXT: Smart people are young.\nFOL: all x. (Smart(x) -> Young(x))\nTEXT: If Erin is red then Erin is big.\nFOL: Erin(Red) -> Erin(Big)\nTEXT: If Harry is red then Harry is smart.\nFOL: Harry(Red) -> Harry(Smart)\nTEXT: If Harry is green then Harry is red.\nFOL: Harry(Green) -> Harry(Red)\nTEXT: Red people are green.\nFOL: all x. (Red(x) -> Green(x))\nTEXT: Young people are big.\nFOL: all x. (Young(x) -> Big(x))\nTEXT: Erin is nice.\nFOL: Erin(Nice)\n</EVALUATE>"
  ]
 },
 {
  "index": 1,
  "responses": [
   "<EVALUATE>\nTEXT: The cat is cold.\nFOL: Cold(cat)\nTEXT: The cat is rough.\nFOL: Rough(cat)\nTEXT: The cat likes the dog.\nFOL: Likes(cat, dog)\nTEXT: The cow is round.\nFOL: Round(cow)\nTEXT: The cow visits the cat.\nFOL: Visits(cow, cat)\nTEXT: The dog is big.\nFOL: Big(dog)\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The dog is rough.\nFOL: Rough(dog)\nTEXT: The dog likes the cat.\nFOL: Likes(dog, cat)\nTEXT: The dog likes the cow.\nFOL: Likes(dog, cow)\nTEXT: The dog likes the rabbit.\nFOL: Likes(dog, rabbit)\nTEXT: The rabbit is big.\nFOL: Big(rabbit)\nTEXT: The rabbit likes the cow.\nFOL: Likes(rabbit, cow)\nTEXT: The rabbit needs the cat.\nFOL: Needs(rabbit, cat)\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\nTEXT: The rabbit visits the dog.\nFOL: Visits(rabbit, dog)\nTEXT: If someone is cold then they like the cow.\nFOL: all x. (Cold(x) -> Likes(x, cow))\nTEXT: If someone visits the rabbit and the rabbit needs the cow then the cow needs the rabbit.\nFOL: all x. (Visits(x, rabbit) & Needs(rabbit, cow) -> Needs(cow, x))\nTEXT: If someone likes the cat then they need the cow.\nFOL: all x. (Likes(x, cat) -> Needs(x, cow))\nTEXT: If someone needs the cow and the cow likes the cat then the cat visits the dog.\nFOL: all x. (Needs(x, cow) & Likes(cow, cat) -> Visits(cat, dog))\nTEXT: If someone likes the rabbit and the rabbit visits the dog then they like the dog.\nFOL: all x. (Likes(x, rabbit) & Visits(rabbit, dog) -> Likes(x, dog))\nTEXT: If the rabbit likes the dog and the rabbit needs the cat then the dog visits the rabbit.\nFOL: Likes(rabbit, dog) & Needs(rabbit, cat) -> Visits(dog, rabbit)\nTEXT: If someone likes the rabbit and they are round then the rabbit needs the dog.\nFOL: all x. (Likes(x, rabbit) & Round(x) -> Needs(rabbit, dog))\nTEXT: If someone visits the cat and the cat likes the cow then they like the cat.\nFOL: all x. (Visits(x, cat) & Likes(cat, cow) -> Likes(x, cat))\nTEXT: The dog needs the rabbit.\nFOL: Needs(dog, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is cold.\nFOL: Cold(Cat)\nTEXT: The cat is rough.\nFOL: Rough(Cat)\nTEXT: The cat likes the dog.\nFOL: Likes(Cat, Dog)\nTEXT: The cow is round.\nFOL: Round(Cow)\nTEXT: The cow visits the cat.\nFOL: Visits(Cow, Cat)\nTEXT: The dog is big.\nFOL: Big(Dog)\nTEXT: The dog is green.\nFOL: Green(Dog)\nTEXT: The dog is rough.\nFOL: Rough(Dog)\nTEXT: The dog likes the cat.\nFOL: Likes(Dog, Cat)\nTEXT: The dog likes the cow.\nFOL: Likes(Dog, Cow)\nTEXT: The dog likes the rabbit.\nFOL: Likes(Dog, Rabbit)\nTEXT: The rabbit is big.\nFOL: Big(Rabbit)\nTEXT: The rabbit likes the cow.\nFOL: Likes(Rabbit, Cow)\nTEXT: The rabbit needs the cat.\nFOL: Needs(Rabbit, Cat)\nTEXT: The rabbit visits the cat.\nFOL: Visits(Rabbit, Cat)\nTEXT: The rabbit visits the dog.\nFOL: Visits(Rabbit, Dog)\nTEXT: If someone is cold then they like the cow.\nFOL: all x. (Cold(x) -> Likes(x, Cow))\nTEXT: If someone visits the rabbit and the rabbit needs the cow then the cow needs the rabbit.\nFOL: all x y. (Visits(x, Rabbit) & Needs(Rabbit, Cow) & Needs(Cow, x) -> Needs(x, Rabbit))\nTEXT: If someone likes the cat then they need the cow.\nFOL: all x. (Likes(x, Cat) -> Needs(x, Cow))\nTEXT: If someone needs the cow and the cow likes the cat then the cat visits the dog.\nFOL: all x. (Needs(x, Cow) & Likes(Cow, Cat) -> Visits(Cat, Dog))\nTEXT: If someone likes the rabbit and the rabbit visits the dog then they like the dog.\nFOL: all x y. (Likes(x, Rabbit) & Visits(Rabbit, Dog) -> Likes(x, Dog))\nTEXT: If the rabbit likes the dog and the rabbit needs the cat then the dog visits the rabbit.\nFOL: all x y. (Likes(Rabbit, Dog) & Needs(Rabbit, Cat) -> Visits(Dog, Rabbit))\nTEXT: If someone likes the rabbit and they are round then the rabbit needs the dog.\nFOL: all x. (Likes(x, Rabbit) & Round(x) -> Needs(x, Dog))\nTEXT: If someone visits the cat and the cat likes the cow then they like the cat.\nFOL: all x y. (Visits(x, Cat) & Likes(Cat, Cow) -> Likes(x, Cat))\nTEXT: The dog needs the rabbit.\nFOL: Needs(Dog, Rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is cold.\nFOL: Cold(cat)\nTEXT: The cat is rough.\nFOL: Rough(cat)\nTEXT: The cat likes the dog.\nFOL: Likes(cat, dog)\nTEXT: The cow is round.\nFOL: Round(cow)\nTEXT: The cow visits the cat.\nFOL: Visits(cow, cat)\nTEXT: The dog is big.\nFOL: Big(dog)\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The dog is rough.\nFOL: Rough(dog)\nTEXT: The dog likes the cat.\nFOL: Likes(dog, cat)\nTEXT: The dog likes the cow.\nFOL: Likes(dog, cow)\nTEXT: The dog likes the rabbit.\nFOL: Likes(dog, rabbit)\nTEXT: The rabbit is big.\nFOL: Big(rabbit)\nTEXT: The rabbit likes the cow.\nFOL: Likes(rabbit, cow)\nTEXT: The rabbit needs the cat.\nFOL: Needs(rabbit, cat)\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\nTEXT: The rabbit visits the dog.\nFOL: Visits(rabbit, dog)\nTEXT: If someone is cold then they like the cow.\nFOL: all x. (Cold(x) -> Likes(x, cow))\nTEXT: If someone visits the rabbit and the rabbit needs the cow then the cow needs the rabbit.\nFOL: all x. (Visits(x, rabbit) & Needs(rabbit, cow) -> Needs(cow, x))\nTEXT: If someone likes the cat then they need the cow.\nFOL: all x. (Likes(x, cat) -> Needs(x, cow))\nTEXT: If someone needs the cow and the cow likes the cat then the cat visits the dog.\nFOL: all x. (Needs(x, cow) & Likes(cow, cat) -> Visits(cat, dog))\nTEXT: If someone likes the rabbit and the rabbit visits the dog then they like the dog.\nFOL: all x. (Likes(x, rabbit) & Visits(rabbit, dog) -> Likes(x, dog))\nTEXT: If the rabbit likes the dog and the rabbit needs the cat then the dog visits the rabbit.\nFOL: (Likes(rabbit, dog) & Needs(rabbit, cat) -> Visits(dog, rabbit))\nTEXT: If someone likes the rabbit and they are round then the rabbit needs the dog.\nFOL: all x. (Likes(x, rabbit) & Round(x) -> Needs(rabbit, dog))\nTEXT: If someone visits the cat and the cat likes the cow then they like the cat.\nFOL: all x. (Visits(x, cat) & Likes(cat, cow) -> Likes(x, cat))\nTEXT: The dog needs the rabbit.\nFOL: Needs(dog, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is cold.\nFOL: Cold(cat)\nTEXT: The cat is rough.\nFOL: Rough(cat)\nTEXT: The cat likes the dog.\nFOL: Likes(cat, dog)\nTEXT: The cow is round.\nFOL: Round(cow)\nTEXT: The cow visits the cat.\nFOL: Visits(cow, cat)\nTEXT: The dog is big.\nFOL: Big(dog)\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The dog is rough.\nFOL: Rough(dog)\nTEXT: The dog likes the cat.\nFOL: Likes(dog, cat)\nTEXT: The dog likes the cow.\nFOL: Likes(dog, cow)\nTEXT: The dog likes the rabbit.\nFOL: Likes(dog, rabbit)\nTEXT: The rabbit is big.\nFOL: Big(rabbit)\nTEXT: The rabbit likes the cow.\nFOL: Likes(rabbit, cow)\nTEXT: The rabbit needs the cat.\nFOL: Needs(rabbit, cat)\nTEXT: The rabbit visits the cat.\nFOL: Visits(rabbit, cat)\nTEXT: The rabbit visits the dog.\nFOL: Visits(rabbit, dog)\nTEXT: If someone is cold then they like the cow.\nFOL: all x. (Cold(x) -> Likes(x, cow))\nTEXT: If someone visits the rabbit and the rabbit needs the cow then the cow needs the rabbit.\nFOL: all x. (Visits(x, rabbit) & Needs(rabbit, cow) -> Needs(cow, x))\nTEXT: If someone likes the cat then they need the cow.\nFOL: all x. (Likes(x, cat) -> Needs(x, cow))\nTEXT: If someone needs the cow and the cow likes the cat then the cat visits the dog.\nFOL: all x. (Needs(x, cow) & Likes(cow, cat) -> Visits(cat, dog))\nTEXT: If someone likes the rabbit and the rabbit visits the dog then they like the dog.\nFOL: all x. (Likes(x, rabbit) & Visits(rabbit, dog) -> Likes(x, dog))\nTEXT: If the rabbit likes the dog and the rabbit needs the cat then the dog visits the rabbit.\nFOL: Likes(rabbit, dog) & Needs(rabbit, cat) -> Visits(dog, rabbit)\nTEXT: If someone likes the rabbit and they are round then the rabbit needs the dog.\nFOL: all x. (Likes(x, rabbit) & Round(x) -> Needs(dog, x))\nTEXT: If someone visits the cat and the cat likes the cow then they like the cat.\nFOL: all x. (Visits(x, cat) & Likes(cat, cow) -> Likes(x, cat))\nTEXT: The dog needs the rabbit.\nFOL: Needs(dog, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is cold.\nFOL: Cold(Cat)\nTEXT: The cat is rough.\nFOL: Rough(Cat)\nTEXT: The cat likes the dog.\nFOL: Likes(Cat, Dog)\nTEXT: The cow is round.\nFOL: Round(Cow)\nTEXT: The cow visits the cat.\nFOL: Visits(Cow, Cat)\nTEXT: The dog is big.\nFOL: Big(Dog)\nTEXT: The dog is green.\nFOL: Green(Dog)\nTEXT: The dog is rough.\nFOL: Rough(Dog)\nTEXT: The dog likes the cat.\nFOL: Likes(Dog, Cat)\nTEXT: The dog likes the cow.\nFOL: Likes(Dog, Cow)\nTEXT: The dog likes the rabbit.\nFOL: Likes(Dog, Rabbit)\nTEXT: The rabbit is big.\nFOL: Big(Rabbit)\nTEXT: The rabbit likes the cow.\nFOL: Likes(Rabbit, Cow)\nTEXT: The rabbit needs the cat.\nFOL: Needs(Rabbit, Cat)\nTEXT: The rabbit visits the cat.\nFOL: Visits(Rabbit, Cat)\nTEXT: The rabbit visits the dog.\nFOL: Visits(Rabbit, Dog)\nTEXT: If someone is cold then they like the cow.\nFOL: all x. (Cold(x) -> Likes(x, Cow))\nTEXT: If someone visits the rabbit and the rabbit needs the cow then the cow needs the rabbit.\nFOL: all x y. (Visits(x, Rabbit) & Needs(Rabbit, Cow) & Needs(Cow, x) -> Needs(x, Rabbit))\nTEXT: If someone likes the cat then they need the cow.\nFOL: all x. (Likes(x, Cat) -> Needs(x, Cow))\nTEXT: If someone needs the cow and the cow likes the cat then the cat visits the dog.\nFOL: all x y. (Needs(x, Cow) & Likes(Cow, Cat) & Visits(Cat, Dog) -> Visits(x, Dog))\nTEXT: If someone likes the rabbit and they are round then the rabbit needs the dog.\nFOL: all x. (Likes(x, Rabbit) & Round(x) -> Needs(x, Dog))\nTEXT: If someone visits the cat and the cat likes the cow then they like the cat.\nFOL: all x y. (Visits(x, Cat) & Likes(Cat, Cow) -> Likes(x, Cat))\nTEXT: The dog needs the rabbit.\nFOL: Needs(Dog, Rabbit)\n</EVALUATE>"
  ]
 },
 {
  "index": 2,
  "responses": [
   "<EVALUATE>\nTEXT: The cat does not chase the rabbit.\nFOL: -Chase(Cat, Rabbit)\nTEXT: The cat is green.\nFOL: Green(Cat)\nTEXT: The cat visits the rabbit.\nFOL: Visit(Cat, Rabbit)\nTEXT: The mouse chases the rabbit.\nFOL: Chase(Mouse, Rabbit)\nTEXT: The mouse is big.\nFOL: Big(Mouse)\nTEXT: The mouse is red.\nFOL: Red(Mouse)\nTEXT: The mouse is rough.\nFOL: Rough(Mouse)\nTEXT: The mouse does not like the rabbit.\nFOL: -Like(Mouse, Rabbit)\nTEXT: The rabbit is blue.\nFOL: Blue(Rabbit)\nTEXT: The rabbit is red.\nFOL: Red(Rabbit)\nTEXT: The rabbit is rough.\nFOL: Rough(Rabbit)\nTEXT: The rabbit likes the cat.\nFOL: Like(Rabbit, Cat)\nTEXT: The rabbit likes the mouse.\nFOL: Like(Rabbit, Mouse)\nTEXT: The rabbit visits the cat.\nFOL: Visit(Rabbit, Cat)\nTEXT: The rabbit visits the mouse.\nFOL: Visit(Rabbit, Mouse)\nTEXT: If something is big then it is not blue.\nFOL: all x. (Big(x) -> -Blue(x))\nTEXT: If the mouse is not rough then the mouse does not chase the rabbit.\nFOL: -Rough(Mouse) -> -Chase(Mouse, Rabbit)\nTEXT: The mouse does not visit the cat.\nFOL: -Visit(Mouse, Cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat does not chase the rabbit.\nFOL: -Chase(Cat, Rabbit)\n\nTEXT: The cat is green.\nFOL: Green(Cat)\n\nTEXT: The cat visits the rabbit.\nFOL: Visit(Cat, Rabbit)\n\nTEXT: The mouse chases the rabbit.\nFOL: Chase(Mouse, Rabbit)\n\nTEXT: The mouse is big.\nFOL: Big(Mouse)\n\nTEXT: The mouse is red.\nFOL: Red(Mouse)\n\nTEXT: The mouse is rough.\nFOL: Rough(Mouse)\n\nTEXT: The mouse does not like the rabbit.\nFOL: -Like(Mouse, Rabbit)\n\nTEXT: The rabbit is blue.\nFOL: Blue(Rabbit)\n\nTEXT: The rabbit is red.\nFOL: Red(Rabbit)\n\nTEXT: The rabbit is rough.\nFOL: Rough(Rabbit)\n\nTEXT: The rabbit likes the cat.\nFOL: Like(Rabbit, Cat)\n\nTEXT: The rabbit likes the mouse.\nFOL: Like(Rabbit, Mouse)\n\nTEXT: The rabbit visits the cat.\nFOL: Visit(Rabbit, Cat)\n\nTEXT: The rabbit visits the mouse.\nFOL: Visit(Rabbit, Mouse)\n\nTEXT: If something is big then it is not blue.\nFOL: all x. (Big(x) -> -Blue(x))\n\nTEXT: If the mouse is not rough then the mouse does not chase the rabbit.\nFOL: -Rough(Mouse) -> -Chase(Mouse, Rabbit)\n\nTEXT: The mouse does not visit the cat.\nFOL: -Visit(Mouse, Cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat does not chase the rabbit.\nFOL: -Chase(Cat, Rabbit)\nTEXT: The cat is green.\nFOL: Cat(Green)\nTEXT: The cat visits the rabbit.\nFOL: Visit(Cat, Rabbit)\nTEXT: The mouse chases the rabbit.\nFOL: Chase(Mouse, Rabbit)\nTEXT: The mouse is big.\nFOL: Big(Mouse)\nTEXT: The mouse is red.\nFOL: Red(Mouse)\nTEXT: The mouse is rough.\nFOL: Rough(Mouse)\nTEXT: The mouse does not like the rabbit.\nFOL: -Like(Mouse, Rabbit)\nTEXT: The rabbit is blue.\nFOL: Blue(Rabbit)\nTEXT: The rabbit is red.\nFOL: Red(Rabbit)\nTEXT: The rabbit is rough.\nFOL: Rough(Rabbit)\nTEXT: The rabbit likes the cat.\nFOL: Like(Rabbit, Cat)\nTEXT: The rabbit likes the mouse.\nFOL: Like(Rabbit, Mouse)\nTEXT: The rabbit visits the cat.\nFOL: Visit(Rabbit, Cat)\nTEXT: The rabbit visits the mouse.\nFOL: Visit(Rabbit, Mouse)\nTEXT: If something is big then it is not blue.\nFOL: all x. (Big(x) -> -Blue(x))\nTEXT: If the mouse is not rough then the mouse does not chase the rabbit.\nFOL: -Rough(Mouse) -> -Chase(Mouse, Rabbit)\nTEXT: The mouse does not visit the cat.\nFOL: -Visit(Mouse, Cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat does not chase the rabbit.\nFOL: -Chase(Cat, Rabbit)\n\nTEXT: The cat is green.\nFOL: Green(Cat)\n\nTEXT: The cat visits the rabbit.\nFOL: Visit(Cat, Rabbit)\n\nTEXT: The mouse chases the rabbit.\nFOL: Chase(Mouse, Rabbit)\n\nTEXT: The mouse is big.\nFOL: Big(Mouse)\n\nTEXT: The mouse is red.\nFOL: Red(Mouse)\n\nTEXT: The mouse is rough.\nFOL: Rough(Mouse)\n\nTEXT: The mouse does not like the rabbit.\nFOL: -Like(Mouse, Rabbit)\n\nTEXT: The rabbit is blue.\nFOL: Blue(Rabbit)\n\nTEXT: The rabbit is red.\nFOL: Red(Rabbit)\n\nTEXT: The rabbit is rough.\nFOL: Rough(Rabbit)\n\nTEXT: The rabbit likes the cat.\nFOL: Like(Rabbit, Cat)\n\nTEXT: The rabbit likes the mouse.\nFOL: Like(Rabbit, Mouse)\n\nTEXT: The rabbit visits the cat.\nFOL: Visit(Rabbit, Cat)\n\nTEXT: The rabbit visits the mouse.\nFOL: Visit(Rabbit, Mouse)\n\nTEXT: If something is big then it is not blue.\nFOL: all x. (Big(x) -> -Blue(x))\n\nTEXT: If the mouse is not rough then the mouse does not chase the rabbit.\nFOL: -Rough(Mouse) -> -Chase(Mouse, Rabbit)\n\nTEXT: The mouse does not visit the cat.\nFOL: -Visit(Mouse, Cat)\n\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat does not chase the rabbit.\nFOL: -Chase(Cat, Rabbit)\nTEXT: The cat is green.\nFOL: Green(Cat)\nTEXT: The cat visits the rabbit.\nFOL: Visit(Cat, Rabbit)\nTEXT: The mouse chases the rabbit.\nFOL: Chase(Mouse, Rabbit)\nTEXT: The mouse is big.\nFOL: Big(Mouse)\nTEXT: The mouse is red.\nFOL: Red(Mouse)\nTEXT: The mouse is rough.\nFOL: Rough(Mouse)\nTEXT: The mouse does not like the rabbit.\nFOL: -Like(Mouse, Rabbit)\nTEXT: The rabbit is blue.\nFOL: Blue(Rabbit)\nTEXT: The rabbit is red.\nFOL: Red(Rabbit)\nTEXT: The rabbit is rough.\nFOL: Rough(Rabbit)\nTEXT: The rabbit likes the cat.\nFOL: Like(Rabbit, Cat)\nTEXT: The rabbit likes the mouse.\nFOL: Like(Rabbit, Mouse)\nTEXT: The rabbit visits the cat.\nFOL: Visit(Rabbit, Cat)\nTEXT: The rabbit visits the mouse.\nFOL: Visit(Rabbit, Mouse)\nTEXT: If something is big then it is not blue.\nFOL: all x. (Big(x) -> -Blue(x))\nTEXT: If the mouse is not rough then the mouse does not chase the rabbit.\nFOL: all x. ((-Rough(x) & Chase(x, Rabbit)) -> -Chase(x, Rabbit))\nTEXT: The mouse does not visit the cat.\nFOL: -Visit(Mouse, Cat)\n</EVALUATE>"
  ]
 },
 {
  "index": 3,
  "responses": [
   "<EVALUATE>\nTEXT: Rough and cold that is what they say about Blue Bob.\nFOL: Rough(BlueBob) & Cold(BlueBob)\nTEXT: That guy Charlie sure is nice.\nFOL: Nice(Charlie)\nTEXT: Dave is kind and nice and looks green.\nFOL: Kind(Dave) & Nice(Dave) & Green(Dave)\nTEXT: Fred seems to be round.\nFOL: Round(Fred)\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: all x. (Rough(x) & Cold(x) -> Nice(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: all x. ((Rough(x) & Nice(x) & Round(x)) -> Big(x))\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: all x. (Nice(x) & Young(x) & Red(x) -> Green(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Kind(x) -> Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x. ((Round(x) & Green(x) & Nice(x)) -> Red(x))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) -> Round(x))\nTEXT: Fred is not nice.\nFOL: -Nice(Fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Rough and cold that is what they say about Blue Bob.\nFOL: Rough(BlueBob) & Cold(BlueBob)\nTEXT: That guy Charlie sure is nice.\nFOL: Nice(Charlie)\nTEXT: Dave is kind and nice and looks green.\nFOL: Kind(Dave) & Nice(Dave) & Green(Dave)\nTEXT: Fred seems to be round.\nFOL: Round(Fred)\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: all x. (Rough(x) & Cold(x) -> Nice(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: all x. ((Rough(x) & Nice(x) & Round(x)) -> Big(x))\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: all x. (Nice(x) & Young(x) & Red(x) -> Green(x))\nTEXT: Most young kind people tend to be red too.\nFOL: all x. (Young(x) & Kind(x) -> Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x. (Round(x) & Nice(x) & Green(x) -> Red(x))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) -> Round(x))\nTEXT: Fred is not nice.\nFOL: -Nice(Fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Rough and cold that is what they say about Blue Bob.\nFOL: Rough(BlueBob) & Cold(BlueBob)\nTEXT: That guy Charlie sure is nice.\nFOL: Nice(Charlie)\nTEXT: Dave is kind and nice and looks green.\nFOL: Kind(Dave) & Nice(Dave) & Green(Dave)\nTEXT: Fred seems to be round.\nFOL: Round(Fred)\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: all x. (Rough(x) & Cold(x) -> Nice(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: all x. (Rough(x) & Nice(x) & Round(x) -> Big(x))\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: all x. (Nice(x) & Young(x) & Red(x) -> Green(x))\nTEXT: Most young kind people tend to be red too.\nFOL: exists x. (Young(x) & Kind(x) & Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x. ((Round(x) & Green(x) & Nice(x)) -> Red(x))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) -> Round(x))\nTEXT: Fred is not nice.\nFOL: -Nice(Fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Rough and cold that is what they say about Blue Bob.\nFOL: Rough(BlueBob) & Cold(BlueBob)\nTEXT: That guy Charlie sure is nice.\nFOL: Nice(Charlie)\nTEXT: Dave is kind and nice and looks green.\nFOL: Kind(Dave) & Nice(Dave) & Green(Dave)\nTEXT: Fred seems to be round.\nFOL: Round(Fred)\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: all x. (Rough(x) & Cold(x) -> Nice(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: all x. ((Rough(x) & Nice(x) & Round(x)) -> Big(x))\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: all x. (Nice(x) & Young(x) & Red(x) -> Green(x))\nTEXT: Most young kind people tend to be red too.\nFOL: exists x. (Young(x) & Kind(x) & Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x. ((Round(x) & Nice(x) & Green(x)) -> Red(x))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) -> Round(x))\nTEXT: Fred is not nice.\nFOL: -Nice(Fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Rough and cold that is what they say about Blue Bob.\nFOL: Rough(BlueBob) & Cold(BlueBob)\nTEXT: That guy Charlie sure is nice.\nFOL: Nice(Charlie)\nTEXT: Dave is kind and nice and looks green.\nFOL: Kind(Dave) & Nice(Dave) & Green(Dave)\nTEXT: Fred seems to be round.\nFOL: Round(Fred)\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: all x. (RoughSkin(x) & Cold(x) -> Nice(x))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: all x. (Rough(x) & Nice(x) & Round(x) -> Big(x))\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: all x. (Nice(x) & Young(x) & Red(x) -> Green(x))\nTEXT: Most young kind people tend to be red too.\nFOL: exists x. (Young(x) & Kind(x) & Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x. ((Round(x) & Green(x) & Nice(x)) -> Red(x))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) -> Round(x))\nTEXT: Fred is not nice.\nFOL: -Nice(Fred)\n</EVALUATE>"
  ]
 },
 {
  "index": 4,
  "responses": [
   "<EVALUATE>\nTEXT: The cow is big.\nFOL: Cow(cow) & Big(cow)\nTEXT: The cow is blue.\nFOL: Cow(cow) & Blue(cow)\nTEXT: The cow likes the squirrel.\nFOL: Cow(cow) & Squirrel(squirrel) & Likes(cow, squirrel)\nTEXT: The cow sees the lion.\nFOL: Cow(cow) & Lion(lion) & Sees(cow, lion)\nTEXT: The lion eats the cow.\nFOL: Lion(lion) & Cow(cow) & Eats(lion, cow)\nTEXT: The lion eats the squirrel.\nFOL: Lion(lion) & Squirrel(squirrel) & Eats(lion, squirrel)\nTEXT: The lion is big.\nFOL: Lion(lion) & Big(lion)\nTEXT: The lion is kind.\nFOL: Lion(lion) & Kind(lion)\nTEXT: The lion is nice.\nFOL: Lion(lion) & Nice(lion)\nTEXT: The squirrel eats the cow.\nFOL: Squirrel(squirrel) & Cow(cow) & Eats(squirrel, cow)\nTEXT: The squirrel is kind.\nFOL: Squirrel(squirrel) & Kind(squirrel)\nTEXT: The squirrel is nice.\nFOL: Squirrel(squirrel) & Nice(squirrel)\nTEXT: If someone likes the cow then they are red.\nFOL: all x. (Likes(x, cow) -> Red(x))\nTEXT: If someone is big then they like the squirrel.\nFOL: all x. (Big(x) -> Likes(x, squirrel))\nTEXT: The squirrel does not like the squirrel.\nFOL: -Likes(squirrel, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is big.\nFOL: Cow(cow) & Big(cow)\n\nTEXT: The cow is blue.\nFOL: Cow(cow) & Blue(cow)\n\nTEXT: The cow likes the squirrel.\nFOL: Cow(cow) & Squirrel(squirrel) & Likes(cow, squirrel)\n\nTEXT: The cow sees the lion.\nFOL: Cow(cow) & Lion(lion) & Sees(cow, lion)\n\nTEXT: The lion eats the cow.\nFOL: Lion(lion) & Cow(cow) & Eats(lion, cow)\n\nTEXT: The lion eats the squirrel.\nFOL: Lion(lion) & Squirrel(squirrel) & Eats(lion, squirrel)\n\nTEXT: The lion is big.\nFOL: Lion(lion) & Big(lion)\n\nTEXT: The lion is kind.\nFOL: Lion(lion) & Kind(lion)\n\nTEXT: The lion is nice.\nFOL: Lion(lion) & Nice(lion)\n\nTEXT: The squirrel eats the cow.\nFOL: Squirrel(squirrel) & Cow(cow) & Eats(squirrel, cow)\n\nTEXT: The squirrel is kind.\nFOL: Squirrel(squirrel) & Kind(squirrel)\n\nTEXT: The squirrel is nice.\nFOL: Squirrel(squirrel) & Nice(squirrel)\n\nTEXT: If someone likes the cow then they are red.\nFOL: all x. (Likes(x, cow) -> Red(x))\n\nTEXT: If someone is big then they like the squirrel.\nFOL: all x. (Big(x) -> Likes(x, squirrel))\n\nTEXT: The squirrel does not like the squirrel.\nFOL: -Likes(squirrel, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is big.\nFOL: Cow(cow) & Big(cow)\nTEXT: The cow is blue.\nFOL: Cow(cow) & Blue(cow)\nTEXT: The cow likes the squirrel.\nFOL: Cow(cow) & Squirrel(squirrel) & Likes(cow, squirrel)\nTEXT: The cow sees the lion.\nFOL: Cow(cow) & Lion(lion) & Sees(cow, lion)\nTEXT: The lion eats the cow.\nFOL: Lion(lion) & Cow(cow) & Eats(lion, cow)\nTEXT: The lion eats the squirrel.\nFOL: Lion(lion) & Squirrel(squirrel) & Eats(lion, squirrel)\nTEXT: The lion is big.\nFOL: Lion(lion) & Big(lion)\nTEXT: The lion is kind.\nFOL: Lion(lion) & Kind(lion)\nTEXT: The lion is nice.\nFOL: Lion(lion) & Nice(lion)\nTEXT: The squirrel eats the cow.\nFOL: Squirrel(squirrel) & Cow(cow) & Eats(squirrel, cow)\nTEXT: The squirrel is kind.\nFOL: Squirrel(squirrel) & Kind(squirrel)\nTEXT: The squirrel is nice.\nFOL: Squirrel(squirrel) & Nice(squirrel)\nTEXT: If someone likes the cow then they are red.\nFOL: exists x. (Likes(x, cow) -> Red(x))\nTEXT: If someone is big then they like the squirrel.\nFOL: exists x. (Big(x) -> Likes(x, squirrel))\nTEXT: The squirrel does not like the squirrel.\nFOL: -Likes(squirrel, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is big.\nFOL: Cow(cow) & Big(cow)\nTEXT: The cow is blue.\nFOL: Cow(cow) & Blue(cow)\nTEXT: The cow likes the squirrel.\nFOL: Cow(cow) & Squirrel(squirrel) & Likes(cow, squirrel)\nTEXT: The cow sees the lion.\nFOL: Cow(cow) & Lion(lion) & Sees(cow, lion)\nTEXT: The lion eats the cow.\nFOL: Lion(lion) & Cow(cow) & Eats(lion, cow)\nTEXT: The lion eats the squirrel.\nFOL: Lion(lion) & Squirrel(squirrel) & Eats(lion, squirrel)\nTEXT: The lion is big.\nFOL: Lion(lion) & Big(lion)\nTEXT: The lion is kind.\nFOL: Lion(lion) & Kind(lion)\nTEXT: The lion is nice.\nFOL: Lion(lion) & Nice(lion)\nTEXT: The squirrel eats the cow.\nFOL: Squirrel(squirrel) & Cow(cow) & Eats(squirrel, cow)\nTEXT: The squirrel is kind.\nFOL: Squirrel(squirrel) & Kind(squirrel)\nTEXT: The squirrel is nice.\nFOL: Squirrel(squirrel) & Nice(squirrel)\nTEXT: If someone likes the cow then they are red.\nFOL: all x. (Likes(x, cow) -> Red(x))\nTEXT: If someone is big then they like the squirrel.\nFOL: all x. (Big(x) -> Likes(x, squirrel))\nTEXT: The squirrel does not like the squirrel.\nFOL: Squirrel(squirrel) & -Likes(squirrel, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is big.\nFOL: Cow(cow) & Big(cow)\nTEXT: The cow is blue.\nFOL: Cow(cow) & Blue(cow)\nTEXT: The cow likes the squirrel.\nFOL: Cow(cow) & Squirrel(squirrel) & Likes(cow, squirrel)\nTEXT: The cow sees the lion.\nFOL: Cow(cow) & Lion(lion) & Sees(cow, lion)\nTEXT: The lion eats the cow.\nFOL: Lion(lion) & Cow(cow) & Eats(lion, cow)\nTEXT: The lion eats the squirrel.\nFOL: Lion(lion) & Squirrel(squirrel) & Eats(lion, squirrel)\nTEXT: The lion is big.\nFOL: Lion(lion) & Big(lion)\nTEXT: The lion is kind.\nFOL: Lion(lion) & Kind(lion)\nTEXT: The lion is nice.\nFOL: Lion(lion) & Nice(lion)\nTEXT: The squirrel eats the cow.\nFOL: Squirrel(squirrel) & Cow(cow) & Eats(squirrel, cow)\nTEXT: The squirrel is kind.\nFOL: Squirrel(squirrel) & Kind(squirrel)\nTEXT: The squirrel is nice.\nFOL: Squirrel(squirrel) & Nice(squirrel)\nTEXT: If someone likes the cow then they are red.\nFOL: ForAll x. (Likes(x, cow) -> Red(x))\nTEXT: If someone is big then they like the squirrel.\nFOL: ForAll x. (Big(x) -> Likes(x, squirrel))\nTEXT: The squirrel does not like the squirrel.\nFOL: -Likes(squirrel, squirrel)\n</EVALUATE>"
  ]
 },
 {
  "index": 5,
  "responses": [
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Cat eats Rabbit\nTEXT: The cat is cold.\nFOL: Cat is Cold\nTEXT: The cat is young.\nFOL: Cat is Young\nTEXT: The cat sees the rabbit.\nFOL: Cat sees Rabbit\nTEXT: The cat visits the rabbit.\nFOL: Cat visits Rabbit\nTEXT: The rabbit sees the cat.\nFOL: Rabbit sees Cat\nTEXT: The rabbit visits the cat.\nFOL: Rabbit visits Cat\nTEXT: If something visits the rabbit and the rabbit eats the cat then the cat visits the rabbit.\nFOL: all x. ((Visit(x, Rabbit) & Rabbit eats Cat) -> Cat visits Rabbit)\nTEXT: If something is blue then it sees the cat.\nFOL: all x. (Blue(x) -> Cat(x))\nTEXT: If something visits the rabbit then it is blue.\nFOL: all x. (Visit(x, Rabbit) -> Blue(x))\nTEXT: If something visits the rabbit then it eats the cat.\nFOL: all x. (Visit(x, Rabbit) -> Cat(x))\nTEXT: If something sees the cat then the cat sees the rabbit.\nFOL: all x. (Cat(x) -> Rabbit(x))\nTEXT: If something is big and it sees the cat then it visits the cat.\nFOL: all x. ((Big(x) & Cat(x)) -> Visit(x, Cat))\nTEXT: If something is cold then it sees the cat.\nFOL: all x. (Cold(x) -> Cat(x))\nTEXT: If something is blue then it is big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: The rabbit eats the cat.\nFOL: Rabbit eats Cat\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Cat eats Rabbit\nTEXT: The cat is cold.\nFOL: Cat is Cold\nTEXT: The cat is young.\nFOL: Cat is Young\nTEXT: The cat sees the rabbit.\nFOL: Cat sees Rabbit\nTEXT: The cat visits the rabbit.\nFOL: Cat visits Rabbit\nTEXT: The rabbit sees the cat.\nFOL: Rabbit sees Cat\nTEXT: The rabbit visits the cat.\nFOL: Rabbit visits Cat\nTEXT: If something visits the rabbit and the rabbit eats the cat then the cat visits the rabbit.\nFOL: all x. ((Visit(x, Rabbit) & Rabbit eats Cat) -> Cat visits Rabbit)\nTEXT: If something is blue then it sees the cat.\nFOL: all x. (Blue(x) -> Cat(x))\nTEXT: If something visits the rabbit then it is blue.\nFOL: all x. (Visit(x, Rabbit) -> Blue(x))\nTEXT: If something visits the rabbit then it eats the cat.\nFOL: all x. (Visit(x, Rabbit) -> Cat(x))\nTEXT: If something sees the cat then the cat sees the rabbit.\nFOL: all x. (Cat(x) -> Rabbit(x))\nTEXT: If something is big and it sees the cat then it visits the cat.\nFOL: all x. (Big(x) & Cat(x) -> Visit(x, Cat))\nTEXT: If something is cold then it sees the cat.\nFOL: all x. (Cold(x) -> Cat(x))\nTEXT: If something is blue then it is big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: The rabbit eats the cat.\nFOL: Rabbit eats Cat\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Cat(eats(rabbit))\nTEXT: The cat is cold.\nFOL: Cat(cold)\nTEXT: The cat is young.\nFOL: Cat(young)\nTEXT: The cat sees the rabbit.\nFOL: Cat(sees(rabbit))\nTEXT: The cat visits the rabbit.\nFOL: Cat(visits(rabbit))\nTEXT: The rabbit sees the cat.\nFOL: Rabbit(sees(Cat))\nTEXT: The rabbit visits the cat.\nFOL: Rabbit(visits(Cat))\nTEXT: If something visits the rabbit and the rabbit eats the cat then the cat visits the rabbit.\nFOL: all x. ((x(visits(rabbit)) & rabbit(eats(Cat))) -> Cat(visits(rabbit)))\nTEXT: If something is blue then it sees the cat.\nFOL: all x. (Blue(x) -> x(sees(Cat)))\nTEXT: If something visits the rabbit then it is blue.\nFOL: all x. (x(visits(rabbit)) -> Blue(x))\nTEXT: If something visits the rabbit then it eats the cat.\nFOL: all x. (x(visits(rabbit)) -> eats(Cat(x)))\nTEXT: If something sees the cat then the cat sees the rabbit.\nFOL: all x. (x(sees(Cat)) -> Cat(sees(rabbit)))\nTEXT: If something is big and it sees the cat then it visits the cat.\nFOL: all x. ((x(big) & x(sees(Cat))) -> x(visits(Cat)))\nTEXT: If something is cold then it sees the cat.\nFOL: all x. (x(cold) -> x(sees(Cat)))\nTEXT: If something is blue then it is big.\nFOL: all x. (Blue(x) -> x(big))\nTEXT: The rabbit eats the cat.\nFOL: rabbit(eats(Cat))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Cat eats Rabbit\nTEXT: The cat is cold.\nFOL: Cat is Cold\nTEXT: The cat is young.\nFOL: Cat is Young\nTEXT: The cat sees the rabbit.\nFOL: Cat sees Rabbit\nTEXT: The cat visits the rabbit.\nFOL: Cat visits Rabbit\nTEXT: The rabbit sees the cat.\nFOL: Rabbit sees Cat\nTEXT: The rabbit visits the cat.\nFOL: Rabbit visits Cat\nTEXT: If something visits the rabbit and the rabbit eats the cat then the cat visits the rabbit.\nFOL: all x. ((Visit(x, Rabbit) & Rabbit eats Cat) -> Cat visits Rabbit)\nTEXT: If something is blue then it sees the cat.\nFOL: all x. (Blue(x) -> Cat(x))\nTEXT: If something visits the rabbit then it is blue.\nFOL: all x. (Visit(x, Rabbit) -> Blue(x))\nTEXT: If something visits the rabbit then it eats the cat.\nFOL: all x. (Visit(x, Rabbit) -> Cat eats x)\nTEXT: If something sees the cat then the cat sees the rabbit.\nFOL: all x. (Cat(x) -> Rabbit(x))\nTEXT: If something is big and it sees the cat then it visits the cat.\nFOL: all x. ((Big(x) & Cat(x)) -> Visit(x, Cat))\nTEXT: If something is cold then it sees the cat.\nFOL: all x. (Cold(x) -> Cat(x))\nTEXT: If something is blue then it is big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: The rabbit eats the cat.\nFOL: Rabbit eats Cat\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Cat(eats(rabbit))\nTEXT: The cat is cold.\nFOL: Cat(cold)\nTEXT: The cat is young.\nFOL: Cat(young)\nTEXT: The cat sees the rabbit.\nFOL: Cat(sees(rabbit))\nTEXT: The cat visits the rabbit.\nFOL: Cat(visits(rabbit))\nTEXT: The rabbit sees the cat.\nFOL: Rabbit(sees(Cat))\nTEXT: The rabbit visits the cat.\nFOL: Rabbit(visits(Cat))\nTEXT: If something visits the rabbit and the rabbit eats the cat then the cat visits the rabbit.\nFOL: all x. ((x(visits(rabbit)) & rabbit(eats(Cat))) -> Cat(visits(rabbit)))\nTEXT: If something is blue then it sees the cat.\nFOL: all x. (Blue(x) -> x(sees(Cat)))\nTEXT: If something visits the rabbit then it is blue.\nFOL: all x. (x(visits(rabbit)) -> Blue(x))\nTEXT: If something visits the rabbit then it eats the cat.\nFOL: all x. (x(visits(rabbit)) -> eats(Cat(x)))\nTEXT: If something sees the cat then the cat sees the rabbit.\nFOL: all x. (x(sees(Cat)) -> Cat(sees(rabbit)))\nTEXT: If something is big and it sees the cat then it visits the cat.\nFOL: all x. ((Big(x) & x(sees(Cat))) -> x(visits(Cat)))\nTEXT: If something is cold then it sees the cat.\nFOL: all x. (x(cold) -> x(sees(Cat)))\nTEXT: If something is blue then it is big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: The rabbit eats the cat.\nFOL: rabbit(eats(Cat))\n</EVALUATE>"
  ]
 },
 {
  "index": 6,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Anne(big)\nTEXT: Anne is blue.\nFOL: Anne(blue)\nTEXT: Anne is cold.\nFOL: Anne(cold)\nTEXT: Anne is furry.\nFOL: Anne(furry)\nTEXT: Anne is kind.\nFOL: Anne(kind)\nTEXT: Anne is white.\nFOL: Anne(white)\nTEXT: Anne is young.\nFOL: Anne(young)\nTEXT: Bob is big.\nFOL: Bob(big)\nTEXT: Bob is furry.\nFOL: Bob(furry)\nTEXT: Bob is kind.\nFOL: Bob(kind)\nTEXT: Bob is white.\nFOL: Bob(white)\nTEXT: Bob is young.\nFOL: Bob(young)\nTEXT: Charlie is furry.\nFOL: Charlie(furry)\nTEXT: Harry is big.\nFOL: Harry(big)\nTEXT: Harry is blue.\nFOL: Harry(blue)\nTEXT: Harry is white.\nFOL: Harry(white)\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: Furry, white people are blue.\nFOL: all x. ((Furry(x) & White(x)) -> Blue(x))\nTEXT: If someone is furry then they are white.\nFOL: all x. (Furry(x) -> White(x))\nTEXT: Harry is cold.\nFOL: Harry(cold)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Anne(big)\nTEXT: Anne is blue.\nFOL: Anne(blue)\nTEXT: Anne is cold.\nFOL: Anne(cold)\nTEXT: Anne is furry.\nFOL: Anne(furry)\nTEXT: Anne is kind.\nFOL: Anne(kind)\nTEXT: Anne is white.\nFOL: Anne(white)\nTEXT: Anne is young.\nFOL: Anne(young)\nTEXT: Bob is big.\nFOL: Bob(big)\nTEXT: Bob is furry.\nFOL: Bob(furry)\nTEXT: Bob is kind.\nFOL: Bob(kind)\nTEXT: Bob is white.\nFOL: Bob(white)\nTEXT: Bob is young.\nFOL: Bob(young)\nTEXT: Charlie is furry.\nFOL: Charlie(furry)\nTEXT: Harry is big.\nFOL: Harry(big)\nTEXT: Harry is blue.\nFOL: Harry(blue)\nTEXT: Harry is white.\nFOL: Harry(white)\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: Furry, white people are blue.\nFOL: all x. (Furry(x) & White(x) -> Blue(x))\nTEXT: If someone is furry then they are white.\nFOL: all x. (Furry(x) -> White(x))\nTEXT: Harry is cold.\nFOL: Harry(cold)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Anne(big)\n\nTEXT: Anne is blue.\nFOL: Anne(blue)\n\nTEXT: Anne is cold.\nFOL: Anne(cold)\n\nTEXT: Anne is furry.\nFOL: Anne(furry)\n\nTEXT: Anne is kind.\nFOL: Anne(kind)\n\nTEXT: Anne is white.\nFOL: Anne(white)\n\nTEXT: Anne is young.\nFOL: Anne(young)\n\nTEXT: Bob is big.\nFOL: Bob(big)\n\nTEXT: Bob is furry.\nFOL: Bob(furry)\n\nTEXT: Bob is kind.\nFOL: Bob(kind)\n\nTEXT: Bob is white.\nFOL: Bob(white)\n\nTEXT: Bob is young.\nFOL: Bob(young)\n\nTEXT: Charlie is furry.\nFOL: Charlie(furry)\n\nTEXT: Harry is big.\nFOL: Harry(big)\n\nTEXT: Harry is blue.\nFOL: Harry(blue)\n\nTEXT: Harry is white.\nFOL: Harry(white)\n\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\n\nTEXT: Furry, white people are blue.\nFOL: all x. ((Furry(x) & White(x)) -> Blue(x))\n\nTEXT: If someone is furry then they are white.\nFOL: all x. (Furry(x) -> White(x))\n\nTEXT: Harry is cold.\nFOL: Harry(cold)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(Anne)\nTEXT: Anne is blue.\nFOL: Blue(Anne)\nTEXT: Anne is cold.\nFOL: Cold(Anne)\nTEXT: Anne is furry.\nFOL: Furry(Anne)\nTEXT: Anne is kind.\nFOL: Kind(Anne)\nTEXT: Anne is white.\nFOL: White(Anne)\nTEXT: Anne is young.\nFOL: Young(Anne)\nTEXT: Bob is big.\nFOL: Big(Bob)\nTEXT: Bob is furry.\nFOL: Furry(Bob)\nTEXT: Bob is kind.\nFOL: Kind(Bob)\nTEXT: Bob is white.\nFOL: White(Bob)\nTEXT: Bob is young.\nFOL: Young(Bob)\nTEXT: Charlie is furry.\nFOL: Furry(Charlie)\nTEXT: Harry is big.\nFOL: Big(Harry)\nTEXT: Harry is blue.\nFOL: Blue(Harry)\nTEXT: Harry is white.\nFOL: White(Harry)\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: Furry, white people are blue.\nFOL: all x. ((Furry(x) & White(x)) -> Blue(x))\nTEXT: If someone is furry then they are white.\nFOL: all x. (Furry(x) -> White(x))\nTEXT: Harry is cold.\nFOL: Cold(Harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(Anne)\n\nTEXT: Anne is blue.\nFOL: Blue(Anne)\n\nTEXT: Anne is cold.\nFOL: Cold(Anne)\n\nTEXT: Anne is furry.\nFOL: Furry(Anne)\n\nTEXT: Anne is kind.\nFOL: Kind(Anne)\n\nTEXT: Anne is white.\nFOL: White(Anne)\n\nTEXT: Anne is young.\nFOL: Young(Anne)\n\nTEXT: Bob is big.\nFOL: Big(Bob)\n\nTEXT: Bob is furry.\nFOL: Furry(Bob)\n\nTEXT: Bob is kind.\nFOL: Kind(Bob)\n\nTEXT: Bob is white.\nFOL: White(Bob)\n\nTEXT: Bob is young.\nFOL: Young(Bob)\n\nTEXT: Charlie is furry.\nFOL: Furry(Charlie)\n\nTEXT: Harry is big.\nFOL: Big(Harry)\n\nTEXT: Harry is blue.\nFOL: Blue(Harry)\n\nTEXT: Harry is white.\nFOL: White(Harry)\n\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\n\nTEXT: Furry, white people are blue.\nFOL: all x. (Furry(x) & White(x) -> Blue(x))\n\nTEXT: If someone is furry then they are white.\nFOL: all x. (Furry(x) -> White(x))\n\nTEXT: Harry is cold.\nFOL: Cold(Harry)\n</EVALUATE>"
  ]
 },
 {
  "index": 7,
  "responses": [
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: exists x. (Young(x) & Cold(x) & Person(x) & Name(x, Alan))\nTEXT: Dave, who is both nice and kind, is rough, round and young, too.\nFOL: Dave & Nice(Dave) & Kind(Dave) & Rough(Dave) & Round(Dave) & Young(Dave)\nTEXT: A blue colored person who is nice is a red person.\nFOL: all x. (Blue(x) & Nice(x) -> Red(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: Nice people who are blue and round at the same time are always young.\nFOL: all x. (Nice(x) & Blue(x) & Round(x) -> Young(x))\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: all x. (Green(x) & Naive(x) -> (Red(x) & Rough(x)))\nTEXT: It is a safe guess then that they are also round.\nFOL: Red(x) & Rough(x) -> Round(x)\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & Red(x) -> Big(x))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x. (Round(x) & Blue(x) -> Young(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: Cold(x) & Blue(x) & Rough(x) -> Kind(x)\nTEXT: Dave is red.\nFOL: Dave & Red(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: exists x. (Young(x) & Cold(x) & Person(x) & Name(x, Alan))\nTEXT: Dave, who is both nice and kind, is rough, round and young, too.\nFOL: Dave & Nice(Dave) & Kind(Dave) & Rough(Dave) & Round(Dave) & Young(Dave)\nTEXT: A blue colored person who is nice is a red person.\nFOL: all x. (Blue(x) & Nice(x) -> Red(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: Nice people who are blue and round at the same time are always young.\nFOL: all x. (Nice(x) & Blue(x) & Round(x) -> Young(x))\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: all x. (Green(x) & Naive(x) -> (Red(x) & Rough(x)))\nTEXT: It is a safe guess then that they are also round.\nFOL: Red(x) & Rough(x) -> Round(x)\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: Rough(x) & Red(x) -> Big(x)\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x. (Round(x) & Blue(x) -> Young(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: Cold(x) & Blue(x) & Rough(x) -> Kind(x)\nTEXT: Dave is red.\nFOL: Dave & Red(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: exists x. (Young(x) & Cold(x) & Person(x) & Name(x, Alan))\nTEXT: Dave, who is both nice and kind, is rough, round and young, too.\nFOL: Dave & Nice(Dave) & Kind(Dave) & Rough(Dave) & Round(Dave) & Young(Dave)\nTEXT: A blue colored person who is nice is a red person.\nFOL: all x. (Blue(x) & Nice(x) -> Red(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: Nice people who are blue and round at the same time are always young.\nFOL: all x. (Nice(x) & Blue(x) & Round(x) -> Young(x))\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: all x. (Green(x) & Naive(x) -> (Red(x) & Rough(x)))\nTEXT: It is a safe guess then that they are also round.\nFOL: all x. ((Green(x) & Naive(x)) -> Round(x))\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & Red(x) -> Big(x))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x. (Round(x) & Blue(x) -> Young(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: all x. (Cold(x) & Blue(x) & Rough(x) -> Kind(x))\nTEXT: Dave is red.\nFOL: Dave & Red(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: exists x. (Young(x) & Cold(x) & Person(x) & Name(x, Alan))\nTEXT: Dave, who is both nice and kind, is rough, round and young, too.\nFOL: Dave & Nice(Dave) & Kind(Dave) & Rough(Dave) & Round(Dave) & Young(Dave)\nTEXT: A blue colored person who is nice is a red person.\nFOL: all x. (Blue(x) & Nice(x) -> Red(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: Nice people who are blue and round at the same time are always young.\nFOL: all x. (Nice(x) & Blue(x) & Round(x) -> Young(x))\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: all x. (Green(x) & Naive(x) -> (Red(x) & Rough(x)))\nTEXT: It is a safe guess then that they are also round.\nFOL: -Green(x) & Naive(x) -> Round(x)\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & Red(x) -> Big(x))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x. (Round(x) & Blue(x) -> Young(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: all x. (Cold(x) & Blue(x) & Rough(x) -> Kind(x))\nTEXT: Dave is red.\nFOL: Dave & Red(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: exists x. (Young(x) & Cold(x) & Person(x) & Name(x, Alan))\nTEXT: Dave, who is both nice and kind, is rough, round and young, too.\nFOL: Dave & Nice(Dave) & Kind(Dave) & Rough(Dave) & Round(Dave) & Young(Dave)\nTEXT: A blue colored person who is nice is a red person.\nFOL: all x. (Blue(x) & Nice(x) -> Red(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: Nice people who are blue and round at the same time are always young.\nFOL: all x. (Nice(x) & Blue(x) & Round(x) -> Young(x))\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: all x. (Green(x) & Naive(x) -> (Red(x) & Rough(x)))\nTEXT: It is a safe guess then that they are also round.\nFOL: (Green(x) & Naive(x)) -> Round(x)\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & Red(x) -> Big(x))\nTEXT: Why is it that every round person that is blue is so young.\nFOL: all x. (Round(x) & Blue(x) -> Young(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: all x. (Cold(x) & Blue(x) & Rough(x) -> Kind(x))\nTEXT: Dave is red.\nFOL: Dave & Red(Dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 8,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: Furry(Anne)\nTEXT: Anne is nice.\nFOL: Nice(Anne)\nTEXT: Anne is rough.\nFOL: Rough(Anne)\nTEXT: Anne is young.\nFOL: Young(Anne)\nTEXT: Dave is green.\nFOL: Green(Dave)\nTEXT: Dave is rough.\nFOL: Rough(Dave)\nTEXT: Dave is young.\nFOL: Young(Dave)\nTEXT: If something is round and rough then it is green.\nFOL: all x. ((Round(x) & Rough(x)) -> Green(x))\nTEXT: Green things are white.\nFOL: all x. (Green(x) -> White(x))\nTEXT: If something is white and green then it is young.\nFOL: all x. ((White(x) & Green(x)) -> Young(x))\nTEXT: White, nice things are furry.\nFOL: all x. ((White(x) & Nice(x)) -> Furry(x))\nTEXT: If Anne is nice then Anne is furry.\nFOL: Nice(Anne) -> Furry(Anne)\nTEXT: Young, rough things are white.\nFOL: all x. ((Young(x) & Rough(x)) -> White(x))\nTEXT: All white things are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Round things are rough.\nFOL: all x. (Round(x) -> Rough(x))\nTEXT: Dave is not round.\nFOL: -Round(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: Furry(Anne)\n\nTEXT: Anne is nice.\nFOL: Nice(Anne)\n\nTEXT: Anne is rough.\nFOL: Rough(Anne)\n\nTEXT: Anne is young.\nFOL: Young(Anne)\n\nTEXT: Dave is green.\nFOL: Green(Dave)\n\nTEXT: Dave is rough.\nFOL: Rough(Dave)\n\nTEXT: Dave is young.\nFOL: Young(Dave)\n\nTEXT: If something is round and rough then it is green.\nFOL: all x. ((Round(x) & Rough(x)) -> Green(x))\n\nTEXT: Green things are white.\nFOL: all x. (Green(x) -> White(x))\n\nTEXT: If something is white and green then it is young.\nFOL: all x. ((White(x) & Green(x)) -> Young(x))\n\nTEXT: White, nice things are furry.\nFOL: all x. ((White(x) & Nice(x)) -> Furry(x))\n\nTEXT: If Anne is nice then Anne is furry.\nFOL: Nice(Anne) -> Furry(Anne)\n\nTEXT: Young, rough things are white.\nFOL: all x. ((Young(x) & Rough(x)) -> White(x))\n\nTEXT: All white things are round.\nFOL: all x. (White(x) -> Round(x))\n\nTEXT: Round things are rough.\nFOL: all x. (Round(x) -> Rough(x))\n\nTEXT: Dave is not round.\nFOL: -Round(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: Furry(Anne)\nTEXT: Anne is nice.\nFOL: Nice(Anne)\nTEXT: Anne is rough.\nFOL: Rough(Anne)\nTEXT: Anne is young.\nFOL: Young(Anne)\nTEXT: Dave is green.\nFOL: Green(Dave)\nTEXT: Dave is rough.\nFOL: Rough(Dave)\nTEXT: Dave is young.\nFOL: Young(Dave)\nTEXT: If something is round and rough then it is green.\nFOL: all x. ((Round(x) & Rough(x)) -> Green(x))\nTEXT: Green things are white.\nFOL: all x. (Green(x) -> White(x))\nTEXT: If something is white and green then it is young.\nFOL: all x. ((White(x) & Green(x)) -> Young(x))\nTEXT: White, nice things are furry.\nFOL: all x. (White(x) & Nice(x) -> Furry(x))\nTEXT: If Anne is nice then Anne is furry.\nFOL: Nice(Anne) -> Furry(Anne)\nTEXT: Young, rough things are white.\nFOL: all x. ((Young(x) & Rough(x)) -> White(x))\nTEXT: All white things are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Round things are rough.\nFOL: all x. (Round(x) -> Rough(x))\nTEXT: Dave is not round.\nFOL: -Round(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: Furry(Anne)\n\nTEXT: Anne is nice.\nFOL: Nice(Anne)\n\nTEXT: Anne is rough.\nFOL: Rough(Anne)\n\nTEXT: Anne is young.\nFOL: Young(Anne)\n\nTEXT: Dave is green.\nFOL: Green(Dave)\n\nTEXT: Dave is rough.\nFOL: Rough(Dave)\n\nTEXT: Dave is young.\nFOL: Young(Dave)\n\nTEXT: If something is round and rough then it is green.\nFOL: all x. ((Round(x) & Rough(x)) -> Green(x))\n\nTEXT: Green things are white.\nFOL: all x. (Green(x) -> White(x))\n\nTEXT: If something is white and green then it is young.\nFOL: all x. ((White(x) & Green(x)) -> Young(x))\n\nTEXT: White, nice things are furry.\nFOL: all x. (White(x) & Nice(x) -> Furry(x))\n\nTEXT: If Anne is nice then Anne is furry.\nFOL: Nice(Anne) -> Furry(Anne)\n\nTEXT: Young, rough things are white.\nFOL: all x. ((Young(x) & Rough(x)) -> White(x))\n\nTEXT: All white things are round.\nFOL: all x. (White(x) -> Round(x))\n\nTEXT: Round things are rough.\nFOL: all x. (Round(x) -> Rough(x))\n\nTEXT: Dave is not round.\nFOL: -Round(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: Furry(Anne)\n\nTEXT: Anne is nice.\nFOL: Nice(Anne)\n\nTEXT: Anne is rough.\nFOL: Rough(Anne)\n\nTEXT: Anne is young.\nFOL: Young(Anne)\n\nTEXT: Dave is green.\nFOL: Green(Dave)\n\nTEXT: Dave is rough.\nFOL: Rough(Dave)\n\nTEXT: Dave is young.\nFOL: Young(Dave)\n\nTEXT: If something is round and rough then it is green.\nFOL: all x. (Round(x) & Rough(x) -> Green(x))\n\nTEXT: Green things are white.\nFOL: all x. (Green(x) -> White(x))\n\nTEXT: If something is white and green then it is young.\nFOL: all x. (White(x) & Green(x) -> Young(x))\n\nTEXT: White, nice things are furry.\nFOL: all x. (White(x) & Nice(x) -> Furry(x))\n\nTEXT: If Anne is nice then Anne is furry.\nFOL: Nice(Anne) -> Furry(Anne)\n\nTEXT: Young, rough things are white.\nFOL: all x. (Young(x) & Rough(x) -> White(x))\n\nTEXT: All white things are round.\nFOL: all x. (White(x) -> Round(x))\n\nTEXT: Round things are rough.\nFOL: all x. (Round(x) -> Rough(x))\n\nTEXT: Dave is not round.\nFOL: -Round(Dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 9,
  "responses": [
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: Bear(bear) -> Round(bear)\nTEXT: The bear needs the squirrel.\nFOL: Bear(bear) & Squirrel(squirrel) -> Needs(bear, squirrel)\nTEXT: The rabbit is cold.\nFOL: Rabbit(rabbit) -> Cold(rabbit)\nTEXT: The rabbit is round.\nFOL: Rabbit(rabbit) -> Round(rabbit)\nTEXT: The rabbit needs the squirrel.\nFOL: Rabbit(rabbit) & Squirrel(squirrel) -> Needs(rabbit, squirrel)\nTEXT: The rabbit visits the bear.\nFOL: Rabbit(rabbit) & Bear(bear) -> Visits(rabbit, bear)\nTEXT: The squirrel is young.\nFOL: Squirrel(squirrel) -> Young(squirrel)\nTEXT: The squirrel likes the rabbit.\nFOL: Squirrel(squirrel) & Rabbit(rabbit) -> Likes(squirrel, rabbit)\nTEXT: The squirrel needs the bear.\nFOL: Squirrel(squirrel) & Bear(bear) -> Needs(squirrel, bear)\nTEXT: The squirrel visits the rabbit.\nFOL: Squirrel(squirrel) & Rabbit(rabbit) -> Visits(squirrel, rabbit)\nTEXT: If the squirrel is young and the squirrel likes the bear then the bear is green.\nFOL: (Young(squirrel) & Likes(squirrel, bear)) -> Green(bear)\nTEXT: If someone likes the rabbit then they are round.\nFOL: all x. (Likes(x, rabbit) -> Round(x))\nTEXT: If someone is round then they like the bear.\nFOL: all x. (Round(x) -> Likes(x, bear))\nTEXT: The bear is green.\nFOL: Bear(bear) -> Green(bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: Bear(bear) -> Round(bear)\nTEXT: The bear needs the squirrel.\nFOL: Bear(bear) & Squirrel(squirrel) -> Needs(bear, squirrel)\nTEXT: The rabbit is cold.\nFOL: Rabbit(rabbit) -> Cold(rabbit)\nTEXT: The rabbit is round.\nFOL: Rabbit(rabbit) -> Round(rabbit)\nTEXT: The rabbit needs the squirrel.\nFOL: Rabbit(rabbit) & Squirrel(squirrel) -> Needs(rabbit, squirrel)\nTEXT: The rabbit visits the bear.\nFOL: Rabbit(rabbit) & Bear(bear) -> Visits(rabbit, bear)\nTEXT: The squirrel is young.\nFOL: Squirrel(squirrel) -> Young(squirrel)\nTEXT: The squirrel likes the rabbit.\nFOL: Squirrel(squirrel) & Rabbit(rabbit) -> Likes(squirrel, rabbit)\nTEXT: The squirrel needs the bear.\nFOL: Squirrel(squirrel) & Bear(bear) -> Needs(squirrel, bear)\nTEXT: The squirrel visits the rabbit.\nFOL: Squirrel(squirrel) & Rabbit(rabbit) -> Visits(squirrel, rabbit)\nTEXT: If the squirrel is young and the squirrel likes the bear then the bear is green.\nFOL: (Young(squirrel) & Likes(squirrel, bear)) -> Green(bear)\nTEXT: If someone likes the rabbit then they are round.\nFOL: exists x. (Likes(x, rabbit) -> Round(x))\nTEXT: If someone is round then they like the bear.\nFOL: exists x. (Round(x) -> Likes(x, bear))\nTEXT: The bear is green.\nFOL: Bear(bear) -> Green(bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: Bear(bear) & Round(bear)\nTEXT: The bear needs the squirrel.\nFOL: Bear(bear) & Squirrel(squirrel) & Needs(bear, squirrel)\nTEXT: The rabbit is cold.\nFOL: Rabbit(rabbit) & Cold(rabbit)\nTEXT: The rabbit is round.\nFOL: Rabbit(rabbit) & Round(rabbit)\nTEXT: The rabbit needs the squirrel.\nFOL: Rabbit(rabbit) & Squirrel(squirrel) & Needs(rabbit, squirrel)\nTEXT: The rabbit visits the bear.\nFOL: Rabbit(rabbit) & Bear(bear) & Visits(rabbit, bear)\nTEXT: The squirrel is young.\nFOL: Squirrel(squirrel) & Young(squirrel)\nTEXT: The squirrel likes the rabbit.\nFOL: Squirrel(squirrel) & Rabbit(rabbit) & Likes(squirrel, rabbit)\nTEXT: The squirrel needs the bear.\nFOL: Squirrel(squirrel) & Bear(bear) & Needs(squirrel, bear)\nTEXT: The squirrel visits the rabbit.\nFOL: Squirrel(squirrel) & Rabbit(rabbit) & Visits(squirrel, rabbit)\nTEXT: If the squirrel is young and the squirrel likes the bear then the bear is green.\nFOL: (Young(squirrel) & Likes(squirrel, bear)) -> Green(bear)\nTEXT: If someone likes the rabbit then they are round.\nFOL: all x. (Likes(x, rabbit) -> Round(x))\nTEXT: If someone is round then they like the bear.\nFOL: all x. (Round(x) -> Likes(x, bear))\nTEXT: The bear is green.\nFOL: Green(bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: Bear(bear) -> Round(bear)\nTEXT: The bear needs the squirrel.\nFOL: Bear(bear) -> NeedsSquirrel(bear, squirrel)\nTEXT: The rabbit is cold.\nFOL: Rabbit(rabbit) -> Cold(rabbit)\nTEXT: The rabbit is round.\nFOL: Rabbit(rabbit) -> Round(rabbit)\nTEXT: The rabbit needs the squirrel.\nFOL: Rabbit(rabbit) -> NeedsSquirrel(rabbit, squirrel)\nTEXT: The rabbit visits the bear.\nFOL: Rabbit(rabbit) -> VisitsBear(rabbit, bear)\nTEXT: The squirrel is young.\nFOL: Squirrel(squirrel) -> Young(squirrel)\nTEXT: The squirrel likes the rabbit.\nFOL: Squirrel(squirrel) -> LikesRabbit(squirrel, rabbit)\nTEXT: The squirrel needs the bear.\nFOL: Squirrel(squirrel) -> NeedsBear(squirrel, bear)\nTEXT: The squirrel visits the rabbit.\nFOL: Squirrel(squirrel) -> VisitsRabbit(squirrel, rabbit)\nTEXT: If the squirrel is young and the squirrel likes the bear then the bear is green.\nFOL: (Young(squirrel) & LikesRabbit(squirrel, bear)) -> Green(bear)\nTEXT: If someone likes the rabbit then they are round.\nFOL: LikesRabbit(x, rabbit) -> Round(x)\nTEXT: If someone is round then they like the bear.\nFOL: Round(x) -> LikesBear(x)\nTEXT: The bear is green.\nFOL: Green(bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: Bear(bear) -> Round(bear)\nTEXT: The bear needs the squirrel.\nFOL: Bear(bear) -> NeedsSquirrel(bear, squirrel)\nTEXT: The rabbit is cold.\nFOL: Rabbit(rabbit) -> Cold(rabbit)\nTEXT: The rabbit is round.\nFOL: Rabbit(rabbit) -> Round(rabbit)\nTEXT: The rabbit needs the squirrel.\nFOL: Rabbit(rabbit) -> NeedsSquirrel(rabbit, squirrel)\nTEXT: The rabbit visits the bear.\nFOL: Rabbit(rabbit) -> VisitsBear(rabbit, bear)\nTEXT: The squirrel is young.\nFOL: Squirrel(squirrel) -> Young(squirrel)\nTEXT: The squirrel likes the rabbit.\nFOL: Squirrel(squirrel) -> LikesRabbit(squirrel, rabbit)\nTEXT: The squirrel needs the bear.\nFOL: Squirrel(squirrel) -> NeedsBear(squirrel, bear)\nTEXT: The squirrel visits the rabbit.\nFOL: Squirrel(squirrel) -> VisitsRabbit(squirrel, rabbit)\nTEXT: If the squirrel is young and the squirrel likes the bear then the bear is green.\nFOL: (Young(squirrel) & LikesRabbit(squirrel, bear)) -> Green(bear)\nTEXT: If someone likes the rabbit then they are round.\nFOL: (LikesRabbit(x, rabbit) -> Round(x))\nTEXT: If someone is round then they like the bear.\nFOL: (Round(x) -> LikesBear(x))\nTEXT: The bear is green.\nFOL: Green(bear)\n</EVALUATE>"
  ]
 },
 {
  "index": 10,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(Anne)\nTEXT: Bob is green.\nFOL: Green(Bob)\nTEXT: Bob is quiet.\nFOL: Quiet(Bob)\nTEXT: Bob is red.\nFOL: Red(Bob)\nTEXT: Bob is round.\nFOL: Round(Bob)\nTEXT: Gary is blue.\nFOL: Blue(Gary)\nTEXT: Gary is green.\nFOL: Green(Gary)\nTEXT: Gary is nice.\nFOL: Nice(Gary)\nTEXT: Gary is quiet.\nFOL: Quiet(Gary)\nTEXT: Gary is red.\nFOL: Red(Gary)\nTEXT: Gary is white.\nFOL: White(Gary)\nTEXT: Harry is green.\nFOL: Green(Harry)\nTEXT: Harry is quiet.\nFOL: Quiet(Harry)\nTEXT: Harry is red.\nFOL: Red(Harry)\nTEXT: Harry is white.\nFOL: White(Harry)\nTEXT: Red people are white.\nFOL: all x. (Red(x) -> White(x))\nTEXT: Gary is green.\nFOL: Green(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(Anne)\n\nTEXT: Bob is green.\nFOL: Green(Bob)\n\nTEXT: Bob is quiet.\nFOL: Quiet(Bob)\n\nTEXT: Bob is red.\nFOL: Red(Bob)\n\nTEXT: Bob is round.\nFOL: Round(Bob)\n\nTEXT: Gary is blue.\nFOL: Blue(Gary)\n\nTEXT: Gary is green.\nFOL: Green(Gary)\n\nTEXT: Gary is nice.\nFOL: Nice(Gary)\n\nTEXT: Gary is quiet.\nFOL: Quiet(Gary)\n\nTEXT: Gary is red.\nFOL: Red(Gary)\n\nTEXT: Gary is white.\nFOL: White(Gary)\n\nTEXT: Harry is green.\nFOL: Green(Harry)\n\nTEXT: Harry is quiet.\nFOL: Quiet(Harry)\n\nTEXT: Harry is red.\nFOL: Red(Harry)\n\nTEXT: Harry is white.\nFOL: White(Harry)\n\nTEXT: Red people are white.\nFOL: all x. (Red(x) -> White(x))\n\nTEXT: Gary is green.\nFOL: Green(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(anne)\nTEXT: Bob is green.\nFOL: Green(bob)\nTEXT: Bob is quiet.\nFOL: Quiet(bob)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Gary is blue.\nFOL: Blue(gary)\nTEXT: Gary is green.\nFOL: Green(gary)\nTEXT: Gary is nice.\nFOL: Nice(gary)\nTEXT: Gary is quiet.\nFOL: Quiet(gary)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Gary is white.\nFOL: White(gary)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is red.\nFOL: Red(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: Red people are white.\nFOL: all x. (Red(x) -> White(x))\nTEXT: Gary is green.\nFOL: Green(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(anne)\n\nTEXT: Bob is green.\nFOL: Green(bob)\n\nTEXT: Bob is quiet.\nFOL: Quiet(bob)\n\nTEXT: Bob is red.\nFOL: Red(bob)\n\nTEXT: Bob is round.\nFOL: Round(bob)\n\nTEXT: Gary is blue.\nFOL: Blue(gary)\n\nTEXT: Gary is green.\nFOL: Green(gary)\n\nTEXT: Gary is nice.\nFOL: Nice(gary)\n\nTEXT: Gary is quiet.\nFOL: Quiet(gary)\n\nTEXT: Gary is red.\nFOL: Red(gary)\n\nTEXT: Gary is white.\nFOL: White(gary)\n\nTEXT: Harry is green.\nFOL: Green(harry)\n\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\n\nTEXT: Harry is red.\nFOL: Red(harry)\n\nTEXT: Harry is white.\nFOL: White(harry)\n\nTEXT: Red people are white.\nFOL: all x. (Red(x) -> White(x))\n\nTEXT: Gary is green.\nFOL: Green(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(Anne)\n\nTEXT: Bob is green.\nFOL: Green(Bob)\n\nTEXT: Bob is quiet.\nFOL: Quiet(Bob)\n\nTEXT: Bob is red.\nFOL: Red(Bob)\n\nTEXT: Bob is round.\nFOL: Round(Bob)\n\nTEXT: Gary is blue.\nFOL: Blue(Gary)\n\nTEXT: Gary is green.\nFOL: Green(Gary)\n\nTEXT: Gary is nice.\nFOL: Nice(Gary)\n\nTEXT: Gary is quiet.\nFOL: Quiet(Gary)\n\nTEXT: Gary is red.\nFOL: Red(Gary)\n\nTEXT: Gary is white.\nFOL: White(Gary)\n\nTEXT: Harry is green.\nFOL: Green(Harry)\n\nTEXT: Harry is quiet.\nFOL: Quiet(Harry)\n\nTEXT: Harry is red.\nFOL: Red(Harry)\n\nTEXT: Harry is white.\nFOL: White(Harry)\n\nTEXT: Red people are white.\nFOL: Red(x) -> White(x)\n\nTEXT: Gary is green.\nFOL: Green(Gary)\n</EVALUATE>"
  ]
 },
 {
  "index": 11,
  "responses": [
   "<EVALUATE>\nTEXT: Bob who frequently wears red clothes always feels very cold because of his young age on the team and his rough skin.\nFOL: all x. ((WearsRed(x) & Young(x) & Team(x) & Rough(x)) -> Cold(x))\nTEXT: Young Charlie has a round form, believes in green and is rough.\nFOL: Young(Charlie) & Round(Charlie) & Green(Charlie) & Rough(Charlie)\nTEXT: That guy Dave sure is nice.\nFOL: Nice(Dave)\nTEXT: People who have green body paint and act kind to others are quite young.\nFOL: all x. (GreenBodyPaint(x) & Kind(x) -> Young(x))\nTEXT: Any person that's blue, young and green will turn out to be a nice person, too.\nFOL: exists x. (Blue(x) & Young(x) & Green(x) -> Nice(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Big people with rough, green skin are cold because of it.\nFOL: all x. (Big(x) & Rough(x) & Green(x) -> Cold(x))\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: all x. (Nice(x) & WearsRed(x) & Rough(x) -> GreenWithEnvy(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: exists x. (Young(x) & Big(x) & Rough(x) -> Round(x))\nTEXT: Every single blue and red person who acts sort of rough tends to be green in places.\nFOL: all x. (Blue(x) & Red(x) & Rough(x) -> Green(x))\nTEXT: Eric is cold.\nFOL: Cold(Eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob who frequently wears red clothes always feels very cold because of his young age on the team and his rough skin.\nFOL: all x. ((WearsRed(x) & Young(x) & Team(x) & Rough(x)) -> Cold(x))\nTEXT: Young Charlie has a round form, believes in green and is rough.\nFOL: Young(Charlie) & Round(Charlie) & Green(Charlie) & Rough(Charlie)\nTEXT: That guy Dave sure is nice.\nFOL: Nice(Dave)\nTEXT: People who have green body paint and act kind to others are quite young.\nFOL: all x. (GreenBodyPaint(x) & Kind(x) -> Young(x))\nTEXT: Any person that's blue, young and green will turn out to be a nice person, too.\nFOL: exists x. ((Blue(x) & Young(x) & Green(x)) -> Nice(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Big people with rough, green skin are cold because of it.\nFOL: all x. (Big(x) & Rough(x) & Green(x) -> Cold(x))\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: all x. (Nice(x) & WearsRed(x) & Rough(x) -> GreenWithEnvy(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: exists x. ((Young(x) & Big(x) & Rough(x)) -> Round(x))\nTEXT: Every single blue and red person who acts sort of rough tends to be green in places.\nFOL: all x. ((Blue(x) & Red(x) & Rough(x)) -> Green(x))\nTEXT: Eric is cold.\nFOL: Cold(Eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob who frequently wears red clothes always feels very cold because of his young age on the team and his rough skin.\nFOL: all x. ((WearsRed(x) & Young(x) & Team(x) & Rough(x)) -> Cold(x))\nTEXT: Young Charlie has a round form, believes in green and is rough.\nFOL: Young(Charlie) & Round(Charlie) & Green(Charlie) & Rough(Charlie)\nTEXT: That guy Dave sure is nice.\nFOL: Dave & Nice(Dave)\nTEXT: People who have green body paint and act kind to others are quite young.\nFOL: all x. (GreenBodyPaint(x) & Kind(x) -> Young(x))\nTEXT: Any person that's blue, young and green will turn out to be a nice person, too.\nFOL: exists x. ((Blue(x) & Young(x) & Green(x)) -> Nice(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Big people with rough, green skin are cold because of it.\nFOL: all x. (Big(x) & Rough(x) & Green(x) -> Cold(x))\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: all x. (Nice(x) & WearsRed(x) & Rough(x) -> GreenWithEnvy(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: exists x. ((Young(x) & Big(x) & Rough(x)) -> Round(x))\nTEXT: Every single blue and red person who acts sort of rough tends to be green in places.\nFOL: all x. ((Blue(x) & Red(x) & Rough(x)) -> Green(x))\nTEXT: Eric is cold.\nFOL: Cold(Eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob who frequently wears red clothes always feels very cold because of his young age on the team and his rough skin.\nFOL: all x. ((WearsRed(x) & Young(x) & Team(x) & Rough(x)) -> Cold(x))\nTEXT: Young Charlie has a round form, believes in green and is rough.\nFOL: Young(Charlie) & Round(Charlie) & Green(Charlie) & Rough(Charlie)\nTEXT: That guy Dave sure is nice.\nFOL: Dave & Nice(Dave)\nTEXT: People who have green body paint and act kind to others are quite young.\nFOL: all x. (GreenBodyPaint(x) & Kind(x) -> Young(x))\nTEXT: Any person that's blue, young and green will turn out to be a nice person, too.\nFOL: exists x. (Blue(x) & Young(x) & Green(x) -> Nice(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Big people with rough, green skin are cold because of it.\nFOL: all x. (Big(x) & Rough(x) & Green(x) -> Cold(x))\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: all x. (Nice(x) & WearsRed(x) & Rough(x) -> GreenWithEnvy(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: exists x. (Young(x) & Big(x) & Rough(x) -> Round(x))\nTEXT: Every single blue and red person who acts sort of rough tends to be green in places.\nFOL: all x. (Blue(x) & Red(x) & Rough(x) -> Green(x))\nTEXT: Eric is cold.\nFOL: Cold(Eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob who frequently wears red clothes always feels very cold because of his young age on the team and his rough skin.\nFOL: all x. ((WearsRed(x) & Young(x) & Team(x) & Rough(x)) -> Cold(x))\nTEXT: Young Charlie has a round form, believes in green and is rough.\nFOL: Young(Charlie) & Round(Charlie) & Green(Charlie) & Rough(Charlie)\nTEXT: That guy Dave sure is nice.\nFOL: Nice(Dave)\nTEXT: People who have green body paint and act kind to others are quite young.\nFOL: all x. (GreenBodyPaint(x) & Kind(x) -> Young(x))\nTEXT: Any person that's blue, young and green will turn out to be a nice person, too.\nFOL: exists x. (Blue(x) & Young(x) & Green(x) -> Nice(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Big people with rough, green skin are cold because of it.\nFOL: all x. (Big(x) & Rough(x) & Green(x) -> Cold(x))\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: all x. (Nice(x) & WearsRed(x) & Rough(x) -> GreenWithEnvy(x))\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: exists x. (Young(x) & Big(x) & Rough(x) -> Round(x))\nTEXT: Every single blue and red person who acts sort of rough tends to be green in places.\nFOL: all x. ((Blue(x) & Red(x) & Rough(x)) -> Green(x))\nTEXT: Eric is cold.\nFOL: Cold(Eric)\n</EVALUATE>"
  ]
 },
 {
  "index": 12,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle eats the bear.\nFOL: BaldEagle(baldEagle) & Bear(bear) & Eat(baldEagle, bear)\nTEXT: The bald eagle eats the mouse.\nFOL: BaldEagle(baldEagle) & Mouse(mouse) & Eat(baldEagle, mouse)\nTEXT: The bald eagle is not big.\nFOL: BaldEagle(baldEagle) & -Big(baldEagle)\nTEXT: The bald eagle is nice.\nFOL: BaldEagle(baldEagle) & Nice(baldEagle)\nTEXT: The bald eagle is rough.\nFOL: BaldEagle(baldEagle) & Rough(baldEagle)\nTEXT: The bald eagle needs the dog.\nFOL: BaldEagle(baldEagle) & Dog(dog) & Need(baldEagle, dog)\nTEXT: The bald eagle sees the bear.\nFOL: BaldEagle(baldEagle) & Bear(bear) & See(baldEagle, bear)\nTEXT: The bear does not eat the bald eagle.\nFOL: Bear(bear) & -Eat(bear, baldEagle)\nTEXT: The bear eats the mouse.\nFOL: Bear(bear) & Mouse(mouse) & Eat(bear, mouse)\nTEXT: The bear is big.\nFOL: Bear(bear) & Big(bear)\nTEXT: The bear sees the bald eagle.\nFOL: Bear(bear) & BaldEagle(baldEagle) & See(bear, baldEagle)\nTEXT: The bear sees the mouse.\nFOL: Bear(bear) & Mouse(mouse) & See(bear, mouse)\nTEXT: The dog does not eat the mouse.\nFOL: Dog(dog) & -Eat(dog, mouse)\nTEXT: The dog needs the mouse.\nFOL: Dog(dog) & Mouse(mouse) & Need(dog, mouse)\nTEXT: The mouse is nice.\nFOL: Mouse(mouse) & Nice(mouse)\nTEXT: If someone sees the dog then the dog is nice.\nFOL: exists x. (See(x, dog) -> Nice(dog))\nTEXT: If someone needs the bald eagle then the bald eagle is rough.\nFOL: exists x. (Need(x, baldEagle) -> Rough(baldEagle))\nTEXT: If someone is cold then they see the dog.\nFOL: exists x. (Cold(x) -> See(x, dog))\nTEXT: If someone eats the bald eagle and they need the mouse then they see the mouse.\nFOL: exists x. (Eat(x, baldEagle) & Need(x, mouse) -> See(x, mouse))\nTEXT: If someone eats the bear then the bear needs the mouse.\nFOL: exists x. (Eat(x, bear) -> Need(bear, mouse))\nTEXT: If someone is blue and they need the dog then the dog does not need the bear.\nFOL: exists x. (Blue(x) & Need(x, dog) -> -Need(dog, bear))\nTEXT: If someone eats the bear then the bear is cold.\nFOL: exists x. (Eat(x, bear) -> Cold(bear))\nTEXT: If the dog is cold then the dog needs the mouse.\nFOL: Dog(dog) & Cold(dog) & Need(dog, mouse)\nTEXT: The bald eagle does not see the dog.\nFOL: BaldEagle(baldEagle) & -See(baldEagle, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the bear.\nFOL: BaldEagle(baldEagle) & Bear(bear) & Eat(baldEagle, bear)\nTEXT: The bald eagle eats the mouse.\nFOL: BaldEagle(baldEagle) & Mouse(mouse) & Eat(baldEagle, mouse)\nTEXT: The bald eagle is not big.\nFOL: BaldEagle(baldEagle) & -Big(baldEagle)\nTEXT: The bald eagle is nice.\nFOL: BaldEagle(baldEagle) & Nice(baldEagle)\nTEXT: The bald eagle is rough.\nFOL: BaldEagle(baldEagle) & Rough(baldEagle)\nTEXT: The bald eagle needs the dog.\nFOL: BaldEagle(baldEagle) & Need(baldEagle, dog)\nTEXT: The bald eagle sees the bear.\nFOL: BaldEagle(baldEagle) & Bear(bear) & See(baldEagle, bear)\nTEXT: The bear does not eat the bald eagle.\nFOL: Bear(bear) & -Eat(bear, baldEagle)\nTEXT: The bear eats the mouse.\nFOL: Bear(bear) & Mouse(mouse) & Eat(bear, mouse)\nTEXT: The bear is big.\nFOL: Bear(bear) & Big(bear)\nTEXT: The bear sees the bald eagle.\nFOL: Bear(bear) & BaldEagle(baldEagle) & See(bear, baldEagle)\nTEXT: The bear sees the mouse.\nFOL: Bear(bear) & Mouse(mouse) & See(bear, mouse)\nTEXT: The dog does not eat the mouse.\nFOL: Dog(dog) & -Eat(dog, mouse)\nTEXT: The dog needs the mouse.\nFOL: Dog(dog) & Mouse(mouse) & Need(dog, mouse)\nTEXT: The mouse is nice.\nFOL: Mouse(mouse) & Nice(mouse)\nTEXT: If someone sees the dog then the dog is nice.\nFOL: exists x. (See(x, dog) -> Nice(dog))\nTEXT: If someone needs the bald eagle then the bald eagle is rough.\nFOL: exists x. (Need(x, baldEagle) -> Rough(baldEagle))\nTEXT: If someone is cold then they see the dog.\nFOL: exists x. (Cold(x) -> See(x, dog))\nTEXT: If someone eats the bald eagle and they need the mouse then they see the mouse.\nFOL: exists x. (Eat(x, baldEagle) & Need(x, mouse) -> See(x, mouse))\nTEXT: If someone eats the bear then the bear needs the mouse.\nFOL: exists x. (Eat(x, bear) -> Need(x, mouse))\nTEXT: If someone is blue and they need the dog then the dog does not need the bear.\nFOL: exists x. (Blue(x) & Need(x, dog) -> -Need(dog, bear))\nTEXT: If someone eats the bear then the bear is cold.\nFOL: exists x. (Eat(x, bear) -> Cold(bear))\nTEXT: If the dog is cold then the dog needs the mouse.\nFOL: Dog(dog) & Cold(dog) & Need(dog, mouse)\nTEXT: The bald eagle does not see the dog.\nFOL: BaldEagle(baldEagle) & -See(baldEagle, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the bear.\nFOL: BaldEagle(baldEagle) & Bear(bear) & Eat(baldEagle, bear)\nTEXT: The bald eagle eats the mouse.\nFOL: BaldEagle(baldEagle) & Mouse(mouse) & Eat(baldEagle, mouse)\nTEXT: The bald eagle is not big.\nFOL: BaldEagle(baldEagle) & -Big(baldEagle)\nTEXT: The bald eagle is nice.\nFOL: BaldEagle(baldEagle) & Nice(baldEagle)\nTEXT: The bald eagle is rough.\nFOL: BaldEagle(baldEagle) & Rough(baldEagle)\nTEXT: The bald eagle needs the dog.\nFOL: BaldEagle(baldEagle) & Dog(dog) & Need(baldEagle, dog)\nTEXT: The bald eagle sees the bear.\nFOL: BaldEagle(baldEagle) & Bear(bear) & See(baldEagle, bear)\nTEXT: The bear does not eat the bald eagle.\nFOL: Bear(bear) & -Eat(bear, baldEagle)\nTEXT: The bear eats the mouse.\nFOL: Bear(bear) & Mouse(mouse) & Eat(bear, mouse)\nTEXT: The bear is big.\nFOL: Bear(bear) & Big(bear)\nTEXT: The bear sees the bald eagle.\nFOL: Bear(bear) & BaldEagle(baldEagle) & See(bear, baldEagle)\nTEXT: The bear sees the mouse.\nFOL: Bear(bear) & Mouse(mouse) & See(bear, mouse)\nTEXT: The dog does not eat the mouse.\nFOL: Dog(dog) & -Eat(dog, mouse)\nTEXT: The dog needs the mouse.\nFOL: Dog(dog) & Mouse(mouse) & Need(dog, mouse)\nTEXT: The mouse is nice.\nFOL: Mouse(mouse) & Nice(mouse)\nTEXT: If someone sees the dog then the dog is nice.\nFOL: exists x. (See(x, dog) -> Nice(dog))\nTEXT: If someone needs the bald eagle then the bald eagle is rough.\nFOL: exists x. (Need(x, baldEagle) -> Rough(baldEagle))\nTEXT: If someone is cold then they see the dog.\nFOL: exists x. (Cold(x) -> See(x, dog))\nTEXT: If someone eats the bald eagle and they need the mouse then they see the mouse.\nFOL: exists x. (Eat(x, baldEagle) & Need(x, mouse) -> See(x, mouse))\nTEXT: If someone eats the bear then the bear needs the mouse.\nFOL: exists x. (Eat(x, bear) -> Need(x, mouse))\nTEXT: If someone is blue and they need the dog then the dog does not need the bear.\nFOL: exists x. (Blue(x) & Need(x, dog) -> -Need(dog, bear))\nTEXT: If someone eats the bear then the bear is cold.\nFOL: exists x. (Eat(x, bear) -> Cold(bear))\nTEXT: If the dog is cold then the dog needs the mouse.\nFOL: Dog(dog) & Cold(dog) & Need(dog, mouse)\nTEXT: The bald eagle does not see the dog.\nFOL: BaldEagle(baldEagle) & -See(baldEagle, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the bear.\nFOL: BaldEagle(baldEagle) & Bear(bear) & Eat(baldEagle, bear)\nTEXT: The bald eagle eats the mouse.\nFOL: BaldEagle(baldEagle) & Mouse(mouse) & Eat(baldEagle, mouse)\nTEXT: The bald eagle is not big.\nFOL: BaldEagle(baldEagle) & -Big(baldEagle)\nTEXT: The bald eagle is nice.\nFOL: BaldEagle(baldEagle) & Nice(baldEagle)\nTEXT: The bald eagle is rough.\nFOL: BaldEagle(baldEagle) & Rough(baldEagle)\nTEXT: The bald eagle needs the dog.\nFOL: BaldEagle(baldEagle) & Need(baldEagle, dog)\nTEXT: The bald eagle sees the bear.\nFOL: BaldEagle(baldEagle) & Bear(bear) & See(baldEagle, bear)\nTEXT: The bear does not eat the bald eagle.\nFOL: Bear(bear) & -Eat(bear, baldEagle)\nTEXT: The bear eats the mouse.\nFOL: Bear(bear) & Mouse(mouse) & Eat(bear, mouse)\nTEXT: The bear is big.\nFOL: Bear(bear) & Big(bear)\nTEXT: The bear sees the bald eagle.\nFOL: Bear(bear) & BaldEagle(baldEagle) & See(bear, baldEagle)\nTEXT: The bear sees the mouse.\nFOL: Bear(bear) & Mouse(mouse) & See(bear, mouse)\nTEXT: The dog does not eat the mouse.\nFOL: Dog(dog) & -Eat(dog, mouse)\nTEXT: The dog needs the mouse.\nFOL: Dog(dog) & Mouse(mouse) & Need(dog, mouse)\nTEXT: The mouse is nice.\nFOL: Mouse(mouse) & Nice(mouse)\nTEXT: If someone sees the dog then the dog is nice.\nFOL: exists x. (See(x, dog) -> Nice(dog))\nTEXT: If someone needs the bald eagle then the bald eagle is rough.\nFOL: exists x. (Need(x, baldEagle) -> Rough(baldEagle))\nTEXT: If someone is cold then they see the dog.\nFOL: exists x. (Cold(x) -> See(x, dog))\nTEXT: If someone eats the bald eagle and they need the mouse then they see the mouse.\nFOL: exists x. (Eat(x, baldEagle) & Need(x, mouse) -> See(x, mouse))\nTEXT: If someone eats the bear then the bear needs the mouse.\nFOL: exists x. (Eat(x, bear) -> Need(x, mouse))\nTEXT: If someone is blue and they need the dog then the dog does not need the bear.\nFOL: exists x. (Blue(x) & Need(x, dog) -> -Need(x, bear))\nTEXT: If someone eats the bear then the bear is cold.\nFOL: exists x. (Eat(x, bear) -> Cold(x))\nTEXT: If the dog is cold then the dog needs the mouse.\nFOL: Dog(dog) & Cold(dog) & Need(dog, mouse)\nTEXT: The bald eagle does not see the dog.\nFOL: BaldEagle(baldEagle) & -See(baldEagle, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the bear.\nFOL: BaldEagle(baldEagle) & Bear(bear) & Eat(baldEagle, bear)\nTEXT: The bald eagle eats the mouse.\nFOL: BaldEagle(baldEagle) & Mouse(mouse) & Eat(baldEagle, mouse)\nTEXT: The bald eagle is not big.\nFOL: BaldEagle(baldEagle) & -Big(baldEagle)\nTEXT: The bald eagle is nice.\nFOL: BaldEagle(baldEagle) & Nice(baldEagle)\nTEXT: The bald eagle is rough.\nFOL: BaldEagle(baldEagle) & Rough(baldEagle)\nTEXT: The bald eagle needs the dog.\nFOL: BaldEagle(baldEagle) & Dog(dog) & Need(baldEagle, dog)\nTEXT: The bald eagle sees the bear.\nFOL: BaldEagle(baldEagle) & Bear(bear) & See(baldEagle, bear)\nTEXT: The bear does not eat the bald eagle.\nFOL: Bear(bear) & -Eat(bear, baldEagle)\nTEXT: The bear eats the mouse.\nFOL: Bear(bear) & Mouse(mouse) & Eat(bear, mouse)\nTEXT: The bear is big.\nFOL: Bear(bear) & Big(bear)\nTEXT: The bear sees the bald eagle.\nFOL: Bear(bear) & BaldEagle(baldEagle) & See(bear, baldEagle)\nTEXT: The bear sees the mouse.\nFOL: Bear(bear) & Mouse(mouse) & See(bear, mouse)\nTEXT: The dog does not eat the mouse.\nFOL: Dog(dog) & -Eat(dog, mouse)\nTEXT: The dog needs the mouse.\nFOL: Dog(dog) & Mouse(mouse) & Need(dog, mouse)\nTEXT: The mouse is nice.\nFOL: Mouse(mouse) & Nice(mouse)\nTEXT: If someone sees the dog then the dog is nice.\nFOL: exists x. (See(x, dog) -> Nice(dog))\nTEXT: If someone needs the bald eagle then the bald eagle is rough.\nFOL: exists x. (Need(x, baldEagle) -> Rough(baldEagle))\nTEXT: If someone is cold then they see the dog.\nFOL: exists x. (Cold(x) -> See(x, dog))\nTEXT: If someone eats the bald eagle and they need the mouse then they see the mouse.\nFOL: exists x. (Eat(x, baldEagle) & Need(x, mouse) -> See(x, mouse))\nTEXT: If someone eats the bear then the bear needs the mouse.\nFOL: exists x. (Eat(x, bear) -> Need(bear, mouse))\nTEXT: If someone is blue and they need the dog then the dog does not need the bear.\nFOL: exists x. (Blue(x) & Need(x, dog) -> -Need(bear, dog))\nTEXT: If someone eats the bear then the bear is cold.\nFOL: exists x. (Eat(x, bear) -> Cold(bear))\nTEXT: If the dog is cold then the dog needs the mouse.\nFOL: Dog(dog) & Cold(dog) & Need(dog, mouse)\nTEXT: The bald eagle does not see the dog.\nFOL: BaldEagle(baldEagle) & -See(baldEagle, dog)\n</EVALUATE>"
  ]
 },
 {
  "index": 13,
  "responses": [
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: Cows(cow) & Dogs(dog) & Chases(cow, dog)\nTEXT: The cow does not chase the squirrel.\nFOL: Cows(cow) & Squirrels(squirrel) & -Chases(cow, squirrel)\nTEXT: The cow is kind.\nFOL: Cows(cow) & Kind(cow)\nTEXT: The cow is young.\nFOL: Cows(cow) & Young(cow)\nTEXT: The dog chases the cow.\nFOL: Dogs(dog) & Cows(cow) & Chases(dog, cow)\nTEXT: The dog is round.\nFOL: Dogs(dog) & Round(dog)\nTEXT: The dog likes the tiger.\nFOL: Dogs(dog) & Tigers(tiger) & Likes(dog, tiger)\nTEXT: The squirrel eats the dog.\nFOL: Squirrels(squirrel) & Dogs(dog) & Eats(squirrel, dog)\nTEXT: The squirrel is green.\nFOL: Squirrels(squirrel) & Green(squirrel)\nTEXT: The squirrel does not like the tiger.\nFOL: Squirrels(squirrel) & Tigers(tiger) & -Likes(squirrel, tiger)\nTEXT: The tiger eats the dog.\nFOL: Tigers(tiger) & Dogs(dog) & Eats(tiger, dog)\nTEXT: The tiger is red.\nFOL: Tigers(tiger) & Red(tiger)\nTEXT: If the tiger chases the squirrel then the tiger likes the dog.\nFOL: Tigers(tiger) & Squirrels(squirrel) & Chases(tiger, squirrel) -> Likes(tiger, dog)\nTEXT: If something is kind and it does not eat the dog then the dog is young.\nFOL: x. (Kind(x) & -Eats(x, dog) -> Young(dog))\nTEXT: If something chases the squirrel then it likes the tiger.\nFOL: x. (Chases(x, squirrel) -> Likes(x, tiger))\nTEXT: If something is young then it likes the tiger.\nFOL: x. (Young(x) -> Likes(x, tiger))\nTEXT: If something is red and it eats the dog then the dog is red.\nFOL: x. (Red(x) & Eats(x, dog) -> Red(dog))\nTEXT: If something likes the tiger and the tiger eats the dog then it is green.\nFOL: x. (Likes(x, tiger) & Eats(tiger, dog) -> Green(x))\nTEXT: If something likes the tiger then it chases the tiger.\nFOL: x. (Likes(x, tiger) -> Chases(x, tiger))\nTEXT: If something is green then it eats the cow.\nFOL: x. (Green(x) -> Eats(x, cow))\nTEXT: The tiger is green.\nFOL: Tigers(tiger) & Green(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: Cows(cow) & Dogs(dog) & Chases(cow, dog)\nTEXT: The cow does not chase the squirrel.\nFOL: Cows(cow) & Squirrels(squirrel) & -Chases(cow, squirrel)\nTEXT: The cow is kind.\nFOL: Cows(cow) & Kind(cow)\nTEXT: The cow is young.\nFOL: Cows(cow) & Young(cow)\nTEXT: The dog chases the cow.\nFOL: Dogs(dog) & Cows(cow) & Chases(dog, cow)\nTEXT: The dog is round.\nFOL: Dogs(dog) & Round(dog)\nTEXT: The dog likes the tiger.\nFOL: Dogs(dog) & Tigers(tiger) & Likes(dog, tiger)\nTEXT: The squirrel eats the dog.\nFOL: Squirrels(squirrel) & Dogs(dog) & Eats(squirrel, dog)\nTEXT: The squirrel is green.\nFOL: Squirrels(squirrel) & Green(squirrel)\nTEXT: The squirrel does not like the tiger.\nFOL: Squirrels(squirrel) & Tigers(tiger) & -Likes(squirrel, tiger)\nTEXT: The tiger eats the dog.\nFOL: Tigers(tiger) & Dogs(dog) & Eats(tiger, dog)\nTEXT: The tiger is red.\nFOL: Tigers(tiger) & Red(tiger)\nTEXT: If the tiger chases the squirrel then the tiger likes the dog.\nFOL: Tigers(tiger) & Squirrels(squirrel) & Chases(tiger, squirrel) -> Likes(tiger, dog)\nTEXT: If something is kind and it does not eat the dog then the dog is young.\nFOL: Kind(x) & -Eats(x, dog) -> Young(x)\nTEXT: If something chases the squirrel then it likes the tiger.\nFOL: Chases(x, squirrel) -> Likes(x, tiger)\nTEXT: If something is young then it likes the tiger.\nFOL: Young(x) -> Likes(x, tiger)\nTEXT: If something is red and it eats the dog then the dog is red.\nFOL: Red(x) & Eats(x, dog) -> Red(dog)\nTEXT: If something likes the tiger and the tiger eats the dog then it is green.\nFOL: Likes(x, tiger) & Eats(tiger, dog) -> Green(x)\nTEXT: If something likes the tiger then it chases the tiger.\nFOL: Likes(x, tiger) -> Chases(x, tiger)\nTEXT: If something is green then it eats the cow.\nFOL: Green(x) -> Eats(x, cow)\nTEXT: The tiger is green.\nFOL: Tigers(tiger) & Green(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: Cows(cow) & Dogs(dog) & Chases(cow, dog)\nTEXT: The cow does not chase the squirrel.\nFOL: Cows(cow) & Squirrels(squirrel) & -Chases(cow, squirrel)\nTEXT: The cow is kind.\nFOL: Cows(cow) & Kind(cow)\nTEXT: The cow is young.\nFOL: Cows(cow) & Young(cow)\nTEXT: The dog chases the cow.\nFOL: Dogs(dog) & Cows(cow) & Chases(dog, cow)\nTEXT: The dog is round.\nFOL: Dogs(dog) & Round(dog)\nTEXT: The dog likes the tiger.\nFOL: Dogs(dog) & Tigers(tiger) & Likes(dog, tiger)\nTEXT: The squirrel eats the dog.\nFOL: Squirrels(squirrel) & Dogs(dog) & Eats(squirrel, dog)\nTEXT: The squirrel is green.\nFOL: Squirrels(squirrel) & Green(squirrel)\nTEXT: The squirrel does not like the tiger.\nFOL: Squirrels(squirrel) & Tigers(tiger) & -Likes(squirrel, tiger)\nTEXT: The tiger eats the dog.\nFOL: Tigers(tiger) & Dogs(dog) & Eats(tiger, dog)\nTEXT: The tiger is red.\nFOL: Tigers(tiger) & Red(tiger)\nTEXT: If the tiger chases the squirrel then the tiger likes the dog.\nFOL: Chases(tiger, squirrel) -> Likes(tiger, dog)\nTEXT: If something is kind and it does not eat the dog then the dog is young.\nFOL: Kind(x) & -Eats(x, dog) -> Young(x)\nTEXT: If something chases the squirrel then it likes the tiger.\nFOL: Chases(x, squirrel) -> Likes(x, tiger)\nTEXT: If something is young then it likes the tiger.\nFOL: Young(x) -> Likes(x, tiger)\nTEXT: If something is red and it eats the dog then the dog is red.\nFOL: Red(x) & Eats(x, dog) -> Red(dog)\nTEXT: If something likes the tiger and the tiger eats the dog then it is green.\nFOL: Likes(x, tiger) & Eats(tiger, dog) -> Green(x)\nTEXT: If something likes the tiger then it chases the tiger.\nFOL: Likes(x, tiger) -> Chases(x, tiger)\nTEXT: If something is green then it eats the cow.\nFOL: Green(x) -> Eats(x, cow)\nTEXT: The tiger is green.\nFOL: Tigers(tiger) & Green(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: Cows(cow) & Dogs(dog) & Chases(cow, dog)\nTEXT: The cow does not chase the squirrel.\nFOL: Cows(cow) & Squirrels(squirrel) & -Chases(cow, squirrel)\nTEXT: The cow is kind.\nFOL: Cows(cow) & Kind(cow)\nTEXT: The cow is young.\nFOL: Cows(cow) & Young(cow)\nTEXT: The dog chases the cow.\nFOL: Dogs(dog) & Cows(cow) & Chases(dog, cow)\nTEXT: The dog is round.\nFOL: Dogs(dog) & Round(dog)\nTEXT: The dog likes the tiger.\nFOL: Dogs(dog) & Tigers(tiger) & Likes(dog, tiger)\nTEXT: The squirrel eats the dog.\nFOL: Squirrels(squirrel) & Dogs(dog) & Eats(squirrel, dog)\nTEXT: The squirrel is green.\nFOL: Squirrels(squirrel) & Green(squirrel)\nTEXT: The squirrel does not like the tiger.\nFOL: Squirrels(squirrel) & Tigers(tiger) & -Likes(squirrel, tiger)\nTEXT: The tiger eats the dog.\nFOL: Tigers(tiger) & Dogs(dog) & Eats(tiger, dog)\nTEXT: The tiger is red.\nFOL: Tigers(tiger) & Red(tiger)\nTEXT: If the tiger chases the squirrel then the tiger likes the dog.\nFOL: Tigers(tiger) & Squirrels(squirrel) & Chases(tiger, squirrel) & Likes(tiger, dog)\nTEXT: If something is kind and it does not eat the dog then the dog is young.\nFOL: x. (Kind(x) & -Eats(x, dog) -> Young(dog))\nTEXT: If something chases the squirrel then it likes the tiger.\nFOL: x. (Chases(x, squirrel) -> Likes(x, tiger))\nTEXT: If something is young then it likes the tiger.\nFOL: x. (Young(x) -> Likes(x, tiger))\nTEXT: If something is red and it eats the dog then the dog is red.\nFOL: x. (Red(x) & Eats(x, dog) -> Red(dog))\nTEXT: If something likes the tiger and the tiger eats the dog then it is green.\nFOL: x. (Likes(x, tiger) & Eats(tiger, dog) -> Green(x))\nTEXT: If something likes the tiger then it chases the tiger.\nFOL: x. (Likes(x, tiger) -> Chases(x, tiger))\nTEXT: If something is green then it eats the cow.\nFOL: x. (Green(x) -> Eats(x, cow))\nTEXT: The tiger is green.\nFOL: Tigers(tiger) & Green(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: Cows(cow) & Dogs(dog) & Chases(cow, dog)\nTEXT: The cow does not chase the squirrel.\nFOL: Cows(cow) & Squirrels(squirrel) & -Chases(cow, squirrel)\nTEXT: The cow is kind.\nFOL: Cows(cow) & Kind(cow)\nTEXT: The cow is young.\nFOL: Cows(cow) & Young(cow)\nTEXT: The dog chases the cow.\nFOL: Dogs(dog) & Cows(cow) & Chases(dog, cow)\nTEXT: The dog is round.\nFOL: Dogs(dog) & Round(dog)\nTEXT: The dog likes the tiger.\nFOL: Dogs(dog) & Tigers(tiger) & Likes(dog, tiger)\nTEXT: The squirrel eats the dog.\nFOL: Squirrels(squirrel) & Dogs(dog) & Eats(squirrel, dog)\nTEXT: The squirrel is green.\nFOL: Squirrels(squirrel) & Green(squirrel)\nTEXT: The squirrel does not like the tiger.\nFOL: Squirrels(squirrel) & Tigers(tiger) & -Likes(squirrel, tiger)\nTEXT: The tiger eats the dog.\nFOL: Tigers(tiger) & Dogs(dog) & Eats(tiger, dog)\nTEXT: The tiger is red.\nFOL: Tigers(tiger) & Red(tiger)\nTEXT: If the tiger chases the squirrel then the tiger likes the dog.\nFOL: Tigers(tiger) & Squirrels(squirrel) & Chases(tiger, squirrel) -> Likes(tiger, dog)\nTEXT: If something is kind and it does not eat the dog then the dog is young.\nFOL: x. (Kind(x) & -Eats(x, dog) -> Young(dog))\nTEXT: If something chases the squirrel then it likes the tiger.\nFOL: x. (Chases(x, squirrel) -> Likes(x, tiger))\nTEXT: If something is young then it likes the tiger.\nFOL: x. (Young(x) -> Likes(x, tiger))\nTEXT: If something is red and it eats the dog then the dog is red.\nFOL: x. (Red(x) & Eats(x, dog) -> Red(dog))\nTEXT: If something likes the tiger then it chases the tiger.\nFOL: x. (Likes(x, tiger) -> Chases(x, tiger))\nTEXT: If something is green then it eats the cow.\nFOL: x. (Green(x) -> Eats(x, cow))\nTEXT: The tiger is green.\nFOL: Tigers(tiger) & Green(tiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 14,
  "responses": [
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: Chases(Cow, Dog)\nTEXT: The cow does not see the tiger.\nFOL: -Sees(Cow, Tiger)\nTEXT: The cow visits the dog.\nFOL: Visits(Cow, Dog)\nTEXT: The cow visits the tiger.\nFOL: Visits(Cow, Tiger)\nTEXT: The dog does not see the lion.\nFOL: -Sees(Dog, Lion)\nTEXT: The lion chases the cow.\nFOL: Chases(Lion, Cow)\nTEXT: The lion chases the dog.\nFOL: Chases(Lion, Dog)\nTEXT: The lion does not chase the tiger.\nFOL: -Chases(Lion, Tiger)\nTEXT: The lion is young.\nFOL: Young(Lion)\nTEXT: The lion sees the cow.\nFOL: Sees(Lion, Cow)\nTEXT: The lion does not see the dog.\nFOL: -Sees(Lion, Dog)\nTEXT: The lion sees the tiger.\nFOL: Sees(Lion, Tiger)\nTEXT: The lion visits the tiger.\nFOL: Visits(Lion, Tiger)\nTEXT: The tiger sees the dog.\nFOL: Sees(Tiger, Dog)\nTEXT: The tiger visits the lion.\nFOL: Visits(Tiger, Lion)\nTEXT: If something chases the tiger and the tiger chases the lion then it is not young.\nFOL: all x. ((Chases(x, Tiger) & Chases(Tiger, Lion)) -> -Young(x))\nTEXT: If something visits the lion then the lion is green.\nFOL: all x. (Visits(x, Lion) -> Green(Lion))\nTEXT: If something sees the dog then it does not see the lion.\nFOL: all x. (Sees(x, Dog) -> -Sees(x, Lion))\nTEXT: If something is cold then it chases the cow.\nFOL: all x. (Cold(x) -> Chases(x, Cow))\nTEXT: If something sees the tiger then the tiger is cold.\nFOL: all x. (Sees(x, Tiger) -> Cold(Tiger))\nTEXT: If something visits the cow then the cow visits the tiger.\nFOL: all x. (Visits(x, Cow) -> Visits(x, Tiger))\nTEXT: If something sees the tiger then it is nice.\nFOL: all x. (Sees(x, Tiger) -> Nice(x))\nTEXT: If something visits the lion and it chases the cow then it chases the dog.\nFOL: all x. ((Visits(x, Lion) & Chases(x, Cow)) -> Chases(x, Dog))\nTEXT: The cow is not nice.\nFOL: -Nice(Cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: Chases(cow, dog)\nTEXT: The cow does not see the tiger.\nFOL: -Sees(cow, tiger)\nTEXT: The cow visits the dog.\nFOL: Visits(cow, dog)\nTEXT: The cow visits the tiger.\nFOL: Visits(cow, tiger)\nTEXT: The dog does not see the lion.\nFOL: -Sees(dog, lion)\nTEXT: The lion chases the cow.\nFOL: Chases(lion, cow)\nTEXT: The lion chases the dog.\nFOL: Chases(lion, dog)\nTEXT: The lion does not chase the tiger.\nFOL: -Chases(lion, tiger)\nTEXT: The lion is young.\nFOL: Young(lion)\nTEXT: The lion sees the cow.\nFOL: Sees(lion, cow)\nTEXT: The lion does not see the dog.\nFOL: -Sees(lion, dog)\nTEXT: The lion sees the tiger.\nFOL: Sees(lion, tiger)\nTEXT: The lion visits the tiger.\nFOL: Visits(lion, tiger)\nTEXT: The tiger sees the dog.\nFOL: Sees(tiger, dog)\nTEXT: The tiger visits the lion.\nFOL: Visits(tiger, lion)\nTEXT: If something chases the tiger and the tiger chases the lion then it is not young.\nFOL: all x. ((Chases(x, tiger) & Chases(tiger, lion)) -> -Young(x))\nTEXT: If something visits the lion then the lion is green.\nFOL: all x. (Visits(x, lion) -> Green(lion))\nTEXT: If something sees the dog then it does not see the lion.\nFOL: all x. (Sees(x, dog) -> -Sees(x, lion))\nTEXT: If something is cold then it chases the cow.\nFOL: all x. (Cold(x) -> Chases(x, cow))\nTEXT: If something sees the tiger then the tiger is cold.\nFOL: all x. (Sees(x, tiger) -> Cold(tiger))\nTEXT: If something visits the cow then the cow visits the tiger.\nFOL: all x. (Visits(x, cow) -> Visits(x, tiger))\nTEXT: If something sees the tiger then it is nice.\nFOL: all x. (Sees(x, tiger) -> Nice(x))\nTEXT: If something visits the lion and it chases the cow then it chases the dog.\nFOL: all x. ((Visits(x, lion) & Chases(x, cow)) -> Chases(x, dog))\nTEXT: The cow is not nice.\nFOL: -Nice(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: Chases(Cow, Dog)\nTEXT: The cow does not see the tiger.\nFOL: -Sees(Cow, Tiger)\nTEXT: The cow visits the dog.\nFOL: Visits(Cow, Dog)\nTEXT: The cow visits the tiger.\nFOL: Visits(Cow, Tiger)\nTEXT: The dog does not see the lion.\nFOL: -Sees(Dog, Lion)\nTEXT: The lion chases the cow.\nFOL: Chases(Lion, Cow)\nTEXT: The lion chases the dog.\nFOL: Chases(Lion, Dog)\nTEXT: The lion does not chase the tiger.\nFOL: -Chases(Lion, Tiger)\nTEXT: The lion is young.\nFOL: Young(Lion)\nTEXT: The lion sees the cow.\nFOL: Sees(Lion, Cow)\nTEXT: The lion does not see the dog.\nFOL: -Sees(Lion, Dog)\nTEXT: The lion sees the tiger.\nFOL: Sees(Lion, Tiger)\nTEXT: The lion visits the tiger.\nFOL: Visits(Lion, Tiger)\nTEXT: The tiger sees the dog.\nFOL: Sees(Tiger, Dog)\nTEXT: The tiger visits the lion.\nFOL: Visits(Tiger, Lion)\nTEXT: If something chases the tiger and the tiger chases the lion then it is not young.\nFOL: all x. ((Chases(x, Tiger) & Chases(Tiger, Lion)) -> -Young(x))\nTEXT: If something visits the lion then the lion is green.\nFOL: all x. (Visits(x, Lion) -> Green(Lion))\nTEXT: If something sees the dog then it does not see the lion.\nFOL: all x. (Sees(x, Dog) -> -Sees(x, Lion))\nTEXT: If something is cold then it chases the cow.\nFOL: all x. (Cold(x) -> Chases(x, Cow))\nTEXT: If something sees the tiger then the tiger is cold.\nFOL: all x. (Sees(x, Tiger) -> Cold(Tiger))\nTEXT: If something visits the cow then the cow visits the tiger.\nFOL: all x. (Visits(x, Cow) -> Visits(x, Tiger))\nTEXT: If something sees the tiger then it is nice.\nFOL: all x. (Sees(x, Tiger) -> Nice(x))\nTEXT: If something visits the lion and it chases the cow then it chases the dog.\nFOL: all x. (Visits(x, Lion) & Chases(x, Cow) -> Chases(x, Dog))\nTEXT: The cow is not nice.\nFOL: -Nice(Cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: Chases(cow, dog)\nTEXT: The cow does not see the tiger.\nFOL: -Sees(cow, tiger)\nTEXT: The cow visits the dog.\nFOL: Visits(cow, dog)\nTEXT: The cow visits the tiger.\nFOL: Visits(cow, tiger)\nTEXT: The dog does not see the lion.\nFOL: -Sees(dog, lion)\nTEXT: The lion chases the cow.\nFOL: Chases(lion, cow)\nTEXT: The lion chases the dog.\nFOL: Chases(lion, dog)\nTEXT: The lion does not chase the tiger.\nFOL: -Chases(lion, tiger)\nTEXT: The lion is young.\nFOL: Young(lion)\nTEXT: The lion sees the cow.\nFOL: Sees(lion, cow)\nTEXT: The lion does not see the dog.\nFOL: -Sees(lion, dog)\nTEXT: The lion sees the tiger.\nFOL: Sees(lion, tiger)\nTEXT: The lion visits the tiger.\nFOL: Visits(lion, tiger)\nTEXT: The tiger sees the dog.\nFOL: Sees(tiger, dog)\nTEXT: The tiger visits the lion.\nFOL: Visits(tiger, lion)\nTEXT: If something chases the tiger and the tiger chases the lion then it is not young.\nFOL: all x. ((Chases(x, tiger) & Chases(tiger, lion)) -> -Young(x))\nTEXT: If something visits the lion then the lion is green.\nFOL: all x. (Visits(x, lion) -> Green(lion))\nTEXT: If something sees the dog then it does not see the lion.\nFOL: all x. (Sees(x, dog) -> -Sees(x, lion))\nTEXT: If something is cold then it chases the cow.\nFOL: all x. (Cold(x) -> Chases(x, cow))\nTEXT: If something sees the tiger then the tiger is cold.\nFOL: all x. (Sees(x, tiger) -> Cold(tiger))\nTEXT: If something visits the cow then the cow visits the tiger.\nFOL: all x. (Visits(x, cow) -> Visits(x, tiger))\nTEXT: If something sees the tiger then it is nice.\nFOL: all x. (Sees(x, tiger) -> Nice(x))\nTEXT: If something visits the lion and it chases the cow then it chases the dog.\nFOL: all x. (Visits(x, lion) & Chases(x, cow) -> Chases(x, dog))\nTEXT: The cow is not nice.\nFOL: -Nice(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the dog.\nFOL: Chases(Cow, Dog)\nTEXT: The cow does not see the tiger.\nFOL: -Sees(Cow, Tiger)\nTEXT: The cow visits the dog.\nFOL: Visits(Cow, Dog)\nTEXT: The cow visits the tiger.\nFOL: Visits(Cow, Tiger)\nTEXT: The dog does not see the lion.\nFOL: -Sees(Dog, Lion)\nTEXT: The lion chases the cow.\nFOL: Chases(Lion, Cow)\nTEXT: The lion chases the dog.\nFOL: Chases(Lion, Dog)\nTEXT: The lion does not chase the tiger.\nFOL: -Chases(Lion, Tiger)\nTEXT: The lion is young.\nFOL: Young(Lion)\nTEXT: The lion sees the cow.\nFOL: Sees(Lion, Cow)\nTEXT: The lion does not see the dog.\nFOL: -Sees(Lion, Dog)\nTEXT: The lion sees the tiger.\nFOL: Sees(Lion, Tiger)\nTEXT: The lion visits the tiger.\nFOL: Visits(Lion, Tiger)\nTEXT: The tiger sees the dog.\nFOL: Sees(Tiger, Dog)\nTEXT: The tiger visits the lion.\nFOL: Visits(Tiger, Lion)\nTEXT: If something chases the tiger and the tiger chases the lion then it is not young.\nFOL: all x. ((Chases(x, Tiger) & Chases(Tiger, Lion)) -> -Young(x))\nTEXT: If something visits the lion then the lion is green.\nFOL: all x. (Visits(x, Lion) -> Green(Lion))\nTEXT: If something sees the dog then it does not see the lion.\nFOL: all x. (Sees(x, Dog) -> -Sees(x, Lion))\nTEXT: If something is cold then it chases the cow.\nFOL: all x. (Cold(x) -> Chases(x, Cow))\nTEXT: If something sees the tiger then the tiger is cold.\nFOL: all x. (Sees(x, Tiger) -> Cold(Tiger))\nTEXT: If something visits the cow then the cow visits the tiger.\nFOL: all x. (Visits(x, Cow) -> Visits(Cow, Tiger))\nTEXT: If something sees the tiger then it is nice.\nFOL: all x. (Sees(x, Tiger) -> Nice(x))\nTEXT: If something visits the lion and it chases the cow then it chases the dog.\nFOL: all x. ((Visits(x, Lion) & Chases(x, Cow)) -> Chases(x, Dog))\nTEXT: The cow is not nice.\nFOL: -Nice(Cow)\n</EVALUATE>"
  ]
 },
 {
  "index": 15,
  "responses": [
   "<EVALUATE>\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: Harry is cold.\nFOL: Cold(harry)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is kind.\nFOL: Kind(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: Harry is young.\nFOL: Young(harry)\nTEXT: Quiet people are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nTEXT: All green, kind people are blue.\nFOL: all x. (Green(x) & Kind(x) -> Blue(x))\nTEXT: Erin is kind.\nFOL: Kind(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is green.\nFOL: Green(erin)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: Harry is cold.\nFOL: Cold(harry)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is kind.\nFOL: Kind(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: Harry is young.\nFOL: Young(harry)\nTEXT: Quiet people are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nTEXT: All green, kind people are blue.\nFOL: all x. ((Green(x) & Kind(x)) -> Blue(x))\nTEXT: Erin is kind.\nFOL: Kind(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is green.\nFOL: Green(erin)\n\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\n\nTEXT: Erin is smart.\nFOL: Smart(erin)\n\nTEXT: Harry is blue.\nFOL: Blue(harry)\n\nTEXT: Harry is cold.\nFOL: Cold(harry)\n\nTEXT: Harry is green.\nFOL: Green(harry)\n\nTEXT: Harry is kind.\nFOL: Kind(harry)\n\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\n\nTEXT: Harry is smart.\nFOL: Smart(harry)\n\nTEXT: Harry is young.\nFOL: Young(harry)\n\nTEXT: Quiet people are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\n\nTEXT: All green, kind people are blue.\nFOL: all x. (Green(x) & Kind(x) -> Blue(x))\n\nTEXT: Erin is kind.\nFOL: Kind(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is green.\nFOL: Green(erin)\n\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\n\nTEXT: Erin is smart.\nFOL: Smart(erin)\n\nTEXT: Harry is blue.\nFOL: Blue(harry)\n\nTEXT: Harry is cold.\nFOL: Cold(harry)\n\nTEXT: Harry is green.\nFOL: Green(harry)\n\nTEXT: Harry is kind.\nFOL: Kind(harry)\n\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\n\nTEXT: Harry is smart.\nFOL: Smart(harry)\n\nTEXT: Harry is young.\nFOL: Young(harry)\n\nTEXT: Quiet people are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\n\nTEXT: All green, kind people are blue.\nFOL: all x. ((Green(x) & Kind(x)) -> Blue(x))\n\nTEXT: Erin is kind.\nFOL: Kind(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is green.\nFOL: GreenErin\nTEXT: Erin is quiet.\nFOL: QuietErin\nTEXT: Erin is smart.\nFOL: SmartErin\nTEXT: Harry is blue.\nFOL: BlueHarry\nTEXT: Harry is cold.\nFOL: ColdHarry\nTEXT: Harry is green.\nFOL: GreenHarry\nTEXT: Harry is kind.\nFOL: KindHarry\nTEXT: Harry is quiet.\nFOL: QuietHarry\nTEXT: Harry is smart.\nFOL: SmartHarry\nTEXT: Harry is young.\nFOL: YoungHarry\nTEXT: Quiet people are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nTEXT: All green, kind people are blue.\nFOL: all x. ((Green(x) & Kind(x)) -> Blue(x))\nTEXT: Erin is kind.\nFOL: KindErin\n</EVALUATE>"
  ]
 },
 {
  "index": 16,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(Anne)\nTEXT: Anne is not green.\nFOL: -Green(Anne)\nTEXT: Anne is kind.\nFOL: Kind(Anne)\nTEXT: Anne is smart.\nFOL: Smart(Anne)\nTEXT: Charlie is not white.\nFOL: -White(Charlie)\nTEXT: Erin is not green.\nFOL: -Green(Erin)\nTEXT: Erin is not nice.\nFOL: -Nice(Erin)\nTEXT: Harry is furry.\nFOL: Furry(Harry)\nTEXT: Harry is nice.\nFOL: Nice(Harry)\nTEXT: Harry is white.\nFOL: White(Harry)\nTEXT: All white things are not smart.\nFOL: all x. (White(x) -> -Smart(x))\nTEXT: If Erin is white and Erin is furry then Erin is nice.\nFOL: (White(Erin) & Furry(Erin)) -> Nice(Erin)\nTEXT: If something is furry and kind then it is green.\nFOL: all x. (Furry(x) & Kind(x) -> Green(x))\nTEXT: If something is kind and not nice then it is not big.\nFOL: all x. (Kind(x) & -Nice(x) -> -Big(x))\nTEXT: If Harry is kind and Harry is nice then Harry is furry.\nFOL: (Kind(Harry) & Nice(Harry)) -> Furry(Harry)\nTEXT: If Harry is green and Harry is not smart then Harry is furry.\nFOL: (Green(Harry) & -Smart(Harry)) -> Furry(Harry)\nTEXT: Harry is not green.\nFOL: -Green(Harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(Anne)\nTEXT: Anne is not green.\nFOL: -Green(Anne)\nTEXT: Anne is kind.\nFOL: Kind(Anne)\nTEXT: Anne is smart.\nFOL: Smart(Anne)\nTEXT: Charlie is not white.\nFOL: -White(Charlie)\nTEXT: Erin is not green.\nFOL: -Green(Erin)\nTEXT: Erin is not nice.\nFOL: -Nice(Erin)\nTEXT: Harry is furry.\nFOL: Furry(Harry)\nTEXT: Harry is nice.\nFOL: Nice(Harry)\nTEXT: Harry is white.\nFOL: White(Harry)\nTEXT: All white things are not smart.\nFOL: all x. (White(x) -> -Smart(x))\nTEXT: If Erin is white and Erin is furry then Erin is nice.\nFOL: (White(Erin) & Furry(Erin)) -> Nice(Erin)\nTEXT: If something is furry and kind then it is green.\nFOL: (Furry(x) & Kind(x)) -> Green(x)\nTEXT: If something is kind and not nice then it is not big.\nFOL: (Kind(x) & -Nice(x)) -> -Big(x)\nTEXT: If Harry is kind and Harry is nice then Harry is furry.\nFOL: (Kind(Harry) & Nice(Harry)) -> Furry(Harry)\nTEXT: If Harry is green and Harry is not smart then Harry is furry.\nFOL: (Green(Harry) & -Smart(Harry)) -> Furry(Harry)\nTEXT: Harry is not green.\nFOL: -Green(Harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Anne\nTEXT: Anne is not green.\nFOL: -Green(Anne)\nTEXT: Anne is kind.\nFOL: Kind(Anne)\nTEXT: Anne is smart.\nFOL: Smart(Anne)\nTEXT: Charlie is not white.\nFOL: -White(Charlie)\nTEXT: Erin is not green.\nFOL: -Green(Erin)\nTEXT: Erin is not nice.\nFOL: -Nice(Erin)\nTEXT: Harry is furry.\nFOL: Furry(Harry)\nTEXT: Harry is nice.\nFOL: Nice(Harry)\nTEXT: Harry is white.\nFOL: White(Harry)\nTEXT: All white things are not smart.\nFOL: all x. (White(x) -> -Smart(x))\nTEXT: If Erin is white and Erin is furry then Erin is nice.\nFOL: (White(Erin) & Furry(Erin)) -> Nice(Erin)\nTEXT: If something is furry and kind then it is green.\nFOL: all x. (Furry(x) & Kind(x) -> Green(x))\nTEXT: If something is kind and not nice then it is not big.\nFOL: all x. (Kind(x) & -Nice(x) -> -Big(x))\nTEXT: If Harry is kind and Harry is nice then Harry is furry.\nFOL: (Kind(Harry) & Nice(Harry)) -> Furry(Harry)\nTEXT: If Harry is green and Harry is not smart then Harry is furry.\nFOL: (Green(Harry) & -Smart(Harry)) -> Furry(Harry)\nTEXT: Harry is not green.\nFOL: -Green(Harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(Anne)\n\nTEXT: Anne is not green.\nFOL: -Green(Anne)\n\nTEXT: Anne is kind.\nFOL: Kind(Anne)\n\nTEXT: Anne is smart.\nFOL: Smart(Anne)\n\nTEXT: Charlie is not white.\nFOL: -White(Charlie)\n\nTEXT: Erin is not green.\nFOL: -Green(Erin)\n\nTEXT: Erin is not nice.\nFOL: -Nice(Erin)\n\nTEXT: Harry is furry.\nFOL: Furry(Harry)\n\nTEXT: Harry is nice.\nFOL: Nice(Harry)\n\nTEXT: Harry is white.\nFOL: White(Harry)\n\nTEXT: All white things are not smart.\nFOL: all x. (White(x) -> -Smart(x))\n\nTEXT: If Erin is white and Erin is furry then Erin is nice.\nFOL: (White(Erin) & Furry(Erin)) -> Nice(Erin)\n\nTEXT: If something is furry and kind then it is green.\nFOL: all x. (Furry(x) & Kind(x) -> Green(x))\n\nTEXT: If something is kind and not nice then it is not big.\nFOL: all x. (Kind(x) & -Nice(x) -> -Big(x))\n\nTEXT: If Harry is kind and Harry is nice then Harry is furry.\nFOL: (Kind(Harry) & Nice(Harry)) -> Furry(Harry)\n\nTEXT: If Harry is green and Harry is not smart then Harry is furry.\nFOL: (Green(Harry) & -Smart(Harry)) -> Furry(Harry)\n\nTEXT: Harry is not green.\nFOL: -Green(Harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(Anne)\nTEXT: Anne is not green.\nFOL: -Green(Anne)\nTEXT: Anne is kind.\nFOL: Kind(Anne)\nTEXT: Anne is smart.\nFOL: Smart(Anne)\nTEXT: Charlie is not white.\nFOL: -White(Charlie)\nTEXT: Erin is not green.\nFOL: -Green(Erin)\nTEXT: Erin is not nice.\nFOL: -Nice(Erin)\nTEXT: Harry is furry.\nFOL: Furry(Harry)\nTEXT: Harry is nice.\nFOL: Nice(Harry)\nTEXT: Harry is white.\nFOL: White(Harry)\nTEXT: All white things are not smart.\nFOL: all x. (White(x) -> -Smart(x))\nTEXT: If Erin is white and Erin is furry then Erin is nice.\nFOL: (White(Erin) & Furry(Erin)) -> Nice(Erin)\nTEXT: If something is furry and kind then it is green.\nFOL: all x. (Furry(x) & Kind(x) -> Green(x))\nTEXT: If something is kind and not nice then it is not big.\nFOL: all x. (Kind(x) & -Nice(x) -> -Big(x))\nTEXT: If Harry is kind and Harry is nice then Harry is furry.\nFOL: (Kind(Harry) & Nice(Harry)) -> Furry(Harry)\nTEXT: If Harry is green and Harry is not smart then Harry is furry.\nFOL: (Green(Harry) & -Smart(Harry)) -> Furry(Harry)\nTEXT: Harry is not green.\nFOL: -Green(Harry)\n</EVALUATE>"
  ]
 },
 {
  "index": 17,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: Cold(Anne)\n\nTEXT: If Anne is kind and Anne is smart then Anne is nice.\nFOL: Kind(Anne) & Smart(Anne) -> Nice(Anne)\n\nTEXT: If something is nice then it is red.\nFOL: Nice(x) -> Red(x)\n\nTEXT: All cold things are smart.\nFOL: all x. (Cold(x) -> Smart(x))\n\nTEXT: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\n\nTEXT: If something is smart then it is nice.\nFOL: Smart(x) -> Nice(x)\n\nTEXT: All rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\n\nTEXT: Anne is not smart.\nFOL: -Smart(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: Cold(Anne)\n\nTEXT: If Anne is kind and Anne is smart then Anne is nice.\nFOL: (Kind(Anne) & Smart(Anne)) -> Nice(Anne)\n\nTEXT: If something is nice then it is red.\nFOL: Nice(x) -> Red(x)\n\nTEXT: All cold things are smart.\nFOL: all x. (Cold(x) -> Smart(x))\n\nTEXT: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\n\nTEXT: If something is smart then it is nice.\nFOL: Smart(x) -> Nice(x)\n\nTEXT: All rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\n\nTEXT: Anne is not smart.\nFOL: -Smart(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: Cold(Anne)\n\nTEXT: If Anne is kind and Anne is smart then Anne is nice.\nFOL: (Kind(Anne) & Smart(Anne)) -> Nice(Anne)\n\nTEXT: If something is nice then it is red.\nFOL: all x. (Nice(x) -> Red(x))\n\nTEXT: All cold things are smart.\nFOL: all x. (Cold(x) -> Smart(x))\n\nTEXT: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\n\nTEXT: If something is smart then it is nice.\nFOL: all x. (Smart(x) -> Nice(x))\n\nTEXT: All rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\n\nTEXT: Anne is not smart.\nFOL: -Smart(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: Cold(Anne)\nTEXT: If Anne is kind and Anne is smart then Anne is nice.\nFOL: (Kind(Anne) & Smart(Anne)) -> Nice(Anne)\nTEXT: If something is nice then it is red.\nFOL: all x. (Nice(x) -> Red(x))\nTEXT: All cold things are smart.\nFOL: all x. (Cold(x) -> Smart(x))\nTEXT: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\nTEXT: If something is smart then it is nice.\nFOL: all x. (Smart(x) -> Nice(x))\nTEXT: All rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\nTEXT: Anne is not smart.\nFOL: -Smart(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: Cold(anne)\n\nTEXT: If Anne is kind and Anne is smart then Anne is nice.\nFOL: (Kind(anne) & Smart(anne) -> Nice(anne))\n\nTEXT: If something is nice then it is red.\nFOL: all x. (Nice(x) -> Red(x))\n\nTEXT: All cold things are smart.\nFOL: all x. (Cold(x) -> Smart(x))\n\nTEXT: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\n\nTEXT: If something is smart then it is nice.\nFOL: all x. (Smart(x) -> Nice(x))\n\nTEXT: All rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\n\nTEXT: Anne is not smart.\nFOL: -Smart(anne)\n</EVALUATE>"
  ]
 },
 {
  "index": 18,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: BaldEagle(x) -> Cold(x)\nTEXT: The bald eagle is round.\nFOL: BaldEagle(x) -> Round(x)\nTEXT: The bald eagle sees the rabbit.\nFOL: BaldEagle(x) -> SeesRabbit(x)\nTEXT: The bald eagle visits the cat.\nFOL: BaldEagle(x) -> VisitsCat(x)\nTEXT: The bald eagle visits the rabbit.\nFOL: BaldEagle(x) -> VisitsRabbit(x)\nTEXT: The cat is cold.\nFOL: Cat(x) -> Cold(x)\nTEXT: The cat sees the bald eagle.\nFOL: Cat(x) -> SeesBaldEagle(x)\nTEXT: The cat sees the rabbit.\nFOL: Cat(x) -> SeesRabbit(x)\nTEXT: The cat does not visit the bald eagle.\nFOL: -Cat(x) -> VisitsBaldEagle(x)\nTEXT: The mouse likes the bald eagle.\nFOL: Mouse(x) -> LikesBaldEagle(x)\nTEXT: The mouse does not like the cat.\nFOL: -Mouse(x) -> LikesCat(x)\nTEXT: The mouse does not see the cat.\nFOL: -Mouse(x) -> SeesCat(x)\nTEXT: The mouse visits the cat.\nFOL: Mouse(x) -> VisitsCat(x)\nTEXT: The mouse visits the rabbit.\nFOL: Mouse(x) -> VisitsRabbit(x)\nTEXT: The rabbit likes the mouse.\nFOL: Rabbit(x) -> LikesMouse(x)\nTEXT: The rabbit sees the cat.\nFOL: Rabbit(x) -> SeesCat(x)\nTEXT: If something is cold then it sees the rabbit.\nFOL: Cold(x) -> SeesRabbit(x)\nTEXT: If something visits the mouse then it does not like the rabbit.\nFOL: VisitsMouse(x) -> -LikesRabbit(x)\nTEXT: If something visits the rabbit then the rabbit visits the cat.\nFOL: VisitsRabbit(x) -> VisitsCat(x)\nTEXT: If something sees the cat and the cat is young then the cat is round.\nFOL: SeesCat(x) & YoungCat(x) -> Round(x)\nTEXT: If the rabbit visits the cat then the rabbit is round.\nFOL: VisitsCat(x) -> Round(x)\nTEXT: All round things are kind.\nFOL: all x. (Round(x) -> Kind(x))\nTEXT: The rabbit does not like the rabbit.\nFOL: -Rabbit(x) -> LikesRabbit(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: BaldEagle(x) -> Cold(x)\nTEXT: The bald eagle is round.\nFOL: BaldEagle(x) -> Round(x)\nTEXT: The bald eagle sees the rabbit.\nFOL: BaldEagle(x) -> SeesRabbit(x)\nTEXT: The bald eagle visits the cat.\nFOL: BaldEagle(x) -> VisitsCat(x)\nTEXT: The bald eagle visits the rabbit.\nFOL: BaldEagle(x) -> VisitsRabbit(x)\nTEXT: The cat is cold.\nFOL: Cat(x) -> Cold(x)\nTEXT: The cat sees the bald eagle.\nFOL: Cat(x) -> SeesBaldEagle(x)\nTEXT: The cat sees the rabbit.\nFOL: Cat(x) -> SeesRabbit(x)\nTEXT: The cat does not visit the bald eagle.\nFOL: -Cat(x) -> VisitsBaldEagle(x)\nTEXT: The mouse likes the bald eagle.\nFOL: Mouse(x) -> LikesBaldEagle(x)\nTEXT: The mouse does not like the cat.\nFOL: -Mouse(x) -> LikesCat(x)\nTEXT: The mouse does not see the cat.\nFOL: -Mouse(x) -> SeesCat(x)\nTEXT: The mouse visits the cat.\nFOL: Mouse(x) -> VisitsCat(x)\nTEXT: The mouse visits the rabbit.\nFOL: Mouse(x) -> VisitsRabbit(x)\nTEXT: The rabbit likes the mouse.\nFOL: Rabbit(x) -> LikesMouse(x)\nTEXT: The rabbit sees the cat.\nFOL: Rabbit(x) -> SeesCat(x)\nTEXT: If something is cold then it sees the rabbit.\nFOL: Cold(x) -> SeesRabbit(x)\nTEXT: If something visits the mouse then it does not like the rabbit.\nFOL: VisitsMouse(x) -> -LikesRabbit(x)\nTEXT: If something visits the rabbit then the rabbit visits the cat.\nFOL: VisitsRabbit(x) -> VisitsCat(x)\nTEXT: If something sees the cat and the cat is young then the cat is round.\nFOL: SeesCat(x) & Young(Cat(x)) -> Round(Cat(x))\nTEXT: If the rabbit visits the cat then the rabbit is round.\nFOL: VisitsCat(x) -> Round(Rabbit(x))\nTEXT: All round things are kind.\nFOL: all x. (Round(x) -> Kind(x))\nTEXT: The rabbit does not like the rabbit.\nFOL: -Rabbit(x) -> LikesRabbit(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: BaldEagle(x) -> Cold(x)\nTEXT: The bald eagle is round.\nFOL: BaldEagle(x) -> Round(x)\nTEXT: The bald eagle sees the rabbit.\nFOL: BaldEagle(x) -> SeesRabbit(x)\nTEXT: The bald eagle visits the cat.\nFOL: BaldEagle(x) -> VisitsCat(x)\nTEXT: The bald eagle visits the rabbit.\nFOL: BaldEagle(x) -> VisitsRabbit(x)\nTEXT: The cat is cold.\nFOL: Cat(x) -> Cold(x)\nTEXT: The cat sees the bald eagle.\nFOL: Cat(x) -> SeesBaldEagle(x)\nTEXT: The cat sees the rabbit.\nFOL: Cat(x) -> SeesRabbit(x)\nTEXT: The cat does not visit the bald eagle.\nFOL: -Cat(x) -> VisitsBaldEagle(x)\nTEXT: The mouse likes the bald eagle.\nFOL: Mouse(x) -> LikesBaldEagle(x)\nTEXT: The mouse does not like the cat.\nFOL: -Mouse(x) -> LikesCat(x)\nTEXT: The mouse does not see the cat.\nFOL: -Mouse(x) -> SeesCat(x)\nTEXT: The mouse visits the cat.\nFOL: Mouse(x) -> VisitsCat(x)\nTEXT: The mouse visits the rabbit.\nFOL: Mouse(x) -> VisitsRabbit(x)\nTEXT: The rabbit likes the mouse.\nFOL: Rabbit(x) -> LikesMouse(x)\nTEXT: The rabbit sees the cat.\nFOL: Rabbit(x) -> SeesCat(x)\nTEXT: If something is cold then it sees the rabbit.\nFOL: Cold(x) -> SeesRabbit(x)\nTEXT: If something visits the mouse then it does not like the rabbit.\nFOL: VisitsMouse(x) -> -LikesRabbit(x)\nTEXT: If something visits the rabbit then the rabbit visits the cat.\nFOL: VisitsRabbit(x) -> VisitsCat(x)\nTEXT: If something sees the cat and the cat is young then the cat is round.\nFOL: SeesCat(x) & Young(Cat(x)) -> Round(Cat(x))\nTEXT: If the rabbit visits the cat then the rabbit is round.\nFOL: VisitsCat(x) -> Round(Rabbit(x))\nTEXT: All round things are kind.\nFOL: Round(x) -> Kind(x)\nTEXT: The rabbit does not like the rabbit.\nFOL: -Rabbit(x) -> LikesRabbit(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: BaldEagle(x) -> Cold(x)\nTEXT: The bald eagle is round.\nFOL: BaldEagle(x) -> Round(x)\nTEXT: The bald eagle sees the rabbit.\nFOL: BaldEagle(x) -> SeesRabbit(x)\nTEXT: The bald eagle visits the cat.\nFOL: BaldEagle(x) -> VisitsCat(x)\nTEXT: The bald eagle visits the rabbit.\nFOL: BaldEagle(x) -> VisitsRabbit(x)\nTEXT: The cat is cold.\nFOL: Cat(x) -> Cold(x)\nTEXT: The cat sees the bald eagle.\nFOL: Cat(x) -> SeesBaldEagle(x)\nTEXT: The cat sees the rabbit.\nFOL: Cat(x) -> SeesRabbit(x)\nTEXT: The cat does not visit the bald eagle.\nFOL: -Cat(x) -> VisitsBaldEagle(x)\nTEXT: The mouse likes the bald eagle.\nFOL: Mouse(x) -> LikesBaldEagle(x)\nTEXT: The mouse does not like the cat.\nFOL: -Mouse(x) -> LikesCat(x)\nTEXT: The mouse does not see the cat.\nFOL: -Mouse(x) -> SeesCat(x)\nTEXT: The mouse visits the cat.\nFOL: Mouse(x) -> VisitsCat(x)\nTEXT: The mouse visits the rabbit.\nFOL: Mouse(x) -> VisitsRabbit(x)\nTEXT: The rabbit likes the mouse.\nFOL: Rabbit(x) -> LikesMouse(x)\nTEXT: The rabbit sees the cat.\nFOL: Rabbit(x) -> SeesCat(x)\nTEXT: If something is cold then it sees the rabbit.\nFOL: Cold(x) -> SeesRabbit(x)\nTEXT: If something visits the mouse then it does not like the rabbit.\nFOL: VisitsMouse(x) -> -LikesRabbit(x)\nTEXT: If something visits the rabbit then the rabbit visits the cat.\nFOL: VisitsRabbit(x) -> VisitsCat(x)\nTEXT: If something sees the cat and the cat is young then the cat is round.\nFOL: SeesCat(x) & YoungCat(x) -> Round(x)\nTEXT: If the rabbit visits the cat then the rabbit is round.\nFOL: VisitsCat(x) -> Round(x)\nTEXT: All round things are kind.\nFOL: Round(x) -> Kind(x)\nTEXT: The rabbit does not like the rabbit.\nFOL: -Rabbit(x) -> LikesRabbit(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: BaldEagle(x) -> Cold(x)\n\nTEXT: The bald eagle is round.\nFOL: BaldEagle(x) -> Round(x)\n\nTEXT: The bald eagle sees the rabbit.\nFOL: BaldEagle(x) -> SeesRabbit(x)\n\nTEXT: The bald eagle visits the cat.\nFOL: BaldEagle(x) -> VisitsCat(x)\n\nTEXT: The bald eagle visits the rabbit.\nFOL: BaldEagle(x) -> VisitsRabbit(x)\n\nTEXT: The cat is cold.\nFOL: Cat(x) -> Cold(x)\n\nTEXT: The cat sees the bald eagle.\nFOL: Cat(x) -> SeesBaldEagle(x)\n\nTEXT: The cat sees the rabbit.\nFOL: Cat(x) -> SeesRabbit(x)\n\nTEXT: The cat does not visit the bald eagle.\nFOL: -Cat(x) -> -VisitsBaldEagle(x)\n\nTEXT: The mouse likes the bald eagle.\nFOL: Mouse(x) -> LikesBaldEagle(x)\n\nTEXT: The mouse does not like the cat.\nFOL: Mouse(x) -> -LikesCat(x)\n\nTEXT: The mouse does not see the cat.\nFOL: Mouse(x) -> -SeesCat(x)\n\nTEXT: The mouse visits the cat.\nFOL: Mouse(x) -> VisitsCat(x)\n\nTEXT: The mouse visits the rabbit.\nFOL: Mouse(x) -> VisitsRabbit(x)\n\nTEXT: The rabbit likes the mouse.\nFOL: Rabbit(x) -> LikesMouse(x)\n\nTEXT: The rabbit sees the cat.\nFOL: Rabbit(x) -> SeesCat(x)\n\nTEXT: If something is cold then it sees the rabbit.\nFOL: Cold(x) -> SeesRabbit(x)\n\nTEXT: If something visits the mouse then it does not like the rabbit.\nFOL: VisitsMouse(x) -> -LikesRabbit(x)\n\nTEXT: If something visits the rabbit then the rabbit visits the cat.\nFOL: VisitsRabbit(x) -> VisitsCat(x)\n\nTEXT: If something sees the cat and the cat is young then the cat is round.\nFOL: SeesCat(x) & Young(Cat(x)) -> Round(Cat(x))\n\nTEXT: If the rabbit visits the cat then the rabbit is round.\nFOL: VisitsCat(x) -> Round(Rabbit(x))\n\nTEXT: All round things are kind.\nFOL: all x. (Round(x) -> Kind(x))\n\nTEXT: The rabbit does not like the rabbit.\nFOL: -Rabbit(x) -> -LikesRabbit(x)\n\n</EVALUATE>"
  ]
 },
 {
  "index": 19,
  "responses": [
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: Cat(chases(cow))\nTEXT: The cat chases the rabbit.\nFOL: Cat(chases(rabbit))\nTEXT: The cat is nice.\nFOL: Cat(nice)\nTEXT: The cat needs the cow.\nFOL: Cat(needs(cow))\nTEXT: The cat visits the rabbit.\nFOL: Cat(visits(rabbit))\nTEXT: The cow is nice.\nFOL: Cow(nice)\nTEXT: The cow is red.\nFOL: Cow(red)\nTEXT: The cow needs the cat.\nFOL: Cow(needs(cat))\nTEXT: The cow visits the cat.\nFOL: Cow(visits(cat))\nTEXT: The mouse chases the cow.\nFOL: Mouse(chases(cow))\nTEXT: The mouse chases the rabbit.\nFOL: Mouse(chases(rabbit))\nTEXT: The mouse is kind.\nFOL: Mouse(kind)\nTEXT: The mouse needs the rabbit.\nFOL: Mouse(needs(rabbit))\nTEXT: The rabbit chases the cow.\nFOL: Rabbit(chases(cow))\nTEXT: The rabbit needs the cow.\nFOL: Rabbit(needs(cow))\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: all x. ((x(visits(cow)) & x(nice)) -> Cow(chases(mouse)))\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: all x. (x(nice) & x(chases(cow)) -> x(needs(cow)))\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: (Rabbit(red) & Rabbit(visits(mouse)) -> Rabbit(kind))\nTEXT: If something chases the cow then it visits the mouse.\nFOL: all x. (x(chases(cow)) -> x(visits(mouse)))\nTEXT: If something chases the cow then it visits the cat.\nFOL: all x. (x(chases(cow)) -> x(visits(cat)))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: (Mouse(needs(rabbit)) & Rabbit(visits(mouse)) -> Rabbit(red))\nTEXT: The cow does not visit the cat.\nFOL: -Cow(visits(cat))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: Cat(chases(cow))\nTEXT: The cat chases the rabbit.\nFOL: Cat(chases(rabbit))\nTEXT: The cat is nice.\nFOL: Cat(nice)\nTEXT: The cat needs the cow.\nFOL: Cat(needs(cow))\nTEXT: The cat visits the rabbit.\nFOL: Cat(visits(rabbit))\nTEXT: The cow is nice.\nFOL: Cow(nice)\nTEXT: The cow is red.\nFOL: Cow(red)\nTEXT: The cow needs the cat.\nFOL: Cow(needs(cat))\nTEXT: The cow visits the cat.\nFOL: Cow(visits(cat))\nTEXT: The mouse chases the cow.\nFOL: Mouse(chases(cow))\nTEXT: The mouse chases the rabbit.\nFOL: Mouse(chases(rabbit))\nTEXT: The mouse is kind.\nFOL: Mouse(kind)\nTEXT: The mouse needs the rabbit.\nFOL: Mouse(needs(rabbit))\nTEXT: The rabbit chases the cow.\nFOL: Rabbit(chases(cow))\nTEXT: The rabbit needs the cow.\nFOL: Rabbit(needs(cow))\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: all x. (x(visits(cow)) & x(nice) -> Cow(chases(mouse)))\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: all x. (x(nice) & x(chases(cow)) -> Cow(needs(x)))\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: Rabbit(red) & Rabbit(visits(mouse)) -> Rabbit(kind)\nTEXT: If something chases the cow then it visits the mouse.\nFOL: all x. (x(chases(cow)) -> x(visits(mouse)))\nTEXT: If something chases the cow then it visits the cat.\nFOL: all x. (x(chases(cow)) -> x(visits(cat)))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: Mouse(needs(rabbit)) & Rabbit(visits(mouse)) -> Rabbit(red)\nTEXT: The cow does not visit the cat.\nFOL: -Cow(visits(cat))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: Cat(chases(cow))\nTEXT: The cat chases the rabbit.\nFOL: Cat(chases(rabbit))\nTEXT: The cat is nice.\nFOL: Cat(nice)\nTEXT: The cat needs the cow.\nFOL: Cat(needs(cow))\nTEXT: The cat visits the rabbit.\nFOL: Cat(visits(rabbit))\nTEXT: The cow is nice.\nFOL: Cow(nice)\nTEXT: The cow is red.\nFOL: Cow(red)\nTEXT: The cow needs the cat.\nFOL: Cow(needs(cat))\nTEXT: The cow visits the cat.\nFOL: Cow(visits(cat))\nTEXT: The mouse chases the cow.\nFOL: Mouse(chases(cow))\nTEXT: The mouse chases the rabbit.\nFOL: Mouse(chases(rabbit))\nTEXT: The mouse is kind.\nFOL: Mouse(kind)\nTEXT: The mouse needs the rabbit.\nFOL: Mouse(needs(rabbit))\nTEXT: The rabbit chases the cow.\nFOL: Rabbit(chases(cow))\nTEXT: The rabbit needs the cow.\nFOL: Rabbit(needs(cow))\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: all x. (x(visits(cow)) & x(nice) -> Cow(chases(mouse)))\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: all x. (x(nice) & x(chases(cow)) -> x(needs(cow)))\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: (Rabbit(red) & Rabbit(visits(mouse)) -> Rabbit(kind))\nTEXT: If something chases the cow then it visits the mouse.\nFOL: all x. (x(chases(cow)) -> x(visits(mouse)))\nTEXT: If something chases the cow then it visits the cat.\nFOL: all x. (x(chases(cow)) -> x(visits(cat)))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: (Mouse(needs(rabbit)) & Rabbit(visits(mouse)) -> Rabbit(red))\nTEXT: The cow does not visit the cat.\nFOL: -Cow(visits(cat))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: Cat(chases(cow))\nTEXT: The cat chases the rabbit.\nFOL: Cat(chases(rabbit))\nTEXT: The cat is nice.\nFOL: Cat(nice)\nTEXT: The cat needs the cow.\nFOL: Cat(needs(cow))\nTEXT: The cat visits the rabbit.\nFOL: Cat(visits(rabbit))\nTEXT: The cow is nice.\nFOL: Cow(nice)\nTEXT: The cow is red.\nFOL: Cow(red)\nTEXT: The cow needs the cat.\nFOL: Cow(needs(cat))\nTEXT: The cow visits the cat.\nFOL: Cow(visits(cat))\nTEXT: The mouse chases the cow.\nFOL: Mouse(chases(cow))\nTEXT: The mouse chases the rabbit.\nFOL: Mouse(chases(rabbit))\nTEXT: The mouse is kind.\nFOL: Mouse(kind)\nTEXT: The mouse needs the rabbit.\nFOL: Mouse(needs(rabbit))\nTEXT: The rabbit chases the cow.\nFOL: Rabbit(chases(cow))\nTEXT: The rabbit needs the cow.\nFOL: Rabbit(needs(cow))\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: all x. ((x(visits(cow)) & x(nice)) -> Cow(chases(mouse)))\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: all x. (x(nice) & x(chases(cow)) -> Cow(needs(x)))\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: (Rabbit(red) & Rabbit(visits(mouse)) -> Rabbit(kind))\nTEXT: If something chases the cow then it visits the mouse.\nFOL: all x. (x(chases(cow)) -> x(visits(mouse)))\nTEXT: If something chases the cow then it visits the cat.\nFOL: all x. (x(chases(cow)) -> x(visits(cat)))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: (Mouse(needs(rabbit)) & Rabbit(visits(mouse)) -> Rabbit(red))\nTEXT: The cow does not visit the cat.\nFOL: -Cow(visits(cat))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: Cat(chases(cow))\nTEXT: The cat chases the rabbit.\nFOL: Cat(chases(rabbit))\nTEXT: The cat is nice.\nFOL: Cat(nice)\nTEXT: The cat needs the cow.\nFOL: Cat(needs(cow))\nTEXT: The cat visits the rabbit.\nFOL: Cat(visits(rabbit))\nTEXT: The cow is nice.\nFOL: Cow(nice)\nTEXT: The cow is red.\nFOL: Cow(red)\nTEXT: The cow needs the cat.\nFOL: Cow(needs(cat))\nTEXT: The cow visits the cat.\nFOL: Cow(visits(cat))\nTEXT: The mouse chases the cow.\nFOL: Mouse(chases(cow))\nTEXT: The mouse chases the rabbit.\nFOL: Mouse(chases(rabbit))\nTEXT: The mouse is kind.\nFOL: Mouse(kind)\nTEXT: The mouse needs the rabbit.\nFOL: Mouse(needs(rabbit))\nTEXT: The rabbit chases the cow.\nFOL: Rabbit(chases(cow))\nTEXT: The rabbit needs the cow.\nFOL: Rabbit(needs(cow))\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: all x. ((x(visits(cow)) & x(nice)) -> Cow(chases(mouse)))\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: all x. (x(nice) & x(chases(cow)) -> Cow(needs(x)))\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: (Rabbit(red) & Rabbit(visits(mouse)) -> Mouse(kind))\nTEXT: If something chases the cow then it visits the mouse.\nFOL: all x. (x(chases(cow)) -> x(visits(mouse)))\nTEXT: If something chases the cow then it visits the cat.\nFOL: all x. (x(chases(cow)) -> x(visits(cat)))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: (Mouse(needs(rabbit)) & Rabbit(visits(mouse)) -> Rabbit(red))\nTEXT: The cow does not visit the cat.\nFOL: -Cow(visits(cat))\n</EVALUATE>"
  ]
 },
 {
  "index": 20,
  "responses": [
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: Bear(b) -> Round(b)\nTEXT: The bear sees the cat.\nFOL: Bear(b) & Cat(c) -> Sees(b, c)\nTEXT: The cat is blue.\nFOL: Cat(c) -> Blue(c)\nTEXT: The cat is round.\nFOL: Cat(c) -> Round(c)\nTEXT: The cat likes the bear.\nFOL: Cat(c) & Bear(b) -> Likes(c, b)\nTEXT: The squirrel eats the bear.\nFOL: Squirrel(s) & Bear(b) -> Eats(s, b)\nTEXT: The squirrel sees the cat.\nFOL: Squirrel(s) & Cat(c) -> Sees(s, c)\nTEXT: If someone sees the bear and they like the bear then the bear likes the cat.\nFOL: exists x. (Sees(x, b) & Likes(x, b) -> Likes(b, c))\nTEXT: If someone likes the cat and the cat likes the bear then they see the bear.\nFOL: exists x. (Likes(x, c) & Likes(c, b) -> Sees(x, b))\nTEXT: If someone eats the squirrel then they eat the bear.\nFOL: exists x. (Eats(x, s) -> Eats(x, b))\nTEXT: If someone eats the squirrel then the squirrel likes the cat.\nFOL: exists x. (Eats(x, s) -> Likes(s, c))\nTEXT: If someone likes the squirrel and the squirrel is round then they are red.\nFOL: exists x. (Likes(x, s) & Round(s) -> Red(x))\nTEXT: If someone is red and they like the cat then they are blue.\nFOL: exists x. (Red(x) & Likes(x, c) -> Blue(x))\nTEXT: If someone sees the squirrel then they eat the cat.\nFOL: exists x. (Sees(x, s) -> Eats(x, c))\nTEXT: If someone likes the bear then they eat the squirrel.\nFOL: exists x. (Likes(x, b) -> Eats(x, s))\nTEXT: The cat sees the cat.\nFOL: Cat(c) -> Sees(c, c)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: Bear(bear) -> Round(bear)\nTEXT: The bear sees the cat.\nFOL: Bear(bear) & Cat(cat) -> Sees(bear, cat)\nTEXT: The cat is blue.\nFOL: Cat(cat) -> Blue(cat)\nTEXT: The cat is round.\nFOL: Cat(cat) -> Round(cat)\nTEXT: The cat likes the bear.\nFOL: Cat(cat) & Bear(bear) -> Likes(cat, bear)\nTEXT: The squirrel eats the bear.\nFOL: Squirrel(squirrel) & Bear(bear) -> Eats(squirrel, bear)\nTEXT: The squirrel sees the cat.\nFOL: Squirrel(squirrel) & Cat(cat) -> Sees(squirrel, cat)\nTEXT: If someone sees the bear and they like the bear then the bear likes the cat.\nFOL: exists x. (Sees(x, bear) & Likes(x, bear) -> Likes(bear, cat))\nTEXT: If someone likes the cat and the cat likes the bear then they see the bear.\nFOL: exists x. (Likes(x, cat) & Likes(cat, bear) -> Sees(x, bear))\nTEXT: If someone eats the squirrel then they eat the bear.\nFOL: exists x. (Eats(x, squirrel) -> Eats(x, bear))\nTEXT: If someone eats the squirrel then the squirrel likes the cat.\nFOL: exists x. (Eats(x, squirrel) -> Likes(squirrel, cat))\nTEXT: If someone likes the squirrel and the squirrel is round then they are red.\nFOL: exists x. (Likes(x, squirrel) & Round(squirrel) -> Red(x))\nTEXT: If someone is red and they like the cat then they are blue.\nFOL: exists x. (Red(x) & Likes(x, cat) -> Blue(x))\nTEXT: If someone sees the squirrel then they eat the cat.\nFOL: exists x. (Sees(x, squirrel) -> Eats(x, cat))\nTEXT: If someone likes the bear then they eat the squirrel.\nFOL: exists x. (Likes(x, bear) -> Eats(x, squirrel))\nTEXT: The cat sees the cat.\nFOL: Cat(cat) & Cat(cat) -> Sees(cat, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: Bear(bear) -> Round(bear)\nTEXT: The bear sees the cat.\nFOL: Bear(bear) & Cat(cat) -> Sees(bear, cat)\nTEXT: The cat is blue.\nFOL: Cat(cat) -> Blue(cat)\nTEXT: The cat is round.\nFOL: Cat(cat) -> Round(cat)\nTEXT: The cat likes the bear.\nFOL: Cat(cat) & Bear(bear) -> Likes(cat, bear)\nTEXT: The squirrel eats the bear.\nFOL: Squirrel(squirrel) & Bear(bear) -> Eats(squirrel, bear)\nTEXT: The squirrel sees the cat.\nFOL: Squirrel(squirrel) & Cat(cat) -> Sees(squirrel, cat)\nTEXT: If someone sees the bear and they like the bear then the bear likes the cat.\nFOL: all x. (Sees(x, bear) & Likes(x, bear) -> Likes(bear, cat))\nTEXT: If someone likes the cat and the cat likes the bear then they see the bear.\nFOL: all x. (Likes(x, cat) & Likes(cat, bear) -> Sees(x, bear))\nTEXT: If someone eats the squirrel then they eat the bear.\nFOL: all x. (Eats(x, squirrel) -> Eats(x, bear))\nTEXT: If someone eats the squirrel then the squirrel likes the cat.\nFOL: all x. (Eats(x, squirrel) -> Likes(squirrel, cat))\nTEXT: If someone likes the squirrel and the squirrel is round then they are red.\nFOL: all x. (Likes(x, squirrel) & Round(squirrel) -> Red(x))\nTEXT: If someone is red and they like the cat then they are blue.\nFOL: all x. (Red(x) & Likes(x, cat) -> Blue(x))\nTEXT: If someone sees the squirrel then they eat the cat.\nFOL: all x. (Sees(x, squirrel) -> Eats(x, cat))\nTEXT: If someone likes the bear then they eat the squirrel.\nFOL: all x. (Likes(x, bear) -> Eats(x, squirrel))\nTEXT: The cat sees the cat.\nFOL: Cat(cat) & Cat(cat) -> Sees(cat, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: Bear(bear) -> Round(bear)\nTEXT: The bear sees the cat.\nFOL: Bear(bear) & Cat(cat) -> Sees(bear, cat)\nTEXT: The cat is blue.\nFOL: Cat(cat) -> Blue(cat)\nTEXT: The cat is round.\nFOL: Cat(cat) -> Round(cat)\nTEXT: The cat likes the bear.\nFOL: Cat(cat) & Bear(bear) -> Likes(cat, bear)\nTEXT: The squirrel eats the bear.\nFOL: Squirrel(squirrel) & Bear(bear) -> Eats(squirrel, bear)\nTEXT: The squirrel sees the cat.\nFOL: Squirrel(squirrel) & Cat(cat) -> Sees(squirrel, cat)\nTEXT: If someone sees the bear and they like the bear then the bear likes the cat.\nFOL: exists x. (Sees(x, bear) & Likes(x, bear) -> Likes(bear, cat))\nTEXT: If someone likes the cat and the cat likes the bear then they see the bear.\nFOL: exists x. (Likes(x, cat) & Likes(cat, bear) -> Sees(x, bear))\nTEXT: If someone eats the squirrel then they eat the bear.\nFOL: exists x. (Eats(x, squirrel) -> Eats(x, bear))\nTEXT: If someone eats the squirrel then the squirrel likes the cat.\nFOL: exists x. (Eats(x, squirrel) -> Likes(squirrel, cat))\nTEXT: If someone likes the squirrel and the squirrel is round then they are red.\nFOL: exists x. (Likes(x, squirrel) & Round(squirrel) -> Red(x))\nTEXT: If someone is red and they like the cat then they are blue.\nFOL: exists x. (Red(x) & Likes(x, cat) -> Blue(x))\nTEXT: If someone sees the squirrel then they eat the cat.\nFOL: exists x. (Sees(x, squirrel) -> Eats(x, cat))\nTEXT: If someone likes the bear then they eat the squirrel.\nFOL: exists x. (Likes(x, bear) -> Eats(x, squirrel))\nTEXT: The cat sees the cat.\nFOL: Cat(cat) -> Sees(cat, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is round.\nFOL: Bear(b) -> Round(b)\nTEXT: The bear sees the cat.\nFOL: Bear(b) & Cat(c) -> Sees(b, c)\nTEXT: The cat is blue.\nFOL: Cat(c) -> Blue(c)\nTEXT: The cat is round.\nFOL: Cat(c) -> Round(c)\nTEXT: The cat likes the bear.\nFOL: Cat(c) & Bear(b) -> Likes(c, b)\nTEXT: The squirrel eats the bear.\nFOL: Squirrel(s) & Bear(b) -> Eats(s, b)\nTEXT: The squirrel sees the cat.\nFOL: Squirrel(s) & Cat(c) -> Sees(s, c)\nTEXT: If someone sees the bear and they like the bear then the bear likes the cat.\nFOL: all x. (Sees(x, b) & Likes(x, b) -> Likes(b, c))\nTEXT: If someone likes the cat and the cat likes the bear then they see the bear.\nFOL: all x. (Likes(x, c) & Likes(c, b) -> Sees(x, b))\nTEXT: If someone eats the squirrel then they eat the bear.\nFOL: all x. (Eats(x, s) -> Eats(x, b))\nTEXT: If someone eats the squirrel then the squirrel likes the cat.\nFOL: all x. (Eats(x, s) -> Likes(s, c))\nTEXT: If someone likes the squirrel and the squirrel is round then they are red.\nFOL: all x. (Likes(x, s) & Round(s) -> Red(x))\nTEXT: If someone is red and they like the cat then they are blue.\nFOL: all x. (Red(x) & Likes(x, c) -> Blue(x))\nTEXT: If someone sees the squirrel then they eat the cat.\nFOL: all x. (Sees(x, s) -> Eats(x, c))\nTEXT: If someone likes the bear then they eat the squirrel.\nFOL: all x. (Likes(x, b) -> Eats(x, s))\nTEXT: The cat sees the cat.\nFOL: Cat(c) -> Sees(c, c)\n</EVALUATE>"
  ]
 },
 {
  "index": 21,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(Anne)\nTEXT: Anne is not smart.\nFOL: -Smart(Anne)\nTEXT: Dave is smart.\nFOL: Smart(Dave)\nTEXT: Fiona is big.\nFOL: Big(Fiona)\nTEXT: Fiona is kind.\nFOL: Kind(Fiona)\nTEXT: Harry is kind.\nFOL: Kind(Harry)\nTEXT: Harry is rough.\nFOL: Rough(Harry)\nTEXT: Rough, smart things are white.\nFOL: all x. (Rough(x) & Smart(x) -> White(x))\nTEXT: All round things are smart.\nFOL: all x. (Round(x) -> Smart(x))\nTEXT: All white things are big.\nFOL: all x. (White(x) -> Big(x))\nTEXT: If Anne is rough then Anne is kind.\nFOL: Rough(Anne) -> Kind(Anne)\nTEXT: If Dave is round then Dave is kind.\nFOL: Round(Dave) -> Kind(Dave)\nTEXT: All smart things are rough.\nFOL: all x. (Smart(x) -> Rough(x))\nTEXT: Dave is not big.\nFOL: -Big(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(Anne)\n\nTEXT: Anne is not smart.\nFOL: -Smart(Anne)\n\nTEXT: Dave is smart.\nFOL: Smart(Dave)\n\nTEXT: Fiona is big.\nFOL: Big(Fiona)\n\nTEXT: Fiona is kind.\nFOL: Kind(Fiona)\n\nTEXT: Harry is kind.\nFOL: Kind(Harry)\n\nTEXT: Harry is rough.\nFOL: Rough(Harry)\n\nTEXT: Rough, smart things are white.\nFOL: all x. (Rough(x) & Smart(x) -> White(x))\n\nTEXT: All round things are smart.\nFOL: all x. (Round(x) -> Smart(x))\n\nTEXT: All white things are big.\nFOL: all x. (White(x) -> Big(x))\n\nTEXT: If Anne is rough then Anne is kind.\nFOL: Rough(Anne) -> Kind(Anne)\n\nTEXT: If Dave is round then Dave is kind.\nFOL: Round(Dave) -> Kind(Dave)\n\nTEXT: All smart things are rough.\nFOL: all x. (Smart(x) -> Rough(x))\n\nTEXT: Dave is not big.\nFOL: -Big(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(Anne)\nTEXT: Anne is not smart.\nFOL: -Smart(Anne)\nTEXT: Dave is smart.\nFOL: Smart(Dave)\nTEXT: Fiona is big.\nFOL: Big(Fiona)\nTEXT: Fiona is kind.\nFOL: Kind(Fiona)\nTEXT: Harry is kind.\nFOL: Kind(Harry)\nTEXT: Harry is rough.\nFOL: Rough(Harry)\nTEXT: Rough, smart things are white.\nFOL: all x. (Rough(x) & Smart(x) -> White(x))\nTEXT: All round things are smart.\nFOL: all x. (Round(x) -> Smart(x))\nTEXT: All white things are big.\nFOL: all x. (White(x) -> Big(x))\nTEXT: If Anne is rough then Anne is kind.\nFOL: -Rough(Anne) -> Kind(Anne)\nTEXT: If Dave is round then Dave is kind.\nFOL: Round(Dave) -> Kind(Dave)\nTEXT: All smart things are rough.\nFOL: all x. (Smart(x) -> Rough(x))\nTEXT: Dave is not big.\nFOL: -Big(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(Anne)\nTEXT: Anne is not smart.\nFOL: -Smart(Anne)\nTEXT: Dave is smart.\nFOL: Smart(Dave)\nTEXT: Fiona is big.\nFOL: Big(Fiona)\nTEXT: Fiona is kind.\nFOL: Kind(Fiona)\nTEXT: Harry is kind.\nFOL: Kind(Harry)\nTEXT: Harry is rough.\nFOL: Rough(Harry)\nTEXT: Rough, smart things are white.\nFOL: (Rough(x) & Smart(x)) -> White(x)\nTEXT: All round things are smart.\nFOL: all x. (Round(x) -> Smart(x))\nTEXT: All white things are big.\nFOL: all x. (White(x) -> Big(x))\nTEXT: If Anne is rough then Anne is kind.\nFOL: Rough(Anne) -> Kind(Anne)\nTEXT: If Dave is round then Dave is kind.\nFOL: Round(Dave) -> Kind(Dave)\nTEXT: All smart things are rough.\nFOL: all x. (Smart(x) -> Rough(x))\nTEXT: Dave is not big.\nFOL: -Big(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(Anne)\n\nTEXT: Anne is not smart.\nFOL: -Smart(Anne)\n\nTEXT: Dave is smart.\nFOL: Smart(Dave)\n\nTEXT: Fiona is big.\nFOL: Big(Fiona)\n\nTEXT: Fiona is kind.\nFOL: Kind(Fiona)\n\nTEXT: Harry is kind.\nFOL: Kind(Harry)\n\nTEXT: Harry is rough.\nFOL: Rough(Harry)\n\nTEXT: Rough, smart things are white.\nFOL: all x. (Rough(x) & Smart(x) -> White(x))\n\nTEXT: All round things are smart.\nFOL: all x. (Round(x) -> Smart(x))\n\nTEXT: All white things are big.\nFOL: all x. (White(x) -> Big(x))\n\nTEXT: If Anne is rough then Anne is kind.\nFOL: -Rough(Anne) -> Kind(Anne)\n\nTEXT: If Dave is round then Dave is kind.\nFOL: Round(Dave) -> Kind(Dave)\n\nTEXT: All smart things are rough.\nFOL: all x. (Smart(x) -> Rough(x))\n\nTEXT: Dave is not big.\nFOL: -Big(Dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 22,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: Green(Anne)\nTEXT: Anne is kind.\nFOL: Kind(Anne)\nTEXT: Anne is round.\nFOL: Round(Anne)\nTEXT: Anne is smart.\nFOL: Smart(Anne)\nTEXT: Anne is white.\nFOL: White(Anne)\nTEXT: Charlie is big.\nFOL: Big(Charlie)\nTEXT: Charlie is kind.\nFOL: Kind(Charlie)\nTEXT: Charlie is red.\nFOL: Red(Charlie)\nTEXT: Charlie is smart.\nFOL: Smart(Charlie)\nTEXT: Fiona is big.\nFOL: Big(Fiona)\nTEXT: Fiona is kind.\nFOL: Kind(Fiona)\nTEXT: Fiona is red.\nFOL: Red(Fiona)\nTEXT: Fiona is white.\nFOL: White(Fiona)\nTEXT: Harry is big.\nFOL: Big(Harry)\nTEXT: Harry is red.\nFOL: Red(Harry)\nTEXT: Harry is white.\nFOL: White(Harry)\nTEXT: Kind, red people are round.\nFOL: all x. ((Kind(x) & Red(x)) -> Round(x))\nTEXT: If Anne is big and Anne is kind then Anne is green.\nFOL: (Big(Anne) & Kind(Anne)) -> Green(Anne)\nTEXT: All kind, big people are white.\nFOL: all x. ((Kind(x) & Big(x)) -> White(x))\nTEXT: Round people are green.\nFOL: all x. (Round(x) -> Green(x))\nTEXT: If Charlie is big then Charlie is green.\nFOL: (Big(Charlie) -> Green(Charlie))\nTEXT: If someone is white then they are kind.\nFOL: all x. (White(x) -> Kind(x))\nTEXT: Anne is red.\nFOL: Red(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: Green(Anne)\nTEXT: Anne is kind.\nFOL: Kind(Anne)\nTEXT: Anne is round.\nFOL: Round(Anne)\nTEXT: Anne is smart.\nFOL: Smart(Anne)\nTEXT: Anne is white.\nFOL: White(Anne)\nTEXT: Charlie is big.\nFOL: Big(Charlie)\nTEXT: Charlie is kind.\nFOL: Kind(Charlie)\nTEXT: Charlie is red.\nFOL: Red(Charlie)\nTEXT: Charlie is smart.\nFOL: Smart(Charlie)\nTEXT: Fiona is big.\nFOL: Big(Fiona)\nTEXT: Fiona is kind.\nFOL: Kind(Fiona)\nTEXT: Fiona is red.\nFOL: Red(Fiona)\nTEXT: Fiona is white.\nFOL: White(Fiona)\nTEXT: Harry is big.\nFOL: Big(Harry)\nTEXT: Harry is red.\nFOL: Red(Harry)\nTEXT: Harry is white.\nFOL: White(Harry)\nTEXT: Kind, red people are round.\nFOL: all x. ((Red(x) & Kind(x)) -> Round(x))\nTEXT: If Anne is big and Anne is kind then Anne is green.\nFOL: (Big(Anne) & Kind(Anne)) -> Green(Anne)\nTEXT: All kind, big people are white.\nFOL: all x. ((Kind(x) & Big(x)) -> White(x))\nTEXT: Round people are green.\nFOL: all x. (Round(x) -> Green(x))\nTEXT: If Charlie is big then Charlie is green.\nFOL: (Big(Charlie) -> Green(Charlie))\nTEXT: If someone is white then they are kind.\nFOL: all x. (White(x) -> Kind(x))\nTEXT: Anne is red.\nFOL: Red(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: Green(Anne)\nTEXT: Anne is kind.\nFOL: Kind(Anne)\nTEXT: Anne is round.\nFOL: Round(Anne)\nTEXT: Anne is smart.\nFOL: Smart(Anne)\nTEXT: Anne is white.\nFOL: White(Anne)\nTEXT: Charlie is big.\nFOL: Big(Charlie)\nTEXT: Charlie is kind.\nFOL: Kind(Charlie)\nTEXT: Charlie is red.\nFOL: Red(Charlie)\nTEXT: Charlie is smart.\nFOL: Smart(Charlie)\nTEXT: Fiona is big.\nFOL: Big(Fiona)\nTEXT: Fiona is kind.\nFOL: Kind(Fiona)\nTEXT: Fiona is red.\nFOL: Red(Fiona)\nTEXT: Fiona is white.\nFOL: White(Fiona)\nTEXT: Harry is big.\nFOL: Big(Harry)\nTEXT: Harry is red.\nFOL: Red(Harry)\nTEXT: Harry is white.\nFOL: White(Harry)\nTEXT: Kind, red people are round.\nFOL: all x. ((Red(x) & Kind(x)) -> Round(x))\nTEXT: If Anne is big and Anne is kind then Anne is green.\nFOL: (Big(Anne) & Kind(Anne)) -> Green(Anne)\nTEXT: All kind, big people are white.\nFOL: all x. (Kind(x) & Big(x) -> White(x))\nTEXT: Round people are green.\nFOL: all x. (Round(x) -> Green(x))\nTEXT: If Charlie is big then Charlie is green.\nFOL: (Big(Charlie) -> Green(Charlie))\nTEXT: If someone is white then they are kind.\nFOL: all x. (White(x) -> Kind(x))\nTEXT: Anne is red.\nFOL: Red(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: Green(Anne)\nTEXT: Anne is kind.\nFOL: Kind(Anne)\nTEXT: Anne is round.\nFOL: Round(Anne)\nTEXT: Anne is smart.\nFOL: Smart(Anne)\nTEXT: Anne is white.\nFOL: White(Anne)\nTEXT: Charlie is big.\nFOL: Big(Charlie)\nTEXT: Charlie is kind.\nFOL: Kind(Charlie)\nTEXT: Charlie is red.\nFOL: Red(Charlie)\nTEXT: Charlie is smart.\nFOL: Smart(Charlie)\nTEXT: Fiona is big.\nFOL: Big(Fiona)\nTEXT: Fiona is kind.\nFOL: Kind(Fiona)\nTEXT: Fiona is red.\nFOL: Red(Fiona)\nTEXT: Fiona is white.\nFOL: White(Fiona)\nTEXT: Harry is big.\nFOL: Big(Harry)\nTEXT: Harry is red.\nFOL: Red(Harry)\nTEXT: Harry is white.\nFOL: White(Harry)\nTEXT: Kind, red people are round.\nFOL: all x. (Red(x) & Kind(x) -> Round(x))\nTEXT: If Anne is big and Anne is kind then Anne is green.\nFOL: (Big(Anne) & Kind(Anne)) -> Green(Anne)\nTEXT: All kind, big people are white.\nFOL: all x. (Kind(x) & Big(x) -> White(x))\nTEXT: Round people are green.\nFOL: all x. (Round(x) -> Green(x))\nTEXT: If Charlie is big then Charlie is green.\nFOL: (Big(Charlie) -> Green(Charlie))\nTEXT: If someone is white then they are kind.\nFOL: all x. (White(x) -> Kind(x))\nTEXT: Anne is red.\nFOL: Red(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: AnneGreen\nTEXT: Anne is kind.\nFOL: AnneKind\nTEXT: Anne is round.\nFOL: AnneRound\nTEXT: Anne is smart.\nFOL: AnneSmart\nTEXT: Anne is white.\nFOL: AnneWhite\nTEXT: Charlie is big.\nFOL: CharlieBig\nTEXT: Charlie is kind.\nFOL: CharlieKind\nTEXT: Charlie is red.\nFOL: CharlieRed\nTEXT: Charlie is smart.\nFOL: CharlieSmart\nTEXT: Fiona is big.\nFOL: FionaBig\nTEXT: Fiona is kind.\nFOL: FionaKind\nTEXT: Fiona is red.\nFOL: FionaRed\nTEXT: Fiona is white.\nFOL: FionaWhite\nTEXT: Harry is big.\nFOL: HarryBig\nTEXT: Harry is red.\nFOL: HarryRed\nTEXT: Harry is white.\nFOL: HarryWhite\nTEXT: Kind, red people are round.\nFOL: all x. ((Kind(x) & Red(x)) -> Round(x))\nTEXT: If Anne is big and Anne is kind then Anne is green.\nFOL: (AnneBig & AnneKind) -> AnneGreen\nTEXT: All kind, big people are white.\nFOL: all x. ((Kind(x) & Big(x)) -> White(x))\nTEXT: Round people are green.\nFOL: all x. (Round(x) -> Green(x))\nTEXT: If Charlie is big then Charlie is green.\nFOL: CharlieBig -> CharlieGreen\nTEXT: If someone is white then they are kind.\nFOL: all x. (White(x) -> Kind(x))\nTEXT: Anne is red.\nFOL: AnneRed\n</EVALUATE>"
  ]
 },
 {
  "index": 23,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Bob(blue)\nTEXT: Erin is blue.\nFOL: Erin(blue)\nTEXT: Gary is cold.\nFOL: Gary(cold)\nTEXT: If Erin is green then Erin is big.\nFOL: Erin(green) -> Erin(big)\nTEXT: Green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: If Bob is cold then Bob is big.\nFOL: Bob(cold) -> Bob(big)\nTEXT: All blue things are cold.\nFOL: all x. (Blue(x) -> Cold(x))\nTEXT: All green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If something is rough and big then it is green.\nFOL: (Rough(x) & Big(x)) -> Green(x)\nTEXT: All kind, blue things are cold.\nFOL: all x. (Kind(x) & Blue(x) -> Cold(x))\nTEXT: Gary is big.\nFOL: Gary(big)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Bob(blue)\nTEXT: Erin is blue.\nFOL: Erin(blue)\nTEXT: Gary is cold.\nFOL: Gary(cold)\nTEXT: If Erin is green then Erin is big.\nFOL: Erin(green) -> Erin(big)\nTEXT: Green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: If Bob is cold then Bob is big.\nFOL: Bob(cold) -> Bob(big)\nTEXT: All blue things are cold.\nFOL: all x. (Blue(x) -> Cold(x))\nTEXT: All green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If something is rough and big then it is green.\nFOL: (Rough(x) & Big(x)) -> Green(x)\nTEXT: All kind, blue things are cold.\nFOL: all x. ((Kind(x) & Blue(x)) -> Cold(x))\nTEXT: Gary is big.\nFOL: Gary(big)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Bob(isBlue)\nTEXT: Erin is blue.\nFOL: Erin(isBlue)\nTEXT: Gary is cold.\nFOL: Gary(isCold)\nTEXT: If Erin is green then Erin is big.\nFOL: Erin(isGreen) -> Erin(isBig)\nTEXT: Green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: If Bob is cold then Bob is big.\nFOL: Bob(isCold) -> Bob(isBig)\nTEXT: All blue things are cold.\nFOL: all x. (Blue(x) -> Cold(x))\nTEXT: All green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If something is rough and big then it is green.\nFOL: (Rough(x) & Big(x)) -> Green(x)\nTEXT: All kind, blue things are cold.\nFOL: all x. (Kind(x) & Blue(x) -> Cold(x))\nTEXT: Gary is big.\nFOL: Gary(isBig)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Bob(blue)\nTEXT: Erin is blue.\nFOL: Erin(blue)\nTEXT: Gary is cold.\nFOL: Gary(cold)\nTEXT: If Erin is green then Erin is big.\nFOL: Erin(green) -> Erin(big)\nTEXT: Green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: If Bob is cold then Bob is big.\nFOL: Bob(cold) -> Bob(big)\nTEXT: All blue things are cold.\nFOL: all x. (Blue(x) -> Cold(x))\nTEXT: All green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If something is rough and big then it is green.\nFOL: Rough(x) & Big(x) -> Green(x)\nTEXT: All kind, blue things are cold.\nFOL: all x. (Kind(x) & Blue(x) -> Cold(x))\nTEXT: Gary is big.\nFOL: Gary(big)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Bob(isBlue)\nTEXT: Erin is blue.\nFOL: Erin(isBlue)\nTEXT: Gary is cold.\nFOL: Gary(isCold)\nTEXT: If Erin is green then Erin is big.\nFOL: Erin(isGreen) -> Erin(isBig)\nTEXT: Green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: If Bob is cold then Bob is big.\nFOL: Bob(isCold) -> Bob(isBig)\nTEXT: All blue things are cold.\nFOL: all x. (Blue(x) -> Cold(x))\nTEXT: All green things are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If something is rough and big then it is green.\nFOL: (Rough(x) & Big(x)) -> Green(x)\nTEXT: All kind, blue things are cold.\nFOL: all x. ((Kind(x) & Blue(x)) -> Cold(x))\nTEXT: Gary is big.\nFOL: Gary(isBig)\n</EVALUATE>"
  ]
 },
 {
  "index": 24,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: Kind(Bob)\nTEXT: Bob is young.\nFOL: Young(Bob)\nTEXT: Dave is big.\nFOL: Big(Dave)\nTEXT: Dave is white.\nFOL: White(Dave)\nTEXT: Dave is young.\nFOL: Young(Dave)\nTEXT: Fiona is big.\nFOL: Big(Fiona)\nTEXT: Fiona is kind.\nFOL: Kind(Fiona)\nTEXT: Fiona is white.\nFOL: White(Fiona)\nTEXT: Harry is blue.\nFOL: Blue(Harry)\nTEXT: Harry is young.\nFOL: Young(Harry)\nTEXT: Blue people are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: All nice, cold people are young.\nFOL: all x. (Nice(x) & Cold(x) -> Young(x))\nTEXT: All young, nice people are cold.\nFOL: all x. (Young(x) & Nice(x) -> Cold(x))\nTEXT: All cold people are kind.\nFOL: all x. (Cold(x) -> Kind(x))\nTEXT: Cold people are young.\nFOL: all x. (Cold(x) -> Young(x))\nTEXT: If Dave is young then Dave is kind.\nFOL: Young(Dave) -> Kind(Dave)\nTEXT: Bob is not nice.\nFOL: -Nice(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: Kind(Bob)\n\nTEXT: Bob is young.\nFOL: Young(Bob)\n\nTEXT: Dave is big.\nFOL: Big(Dave)\n\nTEXT: Dave is white.\nFOL: White(Dave)\n\nTEXT: Dave is young.\nFOL: Young(Dave)\n\nTEXT: Fiona is big.\nFOL: Big(Fiona)\n\nTEXT: Fiona is kind.\nFOL: Kind(Fiona)\n\nTEXT: Fiona is white.\nFOL: White(Fiona)\n\nTEXT: Harry is blue.\nFOL: Blue(Harry)\n\nTEXT: Harry is young.\nFOL: Young(Harry)\n\nTEXT: Blue people are nice.\nFOL: all x. (Blue(x) -> Nice(x))\n\nTEXT: All nice, cold people are young.\nFOL: all x. (Nice(x) & Cold(x) -> Young(x))\n\nTEXT: All young, nice people are cold.\nFOL: all x. (Young(x) & Nice(x) -> Cold(x))\n\nTEXT: All cold people are kind.\nFOL: all x. (Cold(x) -> Kind(x))\n\nTEXT: Cold people are young.\nFOL: all x. (Cold(x) -> Young(x))\n\nTEXT: If Dave is young then Dave is kind.\nFOL: Young(Dave) -> Kind(Dave)\n\nTEXT: Bob is not nice.\nFOL: -Nice(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: Kind(Bob)\n\nTEXT: Bob is young.\nFOL: Young(Bob)\n\nTEXT: Dave is big.\nFOL: Big(Dave)\n\nTEXT: Dave is white.\nFOL: White(Dave)\n\nTEXT: Dave is young.\nFOL: Young(Dave)\n\nTEXT: Fiona is big.\nFOL: Big(Fiona)\n\nTEXT: Fiona is kind.\nFOL: Kind(Fiona)\n\nTEXT: Fiona is white.\nFOL: White(Fiona)\n\nTEXT: Harry is blue.\nFOL: Blue(Harry)\n\nTEXT: Harry is young.\nFOL: Young(Harry)\n\nTEXT: Blue people are nice.\nFOL: Blue(x) -> Nice(x)\n\nTEXT: All nice, cold people are young.\nFOL: all x. (Nice(x) & Cold(x) -> Young(x))\n\nTEXT: All young, nice people are cold.\nFOL: all x. (Young(x) & Nice(x) -> Cold(x))\n\nTEXT: All cold people are kind.\nFOL: all x. (Cold(x) -> Kind(x))\n\nTEXT: Cold people are young.\nFOL: Cold(x) -> Young(x)\n\nTEXT: If Dave is young then Dave is kind.\nFOL: Young(Dave) -> Kind(Dave)\n\nTEXT: Bob is not nice.\nFOL: -Nice(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: Kind(Bob)\nTEXT: Bob is young.\nFOL: Young(Bob)\nTEXT: Dave is big.\nFOL: Big(Dave)\nTEXT: Dave is white.\nFOL: White(Dave)\nTEXT: Dave is young.\nFOL: Young(Dave)\nTEXT: Fiona is big.\nFOL: Big(Fiona)\nTEXT: Fiona is kind.\nFOL: Kind(Fiona)\nTEXT: Fiona is white.\nFOL: White(Fiona)\nTEXT: Harry is blue.\nFOL: Blue(Harry)\nTEXT: Harry is young.\nFOL: Young(Harry)\nTEXT: Blue people are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: All nice, cold people are young.\nFOL: all x. (Nice(x) & Cold(x) -> Young(x))\nTEXT: All young, nice people are cold.\nFOL: all x. (Young(x) & Nice(x) -> Cold(x))\nTEXT: All cold people are kind.\nFOL: all x. (Cold(x) -> Kind(x))\nTEXT: Cold people are young.\nFOL: all x. (Cold(x) -> Young(x))\nTEXT: If Dave is young then Dave is kind.\nFOL: Dave -> (Young(Dave) -> Kind(Dave))\nTEXT: Bob is not nice.\nFOL: -Nice(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: Kind(Bob)\n\nTEXT: Bob is young.\nFOL: Young(Bob)\n\nTEXT: Dave is big.\nFOL: Big(Dave)\n\nTEXT: Dave is white.\nFOL: White(Dave)\n\nTEXT: Dave is young.\nFOL: Young(Dave)\n\nTEXT: Fiona is big.\nFOL: Big(Fiona)\n\nTEXT: Fiona is kind.\nFOL: Kind(Fiona)\n\nTEXT: Fiona is white.\nFOL: White(Fiona)\n\nTEXT: Harry is blue.\nFOL: Blue(Harry)\n\nTEXT: Harry is young.\nFOL: Young(Harry)\n\nTEXT: Blue people are nice.\nFOL: all x. (Blue(x) -> Nice(x))\n\nTEXT: All nice, cold people are young.\nFOL: all x. (Nice(x) & Cold(x) -> Young(x))\n\nTEXT: All young, nice people are cold.\nFOL: all x. (Young(x) & Nice(x) -> Cold(x))\n\nTEXT: All cold people are kind.\nFOL: all x. (Cold(x) -> Kind(x))\n\nTEXT: Cold people are young.\nFOL: all x. (Cold(x) -> Young(x))\n\nTEXT: If Dave is young then Dave is kind.\nFOL: Dave -> (Young(Dave) -> Kind(Dave))\n\nTEXT: Bob is not nice.\nFOL: -Nice(Bob)\n</EVALUATE>"
  ]
 },
 {
  "index": 25,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(Anne)\nTEXT: Anne is cold.\nFOL: Cold(Anne)\nTEXT: Anne is not furry.\nFOL: -Furry(Anne)\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\nTEXT: Charlie is not green.\nFOL: -Green(Charlie)\nTEXT: Erin is cold.\nFOL: Cold(Erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(Erin)\nTEXT: All smart things are quiet.\nFOL: all x. (Smart(x) -> Quiet(x))\nTEXT: If Anne is blue then Anne is smart.\nFOL: Blue(Anne) -> Smart(Anne)\nTEXT: All cold, quiet things are big.\nFOL: all x. (Cold(x) & Quiet(x) -> Big(x))\nTEXT: Quiet things are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nTEXT: If Erin is big then Erin is not blue.\nFOL: Big(Erin) -> -Blue(Erin)\nTEXT: If something is blue and not quiet then it is furry.\nFOL: (Blue(x) & -Quiet(x)) -> Furry(x)\nTEXT: If something is smart and not blue then it is furry.\nFOL: (Smart(x) & -Blue(x)) -> Furry(x)\nTEXT: If something is blue and not quiet then it is not furry.\nFOL: (Blue(x) & -Quiet(x)) -> -Furry(x)\nTEXT: Erin is quiet.\nFOL: Quiet(Erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(Anne)\nTEXT: Anne is cold.\nFOL: Cold(Anne)\nTEXT: Anne is not furry.\nFOL: -Furry(Anne)\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\nTEXT: Charlie is not green.\nFOL: -Green(Charlie)\nTEXT: Erin is cold.\nFOL: Cold(Erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(Erin)\nTEXT: All smart things are quiet.\nFOL: all x. (Smart(x) -> Quiet(x))\nTEXT: If Anne is blue then Anne is smart.\nFOL: Blue(Anne) -> Smart(Anne)\nTEXT: All cold, quiet things are big.\nFOL: all x. (Cold(x) & Quiet(x) -> Big(x))\nTEXT: Quiet things are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nTEXT: If Erin is big then Erin is not blue.\nFOL: Big(Erin) -> -Blue(Erin)\nTEXT: If something is blue and not quiet then it is furry.\nFOL: (Blue(x) & -Quiet(x)) -> Furry(x)\nTEXT: If something is smart and not blue then it is furry.\nFOL: (Smart(x) & -Blue(x)) -> Furry(x)\nTEXT: If something is blue and not quiet then it is not furry.\nFOL: (Blue(x) & -Quiet(x)) -> -Furry(x)\nTEXT: Erin is quiet.\nFOL: Quiet(Erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Anne is not furry.\nFOL: -Furry(anne)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is not green.\nFOL: -Green(charlie)\nTEXT: Erin is cold.\nFOL: Cold(erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(erin)\nTEXT: All smart things are quiet.\nFOL: all x. (Smart(x) -> Quiet(x))\nTEXT: If Anne is blue then Anne is smart.\nFOL: Blue(anne) -> Smart(anne)\nTEXT: All cold, quiet things are big.\nFOL: all x. (Cold(x) & Quiet(x) -> Big(x))\nTEXT: Quiet things are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nTEXT: If Erin is big then Erin is not blue.\nFOL: Big(erin) -> -Blue(erin)\nTEXT: If something is blue and not quiet then it is furry.\nFOL: (Blue(x) & -Quiet(x)) -> Furry(x)\nTEXT: If something is smart and not blue then it is furry.\nFOL: (Smart(x) & -Blue(x)) -> Furry(x)\nTEXT: If something is blue and not quiet then it is not furry.\nFOL: (Blue(x) & -Quiet(x)) -> -Furry(x)\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(Anne)\nTEXT: Anne is cold.\nFOL: Cold(Anne)\nTEXT: Anne is not furry.\nFOL: -Furry(Anne)\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\nTEXT: Charlie is not green.\nFOL: -Green(Charlie)\nTEXT: Erin is cold.\nFOL: Cold(Erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(Erin)\nTEXT: All smart things are quiet.\nFOL: all x. (Smart(x) -> Quiet(x))\nTEXT: If Anne is blue then Anne is smart.\nFOL: Blue(Anne) -> Smart(Anne)\nTEXT: All cold, quiet things are big.\nFOL: all x. (Cold(x) & Quiet(x) -> Big(x))\nTEXT: Quiet things are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nTEXT: If Erin is big then Erin is not blue.\nFOL: Big(Erin) -> -Blue(Erin)\nTEXT: If something is blue and not quiet then it is furry.\nFOL: (Blue(x) & -Quiet(x) -> Furry(x))\nTEXT: If something is smart and not blue then it is furry.\nFOL: (Smart(x) & -Blue(x) -> Furry(x))\nTEXT: If something is blue and not quiet then it is not furry.\nFOL: (Blue(x) & -Quiet(x) -> -Furry(x))\nTEXT: Erin is quiet.\nFOL: Quiet(Erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(Anne)\n\nTEXT: Anne is cold.\nFOL: Cold(Anne)\n\nTEXT: Anne is not furry.\nFOL: -Furry(Anne)\n\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\n\nTEXT: Charlie is not green.\nFOL: -Green(Charlie)\n\nTEXT: Erin is cold.\nFOL: Cold(Erin)\n\nTEXT: Erin is not quiet.\nFOL: -Quiet(Erin)\n\nTEXT: All smart things are quiet.\nFOL: all x. (Smart(x) -> Quiet(x))\n\nTEXT: If Anne is blue then Anne is smart.\nFOL: Blue(Anne) -> Smart(Anne)\n\nTEXT: All cold, quiet things are big.\nFOL: all x. (Cold(x) & Quiet(x) -> Big(x))\n\nTEXT: Quiet things are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\n\nTEXT: If Erin is big then Erin is not blue.\nFOL: Big(Erin) -> -Blue(Erin)\n\nTEXT: If something is blue and not quiet then it is furry.\nFOL: (Blue(x) & -Quiet(x)) -> Furry(x)\n\nTEXT: If something is smart and not blue then it is furry.\nFOL: (Smart(x) & -Blue(x)) -> Furry(x)\n\nTEXT: If something is blue and not quiet then it is not furry.\nFOL: (Blue(x) & -Quiet(x)) -> -Furry(x)\n\nTEXT: Erin is quiet.\nFOL: Quiet(Erin)\n</EVALUATE>"
  ]
 },
 {
  "index": 26,
  "responses": [
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: Bob woke up one day to find he had become round.\nFOL: Bob -> Round\nTEXT: He was still rough, red, and green, but now he was also big.\nFOL: Rough(Bob) & Red(Bob) & Green(Bob) & Big(Bob)\nTEXT: Charlie may be young but he is nice, wears green shoes and is cold.\nFOL: Young(Charlie) & Nice(Charlie) & GreenShoes(Charlie) & Cold(Charlie)\nTEXT: That guy Fred sure is nice.\nFOL: all x. (Fred(x) -> Nice(x))\nTEXT: Someone who has young, nice and cold qualities will possess a red quality, too.\nFOL: exists x. (Young(x) & Nice(x) & Cold(x) -> Red(x))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> Kind(x))\nTEXT: Young people who feel cold and are still kind usually look rough.\nFOL: exists x. (Young(x) & Cold(x) & Kind(x) & Rough(x))\nTEXT: Charlie is rough.\nFOL: Rough(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: Bob woke up one day to find he had become round.\nFOL: Bob -> Round\nTEXT: He was still rough, red, and green, but now he was also big.\nFOL: Rough(Bob) & Red(Bob) & Green(Bob) & Big(Bob)\nTEXT: Charlie may be young but he is nice, wears green shoes and is cold.\nFOL: Young(Charlie) & Nice(Charlie) & GreenShoes(Charlie) & Cold(Charlie)\nTEXT: That guy Fred sure is nice.\nFOL: all x. (Fred(x) -> Nice(x))\nTEXT: Someone who has young, nice and cold qualities will possess a red quality, too.\nFOL: exists x. (Young(x) & Nice(x) & Cold(x) -> Red(x))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> Kind(x))\nTEXT: Young people who feel cold and are still kind usually look rough.\nFOL: exists x. (Young(x) & Cold(x) & Kind(x) -> Rough(x))\nTEXT: Charlie is rough.\nFOL: Rough(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: Bob woke up one day to find he had become round.\nFOL: Bob -> Round\nTEXT: He was still rough, red, and green, but now he was also big.\nFOL: Rough(Bob) & Red(Bob) & Green(Bob) & Big(Bob)\nTEXT: Charlie may be young but he is nice, wears green shoes and is cold.\nFOL: Young(Charlie) & Nice(Charlie) & GreenShoes(Charlie) & Cold(Charlie)\nTEXT: That guy Fred sure is nice.\nFOL: all x. (Fred(x) -> Nice(x))\nTEXT: Someone who has young, nice and cold qualities will possess a red quality, too.\nFOL: all x. (Young(x) & Nice(x) & Cold(x) -> Red(x))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> Kind(x))\nTEXT: Young people who feel cold and are still kind usually look rough.\nFOL: all x. ((Young(x) & Cold(x) & Kind(x)) -> Rough(x))\nTEXT: Charlie is rough.\nFOL: Rough(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: Bob woke up one day to find he had become round.\nFOL: Bob -> Round\nTEXT: He was still rough, red, and green, but now he was also big.\nFOL: Rough(Bob) & Red(Bob) & Green(Bob) & Big(Bob)\nTEXT: Charlie may be young but he is nice, wears green shoes and is cold.\nFOL: Young(Charlie) & Nice(Charlie) & GreenShoes(Charlie) & Cold(Charlie)\nTEXT: That guy Fred sure is nice.\nFOL: all x. (Fred(x) -> Nice(x))\nTEXT: Someone who has young, nice and cold qualities will possess a red quality, too.\nFOL: all x. (Young(x) & Nice(x) & Cold(x) -> Red(x))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> Kind(x))\nTEXT: Young people who feel cold and are still kind usually look rough.\nFOL: all x. (Young(x) & Cold(x) & Kind(x) -> Rough(x))\nTEXT: Charlie is rough.\nFOL: Rough(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: all x. (Alan(x) -> Nice(x))\nTEXT: Bob woke up one day to find he had become round.\nFOL: Bob -> Round\nTEXT: He was still rough, red, and green, but now he was also big.\nFOL: Rough(Bob) & Red(Bob) & Green(Bob) & Big(Bob)\nTEXT: Charlie may be young but he is nice, wears green shoes and is cold.\nFOL: Young(Charlie) & Nice(Charlie) & GreenShoes(Charlie) & Cold(Charlie)\nTEXT: That guy Fred sure is nice.\nFOL: all x. (Fred(x) -> Nice(x))\nTEXT: Someone who has young, nice and cold qualities will possess a red quality, too.\nFOL: exists x. (Young(x) & Nice(x) & Cold(x) -> Red(x))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> KindToOthers(x))\nTEXT: Young people who feel cold and are still kind usually look rough.\nFOL: exists x. (Young(x) & Cold(x) & KindToOthers(x) & Rough(x))\nTEXT: Charlie is rough.\nFOL: Rough(Charlie)\n</EVALUATE>"
  ]
 },
 {
  "index": 27,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Bob(Smart)\nTEXT: Erin is big.\nFOL: Erin(Big)\nTEXT: Gary is blue.\nFOL: Gary(Blue)\nTEXT: All big, smart people are green.\nFOL: all x. (Big(x) & Smart(x) -> Green(x))\nTEXT: If someone is smart then they are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: If someone is big then they are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: If Gary is cold and Gary is blue then Gary is green.\nFOL: (Cold(Gary) & Blue(Gary)) -> Green(Gary)\nTEXT: Green, round people are big.\nFOL: all x. (Green(x) & Round(x) -> Big(x))\nTEXT: All green people are round.\nFOL: all x. (Green(x) -> Round(x))\nTEXT: Erin is not green.\nFOL: -Green(Erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Bob(Smart)\nTEXT: Erin is big.\nFOL: Erin(Big)\nTEXT: Gary is blue.\nFOL: Gary(Blue)\nTEXT: All big, smart people are green.\nFOL: all x. (Big(x) & Smart(x) -> Green(x))\nTEXT: If someone is smart then they are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: If someone is big then they are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: If Gary is cold and Gary is blue then Gary is green.\nFOL: (Cold(Gary) & Blue(Gary)) -> Green(Gary)\nTEXT: Green, round people are big.\nFOL: all x. (Round(x) & Green(x) -> Big(x))\nTEXT: All green people are round.\nFOL: all x. (Green(x) -> Round(x))\nTEXT: Erin is not green.\nFOL: -Green(Erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Bob(smart)\nTEXT: Erin is big.\nFOL: Erin(big)\nTEXT: Gary is blue.\nFOL: Gary(blue)\nTEXT: All big, smart people are green.\nFOL: all x. (Big(x) & Smart(x) -> Green(x))\nTEXT: If someone is smart then they are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: If someone is big then they are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: If Gary is cold and Gary is blue then Gary is green.\nFOL: (Cold(Gary) & Blue(Gary)) -> Green(Gary)\nTEXT: Green, round people are big.\nFOL: all x. (Green(x) & Round(x) -> Big(x))\nTEXT: All green people are round.\nFOL: all x. (Green(x) -> Round(x))\nTEXT: Erin is not green.\nFOL: -Green(Erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Bob(Smart)\nTEXT: Erin is big.\nFOL: Erin(Big)\nTEXT: Gary is blue.\nFOL: Gary(Blue)\nTEXT: All big, smart people are green.\nFOL: all x. (Big(x) & Smart(x) -> Green(x))\nTEXT: If someone is smart then they are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: If someone is big then they are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: If Gary is cold and Gary is blue then Gary is green.\nFOL: Gary(Cold) & Gary(Blue) -> Gary(Green)\nTEXT: Green, round people are big.\nFOL: all x. (Green(x) & Round(x) -> Big(x))\nTEXT: All green people are round.\nFOL: all x. (Green(x) -> Round(x))\nTEXT: Erin is not green.\nFOL: -Erin(Green)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Bob(smart)\nTEXT: Erin is big.\nFOL: Erin(big)\nTEXT: Gary is blue.\nFOL: Gary(blue)\nTEXT: All big, smart people are green.\nFOL: all x. (Big(x) & Smart(x) -> Green(x))\nTEXT: If someone is smart then they are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: If someone is big then they are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: If Gary is cold and Gary is blue then Gary is green.\nFOL: (Cold(Gary) & Blue(Gary)) -> Green(Gary)\nTEXT: Green, round people are big.\nFOL: all x. (Round(x) & Green(x) -> Big(x))\nTEXT: All green people are round.\nFOL: all x. (Green(x) -> Round(x))\nTEXT: Erin is not green.\nFOL: -Green(Erin)\n</EVALUATE>"
  ]
 },
 {
  "index": 28,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(Dave)\nTEXT: Fiona is not quiet.\nFOL: -Quiet(Fiona)\nTEXT: Fiona is smart.\nFOL: Smart(Fiona)\nTEXT: If someone is smart then they are nice.\nFOL: all x. (Smart(x) -> Nice(x))\nTEXT: All smart people are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: Rough people are big.\nFOL: all x. (Rough(x) -> Big(x))\nTEXT: If someone is quiet and white then they are not rough.\nFOL: -Rough(x) | (Quiet(x) & White(x))\nTEXT: Big people are rough.\nFOL: all x. (Big(x) -> Rough(x))\nTEXT: Rough, big people are white.\nFOL: all x. (Rough(x) & Big(x) -> White(x))\nTEXT: If Dave is white then Dave is not big.\nFOL: -Big(Dave) | White(Dave)\nTEXT: If someone is big and not white then they are not furry.\nFOL: -Furry(x) | (Big(x) & -White(x))\nTEXT: Dave is nice.\nFOL: Nice(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(Dave)\n\nTEXT: Fiona is not quiet.\nFOL: -Quiet(Fiona)\n\nTEXT: Fiona is smart.\nFOL: Smart(Fiona)\n\nTEXT: If someone is smart then they are nice.\nFOL: all x. (Smart(x) -> Nice(x))\n\nTEXT: All smart people are big.\nFOL: all x. (Smart(x) -> Big(x))\n\nTEXT: Rough people are big.\nFOL: all x. (Rough(x) -> Big(x))\n\nTEXT: If someone is quiet and white then they are not rough.\nFOL: -Rough(x) | (Quiet(x) & White(x))\n\nTEXT: Big people are rough.\nFOL: all x. (Big(x) -> Rough(x))\n\nTEXT: Rough, big people are white.\nFOL: all x. (Rough(x) & Big(x) -> White(x))\n\nTEXT: If Dave is white then Dave is not big.\nFOL: -Big(Dave) | White(Dave)\n\nTEXT: If someone is big and not white then they are not furry.\nFOL: -Furry(x) | (Big(x) & -White(x))\n\nTEXT: Dave is nice.\nFOL: Nice(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: WhiteDave\nTEXT: Fiona is not quiet.\nFOL: -QuietFiona\nTEXT: Fiona is smart.\nFOL: SmartFiona\nTEXT: If someone is smart then they are nice.\nFOL: all x. (Smart(x) -> Nice(x))\nTEXT: All smart people are big.\nFOL: all x. (Smart(x) -> Big(x))\nTEXT: Rough people are big.\nFOL: all x. (Rough(x) -> Big(x))\nTEXT: If someone is quiet and white then they are not rough.\nFOL: -Rough(x) | (Quiet(x) & White(x))\nTEXT: Big people are rough.\nFOL: all x. (Big(x) -> Rough(x))\nTEXT: Rough, big people are white.\nFOL: all x. (Rough(x) & Big(x) -> White(x))\nTEXT: If Dave is white then Dave is not big.\nFOL: -BigDave | WhiteDave\nTEXT: If someone is big and not white then they are not furry.\nFOL: -Furry(x) | (Big(x) & -White(x))\nTEXT: Dave is nice.\nFOL: NiceDave\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: WhiteDave\n\nTEXT: Fiona is not quiet.\nFOL: -QuietFiona\n\nTEXT: Fiona is smart.\nFOL: SmartFiona\n\nTEXT: If someone is smart then they are nice.\nFOL: all x. (Smart(x) -> Nice(x))\n\nTEXT: All smart people are big.\nFOL: all x. (Smart(x) -> Big(x))\n\nTEXT: Rough people are big.\nFOL: all x. (Rough(x) -> Big(x))\n\nTEXT: If someone is quiet and white then they are not rough.\nFOL: -Rough(x) | (Quiet(x) & White(x))\n\nTEXT: Big people are rough.\nFOL: all x. (Big(x) -> Rough(x))\n\nTEXT: Rough, big people are white.\nFOL: all x. (Rough(x) & Big(x) -> White(x))\n\nTEXT: If Dave is white then Dave is not big.\nFOL: -BigDave | WhiteDave\n\nTEXT: If someone is big and not white then they are not furry.\nFOL: -Furry(x) | (Big(x) & -White(x))\n\nTEXT: Dave is nice.\nFOL: NiceDave\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(dave)\n\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n\nTEXT: Fiona is smart.\nFOL: Smart(fiona)\n\nTEXT: If someone is smart then they are nice.\nFOL: all x. (Smart(x) -> Nice(x))\n\nTEXT: All smart people are big.\nFOL: all x. (Smart(x) -> Big(x))\n\nTEXT: Rough people are big.\nFOL: all x. (Rough(x) -> Big(x))\n\nTEXT: If someone is quiet and white then they are not rough.\nFOL: -Rough(x) | (Quiet(x) & White(x))\n\nTEXT: Big people are rough.\nFOL: all x. (Big(x) -> Rough(x))\n\nTEXT: Rough, big people are white.\nFOL: all x. (Rough(x) & Big(x) -> White(x))\n\nTEXT: If Dave is white then Dave is not big.\nFOL: -Big(dave) | White(dave)\n\nTEXT: If someone is big and not white then they are not furry.\nFOL: -Furry(x) | (Big(x) & -White(x))\n\nTEXT: Dave is nice.\nFOL: Nice(dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 29,
  "responses": [
   "<EVALUATE>\nTEXT: The cow chases the squirrel.\nFOL: Cow(cow) & Squirrel(squirrel) & Chases(cow, squirrel)\nTEXT: The cow is blue.\nFOL: Cow(cow) & Blue(cow)\nTEXT: The cow is round.\nFOL: Cow(cow) & Round(cow)\nTEXT: The cow is young.\nFOL: Cow(cow) & Young(cow)\nTEXT: The cow needs the squirrel.\nFOL: Cow(cow) & Needs(cow, squirrel)\nTEXT: The cow sees the squirrel.\nFOL: Cow(cow) & Sees(cow, squirrel)\nTEXT: The squirrel chases the cow.\nFOL: Squirrel(squirrel) & Chases(squirrel, cow)\nTEXT: The squirrel is young.\nFOL: Squirrel(squirrel) & Young(squirrel)\nTEXT: The squirrel needs the cow.\nFOL: Squirrel(squirrel) & Needs(squirrel, cow)\nTEXT: The squirrel sees the cow.\nFOL: Squirrel(squirrel) & Sees(squirrel, cow)\nTEXT: If the cow needs the squirrel and the squirrel sees the cow then the squirrel is big.\nFOL: (Cow(cow) & Needs(cow, squirrel) & Squirrel(squirrel) & Sees(squirrel, cow)) -> Big(squirrel)\nTEXT: If someone is big then they chase the squirrel.\nFOL: Big(x) -> Chases(x, squirrel)\nTEXT: If the cow needs the squirrel and the cow is big then the cow is young.\nFOL: (Cow(cow) & Needs(cow, squirrel) & Big(cow)) -> Young(cow)\nTEXT: If someone sees the squirrel and they are blue then the squirrel needs the cow.\nFOL: Sees(x, squirrel) & Blue(x) -> Needs(squirrel, cow)\nTEXT: If someone chases the squirrel then they are cold.\nFOL: Chases(x, squirrel) -> Cold(x)\nTEXT: If the squirrel needs the cow and the squirrel sees the cow then the cow needs the squirrel.\nFOL: (Squirrel(squirrel) & Needs(squirrel, cow) & Squirrel(squirrel) & Sees(squirrel, cow)) -> Needs(cow, squirrel)\nTEXT: The squirrel is not round.\nFOL: Squirrel(squirrel) & -Round(squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the squirrel.\nFOL: Cow(cow) & Squirrel(squirrel) & Chases(cow, squirrel)\nTEXT: The cow is blue.\nFOL: Cow(cow) & Blue(cow)\nTEXT: The cow is round.\nFOL: Cow(cow) & Round(cow)\nTEXT: The cow is young.\nFOL: Cow(cow) & Young(cow)\nTEXT: The cow needs the squirrel.\nFOL: Cow(cow) & Needs(cow, squirrel)\nTEXT: The cow sees the squirrel.\nFOL: Cow(cow) & Sees(cow, squirrel)\nTEXT: The squirrel chases the cow.\nFOL: Squirrel(squirrel) & Chases(squirrel, cow)\nTEXT: The squirrel is young.\nFOL: Squirrel(squirrel) & Young(squirrel)\nTEXT: The squirrel needs the cow.\nFOL: Squirrel(squirrel) & Needs(squirrel, cow)\nTEXT: The squirrel sees the cow.\nFOL: Squirrel(squirrel) & Sees(squirrel, cow)\nTEXT: If the cow needs the squirrel and the squirrel sees the cow then the squirrel is big.\nFOL: (Cow(cow) & Needs(cow, squirrel) & Squirrel(squirrel) & Sees(squirrel, cow)) -> Big(squirrel)\nTEXT: If someone is big then they chase the squirrel.\nFOL: Big(x) -> Chases(x, squirrel)\nTEXT: If the cow needs the squirrel and the cow is big then the cow is young.\nFOL: (Cow(cow) & Needs(cow, squirrel) & Big(cow)) -> Young(cow)\nTEXT: If someone sees the squirrel and they are blue then the squirrel needs the cow.\nFOL: (Sees(x, squirrel) & Blue(x)) -> Needs(squirrel, cow)\nTEXT: If someone chases the squirrel then they are cold.\nFOL: Chases(x, squirrel) -> Cold(x)\nTEXT: If the squirrel needs the cow and the squirrel sees the cow then the cow needs the squirrel.\nFOL: (Squirrel(squirrel) & Needs(squirrel, cow) & Squirrel(squirrel) & Sees(squirrel, cow)) -> Needs(cow, squirrel)\nTEXT: The squirrel is not round.\nFOL: Squirrel(squirrel) & -Round(squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the squirrel.\nFOL: Cow(cow) & Squirrel(squirrel) & Chases(cow, squirrel)\nTEXT: The cow is blue.\nFOL: Cow(cow) & Blue(cow)\nTEXT: The cow is round.\nFOL: Cow(cow) & Round(cow)\nTEXT: The cow is young.\nFOL: Cow(cow) & Young(cow)\nTEXT: The cow needs the squirrel.\nFOL: Cow(cow) & Needs(cow, squirrel)\nTEXT: The cow sees the squirrel.\nFOL: Cow(cow) & Sees(cow, squirrel)\nTEXT: The squirrel chases the cow.\nFOL: Squirrel(squirrel) & Chases(squirrel, cow)\nTEXT: The squirrel is young.\nFOL: Squirrel(squirrel) & Young(squirrel)\nTEXT: The squirrel needs the cow.\nFOL: Squirrel(squirrel) & Needs(squirrel, cow)\nTEXT: The squirrel sees the cow.\nFOL: Squirrel(squirrel) & Sees(squirrel, cow)\nTEXT: If the cow needs the squirrel and the squirrel sees the cow then the squirrel is big.\nFOL: (Needs(cow, squirrel) & Sees(squirrel, cow)) -> Big(squirrel)\nTEXT: If someone is big then they chase the squirrel.\nFOL: Big(x) -> Chases(x, squirrel)\nTEXT: If the cow needs the squirrel and the cow is big then the cow is young.\nFOL: (Needs(cow, squirrel) & Big(cow)) -> Young(cow)\nTEXT: If someone sees the squirrel and they are blue then the squirrel needs the cow.\nFOL: Sees(x, squirrel) & Blue(x) -> Needs(squirrel, cow)\nTEXT: If someone chases the squirrel then they are cold.\nFOL: Chases(x, squirrel) -> Cold(x)\nTEXT: If the squirrel needs the cow and the squirrel sees the cow then the cow needs the squirrel.\nFOL: (Needs(squirrel, cow) & Sees(squirrel, cow)) -> Needs(cow, squirrel)\nTEXT: The squirrel is not round.\nFOL: -Round(squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the squirrel.\nFOL: Cow(cow) & Squirrel(squirrel) & Chases(cow, squirrel)\nTEXT: The cow is blue.\nFOL: Cow(cow) & Blue(cow)\nTEXT: The cow is round.\nFOL: Cow(cow) & Round(cow)\nTEXT: The cow is young.\nFOL: Cow(cow) & Young(cow)\nTEXT: The cow needs the squirrel.\nFOL: Cow(cow) & Needs(cow, squirrel)\nTEXT: The cow sees the squirrel.\nFOL: Cow(cow) & Sees(cow, squirrel)\nTEXT: The squirrel chases the cow.\nFOL: Squirrel(squirrel) & Chases(squirrel, cow)\nTEXT: The squirrel is young.\nFOL: Squirrel(squirrel) & Young(squirrel)\nTEXT: The squirrel needs the cow.\nFOL: Squirrel(squirrel) & Needs(squirrel, cow)\nTEXT: The squirrel sees the cow.\nFOL: Squirrel(squirrel) & Sees(squirrel, cow)\nTEXT: If the cow needs the squirrel and the squirrel sees the cow then the squirrel is big.\nFOL: (Needs(cow, squirrel) & Sees(squirrel, cow)) -> Big(squirrel)\nTEXT: If someone is big then they chase the squirrel.\nFOL: Big(x) -> Chases(x, squirrel)\nTEXT: If the cow needs the squirrel and the cow is big then the cow is young.\nFOL: (Needs(cow, squirrel) & Big(cow)) -> Young(cow)\nTEXT: If someone sees the squirrel and they are blue then the squirrel needs the cow.\nFOL: Sees(x, squirrel) & Blue(x) -> Needs(squirrel, cow)\nTEXT: If someone chases the squirrel then they are cold.\nFOL: Chases(x, squirrel) -> Cold(x)\nTEXT: If the squirrel needs the cow and the squirrel sees the cow then the cow needs the squirrel.\nFOL: (Needs(squirrel, cow) & Sees(squirrel, cow)) -> Needs(cow, squirrel)\nTEXT: The squirrel is not round.\nFOL: Squirrel(squirrel) & -Round(squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow chases the squirrel.\nFOL: Cow(cow) & Squirrel(squirrel) & Chases(cow, squirrel)\nTEXT: The cow is blue.\nFOL: Cow(cow) & Blue(cow)\nTEXT: The cow is round.\nFOL: Cow(cow) & Round(cow)\nTEXT: The cow is young.\nFOL: Cow(cow) & Young(cow)\nTEXT: The cow needs the squirrel.\nFOL: Cow(cow) & Needs(cow, squirrel)\nTEXT: The cow sees the squirrel.\nFOL: Cow(cow) & Sees(cow, squirrel)\nTEXT: The squirrel chases the cow.\nFOL: Squirrel(squirrel) & Chases(squirrel, cow)\nTEXT: The squirrel is young.\nFOL: Squirrel(squirrel) & Young(squirrel)\nTEXT: The squirrel needs the cow.\nFOL: Squirrel(squirrel) & Needs(squirrel, cow)\nTEXT: The squirrel sees the cow.\nFOL: Squirrel(squirrel) & Sees(squirrel, cow)\nTEXT: If the cow needs the squirrel and the squirrel sees the cow then the squirrel is big.\nFOL: (Cow(cow) & Needs(cow, squirrel) & Squirrel(squirrel) & Sees(squirrel, cow)) -> Big(squirrel)\nTEXT: If someone is big then they chase the squirrel.\nFOL: Big(x) -> Chases(x, squirrel)\nTEXT: If the cow needs the squirrel and the cow is big then the cow is young.\nFOL: (Cow(cow) & Needs(cow, squirrel) & Big(cow)) -> Young(cow)\nTEXT: If someone sees the squirrel and they are blue then the squirrel needs the cow.\nFOL: (Sees(x, squirrel) & Blue(x)) -> Needs(squirrel, cow)\nTEXT: If someone chases the squirrel then they are cold.\nFOL: Chases(x, squirrel) -> Cold(x)\nTEXT: If the squirrel needs the cow and the squirrel sees the cow then the cow needs the squirrel.\nFOL: (Squirrel(squirrel) & Needs(squirrel, cow) & Squirrel(squirrel) & Sees(squirrel, cow)) -> Needs(cow, squirrel)\nTEXT: The squirrel is not round.\nFOL: -Round(squirrel)\n</EVALUATE>"
  ]
 },
 {
  "index": 30,
  "responses": [
   "<EVALUATE>\nTEXT: Alan is a big fellow, often blue and sad, but he is nice.\nFOL: BigFellow(Alan) & Blue(Alan) & Sad(Alan) & Nice(Alan)\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: KindYoungPerson(Charlie) & Young(Charlie) & Blue(Charlie)\nTEXT: Eric is a really nice guy with a big round body, usually wearing red.\nFOL: NiceGuy(Eric) & BigRoundBody(Eric) & Red(Eric)\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(Fred) & Kind(Fred)\nTEXT: Young, red people are usually quite blue too.\nFOL: Young(RedPerson) & Blue(RedPerson)\nTEXT: Big people who are red in color are almost always young.\nFOL: Big(RedPerson) & Young(RedPerson)\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: Big(BlueRedPerson) & RoughSkin(BlueRedPerson)\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: Red(x) -> Green(x)\nTEXT: A kind person who looks blue because he is is cold is usually big in stature.\nFOL: KindPerson(x) & Blue(x) & Cold(x) -> Big(x)\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: Green(x) & Blue(x) & Red(x) -> Round(x)\nTEXT: When a person is blue, rough and kind then it means they also are cold.\nFOL: Blue(x) & Rough(x) & Kind(x) -> Cold(x)\nTEXT: Eric is not young.\nFOL: -Young(Eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a big fellow, often blue and sad, but he is nice.\nFOL: BigFellow(Alan) & Blue(Alan) & Sad(Alan) & Nice(Alan)\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: KindYoungPerson(Charlie) & Young(Charlie) & Blue(Charlie)\nTEXT: Eric is a really nice guy with a big round body, usually wearing red.\nFOL: NiceGuy(Eric) & BigRoundBody(Eric) & Red(Eric)\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(Fred) & Kind(Fred)\nTEXT: Young, red people are usually quite blue too.\nFOL: Young(RedPerson) & Blue(RedPerson)\nTEXT: Big people who are red in color are almost always young.\nFOL: Big(RedPerson) & Young(RedPerson)\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: Big(BlueRedPerson) & RoughSkin(BlueRedPerson)\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: Red(x) -> Green(x)\nTEXT: A kind person who looks blue because he is is cold is usually big in stature.\nFOL: Kind(x) & Blue(x) & Cold(x) -> Big(x)\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: Green(x) & Blue(x) & Red(x) -> Round(x)\nTEXT: When a person is blue, rough and kind then it means they also are cold.\nFOL: Blue(x) & RoughSkin(x) & Kind(x) -> Cold(x)\nTEXT: Eric is not young.\nFOL: -Young(Eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a big fellow, often blue and sad, but he is nice.\nFOL: BigFellow(Alan) & Blue(Alan) & Sad(Alan) & Nice(Alan)\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: KindYoungPerson(Charlie) & Young(Charlie) & Blue(Charlie)\nTEXT: Eric is a really nice guy with a big round body, usually wearing red.\nFOL: NiceGuy(Eric) & BigRoundBody(Eric) & Red(Eric)\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(Fred) & Kind(Fred)\nTEXT: Young, red people are usually quite blue too.\nFOL: Young(RedPerson) & Blue(RedPerson)\nTEXT: Big people who are red in color are almost always young.\nFOL: Big(RedPerson) & Young(RedPerson)\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: Big(BlueRedPerson) & RoughSkin(BlueRedPerson)\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: Red(x) -> Green(x)\nTEXT: A kind person who looks blue because he is is cold is usually big in stature.\nFOL: KindPerson(x) & Blue(x) & Cold(x) -> Big(x)\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: Green(x) & Blue(x) & Red(x) -> Round(x)\nTEXT: When a person is blue, rough and kind then it means they also are cold.\nFOL: Blue(x) & RoughKind(x) -> Cold(x)\nTEXT: Eric is not young.\nFOL: -Young(Eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a big fellow, often blue and sad, but he is nice.\nFOL: BigFellow(Alan) & Blue(Alan) & Sad(Alan) & Nice(Alan)\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: KindYoungPerson(Charlie) & Young(Charlie) & Blue(Charlie)\nTEXT: Eric is a really nice guy with a big round body, usually wearing red.\nFOL: NiceGuy(Eric) & BigRoundBody(Eric) & Red(Eric)\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(Fred) & Kind(Fred)\nTEXT: Young, red people are usually quite blue too.\nFOL: Young(RedPerson) & Blue(RedPerson)\nTEXT: Big people who are red in color are almost always young.\nFOL: Big(RedPerson) & Young(RedPerson)\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: Big(BlueRedPerson) & RoughSkin(BlueRedPerson)\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: Red(x) -> Green(x)\nTEXT: A kind person who looks blue because he is is cold is usually big in stature.\nFOL: KindPerson(x) & Blue(x) & Cold(x) -> Big(x)\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: Green(x) & Blue(x) & Red(x) -> Round(x)\nTEXT: When a person is blue, rough and kind then it means they also are cold.\nFOL: Blue(x) & Kind(x) & RoughSkin(x) -> Cold(x)\nTEXT: Eric is not young.\nFOL: -Young(Eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a big fellow, often blue and sad, but he is nice.\nFOL: BigFellow(Alan) & Blue(Alan) & Sad(Alan) & Nice(Alan)\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: KindYoungPerson(Charlie) & Young(Charlie) & Blue(Charlie)\nTEXT: Eric is a really nice guy with a big round body, usually wearing red.\nFOL: NiceGuy(Eric) & BigRoundBody(Eric) & Red(Eric)\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(Fred) & Kind(Fred)\nTEXT: Young, red people are usually quite blue too.\nFOL: Young(RedPerson) & Blue(RedPerson)\nTEXT: Big people who are red in color are almost always young.\nFOL: Big(RedPerson) & Young(RedPerson)\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: Big(BlueRedPerson) & RoughSkin(BlueRedPerson)\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: Red(x) -> Green(x)\nTEXT: A kind person who looks blue because he is is cold is usually big in stature.\nFOL: KindPerson(x) & Blue(x) & Cold(x) -> Big(x)\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: Green(x) & Blue(x) & Red(x) -> BigRoundBody(x)\nTEXT: When a person is blue, rough and kind then it means they also are cold.\nFOL: Blue(x) & RoughSkin(x) & Kind(x) -> Cold(x)\nTEXT: Eric is not young.\nFOL: -Young(Eric)\n</EVALUATE>"
  ]
 },
 {
  "index": 31,
  "responses": [
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: Cat(chases(cow))\nTEXT: The cat chases the rabbit.\nFOL: Cat(chases(rabbit))\nTEXT: The cat is nice.\nFOL: Cat(nice)\nTEXT: The cat needs the cow.\nFOL: Cat(needs(cow))\nTEXT: The cat visits the rabbit.\nFOL: Cat(visits(rabbit))\nTEXT: The cow is nice.\nFOL: Cow(nice)\nTEXT: The cow is red.\nFOL: Cow(red)\nTEXT: The cow needs the cat.\nFOL: Cow(needs(cat))\nTEXT: The cow visits the cat.\nFOL: Cow(visits(cat))\nTEXT: The mouse chases the cow.\nFOL: Mouse(chases(cow))\nTEXT: The mouse chases the rabbit.\nFOL: Mouse(chases(rabbit))\nTEXT: The mouse is kind.\nFOL: Mouse(kind)\nTEXT: The mouse needs the rabbit.\nFOL: Mouse(needs(rabbit))\nTEXT: The rabbit chases the cow.\nFOL: Rabbit(chases(cow))\nTEXT: The rabbit needs the cow.\nFOL: Rabbit(needs(cow))\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: all x. ((x(visits(cow)) & x(nice)) -> Cow(chases(mouse)))\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: all x. (x(nice) & x(chases(cow)) -> x(needs(cow)))\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: (Rabbit(red) & Rabbit(visits(mouse)) -> Rabbit(kind))\nTEXT: If something chases the cow then it visits the mouse.\nFOL: all x. (x(chases(cow)) -> x(visits(mouse)))\nTEXT: If something chases the cow then it visits the cat.\nFOL: all x. (x(chases(cow)) -> x(visits(cat)))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: (Mouse(needs(rabbit)) & Rabbit(visits(mouse)) -> Rabbit(red))\nTEXT: The cow chases the cow.\nFOL: Cow(chases(cow))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: Cat(chases(cow))\nTEXT: The cat chases the rabbit.\nFOL: Cat(chases(rabbit))\nTEXT: The cat is nice.\nFOL: Cat(nice)\nTEXT: The cat needs the cow.\nFOL: Cat(needs(cow))\nTEXT: The cat visits the rabbit.\nFOL: Cat(visits(rabbit))\nTEXT: The cow is nice.\nFOL: Cow(nice)\nTEXT: The cow is red.\nFOL: Cow(red)\nTEXT: The cow needs the cat.\nFOL: Cow(needs(cat))\nTEXT: The cow visits the cat.\nFOL: Cow(visits(cat))\nTEXT: The mouse chases the cow.\nFOL: Mouse(chases(cow))\nTEXT: The mouse chases the rabbit.\nFOL: Mouse(chases(rabbit))\nTEXT: The mouse is kind.\nFOL: Mouse(kind)\nTEXT: The mouse needs the rabbit.\nFOL: Mouse(needs(rabbit))\nTEXT: The rabbit chases the cow.\nFOL: Rabbit(chases(cow))\nTEXT: The rabbit needs the cow.\nFOL: Rabbit(needs(cow))\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: all x. ((x(visits(cow)) & x(nice)) -> Cow(chases(mouse)))\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: all x. (x(nice) & x(chases(cow)) -> Cow(needs(x)))\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: (Rabbit(red) & Rabbit(visits(mouse)) -> Rabbit(kind))\nTEXT: If something chases the cow then it visits the mouse.\nFOL: all x. (x(chases(cow)) -> x(visits(mouse)))\nTEXT: If something chases the cow then it visits the cat.\nFOL: all x. (x(chases(cow)) -> x(visits(cat)))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: (Mouse(needs(rabbit)) & Rabbit(visits(mouse)) -> Rabbit(red))\nTEXT: The cow chases the cow.\nFOL: Cow(chases(cow))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: Cat(chases(cow))\nTEXT: The cat chases the rabbit.\nFOL: Cat(chases(rabbit))\nTEXT: The cat is nice.\nFOL: Cat(nice)\nTEXT: The cat needs the cow.\nFOL: Cat(needs(cow))\nTEXT: The cat visits the rabbit.\nFOL: Cat(visits(rabbit))\nTEXT: The cow is nice.\nFOL: Cow(nice)\nTEXT: The cow is red.\nFOL: Cow(red)\nTEXT: The cow needs the cat.\nFOL: Cow(needs(cat))\nTEXT: The cow visits the cat.\nFOL: Cow(visits(cat))\nTEXT: The mouse chases the cow.\nFOL: Mouse(chases(cow))\nTEXT: The mouse chases the rabbit.\nFOL: Mouse(chases(rabbit))\nTEXT: The mouse is kind.\nFOL: Mouse(kind)\nTEXT: The mouse needs the rabbit.\nFOL: Mouse(needs(rabbit))\nTEXT: The rabbit chases the cow.\nFOL: Rabbit(chases(cow))\nTEXT: The rabbit needs the cow.\nFOL: Rabbit(needs(cow))\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: all x. ((x(visits(cow)) & x(nice)) -> Cow(chases(mouse)))\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: all x. (x(nice) & x(chases(cow)) -> Cow(needs(x)))\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: (Rabbit(red) & Rabbit(visits(mouse)) -> Mouse(kind))\nTEXT: If something chases the cow then it visits the mouse.\nFOL: all x. (x(chases(cow)) -> x(visits(mouse)))\nTEXT: If something chases the cow then it visits the cat.\nFOL: all x. (x(chases(cow)) -> x(visits(cat)))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: (Mouse(needs(rabbit)) & Rabbit(visits(mouse)) -> Rabbit(red))\nTEXT: The cow chases the cow.\nFOL: Cow(chases(cow))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: Cat(chases(cow))\nTEXT: The cat chases the rabbit.\nFOL: Cat(chases(rabbit))\nTEXT: The cat is nice.\nFOL: Cat(nice)\nTEXT: The cat needs the cow.\nFOL: Cat(needs(cow))\nTEXT: The cat visits the rabbit.\nFOL: Cat(visits(rabbit))\nTEXT: The cow is nice.\nFOL: Cow(nice)\nTEXT: The cow is red.\nFOL: Cow(red)\nTEXT: The cow needs the cat.\nFOL: Cow(needs(cat))\nTEXT: The cow visits the cat.\nFOL: Cow(visits(cat))\nTEXT: The mouse chases the cow.\nFOL: Mouse(chases(cow))\nTEXT: The mouse chases the rabbit.\nFOL: Mouse(chases(rabbit))\nTEXT: The mouse is kind.\nFOL: Mouse(kind)\nTEXT: The mouse needs the rabbit.\nFOL: Mouse(needs(rabbit))\nTEXT: The rabbit chases the cow.\nFOL: Rabbit(chases(cow))\nTEXT: The rabbit needs the cow.\nFOL: Rabbit(needs(cow))\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: all x. ((x(visits(cow)) & x(nice)) -> Cow(chases(mouse)))\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: all x. (x(nice) & x(chases(cow)) -> Cow(needs(x)))\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: Rabbit(red) & Rabbit(visits(mouse)) -> Rabbit(kind)\nTEXT: If something chases the cow then it visits the mouse.\nFOL: all x. (x(chases(cow)) -> x(visits(mouse)))\nTEXT: If something chases the cow then it visits the cat.\nFOL: all x. (x(chases(cow)) -> x(visits(cat)))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: Mouse(needs(rabbit)) & Rabbit(visits(mouse)) -> Rabbit(red)\nTEXT: The cow chases the cow.\nFOL: Cow(chases(cow))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the cow.\nFOL: Cat(chases(cow))\nTEXT: The cat chases the rabbit.\nFOL: Cat(chases(rabbit))\nTEXT: The cat is nice.\nFOL: Cat(nice)\nTEXT: The cat needs the cow.\nFOL: Cat(needs(cow))\nTEXT: The cat visits the rabbit.\nFOL: Cat(visits(rabbit))\nTEXT: The cow is nice.\nFOL: Cow(nice)\nTEXT: The cow is red.\nFOL: Cow(red)\nTEXT: The cow needs the cat.\nFOL: Cow(needs(cat))\nTEXT: The cow visits the cat.\nFOL: Cow(visits(cat))\nTEXT: The mouse chases the cow.\nFOL: Mouse(chases(cow))\nTEXT: The mouse chases the rabbit.\nFOL: Mouse(chases(rabbit))\nTEXT: The mouse is kind.\nFOL: Mouse(kind)\nTEXT: The mouse needs the rabbit.\nFOL: Mouse(needs(rabbit))\nTEXT: The rabbit chases the cow.\nFOL: Rabbit(chases(cow))\nTEXT: The rabbit needs the cow.\nFOL: Rabbit(needs(cow))\nTEXT: If something visits the cow and it is nice then the cow chases the mouse.\nFOL: all x. ((x(visits(cow)) & x(nice)) -> Cow(chases(mouse)))\nTEXT: If something is nice and it chases the cow then it needs the cow.\nFOL: all x. (x(nice) & x(chases(cow)) -> x(needs(cow)))\nTEXT: If the rabbit is red and the rabbit visits the mouse then the rabbit is kind.\nFOL: (Rabbit(red) & Rabbit(visits(mouse)) -> Rabbit(kind))\nTEXT: If something chases the cow then it visits the mouse.\nFOL: all x. (x(chases(cow)) -> x(visits(mouse)))\nTEXT: If something chases the cow then it visits the cat.\nFOL: all x. (x(chases(cow)) -> x(visits(cat)))\nTEXT: If the mouse needs the rabbit and the rabbit visits the mouse then the rabbit is red.\nFOL: Mouse(needs(rabbit)) & Rabbit(visits(mouse)) -> Rabbit(red)\nTEXT: The cow chases the cow.\nFOL: Cow(chases(cow))\n</EVALUATE>"
  ]
 },
 {
  "index": 32,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: Kind(Dave)\n\nTEXT: Gary is red.\nFOL: Red(Gary)\n\nTEXT: Gary is rough.\nFOL: Rough(Gary)\n\nTEXT: All nice things are big.\nFOL: all x. (Nice(x) -> Big(x))\n\nTEXT: If Gary is nice then Gary is rough.\nFOL: Nice(Gary) -> Rough(Gary)\n\nTEXT: Red things are nice.\nFOL: all x. (Red(x) -> Nice(x))\n\nTEXT: If something is nice and not red then it is cold.\nFOL: (Nice(x) & -Red(x)) -> Cold(x)\n\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\n\nTEXT: If Gary is not round and Gary is not big then Gary is cold.\nFOL: (-Round(Gary) & -Big(Gary)) -> Cold(Gary)\n\nTEXT: Dave is rough.\nFOL: Rough(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: Kind(Dave)\n\nTEXT: Gary is red.\nFOL: Red(Gary)\n\nTEXT: Gary is rough.\nFOL: Rough(Gary)\n\nTEXT: All nice things are big.\nFOL: all x. (Nice(x) -> Big(x))\n\nTEXT: If Gary is nice then Gary is rough.\nFOL: Nice(Gary) -> Rough(Gary)\n\nTEXT: Red things are nice.\nFOL: Red(x) -> Nice(x)\n\nTEXT: If something is nice and not red then it is cold.\nFOL: (Nice(x) & -Red(x)) -> Cold(x)\n\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\n\nTEXT: If Gary is not round and Gary is not big then Gary is cold.\nFOL: (-Round(Gary) & -Big(Gary)) -> Cold(Gary)\n\nTEXT: Dave is rough.\nFOL: Rough(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: Kind(Dave)\nTEXT: Gary is red.\nFOL: Red(Gary)\nTEXT: Gary is rough.\nFOL: Rough(Gary)\nTEXT: All nice things are big.\nFOL: all x. (Nice(x) -> Big(x))\nTEXT: If Gary is nice then Gary is rough.\nFOL: Nice(Gary) -> Rough(Gary)\nTEXT: Red things are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If something is nice and not red then it is cold.\nFOL: (Nice(x) & -Red(x)) -> Cold(x)\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If Gary is not round and Gary is not big then Gary is cold.\nFOL: (-Round(Gary) & -Big(Gary)) -> Cold(Gary)\nTEXT: Dave is rough.\nFOL: Rough(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: Kind(Dave)\n\nTEXT: Gary is red.\nFOL: Red(Gary)\n\nTEXT: Gary is rough.\nFOL: Rough(Gary)\n\nTEXT: All nice things are big.\nFOL: all x. (Nice(x) -> Big(x))\n\nTEXT: If Gary is nice then Gary is rough.\nFOL: Nice(Gary) -> Rough(Gary)\n\nTEXT: Red things are nice.\nFOL: Red(x) -> Nice(x)\n\nTEXT: If something is nice and not red then it is cold.\nFOL: Nice(x) & -Red(x) -> Cold(x)\n\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\n\nTEXT: If Gary is not round and Gary is not big then Gary is cold.\nFOL: -Round(Gary) & -Big(Gary) -> Cold(Gary)\n\nTEXT: Dave is rough.\nFOL: Rough(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: Kind(Dave)\n\nTEXT: Gary is red.\nFOL: Red(Gary)\n\nTEXT: Gary is rough.\nFOL: Rough(Gary)\n\nTEXT: All nice things are big.\nFOL: all x. (Nice(x) -> Big(x))\n\nTEXT: If Gary is nice then Gary is rough.\nFOL: Nice(Gary) -> Rough(Gary)\n\nTEXT: Red things are nice.\nFOL: all x. (Red(x) -> Nice(x))\n\nTEXT: If something is nice and not red then it is cold.\nFOL: (Nice(x) & -Red(x)) -> Cold(x)\n\nTEXT: All big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\n\nTEXT: If Gary is not round and Gary is not big then Gary is cold.\nFOL: (-Round(Gary) & -Big(Gary)) -> Cold(Gary)\n\nTEXT: Dave is rough.\nFOL: Rough(Dave)\n\n</EVALUATE>"
  ]
 },
 {
  "index": 33,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: Kind(Bob)\n\nTEXT: He is also very cold and blue.\nFOL: Cold(He) & Blue(He)\n\nTEXT: Gary who is young and nice is also quite big and feels green.\nFOL: Young(Gary) & Nice(Gary) & Big(Gary) & Green(Gary)\n\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: Young(Harry) & Cold(Harry)\n\nTEXT: A person who is cold and blue is nice.\nFOL: Cold(x) & Blue(x) -> Nice(x)\n\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: Red(x) & Round(x) & Kind(x) -> Cold(x)\n\nTEXT: Someone being nice, even when they are cold without a doubt means that they are round about the middle.\nFOL: Nice(x) & Cold(x) -> Round(x)\n\nTEXT: Nice people with blue and rough skin are very young and cannot be trusted with responsibility.\nFOL: Nice(x) & Blue(x) & Rough(x) -> Young(x) & -Trustworthy(x)\n\nTEXT: Most young kind people tend to be red too.\nFOL: Young(x) & Kind(x) -> Red(x)\n\nTEXT: A young person that is blue and green is also assumed to be nice.\nFOL: Young(x) & Blue(x) & Green(x) -> Nice(x)\n\nTEXT: People who are young are also blue.\nFOL: Young(x) -> Blue(x)\n\nTEXT: Alan is round.\nFOL: Round(Alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: Kind(Bob)\n\nTEXT: He is also very cold and blue.\nFOL: Cold(He) & Blue(He)\n\nTEXT: Gary who is young and nice is also quite big and feels green.\nFOL: Young(Gary) & Nice(Gary) & Big(Gary) & Green(Gary)\n\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: Young(Harry) & Cold(Harry)\n\nTEXT: A person who is cold and blue is nice.\nFOL: Cold(x) & Blue(x) -> Nice(x)\n\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: Red(x) & Round(x) & Kind(x) -> Cold(x)\n\nTEXT: Someone being nice, even when they are cold without a doubt means that they are round about the middle.\nFOL: Nice(x) & Cold(x) -> Round(x)\n\nTEXT: Nice people with blue and rough skin are very young and cannot be trusted with responsibility.\nFOL: Nice(x) & Blue(x) & Rough(x) -> Young(x) & -Trusted(x)\n\nTEXT: Most young kind people tend to be red too.\nFOL: Young(x) & Kind(x) -> Red(x)\n\nTEXT: A young person that is blue and green is also assumed to be nice.\nFOL: Young(x) & Blue(x) & Green(x) -> Nice(x)\n\nTEXT: People who are young are also blue.\nFOL: Young(x) -> Blue(x)\n\nTEXT: Alan is round.\nFOL: Round(Alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: Kind(Bob)\n\nTEXT: He is also very cold and blue.\nFOL: Cold(He) & Blue(He)\n\nTEXT: Gary who is young and nice is also quite big and feels green.\nFOL: Young(Gary) & Nice(Gary) & Big(Gary) & Green(Gary)\n\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: Young(Harry) & Cold(Harry)\n\nTEXT: A person who is cold and blue is nice.\nFOL: Cold(x) & Blue(x) -> Nice(x)\n\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: Red(x) & Round(x) & Kind(x) -> Cold(x)\n\nTEXT: Someone being nice, even when they are cold without a doubt means that they are round about the middle.\nFOL: Nice(x) & Cold(x) -> Round(x)\n\nTEXT: Nice people with blue and rough skin are very young and cannot be trusted with responsibility.\nFOL: Nice(x) & Blue(x) & Rough(x) -> Young(x) & -TrustedWithResponsibility(x)\n\nTEXT: Most young kind people tend to be red too.\nFOL: Young(x) & Kind(x) -> Red(x)\n\nTEXT: A young person that is blue and green is also assumed to be nice.\nFOL: Young(x) & Blue(x) & Green(x) -> Nice(x)\n\nTEXT: People who are young are also blue.\nFOL: Young(x) -> Blue(x)\n\nTEXT: Alan is round.\nFOL: Round(Alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: Kind(Bob)\n\nTEXT: He is also very cold and blue.\nFOL: Cold(He) & Blue(He)\n\nTEXT: Gary who is young and nice is also quite big and feels green.\nFOL: Young(Gary) & Nice(Gary) & Big(Gary) & Green(Gary)\n\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: Young(Harry) & Cold(Harry) & Named(Harry)\n\nTEXT: A person who is cold and blue is nice.\nFOL: Cold(x) & Blue(x) -> Nice(x)\n\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: Red(x) & Round(x) & Kind(x) -> Cold(x)\n\nTEXT: Someone being nice, even when they are cold without a doubt means that they are round about the middle.\nFOL: Nice(x) & Cold(x) -> Round(x)\n\nTEXT: Nice people with blue and rough skin are very young and cannot be trusted with responsibility.\nFOL: Nice(x) & Blue(x) & Rough(x) -> Young(x) & -Trusted(x)\n\nTEXT: Most young kind people tend to be red too.\nFOL: Young(x) & Kind(x) -> Red(x)\n\nTEXT: A young person that is blue and green is also assumed to be nice.\nFOL: Young(x) & Blue(x) & Green(x) -> Nice(x)\n\nTEXT: People who are young are also blue.\nFOL: Young(x) -> Blue(x)\n\nTEXT: Alan is round.\nFOL: Round(Alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind.\nFOL: Kind(Bob)\n\nTEXT: He is also very cold and blue.\nFOL: Cold(He) & Blue(He)\n\nTEXT: Gary who is young and nice is also quite big and feels green.\nFOL: Young(Gary) & Nice(Gary) & Big(Gary) & Green(Gary)\n\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: Young(Harry) & Cold(Harry) & Named(Harry)\n\nTEXT: A person who is cold and blue is nice.\nFOL: Cold(x) & Blue(x) -> Nice(x)\n\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: Red(x) & Round(x) & Kind(x) -> Cold(x)\n\nTEXT: Someone being nice, even when they are cold without a doubt means that they are round about the middle.\nFOL: Nice(x) & Cold(x) -> Round(x)\n\nTEXT: Nice people with blue and rough skin are very young and cannot be trusted with responsibility.\nFOL: Nice(x) & Blue(x) & Rough(x) -> Young(x) & -TrustedWithResponsibility(x)\n\nTEXT: Most young kind people tend to be red too.\nFOL: Young(x) & Kind(x) -> Red(x)\n\nTEXT: A young person that is blue and green is also assumed to be nice.\nFOL: Young(x) & Blue(x) & Green(x) -> Nice(x)\n\nTEXT: People who are young are also blue.\nFOL: Young(x) -> Blue(x)\n\nTEXT: Alan is round.\nFOL: Round(Alan)\n</EVALUATE>"
  ]
 },
 {
  "index": 34,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: BaldEagle(x) -> Cold(x)\nTEXT: The bald eagle is green.\nFOL: BaldEagle(x) -> Green(x)\nTEXT: The bald eagle is kind.\nFOL: BaldEagle(x) -> Kind(x)\nTEXT: The bald eagle is rough.\nFOL: BaldEagle(x) -> Rough(x)\nTEXT: The bald eagle is young.\nFOL: BaldEagle(x) -> Young(x)\nTEXT: The bald eagle needs the dog.\nFOL: BaldEagle(x) -> NeedsDog(x)\nTEXT: The bald eagle sees the dog.\nFOL: BaldEagle(x) -> SeesDog(x)\nTEXT: The bald eagle visits the dog.\nFOL: BaldEagle(x) -> VisitsDog(x)\nTEXT: The dog is cold.\nFOL: Dog(x) -> Cold(x)\nTEXT: The dog is green.\nFOL: Dog(x) -> Green(x)\nTEXT: The dog is kind.\nFOL: Dog(x) -> Kind(x)\nTEXT: The dog is rough.\nFOL: Dog(x) -> Rough(x)\nTEXT: The dog is young.\nFOL: Dog(x) -> Young(x)\nTEXT: The dog needs the bald eagle.\nFOL: Dog(x) -> NeedsBaldEagle(x)\nTEXT: The dog sees the bald eagle.\nFOL: Dog(x) -> SeesBaldEagle(x)\nTEXT: The dog visits the bald eagle.\nFOL: Dog(x) -> VisitsBaldEagle(x)\nTEXT: If something is kind then it sees the bald eagle.\nFOL: all x. (Kind(x) -> SeesBaldEagle(x))\nTEXT: If something visits the bald eagle and the bald eagle sees the dog then the bald eagle visits the dog.\nFOL: all x. ((VisitsBaldEagle(x) & BaldEagle(x) & SeesDog(x)) -> VisitsDog(x))\nTEXT: If something visits the bald eagle and the bald eagle is green then the bald eagle is rough.\nFOL: all x. ((VisitsBaldEagle(x) & BaldEagle(x) & Green(x)) -> Rough(x))\nTEXT: The dog is cold.\nFOL: Dog(x) -> Cold(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: BaldEagle(x) -> Cold(x)\nTEXT: The bald eagle is green.\nFOL: BaldEagle(x) -> Green(x)\nTEXT: The bald eagle is kind.\nFOL: BaldEagle(x) -> Kind(x)\nTEXT: The bald eagle is rough.\nFOL: BaldEagle(x) -> Rough(x)\nTEXT: The bald eagle is young.\nFOL: BaldEagle(x) -> Young(x)\nTEXT: The bald eagle needs the dog.\nFOL: BaldEagle(x) -> NeedsDog(x)\nTEXT: The bald eagle sees the dog.\nFOL: BaldEagle(x) -> SeesDog(x)\nTEXT: The bald eagle visits the dog.\nFOL: BaldEagle(x) -> VisitsDog(x)\nTEXT: The dog is cold.\nFOL: Dog(x) -> Cold(x)\nTEXT: The dog is green.\nFOL: Dog(x) -> Green(x)\nTEXT: The dog is kind.\nFOL: Dog(x) -> Kind(x)\nTEXT: The dog is rough.\nFOL: Dog(x) -> Rough(x)\nTEXT: The dog is young.\nFOL: Dog(x) -> Young(x)\nTEXT: The dog needs the bald eagle.\nFOL: Dog(x) -> NeedsBaldEagle(x)\nTEXT: The dog sees the bald eagle.\nFOL: Dog(x) -> SeesBaldEagle(x)\nTEXT: The dog visits the bald eagle.\nFOL: Dog(x) -> VisitsBaldEagle(x)\nTEXT: If something is kind then it sees the bald eagle.\nFOL: all x. (Kind(x) -> SeesBaldEagle(x))\nTEXT: If something visits the bald eagle and the bald eagle sees the dog then the bald eagle visits the dog.\nFOL: all x. ((VisitsBaldEagle(x) & SeesBaldEagle(x) & SeesDog(x)) -> VisitsDog(x))\nTEXT: If something visits the bald eagle and the bald eagle is green then the bald eagle is rough.\nFOL: all x. ((VisitsBaldEagle(x) & BaldEagle(x) & Green(x)) -> Rough(x))\nTEXT: The dog is cold.\nFOL: Dog(x) -> Cold(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: BaldEagle(x) -> Cold(x)\nTEXT: The bald eagle is green.\nFOL: BaldEagle(x) -> Green(x)\nTEXT: The bald eagle is kind.\nFOL: BaldEagle(x) -> Kind(x)\nTEXT: The bald eagle is rough.\nFOL: BaldEagle(x) -> Rough(x)\nTEXT: The bald eagle is young.\nFOL: BaldEagle(x) -> Young(x)\nTEXT: The bald eagle needs the dog.\nFOL: BaldEagle(x) -> NeedsDog(x)\nTEXT: The bald eagle sees the dog.\nFOL: BaldEagle(x) -> SeesDog(x)\nTEXT: The bald eagle visits the dog.\nFOL: BaldEagle(x) -> VisitsDog(x)\nTEXT: The dog is cold.\nFOL: Dog(x) -> Cold(x)\nTEXT: The dog is green.\nFOL: Dog(x) -> Green(x)\nTEXT: The dog is kind.\nFOL: Dog(x) -> Kind(x)\nTEXT: The dog is rough.\nFOL: Dog(x) -> Rough(x)\nTEXT: The dog is young.\nFOL: Dog(x) -> Young(x)\nTEXT: The dog needs the bald eagle.\nFOL: Dog(x) -> NeedsBaldEagle(x)\nTEXT: The dog sees the bald eagle.\nFOL: Dog(x) -> SeesBaldEagle(x)\nTEXT: The dog visits the bald eagle.\nFOL: Dog(x) -> VisitsBaldEagle(x)\nTEXT: If something is kind then it sees the bald eagle.\nFOL: all x. (Kind(x) -> SeesBaldEagle(x))\nTEXT: If something visits the bald eagle and the bald eagle sees the dog then the bald eagle visits the dog.\nFOL: all x. ((VisitsBaldEagle(x) & BaldEagle(x) -> SeesDog(x)) -> VisitsDog(x))\nTEXT: If something visits the bald eagle and the bald eagle is green then the bald eagle is rough.\nFOL: all x. ((VisitsBaldEagle(x) & BaldEagle(x) -> Green(x)) -> Rough(x))\nTEXT: The dog is cold.\nFOL: Dog(x) -> Cold(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: BaldEagle(x) -> Cold(x)\n\nTEXT: The bald eagle is green.\nFOL: BaldEagle(x) -> Green(x)\n\nTEXT: The bald eagle is kind.\nFOL: BaldEagle(x) -> Kind(x)\n\nTEXT: The bald eagle is rough.\nFOL: BaldEagle(x) -> Rough(x)\n\nTEXT: The bald eagle is young.\nFOL: BaldEagle(x) -> Young(x)\n\nTEXT: The bald eagle needs the dog.\nFOL: BaldEagle(x) -> NeedsDog(x)\n\nTEXT: The bald eagle sees the dog.\nFOL: BaldEagle(x) -> SeesDog(x)\n\nTEXT: The bald eagle visits the dog.\nFOL: BaldEagle(x) -> VisitsDog(x)\n\nTEXT: The dog is cold.\nFOL: Dog(x) -> Cold(x)\n\nTEXT: The dog is green.\nFOL: Dog(x) -> Green(x)\n\nTEXT: The dog is kind.\nFOL: Dog(x) -> Kind(x)\n\nTEXT: The dog is rough.\nFOL: Dog(x) -> Rough(x)\n\nTEXT: The dog is young.\nFOL: Dog(x) -> Young(x)\n\nTEXT: The dog needs the bald eagle.\nFOL: Dog(x) -> NeedsBaldEagle(x)\n\nTEXT: The dog sees the bald eagle.\nFOL: Dog(x) -> SeesBaldEagle(x)\n\nTEXT: The dog visits the bald eagle.\nFOL: Dog(x) -> VisitsBaldEagle(x)\n\nTEXT: If something is kind then it sees the bald eagle.\nFOL: Kind(x) -> SeesBaldEagle(x)\n\nTEXT: If something visits the bald eagle and the bald eagle sees the dog then the bald eagle visits the dog.\nFOL: (BaldEagle(x) & SeesDog(x) & VisitsBaldEagle(x)) -> VisitsDog(x)\n\nTEXT: If something visits the bald eagle and the bald eagle is green then the bald eagle is rough.\nFOL: (BaldEagle(x) & Green(x) & VisitsBaldEagle(x)) -> Rough(x)\n\nTEXT: The dog is cold.\nFOL: Dog(x) -> Cold(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: BaldEagle(x) -> Cold(x)\nTEXT: The bald eagle is green.\nFOL: BaldEagle(x) -> Green(x)\nTEXT: The bald eagle is kind.\nFOL: BaldEagle(x) -> Kind(x)\nTEXT: The bald eagle is rough.\nFOL: BaldEagle(x) -> Rough(x)\nTEXT: The bald eagle is young.\nFOL: BaldEagle(x) -> Young(x)\nTEXT: The bald eagle needs the dog.\nFOL: BaldEagle(x) -> NeedsDog(x)\nTEXT: The bald eagle sees the dog.\nFOL: BaldEagle(x) -> SeesDog(x)\nTEXT: The bald eagle visits the dog.\nFOL: BaldEagle(x) -> VisitsDog(x)\nTEXT: The dog is cold.\nFOL: Dog(x) -> Cold(x)\nTEXT: The dog is green.\nFOL: Dog(x) -> Green(x)\nTEXT: The dog is kind.\nFOL: Dog(x) -> Kind(x)\nTEXT: The dog is rough.\nFOL: Dog(x) -> Rough(x)\nTEXT: The dog is young.\nFOL: Dog(x) -> Young(x)\nTEXT: The dog needs the bald eagle.\nFOL: Dog(x) -> NeedsBaldEagle(x)\nTEXT: The dog sees the bald eagle.\nFOL: Dog(x) -> SeesBaldEagle(x)\nTEXT: The dog visits the bald eagle.\nFOL: Dog(x) -> VisitsBaldEagle(x)\nTEXT: If something is kind then it sees the bald eagle.\nFOL: all x. (Kind(x) -> SeesBaldEagle(x))\nTEXT: If something visits the bald eagle and the bald eagle sees the dog then the bald eagle visits the dog.\nFOL: all x. ((VisitsBaldEagle(x) & SeesBaldEagle(x)) -> VisitsDog(x))\nTEXT: If something visits the bald eagle and the bald eagle is green then the bald eagle is rough.\nFOL: all x. ((VisitsBaldEagle(x) & BaldEagle(x) -> Green(x)) -> BaldEagle(x) -> Rough(x))\nTEXT: The dog is cold.\nFOL: Dog(x) -> Cold(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 35,
  "responses": [
   "<EVALUATE>\nTEXT: Charlie is white.\nFOL: White(Charlie)\n\nTEXT: Erin is white.\nFOL: White(erin)\n\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\n\nTEXT: Gary is round.\nFOL: Round(gary)\n\nTEXT: If someone is round and not rough then they are big.\nFOL: all x. ((Round(x) & -Rough(x)) -> Big(x))\n\nTEXT: If someone is round then they are big.\nFOL: all x. (Round(x) -> Big(x))\n\nTEXT: If someone is young and not nice then they are white.\nFOL: all x. (Young(x) & -Nice(x) -> White(x))\n\nTEXT: If someone is big and not smart then they are white.\nFOL: all x. (Big(x) & -Smart(x) -> White(x))\n\nTEXT: If Gary is nice and Gary is not rough then Gary is young.\nFOL: Nice(gary) & -Rough(gary) -> Young(gary)\n\nTEXT: Smart, young people are round.\nFOL: all x. (Smart(x) & Young(x) -> Round(x))\n\nTEXT: If Fiona is nice then Fiona is young.\nFOL: Nice(fiona) -> Young(fiona)\n\nTEXT: If Erin is round and Erin is nice then Erin is white.\nFOL: Round(erin) & Nice(erin) -> White(erin)\n\nTEXT: Fiona is big.\nFOL: Big(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is white.\nFOL: White(Charlie)\n\nTEXT: Erin is white.\nFOL: White(erin)\n\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\n\nTEXT: Gary is round.\nFOL: Round(gary)\n\nTEXT: If someone is round and not rough then they are big.\nFOL: all x. ((Round(x) & -Rough(x)) -> Big(x))\n\nTEXT: If someone is round then they are big.\nFOL: all x. (Round(x) -> Big(x))\n\nTEXT: If someone is young and not nice then they are white.\nFOL: all x. ((Young(x) & -Nice(x)) -> White(x))\n\nTEXT: If someone is big and not smart then they are white.\nFOL: all x. ((Big(x) & -Smart(x)) -> White(x))\n\nTEXT: If Gary is nice and Gary is not rough then Gary is young.\nFOL: (Nice(gary) & -Rough(gary)) -> Young(gary)\n\nTEXT: Smart, young people are round.\nFOL: all x. (Smart(x) & Young(x) -> Round(x))\n\nTEXT: If Fiona is nice then Fiona is young.\nFOL: Nice(fiona) -> Young(fiona)\n\nTEXT: If Erin is round and Erin is nice then Erin is white.\nFOL: (Round(erin) & Nice(erin)) -> White(erin)\n\nTEXT: Fiona is big.\nFOL: Big(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is white.\nFOL: White(Charlie)\n\nTEXT: Erin is white.\nFOL: White(erin)\n\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\n\nTEXT: Gary is round.\nFOL: Round(gary)\n\nTEXT: If someone is round and not rough then they are big.\nFOL: all x. ((Round(x) & -Rough(x)) -> Big(x))\n\nTEXT: If someone is round then they are big.\nFOL: all x. (Round(x) -> Big(x))\n\nTEXT: If someone is young and not nice then they are white.\nFOL: all x. ((Young(x) & -Nice(x)) -> White(x))\n\nTEXT: If someone is big and not smart then they are white.\nFOL: all x. ((Big(x) & -Smart(x)) -> White(x))\n\nTEXT: If Gary is nice and Gary is not rough then Gary is young.\nFOL: (Nice(gary) & -Rough(gary)) -> Young(gary)\n\nTEXT: Smart, young people are round.\nFOL: all x. (Smart(x) & Young(x) -> Round(x))\n\nTEXT: If Fiona is nice then Fiona is young.\nFOL: Nice(fiona) -> Young(fiona)\n\nTEXT: If Erin is round and Erin is nice then Erin is white.\nFOL: (Round(erin) & Nice(erin)) -> White(erin)\n\nTEXT: Fiona is big.\nFOL: Big(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is white.\nFOL: White(Charlie)\n\nTEXT: Erin is white.\nFOL: White(erin)\n\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\n\nTEXT: Gary is round.\nFOL: Round(gary)\n\nTEXT: If someone is round and not rough then they are big.\nFOL: all x. ((Round(x) & -Rough(x)) -> Big(x))\n\nTEXT: If someone is round then they are big.\nFOL: all x. (Round(x) -> Big(x))\n\nTEXT: If someone is young and not nice then they are white.\nFOL: all x. ((Young(x) & -Nice(x)) -> White(x))\n\nTEXT: If someone is big and not smart then they are white.\nFOL: all x. ((Big(x) & -Smart(x)) -> White(x))\n\nTEXT: If Gary is nice and Gary is not rough then Gary is young.\nFOL: (Nice(gary) & -Rough(gary)) -> Young(gary)\n\nTEXT: Smart, young people are round.\nFOL: all x. ((Smart(x) & Young(x)) -> Round(x))\n\nTEXT: If Fiona is nice then Fiona is young.\nFOL: Nice(fiona) -> Young(fiona)\n\nTEXT: If Erin is round and Erin is nice then Erin is white.\nFOL: (Round(erin) & Nice(erin)) -> White(erin)\n\nTEXT: Fiona is big.\nFOL: Big(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is white.\nFOL: White(Charlie)\n\nTEXT: Erin is white.\nFOL: White(erin)\n\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\n\nTEXT: Gary is round.\nFOL: Round(gary)\n\nTEXT: If someone is round and not rough then they are big.\nFOL: all x. ((Round(x) & -Rough(x)) -> Big(x))\n\nTEXT: If someone is round then they are big.\nFOL: all x. (Round(x) -> Big(x))\n\nTEXT: If someone is young and not nice then they are white.\nFOL: all x. ((Young(x) & -Nice(x)) -> White(x))\n\nTEXT: If someone is big and not smart then they are white.\nFOL: all x. ((Big(x) & -Smart(x)) -> White(x))\n\nTEXT: If Gary is nice and Gary is not rough then Gary is young.\nFOL: (Nice(gary) & -Rough(gary)) -> Young(gary)\n\nTEXT: Smart, young people are round.\nFOL: all x y. (Smart(x) & Young(y) -> Round(y))\n\nTEXT: If Fiona is nice then Fiona is young.\nFOL: Nice(fiona) -> Young(fiona)\n\nTEXT: If Erin is round and Erin is nice then Erin is white.\nFOL: (Round(erin) & Nice(erin)) -> White(erin)\n\nTEXT: Fiona is big.\nFOL: Big(fiona)\n</EVALUATE>"
  ]
 },
 {
  "index": 36,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: Kind(Dave)\n\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\n\nTEXT: Dave is not kind.\nFOL: -Kind(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: Kind(Dave)\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\nTEXT: Dave is not kind.\nFOL: -Kind(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: KindDave\n\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\n\nTEXT: Dave is not kind.\nFOL: -KindDave\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: Kindness(Dave)\n\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kindness(x))\n\nTEXT: Dave is not kind.\nFOL: -Kindness(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is kind.\nFOL: KindDave(dave)\n\nTEXT: All smart, quiet people are kind.\nFOL: all x. (Smart(x) & Quiet(x) -> Kind(x))\n\nTEXT: Dave is not kind.\nFOL: -KindDave(dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 37,
  "responses": [
   "<EVALUATE>\nTEXT: That guy Dave sure is nice.\nFOL: Nice(Dave)\n\nTEXT: Eric is a kind person and he is also often cold.\nFOL: Kind(Eric) & Cold(Eric)\n\nTEXT: Harry is shaped big and round like a balloon.\nFOL: Big(Harry) & Round(Harry)\n\nTEXT: His red color shows how kind he is.\nFOL: Red(Harry) -> Kind(Harry)\n\nTEXT: Cold people who are big hearted and kind are usually very round.\nFOL: Cold(x) & BigHearted(x) & Kind(x) -> Round(x)\n\nTEXT: A kind person who is down in the dumps and blue tends to have a rough side.\nFOL: Kind(x) & DownInTheDumps(x) & Blue(x) -> Rough(x)\n\nTEXT: Every single big person is a little green in some areas.\nFOL: Big(x) -> Green(x)\n\nTEXT: Young and rough people will most certainly be red.\nFOL: Young(x) & Rough(x) -> Red(x)\n\nTEXT: A person that is red, rough and kind often feels cold.\nFOL: Red(x) & Rough(x) & Kind(x) -> Cold(x)\n\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: Big(x) & Red(x) -> Blue(x)\n\nTEXT: If you ever meet someone who is both green and blue while being nice, then they'll be big, too.\nFOL: Nice(x) & Green(x) & Blue(x) -> Big(x)\n\nTEXT: Harry is rough.\nFOL: Rough(Harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Dave sure is nice.\nFOL: Nice(Dave)\n\nTEXT: Eric is a kind person and he is also often cold.\nFOL: Kind(Eric) & Cold(Eric)\n\nTEXT: Harry is shaped big and round like a balloon.\nFOL: Big(Harry) & Round(Harry)\n\nTEXT: His red color shows how kind he is.\nFOL: Red(Harry) -> Kind(Harry)\n\nTEXT: Cold people who are big hearted and kind are usually very round.\nFOL: Cold(x) & BigHearted(x) & Kind(x) -> Round(x)\n\nTEXT: A kind person who is down in the dumps and blue tends to have a rough side.\nFOL: Kind(x) & DownInTheDumps(x) & Blue(x) -> Rough(x)\n\nTEXT: Every single big person is a little green in some areas.\nFOL: Big(x) -> LittleGreen(x)\n\nTEXT: Young and rough people will most certainly be red.\nFOL: Young(x) & Rough(x) -> Red(x)\n\nTEXT: A person that is red, rough and kind often feels cold.\nFOL: Red(x) & Rough(x) & Kind(x) -> Cold(x)\n\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: Big(x) & Red(x) -> Blue(x)\n\nTEXT: If you ever meet someone who is both green and blue while being nice, then they'll be big, too.\nFOL: Nice(x) & Green(x) & Blue(x) -> Big(x)\n\nTEXT: Harry is rough.\nFOL: Rough(Harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Dave sure is nice.\nFOL: Nice(Dave)\n\nTEXT: Eric is a kind person and he is also often cold.\nFOL: Kind(Eric) & Cold(Eric)\n\nTEXT: Harry is shaped big and round like a balloon.\nFOL: Big(Harry) & Round(Harry)\n\nTEXT: His red color shows how kind he is.\nFOL: Red(Harry) -> Kind(Harry)\n\nTEXT: Cold people who are big hearted and kind are usually very round.\nFOL: Cold(x) & BigHearted(x) & Kind(x) -> Round(x)\n\nTEXT: A kind person who is down in the dumps and blue tends to have a rough side.\nFOL: Kind(x) & Sad(x) & Blue(x) -> Rough(x)\n\nTEXT: Every single big person is a little green in some areas.\nFOL: Big(x) -> Green(x)\n\nTEXT: Young and rough people will most certainly be red.\nFOL: Young(x) & Rough(x) -> Red(x)\n\nTEXT: A person that is red, rough and kind often feels cold.\nFOL: Red(x) & Rough(x) & Kind(x) -> Cold(x)\n\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: Big(x) & Red(x) -> Blue(x)\n\nTEXT: If you ever meet someone who is both green and blue while being nice, then they'll be big, too.\nFOL: Nice(x) & Green(x) & Blue(x) -> Big(x)\n\nTEXT: Harry is rough.\nFOL: Rough(Harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Dave sure is nice.\nFOL: Nice(Dave)\n\nTEXT: Eric is a kind person and he is also often cold.\nFOL: Kind(Eric) & Cold(Eric)\n\nTEXT: Harry is shaped big and round like a balloon.\nFOL: Big(Harry) & Round(Harry)\n\nTEXT: His red color shows how kind he is.\nFOL: Red(Harry) & Kind(Harry)\n\nTEXT: Cold people who are big hearted and kind are usually very round.\nFOL: Cold(x) & BigHearted(x) & Kind(x) -> Round(x)\n\nTEXT: A kind person who is down in the dumps and blue tends to have a rough side.\nFOL: Kind(x) & DownInTheDumps(x) & Blue(x) -> Rough(x)\n\nTEXT: Every single big person is a little green in some areas.\nFOL: Big(x) -> Green(x)\n\nTEXT: Young and rough people will most certainly be red.\nFOL: Young(x) & Rough(x) -> Red(x)\n\nTEXT: A person that is red, rough and kind often feels cold.\nFOL: Red(x) & Rough(x) & Kind(x) -> Cold(x)\n\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: Big(x) & Red(x) -> Blue(x)\n\nTEXT: If you ever meet someone who is both green and blue while being nice, then they'll be big, too.\nFOL: Nice(x) & Green(x) & Blue(x) -> Big(x)\n\nTEXT: Harry is rough.\nFOL: Rough(Harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Dave sure is nice.\nFOL: Nice(Dave)\n\nTEXT: Eric is a kind person and he is also often cold.\nFOL: Kind(Eric) & Cold(Eric)\n\nTEXT: Harry is shaped big and round like a balloon.\nFOL: Big(Harry) & Round(Harry)\n\nTEXT: His red color shows how kind he is.\nFOL: Red(Harry) -> Kind(Harry)\n\nTEXT: Cold people who are big hearted and kind are usually very round.\nFOL: Cold(x) & BigHearted(x) & Kind(x) -> Round(x)\n\nTEXT: A kind person who is down in the dumps and blue tends to have a rough side.\nFOL: Kind(x) & DownInTheDumps(x) & Blue(x) -> Rough(x)\n\nTEXT: Every single big person is a little green in some areas.\nFOL: Big(x) -> Green(x)\n\nTEXT: Young and rough people will most certainly be red.\nFOL: Young(x) & Rough(x) -> Red(x)\n\nTEXT: A person that is red, rough and kind often feels cold.\nFOL: Red(x) & Rough(x) & Kind(x) -> Cold(x)\n\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: Big(x) & Red(x) -> Blue(x)\n\nTEXT: If you ever meet someone who is both green and blue while being nice, then they'll be big, too.\nFOL: (Green(x) & Blue(x)) & Nice(x) -> Big(x)\n\nTEXT: Harry is rough.\nFOL: Rough(Harry)\n</EVALUATE>"
  ]
 },
 {
  "index": 38,
  "responses": [
   "<EVALUATE>\nTEXT: For being so young, Bob is nice.\nFOL: Young(Bob) -> Nice(Bob)\nTEXT: He has rough, red hands from working all day and it makes him feel blue.\nFOL: (RoughHands(Bob) & RedHands(Bob) & WorkedAllDay(Bob)) -> Blue(Bob)\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: (Round(Dave) & Big(Dave)) -> Kind(Dave)\nTEXT: Fred may be round, but he is also kind.\nFOL: (Round(Fred) | -Round(Fred)) & Kind(Fred)\nTEXT: For being so cold, it's good Gary can remain nice.\nFOL: Cold(Gary) -> Nice(Gary)\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: (Big(Face) & Round(Face) & Kind(Face) & RoughEdges(Face)) -> Naive(Face)\nTEXT: Kind red people are green on the inside.\nFOL: (Kind(x) & Red(x)) -> Green(x)\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: (Nice(x) & Young(x) & Red(x)) -> Green(x)\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: (Green(x) & Naive(x)) -> (Red(x) & RoughSkin(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: (Green(x) & Naive(x)) -> Round(x)\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: (Nice(x) & Blue(x) & Round(x)) -> Kind(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: (Cold(x) & Round(x)) -> Red(x)\nTEXT: Dave is kind.\nFOL: Kind(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: For being so young, Bob is nice.\nFOL: Young(Bob) -> Nice(Bob)\nTEXT: He has rough, red hands from working all day and it makes him feel blue.\nFOL: (RoughHands(Bob) & RedHands(Bob) & WorkedAllDay(Bob)) -> Blue(Bob)\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: (Round(Dave) & Big(Dave)) -> Kind(Dave)\nTEXT: Fred may be round, but he is also kind.\nFOL: (Round(Fred) | -Round(Fred)) -> Kind(Fred)\nTEXT: For being so cold, it's good Gary can remain nice.\nFOL: Cold(Gary) -> Nice(Gary)\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: (BigFace(x) & Round(x) & Kind(x) & RoughEdges(x) & Naive(x)) -> Blue(x)\nTEXT: Kind red people are green on the inside.\nFOL: (Kind(x) & Red(x)) -> Green(x)\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: (Nice(x) & Young(x) & Red(x)) -> Green(x)\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: (Green(x) & Naive(x)) -> (Red(x) & RoughSkin(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: (Green(x) & Naive(x)) -> Round(x)\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: (Blue(x) & Round(x) & Nice(x)) -> Kind(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: (Cold(x) & Round(x)) -> Red(x)\nTEXT: Dave is kind.\nFOL: Kind(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: For being so young, Bob is nice.\nFOL: Young(Bob) -> Nice(Bob)\nTEXT: He has rough, red hands from working all day and it makes him feel blue.\nFOL: (RoughHands(Bob) & RedHands(Bob) & WorkedAllDay(Bob)) -> Blue(Bob)\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: (Round(Dave) & Big(Dave)) -> Kind(Dave)\nTEXT: Fred may be round, but he is also kind.\nFOL: (Round(Fred) | -Round(Fred)) -> Kind(Fred)\nTEXT: For being so cold, it's good Gary can remain nice.\nFOL: Cold(Gary) -> Nice(Gary)\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: (BigFace(x) & Round(x) & Kind(x) & RoughEdges(x) & Naive(x)) -> Blue(x)\nTEXT: Kind red people are green on the inside.\nFOL: (Kind(x) & Red(x)) -> Green(x)\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: (Nice(x) & Young(x) & Red(x)) -> Green(x)\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: (Green(x) & Naive(x)) -> (Red(x) & RoughSkin(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: (Green(x) & Naive(x)) -> Round(x)\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: (Nice(x) & Blue(x) & Round(x)) -> Kind(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: (Cold(x) & Round(x)) -> Red(x)\nTEXT: Dave is kind.\nFOL: Kind(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: For being so young, Bob is nice.\nFOL: Young(Bob) -> Nice(Bob)\nTEXT: He has rough, red hands from working all day and it makes him feel blue.\nFOL: (RoughHands(Bob) & RedHands(Bob) & WorkedAllDay(Bob)) -> Blue(Bob)\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: (Round(Dave) & Big(Dave)) -> Kind(Dave)\nTEXT: Fred may be round, but he is also kind.\nFOL: (Round(Fred) | -Round(Fred)) & Kind(Fred)\nTEXT: For being so cold, it's good Gary can remain nice.\nFOL: Cold(Gary) -> Nice(Gary)\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: (BigFace(x) & Round(x) & Kind(x) & RoughEdges(x) & Naive(x)) -> Blue(x)\nTEXT: Kind red people are green on the inside.\nFOL: (Kind(x) & Red(x)) -> Green(x)\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: (Nice(x) & Young(x) & Red(x)) -> Green(x)\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: (Green(x) & Naive(x)) -> (Red(x) & RoughSkin(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: (Green(x) & Naive(x)) -> Round(x)\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: (Nice(x) & Blue(x) & Round(x)) -> Kind(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: (Cold(x) & Round(x)) -> Red(x)\nTEXT: Dave is kind.\nFOL: Kind(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: For being so young, Bob is nice.\nFOL: Young(Bob) -> Nice(Bob)\nTEXT: He has rough, red hands from working all day and it makes him feel blue.\nFOL: (RoughHands(Bob) & RedHands(Bob) & WorkedAllDay(Bob)) -> Blue(Bob)\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: (Round(Dave) & Big(Dave)) -> Kind(Dave)\nTEXT: Fred may be round, but he is also kind.\nFOL: (Round(Fred) | -Round(Fred)) & Kind(Fred)\nTEXT: For being so cold, it's good Gary can remain nice.\nFOL: Cold(Gary) -> Nice(Gary)\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: (BigFace(x) & Round(x) & Kind(x) & RoughEdges(x) & Naive(x)) -> Blue(x)\nTEXT: Kind red people are green on the inside.\nFOL: (Kind(x) & Red(x)) -> Green(x)\nTEXT: Nice, young red people will also turn out to always be green.\nFOL: (Nice(x) & Young(x) & Red(x)) -> Green(x)\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: (Green(x) & Naive(x)) -> (Red(x) & RoughSkin(x))\nTEXT: It is a safe guess then that they are also round.\nFOL: (Green(x) & Naive(x)) -> Round(x)\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: (Blue(x) & Round(x) & Nice(x)) -> Kind(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: (Cold(x) & Round(x)) -> Red(x)\nTEXT: Dave is kind.\nFOL: Kind(Dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 39,
  "responses": [
   "<EVALUATE>\nTEXT: The dog chases the rabbit.\nFOL: Dog(chases(rabbit))\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(eats(tiger))\nTEXT: The tiger is green.\nFOL: Tiger(isGreen)\nTEXT: If something eats the dog and the dog chases the rabbit then it likes the tiger.\nFOL: all x. (Eats(x, dog) & Dog(chases(rabbit)) -> Likes(x, tiger))\nTEXT: If something eats the dog and the dog is nice then the dog is green.\nFOL: all x. (Eats(x, dog) & Dog(isNice) -> Tiger(isGreen))\nTEXT: If something chases the rabbit then the rabbit is blue.\nFOL: all x. (Chases(x, rabbit) -> Rabbit(isBlue))\nTEXT: If something likes the dog and it likes the rabbit then the dog is blue.\nFOL: all x. (Likes(x, dog) & Likes(x, rabbit) -> Dog(isBlue))\nTEXT: If something is blue then it is cold.\nFOL: all x. (Rabbit(isBlue) -> Cold(x))\nTEXT: If something chases the tiger then the tiger is blue.\nFOL: all x. (Chases(x, tiger) -> Tiger(isBlue))\nTEXT: If something is big then it likes the tiger.\nFOL: all x. (Big(x) -> Likes(x, tiger))\nTEXT: If something is cold and blue then it chases the tiger.\nFOL: all x. (Cold(x) & Rabbit(isBlue) -> Chases(x, tiger))\nTEXT: The dog is nice.\nFOL: Dog(isNice)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog chases the rabbit.\nFOL: Dog(chases(rabbit))\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(eats(tiger))\nTEXT: The tiger is green.\nFOL: Tiger(isGreen)\nTEXT: If something eats the dog and the dog chases the rabbit then it likes the tiger.\nFOL: all x. (Eats(x, dog) & Dog(chases(rabbit)) -> Likes(x, tiger))\nTEXT: If something eats the dog and the dog is nice then the dog is green.\nFOL: all x. (Eats(x, dog) & Dog(nice) -> Tiger(isGreen))\nTEXT: If something chases the rabbit then the rabbit is blue.\nFOL: all x. (Chases(x, rabbit) -> Rabbit(isBlue))\nTEXT: If something likes the dog and it likes the rabbit then the dog is blue.\nFOL: all x. (Likes(x, dog) & Likes(x, rabbit) -> Dog(isBlue))\nTEXT: If something is blue then it is cold.\nFOL: all x. (Rabbit(isBlue) -> Cold(x))\nTEXT: If something chases the tiger then the tiger is blue.\nFOL: all x. (Chases(x, tiger) -> Tiger(isBlue))\nTEXT: If something is big then it likes the tiger.\nFOL: all x. (Big(x) -> Likes(x, tiger))\nTEXT: If something is cold and blue then it chases the tiger.\nFOL: all x. (Cold(x) & Rabbit(isBlue) -> Chases(x, tiger))\nTEXT: The dog is nice.\nFOL: Dog(nice)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog chases the rabbit.\nFOL: Dog(chases(rabbit))\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(eats(tiger))\nTEXT: The tiger is green.\nFOL: Tiger(isGreen)\nTEXT: If something eats the dog and the dog chases the rabbit then it likes the tiger.\nFOL: all x. (Eats(x, dog) & Dog(chases(rabbit)) -> Likes(x, tiger))\nTEXT: If something eats the dog and the dog is nice then the dog is green.\nFOL: all x. (Eats(x, dog) & Dog(nice) -> Tiger(isGreen))\nTEXT: If something chases the rabbit then the rabbit is blue.\nFOL: all x. (Chases(x, rabbit) -> Rabbit(isBlue))\nTEXT: If something likes the dog and it likes the rabbit then the dog is blue.\nFOL: all x. (Likes(x, dog) & Likes(x, rabbit) -> Dog(isBlue))\nTEXT: If something is blue then it is cold.\nFOL: all x. (Rabbit(isBlue) -> Cold(x))\nTEXT: If something chases the tiger then the tiger is blue.\nFOL: all x. (Chases(x, tiger) -> Rabbit(isBlue))\nTEXT: If something is big then it likes the tiger.\nFOL: all x. (Big(x) -> Likes(x, tiger))\nTEXT: If something is cold and blue then it chases the tiger.\nFOL: all x. (Cold(x) & Rabbit(isBlue) -> Chases(x, tiger))\nTEXT: The dog is nice.\nFOL: Dog(nice)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog chases the rabbit.\nFOL: Dog(chases(rabbit))\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(eats(tiger))\nTEXT: The tiger is green.\nFOL: Tiger(isGreen)\nTEXT: If something eats the dog and the dog chases the rabbit then it likes the tiger.\nFOL: all x. (Eats(x, dog) & Dog(chases(rabbit)) -> Likes(x, tiger))\nTEXT: If something eats the dog and the dog is nice then the dog is green.\nFOL: all x. (Eats(x, dog) & Dog(isNice) -> Tiger(isGreen))\nTEXT: If something chases the rabbit then the rabbit is blue.\nFOL: all x. (Chases(x, rabbit) -> Rabbit(isBlue))\nTEXT: If something likes the dog and it likes the rabbit then the dog is blue.\nFOL: all x. (Likes(x, dog) & Likes(x, rabbit) -> Dog(isBlue))\nTEXT: If something is blue then it is cold.\nFOL: all x. (Rabbit(isBlue) -> Cold(x))\nTEXT: If something chases the tiger then the tiger is blue.\nFOL: all x. (Chases(x, tiger) -> Rabbit(isBlue))\nTEXT: If something is big then it likes the tiger.\nFOL: all x. (Big(x) -> Likes(x, tiger))\nTEXT: If something is cold and blue then it chases the tiger.\nFOL: all x. (Cold(x) & Rabbit(isBlue) -> Chases(x, tiger))\nTEXT: The dog is nice.\nFOL: Dog(isNice)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog chases the rabbit.\nFOL: Dog(chases(rabbit))\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(eats(tiger))\nTEXT: The tiger is green.\nFOL: Tiger(isGreen)\nTEXT: If something eats the dog and the dog chases the rabbit then it likes the tiger.\nFOL: all x. (Eats(x, dog) & Dog(chases(rabbit)) -> Likes(x, tiger))\nTEXT: If something eats the dog and the dog is nice then the dog is green.\nFOL: all x. (Eats(x, dog) & Dog(isNice) -> Tiger(isGreen))\nTEXT: If something chases the rabbit then the rabbit is blue.\nFOL: all x. (Chases(x, rabbit) -> Rabbit(isBlue))\nTEXT: If something likes the dog and it likes the rabbit then the dog is blue.\nFOL: all x. (Likes(x, dog) & Likes(x, rabbit) -> Dog(isBlue))\nTEXT: If something is blue then it is cold.\nFOL: all x. (Rabbit(isBlue) -> Rabbit(isCold))\nTEXT: If something chases the tiger then the tiger is blue.\nFOL: all x. (Chases(x, tiger) -> Tiger(isBlue))\nTEXT: If something is big then it likes the tiger.\nFOL: all x. (Big(x) -> Likes(x, tiger))\nTEXT: If something is cold and blue then it chases the tiger.\nFOL: all x. (Rabbit(isCold) & Rabbit(isBlue) -> Chases(x, tiger))\nTEXT: The dog is nice.\nFOL: Dog(isNice)\n</EVALUATE>"
  ]
 },
 {
  "index": 40,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Bob(Furry)\nTEXT: Bob is smart.\nFOL: Bob(Smart)\nTEXT: Dave is rough.\nFOL: Dave(Rough)\nTEXT: Dave is smart.\nFOL: Dave(Smart)\nTEXT: Erin is cold.\nFOL: Erin(Cold)\nTEXT: Erin is furry.\nFOL: Erin(Furry)\nTEXT: Erin is green.\nFOL: Erin(Green)\nTEXT: Erin is nice.\nFOL: Erin(Nice)\nTEXT: Erin is red.\nFOL: Erin(Red)\nTEXT: Erin is rough.\nFOL: Erin(Rough)\nTEXT: Erin is smart.\nFOL: Erin(Smart)\nTEXT: Gary is furry.\nFOL: Gary(Furry)\nTEXT: Gary is green.\nFOL: Gary(Green)\nTEXT: Gary is nice.\nFOL: Gary(Nice)\nTEXT: Gary is red.\nFOL: Gary(Red)\nTEXT: Rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\nTEXT: If something is red and rough then it is nice.\nFOL: all x. ((Red(x) & Rough(x)) -> Nice(x))\nTEXT: All cold things are nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\nTEXT: If something is nice then it is rough.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: All green, red things are rough.\nFOL: all x. ((Green(x) & Red(x)) -> Rough(x))\nTEXT: If Erin is nice then Erin is red.\nFOL: Erin(Nice) -> Erin(Red)\nTEXT: Nice, cold things are red.\nFOL: all x. (Nice(x) & Cold(x) -> Red(x))\nTEXT: Bob is green.\nFOL: Bob(Green)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: BobFurry\nTEXT: Bob is smart.\nFOL: BobSmart\nTEXT: Dave is rough.\nFOL: DaveRough\nTEXT: Dave is smart.\nFOL: DaveSmart\nTEXT: Erin is cold.\nFOL: ErinCold\nTEXT: Erin is furry.\nFOL: ErinFurry\nTEXT: Erin is green.\nFOL: ErinGreen\nTEXT: Erin is nice.\nFOL: ErinNice\nTEXT: Erin is red.\nFOL: ErinRed\nTEXT: Erin is rough.\nFOL: ErinRough\nTEXT: Erin is smart.\nFOL: ErinSmart\nTEXT: Gary is furry.\nFOL: GaryFurry\nTEXT: Gary is green.\nFOL: GaryGreen\nTEXT: Gary is nice.\nFOL: GaryNice\nTEXT: Gary is red.\nFOL: GaryRed\nTEXT: Rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\nTEXT: If something is red and rough then it is nice.\nFOL: all x. ((Red(x) & Rough(x)) -> Nice(x))\nTEXT: All cold things are nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\nTEXT: If something is nice then it is rough.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: All green, red things are rough.\nFOL: all x. ((Green(x) & Red(x)) -> Rough(x))\nTEXT: If Erin is nice then Erin is red.\nFOL: ErinNice -> ErinRed\nTEXT: Nice, cold things are red.\nFOL: all x. (Nice(x) & Cold(x) -> Red(x))\nTEXT: Bob is green.\nFOL: BobGreen\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(Bob)\n\nTEXT: Bob is smart.\nFOL: Smart(Bob)\n\nTEXT: Dave is rough.\nFOL: Rough(Dave)\n\nTEXT: Dave is smart.\nFOL: Smart(Dave)\n\nTEXT: Erin is cold.\nFOL: Cold(Erin)\n\nTEXT: Erin is furry.\nFOL: Furry(Erin)\n\nTEXT: Erin is green.\nFOL: Green(Erin)\n\nTEXT: Erin is nice.\nFOL: Nice(Erin)\n\nTEXT: Erin is red.\nFOL: Red(Erin)\n\nTEXT: Erin is rough.\nFOL: Rough(Erin)\n\nTEXT: Erin is smart.\nFOL: Smart(Erin)\n\nTEXT: Gary is furry.\nFOL: Furry(Gary)\n\nTEXT: Gary is green.\nFOL: Green(Gary)\n\nTEXT: Gary is nice.\nFOL: Nice(Gary)\n\nTEXT: Gary is red.\nFOL: Red(Gary)\n\nTEXT: Rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\n\nTEXT: If something is red and rough then it is nice.\nFOL: all x. ((Red(x) & Rough(x)) -> Nice(x))\n\nTEXT: All cold things are nice.\nFOL: all x. (Cold(x) -> Nice(x))\n\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\n\nTEXT: If something is nice then it is rough.\nFOL: all x. (Nice(x) -> Rough(x))\n\nTEXT: All green, red things are rough.\nFOL: all x. ((Green(x) & Red(x)) -> Rough(x))\n\nTEXT: If Erin is nice then Erin is red.\nFOL: Nice(Erin) -> Red(Erin)\n\nTEXT: Nice, cold things are red.\nFOL: all x. (Nice(x) & Cold(x) -> Red(x))\n\nTEXT: Bob is green.\nFOL: Green(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(bob)\n\nTEXT: Bob is smart.\nFOL: Smart(bob)\n\nTEXT: Dave is rough.\nFOL: Rough(dave)\n\nTEXT: Dave is smart.\nFOL: Smart(dave)\n\nTEXT: Erin is cold.\nFOL: Cold(erin)\n\nTEXT: Erin is furry.\nFOL: Furry(erin)\n\nTEXT: Erin is green.\nFOL: Green(erin)\n\nTEXT: Erin is nice.\nFOL: Nice(erin)\n\nTEXT: Erin is red.\nFOL: Red(erin)\n\nTEXT: Erin is rough.\nFOL: Rough(erin)\n\nTEXT: Erin is smart.\nFOL: Smart(erin)\n\nTEXT: Gary is furry.\nFOL: Furry(gary)\n\nTEXT: Gary is green.\nFOL: Green(gary)\n\nTEXT: Gary is nice.\nFOL: Nice(gary)\n\nTEXT: Gary is red.\nFOL: Red(gary)\n\nTEXT: Rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\n\nTEXT: If something is red and rough then it is nice.\nFOL: all x. ((Red(x) & Rough(x)) -> Nice(x))\n\nTEXT: All cold things are nice.\nFOL: all x. (Cold(x) -> Nice(x))\n\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\n\nTEXT: If something is nice then it is rough.\nFOL: all x. (Nice(x) -> Rough(x))\n\nTEXT: All green, red things are rough.\nFOL: all x. ((Green(x) & Red(x)) -> Rough(x))\n\nTEXT: If Erin is nice then Erin is red.\nFOL: Nice(erin) -> Red(erin)\n\nTEXT: Nice, cold things are red.\nFOL: all x. (Nice(x) & Cold(x) -> Red(x))\n\nTEXT: Bob is green.\nFOL: Green(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: BobFurry\n\nTEXT: Bob is smart.\nFOL: BobSmart\n\nTEXT: Dave is rough.\nFOL: DaveRough\n\nTEXT: Dave is smart.\nFOL: DaveSmart\n\nTEXT: Erin is cold.\nFOL: ErinCold\n\nTEXT: Erin is furry.\nFOL: ErinFurry\n\nTEXT: Erin is green.\nFOL: ErinGreen\n\nTEXT: Erin is nice.\nFOL: ErinNice\n\nTEXT: Erin is red.\nFOL: ErinRed\n\nTEXT: Erin is rough.\nFOL: ErinRough\n\nTEXT: Erin is smart.\nFOL: ErinSmart\n\nTEXT: Gary is furry.\nFOL: GaryFurry\n\nTEXT: Gary is green.\nFOL: GaryGreen\n\nTEXT: Gary is nice.\nFOL: GaryNice\n\nTEXT: Gary is red.\nFOL: GaryRed\n\nTEXT: Rough things are nice.\nFOL: all x. (Rough(x) -> Nice(x))\n\nTEXT: If something is red and rough then it is nice.\nFOL: all x. ((Red(x) & Rough(x)) -> Nice(x))\n\nTEXT: All cold things are nice.\nFOL: all x. (Cold(x) -> Nice(x))\n\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\n\nTEXT: If something is nice then it is rough.\nFOL: all x. (Nice(x) -> Rough(x))\n\nTEXT: All green, red things are rough.\nFOL: all x. ((Green(x) & Red(x)) -> Rough(x))\n\nTEXT: If Erin is nice then Erin is red.\nFOL: ErinNice -> ErinRed\n\nTEXT: Nice, cold things are red.\nFOL: all x. (Nice(x) & Cold(x) -> Red(x))\n\nTEXT: Bob is green.\nFOL: BobGreen\n</EVALUATE>"
  ]
 },
 {
  "index": 41,
  "responses": [
   "<EVALUATE>\nTEXT: The mouse chases the tiger.\nFOL: MouseChasesTiger\nTEXT: The squirrel is young.\nFOL: SquirrelIsYoung\nTEXT: The tiger likes the mouse.\nFOL: TigerLikesMouse\nTEXT: If someone is young then they see the tiger.\nFOL: all x. (Young(x) -> SeeTiger(x))\nTEXT: If someone likes the squirrel and the squirrel is not green then the squirrel sees the mouse.\nFOL: all x. ((LikeSquirrel(x) & -GreenSquirrel(x)) -> SeeMouse(x))\nTEXT: If someone sees the squirrel then they are blue.\nFOL: all x. (SeeSquirrel(x) -> Blue(x))\nTEXT: If the tiger chases the mouse then the tiger likes the squirrel.\nFOL: MouseChasesTiger -> TigerLikesSquirrel\nTEXT: If the tiger is not green then the tiger likes the squirrel.\nFOL: -GreenTiger -> TigerLikesSquirrel\nTEXT: If someone sees the tiger then they are red.\nFOL: all x. (SeeTiger(x) -> Red(x))\nTEXT: If someone chases the tiger then they are young.\nFOL: all x. (ChaseTiger(x) -> Young(x))\nTEXT: If the tiger does not like the squirrel then the squirrel likes the tiger.\nFOL: -TigerLikesSquirrel -> SquirrelLikesTiger\nTEXT: The tiger does not see the tiger.\nFOL: -SeeTiger\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse chases the tiger.\nFOL: MouseChasesTiger\nTEXT: The squirrel is young.\nFOL: SquirrelIsYoung\nTEXT: The tiger likes the mouse.\nFOL: TigerLikesMouse\nTEXT: If someone is young then they see the tiger.\nFOL: all x. (Young(x) -> SeeTiger(x))\nTEXT: If someone likes the squirrel and the squirrel is not green then the squirrel sees the mouse.\nFOL: all x. ((LikeSquirrel(x) & -GreenSquirrel(x)) -> SeeMouse(x))\nTEXT: If someone sees the squirrel then they are blue.\nFOL: all x. (SeeSquirrel(x) -> Blue(x))\nTEXT: If the tiger chases the mouse then the tiger likes the squirrel.\nFOL: MouseChasesTiger -> TigerLikesSquirrel\nTEXT: If the tiger is not green then the tiger likes the squirrel.\nFOL: -GreenTiger -> TigerLikesSquirrel\nTEXT: If someone sees the tiger then they are red.\nFOL: all x. (SeeTiger(x) -> Red(x))\nTEXT: If someone chases the tiger then they are young.\nFOL: all x. (ChaseTiger(x) -> Young(x))\nTEXT: If the tiger does not like the squirrel then the squirrel likes the tiger.\nFOL: -TigerLikesSquirrel -> SquirrelLikesTiger\nTEXT: The tiger does not see the tiger.\nFOL: -SeeTigerTiger\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse chases the tiger.\nFOL: MouseChasesTiger\nTEXT: The squirrel is young.\nFOL: SquirrelIsYoung\nTEXT: The tiger likes the mouse.\nFOL: TigerLikesMouse\nTEXT: If someone is young then they see the tiger.\nFOL: all x. (Young(x) -> SeeTiger(x))\nTEXT: If someone likes the squirrel and the squirrel is not green then the squirrel sees the mouse.\nFOL: all x. ((LikeSquirrel(x) & -GreenSquirrel(x)) -> SeeMouse(x))\nTEXT: If someone sees the squirrel then they are blue.\nFOL: all x. (SeeSquirrel(x) -> Blue(x))\nTEXT: If the tiger chases the mouse then the tiger likes the squirrel.\nFOL: MouseChasesTiger -> TigerLikesSquirrel\nTEXT: If the tiger is not green then the tiger likes the squirrel.\nFOL: -GreenTiger -> TigerLikesSquirrel\nTEXT: If someone sees the tiger then they are red.\nFOL: all x. (SeeTiger(x) -> Red(x))\nTEXT: If someone chases the tiger then they are young.\nFOL: all x. (ChaseTiger(x) -> Young(x))\nTEXT: If the tiger does not like the squirrel then the squirrel likes the tiger.\nFOL: -TigerLikesSquirrel -> SquirrelLikesTiger\nTEXT: The tiger does not see the tiger.\nFOL: -SeeTiger(Tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse chases the tiger.\nFOL: Mouse(chases(tiger))\nTEXT: The squirrel is young.\nFOL: Squirrel(young)\nTEXT: The tiger likes the mouse.\nFOL: Tiger(likes(mouse))\nTEXT: If someone is young then they see the tiger.\nFOL: exists x. (Young(x) -> SeeTiger(x))\nTEXT: If someone likes the squirrel and the squirrel is not green then the squirrel sees the mouse.\nFOL: exists x. ((LikesSquirrel(x) & -GreenSquirrel(x)) -> SeeMouse(x))\nTEXT: If someone sees the squirrel then they are blue.\nFOL: exists x. (SeeSquirrel(x) -> Blue(x))\nTEXT: If the tiger chases the mouse then the tiger likes the squirrel.\nFOL: (Chase(tiger, mouse) -> LikesSquirrel(tiger))\nTEXT: If the tiger is not green then the tiger likes the squirrel.\nFOL: -GreenTiger(tiger) -> LikesSquirrel(tiger)\nTEXT: If someone sees the tiger then they are red.\nFOL: exists x. (SeeTiger(x) -> Red(x))\nTEXT: If someone chases the tiger then they are young.\nFOL: exists x. (Chase(x, tiger) -> Young(x))\nTEXT: If the tiger does not like the squirrel then the squirrel likes the tiger.\nFOL: -LikesSquirrel(tiger) -> LikesSquirrel(tiger)\nTEXT: The tiger does not see the tiger.\nFOL: -SeeTiger(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse chases the tiger.\nFOL: MouseChasesTiger\nTEXT: The squirrel is young.\nFOL: SquirrelIsYoung\nTEXT: The tiger likes the mouse.\nFOL: TigerLikesMouse\nTEXT: If someone is young then they see the tiger.\nFOL: all x. (Young(x) -> SeeTiger(x))\nTEXT: If someone likes the squirrel and the squirrel is not green then the squirrel sees the mouse.\nFOL: all x. ((LikeSquirrel(x) & -GreenSquirrel(x)) -> SeeMouse(x))\nTEXT: If someone sees the squirrel then they are blue.\nFOL: all x. (SeeSquirrel(x) -> Blue(x))\nTEXT: If the tiger chases the mouse then the tiger likes the squirrel.\nFOL: MouseChasesTiger -> TigerLikesSquirrel\nTEXT: If the tiger is not green then the tiger likes the squirrel.\nFOL: -GreenTiger -> TigerLikesSquirrel\nTEXT: If someone sees the tiger then they are red.\nFOL: all x. (SeeTiger(x) -> Red(x))\nTEXT: If someone chases the tiger then they are young.\nFOL: all x. (MouseChasesTiger(x) -> Young(x))\nTEXT: If the tiger does not like the squirrel then the squirrel likes the tiger.\nFOL: -TigerLikesSquirrel -> SquirrelLikesTiger\nTEXT: The tiger does not see the tiger.\nFOL: -SeeTiger\n</EVALUATE>"
  ]
 },
 {
  "index": 42,
  "responses": [
   "<EVALUATE>\nTEXT: The dog is cold.\nFOL: Dog(dog) & Cold(dog)\nTEXT: The dog is red.\nFOL: Dog(dog) & Red(dog)\nTEXT: The dog likes the lion.\nFOL: Dog(dog) & Lion(lion) & Likes(dog, lion)\nTEXT: The dog sees the lion.\nFOL: Dog(dog) & Lion(lion) & Sees(dog, lion)\nTEXT: The lion is cold.\nFOL: Lion(lion) & Cold(lion)\nTEXT: The lion is kind.\nFOL: Lion(lion) & Kind(lion)\nTEXT: The lion is young.\nFOL: Lion(lion) & Young(lion)\nTEXT: The lion likes the dog.\nFOL: Lion(lion) & Dog(dog) & Likes(lion, dog)\nTEXT: The lion sees the dog.\nFOL: Lion(lion) & Dog(dog) & Sees(lion, dog)\nTEXT: The lion visits the dog.\nFOL: Lion(lion) & Dog(dog) & Visits(lion, dog)\nTEXT: If someone sees the dog then they are rough.\nFOL: all x. (Sees(x, dog) -> Rough(x))\nTEXT: If someone is rough then they like the lion.\nFOL: all x. (Rough(x) -> Likes(x, lion))\nTEXT: If someone likes the lion and the lion likes the dog then they visit the lion.\nFOL: all x. ((Likes(x, lion) & Likes(lion, dog)) -> Visits(x, lion))\nTEXT: The dog is not rough.\nFOL: -Rough(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is cold.\nFOL: Dog(dog) & Cold(dog)\nTEXT: The dog is red.\nFOL: Dog(dog) & Red(dog)\nTEXT: The dog likes the lion.\nFOL: Dog(dog) & Lion(lion) & Likes(dog, lion)\nTEXT: The dog sees the lion.\nFOL: Dog(dog) & Lion(lion) & Sees(dog, lion)\nTEXT: The lion is cold.\nFOL: Lion(lion) & Cold(lion)\nTEXT: The lion is kind.\nFOL: Lion(lion) & Kind(lion)\nTEXT: The lion is young.\nFOL: Lion(lion) & Young(lion)\nTEXT: The lion likes the dog.\nFOL: Lion(lion) & Dog(dog) & Likes(lion, dog)\nTEXT: The lion sees the dog.\nFOL: Lion(lion) & Dog(dog) & Sees(lion, dog)\nTEXT: The lion visits the dog.\nFOL: Lion(lion) & Dog(dog) & Visits(lion, dog)\nTEXT: If someone sees the dog then they are rough.\nFOL: all x. (Sees(x, dog) -> Rough(x))\nTEXT: If someone is rough then they like the lion.\nFOL: all x. (Rough(x) -> Likes(x, lion))\nTEXT: If someone likes the lion and the lion likes the dog then they visit the lion.\nFOL: all x. ((Likes(x, lion) & Likes(lion, x)) -> Visits(x, lion))\nTEXT: The dog is not rough.\nFOL: -Rough(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is cold.\nFOL: Dog(dog) & Cold(dog)\nTEXT: The dog is red.\nFOL: Dog(dog) & Red(dog)\nTEXT: The dog likes the lion.\nFOL: Dog(dog) & Lion(lion) & Likes(dog, lion)\nTEXT: The dog sees the lion.\nFOL: Dog(dog) & Lion(lion) & Sees(dog, lion)\nTEXT: The lion is cold.\nFOL: Lion(lion) & Cold(lion)\nTEXT: The lion is kind.\nFOL: Lion(lion) & Kind(lion)\nTEXT: The lion is young.\nFOL: Lion(lion) & Young(lion)\nTEXT: The lion likes the dog.\nFOL: Lion(lion) & Dog(dog) & Likes(lion, dog)\nTEXT: The lion sees the dog.\nFOL: Lion(lion) & Dog(dog) & Sees(lion, dog)\nTEXT: The lion visits the dog.\nFOL: Lion(lion) & Dog(dog) & Visits(lion, dog)\nTEXT: If someone sees the dog then they are rough.\nFOL: exists x. (Sees(x, dog) -> Rough(x))\nTEXT: If someone is rough then they like the lion.\nFOL: exists x. (Rough(x) -> Likes(x, lion))\nTEXT: If someone likes the lion and the lion likes the dog then they visit the lion.\nFOL: exists x. ((Likes(x, lion) & Likes(lion, dog)) -> Visits(x, lion))\nTEXT: The dog is not rough.\nFOL: -Rough(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is cold.\nFOL: Dog(dog) -> Cold(dog)\nTEXT: The dog is red.\nFOL: Dog(dog) -> Red(dog)\nTEXT: The dog likes the lion.\nFOL: Dog(dog) -> LikesLion(dog)\nTEXT: The dog sees the lion.\nFOL: Dog(dog) -> SeesLion(dog)\nTEXT: The lion is cold.\nFOL: Lion(lion) -> Cold(lion)\nTEXT: The lion is kind.\nFOL: Lion(lion) -> Kind(lion)\nTEXT: The lion is young.\nFOL: Lion(lion) -> Young(lion)\nTEXT: The lion likes the dog.\nFOL: Lion(lion) -> LikesDog(lion)\nTEXT: The lion sees the dog.\nFOL: Lion(lion) -> SeesDog(lion)\nTEXT: The lion visits the dog.\nFOL: Lion(lion) -> VisitsDog(lion)\nTEXT: If someone sees the dog then they are rough.\nFOL: all x. (SeesDog(x) -> Rough(x))\nTEXT: If someone is rough then they like the lion.\nFOL: all x. (Rough(x) -> LikesLion(x))\nTEXT: If someone likes the lion and the lion likes the dog then they visit the lion.\nFOL: all x. ((LikesLion(x) & LikesDog(lion)) -> VisitsLion(x))\nTEXT: The dog is not rough.\nFOL: -Rough(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is cold.\nFOL: Dog(dog) -> Cold(dog)\nTEXT: The dog is red.\nFOL: Dog(dog) -> Red(dog)\nTEXT: The dog likes the lion.\nFOL: Dog(dog) -> LikesLion(dog)\nTEXT: The dog sees the lion.\nFOL: Dog(dog) -> SeesLion(dog)\nTEXT: The lion is cold.\nFOL: Lion(lion) -> Cold(lion)\nTEXT: The lion is kind.\nFOL: Lion(lion) -> Kind(lion)\nTEXT: The lion is young.\nFOL: Lion(lion) -> Young(lion)\nTEXT: The lion likes the dog.\nFOL: Lion(lion) -> LikesDog(lion)\nTEXT: The lion sees the dog.\nFOL: Lion(lion) -> SeesDog(lion)\nTEXT: The lion visits the dog.\nFOL: Lion(lion) -> VisitsDog(lion)\nTEXT: If someone sees the dog then they are rough.\nFOL: exists x. (SeesDog(x) -> Rough(x))\nTEXT: If someone is rough then they like the lion.\nFOL: exists x. (Rough(x) -> LikesLion(x))\nTEXT: If someone likes the lion and the lion likes the dog then they visit the lion.\nFOL: exists x. ((LikesLion(x) & LikesDog(lion)) -> VisitsLion(x))\nTEXT: The dog is not rough.\nFOL: -Rough(dog)\n</EVALUATE>"
  ]
 },
 {
  "index": 43,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is young.\nFOL: Young(anne)\n\nTEXT: Bob is not cold.\nFOL: -Cold(bob)\n\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\n\nTEXT: If Anne is round then Anne is not young.\nFOL: Round(anne) -> -Young(anne)\n\nTEXT: Young things are not white.\nFOL: all x. (Young(x) -> -White(x))\n\nTEXT: If Erin is quiet then Erin is cold.\nFOL: Quiet(erin) -> Cold(erin)\n\nTEXT: If something is white then it is not smart.\nFOL: all x. (White(x) -> -Smart(x))\n\nTEXT: If something is quiet and cold then it is round.\nFOL: (Quiet(x) & Cold(x)) -> Round(x)\n\nTEXT: All white things are not round.\nFOL: all x. (White(x) -> -Round(x))\n\nTEXT: If Erin is round then Erin is young.\nFOL: Round(erin) -> Young(erin)\n\nTEXT: If something is round and not nice then it is not quiet.\nFOL: (Round(x) & -Nice(x)) -> -Quiet(x)\n\nTEXT: Erin is round.\nFOL: Round(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is young.\nFOL: Young(Anne)\n\nTEXT: Bob is not cold.\nFOL: -Cold(Bob)\n\nTEXT: Erin is quiet.\nFOL: Quiet(Erin)\n\nTEXT: If Anne is round then Anne is not young.\nFOL: Round(Anne) -> -Young(Anne)\n\nTEXT: Young things are not white.\nFOL: all x. (Young(x) -> -White(x))\n\nTEXT: If Erin is quiet then Erin is cold.\nFOL: Quiet(Erin) -> Cold(Erin)\n\nTEXT: If something is white then it is not smart.\nFOL: White(x) -> -Smart(x)\n\nTEXT: If something is quiet and cold then it is round.\nFOL: (Quiet(x) & Cold(x)) -> Round(x)\n\nTEXT: All white things are not round.\nFOL: all x. (White(x) -> -Round(x))\n\nTEXT: If Erin is round then Erin is young.\nFOL: Round(Erin) -> Young(Erin)\n\nTEXT: If something is round and not nice then it is not quiet.\nFOL: (Round(x) & -Nice(x)) -> -Quiet(x)\n\nTEXT: Erin is round.\nFOL: Round(Erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is young.\nFOL: Young(anne)\n\nTEXT: Bob is not cold.\nFOL: -Cold(bob)\n\nTEXT: Erin is quiet.\nFOL: Quiet(erin)\n\nTEXT: If Anne is round then Anne is not young.\nFOL: Round(anne) -> -Young(anne)\n\nTEXT: Young things are not white.\nFOL: all x. (Young(x) -> -White(x))\n\nTEXT: If Erin is quiet then Erin is cold.\nFOL: Quiet(erin) -> Cold(erin)\n\nTEXT: If something is white then it is not smart.\nFOL: White(x) -> -Smart(x)\n\nTEXT: If something is quiet and cold then it is round.\nFOL: (Quiet(x) & Cold(x)) -> Round(x)\n\nTEXT: All white things are not round.\nFOL: all x. (White(x) -> -Round(x))\n\nTEXT: If Erin is round then Erin is young.\nFOL: Round(erin) -> Young(erin)\n\nTEXT: If something is round and not nice then it is not quiet.\nFOL: (Round(x) & -Nice(x)) -> -Quiet(x)\n\nTEXT: Erin is round.\nFOL: Round(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is young.\nFOL: Young(Anne)\n\nTEXT: Bob is not cold.\nFOL: -Cold(Bob)\n\nTEXT: Erin is quiet.\nFOL: Quiet(Erin)\n\nTEXT: If Anne is round then Anne is not young.\nFOL: Round(Anne) -> -Young(Anne)\n\nTEXT: Young things are not white.\nFOL: all x. (Young(x) -> -White(x))\n\nTEXT: If Erin is quiet then Erin is cold.\nFOL: Quiet(Erin) -> Cold(Erin)\n\nTEXT: If something is white then it is not smart.\nFOL: all x. (White(x) -> -Smart(x))\n\nTEXT: If something is quiet and cold then it is round.\nFOL: (Quiet(x) & Cold(x)) -> Round(x)\n\nTEXT: All white things are not round.\nFOL: all x. (White(x) -> -Round(x))\n\nTEXT: If Erin is round then Erin is young.\nFOL: Round(Erin) -> Young(Erin)\n\nTEXT: If something is round and not nice then it is not quiet.\nFOL: (Round(x) & -Nice(x)) -> -Quiet(x)\n\nTEXT: Erin is round.\nFOL: Round(Erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is young.\nFOL: Young(Anne)\n\nTEXT: Bob is not cold.\nFOL: -Cold(Bob)\n\nTEXT: Erin is quiet.\nFOL: Quiet(Erin)\n\nTEXT: If Anne is round then Anne is not young.\nFOL: Round(Anne) -> -Young(Anne)\n\nTEXT: Young things are not white.\nFOL: all x. (Young(x) -> -White(x))\n\nTEXT: If Erin is quiet then Erin is cold.\nFOL: Quiet(Erin) -> Cold(Erin)\n\nTEXT: If something is white then it is not smart.\nFOL: White(x) -> -Smart(x)\n\nTEXT: If something is quiet and cold then it is round.\nFOL: (Quiet(x) & Cold(x)) -> Round(x)\n\nTEXT: All white things are not round.\nFOL: all x. (White(x) -> -Round(x))\n\nTEXT: If Erin is round then Erin is young.\nFOL: Round(Erin) -> Young(Erin)\n\nTEXT: If something is round and not nice then it is not quiet.\nFOL: (Round(x) & -Nice(x)) -> -Quiet(x)\n\nTEXT: Erin is round.\nFOL: Round(Erin)\n</EVALUATE>"
  ]
 },
 {
  "index": 44,
  "responses": [
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: exists x. (Young(x) & Cold(x) & Name(x, alan))\n\nTEXT: Charlie is kind and nice and looks green.\nFOL: Kind(Charlie) & Nice(Charlie) & Green(Charlie)\n\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(Fred) | -Round(Fred) & Kind(Fred)\n\nTEXT: Harry seems to be round.\nFOL: SeemRound(Harry)\n\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x) | -Cold(x) & Red(x))\n\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: exists x. (Young(x) & Cold(x) & Green(x) & -Nice(x) -> Nice(x))\n\nTEXT: People who are young and blue are also red.\nFOL: exists x. (Young(x) & Blue(x) -> Red(x))\n\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: exists x. (Big(x) & Rough(x) & Cold(x) -> Red(x))\n\nTEXT: Someone who is young at heart and age are very round.\nFOL: YoungAtHeart(x) & Age(x) -> Round(x)\n\nTEXT: A young person with red hands is rough around the edges.\nFOL: Young(x) & Red(x) -> Rough(x)\n\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: Round(x) & Cold(x) -> Blue(x)\n\nTEXT: Harry is round.\nFOL: Round(Harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: exists x. (Young(x) & Cold(x) & Name(x, alan))\n\nTEXT: Charlie is kind and nice and looks green.\nFOL: Kind(Charlie) & Nice(Charlie) & Green(Charlie)\n\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(Fred) | -Round(Fred) & Kind(Fred)\n\nTEXT: Harry seems to be round.\nFOL: SeemRound(Harry)\n\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x) | Red(x))\n\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: exists x. (Young(x) & Cold(x, others) & Green(x, envy) & Nice(x))\n\nTEXT: People who are young and blue are also red.\nFOL: exists x. (Young(x) & Blue(x) -> Red(x))\n\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: exists x. (Big(x) & Rough(x) & Cold(x) -> Red(x))\n\nTEXT: Someone who is young at heart and age are very round.\nFOL: YoungAtHeart(x) & Age(x) -> Round(x)\n\nTEXT: A young person with red hands is rough around the edges.\nFOL: Young(x) & Red(x) -> Rough(x)\n\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: Round(x) & Cold(x) -> Blue(x)\n\nTEXT: Harry is round.\nFOL: Round(Harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: exists x. (Young(x) & Cold(x) & Name(x, alan))\n\nTEXT: Charlie is kind and nice and looks green.\nFOL: Kind(Charlie) & Nice(Charlie) & Green(Charlie)\n\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(Fred) | -Round(Fred) & Kind(Fred)\n\nTEXT: Harry seems to be round.\nFOL: SeemRound(Harry)\n\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x) | -Cold(x) & Red(x))\n\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: exists x. (Young(x) & Cold(x, others) & Green(x, envy) -> Nice(x))\n\nTEXT: People who are young and blue are also red.\nFOL: exists x. (Young(x) & Blue(x) -> Red(x))\n\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: exists x. (Big(x) & Rough(x) & Cold(x) -> Red(x))\n\nTEXT: Someone who is young at heart and age are very round.\nFOL: YoungAtHeart(x) & Age(x) -> Round(x)\n\nTEXT: A young person with red hands is rough around the edges.\nFOL: Young(x) & Red(x) -> Rough(x)\n\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: Round(x) & Cold(x) -> Blue(x)\n\nTEXT: Harry is round.\nFOL: Round(Harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: exists x. (Young(x) & Cold(x) & Name(x, alan))\n\nTEXT: Charlie is kind and nice and looks green.\nFOL: Kind(Charlie) & Nice(Charlie) & Green(Charlie)\n\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(Fred) | -Round(Fred) & Kind(Fred)\n\nTEXT: Harry seems to be round.\nFOL: SeemRound(Harry)\n\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x) | -Cold(x) & Red(x))\n\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: exists x. (Young(x) & Cold(x) & Green(x) & -Nice(x) -> Nice(x))\n\nTEXT: People who are young and blue are also red.\nFOL: exists x. (Young(x) & Blue(x) -> Red(x))\n\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: exists x. (Cold(x) & Big(x) & Rough(x) -> Red(x))\n\nTEXT: Someone who is young at heart and age are very round.\nFOL: YoungAtHeart(x) & Age(x) -> Round(x)\n\nTEXT: A young person with red hands is rough around the edges.\nFOL: Young(x) & Red(x) -> Rough(x)\n\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: Round(x) & Cold(x) -> Blue(x)\n\nTEXT: Harry is round.\nFOL: Round(Harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: exists x. (Young(x) & Cold(x) & Name(x, alan))\n\nTEXT: Charlie is kind and nice and looks green.\nFOL: Kind(Charlie) & Nice(Charlie) & Green(Charlie)\n\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(Fred) | -Round(Fred) & Kind(Fred)\n\nTEXT: Harry seems to be round.\nFOL: SeemRound(Harry)\n\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x) | -Cold(x) & Red(x))\n\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: exists x. (Young(x) & Cold(x, others) & Green(x, envy) & Nice(x))\n\nTEXT: People who are young and blue are also red.\nFOL: exists x. (Young(x) & Blue(x) -> Red(x))\n\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: exists x. (Big(x) & Rough(x) & Cold(x) -> Red(x))\n\nTEXT: Someone who is young at heart and age are very round.\nFOL: YoungAtHeart(x) & Age(x) -> Round(x)\n\nTEXT: A young person with red hands is rough around the edges.\nFOL: Young(x) & Red(x) -> Rough(x)\n\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: Round(x) & Cold(x) -> Blue(x)\n\nTEXT: Harry is round.\nFOL: Round(Harry)\n</EVALUATE>"
  ]
 },
 {
  "index": 45,
  "responses": [
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(Alan)\nTEXT: That guy Bob sure is nice.\nFOL: Nice(Bob)\nTEXT: Charlie is green and cold too.\nFOL: Green(Charlie) & Cold(Charlie)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: Green(Fred) & Cold(Fred) & Blue(Fred)\nTEXT: If a kind person is green and a bit blue then they are also nice.\nFOL: Kind(x) & Green(x) & Blue(x) -> Nice(x)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x)) & exists x. (Cold(x) & Red(x))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: Rough(x) & Cold(x) & Green(x) -> BigQuality(x)\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: Blue(x) & Red(x) & Nice(x) -> Young(x)\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: Cold(x) -> Nice(x)\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: Cold(x) & Rough(x) & Red(x) -> Kind(x)\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) -> Red(x))\nTEXT: Bob is not kind.\nFOL: -Kind(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(Alan)\nTEXT: That guy Bob sure is nice.\nFOL: Nice(Bob)\nTEXT: Charlie is green and cold too.\nFOL: Green(Charlie) & Cold(Charlie)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: Green(Fred) & Cold(Fred) & Blue(Fred)\nTEXT: If a kind person is green and a bit blue then they are also nice.\nFOL: Kind(x) & Green(x) & Blue(x) -> Nice(x)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x)) | exists x. (Cold(x) & Red(x))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: Rough(x) & Cold(x) & Green(x) -> BigQuality(x)\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: Blue(x) & Red(x) & Nice(x) -> Young(x)\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: Cold(x) -> Nice(x)\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: Cold(x) & Rough(x) & Red(x) -> Kind(x)\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) -> Red(x))\nTEXT: Bob is not kind.\nFOL: -Kind(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(Alan)\nTEXT: That guy Bob sure is nice.\nFOL: Nice(Bob)\nTEXT: Charlie is green and cold too.\nFOL: Green(Charlie) & Cold(Charlie)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: Green(Fred) & Cold(Fred) & Blue(Fred)\nTEXT: If a kind person is green and a bit blue then they are also nice.\nFOL: Kind(x) & Green(x) & Blue(x) -> Nice(x)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: Cold(x) & Nice(x) & Red(x)\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: Rough(x) & Cold(x) & Green(x) -> BigQuality(x)\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: Blue(x) & Red(x) & Nice(x) -> Young(x)\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: Cold(x) -> Nice(x)\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: Cold(x) & Rough(x) & Red(x) -> Kind(x)\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: Round(x) & Green(x) & Cold(x) -> Red(x)\nTEXT: Bob is not kind.\nFOL: -Kind(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(Alan)\nTEXT: That guy Bob sure is nice.\nFOL: Nice(Bob)\nTEXT: Charlie is green and cold too.\nFOL: Green(Charlie) & Cold(Charlie)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: Green(Fred) & Cold(Fred) & Blue(Fred)\nTEXT: If a kind person is green and a bit blue then they are also nice.\nFOL: Kind(x) & Green(x) & Blue(x) -> Nice(x)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: Cold(x) & Nice(x) | Red(x) & Nice(x)\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: Rough(x) & Cold(x) & Green(x) -> BigQuality(x)\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: Blue(x) & Red(x) & Nice(x) -> Young(x)\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: Cold(x) -> Nice(x)\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: Cold(x) & Rough(x) & Red(x) -> Kind(x)\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: Round(x) & Green(x) & Cold(x) -> Red(x)\nTEXT: Bob is not kind.\nFOL: -Kind(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(Alan)\nTEXT: That guy Bob sure is nice.\nFOL: Nice(Bob)\nTEXT: Charlie is green and cold too.\nFOL: Green(Charlie) & Cold(Charlie)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: Green(Fred) & Cold(Fred) & Blue(Fred)\nTEXT: If a kind person is green and a bit blue then they are also nice.\nFOL: Kind(x) & Green(x) & Blue(x) -> Nice(x)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x)) & exists x. (Cold(x) & Red(x))\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: Rough(x) & Cold(x) & Green(x) -> BigQuality(x)\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: Blue(x) & Red(x) & Nice(x) -> Young(x)\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: Cold(x) -> Nice(x)\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: Cold(x) & Rough(x) & Red(x) -> Kind(x)\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) -> Red(x))\nTEXT: Bob is not kind.\nFOL: -Nice(Bob)\n</EVALUATE>"
  ]
 },
 {
  "index": 46,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is blue.\nFOL: BaldEagle(x) -> Blue(x)\nTEXT: The bald eagle is not red.\nFOL: -Red(x)\nTEXT: The bald eagle likes the cat.\nFOL: BaldEagle(x) -> LikesCat(x)\nTEXT: The bald eagle likes the cow.\nFOL: BaldEagle(x) -> LikesCow(x)\nTEXT: The bald eagle does not visit the tiger.\nFOL: -VisitTiger(x)\nTEXT: The cat is kind.\nFOL: Cat(x) -> Kind(x)\nTEXT: The cat is red.\nFOL: Cat(x) -> Red(x)\nTEXT: The cat needs the tiger.\nFOL: Cat(x) -> NeedsTiger(x)\nTEXT: The cow is big.\nFOL: Cow(x) -> Big(x)\nTEXT: The tiger is big.\nFOL: Tiger(x) -> Big(x)\nTEXT: The tiger is blue.\nFOL: Tiger(x) -> Blue(x)\nTEXT: The tiger likes the cow.\nFOL: Tiger(x) -> LikesCow(x)\nTEXT: The tiger needs the bald eagle.\nFOL: Tiger(x) -> NeedsBaldEagle(x)\nTEXT: The tiger needs the cat.\nFOL: Tiger(x) -> NeedsCat(x)\nTEXT: The tiger visits the bald eagle.\nFOL: Tiger(x) -> VisitBaldEagle(x)\nTEXT: The tiger does not visit the cow.\nFOL: -VisitCow(x)\nTEXT: If something likes the bald eagle then the bald eagle is not green.\nFOL: all x. (LikesBaldEagle(x) -> -Green(x))\nTEXT: Big things are green.\nFOL: all x. (Big(x) -> Green(x))\nTEXT: If something is blue then it needs the bald eagle.\nFOL: all x. (Blue(x) -> NeedsBaldEagle(x))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Green(x) -> NeedsBaldEagle(x))\nTEXT: If the cat likes the cow and the cat is not big then the cow needs the cat.\nFOL: (LikesCow(cat) & -Big(cat)) -> NeedsCat(cow)\nTEXT: If something is red then it visits the cat.\nFOL: all x. (Red(x) -> VisitCat(x))\nTEXT: If something visits the cat then the cat likes the bald eagle.\nFOL: all x. (VisitCat(x) -> LikesBaldEagle(cat))\nTEXT: If something likes the bald eagle then it visits the bald eagle.\nFOL: all x. (LikesBaldEagle(x) -> VisitBaldEagle(x))\nTEXT: The tiger is green.\nFOL: Tiger(x) -> Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is blue.\nFOL: BaldEagle(x) -> Blue(x)\nTEXT: The bald eagle is not red.\nFOL: -Red(x)\nTEXT: The bald eagle likes the cat.\nFOL: BaldEagle(x) -> LikesCat(x)\nTEXT: The bald eagle likes the cow.\nFOL: BaldEagle(x) -> LikesCow(x)\nTEXT: The bald eagle does not visit the tiger.\nFOL: -VisitsTiger(x)\nTEXT: The cat is kind.\nFOL: Cat(x) -> Kind(x)\nTEXT: The cat is red.\nFOL: Cat(x) -> Red(x)\nTEXT: The cat needs the tiger.\nFOL: Cat(x) -> NeedsTiger(x)\nTEXT: The cow is big.\nFOL: Cow(x) -> Big(x)\nTEXT: The tiger is big.\nFOL: Tiger(x) -> Big(x)\nTEXT: The tiger is blue.\nFOL: Tiger(x) -> Blue(x)\nTEXT: The tiger likes the cow.\nFOL: Tiger(x) -> LikesCow(x)\nTEXT: The tiger needs the bald eagle.\nFOL: Tiger(x) -> NeedsBaldEagle(x)\nTEXT: The tiger needs the cat.\nFOL: Tiger(x) -> NeedsCat(x)\nTEXT: The tiger visits the bald eagle.\nFOL: Tiger(x) -> VisitsBaldEagle(x)\nTEXT: The tiger does not visit the cow.\nFOL: -Tiger(x) -> VisitsCow(x)\nTEXT: If something likes the bald eagle then the bald eagle is not green.\nFOL: all x. (LikesBaldEagle(x) -> -Green(x))\nTEXT: Big things are green.\nFOL: all x. (Big(x) -> Green(x))\nTEXT: If something is blue then it needs the bald eagle.\nFOL: all x. (Blue(x) -> NeedsBaldEagle(x))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Green(x) -> NeedsBaldEagle(x))\nTEXT: If the cat likes the cow and the cat is not big then the cow needs the cat.\nFOL: (LikesCow(cat) & -Big(cat)) -> NeedsCat(cow)\nTEXT: If something is red then it visits the cat.\nFOL: all x. (Red(x) -> VisitsCat(x))\nTEXT: If something visits the cat then the cat likes the bald eagle.\nFOL: all x. (VisitsCat(x) -> LikesBaldEagle(cat))\nTEXT: If something likes the bald eagle then it visits the bald eagle.\nFOL: all x. (LikesBaldEagle(x) -> VisitsBaldEagle(x))\nTEXT: The tiger is green.\nFOL: Tiger(x) -> Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is blue.\nFOL: BaldEagle(x) -> Blue(x)\nTEXT: The bald eagle is not red.\nFOL: -Red(x)\nTEXT: The bald eagle likes the cat.\nFOL: BaldEagle(x) -> LikesCat(x)\nTEXT: The bald eagle likes the cow.\nFOL: BaldEagle(x) -> LikesCow(x)\nTEXT: The bald eagle does not visit the tiger.\nFOL: -VisitsTiger(x)\nTEXT: The cat is kind.\nFOL: Cat(x) -> Kind(x)\nTEXT: The cat is red.\nFOL: Cat(x) -> Red(x)\nTEXT: The cat needs the tiger.\nFOL: Cat(x) -> NeedsTiger(x)\nTEXT: The cow is big.\nFOL: Cow(x) -> Big(x)\nTEXT: The tiger is big.\nFOL: Tiger(x) -> Big(x)\nTEXT: The tiger is blue.\nFOL: Tiger(x) -> Blue(x)\nTEXT: The tiger likes the cow.\nFOL: Tiger(x) -> LikesCow(x)\nTEXT: The tiger needs the bald eagle.\nFOL: Tiger(x) -> NeedsBaldEagle(x)\nTEXT: The tiger needs the cat.\nFOL: Tiger(x) -> NeedsCat(x)\nTEXT: The tiger visits the bald eagle.\nFOL: Tiger(x) -> VisitsBaldEagle(x)\nTEXT: The tiger does not visit the cow.\nFOL: -Tiger(x) -> VisitsCow(x)\nTEXT: If something likes the bald eagle then the bald eagle is not green.\nFOL: all x. (LikesBaldEagle(x) -> -Green(x))\nTEXT: Big things are green.\nFOL: all x. (Big(x) -> Green(x))\nTEXT: If something is blue then it needs the bald eagle.\nFOL: all x. (Blue(x) -> NeedsBaldEagle(x))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Green(x) -> NeedsBaldEagle(x))\nTEXT: If the cat likes the cow and the cat is not big then the cow needs the cat.\nFOL: (LikesCat(cow) & -Big(cow)) -> NeedsCat(cow)\nTEXT: If something is red then it visits the cat.\nFOL: all x. (Red(x) -> VisitsCat(x))\nTEXT: If something visits the cat then the cat likes the bald eagle.\nFOL: all x. (VisitsCat(x) -> LikesBaldEagle(x))\nTEXT: If something likes the bald eagle then it visits the bald eagle.\nFOL: all x. (LikesBaldEagle(x) -> VisitsBaldEagle(x))\nTEXT: The tiger is green.\nFOL: Tiger(x) -> Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is blue.\nFOL: BaldEagle(x) -> Blue(x)\nTEXT: The bald eagle is not red.\nFOL: -Red(x)\nTEXT: The bald eagle likes the cat.\nFOL: BaldEagle(x) -> LikesCat(x)\nTEXT: The bald eagle likes the cow.\nFOL: BaldEagle(x) -> LikesCow(x)\nTEXT: The bald eagle does not visit the tiger.\nFOL: -VisitsTiger(x)\nTEXT: The cat is kind.\nFOL: Cat(x) -> Kind(x)\nTEXT: The cat is red.\nFOL: Cat(x) -> Red(x)\nTEXT: The cat needs the tiger.\nFOL: Cat(x) -> NeedsTiger(x)\nTEXT: The cow is big.\nFOL: Cow(x) -> Big(x)\nTEXT: The tiger is big.\nFOL: Tiger(x) -> Big(x)\nTEXT: The tiger is blue.\nFOL: Tiger(x) -> Blue(x)\nTEXT: The tiger likes the cow.\nFOL: Tiger(x) -> LikesCow(x)\nTEXT: The tiger needs the bald eagle.\nFOL: Tiger(x) -> NeedsBaldEagle(x)\nTEXT: The tiger needs the cat.\nFOL: Tiger(x) -> NeedsCat(x)\nTEXT: The tiger visits the bald eagle.\nFOL: Tiger(x) -> VisitsBaldEagle(x)\nTEXT: The tiger does not visit the cow.\nFOL: -Tiger(x) -> VisitsCow(x)\nTEXT: If something likes the bald eagle then the bald eagle is not green.\nFOL: all x. (LikesBaldEagle(x) -> -Green(x))\nTEXT: Big things are green.\nFOL: all x. (Big(x) -> Green(x))\nTEXT: If something is blue then it needs the bald eagle.\nFOL: all x. (Blue(x) -> NeedsBaldEagle(x))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Green(x) -> NeedsBaldEagle(x))\nTEXT: If the cat likes the cow and the cat is not big then the cow needs the cat.\nFOL: (LikesCow(Cat(x)) & -Big(Cat(x))) -> NeedsCat(Cow(x))\nTEXT: If something is red then it visits the cat.\nFOL: all x. (Red(x) -> VisitsCat(x))\nTEXT: If something visits the cat then the cat likes the bald eagle.\nFOL: all x. (VisitsCat(x) -> LikesBaldEagle(Cat(x)))\nTEXT: If something likes the bald eagle then it visits the bald eagle.\nFOL: all x. (LikesBaldEagle(x) -> VisitsBaldEagle(x))\nTEXT: The tiger is green.\nFOL: Tiger(x) -> Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is blue.\nFOL: BaldEagle(x) -> Blue(x)\nTEXT: The bald eagle is not red.\nFOL: -Red(x)\nTEXT: The bald eagle likes the cat.\nFOL: BaldEagle(x) -> LikesCat(x)\nTEXT: The bald eagle likes the cow.\nFOL: BaldEagle(x) -> LikesCow(x)\nTEXT: The bald eagle does not visit the tiger.\nFOL: -VisitsTiger(x)\nTEXT: The cat is kind.\nFOL: Cat(x) -> Kind(x)\nTEXT: The cat is red.\nFOL: Cat(x) -> Red(x)\nTEXT: The cat needs the tiger.\nFOL: Cat(x) -> NeedsTiger(x)\nTEXT: The cow is big.\nFOL: Cow(x) -> Big(x)\nTEXT: The tiger is big.\nFOL: Tiger(x) -> Big(x)\nTEXT: The tiger is blue.\nFOL: Tiger(x) -> Blue(x)\nTEXT: The tiger likes the cow.\nFOL: Tiger(x) -> LikesCow(x)\nTEXT: The tiger needs the bald eagle.\nFOL: Tiger(x) -> NeedsBaldEagle(x)\nTEXT: The tiger needs the cat.\nFOL: Tiger(x) -> NeedsCat(x)\nTEXT: The tiger visits the bald eagle.\nFOL: Tiger(x) -> VisitsBaldEagle(x)\nTEXT: The tiger does not visit the cow.\nFOL: -Tiger(x) -> VisitsCow(x)\nTEXT: If something likes the bald eagle then the bald eagle is not green.\nFOL: all x. (LikesBaldEagle(x) -> -Green(x))\nTEXT: Big things are green.\nFOL: all x. (Big(x) -> Green(x))\nTEXT: If something is blue then it needs the bald eagle.\nFOL: all x. (Blue(x) -> NeedsBaldEagle(x))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Green(x) -> NeedsBaldEagle(x))\nTEXT: If the cat likes the cow and the cat is not big then the cow needs the cat.\nFOL: (LikesCow(cat) & -Big(cat)) -> NeedsCat(cow)\nTEXT: If something is red then it visits the cat.\nFOL: all x. (Red(x) -> VisitsCat(x))\nTEXT: If something visits the cat then the cat likes the bald eagle.\nFOL: all x. (VisitsCat(x) -> LikesBaldEagle(x))\nTEXT: If something likes the bald eagle then it visits the bald eagle.\nFOL: all x. (LikesBaldEagle(x) -> VisitsBaldEagle(x))\nTEXT: The tiger is green.\nFOL: Tiger(x) -> Green(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 47,
  "responses": [
   "<EVALUATE>\nTEXT: The tiger is blue.\nFOL: Tiger(tiger) -> Blue(tiger)\nTEXT: If the tiger is blue then the tiger is big.\nFOL: Blue(tiger) -> Big(tiger)\nTEXT: If the tiger is big and the tiger is blue then the tiger is not round.\nFOL: (Big(tiger) & Blue(tiger)) -> -Round(tiger)\nTEXT: If the tiger is big then the tiger is blue.\nFOL: Big(tiger) -> Blue(tiger)\nTEXT: If the tiger is not round then the tiger is not nice.\nFOL: -Round(tiger) -> -Nice(tiger)\nTEXT: If the tiger is not round and the tiger is not big then the tiger is not nice.\nFOL: (-Round(tiger) & -Big(tiger)) -> -Nice(tiger)\nTEXT: If something is round and nice then it is not rough.\nFOL: (Round(x) & Nice(x)) -> -Rough(x)\nTEXT: The tiger is not blue.\nFOL: -Blue(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The tiger is blue.\nFOL: Tiger(tiger) = Blue(tiger)\nTEXT: If the tiger is blue then the tiger is big.\nFOL: Blue(tiger) -> Big(tiger)\nTEXT: If the tiger is big and the tiger is blue then the tiger is not round.\nFOL: (Big(tiger) & Blue(tiger)) -> -Round(tiger)\nTEXT: If the tiger is big then the tiger is blue.\nFOL: Big(tiger) -> Blue(tiger)\nTEXT: If the tiger is not round then the tiger is not nice.\nFOL: -Round(tiger) -> -Nice(tiger)\nTEXT: If the tiger is not round and the tiger is not big then the tiger is not nice.\nFOL: (-Round(tiger) & -Big(tiger)) -> -Nice(tiger)\nTEXT: If something is round and nice then it is not rough.\nFOL: (Round(x) & Nice(x)) -> -Rough(x)\nTEXT: The tiger is not blue.\nFOL: -Blue(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The tiger is blue.\nFOL: Tiger(tiger) -> Blue(tiger)\n\nTEXT: If the tiger is blue then the tiger is big.\nFOL: Blue(tiger) -> Big(tiger)\n\nTEXT: If the tiger is big and the tiger is blue then the tiger is not round.\nFOL: (Big(tiger) & Blue(tiger)) -> -Round(tiger)\n\nTEXT: If the tiger is big then the tiger is blue.\nFOL: Big(tiger) -> Blue(tiger)\n\nTEXT: If the tiger is not round then the tiger is not nice.\nFOL: -Round(tiger) -> -Nice(tiger)\n\nTEXT: If the tiger is not round and the tiger is not big then the tiger is not nice.\nFOL: (-Round(tiger) & -Big(tiger)) -> -Nice(tiger)\n\nTEXT: If something is round and nice then it is not rough.\nFOL: (Round(x) & Nice(x)) -> -Rough(x)\n\nTEXT: The tiger is not blue.\nFOL: -Blue(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The tiger is blue.\nFOL: Tiger(tiger) = Blue(tiger)\n\nTEXT: If the tiger is blue then the tiger is big.\nFOL: Blue(tiger) -> Big(tiger)\n\nTEXT: If the tiger is big and the tiger is blue then the tiger is not round.\nFOL: (Big(tiger) & Blue(tiger)) -> -Round(tiger)\n\nTEXT: If the tiger is big then the tiger is blue.\nFOL: Big(tiger) -> Blue(tiger)\n\nTEXT: If the tiger is not round then the tiger is not nice.\nFOL: -Round(tiger) -> -Nice(tiger)\n\nTEXT: If the tiger is not round and the tiger is not big then the tiger is not nice.\nFOL: (-Round(tiger) & -Big(tiger)) -> -Nice(tiger)\n\nTEXT: If something is round and nice then it is not rough.\nFOL: (Round(x) & Nice(x)) -> -Rough(x)\n\nTEXT: The tiger is not blue.\nFOL: -Blue(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The tiger is blue.\nFOL: Tiger(tiger) = Blue(tiger)\n\nTEXT: If the tiger is blue then the tiger is big.\nFOL: Blue(tiger) -> Big(tiger)\n\nTEXT: If the tiger is big and the tiger is blue then the tiger is not round.\nFOL: (Big(tiger) & Blue(tiger)) -> -Round(tiger)\n\nTEXT: If the tiger is big then the tiger is blue.\nFOL: Big(tiger) -> Blue(tiger)\n\nTEXT: If the tiger is not round then the tiger is not nice.\nFOL: -Round(tiger) -> -Nice(tiger)\n\nTEXT: If the tiger is not round and the tiger is not big then the tiger is not nice.\nFOL: (-Round(tiger) & -Big(tiger)) -> -Nice(tiger)\n\nTEXT: If something is round and nice then it is not rough.\nFOL: Round(x) & Nice(x) -> -Rough(x)\n\nTEXT: The tiger is not blue.\nFOL: -Blue(tiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 48,
  "responses": [
   "<EVALUATE>\nTEXT: The cow eats the dog.\nFOL: Cow(cow) & Dog(dog) & Eat(cow, dog)\nTEXT: The cow eats the tiger.\nFOL: Cow(cow) & Tiger(tiger) & Eat(cow, tiger)\nTEXT: The cow is kind.\nFOL: Cow(cow) & Kind(cow)\nTEXT: The cow is red.\nFOL: Cow(cow) & Red(cow)\nTEXT: The cow likes the dog.\nFOL: Cow(cow) & Dog(dog) & Like(cow, dog)\nTEXT: The cow needs the dog.\nFOL: Cow(cow) & Dog(dog) & Need(cow, dog)\nTEXT: The dog likes the tiger.\nFOL: Dog(dog) & Tiger(tiger) & Like(dog, tiger)\nTEXT: The dog needs the cow.\nFOL: Dog(dog) & Cow(cow) & Need(dog, cow)\nTEXT: The dog needs the tiger.\nFOL: Dog(dog) & Tiger(tiger) & Need(dog, tiger)\nTEXT: The tiger eats the cow.\nFOL: Tiger(tiger) & Cow(cow) & Eat(tiger, cow)\nTEXT: The tiger is kind.\nFOL: Tiger(tiger) & Kind(tiger)\nTEXT: The tiger is round.\nFOL: Tiger(tiger) & Round(tiger)\nTEXT: The tiger likes the cow.\nFOL: Tiger(tiger) & Cow(cow) & Like(tiger, cow)\nTEXT: The tiger needs the cow.\nFOL: Tiger(tiger) & Cow(cow) & Need(tiger, cow)\nTEXT: The tiger needs the dog.\nFOL: Tiger(tiger) & Dog(dog) & Need(tiger, dog)\nTEXT: If someone likes the cow then the cow needs the tiger.\nFOL: all x. (Like(x, cow) -> Need(x, tiger))\nTEXT: If someone is kind then they like the dog.\nFOL: all x. (Kind(x) -> Like(x, dog))\nTEXT: If someone is round then they like the dog.\nFOL: all x. (Round(x) -> Like(x, dog))\nTEXT: If the cow is not round then the cow is not rough.\nFOL: -Round(cow) -> -Rough(cow)\nTEXT: If the dog eats the cow and the dog likes the tiger then the tiger is red.\nFOL: (Eat(dog, cow) & Like(dog, tiger)) -> Red(tiger)\nTEXT: If someone likes the cow then they are rough.\nFOL: all x. (Like(x, cow) -> Rough(x))\nTEXT: If someone eats the cow and the cow needs the dog then the dog likes the cow.\nFOL: all x. (Eat(x, cow) & Need(x, dog) -> Like(x, cow))\nTEXT: If someone likes the tiger and the tiger likes the dog then the dog eats the cow.\nFOL: all x. (Like(x, tiger) & Like(tiger, dog) -> Eat(dog, cow))\nTEXT: The cow does not like the cow.\nFOL: -Like(cow, cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow eats the dog.\nFOL: Cow(cow) & Dog(dog) & Eat(cow, dog)\nTEXT: The cow eats the tiger.\nFOL: Cow(cow) & Tiger(tiger) & Eat(cow, tiger)\nTEXT: The cow is kind.\nFOL: Cow(cow) & Kind(cow)\nTEXT: The cow is red.\nFOL: Cow(cow) & Red(cow)\nTEXT: The cow likes the dog.\nFOL: Cow(cow) & Dog(dog) & Like(cow, dog)\nTEXT: The cow needs the dog.\nFOL: Cow(cow) & Dog(dog) & Need(cow, dog)\nTEXT: The dog likes the tiger.\nFOL: Dog(dog) & Tiger(tiger) & Like(dog, tiger)\nTEXT: The dog needs the cow.\nFOL: Dog(dog) & Cow(cow) & Need(dog, cow)\nTEXT: The dog needs the tiger.\nFOL: Dog(dog) & Tiger(tiger) & Need(dog, tiger)\nTEXT: The tiger eats the cow.\nFOL: Tiger(tiger) & Cow(cow) & Eat(tiger, cow)\nTEXT: The tiger is kind.\nFOL: Tiger(tiger) & Kind(tiger)\nTEXT: The tiger is round.\nFOL: Tiger(tiger) & Round(tiger)\nTEXT: The tiger likes the cow.\nFOL: Tiger(tiger) & Cow(cow) & Like(tiger, cow)\nTEXT: The tiger needs the cow.\nFOL: Tiger(tiger) & Cow(cow) & Need(tiger, cow)\nTEXT: The tiger needs the dog.\nFOL: Tiger(tiger) & Dog(dog) & Need(tiger, dog)\nTEXT: If someone likes the cow then the cow needs the tiger.\nFOL: exists x. (Like(x, cow) -> Need(x, tiger))\nTEXT: If someone is kind then they like the dog.\nFOL: exists x. (Kind(x) -> Like(x, dog))\nTEXT: If someone is round then they like the dog.\nFOL: exists x. (Round(x) -> Like(x, dog))\nTEXT: If the cow is not round then the cow is not rough.\nFOL: -Round(cow) -> -Rough(cow)\nTEXT: If the dog eats the cow and the dog likes the tiger then the tiger is red.\nFOL: (Eat(dog, cow) & Like(dog, tiger)) -> Red(tiger)\nTEXT: If someone likes the cow then they are rough.\nFOL: exists x. (Like(x, cow) -> Rough(x))\nTEXT: If someone eats the cow and the cow needs the dog then the dog likes the cow.\nFOL: exists x. (Eat(x, cow) & Need(x, dog) -> Like(x, cow))\nTEXT: If someone likes the tiger and the tiger likes the dog then the dog eats the cow.\nFOL: exists x. (Like(x, tiger) & Like(tiger, dog) -> Eat(dog, cow))\nTEXT: The cow does not like the cow.\nFOL: -Like(cow, cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow eats the dog.\nFOL: Cow(cow) & Dog(dog) & Eat(cow, dog)\nTEXT: The cow eats the tiger.\nFOL: Cow(cow) & Tiger(tiger) & Eat(cow, tiger)\nTEXT: The cow is kind.\nFOL: Cow(cow) & Kind(cow)\nTEXT: The cow is red.\nFOL: Cow(cow) & Red(cow)\nTEXT: The cow likes the dog.\nFOL: Cow(cow) & Dog(dog) & Like(cow, dog)\nTEXT: The cow needs the dog.\nFOL: Cow(cow) & Dog(dog) & Need(cow, dog)\nTEXT: The dog likes the tiger.\nFOL: Dog(dog) & Tiger(tiger) & Like(dog, tiger)\nTEXT: The dog needs the cow.\nFOL: Dog(dog) & Cow(cow) & Need(dog, cow)\nTEXT: The dog needs the tiger.\nFOL: Dog(dog) & Tiger(tiger) & Need(dog, tiger)\nTEXT: The tiger eats the cow.\nFOL: Tiger(tiger) & Cow(cow) & Eat(tiger, cow)\nTEXT: The tiger is kind.\nFOL: Tiger(tiger) & Kind(tiger)\nTEXT: The tiger is round.\nFOL: Tiger(tiger) & Round(tiger)\nTEXT: The tiger likes the cow.\nFOL: Tiger(tiger) & Cow(cow) & Like(tiger, cow)\nTEXT: The tiger needs the cow.\nFOL: Tiger(tiger) & Cow(cow) & Need(tiger, cow)\nTEXT: The tiger needs the dog.\nFOL: Tiger(tiger) & Dog(dog) & Need(tiger, dog)\nTEXT: If someone likes the cow then the cow needs the tiger.\nFOL: all x. (Like(x, cow) -> Need(x, tiger))\nTEXT: If someone is kind then they like the dog.\nFOL: all x. (Kind(x) -> Like(x, dog))\nTEXT: If someone is round then they like the dog.\nFOL: all x. (Round(x) -> Like(x, dog))\nTEXT: If the cow is not round then the cow is not rough.\nFOL: -Round(cow) -> -Rough(cow)\nTEXT: If the dog eats the cow and the dog likes the tiger then the tiger is red.\nFOL: (Eat(dog, cow) & Like(dog, tiger)) -> Red(tiger)\nTEXT: If someone likes the cow then they are rough.\nFOL: all x. (Like(x, cow) -> Rough(x))\nTEXT: If someone eats the cow and the cow needs the dog then the dog likes the cow.\nFOL: all x. (Eat(x, cow) & Need(cow, dog) -> Like(x, cow))\nTEXT: If someone likes the tiger and the tiger likes the dog then the dog eats the cow.\nFOL: all x. (Like(x, tiger) & Like(tiger, dog) -> Eat(dog, cow))\nTEXT: The cow does not like the cow.\nFOL: -Like(cow, cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow eats the dog.\nFOL: Cow(cow) & Dog(dog) & Eat(cow, dog)\nTEXT: The cow eats the tiger.\nFOL: Cow(cow) & Tiger(tiger) & Eat(cow, tiger)\nTEXT: The cow is kind.\nFOL: Cow(cow) & Kind(cow)\nTEXT: The cow is red.\nFOL: Cow(cow) & Red(cow)\nTEXT: The cow likes the dog.\nFOL: Cow(cow) & Dog(dog) & Like(cow, dog)\nTEXT: The cow needs the dog.\nFOL: Cow(cow) & Dog(dog) & Need(cow, dog)\nTEXT: The dog likes the tiger.\nFOL: Dog(dog) & Tiger(tiger) & Like(dog, tiger)\nTEXT: The dog needs the cow.\nFOL: Dog(dog) & Cow(cow) & Need(dog, cow)\nTEXT: The dog needs the tiger.\nFOL: Dog(dog) & Tiger(tiger) & Need(dog, tiger)\nTEXT: The tiger eats the cow.\nFOL: Tiger(tiger) & Cow(cow) & Eat(tiger, cow)\nTEXT: The tiger is kind.\nFOL: Tiger(tiger) & Kind(tiger)\nTEXT: The tiger is round.\nFOL: Tiger(tiger) & Round(tiger)\nTEXT: The tiger likes the cow.\nFOL: Tiger(tiger) & Cow(cow) & Like(tiger, cow)\nTEXT: The tiger needs the cow.\nFOL: Tiger(tiger) & Cow(cow) & Need(tiger, cow)\nTEXT: The tiger needs the dog.\nFOL: Tiger(tiger) & Dog(dog) & Need(tiger, dog)\nTEXT: If someone likes the cow then the cow needs the tiger.\nFOL: exists x. (Like(x, cow) -> Need(x, tiger))\nTEXT: If someone is kind then they like the dog.\nFOL: exists x. (Kind(x) -> Like(x, dog))\nTEXT: If someone is round then they like the dog.\nFOL: exists x. (Round(x) -> Like(x, dog))\nTEXT: If the cow is not round then the cow is not rough.\nFOL: -Round(cow) -> -Rough(cow)\nTEXT: If the dog eats the cow and the dog likes the tiger then the tiger is red.\nFOL: (Eat(dog, cow) & Like(dog, tiger)) -> Red(tiger)\nTEXT: If someone likes the cow then they are rough.\nFOL: exists x. (Like(x, cow) -> Rough(x))\nTEXT: If someone eats the cow and the cow needs the dog then the dog likes the cow.\nFOL: exists x. (Eat(x, cow) & Need(cow, dog) -> Like(x, cow))\nTEXT: If someone likes the tiger and the tiger likes the dog then the dog eats the cow.\nFOL: exists x. (Like(x, tiger) & Like(tiger, dog) -> Eat(dog, cow))\nTEXT: The cow does not like the cow.\nFOL: -Like(cow, cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow eats the dog.\nFOL: Cow(cow) & Dog(dog) & Eat(cow, dog)\nTEXT: The cow eats the tiger.\nFOL: Cow(cow) & Tiger(tiger) & Eat(cow, tiger)\nTEXT: The cow is kind.\nFOL: Cow(cow) & Kind(cow)\nTEXT: The cow is red.\nFOL: Cow(cow) & Red(cow)\nTEXT: The cow likes the dog.\nFOL: Cow(cow) & Dog(dog) & Like(cow, dog)\nTEXT: The cow needs the dog.\nFOL: Cow(cow) & Dog(dog) & Need(cow, dog)\nTEXT: The dog likes the tiger.\nFOL: Dog(dog) & Tiger(tiger) & Like(dog, tiger)\nTEXT: The dog needs the cow.\nFOL: Dog(dog) & Cow(cow) & Need(dog, cow)\nTEXT: The dog needs the tiger.\nFOL: Dog(dog) & Tiger(tiger) & Need(dog, tiger)\nTEXT: The tiger eats the cow.\nFOL: Tiger(tiger) & Cow(cow) & Eat(tiger, cow)\nTEXT: The tiger is kind.\nFOL: Tiger(tiger) & Kind(tiger)\nTEXT: The tiger is round.\nFOL: Tiger(tiger) & Round(tiger)\nTEXT: The tiger likes the cow.\nFOL: Tiger(tiger) & Cow(cow) & Like(tiger, cow)\nTEXT: The tiger needs the cow.\nFOL: Tiger(tiger) & Cow(cow) & Need(tiger, cow)\nTEXT: The tiger needs the dog.\nFOL: Tiger(tiger) & Dog(dog) & Need(tiger, dog)\nTEXT: If someone likes the cow then the cow needs the tiger.\nFOL: exists x. (Like(x, cow) -> Need(tiger, cow))\nTEXT: If someone is kind then they like the dog.\nFOL: exists x. (Kind(x) -> Like(x, dog))\nTEXT: If someone is round then they like the dog.\nFOL: exists x. (Round(x) -> Like(x, dog))\nTEXT: If the cow is not round then the cow is not rough.\nFOL: -Round(cow) -> -Rough(cow)\nTEXT: If the dog eats the cow and the dog likes the tiger then the tiger is red.\nFOL: (Eat(dog, cow) & Like(dog, tiger)) -> Red(tiger)\nTEXT: If someone likes the cow then they are rough.\nFOL: exists x. (Like(x, cow) -> Rough(x))\nTEXT: If someone eats the cow and the cow needs the dog then the dog likes the cow.\nFOL: exists x. (Eat(x, cow) & Need(cow, dog) -> Like(dog, cow))\nTEXT: If someone likes the tiger and the tiger likes the dog then the dog eats the cow.\nFOL: exists x. (Like(x, tiger) & Like(tiger, dog) -> Eat(dog, cow))\nTEXT: The cow does not like the cow.\nFOL: -Like(cow, cow)\n</EVALUATE>"
  ]
 },
 {
  "index": 49,
  "responses": [
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x. (KnowsCharlie(x) -> (Rough(x) & Cold(x)))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: (Rough(Charlie) & Cold(Charlie) & Kind(Charlie) & Red(Charlie) & Blue(Charlie) & Young(Charlie))\nTEXT: That guy Eric sure is nice.\nFOL: Nice(Eric)\nTEXT: A bit overweight, Fred is big and round.\nFOL: (Overweight(Fred) & Big(Fred) & Round(Fred))\nTEXT: He's a nice guy who is often cold.\nFOL: Nice(Eric) & Cold(Eric)\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: (Nice(x) & Round(x) & Cold(x) -> Blue(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> LittleGreen(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: Blue(x) & Big(x) & Kind(x) -> Green(x)\nTEXT: People who are feeling blue and green are said to be red.\nFOL: (Blue(x) & Green(x) -> Red(x))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: Nice(x) & Blue(x) & Round(x) -> Kind(x)\nTEXT: Fred is not rough.\nFOL: -Rough(Fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x. (KnowsCharlie(x) -> (Rough(x) & Cold(x)))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: (Rough(Charlie) & Cold(Charlie) & Kind(Charlie) & Red(Charlie) & Blue(Charlie) & Young(Charlie))\nTEXT: That guy Eric sure is nice.\nFOL: Nice(Eric)\nTEXT: A bit overweight, Fred is big and round.\nFOL: Overweight(Fred) & Big(Fred) & Round(Fred)\nTEXT: He's a nice guy who is often cold.\nFOL: Nice(Eric) & Cold(Eric)\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: (Nice(x) & Round(x) & Cold(x) -> Blue(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> Green(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: (Blue(x) & Big(x) & Kind(x) -> Green(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: (Blue(x) & Green(x) -> Red(x))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: (Nice(x) & Blue(x) & Round(x) -> Kind(x))\nTEXT: Fred is not rough.\nFOL: -Rough(Fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x. (KnowsCharlie(x) -> (Rough(x) & Cold(x)))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: (Rough(Charlie) & Cold(Charlie) & Kind(Charlie) & Red(Charlie) & Blue(Charlie) & Young(Charlie))\nTEXT: That guy Eric sure is nice.\nFOL: Nice(Eric)\nTEXT: A bit overweight, Fred is big and round.\nFOL: (Overweight(Fred) & Big(Fred) & Round(Fred))\nTEXT: He's a nice guy who is often cold.\nFOL: Nice(Eric) & Cold(Eric)\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: (Nice(x) & Round(x) & Cold(x) -> Blue(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> LittleGreen(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: (Blue(x) & Big(x) & Kind(x) -> Green(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: (Blue(x) & Green(x) -> Red(x))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: (Nice(x) & Blue(x) & Round(x) -> Kind(x))\nTEXT: Fred is not rough.\nFOL: -Rough(Fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x. (Knows(x, charlie) -> (Rough(x) & Cold(x)))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: (Rough(charlie) & Cold(charlie) & Red(charlie) & Blue(charlie) & Young(charlie))\nTEXT: That guy Eric sure is nice.\nFOL: Nice(eric)\nTEXT: A bit overweight, Fred is big and round.\nFOL: (Overweight(fred) & Big(fred) & Round(fred))\nTEXT: He's a nice guy who is often cold.\nFOL: Nice(guy) & Cold(guy)\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: (Nice(x) & Round(x) & Cold(x) -> Blue(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> Green(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: (Blue(x) & Big(x) & Kind(x) -> Green(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: (Blue(x) & Green(x) -> Red(x))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: Nice(x) & Blue(x) & Round(x) -> Kind(x)\nTEXT: Fred is not rough.\nFOL: -Rough(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x. (KnowsCharlie(x) -> (Rough(x) & Cold(x)))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: (Rough(Charlie) & Cold(Charlie) & Kind(Charlie) & Red(Charlie) & Blue(Charlie) & Young(Charlie))\nTEXT: That guy Eric sure is nice.\nFOL: Nice(Eric)\nTEXT: A bit overweight, Fred is big and round.\nFOL: (Overweight(Fred) & Big(Fred) & Round(Fred))\nTEXT: He's a nice guy who is often cold.\nFOL: Nice(Eric) & Cold(Eric)\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: (Nice(x) & Round(x) & Cold(x) -> Blue(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> LittleGreen(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: (Blue(x) & Big(x) & Kind(x) -> Green(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: (Blue(x) & Green(x) -> Red(x))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: Nice(x) & Blue(x) & Round(x) -> Kind(x))\nTEXT: Fred is not rough.\nFOL: -Rough(Fred)\n</EVALUATE>"
  ]
 },
 {
  "index": 50,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(anne)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: Harry is blue.\nFOL: Blue(harry)\nTEXT: If Fiona is nice and Fiona is not blue then Fiona is red.\nFOL: (Nice(fiona) & -Blue(fiona) -> Red(fiona))\nTEXT: If Gary is round then Gary is blue.\nFOL: (Round(gary) -> Blue(gary))\nTEXT: Round, blue things are green.\nFOL: (Round(x) & Blue(x) -> Green(x))\nTEXT: White things are big.\nFOL: (White(x) -> Big(x))\nTEXT: If something is green then it is big.\nFOL: (Green(x) -> Big(x))\nTEXT: If something is blue and not red then it is round.\nFOL: (Blue(x) & -Red(x) -> Round(x))\nTEXT: If Anne is red and Anne is big then Anne is white.\nFOL: (Red(anne) & Big(anne) -> White(anne))\nTEXT: If Anne is big then Anne is white.\nFOL: (Big(anne) -> White(anne))\nTEXT: Gary is big.\nFOL: Big(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(Anne)\nTEXT: Fiona is nice.\nFOL: Nice(Fiona)\nTEXT: Gary is round.\nFOL: Round(Gary)\nTEXT: Harry is blue.\nFOL: Blue(Harry)\nTEXT: If Fiona is nice and Fiona is not blue then Fiona is red.\nFOL: (Nice(Fiona) & -Blue(Fiona)) -> Red(Fiona)\nTEXT: If Gary is round then Gary is blue.\nFOL: Round(Gary) -> Blue(Gary)\nTEXT: Round, blue things are green.\nFOL: (Round(x) & Blue(x)) -> Green(x)\nTEXT: White things are big.\nFOL: White(x) -> Big(x)\nTEXT: If something is green then it is big.\nFOL: Green(x) -> Big(x)\nTEXT: If something is blue and not red then it is round.\nFOL: (Blue(x) & -Red(x)) -> Round(x)\nTEXT: If Anne is red and Anne is big then Anne is white.\nFOL: (Red(Anne) & Big(Anne)) -> White(Anne)\nTEXT: If Anne is big then Anne is white.\nFOL: Big(Anne) -> White(Anne)\nTEXT: Gary is big.\nFOL: Big(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(anne)\n\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\n\nTEXT: Gary is round.\nFOL: Round(gary)\n\nTEXT: Harry is blue.\nFOL: Blue(harry)\n\nTEXT: If Fiona is nice and Fiona is not blue then Fiona is red.\nFOL: (Nice(fiona) & -Blue(fiona) -> Red(fiona))\n\nTEXT: If Gary is round then Gary is blue.\nFOL: (Round(gary) -> Blue(gary))\n\nTEXT: Round, blue things are green.\nFOL: (Round(x) & Blue(x) -> Green(x))\n\nTEXT: White things are big.\nFOL: (White(x) -> Big(x))\n\nTEXT: If something is green then it is big.\nFOL: (Green(x) -> Big(x))\n\nTEXT: If something is blue and not red then it is round.\nFOL: (Blue(x) & -Red(x) -> Round(x))\n\nTEXT: If Anne is red and Anne is big then Anne is white.\nFOL: (Red(anne) & Big(anne) -> White(anne))\n\nTEXT: If Anne is big then Anne is white.\nFOL: (Big(anne) -> White(anne))\n\nTEXT: Gary is big.\nFOL: Big(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(Anne)\n\nTEXT: Fiona is nice.\nFOL: Nice(Fiona)\n\nTEXT: Gary is round.\nFOL: Round(Gary)\n\nTEXT: Harry is blue.\nFOL: Blue(Harry)\n\nTEXT: If Fiona is nice and Fiona is not blue then Fiona is red.\nFOL: (Nice(Fiona) & -Blue(Fiona)) -> Red(Fiona)\n\nTEXT: If Gary is round then Gary is blue.\nFOL: Round(Gary) -> Blue(Gary)\n\nTEXT: Round, blue things are green.\nFOL: (Round(x) & Blue(x)) -> Green(x)\n\nTEXT: White things are big.\nFOL: White(x) -> Big(x)\n\nTEXT: If something is green then it is big.\nFOL: Green(x) -> Big(x)\n\nTEXT: If something is blue and not red then it is round.\nFOL: (Blue(x) & -Red(x)) -> Round(x)\n\nTEXT: If Anne is red and Anne is big then Anne is white.\nFOL: (Red(Anne) & Big(Anne)) -> White(Anne)\n\nTEXT: If Anne is big then Anne is white.\nFOL: Big(Anne) -> White(Anne)\n\nTEXT: Gary is big.\nFOL: Big(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is blue.\nFOL: Blue(anne)\n\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\n\nTEXT: Gary is round.\nFOL: Round(gary)\n\nTEXT: Harry is blue.\nFOL: Blue(harry)\n\nTEXT: If Fiona is nice and Fiona is not blue then Fiona is red.\nFOL: (Nice(fiona) & -Blue(fiona) -> Red(fiona))\n\nTEXT: If Gary is round then Gary is blue.\nFOL: (Round(gary) -> Blue(gary))\n\nTEXT: Round, blue things are green.\nFOL: (Round(x) & Blue(x) -> Green(x))\n\nTEXT: White things are big.\nFOL: (White(x) -> Big(x))\n\nTEXT: If something is green then it is big.\nFOL: (Green(x) -> Big(x))\n\nTEXT: If something is blue and not red then it is round.\nFOL: (Blue(x) & -Red(x) -> Round(x))\n\nTEXT: If Anne is red and Anne is big then Anne is white.\nFOL: (Red(anne) & Big(anne) -> White(anne))\n\nTEXT: If Anne is big then Anne is white.\nFOL: (Big(anne) -> White(anne))\n\nTEXT: Gary is big.\nFOL: Big(gary)\n\n</EVALUATE>"
  ]
 },
 {
  "index": 51,
  "responses": [
   "<EVALUATE>\nTEXT: The cow is round.\nFOL: Cow(cow) -> Round(cow)\nTEXT: The lion visits the tiger.\nFOL: Lion(lion) & Tiger(tiger) -> Visit(lion, tiger)\nTEXT: The squirrel needs the tiger.\nFOL: Squirrel(squirrel) & Tiger(tiger) -> Need(squirrel, tiger)\nTEXT: The tiger sees the cow.\nFOL: Tiger(tiger) & Cow(cow) -> See(tiger, cow)\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Need(x, lion) -> -Red(lion))\nTEXT: The cow is round.\nFOL: Cow(cow) -> Round(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is round.\nFOL: Cow(cow) -> Round(cow)\nTEXT: The lion visits the tiger.\nFOL: Lion(lion) & Tiger(tiger) -> Visit(lion, tiger)\nTEXT: The squirrel needs the tiger.\nFOL: Squirrel(squirrel) & Tiger(tiger) -> Needs(squirrel, tiger)\nTEXT: The tiger sees the cow.\nFOL: Tiger(tiger) & Cow(cow) -> Sees(tiger, cow)\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Needs(x, lion) -> -Red(lion))\nTEXT: The cow is round.\nFOL: Cow(cow) -> Round(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is round.\nFOL: Cow(cow) & Round(cow)\nTEXT: The lion visits the tiger.\nFOL: Lion(lion) & Tiger(tiger) & Visits(lion, tiger)\nTEXT: The squirrel needs the tiger.\nFOL: Squirrel(squirrel) & Needs(squirrel, tiger)\nTEXT: The tiger sees the cow.\nFOL: Tiger(tiger) & Cow(cow) & Sees(tiger, cow)\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Needs(x, lion) -> -Red(lion))\nTEXT: The cow is round.\nFOL: Cow(cow) & Round(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is round.\nFOL: Cow(cow) -> Round(cow)\nTEXT: The lion visits the tiger.\nFOL: Lion(lion) -> VisitsTiger(lion, tiger)\nTEXT: The squirrel needs the tiger.\nFOL: Squirrel(squirrel) -> NeedsTiger(squirrel, tiger)\nTEXT: The tiger sees the cow.\nFOL: Tiger(tiger) -> SeesCow(tiger, cow)\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (NeedsLion(x, lion) -> -Red(lion))\nTEXT: The cow is round.\nFOL: Cow(cow) -> Round(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is round.\nFOL: Cow(cow) -> Round(cow)\n\nTEXT: The lion visits the tiger.\nFOL: Lion(lion) & Tiger(tiger) -> Visit(lion, tiger)\n\nTEXT: The squirrel needs the tiger.\nFOL: Squirrel(squirrel) & Tiger(tiger) -> Needs(squirrel, tiger)\n\nTEXT: The tiger sees the cow.\nFOL: Tiger(tiger) & Cow(cow) -> Sees(tiger, cow)\n\nTEXT: If something needs the lion then the lion is not red.\nFOL: all x. (Needs(x, lion) -> -Red(lion))\n\nTEXT: The cow is round.\nFOL: Cow(cow) -> Round(cow)\n</EVALUATE>"
  ]
 },
 {
  "index": 52,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: Nice(Anne)\nTEXT: Bob is not cold.\nFOL: -Cold(Bob)\nTEXT: Charlie is green.\nFOL: Green(Charlie)\nTEXT: Harry is green.\nFOL: Green(Harry)\nTEXT: All red people are not cold.\nFOL: all x. (Red(x) -> -Cold(x))\nTEXT: If someone is nice and green then they are kind.\nFOL: all x. (Nice(x) & Green(x) -> Kind(x))\nTEXT: If Anne is young then Anne is red.\nFOL: Young(Anne) -> Red(Anne)\nTEXT: If Harry is red then Harry is not green.\nFOL: Red(Harry) -> -Green(Harry)\nTEXT: If someone is nice then they are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: Cold, red people are rough.\nFOL: Red(x) & Cold(x) -> Rough(x)\nTEXT: If Charlie is young then Charlie is not nice.\nFOL: Young(Charlie) -> -Nice(Charlie)\nTEXT: All nice people are not green.\nFOL: all x. (Nice(x) -> -Green(x))\nTEXT: Bob is green.\nFOL: Green(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Bob is not cold.\nFOL: -Cold(bob)\nTEXT: Charlie is green.\nFOL: Green(charlie)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: All red people are not cold.\nFOL: all x. (Red(x) -> -Cold(x))\nTEXT: If someone is nice and green then they are kind.\nFOL: all x. (Nice(x) & Green(x) -> Kind(x))\nTEXT: If Anne is young then Anne is red.\nFOL: Young(anne) -> Red(anne)\nTEXT: If Harry is red then Harry is not green.\nFOL: Red(harry) -> -Green(harry)\nTEXT: If someone is nice then they are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: Cold, red people are rough.\nFOL: Red(x) & Cold(x) -> Rough(x)\nTEXT: If Charlie is young then Charlie is not nice.\nFOL: Young(charlie) -> -Nice(charlie)\nTEXT: All nice people are not green.\nFOL: all x. (Nice(x) -> -Green(x))\nTEXT: Bob is green.\nFOL: Green(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: Nice(anne)\n\nTEXT: Bob is not cold.\nFOL: -Cold(bob)\n\nTEXT: Charlie is green.\nFOL: Green(charlie)\n\nTEXT: Harry is green.\nFOL: Green(harry)\n\nTEXT: All red people are not cold.\nFOL: all x. (Red(x) -> -Cold(x))\n\nTEXT: If someone is nice and green then they are kind.\nFOL: all x. (Nice(x) & Green(x) -> Kind(x))\n\nTEXT: If Anne is young then Anne is red.\nFOL: Young(anne) -> Red(anne)\n\nTEXT: If Harry is red then Harry is not green.\nFOL: Red(harry) -> -Green(harry)\n\nTEXT: If someone is nice then they are young.\nFOL: all x. (Nice(x) -> Young(x))\n\nTEXT: Cold, red people are rough.\nFOL: Red(x) & Cold(x) -> Rough(x)\n\nTEXT: If Charlie is young then Charlie is not nice.\nFOL: Young(charlie) -> -Nice(charlie)\n\nTEXT: All nice people are not green.\nFOL: all x. (Nice(x) -> -Green(x))\n\nTEXT: Bob is green.\nFOL: Green(bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: Nice(Anne)\n\nTEXT: Bob is not cold.\nFOL: -Cold(Bob)\n\nTEXT: Charlie is green.\nFOL: Green(Charlie)\n\nTEXT: Harry is green.\nFOL: Green(Harry)\n\nTEXT: All red people are not cold.\nFOL: all x. (Red(x) -> -Cold(x))\n\nTEXT: If someone is nice and green then they are kind.\nFOL: all x. (Nice(x) & Green(x) -> Kind(x))\n\nTEXT: If Anne is young then Anne is red.\nFOL: Young(Anne) -> Red(Anne)\n\nTEXT: If Harry is red then Harry is not green.\nFOL: Red(Harry) -> -Green(Harry)\n\nTEXT: If someone is nice then they are young.\nFOL: all x. (Nice(x) -> Young(x))\n\nTEXT: Cold, red people are rough.\nFOL: Red(x) & Cold(x) -> Rough(x)\n\nTEXT: If Charlie is young then Charlie is not nice.\nFOL: Young(Charlie) -> -Nice(Charlie)\n\nTEXT: All nice people are not green.\nFOL: all x. (Nice(x) -> -Green(x))\n\nTEXT: Bob is green.\nFOL: Green(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: Nice(Anne)\n\nTEXT: Bob is not cold.\nFOL: -Cold(Bob)\n\nTEXT: Charlie is green.\nFOL: Green(Charlie)\n\nTEXT: Harry is green.\nFOL: Green(Harry)\n\nTEXT: All red people are not cold.\nFOL: all x. (Red(x) -> -Cold(x))\n\nTEXT: If someone is nice and green then they are kind.\nFOL: all x. (Nice(x) & Green(x) -> Kind(x))\n\nTEXT: If Anne is young then Anne is red.\nFOL: Young(Anne) -> Red(Anne)\n\nTEXT: If Harry is red then Harry is not green.\nFOL: Red(Harry) -> -Green(Harry)\n\nTEXT: If someone is nice then they are young.\nFOL: all x. (Nice(x) -> Young(x))\n\nTEXT: Cold, red people are rough.\nFOL: Red(x) & Cold(x) -> Rough(x)\n\nTEXT: If Charlie is young then Charlie is not nice.\nFOL: Young(Charlie) -> -Nice(Charlie)\n\nTEXT: All nice people are not green.\nFOL: all x. (Nice(x) -> -Green(x))\n\nTEXT: Bob is green.\nFOL: Green(Bob)\n\n</EVALUATE>"
  ]
 },
 {
  "index": 53,
  "responses": [
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(Alan)\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: -Big(Dave) & Round(Dave) & Kind(Dave)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(Eric)\nTEXT: Gary is a kind person and he is also often cold.\nFOL: Kind(Gary) & Cold(Gary)\nTEXT: Red people are almost always rough.\nFOL: Red(x) -> Rough(x)\nTEXT: A young, green person in my experience is round shaped and nice.\nFOL: Young(x) & Green(x) & Round(x) & Nice(x)\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: Rough(x) & Cold(x) & Nice(x)\nTEXT: Someone who is young at heart and age are very round.\nFOL: YoungAtHeart(x) & Age(x) -> Round(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: Cold(x) & Round(x) -> Red(x)\nTEXT: Dave is not red.\nFOL: -Red(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(Alan)\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: -Round(Dave) & Big(Dave) & Kind(Dave)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(Eric)\nTEXT: Gary is a kind person and he is also often cold.\nFOL: Kind(Gary) & Cold(Gary)\nTEXT: Red people are almost always rough.\nFOL: Red(x) -> Rough(x)\nTEXT: A young, green person in my experience is round shaped and nice.\nFOL: Young(x) & Green(x) & Round(x) & Nice(x)\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: Rough(x) & Cold(x) -> Nice(x)\nTEXT: Someone who is young at heart and age are very round.\nFOL: YoungAtHeart(x) & Age(x) -> Round(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: Cold(x) & Round(x) -> Red(x)\nTEXT: Dave is not red.\nFOL: -Red(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(Alan)\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: -Round(Dave) & Big(Dave) & Kind(Dave)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(Eric)\nTEXT: Gary is a kind person and he is also often cold.\nFOL: Kind(Gary) & Cold(Gary)\nTEXT: Red people are almost always rough.\nFOL: Red(x) -> Rough(x)\nTEXT: A young, green person in my experience is round shaped and nice.\nFOL: Young(x) & Green(x) -> (Round(x) & Nice(x))\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: Rough(x) & Cold(x) -> Nice(x)\nTEXT: Someone who is young at heart and age are very round.\nFOL: YoungAtHeart(x) & Age(x) -> Round(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: Cold(x) & Round(x) -> Red(x)\nTEXT: Dave is not red.\nFOL: -Red(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(Alan)\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: -Round(Dave) & Big(Dave) & Kind(Dave)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(Eric)\nTEXT: Gary is a kind person and he is also often cold.\nFOL: Kind(Gary) & Cold(Gary)\nTEXT: Red people are almost always rough.\nFOL: Red(x) -> Rough(x)\nTEXT: A young, green person in my experience is round shaped and nice.\nFOL: Young(x) & Green(x) & Round(x) & Nice(x)\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: Rough(x) & Cold(x) & Nice(x)\nTEXT: Someone who is young at heart and age are very round.\nFOL: YoungAtHeart(x) & Age(x) -> Round(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: Cold(x) & Round(x) -> Red(x)\nTEXT: Dave is not red.\nFOL: -Red(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(Alan)\nTEXT: Even though Dave is round and big, he is very kind.\nFOL: -Big(Dave) & Round(Dave) & Kind(Dave)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(Eric)\nTEXT: Gary is a kind person and he is also often cold.\nFOL: Kind(Gary) & Cold(Gary)\nTEXT: Red people are almost always rough.\nFOL: Red(x) -> Rough(x)\nTEXT: A young, green person in my experience is round shaped and nice.\nFOL: Young(x) & Green(x) & Round(x) & Nice(x)\nTEXT: Interesting that all round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: Rough(x) & Cold(x) & Nice(x)\nTEXT: Someone who is young at heart and age are very round.\nFOL: YoungAtHeart(x) & Age(x) & Round(x)\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: Cold(x) & Round(x) -> Red(x)\nTEXT: Dave is not red.\nFOL: -Red(Dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 54,
  "responses": [
   "<EVALUATE>\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: Kind(Charlie) & Young(Charlie) & Blue(Charlie)\nTEXT: Eric is green and cold too.\nFOL: Green(Eric) & Cold(Eric)\nTEXT: Fred can be rough and cold, but he is also green, an avid gardener.\nFOL: Rough(Fred) & Cold(Fred) & Green(Fred) & Gardener(Fred)\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: Young(Harry) & Cold(Harry) & Named(Harry)\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: Rough(x) & Tumble(x) & Gentle(x) & Kind(x) & Blue(x)\nTEXT: Kind, round people that are really feeling blue are going to always be big.\nFOL: Kind(x) & Round(x) & Blue(x) & Big(x)\nTEXT: Someone with rough and green feet is invariably kind.\nFOL: Rough(x) & Green(x) & Feet(x) & Kind(x)\nTEXT: Blue eyed people, green with sickness and rough around the edges quickly turn red and blush when stepping ashore.\nFOL: BlueEyed(x) & Green(x) & Sickness(x) & Rough(x) & Red(x) & Blush(x)\nTEXT: Every person I met that was cold and round was also red.\nFOL: Person(x) & Cold(x) & Round(x) & Red(x)\nTEXT: Why is it that every round person that is blue is so young.\nFOL: Round(x) & Blue(x) & Young(x)\nTEXT: A round shaped kind person who is colored green will be cold natured.\nFOL: Round(x) & Kind(x) & Green(x) & Cold(x)\nTEXT: Eric is big.\nFOL: Eric & Big(Eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: Kind(Charlie) & Young(Charlie) & Blue(Charlie)\nTEXT: Eric is green and cold too.\nFOL: Green(Eric) & Cold(Eric)\nTEXT: Fred can be rough and cold, but he is also green, an avid gardener.\nFOL: Rough(Fred) & Cold(Fred) & Green(Fred) & Gardener(Fred)\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: Young(Harry) & Cold(Harry) & Named(Harry)\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: Rough(x) & Tumble(x) & Gentle(x) & Kind(x) & Blue(x)\nTEXT: Kind, round people that are really feeling blue are going to always be big.\nFOL: Kind(x) & Round(x) & Blue(x) & Big(x)\nTEXT: Someone with rough and green feet is invariably kind.\nFOL: Rough(x) & Green(x) & Feet(x) & Kind(x)\nTEXT: Blue eyed people, green with sickness and rough around the edges quickly turn red and blush when stepping ashore.\nFOL: BlueEyed(x) & Green(x) & Sickness(x) & Rough(x) & Red(x) & Blush(x)\nTEXT: Every person I met that was cold and round was also red.\nFOL: Person(x) & Cold(x) & Round(x) & Red(x)\nTEXT: Why is it that every round person that is blue is so young.\nFOL: Round(x) & Blue(x) & Young(x)\nTEXT: A round shaped kind person who is colored green will be cold natured.\nFOL: Round(x) & Kind(x) & Green(x) & Cold(x)\nTEXT: Eric is big.\nFOL: Big(Eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: Kind(Charlie) & Young(Charlie) & Blue(Charlie)\nTEXT: Eric is green and cold too.\nFOL: Green(Eric) & Cold(Eric)\nTEXT: Fred can be rough and cold, but he is also green, an avid gardener.\nFOL: Rough(Fred) & Cold(Fred) & Green(Fred) & Gardener(Fred)\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: Young(Harry) & Cold(Harry) & Named(Harry)\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: Rough(x) & Tumble(x) & Gentle(x) & Kind(x) & Blue(x)\nTEXT: Kind, round people that are really feeling blue are going to always be big.\nFOL: Kind(x) & Round(x) & Blue(x) & Big(x)\nTEXT: Someone with rough and green feet is invariably kind.\nFOL: Rough(x) & Green(x) & Feet(x) & Kind(x)\nTEXT: Blue eyed people, green with sickness and rough around the edges quickly turn red and blush when stepping ashore.\nFOL: Blue(x) & Green(x) & Sickness(x) & Rough(x) & Red(x) & Blush(x)\nTEXT: Every person I met that was cold and round was also red.\nFOL: Person(x) & Cold(x) & Round(x) & Red(x)\nTEXT: Why is it that every round person that is blue is so young.\nFOL: Round(x) & Blue(x) & Young(x)\nTEXT: A round shaped kind person who is colored green will be cold natured.\nFOL: Round(x) & Kind(x) & Green(x) & Cold(x)\nTEXT: Eric is big.\nFOL: Eric & Big(Eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: Kind(Charlie) & Young(Charlie) & Blue(Charlie)\nTEXT: Eric is green and cold too.\nFOL: Green(Eric) & Cold(Eric)\nTEXT: Fred can be rough and cold, but he is also green, an avid gardener.\nFOL: Rough(Fred) & Cold(Fred) & Green(Fred) & Gardener(Fred)\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: Young(Harry) & Cold(Harry) & Named(Harry)\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: Rough(x) & Tumble(x) & Gentle(x) & Kind(x) & Blue(x)\nTEXT: Kind, round people that are really feeling blue are going to always be big.\nFOL: Kind(x) & Round(x) & Blue(x) & Big(x)\nTEXT: Someone with rough and green feet is invariably kind.\nFOL: Rough(x) & Green(x) & Feet(x) & Kind(x)\nTEXT: Blue eyed people, green with sickness and rough around the edges quickly turn red and blush when stepping ashore.\nFOL: Blue(x) & Green(x) & Sickness(x) & Rough(x) & Red(x) & Blush(x)\nTEXT: Every person I met that was cold and round was also red.\nFOL: Person(x) & Cold(x) & Round(x) & Red(x)\nTEXT: Why is it that every round person that is blue is so young.\nFOL: Round(x) & Blue(x) & Young(x)\nTEXT: A round shaped kind person who is colored green will be cold natured.\nFOL: Round(x) & Kind(x) & Green(x) & Cold(x)\nTEXT: Eric is big.\nFOL: Big(Eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie, a kind young person is always feeling blue.\nFOL: Kind(Charlie) & Young(Charlie) & Blue(Charlie)\nTEXT: Eric is green and cold too.\nFOL: Green(Eric) & Cold(Eric)\nTEXT: Fred can be rough and cold, but he is also green, an avid gardener.\nFOL: Rough(Fred) & Cold(Fred) & Green(Fred) & Gardener(Fred)\nTEXT: The young person who is always feeling cold is named Harry.\nFOL: Young(Harry) & Cold(Harry) & Named(Harry)\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: Rough(x) & Tumble(x) & Gentle(x) & Kind(x) & Blue(x)\nTEXT: Kind, round people that are really feeling blue are going to always be big.\nFOL: Kind(x) & Round(x) & Blue(x) & Big(x)\nTEXT: Someone with rough and green feet is invariably kind.\nFOL: Rough(x) & Green(x) & Feet(x) & Kind(x)\nTEXT: Blue eyed people, green with sickness and rough around the edges quickly turn red and blush when stepping ashore.\nFOL: BlueEyed(x) & Green(x) & Sickness(x) & Rough(x) & Red(x) & Blush(x)\nTEXT: Every person I met that was cold and round was also red.\nFOL: Person(x) & Cold(x) & Round(x) & Red(x)\nTEXT: Why is it that every round person that is blue is so young.\nFOL: Round(x) & Blue(x) & Young(x)\nTEXT: A round shaped kind person who is colored green will be cold natured.\nFOL: Round(x) & Shaped(x) & Kind(x) & Green(x) & Cold(x)\nTEXT: Eric is big.\nFOL: Eric & Big(Eric)\n</EVALUATE>"
  ]
 },
 {
  "index": 55,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: Bob(green) & Bob(cold)\n\nTEXT: Eric might be rough and red but he's actually very kind.\nFOL: Eric(-Rough) & Eric(-Red) & Eric(Kind)\n\nTEXT: Fred is green and cold too.\nFOL: Fred(green) & Fred(cold)\n\nTEXT: Harry can be rough and cold, but he is also green, an avid gardener.\nFOL: Harry(Rough) & Harry(Cold) & Harry(Green) & Harry(Gardener)\n\nTEXT: A person who is kind, cold, and rough is big.\nFOL: Kind(x) & Cold(x) & Rough(x) -> Big(x)\n\nTEXT: Every single big person is a little green in some areas.\nFOL: Big(x) -> Green(x)\n\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: Rough(x) & Kind(x) -> Cold(x)\n\nTEXT: Big, young people with green color are rather rough.\nFOL: Big(x) & Young(x) & Green(x) -> Rough(x)\n\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: Green(x) & Naive(x) -> (Red(x) & Rough(x))\n\nTEXT: It is a safe guess then that they are also round.\nFOL: Round(x)\n\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: Nice(x) & Red(x) & Rough(x) -> Green(x)\n\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: Green(x) & Nice(x) & Rough(x) -> Round(x)\n\nTEXT: Fred is not round.\nFOL: -Round(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: Bob(green) & Bob(cold)\n\nTEXT: Eric might be rough and red but he's actually very kind.\nFOL: Eric(-Rough) & Eric(-Red) & Eric(Kind)\n\nTEXT: Fred is green and cold too.\nFOL: Fred(green) & Fred(cold)\n\nTEXT: Harry can be rough and cold, but he is also green, an avid gardener.\nFOL: Harry(Rough) & Harry(Cold) & Harry(Green) & Harry(Gardener)\n\nTEXT: A person who is kind, cold, and rough is big.\nFOL: Kind(x) & Cold(x) & Rough(x) -> Big(x)\n\nTEXT: Every single big person is a little green in some areas.\nFOL: Big(x) -> Green(x)\n\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: Rough(x) & Kind(x) -> Cold(x)\n\nTEXT: Big, young people with green color are rather rough.\nFOL: Big(x) & Young(x) & Green(x) -> Rough(x)\n\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: Green(x) & Naive(x) -> (Red(x) & Rough(x))\n\nTEXT: It is a safe guess then that they are also round.\nFOL: (Green(x) & Naive(x)) -> Round(x)\n\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: Nice(x) & Red(x) & Rough(x) -> Green(x)\n\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: Green(x) & Nice(x) & Rough(x) -> Round(x)\n\nTEXT: Fred is not round.\nFOL: -Round(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: Bob(green) & Bob(cold)\n\nTEXT: Eric might be rough and red but he's actually very kind.\nFOL: Eric(-Rough) & Eric(-Red) & Eric(Kind)\n\nTEXT: Fred is green and cold too.\nFOL: Fred(green) & Fred(cold)\n\nTEXT: Harry can be rough and cold, but he is also green, an avid gardener.\nFOL: Harry(Rough) & Harry(Cold) & Harry(Green) & Harry(Gardener)\n\nTEXT: A person who is kind, cold, and rough is big.\nFOL: Kind(x) & Cold(x) & Rough(x) -> Big(x)\n\nTEXT: Every single big person is a little green in some areas.\nFOL: Big(x) -> Green(x)\n\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: Rough(x) & Kind(x) -> Cold(x)\n\nTEXT: Big, young people with green color are rather rough.\nFOL: Big(x) & Young(x) & Green(x) -> Rough(x)\n\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: Green(x) & Naive(x) -> (Red(x) & Rough(x))\n\nTEXT: It is a safe guess then that they are also round.\nFOL: Round(x)\n\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: Nice(x) & Red(x) & Rough(x) -> Green(x)\n\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: Green(x) & Nice(x) & Rough(x) -> Round(x)\n\nTEXT: Fred is not round.\nFOL: -Round(Fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: Bob(green) & Bob(cold)\n\nTEXT: Eric might be rough and red but he's actually very kind.\nFOL: Eric(-Rough) & Eric(-Red) & Eric(Kind)\n\nTEXT: Fred is green and cold too.\nFOL: Fred(green) & Fred(cold)\n\nTEXT: Harry can be rough and cold, but he is also green, an avid gardener.\nFOL: Harry(Rough) & Harry(Cold) & Harry(Green) & Harry(Gardener)\n\nTEXT: A person who is kind, cold, and rough is big.\nFOL: Kind(x) & Cold(x) & Rough(x) -> Big(x)\n\nTEXT: Every single big person is a little green in some areas.\nFOL: Big(x) -> Green(x)\n\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: Rough(x) & Kind(x) -> Cold(x)\n\nTEXT: Big, young people with green color are rather rough.\nFOL: Big(x) & Young(x) & Green(x) -> Rough(x)\n\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: Green(x) & Naive(x) -> (Red(x) & Rough(x))\n\nTEXT: It is a safe guess then that they are also round.\nFOL: (Green(x) & Naive(x)) -> Round(x)\n\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: Nice(x) & Red(x) & Rough(x) -> Green(x)\n\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: Green(x) & Nice(x) & Rough(x) -> Round(x)\n\nTEXT: Fred is not round.\nFOL: -Round(Fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: Bob(green) & Bob(cold)\n\nTEXT: Eric might be rough and red but he's actually very kind.\nFOL: Eric(-Rough) & Eric(-Red) & Eric(Kind)\n\nTEXT: Fred is green and cold too.\nFOL: Fred(green) & Fred(cold)\n\nTEXT: Harry can be rough and cold, but he is also green, an avid gardener.\nFOL: Harry(Rough) & Harry(Cold) & Harry(Green) & Harry(Gardener)\n\nTEXT: A person who is kind, cold, and rough is big.\nFOL: Kind(x) & Cold(x) & Rough(x) -> Big(x)\n\nTEXT: Every single big person is a little green in some areas.\nFOL: Big(x) -> Green(x)\n\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: Rough(x) & Kind(x) -> Cold(x)\n\nTEXT: Big, young people with green color are rather rough.\nFOL: Big(x) & Young(x) & Green(x) -> Rough(x)\n\nTEXT: If someone is green and naive they may also have red, rough skin.\nFOL: Green(x) & Naive(x) -> (Red(x) & Rough(x))\n\nTEXT: It is a safe guess then that they are also round.\nFOL: (Green(x) & Naive(x) & Red(x) & Rough(x)) -> Round(x)\n\nTEXT: Nice people with red and rough skin are green with envy.\nFOL: Nice(x) & Red(x) & Rough(x) -> Green(x)\n\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: Green(x) & Nice(x) & Rough(x) -> Round(x)\n\nTEXT: Fred is not round.\nFOL: -Round(fred)\n</EVALUATE>"
  ]
 },
 {
  "index": 56,
  "responses": [
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(Alan)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(Eric)\nTEXT: Fred is a big guy who is colored red from a sunburn.\nFOL: Big(Fred) & Red(Fred) & Sunburn(Fred)\nTEXT: He also has a cold.\nFOL: Cold(He)\nTEXT: Gary is young, round and kind with green ideas and wears blue clothes.\nFOL: Young(Gary) & Round(Gary) & Kind(Gary) & Green(Gary) & Blue(Gary)\nTEXT: Kind people that are red and round are usually big.\nFOL: all x. (Kind(x) & Red(x) & Round(x) -> Big(x))\nTEXT: Nice round big people are kind to others.\nFOL: all x. (Nice(x) & Round(x) & Big(x) -> Kind(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: When someone is green and round, they can be rough but kind.\nFOL: all x. ((Green(x) & Round(x)) -> (Rough(x) | Kind(x)))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) -> Round(x))\nTEXT: Young and red people look round.\nFOL: all x. (Young(x) & Red(x) -> Round(x))\nTEXT: Alan is not green.\nFOL: -Green(Alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(Alan)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(Eric)\nTEXT: Fred is a big guy who is colored red from a sunburn.\nFOL: Big(Fred) & Red(Fred) & Sunburn(Fred)\nTEXT: He also has a cold.\nFOL: Cold(he)\nTEXT: Gary is young, round and kind with green ideas and wears blue clothes.\nFOL: Young(Gary) & Round(Gary) & Kind(Gary) & Green(Gary) & Blue(Gary)\nTEXT: Kind people that are red and round are usually big.\nFOL: all x. (Kind(x) & Red(x) & Round(x) -> Big(x))\nTEXT: Nice round big people are kind to others.\nFOL: all x. (Nice(x) & Round(x) & Big(x) -> Kind(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: When someone is green and round, they can be rough but kind.\nFOL: all x. ((Green(x) & Round(x)) -> (Rough(x) | Kind(x)))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) -> Round(x))\nTEXT: Young and red people look round.\nFOL: all x. (Young(x) & Red(x) -> Round(x))\nTEXT: Alan is not green.\nFOL: -Green(Alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(Alan)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(Eric)\nTEXT: Fred is a big guy who is colored red from a sunburn.\nFOL: Big(Fred) & Red(Fred) & Sunburn(Fred)\nTEXT: He also has a cold.\nFOL: Cold(He)\nTEXT: Gary is young, round and kind with green ideas and wears blue clothes.\nFOL: Young(Gary) & Round(Gary) & Kind(Gary) & Green(Gary) & Blue(Gary)\nTEXT: Kind people that are red and round are usually big.\nFOL: all x. (Kind(x) & Red(x) & Round(x) -> Big(x))\nTEXT: Nice round big people are kind to others.\nFOL: all x. (Nice(x) & Round(x) & Big(x) -> KindToOthers(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: When someone is green and round, they can be rough but kind.\nFOL: all x. ((Green(x) & Round(x)) -> (Rough(x) | Kind(x)))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) -> Round(x))\nTEXT: Young and red people look round.\nFOL: all x. (Young(x) & Red(x) -> Round(x))\nTEXT: Alan is not green.\nFOL: -Green(Alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(Alan)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(Eric)\nTEXT: Fred is a big guy who is colored red from a sunburn.\nFOL: Big(Fred) & Red(Fred) & Sunburn(Fred)\nTEXT: He also has a cold.\nFOL: Cold(He)\nTEXT: Gary is young, round and kind with green ideas and wears blue clothes.\nFOL: Young(Gary) & Round(Gary) & Kind(Gary) & Green(Gary) & Blue(Gary)\nTEXT: Kind people that are red and round are usually big.\nFOL: all x. (Kind(x) & Red(x) & Round(x) -> Big(x))\nTEXT: Nice round big people are kind to others.\nFOL: all x. (Nice(x) & Round(x) & Big(x) -> KindToOthers(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (Cold(x) -> Nice(x))\nTEXT: When someone is green and round, they can be rough but kind.\nFOL: all x. ((Green(x) & Round(x)) -> (Rough(x) & Kind(x)))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) -> Round(x))\nTEXT: Young and red people look round.\nFOL: all x. ((Young(x) & Red(x)) -> Round(x))\nTEXT: Alan is not green.\nFOL: -Green(Alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(Alan)\nTEXT: That guy Eric sure is nice.\nFOL: Nice(Eric)\nTEXT: Fred is a big guy who is colored red from a sunburn.\nFOL: Big(Fred) & Red(Fred) & Sunburn(Fred)\nTEXT: He also has a cold.\nFOL: Cold(He)\nTEXT: Gary is young, round and kind with green ideas and wears blue clothes.\nFOL: Young(Gary) & Round(Gary) & Kind(Gary) & Green(Gary) & Blue(Gary)\nTEXT: Kind people that are red and round are usually big.\nFOL: all x. (Kind(x) & Red(x) & Round(x) -> Big(x))\nTEXT: Nice round big people are kind to others.\nFOL: all x. (Nice(x) & Round(x) & Big(x) -> KindToOthers(x))\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\nTEXT: Anyone feeling cold is bound to act nice.\nFOL: all x. (Cold(x) -> ActNice(x))\nTEXT: When someone is green and round, they can be rough but kind.\nFOL: all x. ((Green(x) & Round(x)) -> (Rough(x) | Kind(x)))\nTEXT: A nice person is inevitably round as well.\nFOL: all x. (Nice(x) -> Round(x))\nTEXT: Young and red people look round.\nFOL: all x. (Young(x) & Red(x) -> Round(x))\nTEXT: Alan is not green.\nFOL: -Green(Alan)\n</EVALUATE>"
  ]
 },
 {
  "index": 57,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: BaldEagle(chases(rabbit))\nTEXT: The bald eagle needs the cat.\nFOL: BaldEagle(needs(cat))\nTEXT: The bald eagle needs the rabbit.\nFOL: BaldEagle(needs(rabbit))\nTEXT: The bald eagle visits the cat.\nFOL: BaldEagle(visits(cat))\nTEXT: The cat is big.\nFOL: cat(isBig)\nTEXT: The cat is kind.\nFOL: cat(isKind)\nTEXT: The cat needs the bald eagle.\nFOL: cat(needs(BaldEagle))\nTEXT: The rabbit is big.\nFOL: rabbit(isBig)\nTEXT: The rabbit is cold.\nFOL: rabbit(isCold)\nTEXT: The rabbit needs the cat.\nFOL: rabbit(needs(cat))\nTEXT: The rabbit visits the bald eagle.\nFOL: rabbit(visits(BaldEagle))\nTEXT: The rabbit visits the cat.\nFOL: rabbit(visits(cat))\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x. (x(visits(cat)) -> x(needs(cat)))\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (x(visits(rabbit)) -> rabbit(visits(BaldEagle)))\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x. ((x(visits(cat)) & cat(visits(BaldEagle))) -> BaldEagle(visits(rabbit)))\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x. (x(needs(cat)) -> x(needs(rabbit)))\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x. (x(needs(BaldEagle)) -> x(visits(cat)))\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: (rabbit(isKind) & rabbit(needs(cat)) -> rabbit(needs(BaldEagle)))\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (x(isKind) & x(needs(rabbit)) -> rabbit(visits(BaldEagle)))\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x. (x(needs(rabbit)) -> rabbit(visits(rabbit)))\nTEXT: The cat needs the rabbit.\nFOL: cat(needs(rabbit))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: BaldEagle(chases(rabbit))\nTEXT: The bald eagle needs the cat.\nFOL: BaldEagle(needs(cat))\nTEXT: The bald eagle needs the rabbit.\nFOL: BaldEagle(needs(rabbit))\nTEXT: The bald eagle visits the cat.\nFOL: BaldEagle(visits(cat))\nTEXT: The cat is big.\nFOL: cat(isBig)\nTEXT: The cat is kind.\nFOL: cat(isKind)\nTEXT: The cat needs the bald eagle.\nFOL: cat(needs(BaldEagle))\nTEXT: The rabbit is big.\nFOL: rabbit(isBig)\nTEXT: The rabbit is cold.\nFOL: rabbit(isCold)\nTEXT: The rabbit needs the cat.\nFOL: rabbit(needs(cat))\nTEXT: The rabbit visits the bald eagle.\nFOL: rabbit(visits(BaldEagle))\nTEXT: The rabbit visits the cat.\nFOL: rabbit(visits(cat))\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x. (x(visits(cat)) -> x(needs(cat)))\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (x(visits(rabbit)) -> rabbit(visits(BaldEagle)))\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x. ((x(visits(cat)) & cat(visits(BaldEagle))) -> BaldEagle(visits(rabbit)))\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x. (x(needs(cat)) -> x(needs(rabbit)))\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x. (x(needs(BaldEagle)) -> x(visits(cat)))\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: rabbit(isKind) & rabbit(needs(cat)) -> rabbit(needs(BaldEagle)))\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (x(isKind) & x(needs(rabbit)) -> rabbit(visits(BaldEagle)))\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x. (x(needs(rabbit)) -> rabbit(visits(rabbit)))\nTEXT: The cat needs the rabbit.\nFOL: cat(needs(rabbit))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: BaldEagle(chases(rabbit))\nTEXT: The bald eagle needs the cat.\nFOL: BaldEagle(needs(cat))\nTEXT: The bald eagle needs the rabbit.\nFOL: BaldEagle(needs(rabbit))\nTEXT: The bald eagle visits the cat.\nFOL: BaldEagle(visits(cat))\nTEXT: The cat is big.\nFOL: cat(isBig)\nTEXT: The cat is kind.\nFOL: cat(isKind)\nTEXT: The cat needs the bald eagle.\nFOL: cat(needs(BaldEagle))\nTEXT: The rabbit is big.\nFOL: rabbit(isBig)\nTEXT: The rabbit is cold.\nFOL: rabbit(isCold)\nTEXT: The rabbit needs the cat.\nFOL: rabbit(needs(cat))\nTEXT: The rabbit visits the bald eagle.\nFOL: rabbit(visits(BaldEagle))\nTEXT: The rabbit visits the cat.\nFOL: rabbit(visits(cat))\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x. (x(visits(cat)) -> x(needs(cat)))\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (x(visits(rabbit)) -> rabbit(visits(BaldEagle)))\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x. ((x(visits(cat)) & cat(visits(BaldEagle))) -> BaldEagle(visits(rabbit)))\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x. (x(needs(cat)) -> x(needs(rabbit)))\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x. (x(needs(BaldEagle)) -> x(visits(cat)))\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: rabbit(isKind) & rabbit(needs(cat)) & rabbit(needs(BaldEagle))\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (x(isKind) & x(needs(rabbit)) -> rabbit(visits(BaldEagle)))\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x. (x(needs(rabbit)) -> rabbit(visits(rabbit)))\nTEXT: The cat needs the rabbit.\nFOL: cat(needs(rabbit))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: BaldEagle(chases(rabbit))\nTEXT: The bald eagle needs the cat.\nFOL: BaldEagle(needs(cat))\nTEXT: The bald eagle needs the rabbit.\nFOL: BaldEagle(needs(rabbit))\nTEXT: The bald eagle visits the cat.\nFOL: BaldEagle(visits(cat))\nTEXT: The cat is big.\nFOL: cat(isBig)\nTEXT: The cat is kind.\nFOL: cat(isKind)\nTEXT: The cat needs the bald eagle.\nFOL: cat(needs(BaldEagle))\nTEXT: The rabbit is big.\nFOL: rabbit(isBig)\nTEXT: The rabbit is cold.\nFOL: rabbit(isCold)\nTEXT: The rabbit needs the cat.\nFOL: rabbit(needs(cat))\nTEXT: The rabbit visits the bald eagle.\nFOL: rabbit(visits(BaldEagle))\nTEXT: The rabbit visits the cat.\nFOL: rabbit(visits(cat))\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x. (x(visits(cat)) -> x(needs(cat)))\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (x(visits(rabbit)) -> rabbit(visits(BaldEagle)))\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x. ((x(visits(cat)) & cat(visits(BaldEagle))) -> BaldEagle(visits(rabbit)))\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x. (x(needs(cat)) -> x(needs(rabbit)))\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x. (x(needs(BaldEagle)) -> x(visits(cat)))\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: rabbit(isKind) & rabbit(needs(cat)) -> rabbit(needs(BaldEagle)))\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (x(isKind) & x(needs(rabbit)) -> rabbit(visits(BaldEagle)))\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x. (x(needs(rabbit)) -> x(visits(rabbit)))\nTEXT: The cat needs the rabbit.\nFOL: cat(needs(rabbit))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: BaldEagle(chases(rabbit))\nTEXT: The bald eagle needs the cat.\nFOL: BaldEagle(needs(cat))\nTEXT: The bald eagle needs the rabbit.\nFOL: BaldEagle(needs(rabbit))\nTEXT: The bald eagle visits the cat.\nFOL: BaldEagle(visits(cat))\nTEXT: The cat is big.\nFOL: cat(isBig)\nTEXT: The cat is kind.\nFOL: cat(isKind)\nTEXT: The cat needs the bald eagle.\nFOL: cat(needs(BaldEagle))\nTEXT: The rabbit is big.\nFOL: rabbit(isBig)\nTEXT: The rabbit is cold.\nFOL: rabbit(isCold)\nTEXT: The rabbit needs the cat.\nFOL: rabbit(needs(cat))\nTEXT: The rabbit visits the bald eagle.\nFOL: rabbit(visits(BaldEagle))\nTEXT: The rabbit visits the cat.\nFOL: rabbit(visits(cat))\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x. (x(visits(cat)) -> x(needs(cat)))\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (x(visits(rabbit)) -> rabbit(visits(BaldEagle)))\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x. ((x(visits(cat)) & cat(visits(BaldEagle))) -> BaldEagle(visits(rabbit)))\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x. (x(needs(cat)) -> x(needs(rabbit)))\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x. (x(needs(BaldEagle)) -> x(visits(cat)))\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: (rabbit(isKind) & rabbit(needs(cat)) -> rabbit(needs(BaldEagle)))\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (x(isKind) & x(needs(rabbit)) -> rabbit(visits(BaldEagle)))\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x. (x(needs(rabbit)) -> x(visits(rabbit)))\nTEXT: The cat needs the rabbit.\nFOL: cat(needs(rabbit))\n</EVALUATE>"
  ]
 },
 {
  "index": 58,
  "responses": [
   "<EVALUATE>\nTEXT: For being so cold, it's good Alan can remain nice.\nFOL: ForAll x. (Cold(x) -> Good(x) & Nice(x))\nTEXT: Bob is green and cold too.\nFOL: Bob(Green & Cold)\nTEXT: Charlie can be rough and cold, but he is also green, an avid gardener.\nFOL: Charlie(Rough & Cold & Green & Gardener)\nTEXT: Harry seems to be round.\nFOL: Harry(Round)\nTEXT: A blue, cold natured person will be rough textured.\nFOL: ForAll x. (Blue(x) & Cold(x) -> Rough(x))\nTEXT: People turn green when they are feeling blue.\nFOL: ForAll x. (Blue(x) -> Green(x))\nTEXT: Cold people that are big and red are usually nice.\nFOL: ForAll x. (Cold(x) & Big(x) & Red(x) -> Nice(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: ForAll x. (Cold(x) & Big(x) & Rough(x) -> Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: ForAll x. (Round(x) & Green(x) & Nice(x) -> Red(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: ForAll x. (Cold(x) & Blue(x) & Rough(x) -> Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: ForAll x. (Nice(x) & Green(x) & Big(x) -> Young(x))\nTEXT: Bob is big.\nFOL: Bob(Big)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: For being so cold, it's good Alan can remain nice.\nFOL: ForAll x. (Cold(x) -> Good(x) & Nice(x))\nTEXT: Bob is green and cold too.\nFOL: Bob(Green & Cold)\nTEXT: Charlie can be rough and cold, but he is also green, an avid gardener.\nFOL: Charlie(Rough & Cold & Green & Gardener)\nTEXT: Harry seems to be round.\nFOL: Harry(Round)\nTEXT: A blue, cold natured person will be rough textured.\nFOL: ForAll x. (Blue(x) & Cold(x) -> Rough(x))\nTEXT: People turn green when they are feeling blue.\nFOL: ForAll x. (Blue(x) & FeelingBlue(x) -> Green(x))\nTEXT: Cold people that are big and red are usually nice.\nFOL: ForAll x. (Cold(x) & Big(x) & Red(x) -> Nice(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: ForAll x. (Cold(x) & Big(x) & Rough(x) -> Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: ForAll x. (Round(x) & Green(x) & Nice(x) -> Red(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: ForAll x. (Cold(x) & Blue(x) & Rough(x) -> Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: ForAll x. (Nice(x) & Green(x) & Big(x) -> Young(x))\nTEXT: Bob is big.\nFOL: Bob(Big)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: For being so cold, it's good Alan can remain nice.\nFOL: ForAll x. (Cold(x) -> Good(x) & Nice(x))\nTEXT: Bob is green and cold too.\nFOL: Bob(Green & Cold)\nTEXT: Charlie can be rough and cold, but he is also green, an avid gardener.\nFOL: Charlie(Rough & Cold & Green & Gardener)\nTEXT: Harry seems to be round.\nFOL: Harry(Round)\nTEXT: A blue, cold natured person will be rough textured.\nFOL: ForAll x. (Blue(x) & Cold(x) -> Rough(x))\nTEXT: People turn green when they are feeling blue.\nFOL: ForAll x. (Blue(x) -> Green(x))\nTEXT: Cold people that are big and red are usually nice.\nFOL: ForAll x. (Cold(x) & Big(x) & Red(x) -> Nice(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: ForAll x. (Cold(x) & Big(x) & Rough(x) -> Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: ForAll x. (Round(x) & Green(x) & Nice(x) -> Red(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: Cold(Blue & Rough) & Kind\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: ForAll x. (Nice(x) & Green(x) & Big(x) -> Young(x))\nTEXT: Bob is big.\nFOL: Bob(Big)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: For being so cold, it's good Alan can remain nice.\nFOL: ForAll x. (Cold(x) -> Good(x) & Nice(x))\nTEXT: Bob is green and cold too.\nFOL: Bob(Green & Cold)\nTEXT: Charlie can be rough and cold, but he is also green, an avid gardener.\nFOL: Charlie(Rough & Cold & Green & Gardener)\nTEXT: Harry seems to be round.\nFOL: Harry(Round)\nTEXT: A blue, cold natured person will be rough textured.\nFOL: all x. (Blue(x) & Cold(x) -> Rough(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Blue(x) -> Green(x))\nTEXT: Cold people that are big and red are usually nice.\nFOL: all x. (Cold(x) & Big(x) & Red(x) -> Nice(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: all x. (Cold(x) & Big(x) & Rough(x) -> Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: all x. (Round(x) & Green(x) & Nice(x) -> Red(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: all x. (Cold(x) & Blue(x) & Rough(x) -> Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: all x. (Nice(x) & Green(x) & Big(x) -> Young(x))\nTEXT: Bob is big.\nFOL: Bob(Big)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: For being so cold, it's good Alan can remain nice.\nFOL: ForAll x. (Cold(x) -> Good(x) & Nice(x))\nTEXT: Bob is green and cold too.\nFOL: Bob(Green & Cold)\nTEXT: Charlie can be rough and cold, but he is also green, an avid gardener.\nFOL: Charlie(Rough & Cold & Green & Gardener)\nTEXT: Harry seems to be round.\nFOL: Harry(Round)\nTEXT: A blue, cold natured person will be rough textured.\nFOL: ForAll x. (Blue(x) & Cold(x) -> Rough(x))\nTEXT: People turn green when they are feeling blue.\nFOL: ForAll x. (Blue(x) & FeelingBlue(x) -> Green(x))\nTEXT: Cold people that are big and red are usually nice.\nFOL: ForAll x. (Cold(x) & Big(x) & Red(x) -> Nice(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: ForAll x. (Cold(x) & Big(x) & Rough(x) -> Red(x))\nTEXT: A person that is round and somewhat green while being nice tends to be red as well.\nFOL: ForAll x. (Round(x) & Green(x) & Nice(x) -> Red(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: Cold(Blue & Rough) & Kind\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: ForAll x. (Nice(x) & Green(x) & Big(x) -> Young(x))\nTEXT: Bob is big.\nFOL: Bob(Big)\n</EVALUATE>"
  ]
 },
 {
  "index": 59,
  "responses": [
   "<EVALUATE>\nTEXT: The bear chases the dog.\nFOL: Bear(bear) & Dog(dog) & Chases(bear, dog)\nTEXT: The bear eats the dog.\nFOL: Bear(bear) & Dog(dog) & Eats(bear, dog)\nTEXT: The bear is round.\nFOL: Bear(bear) & Round(bear)\nTEXT: The bear needs the mouse.\nFOL: Bear(bear) & Needs(bear, mouse)\nTEXT: The dog eats the mouse.\nFOL: Dog(dog) & Mouse(mouse) & Eats(dog, mouse)\nTEXT: The dog is kind.\nFOL: Dog(dog) & Kind(dog)\nTEXT: The dog is rough.\nFOL: Dog(dog) & Rough(dog)\nTEXT: The dog is round.\nFOL: Dog(dog) & Round(dog)\nTEXT: The dog needs the bear.\nFOL: Dog(dog) & Needs(dog, bear)\nTEXT: The dog needs the mouse.\nFOL: Dog(dog) & Needs(dog, mouse)\nTEXT: The mouse chases the bear.\nFOL: Mouse(mouse) & Bear(bear) & Chases(mouse, bear)\nTEXT: The mouse eats the bear.\nFOL: Mouse(mouse) & Bear(bear) & Eats(mouse, bear)\nTEXT: The mouse eats the dog.\nFOL: Mouse(mouse) & Dog(dog) & Eats(mouse, dog)\nTEXT: The mouse is round.\nFOL: Mouse(mouse) & Round(mouse)\nTEXT: The mouse needs the dog.\nFOL: Mouse(mouse) & Needs(mouse, dog)\nTEXT: If someone chases the bear then they are kind.\nFOL: all x. (Chases(x, bear) -> Kind(x))\nTEXT: If someone is round then they chase the bear.\nFOL: all x. (Round(x) -> Chases(x, bear))\nTEXT: All kind people are rough.\nFOL: all x. (Kind(x) -> Rough(x))\nTEXT: If the mouse is green then the mouse chases the dog.\nFOL: Mouse(mouse) & Green(mouse) & Chases(mouse, dog)\nTEXT: If someone needs the bear then they need the mouse.\nFOL: all x. (Needs(x, bear) -> Needs(x, mouse))\nTEXT: If someone eats the bear and the bear is red then they are round.\nFOL: all x. (Eats(x, bear) & Bear(bear) & Red(bear) -> Round(x))\nTEXT: The bear is green.\nFOL: Bear(bear) & Green(bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear chases the dog.\nFOL: Bear(bear) & Dog(dog) & Chase(bear, dog)\nTEXT: The bear eats the dog.\nFOL: Bear(bear) & Dog(dog) & Eat(bear, dog)\nTEXT: The bear is round.\nFOL: Bear(bear) & Round(bear)\nTEXT: The bear needs the mouse.\nFOL: Bear(bear) & Mouse(mouse) & Need(bear, mouse)\nTEXT: The dog eats the mouse.\nFOL: Dog(dog) & Mouse(mouse) & Eat(dog, mouse)\nTEXT: The dog is kind.\nFOL: Dog(dog) & Kind(dog)\nTEXT: The dog is rough.\nFOL: Dog(dog) & Rough(dog)\nTEXT: The dog is round.\nFOL: Dog(dog) & Round(dog)\nTEXT: The dog needs the bear.\nFOL: Dog(dog) & Bear(bear) & Need(dog, bear)\nTEXT: The dog needs the mouse.\nFOL: Dog(dog) & Mouse(mouse) & Need(dog, mouse)\nTEXT: The mouse chases the bear.\nFOL: Mouse(mouse) & Bear(bear) & Chase(mouse, bear)\nTEXT: The mouse eats the bear.\nFOL: Mouse(mouse) & Bear(bear) & Eat(mouse, bear)\nTEXT: The mouse eats the dog.\nFOL: Mouse(mouse) & Dog(dog) & Eat(mouse, dog)\nTEXT: The mouse is round.\nFOL: Mouse(mouse) & Round(mouse)\nTEXT: The mouse needs the dog.\nFOL: Mouse(mouse) & Dog(dog) & Need(mouse, dog)\nTEXT: If someone chases the bear then they are kind.\nFOL: all x. (Chase(x, bear) -> Kind(x))\nTEXT: If someone is round then they chase the bear.\nFOL: all x. (Round(x) -> Chase(x, bear))\nTEXT: All kind people are rough.\nFOL: all x. (Kind(x) -> Rough(x))\nTEXT: If the mouse is green then the mouse chases the dog.\nFOL: Mouse(mouse) & Green(mouse) & Chase(mouse, dog)\nTEXT: If someone needs the bear then they need the mouse.\nFOL: all x. (Need(x, bear) -> Need(x, mouse))\nTEXT: If someone eats the bear and the bear is red then they are round.\nFOL: all x. (Eat(x, bear) & Bear(bear) & Red(bear) -> Round(x))\nTEXT: The bear is green.\nFOL: Bear(bear) & Green(bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear chases the dog.\nFOL: Bear(bear) & Dog(dog) & Chase(bear, dog)\nTEXT: The bear eats the dog.\nFOL: Bear(bear) & Dog(dog) & Eat(bear, dog)\nTEXT: The bear is round.\nFOL: Bear(bear) & Round(bear)\nTEXT: The bear needs the mouse.\nFOL: Bear(bear) & Mouse(mouse) & Need(bear, mouse)\nTEXT: The dog eats the mouse.\nFOL: Dog(dog) & Mouse(mouse) & Eat(dog, mouse)\nTEXT: The dog is kind.\nFOL: Dog(dog) & Kind(dog)\nTEXT: The dog is rough.\nFOL: Dog(dog) & Rough(dog)\nTEXT: The dog is round.\nFOL: Dog(dog) & Round(dog)\nTEXT: The dog needs the bear.\nFOL: Dog(dog) & Bear(bear) & Need(dog, bear)\nTEXT: The dog needs the mouse.\nFOL: Dog(dog) & Mouse(mouse) & Need(dog, mouse)\nTEXT: The mouse chases the bear.\nFOL: Mouse(mouse) & Bear(bear) & Chase(mouse, bear)\nTEXT: The mouse eats the bear.\nFOL: Mouse(mouse) & Bear(bear) & Eat(mouse, bear)\nTEXT: The mouse eats the dog.\nFOL: Mouse(mouse) & Dog(dog) & Eat(mouse, dog)\nTEXT: The mouse is round.\nFOL: Mouse(mouse) & Round(mouse)\nTEXT: The mouse needs the dog.\nFOL: Mouse(mouse) & Dog(dog) & Need(mouse, dog)\nTEXT: If someone chases the bear then they are kind.\nFOL: all x. (Chase(x, bear) -> Kind(x))\nTEXT: If someone is round then they chase the bear.\nFOL: all x. (Round(x) -> Chase(x, bear))\nTEXT: All kind people are rough.\nFOL: all x. (Kind(x) -> Rough(x))\nTEXT: If the mouse is green then the mouse chases the dog.\nFOL: Mouse(mouse) & Green(mouse) & Chase(mouse, dog)\nTEXT: If someone needs the bear then they need the mouse.\nFOL: all x. (Need(x, bear) -> Need(x, mouse))\nTEXT: If someone eats the bear and the bear is red then they are round.\nFOL: all x. ((Eat(x, bear) & Bear(bear) & Red(bear)) -> Round(x))\nTEXT: The bear is green.\nFOL: Bear(bear) & Green(bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear chases the dog.\nFOL: Bear(bear) & Dog(dog) & Chase(bear, dog)\nTEXT: The bear eats the dog.\nFOL: Bear(bear) & Dog(dog) & Eat(bear, dog)\nTEXT: The bear is round.\nFOL: Bear(bear) & Round(bear)\nTEXT: The bear needs the mouse.\nFOL: Bear(bear) & Mouse(mouse) & Need(bear, mouse)\nTEXT: The dog eats the mouse.\nFOL: Dog(dog) & Mouse(mouse) & Eat(dog, mouse)\nTEXT: The dog is kind.\nFOL: Dog(dog) & Kind(dog)\nTEXT: The dog is rough.\nFOL: Dog(dog) & Rough(dog)\nTEXT: The dog is round.\nFOL: Dog(dog) & Round(dog)\nTEXT: The dog needs the bear.\nFOL: Dog(dog) & Bear(bear) & Need(dog, bear)\nTEXT: The dog needs the mouse.\nFOL: Dog(dog) & Mouse(mouse) & Need(dog, mouse)\nTEXT: The mouse chases the bear.\nFOL: Mouse(mouse) & Bear(bear) & Chase(mouse, bear)\nTEXT: The mouse eats the bear.\nFOL: Mouse(mouse) & Bear(bear) & Eat(mouse, bear)\nTEXT: The mouse eats the dog.\nFOL: Mouse(mouse) & Dog(dog) & Eat(mouse, dog)\nTEXT: The mouse is round.\nFOL: Mouse(mouse) & Round(mouse)\nTEXT: The mouse needs the dog.\nFOL: Mouse(mouse) & Dog(dog) & Need(mouse, dog)\nTEXT: If someone chases the bear then they are kind.\nFOL: all x. (Chase(x, bear) -> Kind(x))\nTEXT: If someone is round then they chase the bear.\nFOL: all x. (Round(x) -> Chase(x, bear))\nTEXT: All kind people are rough.\nFOL: all x. (Kind(x) -> Rough(x))\nTEXT: If the mouse is green then the mouse chases the dog.\nFOL: (Mouse(mouse) & Green(mouse) -> Chase(mouse, dog))\nTEXT: If someone needs the bear then they need the mouse.\nFOL: all x. (Need(x, bear) -> Need(x, mouse))\nTEXT: If someone eats the bear and the bear is red then they are round.\nFOL: all x. ((Eat(x, bear) & Bear(bear) & Red(bear)) -> Round(x))\nTEXT: The bear is green.\nFOL: Bear(bear) & Green(bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear chases the dog.\nFOL: Bear(bear) & Dog(dog) & Chase(bear, dog)\nTEXT: The bear eats the dog.\nFOL: Bear(bear) & Dog(dog) & Eat(bear, dog)\nTEXT: The bear is round.\nFOL: Bear(bear) & Round(bear)\nTEXT: The bear needs the mouse.\nFOL: Bear(bear) & Mouse(mouse) & Need(bear, mouse)\nTEXT: The dog eats the mouse.\nFOL: Dog(dog) & Mouse(mouse) & Eat(dog, mouse)\nTEXT: The dog is kind.\nFOL: Dog(dog) & Kind(dog)\nTEXT: The dog is rough.\nFOL: Dog(dog) & Rough(dog)\nTEXT: The dog is round.\nFOL: Dog(dog) & Round(dog)\nTEXT: The dog needs the bear.\nFOL: Dog(dog) & Bear(bear) & Need(dog, bear)\nTEXT: The dog needs the mouse.\nFOL: Dog(dog) & Mouse(mouse) & Need(dog, mouse)\nTEXT: The mouse chases the bear.\nFOL: Mouse(mouse) & Bear(bear) & Chase(mouse, bear)\nTEXT: The mouse eats the bear.\nFOL: Mouse(mouse) & Bear(bear) & Eat(mouse, bear)\nTEXT: The mouse eats the dog.\nFOL: Mouse(mouse) & Dog(dog) & Eat(mouse, dog)\nTEXT: The mouse is round.\nFOL: Mouse(mouse) & Round(mouse)\nTEXT: The mouse needs the dog.\nFOL: Mouse(mouse) & Dog(dog) & Need(mouse, dog)\nTEXT: If someone chases the bear then they are kind.\nFOL: all x. (Chase(x, bear) -> Kind(x))\nTEXT: If someone is round then they chase the bear.\nFOL: all x. (Round(x) -> Chase(x, bear))\nTEXT: All kind people are rough.\nFOL: all x. (Kind(x) -> Rough(x))\nTEXT: If the mouse is green then the mouse chases the dog.\nFOL: (Green(mouse) -> Chase(mouse, dog))\nTEXT: If someone needs the bear then they need the mouse.\nFOL: all x. (Need(x, bear) -> Need(x, mouse))\nTEXT: If someone eats the bear and the bear is red then they are round.\nFOL: all x. ((Eat(x, bear) & Bear(bear) & Red(bear)) -> Round(x))\nTEXT: The bear is green.\nFOL: Bear(bear) & Green(bear)\n</EVALUATE>"
  ]
 },
 {
  "index": 60,
  "responses": [
   "<EVALUATE>\nTEXT: The bear is not round.\nFOL: -Round(Bear)\nTEXT: The bear likes the cow.\nFOL: Likes(Bear, Cow)\nTEXT: The bear likes the squirrel.\nFOL: Likes(Bear, Squirrel)\nTEXT: The bear sees the dog.\nFOL: Sees(Bear, Dog)\nTEXT: The bear visits the cow.\nFOL: Visits(Bear, Cow)\nTEXT: The cow is not blue.\nFOL: -Blue(Cow)\nTEXT: The cow is round.\nFOL: Round(Cow)\nTEXT: The cow likes the dog.\nFOL: Likes(Cow, Dog)\nTEXT: The dog is green.\nFOL: Green(Dog)\nTEXT: The dog is nice.\nFOL: Nice(Dog)\nTEXT: The dog sees the bear.\nFOL: Sees(Dog, Bear)\nTEXT: The dog does not visit the bear.\nFOL: -Visits(Dog, Bear)\nTEXT: The dog visits the cow.\nFOL: Visits(Dog, Cow)\nTEXT: The dog visits the squirrel.\nFOL: Visits(Dog, Squirrel)\nTEXT: The squirrel is blue.\nFOL: Blue(Squirrel)\nTEXT: The squirrel sees the bear.\nFOL: Sees(Squirrel, Bear)\nTEXT: If something is round and not kind then it visits the squirrel.\nFOL: all x. ((Round(x) & -Kind(x)) -> Visits(x, Squirrel))\nTEXT: If the dog likes the squirrel then the squirrel sees the cow.\nFOL: Likes(Dog, Squirrel) -> Sees(Squirrel, Cow)\nTEXT: If the squirrel is nice and the squirrel visits the bear then the bear is not green.\nFOL: Nice(Squirrel) & Visits(Squirrel, Bear) -> -Green(Bear)\nTEXT: If the squirrel sees the dog then the dog does not like the bear.\nFOL: Sees(Squirrel, Dog) -> -Likes(Dog, Bear)\nTEXT: If something visits the cow and the cow is kind then the cow likes the squirrel.\nFOL: all x. (Visits(x, Cow) & Kind(Cow) -> Likes(x, Squirrel))\nTEXT: If something likes the cow and the cow does not like the dog then the dog is round.\nFOL: all x. (Likes(x, Cow) & -Likes(Cow, Dog) -> Round(x))\nTEXT: If something is blue then it visits the bear.\nFOL: all x. (Blue(x) -> Visits(x, Bear))\nTEXT: If something is kind and it likes the dog then it sees the dog.\nFOL: all x. (Kind(x) & Likes(x, Dog) -> Sees(x, Dog))\nTEXT: The bear does not see the dog.\nFOL: -Sees(Bear, Dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is not round.\nFOL: -Round(Bear)\nTEXT: The bear likes the cow.\nFOL: Likes(Bear, Cow)\nTEXT: The bear likes the squirrel.\nFOL: Likes(Bear, Squirrel)\nTEXT: The bear sees the dog.\nFOL: Sees(Bear, Dog)\nTEXT: The bear visits the cow.\nFOL: Visits(Bear, Cow)\nTEXT: The cow is not blue.\nFOL: -Blue(Cow)\nTEXT: The cow is round.\nFOL: Round(Cow)\nTEXT: The cow likes the dog.\nFOL: Likes(Cow, Dog)\nTEXT: The dog is green.\nFOL: Green(Dog)\nTEXT: The dog is nice.\nFOL: Nice(Dog)\nTEXT: The dog sees the bear.\nFOL: Sees(Dog, Bear)\nTEXT: The dog does not visit the bear.\nFOL: -Visits(Dog, Bear)\nTEXT: The dog visits the cow.\nFOL: Visits(Dog, Cow)\nTEXT: The dog visits the squirrel.\nFOL: Visits(Dog, Squirrel)\nTEXT: The squirrel is blue.\nFOL: Blue(Squirrel)\nTEXT: The squirrel sees the bear.\nFOL: Sees(Squirrel, Bear)\nTEXT: If something is round and not kind then it visits the squirrel.\nFOL: all x. ((Round(x) & -Kind(x)) -> Visits(x, Squirrel))\nTEXT: If the dog likes the squirrel then the squirrel sees the cow.\nFOL: Likes(Dog, Squirrel) -> Sees(Squirrel, Cow)\nTEXT: If the squirrel is nice and the squirrel visits the bear then the bear is not green.\nFOL: Nice(Squirrel) & Visits(Squirrel, Bear) -> -Green(Bear)\nTEXT: If the squirrel sees the dog then the dog does not like the bear.\nFOL: Sees(Squirrel, Dog) -> -Likes(Bear, Dog)\nTEXT: If something visits the cow and the cow is kind then the cow likes the squirrel.\nFOL: all x. (Visits(x, Cow) & Kind(Cow) -> Likes(x, Squirrel))\nTEXT: If something likes the cow and the cow does not like the dog then the dog is round.\nFOL: all x. (Likes(x, Cow) & -Likes(Cow, Dog) -> Round(x))\nTEXT: If something is blue then it visits the bear.\nFOL: all x. (Blue(x) -> Visits(x, Bear))\nTEXT: If something is kind and it likes the dog then it sees the dog.\nFOL: all x. (Kind(x) & Likes(x, Dog) -> Sees(x, Dog))\nTEXT: The bear does not see the dog.\nFOL: -Sees(Bear, Dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is not round.\nFOL: -Round(Bear)\nTEXT: The bear likes the cow.\nFOL: Likes(Bear, Cow)\nTEXT: The bear likes the squirrel.\nFOL: Likes(Bear, Squirrel)\nTEXT: The bear sees the dog.\nFOL: Sees(Bear, Dog)\nTEXT: The bear visits the cow.\nFOL: Visits(Bear, Cow)\nTEXT: The cow is not blue.\nFOL: -Blue(Cow)\nTEXT: The cow is round.\nFOL: Round(Cow)\nTEXT: The cow likes the dog.\nFOL: Likes(Cow, Dog)\nTEXT: The dog is green.\nFOL: Green(Dog)\nTEXT: The dog is nice.\nFOL: Nice(Dog)\nTEXT: The dog sees the bear.\nFOL: Sees(Dog, Bear)\nTEXT: The dog does not visit the bear.\nFOL: -Visits(Dog, Bear)\nTEXT: The dog visits the cow.\nFOL: Visits(Dog, Cow)\nTEXT: The dog visits the squirrel.\nFOL: Visits(Dog, Squirrel)\nTEXT: The squirrel is blue.\nFOL: Blue(Squirrel)\nTEXT: The squirrel sees the bear.\nFOL: Sees(Squirrel, Bear)\nTEXT: If something is round and not kind then it visits the squirrel.\nFOL: all x. ((Round(x) & -Kind(x)) -> Visits(x, Squirrel))\nTEXT: If the dog likes the squirrel then the squirrel sees the cow.\nFOL: Likes(Dog, Squirrel) -> Sees(Squirrel, Cow)\nTEXT: If the squirrel is nice and the squirrel visits the bear then the bear is not green.\nFOL: (Nice(Squirrel) & Visits(Squirrel, Bear)) -> -Green(Bear)\nTEXT: If the squirrel sees the dog then the dog does not like the bear.\nFOL: Sees(Squirrel, Dog) -> -Likes(Dog, Bear)\nTEXT: If something visits the cow and the cow is kind then the cow likes the squirrel.\nFOL: all x. (Visits(x, Cow) & Kind(Cow) -> Likes(x, Squirrel))\nTEXT: If something likes the cow and the cow does not like the dog then the dog is round.\nFOL: all x. (Likes(x, Cow) & -Likes(Cow, Dog) -> Round(x))\nTEXT: If something is blue then it visits the bear.\nFOL: all x. (Blue(x) -> Visits(x, Bear))\nTEXT: If something is kind and it likes the dog then it sees the dog.\nFOL: all x. (Kind(x) & Likes(x, Dog) -> Sees(x, Dog))\nTEXT: The bear does not see the dog.\nFOL: -Sees(Bear, Dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is not round.\nFOL: -Round(Bear)\nTEXT: The bear likes the cow.\nFOL: Likes(Bear, Cow)\nTEXT: The bear likes the squirrel.\nFOL: Likes(Bear, Squirrel)\nTEXT: The bear sees the dog.\nFOL: Sees(Bear, Dog)\nTEXT: The bear visits the cow.\nFOL: Visits(Bear, Cow)\nTEXT: The cow is not blue.\nFOL: -Blue(Cow)\nTEXT: The cow is round.\nFOL: Round(Cow)\nTEXT: The cow likes the dog.\nFOL: Likes(Cow, Dog)\nTEXT: The dog is green.\nFOL: Green(Dog)\nTEXT: The dog is nice.\nFOL: Nice(Dog)\nTEXT: The dog sees the bear.\nFOL: Sees(Dog, Bear)\nTEXT: The dog does not visit the bear.\nFOL: -Visits(Dog, Bear)\nTEXT: The dog visits the cow.\nFOL: Visits(Dog, Cow)\nTEXT: The dog visits the squirrel.\nFOL: Visits(Dog, Squirrel)\nTEXT: The squirrel is blue.\nFOL: Blue(Squirrel)\nTEXT: The squirrel sees the bear.\nFOL: Sees(Squirrel, Bear)\nTEXT: If something is round and not kind then it visits the squirrel.\nFOL: all x. ((Round(x) & -Kind(x)) -> VisitsSquirrel(x))\nTEXT: If the dog likes the squirrel then the squirrel sees the cow.\nFOL: Likes(Dog, Squirrel) -> Sees(Squirrel, Cow)\nTEXT: If the squirrel is nice and the squirrel visits the bear then the bear is not green.\nFOL: Nice(Squirrel) & VisitsSquirrel(Squirrel, Bear) -> -Green(Bear)\nTEXT: If the squirrel sees the dog then the dog does not like the bear.\nFOL: Sees(Squirrel, Dog) -> -Likes(Bear, Dog)\nTEXT: If something visits the cow and the cow is kind then the cow likes the squirrel.\nFOL: all x. (Visits(x, Cow) & Kind(Cow) -> Likes(x, Squirrel))\nTEXT: If something likes the cow and the cow does not like the dog then the dog is round.\nFOL: all x. (Likes(x, Cow) & -Likes(Cow, Dog) -> Round(x))\nTEXT: If something is blue then it visits the bear.\nFOL: all x. (Blue(x) -> Visits(x, Bear))\nTEXT: If something is kind and it likes the dog then it sees the dog.\nFOL: all x. (Kind(x) & Likes(x, Dog) -> Sees(x, Dog))\nTEXT: The bear does not see the dog.\nFOL: -Sees(Bear, Dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is not round.\nFOL: -Round(Bear)\nTEXT: The bear likes the cow.\nFOL: Likes(Bear, Cow)\nTEXT: The bear likes the squirrel.\nFOL: Likes(Bear, Squirrel)\nTEXT: The bear sees the dog.\nFOL: Sees(Bear, Dog)\nTEXT: The bear visits the cow.\nFOL: Visits(Bear, Cow)\nTEXT: The cow is not blue.\nFOL: -Blue(Cow)\nTEXT: The cow is round.\nFOL: Round(Cow)\nTEXT: The cow likes the dog.\nFOL: Likes(Cow, Dog)\nTEXT: The dog is green.\nFOL: Green(Dog)\nTEXT: The dog is nice.\nFOL: Nice(Dog)\nTEXT: The dog sees the bear.\nFOL: Sees(Dog, Bear)\nTEXT: The dog does not visit the bear.\nFOL: -Visits(Dog, Bear)\nTEXT: The dog visits the cow.\nFOL: Visits(Dog, Cow)\nTEXT: The dog visits the squirrel.\nFOL: Visits(Dog, Squirrel)\nTEXT: The squirrel is blue.\nFOL: Blue(Squirrel)\nTEXT: The squirrel sees the bear.\nFOL: Sees(Squirrel, Bear)\nTEXT: If something is round and not kind then it visits the squirrel.\nFOL: all x. ((Round(x) & -Kind(x)) -> Visits(x, Squirrel))\nTEXT: If the dog likes the squirrel then the squirrel sees the cow.\nFOL: Likes(Dog, Squirrel) -> Sees(Squirrel, Cow)\nTEXT: If the squirrel is nice and the squirrel visits the bear then the bear is not green.\nFOL: Nice(Squirrel) & Visits(Squirrel, Bear) -> -Green(Bear)\nTEXT: If the squirrel sees the dog then the dog does not like the bear.\nFOL: Sees(Squirrel, Dog) -> -Likes(Dog, Bear)\nTEXT: If something visits the cow and the cow is kind then the cow likes the squirrel.\nFOL: all x. (Visits(x, Cow) & Kind(Cow) -> Likes(Cow, Squirrel))\nTEXT: If something likes the cow and the cow does not like the dog then the dog is round.\nFOL: all x. (Likes(x, Cow) & -Likes(Cow, Dog) -> Round(x))\nTEXT: If something is blue then it visits the bear.\nFOL: all x. (Blue(x) -> Visits(x, Bear))\nTEXT: If something is kind and it likes the dog then it sees the dog.\nFOL: all x. (Kind(x) & Likes(x, Dog) -> Sees(x, Dog))\nTEXT: The bear does not see the dog.\nFOL: -Sees(Bear, Dog)\n</EVALUATE>"
  ]
 },
 {
  "index": 61,
  "responses": [
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: exists x. (Young(x) & Cold(x) & Person(x) & Name(x, Alan))\nTEXT: Charlie is kind and nice and looks green.\nFOL: Kind(Charlie) & Nice(Charlie) & Green(Charlie)\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(Fred) | -Round(Fred) & Kind(Fred)\nTEXT: Harry seems to be round.\nFOL: Round(Harry)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x) | Red(x))\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: exists x. (Young(x) & Cold(x) & Green(x) & Envy(x) & Nice(x))\nTEXT: People who are young and blue are also red.\nFOL: exists x. (Young(x) & Blue(x) -> Red(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: exists x. (Big(x) & Rough(x) & Cold(x) -> Red(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: YoungAtHeart(x) & Age(x) -> Round(x)\nTEXT: A young person with red hands is rough around the edges.\nFOL: Young(x) & Red(x) -> Rough(x)\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: Round(x) & Cold(x) -> Blue(x)\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: exists x. (Young(x) & Cold(x) & Person(x) & Name(x, Alan))\nTEXT: Charlie is kind and nice and looks green.\nFOL: Kind(Charlie) & Nice(Charlie) & Green(Charlie)\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(Fred) | -Round(Fred) & Kind(Fred)\nTEXT: Harry seems to be round.\nFOL: Round(Harry)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x) | Red(x))\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: exists x. (Young(x) & Cold(x) & Green(x) & Envy(x) & Nice(x))\nTEXT: People who are young and blue are also red.\nFOL: exists x. (Young(x) & Blue(x) -> Red(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: exists x. (Big(x) & Rough(x) & Cold(x) -> Red(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: exists x. (YoungAtHeart(x) & Age(x) -> Round(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: exists x. (Young(x) & Red(x) -> Rough(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: exists x. (Round(x) & Cold(x) -> Blue(x))\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: exists x. (Young(x) & Cold(x) & Name(x, alan))\n\nTEXT: Charlie is kind and nice and looks green.\nFOL: Kind(Charlie) & Nice(Charlie) & Green(Charlie)\n\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(Fred) | -Round(Fred) & Kind(Fred)\n\nTEXT: Harry seems to be round.\nFOL: SeemRound(Harry)\n\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x) | -Cold(x) & Red(x))\n\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: exists x. (Young(x) & Cold(x, others) & Green(x, envy) -> Nice(x))\n\nTEXT: People who are young and blue are also red.\nFOL: exists x. (Young(x) & Blue(x) -> Red(x))\n\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: exists x. (Big(x) & Rough(x) & Cold(x) -> Red(x))\n\nTEXT: Someone who is young at heart and age are very round.\nFOL: YoungAtHeart(x) & Age(x) -> Round(x)\n\nTEXT: A young person with red hands is rough around the edges.\nFOL: Young(x) & Red(x) -> Rough(x)\n\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: Round(x) & Cold(x) -> Blue(x)\n\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: exists x. (Young(x) & Cold(x) & Person(x) & Name(x, Alan))\nTEXT: Charlie is kind and nice and looks green.\nFOL: Kind(Charlie) & Nice(Charlie) & Green(Charlie)\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(Fred) | -Round(Fred) & Kind(Fred)\nTEXT: Harry seems to be round.\nFOL: Round(Harry)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x) | Red(x))\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: exists x. (Young(x) & Cold(x) & Green(x) & Envy(x) & Nice(x))\nTEXT: People who are young and blue are also red.\nFOL: exists x. (Young(x) & Blue(x) -> Red(x))\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: exists x. (Big(x) & Rough(x) & Cold(x) -> Red(x))\nTEXT: Someone who is young at heart and age are very round.\nFOL: YoungAtHeart(x) & Age(x) -> Round(x)\nTEXT: A young person with red hands is rough around the edges.\nFOL: Young(x) & Red(x) -> Rough(x)\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: Round(x) & Cold(x) -> Blue(x)\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Alan.\nFOL: exists x. (Young(x) & Cold(x) & Name(x, alan))\n\nTEXT: Charlie is kind and nice and looks green.\nFOL: Kind(Charlie) & Nice(Charlie) & Green(Charlie)\n\nTEXT: Fred may be round, but he is also kind.\nFOL: Round(Fred) | -Round(Fred) & Kind(Fred)\n\nTEXT: Harry seems to be round.\nFOL: SeemRound(Harry)\n\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x) | -Cold(x) & Red(x))\n\nTEXT: Young people who are cold to others and green with envy are actually nice.\nFOL: exists x. (Young(x) & Cold(x, others) & Green(x, envy) & Nice(x))\n\nTEXT: People who are young and blue are also red.\nFOL: exists x. (Young(x) & Blue(x) -> Red(x))\n\nTEXT: Even though a person is big and rough when they are cold they turn red.\nFOL: exists x. (Big(x) & Rough(x) & Cold(x) -> Red(x))\n\nTEXT: Someone who is young at heart and age are very round.\nFOL: YoungAtHeart(x) & Age(x) -> Round(x)\n\nTEXT: A young person with red hands is rough around the edges.\nFOL: Young(x) & Red(x) -> Rough(x)\n\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: Round(x) & Cold(x) -> Blue(x)\n\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\n</EVALUATE>"
  ]
 },
 {
  "index": 62,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is kind and nice and looks green.\nFOL: Kind(Bob) & Nice(Bob) & Green(Bob)\n\nTEXT: Eric, who is relatively young, is also pretty big and tends to be cold.\nFOL: Young(Eric) & Big(Eric) & Cold(Eric)\n\nTEXT: Fred is kind.\nFOL: Kind(Fred)\n\nTEXT: He is also very cold and blue.\nFOL: Cold(He) & Blue(He)\n\nTEXT: That guy Harry sure is nice.\nFOL: Nice(Harry)\n\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: Big(x) & Kind(x) & Cold(x) -> Red(x)\n\nTEXT: Kind red people are green on the inside.\nFOL: Red(x) & Kind(x) -> Green(x)\n\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: Kind(x) & Cold(x) & Blue(x) -> Big(x)\n\nTEXT: Kind red and round people often look green.\nFOL: Red(x) & Round(x) & Kind(x) -> Green(x)\n\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: Kind(x) & Cold(x) & Red(x) -> Young(x)\n\nTEXT: Bob is blue.\nFOL: Blue(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind and nice and looks green.\nFOL: Kind(Bob) & Nice(Bob) & Green(Bob)\n\nTEXT: Eric, who is relatively young, is also pretty big and tends to be cold.\nFOL: Young(Eric) & Big(Eric) & Cold(Eric)\n\nTEXT: Fred is kind.\nFOL: Kind(Fred)\n\nTEXT: He is also very cold and blue.\nFOL: Cold(He) & Blue(He)\n\nTEXT: That guy Harry sure is nice.\nFOL: Nice(Harry)\n\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: Big(x) & Kind(x) & Cold(x) -> Red(x)\n\nTEXT: Kind red people are green on the inside.\nFOL: Red(x) -> Green(x)\n\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: Kind(x) & Cold(x) & Blue(x) -> Big(x)\n\nTEXT: Kind red and round people often look green.\nFOL: Red(x) & Round(x) -> Green(x)\n\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: Kind(x) & Cold(x) & Red(x) -> Young(x)\n\nTEXT: Bob is blue.\nFOL: Blue(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind and nice and looks green.\nFOL: Kind(Bob) & Nice(Bob) & Green(Bob)\n\nTEXT: Eric, who is relatively young, is also pretty big and tends to be cold.\nFOL: Young(Eric) & Big(Eric) & Cold(Eric)\n\nTEXT: Fred is kind.\nFOL: Kind(Fred)\n\nTEXT: He is also very cold and blue.\nFOL: Cold(He) & Blue(He)\n\nTEXT: That guy Harry sure is nice.\nFOL: Nice(Harry)\n\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: (Big(x) & Kind(x) & Cold(x) -> Red(x))\n\nTEXT: Kind red people are green on the inside.\nFOL: Red(x) -> Green(x)\n\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: Kind(x) & Cold(x) & Blue(x) -> Big(x)\n\nTEXT: Kind red and round people often look green.\nFOL: Red(x) & Round(x) -> Green(x)\n\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: Kind(x) & Cold(x) & Red(x) -> Young(x)\n\nTEXT: Bob is blue.\nFOL: Blue(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind and nice and looks green.\nFOL: Kind(Bob) & Nice(Bob) & Green(Bob)\n\nTEXT: Eric, who is relatively young, is also pretty big and tends to be cold.\nFOL: Young(Eric) & Big(Eric) & Cold(Eric)\n\nTEXT: Fred is kind.\nFOL: Kind(Fred)\n\nTEXT: He is also very cold and blue.\nFOL: Cold(He) & Blue(He)\n\nTEXT: That guy Harry sure is nice.\nFOL: Nice(Harry)\n\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: Big(x) & Kind(x) & Cold(x) -> Red(x)\n\nTEXT: Kind red people are green on the inside.\nFOL: Red(x) & Kind(x) -> Green(x)\n\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: Kind(x) & Cold(x) & Blue(x) -> Big(x)\n\nTEXT: Kind red and round people often look green.\nFOL: Red(x) & Round(x) & Kind(x) -> Green(x)\n\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: Cold(x) & Red(x) -> Young(x)\n\nTEXT: Bob is blue.\nFOL: Blue(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is kind and nice and looks green.\nFOL: Kind(Bob) & Nice(Bob) & Green(Bob)\n\nTEXT: Eric, who is relatively young, is also pretty big and tends to be cold.\nFOL: Young(Eric) & Big(Eric) & Cold(Eric)\n\nTEXT: Fred is kind.\nFOL: Kind(Fred)\n\nTEXT: He is also very cold and blue.\nFOL: Cold(He) & Blue(He)\n\nTEXT: That guy Harry sure is nice.\nFOL: Nice(Harry)\n\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: Big(x) & Kind(x) & Cold(x) -> Red(x)\n\nTEXT: Kind red people are green on the inside.\nFOL: Red(x) & Kind(x) -> Green(x)\n\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: Kind(x) & Cold(x) & Blue(x) -> Big(x)\n\nTEXT: Kind red and round people often look green.\nFOL: Red(x) & Round(x) & Kind(x) -> Green(x)\n\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: (Cold(x) & Red(x) & Kind(x)) -> Young(x)\n\nTEXT: Bob is blue.\nFOL: Blue(Bob)\n</EVALUATE>"
  ]
 },
 {
  "index": 63,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is red.\nFOL: BaldEagle(red)\nTEXT: The cat chases the rabbit.\nFOL: Cat(chasesRabbit)\nTEXT: The rabbit does not eat the bald eagle.\nFOL: -RabbitEatsBaldEagle\nTEXT: The squirrel chases the rabbit.\nFOL: Squirrel(chasesRabbit)\nTEXT: If someone likes the bald eagle then the bald eagle chases the cat.\nFOL: all x. (LikesBaldEagle(x) -> BaldEagle(chasesCat(x)))\nTEXT: If someone eats the rabbit then the rabbit does not chase the squirrel.\nFOL: all x. (EatsRabbit(x) -> -RabbitChasesSquirrel(x))\nTEXT: If someone likes the cat and they are not blue then the cat is nice.\nFOL: all x. ((LikesCat(x) & -Blue(x)) -> NiceCat(x))\nTEXT: If someone is red then they like the bald eagle.\nFOL: all x. (Red(x) -> LikesBaldEagle(x))\nTEXT: If someone chases the cat then they eat the squirrel.\nFOL: all x. (ChasesCat(x) -> EatsSquirrel(x))\nTEXT: If someone is kind and they do not eat the rabbit then the rabbit eats the squirrel.\nFOL: all x. (Kind(x) & -EatsRabbit(x) -> RabbitEatsSquirrel(x))\nTEXT: If someone eats the squirrel and they are not red then the squirrel is not nice.\nFOL: all x. (EatsSquirrel(x) & -Red(x) -> -NiceSquirrel(x))\nTEXT: If someone eats the bald eagle then they chase the cat.\nFOL: all x. (EatsBaldEagle(x) -> ChasesCat(x))\nTEXT: The squirrel likes the rabbit.\nFOL: Squirrel(LikesRabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is red.\nFOL: BaldEagle(red)\nTEXT: The cat chases the rabbit.\nFOL: Cat(chasesRabbit)\nTEXT: The rabbit does not eat the bald eagle.\nFOL: -RabbitEatsBaldEagle\nTEXT: The squirrel chases the rabbit.\nFOL: Squirrel(chasesRabbit)\nTEXT: If someone likes the bald eagle then the bald eagle chases the cat.\nFOL: all x. (LikesBaldEagle(x) -> BaldEagle(chasesCat(x)))\nTEXT: If someone eats the rabbit then the rabbit does not chase the squirrel.\nFOL: all x. (EatsRabbit(x) -> -RabbitChasesSquirrel(x))\nTEXT: If someone likes the cat and they are not blue then the cat is nice.\nFOL: all x. (LikesCat(x) & -Blue(x) -> NiceCat(x))\nTEXT: If someone is red then they like the bald eagle.\nFOL: all x. (Red(x) -> LikesBaldEagle(x))\nTEXT: If someone chases the cat then they eat the squirrel.\nFOL: all x. (ChasesCat(x) -> EatsSquirrel(x))\nTEXT: If someone is kind and they do not eat the rabbit then the rabbit eats the squirrel.\nFOL: all x. (Kind(x) & -EatsRabbit(x) -> RabbitEatsSquirrel(x))\nTEXT: If someone eats the squirrel and they are not red then the squirrel is not nice.\nFOL: all x. (EatsSquirrel(x) & -Red(x) -> -NiceSquirrel(x))\nTEXT: If someone eats the bald eagle then they chase the cat.\nFOL: all x. (EatsBaldEagle(x) -> ChasesCat(x))\nTEXT: The squirrel likes the rabbit.\nFOL: Squirrel(LikesRabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is red.\nFOL: BaldEagle(red)\nTEXT: The cat chases the rabbit.\nFOL: Cat(chases rabbit)\nTEXT: The rabbit does not eat the bald eagle.\nFOL: -Rabbit(eats baldEagle)\nTEXT: The squirrel chases the rabbit.\nFOL: Squirrel(chases rabbit)\nTEXT: If someone likes the bald eagle then the bald eagle chases the cat.\nFOL: all x. (Likes(x, baldEagle) -> BaldEagle(chases cat))\nTEXT: If someone eats the rabbit then the rabbit does not chase the squirrel.\nFOL: all x. (Eats(x, rabbit) -> -Squirrel(chases rabbit))\nTEXT: If someone likes the cat and they are not blue then the cat is nice.\nFOL: all x. (Likes(x, cat) & -Blue(x) -> Nice(x))\nTEXT: If someone is red then they like the bald eagle.\nFOL: all x. (Red(x) -> Likes(x, baldEagle))\nTEXT: If someone chases the cat then they eat the squirrel.\nFOL: all x. (Chases(x, cat) -> Eats(x, squirrel))\nTEXT: If someone is kind and they do not eat the rabbit then the rabbit eats the squirrel.\nFOL: all x. (Kind(x) & -Eats(x, rabbit) -> Squirrel(eats rabbit))\nTEXT: If someone eats the squirrel and they are not red then the squirrel is not nice.\nFOL: all x. (Eats(x, squirrel) & -Red(x) -> -Nice(x))\nTEXT: If someone eats the bald eagle then they chase the cat.\nFOL: all x. (Eats(x, baldEagle) -> Chases(x, cat))\nTEXT: The squirrel likes the rabbit.\nFOL: Squirrel(likes rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is red.\nFOL: BaldEagle(red)\nTEXT: The cat chases the rabbit.\nFOL: Cat(chases(rabbit))\nTEXT: The rabbit does not eat the bald eagle.\nFOL: -Rabbit(eats(baldEagle))\nTEXT: The squirrel chases the rabbit.\nFOL: Squirrel(chases(rabbit))\nTEXT: If someone likes the bald eagle then the bald eagle chases the cat.\nFOL: all x. (Likes(x, baldEagle) -> BaldEagle(chases(cat(x))))\nTEXT: If someone eats the rabbit then the rabbit does not chase the squirrel.\nFOL: all x. (Eats(x, rabbit) -> -Rabbit(chases(squirrel(x))))\nTEXT: If someone likes the cat and they are not blue then the cat is nice.\nFOL: all x. (Likes(x, cat) & -Blue(x) -> Nice(x))\nTEXT: If someone is red then they like the bald eagle.\nFOL: all x. (Red(x) -> Likes(x, baldEagle))\nTEXT: If someone chases the cat then they eat the squirrel.\nFOL: all x. (Chases(x, cat) -> Eats(x, squirrel))\nTEXT: If someone is kind and they do not eat the rabbit then the rabbit eats the squirrel.\nFOL: all x. (Kind(x) & -Eats(x, rabbit) -> Rabbit(eats(squirrel(x))))\nTEXT: If someone eats the squirrel and they are not red then the squirrel is not nice.\nFOL: all x. (Eats(x, squirrel) & -Red(x) -> -Nice(x))\nTEXT: If someone eats the bald eagle then they chase the cat.\nFOL: all x. (Eats(x, baldEagle) -> Chases(x, cat))\nTEXT: The squirrel likes the rabbit.\nFOL: Squirrel(likes(rabbit))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is red.\nFOL: BaldEagle(red)\nTEXT: The cat chases the rabbit.\nFOL: Cat(chasesRabbit)\nTEXT: The rabbit does not eat the bald eagle.\nFOL: -RabbitEatsBaldEagle\nTEXT: The squirrel chases the rabbit.\nFOL: Squirrel(chasesRabbit)\nTEXT: If someone likes the bald eagle then the bald eagle chases the cat.\nFOL: all x. (LikesBaldEagle(x) -> BaldEagle(x) chasesCat)\nTEXT: If someone eats the rabbit then the rabbit does not chase the squirrel.\nFOL: all x. (EatsRabbit(x) -> -RabbitChasesSquirrel(x))\nTEXT: If someone likes the cat and they are not blue then the cat is nice.\nFOL: all x. (LikesCat(x) & -Blue(x) -> NiceCat(x))\nTEXT: If someone is red then they like the bald eagle.\nFOL: all x. (Red(x) -> LikesBaldEagle(x))\nTEXT: If someone chases the cat then they eat the squirrel.\nFOL: all x. (ChasesCat(x) -> EatsSquirrel(x))\nTEXT: If someone is kind and they do not eat the rabbit then the rabbit eats the squirrel.\nFOL: all x. (Kind(x) & -EatsRabbit(x) -> RabbitEatsSquirrel(x))\nTEXT: If someone eats the squirrel and they are not red then the squirrel is not nice.\nFOL: all x. (EatsSquirrel(x) & -Red(x) -> -NiceSquirrel(x))\nTEXT: If someone eats the bald eagle then they chase the cat.\nFOL: all x. (EatsBaldEagle(x) -> ChasesCat(x))\nTEXT: The squirrel likes the rabbit.\nFOL: Squirrel(likesRabbit)\n</EVALUATE>"
  ]
 },
 {
  "index": 64,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(bob)\n\nTEXT: Charlie is furry.\nFOL: Furry(charlie)\n\nTEXT: Charlie is green.\nFOL: Green(charlie)\n\nTEXT: Charlie is round.\nFOL: Round(charlie)\n\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\n\nTEXT: Fiona is green.\nFOL: Green(fiona)\n\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\n\nTEXT: Fiona is round.\nFOL: Round(fiona)\n\nTEXT: Fiona is young.\nFOL: Young(fiona)\n\nTEXT: Harry is green.\nFOL: Green(harry)\n\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\n\nTEXT: Harry is round.\nFOL: Round(harry)\n\nTEXT: All furry people are young.\nFOL: all x. (Furry(x) -> Young(x))\n\nTEXT: If someone is furry and rough then they are round.\nFOL: all x. (Furry(x) & Rough(x) -> Round(x))\n\nTEXT: Green, young people are furry.\nFOL: all x. (Green(x) & Young(x) -> Furry(x))\n\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\n\nTEXT: Green, rough people are quiet.\nFOL: all x. (Green(x) & Rough(x) -> Quiet(x))\n\nTEXT: All young people are rough.\nFOL: all x. (Young(x) -> Rough(x))\n\nTEXT: If someone is rough then they are furry.\nFOL: all x. (Rough(x) -> Furry(x))\n\nTEXT: Quiet people are rough.\nFOL: all x. (Quiet(x) -> Rough(x))\n\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(bob)\n\nTEXT: Charlie is furry.\nFOL: Furry(charlie)\n\nTEXT: Charlie is green.\nFOL: Green(charlie)\n\nTEXT: Charlie is round.\nFOL: Round(charlie)\n\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\n\nTEXT: Fiona is green.\nFOL: Green(fiona)\n\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\n\nTEXT: Fiona is round.\nFOL: Round(fiona)\n\nTEXT: Fiona is young.\nFOL: Young(fiona)\n\nTEXT: Harry is green.\nFOL: Green(harry)\n\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\n\nTEXT: Harry is round.\nFOL: Round(harry)\n\nTEXT: All furry people are young.\nFOL: all x. (Furry(x) -> Young(x))\n\nTEXT: If someone is furry and rough then they are round.\nFOL: all x. ((Furry(x) & Rough(x)) -> Round(x))\n\nTEXT: Green, young people are furry.\nFOL: all x. ((Green(x) & Young(x)) -> Furry(x))\n\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\n\nTEXT: Green, rough people are quiet.\nFOL: all x. ((Green(x) & Rough(x)) -> Quiet(x))\n\nTEXT: All young people are rough.\nFOL: all x. (Young(x) -> Rough(x))\n\nTEXT: If someone is rough then they are furry.\nFOL: all x. (Rough(x) -> Furry(x))\n\nTEXT: Quiet people are rough.\nFOL: all x. (Quiet(x) -> Rough(x))\n\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(bob)\nTEXT: Charlie is furry.\nFOL: Furry(charlie)\nTEXT: Charlie is green.\nFOL: Green(charlie)\nTEXT: Charlie is round.\nFOL: Round(charlie)\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Fiona is young.\nFOL: Young(fiona)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: All furry people are young.\nFOL: all x. (Furry(x) -> Young(x))\nTEXT: If someone is furry and rough then they are round.\nFOL: all x. ((Furry(x) & Rough(x)) -> Round(x))\nTEXT: Green, young people are furry.\nFOL: all x. ((Green(x) & Young(x)) -> Furry(x))\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: Green, rough people are quiet.\nFOL: all x. ((Green(x) & Rough(x)) -> Quiet(x))\nTEXT: All young people are rough.\nFOL: all x. (Young(x) -> Rough(x))\nTEXT: If someone is rough then they are furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: Quiet people are rough.\nFOL: all x. (Quiet(x) -> Rough(x))\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(bob)\n\nTEXT: Charlie is furry.\nFOL: Furry(charlie)\n\nTEXT: Charlie is green.\nFOL: Green(charlie)\n\nTEXT: Charlie is round.\nFOL: Round(charlie)\n\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\n\nTEXT: Fiona is green.\nFOL: Green(fiona)\n\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\n\nTEXT: Fiona is round.\nFOL: Round(fiona)\n\nTEXT: Fiona is young.\nFOL: Young(fiona)\n\nTEXT: Harry is green.\nFOL: Green(harry)\n\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\n\nTEXT: Harry is round.\nFOL: Round(harry)\n\nTEXT: All furry people are young.\nFOL: all x. (Furry(x) -> Young(x))\n\nTEXT: If someone is furry and rough then they are round.\nFOL: all x. ((Furry(x) & Rough(x)) -> Round(x))\n\nTEXT: Green, young people are furry.\nFOL: all x. (Green(x) & Young(x) -> Furry(x))\n\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\n\nTEXT: Green, rough people are quiet.\nFOL: all x. ((Green(x) & Rough(x)) -> Quiet(x))\n\nTEXT: All young people are rough.\nFOL: all x. (Young(x) -> Rough(x))\n\nTEXT: If someone is rough then they are furry.\nFOL: all x. (Rough(x) -> Furry(x))\n\nTEXT: Quiet people are rough.\nFOL: all x. (Quiet(x) -> Rough(x))\n\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(bob)\nTEXT: Charlie is furry.\nFOL: Furry(charlie)\nTEXT: Charlie is green.\nFOL: Green(charlie)\nTEXT: Charlie is round.\nFOL: Round(charlie)\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: Fiona is nice.\nFOL: Nice(fiona)\nTEXT: Fiona is round.\nFOL: Round(fiona)\nTEXT: Fiona is young.\nFOL: Young(fiona)\nTEXT: Harry is green.\nFOL: Green(harry)\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: All furry people are young.\nFOL: all x. (Furry(x) -> Young(x))\nTEXT: If someone is furry and rough then they are round.\nFOL: all x. ((Furry(x) & Rough(x)) -> Round(x))\nTEXT: Green, young people are furry.\nFOL: all x. (Green(x) & Young(x) -> Furry(x))\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: Green, rough people are quiet.\nFOL: all x. (Green(x) & Rough(x) -> Quiet(x))\nTEXT: All young people are rough.\nFOL: all x. (Young(x) -> Rough(x))\nTEXT: If someone is rough then they are furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: Quiet people are rough.\nFOL: all x. (Quiet(x) -> Rough(x))\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\n</EVALUATE>"
  ]
 },
 {
  "index": 65,
  "responses": [
   "<EVALUATE>\nTEXT: Alan may be round, but he is also kind.\nFOL: (Round(Alan) | -Round(Alan)) & Kind(Alan)\n\nTEXT: Bob is a round and rough around the edges, and he is also big.\nFOL: Round(Bob) & RoughAroundTheEdges(Bob) & Big(Bob)\n\nTEXT: Dave seems to be round.\nFOL: Round(Dave)\n\nTEXT: Fred may be young but he is nice, wears green shoes and is cold.\nFOL: (Young(Fred) | -Young(Fred)) & Nice(Fred) & GreenShoes(Fred) & Cold(Fred)\n\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\n\nTEXT: A nice young person who is big can be considered round.\nFOL: all x. (Nice(x) & Young(x) & Big(x) -> Round(x))\n\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Blue(x) -> Green(x))\n\nTEXT: Most round and cold people are often rough.\nFOL: all x. (Round(x) & Cold(x) -> Rough(x))\n\nTEXT: Nice and green people are often found to be big as well.\nFOL: all x. (Nice(x) & Green(x) -> Big(x))\n\nTEXT: Fred is big.\nFOL: Big(Fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan may be round, but he is also kind.\nFOL: (Round(Alan) | -Round(Alan)) & Kind(Alan)\n\nTEXT: Bob is a round and rough around the edges, and he is also big.\nFOL: Round(Bob) & RoughAroundTheEdges(Bob) & Big(Bob)\n\nTEXT: Dave seems to be round.\nFOL: Round(Dave)\n\nTEXT: Fred may be young but he is nice, wears green shoes and is cold.\nFOL: (Young(Fred) | -Young(Fred)) & Nice(Fred) & GreenShoes(Fred) & Cold(Fred)\n\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\n\nTEXT: A nice young person who is big can be considered round.\nFOL: (Nice(x) & Young(x) & Big(x) -> Round(x))\n\nTEXT: People turn green when they are feeling blue.\nFOL: (FeelingBlue(x) -> Green(x))\n\nTEXT: Most round and cold people are often rough.\nFOL: all x. (Round(x) & Cold(x) -> Rough(x))\n\nTEXT: Nice and green people are often found to be big as well.\nFOL: all x. (Nice(x) & Green(x) -> Big(x))\n\nTEXT: Fred is big.\nFOL: Big(Fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan may be round, but he is also kind.\nFOL: (Round(Alan) | -Round(Alan)) & Kind(Alan)\n\nTEXT: Bob is a round and rough around the edges, and he is also big.\nFOL: Round(Bob) & RoughAroundTheEdges(Bob) & Big(Bob)\n\nTEXT: Dave seems to be round.\nFOL: Round(Dave)\n\nTEXT: Fred may be young but he is nice, wears green shoes and is cold.\nFOL: (Young(Fred) | -Young(Fred)) & Nice(Fred) & GreenShoes(Fred) & Cold(Fred)\n\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\n\nTEXT: A nice young person who is big can be considered round.\nFOL: (Nice(x) & Young(x) & Big(x) -> Round(x))\n\nTEXT: People turn green when they are feeling blue.\nFOL: (FeelingBlue(x) -> Green(x))\n\nTEXT: Most round and cold people are often rough.\nFOL: all x. ((Round(x) & Cold(x)) -> Rough(x))\n\nTEXT: Nice and green people are often found to be big as well.\nFOL: all x. (Nice(x) & Green(x) -> Big(x))\n\nTEXT: Fred is big.\nFOL: Big(Fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan may be round, but he is also kind.\nFOL: (Round(Alan) | -Round(Alan)) & Kind(Alan)\n\nTEXT: Bob is a round and rough around the edges, and he is also big.\nFOL: Round(Bob) & RoughAroundTheEdges(Bob) & Big(Bob)\n\nTEXT: Dave seems to be round.\nFOL: Round(Dave)\n\nTEXT: Fred may be young but he is nice, wears green shoes and is cold.\nFOL: (Young(Fred) | -Young(Fred)) & Nice(Fred) & WearsGreenShoes(Fred) & Cold(Fred)\n\nTEXT: Big people who are red in color are almost always young.\nFOL: Big(x) & Red(x) -> Young(x)\n\nTEXT: A nice young person who is big can be considered round.\nFOL: Nice(x) & Young(x) & Big(x) -> Round(x)\n\nTEXT: People turn green when they are feeling blue.\nFOL: -Blue(x) -> Green(x)\n\nTEXT: Most round and cold people are often rough.\nFOL: Round(x) & Cold(x) -> Rough(x)\n\nTEXT: Nice and green people are often found to be big as well.\nFOL: Nice(x) & Green(x) -> Big(x)\n\nTEXT: Fred is big.\nFOL: Big(Fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan may be round, but he is also kind.\nFOL: (Round(Alan) | -Round(Alan)) & Kind(Alan)\n\nTEXT: Bob is a round and rough around the edges, and he is also big.\nFOL: Round(Bob) & RoughAroundTheEdges(Bob) & Big(Bob)\n\nTEXT: Dave seems to be round.\nFOL: Round(Dave)\n\nTEXT: Fred may be young but he is nice, wears green shoes and is cold.\nFOL: (Young(Fred) | -Young(Fred)) & Nice(Fred) & WearsGreenShoes(Fred) & Cold(Fred)\n\nTEXT: Big people who are red in color are almost always young.\nFOL: Big(x) & Red(x) -> Young(x)\n\nTEXT: A nice young person who is big can be considered round.\nFOL: Nice(x) & Young(x) & Big(x) -> Round(x)\n\nTEXT: People turn green when they are feeling blue.\nFOL: -Blue(x) -> Green(x)\n\nTEXT: Most round and cold people are often rough.\nFOL: (Round(x) & Cold(x)) -> Rough(x)\n\nTEXT: Nice and green people are often found to be big as well.\nFOL: Nice(x) & Green(x) -> Big(x)\n\nTEXT: Fred is big.\nFOL: Big(Fred)\n</EVALUATE>"
  ]
 },
 {
  "index": 66,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: Bob(green) & Bob(cold)\nTEXT: Charlie seems big and rough, but he's actually quite kind.\nFOL: Charlie(big) & Charlie(rough) & -Charlie(kind)\nTEXT: The young person who is always feeling cold is named Dave.\nFOL: exists x. (Young(x) & Cold(x) & x = Dave)\nTEXT: When Eric walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: Eric(nice) & Eric(kind) & -Eric(blue) & -Eric(red)\nTEXT: A rather big person is a red person.\nFOL: exists x. (Big(x) & Red(x))\nTEXT: Young people who are cold and blue are actually kind.\nFOL: all x. (Young(x) & Cold(x) & Blue(x) -> kind(x))\nTEXT: Rough people who are kind and green with envy are red with their toughened skin.\nFOL: all x. (Rough(x) & kind(x) & Green(x) & Envy(x) -> Red(x))\nTEXT: Rough and big people are always also cold people.\nFOL: all x. (Rough(x) & Big(x) -> Cold(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Blue(x) -> Green(x))\nTEXT: If someone is cold and blue, you will find that they are also quite young.\nFOL: all x. (Cold(x) & Blue(x) -> Young(x))\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: all x. (Green(x) & Blue(x) & Red(x) -> Round(x))\nTEXT: Charlie is not blue.\nFOL: -Charlie(blue)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: Bob(green) & Bob(cold)\nTEXT: Charlie seems big and rough, but he's actually quite kind.\nFOL: Charlie(big) & Charlie(rough) & -Charlie(kind)\nTEXT: The young person who is always feeling cold is named Dave.\nFOL: exists x. (Young(x) & Cold(x) & x = Dave)\nTEXT: When Eric walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: Eric(nice) & Eric(kind) & -Eric(blue) & -Eric(red)\nTEXT: A rather big person is a red person.\nFOL: exists x. (Big(x) & Red(x))\nTEXT: Young people who are cold and blue are actually kind.\nFOL: all x. (Young(x) & Cold(x) & Blue(x) -> kind(x))\nTEXT: Rough people who are kind and green with envy are red with their toughened skin.\nFOL: all x. (Rough(x) & Kind(x) & Green(x) & Envy(x) -> Red(x))\nTEXT: Rough and big people are always also cold people.\nFOL: all x. (Rough(x) & Big(x) -> Cold(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Blue(x) -> Green(x))\nTEXT: If someone is cold and blue, you will find that they are also quite young.\nFOL: all x. (Cold(x) & Blue(x) -> Young(x))\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: all x. (Green(x) & Blue(x) & Red(x) -> Round(x))\nTEXT: Charlie is not blue.\nFOL: -Charlie(blue)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: Bob(green) & Bob(cold)\nTEXT: Charlie seems big and rough, but he's actually quite kind.\nFOL: Charlie(big) & Charlie(rough) & -Charlie(kind)\nTEXT: The young person who is always feeling cold is named Dave.\nFOL: exists x. (Young(x) & Cold(x) & x = Dave)\nTEXT: When Eric walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: Eric(nice) & Eric(kind) & -Eric(blue) & -Eric(red)\nTEXT: A rather big person is a red person.\nFOL: exists x. (Big(x) & x = Red(x))\nTEXT: Young people who are cold and blue are actually kind.\nFOL: all x. (Young(x) & Cold(x) & Blue(x) -> kind(x))\nTEXT: Rough people who are kind and green with envy are red with their toughened skin.\nFOL: all x. (Rough(x) & kind(x) & Green(x) & Envy(x) -> Red(x))\nTEXT: Rough and big people are always also cold people.\nFOL: all x. (Rough(x) & Big(x) -> Cold(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Blue(x) -> Green(x))\nTEXT: If someone is cold and blue, you will find that they are also quite young.\nFOL: all x. (Cold(x) & Blue(x) -> Young(x))\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: all x. (Green(x) & Blue(x) & Red(x) -> Round(x))\nTEXT: Charlie is not blue.\nFOL: -Charlie(blue)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: Bob(green) & Bob(cold)\nTEXT: Charlie seems big and rough, but he's actually quite kind.\nFOL: Charlie(big) & Charlie(rough) & -Charlie(kind)\nTEXT: The young person who is always feeling cold is named Dave.\nFOL: exists x. (Young(x) & Cold(x) & x = Dave)\nTEXT: When Eric walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: Eric(nice) & Eric(kind) & -Eric(blue) & -Eric(red)\nTEXT: A rather big person is a red person.\nFOL: exists x. (Big(x) & Red(x))\nTEXT: Young people who are cold and blue are actually kind.\nFOL: exists x. (Young(x) & Cold(x) & Blue(x) & -Kind(x))\nTEXT: Rough people who are kind and green with envy are red with their toughened skin.\nFOL: exists x. (Rough(x) & Kind(x) & Green(x) & Envy(x) & Red(x))\nTEXT: Rough and big people are always also cold people.\nFOL: exists x. (Rough(x) & Big(x) & Cold(x))\nTEXT: People turn green when they are feeling blue.\nFOL: exists x. (Blue(x) -> Green(x))\nTEXT: If someone is cold and blue, you will find that they are also quite young.\nFOL: exists x. (Cold(x) & Blue(x) -> Young(x))\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: exists x. (Green(x) & Blue(x) & Red(x) -> Round(x))\nTEXT: Charlie is not blue.\nFOL: -Charlie(blue)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green and cold too.\nFOL: Bob(green) & Bob(cold)\nTEXT: Charlie seems big and rough, but he's actually quite kind.\nFOL: Charlie(big) & Charlie(rough) & -Charlie(kind)\nTEXT: The young person who is always feeling cold is named Dave.\nFOL: exists x. (Young(x) & Cold(x) & x = Dave)\nTEXT: When Eric walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: Eric(nice) & Eric(kind) & -Eric(blue) & -Eric(red)\nTEXT: A rather big person is a red person.\nFOL: exists x. (Big(x) & Red(x))\nTEXT: Young people who are cold and blue are actually kind.\nFOL: all x. (Young(x) & Cold(x) & Blue(x) -> kind(x))\nTEXT: Rough people who are kind and green with envy are red with their toughened skin.\nFOL: all x. (Rough(x) & kind(x) & Green(x) & Envy(x) -> Red(x))\nTEXT: Rough and big people are always also cold people.\nFOL: all x. (Rough(x) & Big(x) -> Cold(x))\nTEXT: People turn green when they are feeling blue.\nFOL: all x. (Blue(x) -> Green(x))\nTEXT: If someone is cold and blue, you will find that they are also quite young.\nFOL: all x. (Cold(x) & Blue(x) -> Young(x))\nTEXT: A person who is green, blue, and red in color will be round shaped.\nFOL: exists x. (Green(x) & Blue(x) & Red(x) -> Round(x))\nTEXT: Charlie is not blue.\nFOL: -Charlie(blue)\n</EVALUATE>"
  ]
 },
 {
  "index": 67,
  "responses": [
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x. (Knows(x, charlie) -> (Rough(x) & Cold(x)))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: (Rough(charlie) & Cold(charlie) & Red(charlie) & Blue(charlie) & Young(charlie))\nTEXT: That guy Eric sure is nice.\nFOL: Nice(eric)\nTEXT: A bit overweight, Fred is big and round.\nFOL: (Overweight(fred) & Big(fred) & Round(fred))\nTEXT: He's a nice guy who is often cold.\nFOL: Nice(he) & Cold(he)\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: (Nice(x) & Round(x) & Cold(x) -> Blue(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> Green(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: Blue(x) & Big(x) & Kind(x) -> Green(x)\nTEXT: People who are feeling blue and green are said to be red.\nFOL: (Blue(x) & Green(x) -> Red(x))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: Nice(x) & Blue(x) & Round(x) -> Kind(x)\nTEXT: Fred is not kind.\nFOL: -Kind(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x. (Knows(x, charlie) -> (Rough(x) & Cold(x)))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: (Rough(charlie) & Cold(charlie) & Red(charlie) & Blue(charlie) & Young(charlie))\nTEXT: That guy Eric sure is nice.\nFOL: Nice(eric)\nTEXT: A bit overweight, Fred is big and round.\nFOL: (Overweight(fred) & Big(fred) & Round(fred))\nTEXT: He's a nice guy who is often cold.\nFOL: Nice(he) & Cold(he)\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: (Nice(x) & Round(x) & Cold(x) -> Blue(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> Green(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: (Blue(x) & Big(x) & Kind(x) -> Green(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: (Blue(x) & Green(x) -> Red(x))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: (Nice(x) & Blue(x) & Round(x) -> Kind(x))\nTEXT: Fred is not kind.\nFOL: -Kind(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x. (Knows(x, charlie) -> (Rough(x) & Cold(x)))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: (Rough(charlie) & Cold(charlie) & Red(charlie) & Blue(charlie) & Young(charlie))\nTEXT: That guy Eric sure is nice.\nFOL: Nice(eric)\nTEXT: A bit overweight, Fred is big and round.\nFOL: (Overweight(fred) & Big(fred) & Round(fred))\nTEXT: He's a nice guy who is often cold.\nFOL: Nice(he) & Cold(he)\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: (Nice(x) & Round(x) & Cold(x) -> Blue(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> Green(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: (Blue(x) & Big(x) & Kind(x) -> Green(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: (Blue(x) & Green(x) -> Red(x))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: Nice(x) & Blue(x) & Round(x) -> Kind(x)\nTEXT: Fred is not kind.\nFOL: -Kind(fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x. (KnowsCharlie(x) -> (Rough(x) & Cold(x)))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: (Rough(Charlie) & Cold(Charlie) & Kind(Charlie) & Red(Charlie) & Blue(Charlie) & Young(Charlie))\nTEXT: That guy Eric sure is nice.\nFOL: Nice(Eric)\nTEXT: A bit overweight, Fred is big and round.\nFOL: (Overweight(Fred) & Big(Fred) & Round(Fred))\nTEXT: He's a nice guy who is often cold.\nFOL: Nice(Eric) & Cold(Eric)\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: (Nice(x) & Round(x) & Cold(x) -> Blue(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> LittleGreen(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: (Blue(x) & Big(x) & Kind(x) -> Green(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: (Blue(x) & Green(x) -> Red(x))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: (Nice(x) & Blue(x) & Round(x) -> Kind(x))\nTEXT: Fred is not kind.\nFOL: -Kind(Fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: People that know Charlie will tell you he is rough and cold.\nFOL: all x. (KnowsCharlie(x) -> (Rough(x) & Cold(x)))\nTEXT: But he can also be kind and red despite being blue because he is so young.\nFOL: (Rough(Charlie) & Cold(Charlie) & Kind(Charlie) & Red(Charlie) & Blue(Charlie) & Young(Charlie))\nTEXT: That guy Eric sure is nice.\nFOL: Nice(Eric)\nTEXT: A bit overweight, Fred is big and round.\nFOL: (Overweight(Fred) & Big(Fred) & Round(Fred))\nTEXT: He's a nice guy who is often cold.\nFOL: Nice(Eric) & Cold(Eric)\nTEXT: When a person is nice and round and cold, they look blue.\nFOL: (Nice(x) & Round(x) & Cold(x) -> Blue(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> LittleGreen(x))\nTEXT: Big people who are red in color are almost always young.\nFOL: all x. (Big(x) & Red(x) -> Young(x))\nTEXT: Blue, big and kind all at once, that person must be green too.\nFOL: (Blue(x) & Big(x) & Kind(x) -> Green(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: (Blue(x) & Green(x) -> Red(x))\nTEXT: A nice person who feels blue and looks round is usually kind.\nFOL: Nice(x) & Blue(x) & Round(x) -> Kind(x))\nTEXT: Fred is not kind.\nFOL: -Kind(Fred)\n</EVALUATE>"
  ]
 },
 {
  "index": 68,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: Rough(anne)\n\nTEXT: Bob is round.\nFOL: Round(bob)\n\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\n\nTEXT: If Bob is round then Bob is smart.\nFOL: Round(bob) -> Smart(bob)\n\nTEXT: Smart things are not furry.\nFOL: all x. (Smart(x) -> -Furry(x))\n\nTEXT: Round, nice things are not furry.\nFOL: (Round(x) & Nice(x)) -> -Furry(x)\n\nTEXT: Round, smart things are nice.\nFOL: (Round(x) & Smart(x)) -> Nice(x)\n\nTEXT: If something is smart and round then it is nice.\nFOL: (Smart(x) & Round(x)) -> Nice(x)\n\nTEXT: If something is nice then it is rough.\nFOL: Nice(x) -> Rough(x)\n\nTEXT: Young things are round.\nFOL: Young(x) -> Round(x)\n\nTEXT: Anne is rough.\nFOL: Rough(anne)\n\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: Rough(Anne)\n\nTEXT: Bob is round.\nFOL: Round(Bob)\n\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\n\nTEXT: If Bob is round then Bob is smart.\nFOL: Round(Bob) -> Smart(Bob)\n\nTEXT: Smart things are not furry.\nFOL: all x. (Smart(x) -> -Furry(x))\n\nTEXT: Round, nice things are not furry.\nFOL: (Round(x) & Nice(x)) -> -Furry(x)\n\nTEXT: Round, smart things are nice.\nFOL: (Round(x) & Smart(x)) -> Nice(x)\n\nTEXT: If something is smart and round then it is nice.\nFOL: (Smart(x) & Round(x)) -> Nice(x)\n\nTEXT: If something is nice then it is rough.\nFOL: Nice(x) -> Rough(x)\n\nTEXT: Young things are round.\nFOL: all x. (Young(x) -> Round(x))\n\nTEXT: Anne is rough.\nFOL: Rough(Anne)\n\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: Rough(Anne)\n\nTEXT: Bob is round.\nFOL: Round(Bob)\n\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\n\nTEXT: If Bob is round then Bob is smart.\nFOL: Round(Bob) -> Smart(Bob)\n\nTEXT: Smart things are not furry.\nFOL: all x. (Smart(x) -> -Furry(x))\n\nTEXT: Round, nice things are not furry.\nFOL: (Round(x) & Nice(x)) -> -Furry(x)\n\nTEXT: Round, smart things are nice.\nFOL: (Round(x) & Smart(x)) -> Nice(x)\n\nTEXT: If something is smart and round then it is nice.\nFOL: (Smart(x) & Round(x)) -> Nice(x)\n\nTEXT: If something is nice then it is rough.\nFOL: Nice(x) -> Rough(x)\n\nTEXT: Young things are round.\nFOL: Young(x) -> Round(x)\n\nTEXT: Anne is rough.\nFOL: Rough(Anne)\n\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: Rough(Anne)\nTEXT: Bob is round.\nFOL: Round(Bob)\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\nTEXT: If Bob is round then Bob is smart.\nFOL: Round(Bob) -> Smart(Bob)\nTEXT: Smart things are not furry.\nFOL: all x. (Smart(x) -> -Furry(x))\nTEXT: Round, nice things are not furry.\nFOL: Round(x) & Nice(x) -> -Furry(x)\nTEXT: Round, smart things are nice.\nFOL: Round(x) & Smart(x) -> Nice(x)\nTEXT: If something is smart and round then it is nice.\nFOL: (Smart(x) & Round(x)) -> Nice(x)\nTEXT: If something is nice then it is rough.\nFOL: Nice(x) -> Rough(x)\nTEXT: Young things are round.\nFOL: all x. (Young(x) -> Round(x))\nTEXT: Anne is rough.\nFOL: Rough(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: Rough(anne)\n\nTEXT: Bob is round.\nFOL: Round(bob)\n\nTEXT: Furry things are cold.\nFOL: all x. (Furry(x) -> Cold(x))\n\nTEXT: If Bob is round then Bob is smart.\nFOL: Round(bob) -> Smart(bob)\n\nTEXT: Smart things are not furry.\nFOL: all x. (Smart(x) -> -Furry(x))\n\nTEXT: Round, nice things are not furry.\nFOL: (Round(x) & Nice(x)) -> -Furry(x)\n\nTEXT: Round, smart things are nice.\nFOL: (Round(x) & Smart(x)) -> Nice(x)\n\nTEXT: If something is smart and round then it is nice.\nFOL: (Smart(x) & Round(x)) -> Nice(x)\n\nTEXT: If something is nice then it is rough.\nFOL: Nice(x) -> Rough(x)\n\nTEXT: Young things are round.\nFOL: all x. (Young(x) -> Round(x))\n\nTEXT: Anne is rough.\nFOL: Rough(anne)\n\n</EVALUATE>"
  ]
 },
 {
  "index": 69,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(dave)\n\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\n\nTEXT: If Dave is furry then Dave is rough.\nFOL: (Furry(dave) -> Rough(dave))\n\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\n\nTEXT: Dave is white.\nFOL: White(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(Dave)\n\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\n\nTEXT: If Dave is furry then Dave is rough.\nFOL: (Furry(Dave) -> Rough(Dave))\n\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\n\nTEXT: Dave is white.\nFOL: White(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: WhiteDave\n\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\n\nTEXT: If Dave is furry then Dave is rough.\nFOL: (FurryDave -> RoughDave)\n\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\n\nTEXT: Dave is white.\nFOL: WhiteDave\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: WhiteDave\n\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\n\nTEXT: If Dave is furry then Dave is rough.\nFOL: DaveFurry -> DaveRough\n\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\n\nTEXT: Dave is white.\nFOL: WhiteDave\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(Dave)\n\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\n\nTEXT: If Dave is furry then Dave is rough.\nFOL: (Furry(Dave) -> Rough(Dave))\n\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 70,
  "responses": [
   "<EVALUATE>\nTEXT: Alan is a kind person and he is also often cold.\nFOL: Kind(Alan) & Cold(Alan)\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: Wet(Dave) & Cold(Dave)\nTEXT: He also looks green but big.\nFOL: Green(He) & Big(He)\nTEXT: Fred was proud of being round, yet rough.\nFOL: Round(Fred) & Rough(Fred)\nTEXT: His red cheeks glowed.\nFOL: Red(Fred)\nTEXT: Gary is green and cold too.\nFOL: Green(Gary) & Cold(Gary)\nTEXT: A very big person who is green but also red is a rough person.\nFOL: Big(Person) & Green(Person) & Red(Person) & Rough(Person)\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: Red(Person) & Round(Person) & Kind(Person) & Cold(Person)\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: Rough(Person) & Cold(Person) & Green(Person) -> Big(Person)\nTEXT: Count on anyone you meet who is big, round, and red also being kind.\nFOL: Big(Person) & Round(Person) & Red(Person) -> Kind(Person)\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: Rough(Person) & Red(Person) -> Big(Person)\nTEXT: When you meet and big and nice man, they will be kind to the earth and live green lifestyle.\nFOL: Big(Person) & Nice(Person) -> KindToEarth(Person) & GreenLifestyle(Person)\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: Young(Person) & Big(Person) & Blue(Person) -> Cold(Person)\nTEXT: Gary is cold.\nFOL: Cold(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a kind person and he is also often cold.\nFOL: Kind(Alan) & Cold(Alan)\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: Wet(Dave) & Cold(Dave)\nTEXT: He also looks green but big.\nFOL: Green(He) & Big(He)\nTEXT: Fred was proud of being round, yet rough.\nFOL: Round(Fred) & Rough(Fred)\nTEXT: His red cheeks glowed.\nFOL: Red(Fred)\nTEXT: Gary is green and cold too.\nFOL: Green(Gary) & Cold(Gary)\nTEXT: A very big person who is green but also red is a rough person.\nFOL: Big(Person) & Green(Person) & Red(Person) & Rough(Person)\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: Red(Person) & Round(Person) & Kind(Person) & -Cold(Person)\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: Rough(Person) & Cold(Person) & Green(Person) -> Big(Person)\nTEXT: Count on anyone you meet who is big, round, and red also being kind.\nFOL: Big(Person) & Round(Person) & Red(Person) -> Kind(Person)\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: Rough(Person) & Red(Person) -> Big(Person)\nTEXT: When you meet and big and nice man, they will be kind to the earth and live green lifestyle.\nFOL: Big(Person) & Nice(Person) -> KindToEarth(Person) & GreenLifestyle(Person)\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: Young(Person) & Big(Person) & Blue(Person) -> Cold(Person)\nTEXT: Gary is cold.\nFOL: Cold(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a kind person and he is also often cold.\nFOL: Kind(Alan) & Cold(Alan)\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: Wet(Dave) & Cold(Dave)\nTEXT: He also looks green but big.\nFOL: Green(He) & Big(He)\nTEXT: Fred was proud of being round, yet rough.\nFOL: Round(Fred) & Rough(Fred)\nTEXT: His red cheeks glowed.\nFOL: Red(Fred)\nTEXT: Gary is green and cold too.\nFOL: Green(Gary) & Cold(Gary)\nTEXT: A very big person who is green but also red is a rough person.\nFOL: Big(Person) & Green(Person) & Red(Person) & Rough(Person)\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: Red(Person) & Round(Person) & Kind(Person) & Cold(Person)\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: Rough(Person) & Cold(Person) & Green(Person) -> Big(Person)\nTEXT: Count on anyone you meet who is big, round, and red also being kind.\nFOL: Big(Person) & Round(Person) & Red(Person) -> Kind(Person)\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: Rough(Person) & Red(Person) -> Big(Person)\nTEXT: When you meet and big and nice man, they will be kind to the earth and live green lifestyle.\nFOL: Big(Person) & Nice(Person) -> KindToEarth(Person) & LiveGreen(Person)\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: Young(Person) & Big(Person) & Blue(Person) -> Cold(Person)\nTEXT: Gary is cold.\nFOL: Cold(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a kind person and he is also often cold.\nFOL: Kind(Alan) & Cold(Alan)\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: Wet(Dave) & Cold(Dave)\nTEXT: He also looks green but big.\nFOL: Green(He) & Big(He)\nTEXT: Fred was proud of being round, yet rough.\nFOL: Round(Fred) & Rough(Fred)\nTEXT: His red cheeks glowed.\nFOL: Red(Fred)\nTEXT: Gary is green and cold too.\nFOL: Green(Gary) & Cold(Gary)\nTEXT: A very big person who is green but also red is a rough person.\nFOL: Big(Person) & Green(Person) & Red(Person) & Rough(Person)\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: Red(Person) & Round(Person) & Kind(Person) & Cold(Person)\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: Rough(Person) & Cold(Person) & Green(Person) -> Big(Person)\nTEXT: Count on anyone you meet who is big, round, and red also being kind.\nFOL: Big(Person) & Round(Person) & Red(Person) -> Kind(Person)\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: Rough(Person) & Red(Person) -> Big(Person)\nTEXT: When you meet and big and nice man, they will be kind to the earth and live green lifestyle.\nFOL: Big(Person) & Nice(Person) -> KindToEarth(Person) & GreenLifestyle(Person)\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: Young(Person) & Blue(Person) & Big(Person) -> Cold(Person)\nTEXT: Gary is cold.\nFOL: Cold(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a kind person and he is also often cold.\nFOL: Kind(Alan) & Cold(Alan)\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: Wet(Dave) & Cold(Dave)\nTEXT: He also looks green but big.\nFOL: Green(He) & Big(He)\nTEXT: Fred was proud of being round, yet rough.\nFOL: Round(Fred) & Rough(Fred)\nTEXT: His red cheeks glowed.\nFOL: Red(Fred)\nTEXT: Gary is green and cold too.\nFOL: Green(Gary) & Cold(Gary)\nTEXT: A very big person who is green but also red is a rough person.\nFOL: Big(Person) & Green(Person) & Red(Person) & Rough(Person)\nTEXT: If you pass someone who is red and round and kind, you'll notice they act in a cold manner.\nFOL: Red(Person) & Round(Person) & Kind(Person) & Cold(Person)\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: Rough(Person) & Cold(Person) & Green(Person) -> Big(Person)\nTEXT: Count on anyone you meet who is big, round, and red also being kind.\nFOL: Big(Person) & Round(Person) & Red(Person) -> Kind(Person)\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: Rough(Person) & Red(Person) -> Big(Person)\nTEXT: When you meet and big and nice man, they will be kind to the earth and live green lifestyle.\nFOL: Big(Person) & Nice(Person) -> KindToEarth(Person) & GreenLifestyle(Person)\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: Young(Person) & Big(Person) & Blue(Person) -> Cold(Person)\nTEXT: Gary is cold.\nFOL: Gary -> Cold(Gary)\n</EVALUATE>"
  ]
 },
 {
  "index": 71,
  "responses": [
   "<EVALUATE>\nTEXT: Charlie is kind.\nFOL: Kind(Charlie)\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Gary is furry.\nFOL: Furry(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: Gary is white.\nFOL: White(gary)\nTEXT: If Gary is smart and Gary is round then Gary is green.\nFOL: (Smart(gary) & Round(gary)) -> Green(gary)\nTEXT: Furry, young things are kind.\nFOL: all x. (Furry(x) & Young(x) -> Kind(x))\nTEXT: If Charlie is green then Charlie is white.\nFOL: Green(Charlie) -> White(Charlie)\nTEXT: Young, white things are smart.\nFOL: all x. (Young(x) & White(x) -> Smart(x))\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: All kind things are green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: Charlie is not furry.\nFOL: -Furry(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is kind.\nFOL: Kind(Charlie)\n\nTEXT: Erin is furry.\nFOL: Furry(erin)\n\nTEXT: Gary is furry.\nFOL: Furry(gary)\n\nTEXT: Gary is kind.\nFOL: Kind(gary)\n\nTEXT: Gary is round.\nFOL: Round(gary)\n\nTEXT: Gary is smart.\nFOL: Smart(gary)\n\nTEXT: Gary is white.\nFOL: White(gary)\n\nTEXT: If Gary is smart and Gary is round then Gary is green.\nFOL: (Smart(gary) & Round(gary)) -> Green(gary)\n\nTEXT: Furry, young things are kind.\nFOL: all x. (Furry(x) & Young(x) -> Kind(x))\n\nTEXT: If Charlie is green then Charlie is white.\nFOL: Green(Charlie) -> White(Charlie)\n\nTEXT: Young, white things are smart.\nFOL: all x. (Young(x) & White(x) -> Smart(x))\n\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) -> Young(x))\n\nTEXT: All kind things are green.\nFOL: all x. (Kind(x) -> Green(x))\n\nTEXT: Charlie is not furry.\nFOL: -Furry(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is kind.\nFOL: Kind(Charlie)\n\nTEXT: Erin is furry.\nFOL: Furry(erin)\n\nTEXT: Gary is furry.\nFOL: Furry(gary)\n\nTEXT: Gary is kind.\nFOL: Kind(gary)\n\nTEXT: Gary is round.\nFOL: Round(gary)\n\nTEXT: Gary is smart.\nFOL: Smart(gary)\n\nTEXT: Gary is white.\nFOL: White(gary)\n\nTEXT: If Gary is smart and Gary is round then Gary is green.\nFOL: (Smart(gary) & Round(gary)) -> Green(gary)\n\nTEXT: Furry, young things are kind.\nFOL: all x. (Furry(x) & Young(x) -> Kind(x))\n\nTEXT: If Charlie is green then Charlie is white.\nFOL: Green(charlie) -> White(charlie)\n\nTEXT: Young, white things are smart.\nFOL: all x. (Young(x) & White(x) -> Smart(x))\n\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) -> Young(x))\n\nTEXT: All kind things are green.\nFOL: all x. (Kind(x) -> Green(x))\n\nTEXT: Charlie is not furry.\nFOL: -Furry(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is kind.\nFOL: Kind(Charlie)\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Gary is furry.\nFOL: Furry(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: Gary is white.\nFOL: White(gary)\nTEXT: If Gary is smart and Gary is round then Gary is green.\nFOL: (Smart(gary) & Round(gary)) -> Green(gary)\nTEXT: Furry, young things are kind.\nFOL: all x. (Furry(x) & Young(x) -> Kind(x))\nTEXT: If Charlie is green then Charlie is white.\nFOL: Green(Charlie) -> White(Charlie)\nTEXT: Young, white things are smart.\nFOL: all x. (Young(x) & White(x) -> Smart(x))\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: All kind things are green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: Charlie is not furry.\nFOL: -Furry(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is kind.\nFOL: Kind(Charlie)\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Gary is furry.\nFOL: Furry(gary)\nTEXT: Gary is kind.\nFOL: Kind(gary)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: Gary is white.\nFOL: White(gary)\nTEXT: If Gary is smart and Gary is round then Gary is green.\nFOL: (Smart(gary) & Round(gary)) -> Green(gary)\nTEXT: Furry, young things are kind.\nFOL: all x. (Furry(x) & Young(x) -> Kind(x))\nTEXT: If Charlie is green then Charlie is white.\nFOL: Green(charlie) -> White(charlie)\nTEXT: Young, white things are smart.\nFOL: all x. (Young(x) & White(x) -> Smart(x))\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: All kind things are green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: Charlie is not furry.\nFOL: -Furry(charlie)\n</EVALUATE>"
  ]
 },
 {
  "index": 72,
  "responses": [
   "<EVALUATE>\nTEXT: The bear visits the cat.\nFOL: Bear(bear) & Cat(cat) & Visits(bear, cat)\nTEXT: The cat is green.\nFOL: Cat(cat) & Green(cat)\nTEXT: If something is blue and green then it visits the bear.\nFOL: all x. (Blue(x) & Green(x) -> Visits(x, bear))\nTEXT: If something likes the bear and it sees the cat then it sees the bear.\nFOL: all x. (Likes(x, bear) & Sees(x, cat) -> Sees(x, bear))\nTEXT: If something visits the bear then the bear sees the cat.\nFOL: all x. (Visits(x, bear) -> Sees(bear, x))\nTEXT: If the bear is cold then the bear is round.\nFOL: Cold(bear) -> Round(bear)\nTEXT: If the cat is not green then the cat does not see the bear.\nFOL: -Green(cat) -> -Sees(cat, bear)\nTEXT: If something visits the bear then it likes the bear.\nFOL: all x. (Visits(x, bear) -> Likes(x, bear))\nTEXT: If the cat is green then the cat is blue.\nFOL: Green(cat) -> Blue(cat)\nTEXT: If something visits the cat and it sees the bear then the cat visits the bear.\nFOL: all x. (Visits(x, cat) & Sees(x, bear) -> Visits(cat, bear))\nTEXT: The bear visits the cat.\nFOL: Bear(bear) & Cat(cat) & Visits(bear, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear visits the cat.\nFOL: Bear(bear) & Cat(cat) & Visit(bear, cat)\nTEXT: The cat is green.\nFOL: Cat(cat) & Green(cat)\nTEXT: If something is blue and green then it visits the bear.\nFOL: all x. ((Blue(x) & Green(x)) -> Visit(x, bear))\nTEXT: If something likes the bear and it sees the cat then it sees the bear.\nFOL: all x. ((Likes(x, bear) & See(x, cat)) -> See(x, bear))\nTEXT: If something visits the bear then the bear sees the cat.\nFOL: all x. (Visit(x, bear) -> See(bear, x))\nTEXT: If the bear is cold then the bear is round.\nFOL: Cold(bear) -> Round(bear)\nTEXT: If the cat is not green then the cat does not see the bear.\nFOL: -Green(cat) -> -See(cat, bear)\nTEXT: If something visits the bear then it likes the bear.\nFOL: all x. (Visit(x, bear) -> Likes(x, bear))\nTEXT: If the cat is green then the cat is blue.\nFOL: Green(cat) -> Blue(cat)\nTEXT: If something visits the cat and it sees the bear then the cat visits the bear.\nFOL: all x. ((Visit(x, cat) & See(x, bear)) -> Visit(cat, bear))\nTEXT: The bear visits the cat.\nFOL: Bear(bear) & Cat(cat) & Visit(bear, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear visits the cat.\nFOL: Bear(bear) & Cat(cat) & Visit(bear, cat)\nTEXT: The cat is green.\nFOL: Cat(cat) & Green(cat)\nTEXT: If something is blue and green then it visits the bear.\nFOL: all x. (Blue(x) & Green(x) -> Visit(bear, x))\nTEXT: If something likes the bear and it sees the cat then it sees the bear.\nFOL: all x. (Likes(x, bear) & See(x, cat) -> See(x, bear))\nTEXT: If something visits the bear then the bear sees the cat.\nFOL: all x. (Visit(x, bear) -> See(bear, x))\nTEXT: If the bear is cold then the bear is round.\nFOL: Cold(bear) -> Round(bear)\nTEXT: If the cat is not green then the cat does not see the bear.\nFOL: -Green(cat) -> -See(cat, bear)\nTEXT: If something visits the bear then it likes the bear.\nFOL: all x. (Visit(x, bear) -> Likes(x, bear))\nTEXT: If the cat is green then the cat is blue.\nFOL: Green(cat) -> Blue(cat)\nTEXT: If something visits the cat and it sees the bear then the cat visits the bear.\nFOL: all x. (Visit(x, cat) & See(x, bear) -> Visit(cat, bear))\nTEXT: The bear visits the cat.\nFOL: Bear(bear) & Cat(cat) & Visit(bear, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear visits the cat.\nFOL: Bear(bear) & Cat(cat) & Visit(bear, cat)\nTEXT: The cat is green.\nFOL: Cat(cat) & Green(cat)\nTEXT: If something is blue and green then it visits the bear.\nFOL: all x. (Blue(x) & Green(x) -> Visit(x, bear))\nTEXT: If something likes the bear and it sees the cat then it sees the bear.\nFOL: all x. (Likes(x, bear) & See(x, cat) -> See(x, bear))\nTEXT: If something visits the bear then the bear sees the cat.\nFOL: all x. (Visit(x, bear) -> See(bear, x))\nTEXT: If the bear is cold then the bear is round.\nFOL: Bear(bear) & Cold(bear) -> Round(bear)\nTEXT: If the cat is not green then the cat does not see the bear.\nFOL: -Green(cat) -> -See(cat, bear)\nTEXT: If something visits the bear then it likes the bear.\nFOL: all x. (Visit(x, bear) -> Likes(x, bear))\nTEXT: If the cat is green then the cat is blue.\nFOL: Cat(cat) & Green(cat) -> Blue(cat)\nTEXT: If something visits the cat and it sees the bear then the cat visits the bear.\nFOL: all x. (Visit(x, cat) & See(x, bear) -> Visit(cat, bear))\nTEXT: The bear visits the cat.\nFOL: Bear(bear) & Cat(cat) & Visit(bear, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear visits the cat.\nFOL: Bear(bear) & Cat(cat) & Visit(bear, cat)\nTEXT: The cat is green.\nFOL: Cat(cat) & Green(cat)\nTEXT: If something is blue and green then it visits the bear.\nFOL: all x. ((Blue(x) & Green(x)) -> Visit(x, bear))\nTEXT: If something likes the bear and it sees the cat then it sees the bear.\nFOL: all x. ((Likes(x, bear) & See(x, cat)) -> See(x, bear))\nTEXT: If something visits the bear then the bear sees the cat.\nFOL: all x. (Visit(x, bear) -> See(bear, x))\nTEXT: If the bear is cold then the bear is round.\nFOL: Bear(bear) & Cold(bear) & Round(bear)\nTEXT: If the cat is not green then the cat does not see the bear.\nFOL: -Green(cat) -> -See(cat, bear)\nTEXT: If something visits the bear then it likes the bear.\nFOL: all x. (Visit(x, bear) -> Likes(x, bear))\nTEXT: If the cat is green then the cat is blue.\nFOL: Cat(cat) & Green(cat) -> Blue(cat)\nTEXT: If something visits the cat and it sees the bear then the cat visits the bear.\nFOL: all x. ((Visit(x, cat) & See(x, bear)) -> Visit(cat, bear))\nTEXT: The bear visits the cat.\nFOL: Bear(bear) & Cat(cat) & Visit(bear, cat)\n</EVALUATE>"
  ]
 },
 {
  "index": 73,
  "responses": [
   "<EVALUATE>\nTEXT: Alan is green and cold too.\nFOL: Alan(green) & Alan(cold)\nTEXT: For being so cold, it's good Fred can remain nice.\nFOL: (Cold(Fred) -> Nice(Fred))\nTEXT: Gary seems to be round.\nFOL: Gary(round)\nTEXT: No one knows Harry like me and he is a kind guy, very round in the belly and green as grass.\nFOL: -Knows(Harry, me) & Kind(Harry) & BellyRound(Harry) & Green(Harry)\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: (RoughSkin(x) & Cold(x) & Outside(x) -> Nice(x))\nTEXT: Kind red people are green on the inside.\nFOL: (Kind(x) & Red(x) -> Green(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: (Young(x) & Rough(x) -> Red(x))\nTEXT: Nice people that are very green and even round shaped will be very young.\nFOL: (Nice(x) & Green(x) & Round(x) -> Young(x))\nTEXT: Round people who are kind tend to be nice.\nFOL: (Round(x) & Kind(x) -> Nice(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: (Green(x) & Rough(x) & Cold(x) -> Nice(x))\nTEXT: Someone who is a young age and looks like they are round are also red.\nFOL: (Young(x) & Round(x) -> Red(x))\nTEXT: Fred is not kind.\nFOL: -Kind(Fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is green and cold too.\nFOL: Alan green & Alan cold\nTEXT: For being so cold, it's good Fred can remain nice.\nFOL: -Cold(Fred) -> Nice(Fred)\nTEXT: Gary seems to be round.\nFOL: Gary round\nTEXT: No one knows Harry like me and he is a kind guy, very round in the belly and green as grass.\nFOL: -Knows(Harry, me) & Kind(Harry) & BellyRound(Harry) & Green(Harry)\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: (RoughSkin(x) & Cold(x) & Outside(x)) -> Nice(x)\nTEXT: Kind red people are green on the inside.\nFOL: KindRed(x) -> Green(x)\nTEXT: Even though young people are rough, they are still very red.\nFOL: Young(x) & Rough(x) -> Red(x)\nTEXT: Nice people that are very green and even round shaped will be very young.\nFOL: Nice(x) & Green(x) & Round(x) -> Young(x)\nTEXT: Round people who are kind tend to be nice.\nFOL: Round(x) & Kind(x) -> Nice(x)\nTEXT: A green person that is rough and cold is often also nice.\nFOL: Green(x) & Rough(x) & Cold(x) -> Nice(x)\nTEXT: Someone who is a young age and looks like they are round are also red.\nFOL: Young(x) & Round(x) -> Red(x)\nTEXT: Fred is not kind.\nFOL: -Kind(Fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is green and cold too.\nFOL: Alan(green) & Alan(cold)\nTEXT: For being so cold, it's good Fred can remain nice.\nFOL: (Cold(Fred) -> Nice(Fred))\nTEXT: Gary seems to be round.\nFOL: Gary(round)\nTEXT: No one knows Harry like me and he is a kind guy, very round in the belly and green as grass.\nFOL: -Knows(Harry, me) & Kind(Harry) & BellyRound(Harry) & Green(Harry)\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: (RoughSkin(x) & Cold(x) & Outside(x) -> Nice(x))\nTEXT: Kind red people are green on the inside.\nFOL: (Kind(x) & Red(x) -> Green(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: (Young(x) & Rough(x) -> Red(x))\nTEXT: Nice people that are very green and even round shaped will be very young.\nFOL: (Nice(x) & Green(x) & Round(x) -> Young(x))\nTEXT: Round people who are kind tend to be nice.\nFOL: (Round(x) & Kind(x) -> Nice(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: Green(x) & Rough(x) & Cold(x) -> Nice(x)\nTEXT: Someone who is a young age and looks like they are round are also red.\nFOL: Young(x) & Round(x) -> Red(x)\nTEXT: Fred is not kind.\nFOL: -Kind(Fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is green and cold too.\nFOL: Alan(green) & Alan(cold)\nTEXT: For being so cold, it's good Fred can remain nice.\nFOL: (Cold(Fred) -> Nice(Fred))\nTEXT: Gary seems to be round.\nFOL: Gary(round)\nTEXT: No one knows Harry like me and he is a kind guy, very round in the belly and green as grass.\nFOL: -Knows(Harry, me) & Kind(Harry) & BellyRound(Harry) & Green(Harry)\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: (RoughSkin(x) & Cold(x) & Outside(x) -> Nice(x))\nTEXT: Kind red people are green on the inside.\nFOL: (Kind(x) & Red(x) -> Green(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: (Young(x) & Rough(x) -> Red(x))\nTEXT: Nice people that are very green and even round shaped will be very young.\nFOL: (Nice(x) & Green(x) & Round(x) -> Young(x))\nTEXT: Round people who are kind tend to be nice.\nFOL: (Round(x) & Kind(x) -> Nice(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: (Green(x) & Rough(x) & Cold(x) -> Nice(x))\nTEXT: Someone who is a young age and looks like they are round are also red.\nFOL: (YoungAge(x) & Round(x) -> Red(x))\nTEXT: Fred is not kind.\nFOL: -Kind(Fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is green and cold too.\nFOL: Alan(green) & Alan(cold)\nTEXT: For being so cold, it's good Fred can remain nice.\nFOL: (Cold(Fred) -> Nice(Fred))\nTEXT: Gary seems to be round.\nFOL: Gary(round)\nTEXT: No one knows Harry like me and he is a kind guy, very round in the belly and green as grass.\nFOL: -Knows(Harry, me) & Kind(Harry) & BellyRound(Harry) & Green(Harry)\nTEXT: If you meet someone with rough skin who is cold from being outside, you'll notice they are nice.\nFOL: (RoughSkin(x) & Cold(x) & Outside(x) -> Nice(x))\nTEXT: Kind red people are green on the inside.\nFOL: (Kind(x) & Red(x) -> Green(x))\nTEXT: Even though young people are rough, they are still very red.\nFOL: (Young(x) & Rough(x) -> Red(x))\nTEXT: Nice people that are very green and even round shaped will be very young.\nFOL: (Nice(x) & Green(x) & Round(x) -> Young(x))\nTEXT: Round people who are kind tend to be nice.\nFOL: (Round(x) & Kind(x) -> Nice(x))\nTEXT: A green person that is rough and cold is often also nice.\nFOL: (Green(x) & Rough(x) & Cold(x) -> Nice(x))\nTEXT: Someone who is a young age and looks like they are round are also red.\nFOL: (Young(x) & Round(x) -> Red(x))\nTEXT: Fred is not kind.\nFOL: -Kind(fred)\n</EVALUATE>"
  ]
 },
 {
  "index": 74,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle needs the lion.\nFOL: NeedsTheLion(baldEagle)\nTEXT: The bald eagle visits the mouse.\nFOL: VisitsTheMouse(baldEagle)\nTEXT: The cow visits the bald eagle.\nFOL: VisitsTheBaldEagle(cow)\nTEXT: The lion is green.\nFOL: IsGreen(lion)\nTEXT: The lion sees the cow.\nFOL: SeesTheCow(lion)\nTEXT: The lion visits the cow.\nFOL: VisitsTheCow(lion)\nTEXT: The mouse is blue.\nFOL: IsBlue(mouse)\nTEXT: If the cow needs the mouse then the mouse sees the cow.\nFOL: (NeedsTheMouse(cow) -> SeesTheCow(mouse))\nTEXT: If something visits the cow and it is blue then the cow sees the mouse.\nFOL: (VisitsTheCow(x) & IsBlue(x) -> SeesTheMouse(mouse))\nTEXT: If something is green and it needs the lion then it needs the bald eagle.\nFOL: (IsGreen(x) & NeedsTheLion(x) -> NeedsTheBaldEagle(x))\nTEXT: If the mouse is blue then the mouse needs the lion.\nFOL: IsBlue(mouse) -> NeedsTheLion(mouse)\nTEXT: If something needs the lion then it is green.\nFOL: NeedsTheLion(x) -> IsGreen(x)\nTEXT: If something sees the lion and the lion does not need the cow then it is big.\nFOL: (SeesTheLion(x) & -NeedsTheCow(lion) -> IsBig(x))\nTEXT: The mouse needs the lion.\nFOL: NeedsTheLion(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle needs the lion.\nFOL: NeedsTheLion(baldEagle)\nTEXT: The bald eagle visits the mouse.\nFOL: VisitsTheMouse(baldEagle)\nTEXT: The cow visits the bald eagle.\nFOL: VisitsTheBaldEagle(cow)\nTEXT: The lion is green.\nFOL: Green(lion)\nTEXT: The lion sees the cow.\nFOL: SeesTheCow(lion)\nTEXT: The lion visits the cow.\nFOL: VisitsTheCow(lion)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: If the cow needs the mouse then the mouse sees the cow.\nFOL: NeedsTheMouse(cow) -> SeesTheCow(mouse)\nTEXT: If something visits the cow and it is blue then the cow sees the mouse.\nFOL: VisitsTheCow(x) & Blue(x) -> SeesTheMouse(mouse)\nTEXT: If something is green and it needs the lion then it needs the bald eagle.\nFOL: Green(x) & NeedsTheLion(x) -> NeedsTheBaldEagle(x)\nTEXT: If the mouse is blue then the mouse needs the lion.\nFOL: Blue(mouse) -> NeedsTheLion(mouse)\nTEXT: If something needs the lion then it is green.\nFOL: NeedsTheLion(x) -> Green(x)\nTEXT: If something sees the lion and the lion does not need the cow then it is big.\nFOL: SeesTheLion(x) & -NeedsTheCow(lion) -> Big(x)\nTEXT: The mouse needs the lion.\nFOL: NeedsTheLion(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle needs the lion.\nFOL: NeedsTheLion(baldEagle)\nTEXT: The bald eagle visits the mouse.\nFOL: VisitsTheMouse(baldEagle)\nTEXT: The cow visits the bald eagle.\nFOL: VisitsTheBaldEagle(cow)\nTEXT: The lion is green.\nFOL: Green(lion)\nTEXT: The lion sees the cow.\nFOL: SeesTheCow(lion)\nTEXT: The lion visits the cow.\nFOL: VisitsTheCow(lion)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: If the cow needs the mouse then the mouse sees the cow.\nFOL: (NeedsTheMouse(cow) -> SeesTheCow(mouse))\nTEXT: If something visits the cow and it is blue then the cow sees the mouse.\nFOL: (VisitsTheCow(x) & Blue(x) -> SeesTheMouse(mouse))\nTEXT: If something is green and it needs the lion then it needs the bald eagle.\nFOL: (Green(x) & NeedsTheLion(x) -> NeedsTheBaldEagle(x))\nTEXT: If the mouse is blue then the mouse needs the lion.\nFOL: Blue(mouse) -> NeedsTheLion(mouse)\nTEXT: If something needs the lion then it is green.\nFOL: NeedsTheLion(x) -> Green(x)\nTEXT: If something sees the lion and the lion does not need the cow then it is big.\nFOL: (SeesTheLion(x) & -NeedsTheCow(lion) -> Big(x))\nTEXT: The mouse needs the lion.\nFOL: NeedsTheLion(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle needs the lion.\nFOL: NeedsTheLion(baldEagle)\nTEXT: The bald eagle visits the mouse.\nFOL: VisitsTheMouse(baldEagle)\nTEXT: The cow visits the bald eagle.\nFOL: VisitsTheBaldEagle(cow)\nTEXT: The lion is green.\nFOL: Green(lion)\nTEXT: The lion sees the cow.\nFOL: SeesTheCow(lion)\nTEXT: The lion visits the cow.\nFOL: VisitsTheCow(lion)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: If the cow needs the mouse then the mouse sees the cow.\nFOL: (NeedsTheMouse(cow) -> SeesTheCow(mouse))\nTEXT: If something visits the cow and it is blue then the cow sees the mouse.\nFOL: (VisitsTheCow(x) & Blue(x) -> SeesTheMouse(mouse))\nTEXT: If something is green and it needs the lion then it needs the bald eagle.\nFOL: (Green(x) & NeedsTheLion(x) -> NeedsTheBaldEagle(x))\nTEXT: If the mouse is blue then the mouse needs the lion.\nFOL: Blue(mouse) -> NeedsTheLion(mouse)\nTEXT: If something needs the lion then it is green.\nFOL: (NeedsTheLion(x) -> Green(x))\nTEXT: If something sees the lion and the lion does not need the cow then it is big.\nFOL: (SeesTheLion(x) & -NeedsTheCow(lion) -> Big(x))\nTEXT: The mouse needs the lion.\nFOL: NeedsTheLion(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle needs the lion.\nFOL: NeedsTheLion(baldEagle)\nTEXT: The bald eagle visits the mouse.\nFOL: VisitsTheMouse(baldEagle)\nTEXT: The cow visits the bald eagle.\nFOL: VisitsTheBaldEagle(cow)\nTEXT: The lion is green.\nFOL: Green(lion)\nTEXT: The lion sees the cow.\nFOL: SeesTheCow(lion)\nTEXT: The lion visits the cow.\nFOL: VisitsTheCow(lion)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: If the cow needs the mouse then the mouse sees the cow.\nFOL: (NeedsTheMouse(cow) -> SeesTheCow(mouse))\nTEXT: If something visits the cow and it is blue then the cow sees the mouse.\nFOL: (VisitsTheCow(x) & Blue(x) -> SeesTheMouse(mouse))\nTEXT: If something is green and it needs the lion then it needs the bald eagle.\nFOL: (Green(x) & NeedsTheLion(x) -> NeedsTheBaldEagle(x))\nTEXT: If the mouse is blue then the mouse needs the lion.\nFOL: Blue(mouse) -> NeedsTheLion(mouse)\nTEXT: If something needs the lion then it is green.\nFOL: NeedsTheLion(x) -> Green(x)\nTEXT: If something sees the lion and the lion does not need the cow then it is big.\nFOL: (SeesTheLion(x) &!NeedsTheCow(lion) -> Big(x))\nTEXT: The mouse needs the lion.\nFOL: NeedsTheLion(mouse)\n</EVALUATE>"
  ]
 },
 {
  "index": 75,
  "responses": [
   "<EVALUATE>\nTEXT: The cat chases the dog.\nFOL: Cat(chasesDog)\nTEXT: The cat needs the cow.\nFOL: Cat(needsCow)\nTEXT: The cat sees the squirrel.\nFOL: Cat(seesSquirrel)\nTEXT: The cow chases the cat.\nFOL: Cow(chasesCat)\nTEXT: The cow chases the squirrel.\nFOL: Cow(chasesSquirrel)\nTEXT: The cow is kind.\nFOL: Cow(isKind)\nTEXT: The cow is red.\nFOL: Cow(isRed)\nTEXT: The cow needs the cat.\nFOL: Cow(needsCat)\nTEXT: The cow sees the squirrel.\nFOL: Cow(seesSquirrel)\nTEXT: The dog chases the squirrel.\nFOL: Dog(chasesSquirrel)\nTEXT: The dog is nice.\nFOL: Dog(isNice)\nTEXT: The dog needs the cow.\nFOL: Dog(needsCow)\nTEXT: The dog sees the cat.\nFOL: Dog(seesCat)\nTEXT: The squirrel is blue.\nFOL: Squirrel(isBlue)\nTEXT: The squirrel needs the cat.\nFOL: Squirrel(needsCat)\nTEXT: The squirrel sees the cow.\nFOL: Squirrel(seesCow)\nTEXT: If someone sees the squirrel then they need the cow.\nFOL: all x. (SeeSquirrel(x) -> NeedsCow(x))\nTEXT: If someone is kind then they need the dog.\nFOL: all x. (IsKind(x) -> NeedsDog(x))\nTEXT: If the cow needs the dog and the cow chases the cat then the dog is kind.\nFOL: (Cow(needsDog) & Cow(chasesCat)) -> IsKind(Dog)\nTEXT: The cow needs the dog.\nFOL: NeedsDog(Cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the dog.\nFOL: Cat(chasesDog)\nTEXT: The cat needs the cow.\nFOL: Cat(needsCow)\nTEXT: The cat sees the squirrel.\nFOL: Cat(seesSquirrel)\nTEXT: The cow chases the cat.\nFOL: Cow(chasesCat)\nTEXT: The cow chases the squirrel.\nFOL: Cow(chasesSquirrel)\nTEXT: The cow is kind.\nFOL: Cow(isKind)\nTEXT: The cow is red.\nFOL: Cow(isRed)\nTEXT: The cow needs the cat.\nFOL: Cow(needsCat)\nTEXT: The cow sees the squirrel.\nFOL: Cow(seesSquirrel)\nTEXT: The dog chases the squirrel.\nFOL: Dog(chasesSquirrel)\nTEXT: The dog is nice.\nFOL: Dog(isNice)\nTEXT: The dog needs the cow.\nFOL: Dog(needsCow)\nTEXT: The dog sees the cat.\nFOL: Dog(seesCat)\nTEXT: The squirrel is blue.\nFOL: Squirrel(isBlue)\nTEXT: The squirrel needs the cat.\nFOL: Squirrel(needsCat)\nTEXT: The squirrel sees the cow.\nFOL: Squirrel(seesCow)\nTEXT: If someone sees the squirrel then they need the cow.\nFOL: all x. (SeeSquirrel(x) -> NeedsCow(x))\nTEXT: If someone is kind then they need the dog.\nFOL: all x. (IsKind(x) -> NeedsDog(x))\nTEXT: If the cow needs the dog and the cow chases the cat then the dog is kind.\nFOL: (Cow(needsDog) & Cow(chasesCat)) -> IsKind(Dog)\nTEXT: The cow needs the dog.\nFOL: Cow(needsDog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the dog.\nFOL: Cat(chases(Dog))\nTEXT: The cat needs the cow.\nFOL: Cat(needs(Cow))\nTEXT: The cat sees the squirrel.\nFOL: Cat(sees(Squirrel))\nTEXT: The cow chases the cat.\nFOL: Cow(chases(Cat))\nTEXT: The cow chases the squirrel.\nFOL: Cow(chases(Squirrel))\nTEXT: The cow is kind.\nFOL: Cow(isKind)\nTEXT: The cow is red.\nFOL: Cow(isRed)\nTEXT: The cow needs the cat.\nFOL: Cow(needs(Cat))\nTEXT: The cow sees the squirrel.\nFOL: Cow(sees(Squirrel))\nTEXT: The dog chases the squirrel.\nFOL: Dog(chases(Squirrel))\nTEXT: The dog is nice.\nFOL: Dog(isNice)\nTEXT: The dog needs the cow.\nFOL: Dog(needs(Cow))\nTEXT: The dog sees the cat.\nFOL: Dog(sees(Cat))\nTEXT: The squirrel is blue.\nFOL: Squirrel(isBlue)\nTEXT: The squirrel needs the cat.\nFOL: Squirrel(needs(Cat))\nTEXT: The squirrel sees the cow.\nFOL: Squirrel(sees(Cow))\nTEXT: If someone sees the squirrel then they need the cow.\nFOL: exists x. (sees(x, Squirrel) -> needs(x, Cow))\nTEXT: If someone is kind then they need the dog.\nFOL: exists x. (isKind(x) -> needs(x, Dog))\nTEXT: If the cow needs the dog and the cow chases the cat then the dog is kind.\nFOL: (Cow(needs(Dog)) & Cow(chases(Cat))) -> isKind(Dog)\nTEXT: The cow needs the dog.\nFOL: Cow(needs(Dog))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the dog.\nFOL: Cat(chasesDog)\nTEXT: The cat needs the cow.\nFOL: Cat(needsCow)\nTEXT: The cat sees the squirrel.\nFOL: Cat(seesSquirrel)\nTEXT: The cow chases the cat.\nFOL: Cow(chasesCat)\nTEXT: The cow chases the squirrel.\nFOL: Cow(chasesSquirrel)\nTEXT: The cow is kind.\nFOL: Cow(isKind)\nTEXT: The cow is red.\nFOL: Cow(isRed)\nTEXT: The cow needs the cat.\nFOL: Cow(needsCat)\nTEXT: The cow sees the squirrel.\nFOL: Cow(seesSquirrel)\nTEXT: The dog chases the squirrel.\nFOL: Dog(chasesSquirrel)\nTEXT: The dog is nice.\nFOL: Dog(isNice)\nTEXT: The dog needs the cow.\nFOL: Dog(needsCow)\nTEXT: The dog sees the cat.\nFOL: Dog(seesCat)\nTEXT: The squirrel is blue.\nFOL: Squirrel(isBlue)\nTEXT: The squirrel needs the cat.\nFOL: Squirrel(needsCat)\nTEXT: The squirrel sees the cow.\nFOL: Squirrel(seesCow)\nTEXT: If someone sees the squirrel then they need the cow.\nFOL: all x. (SeeSquirrel(x) -> NeedsCow(x))\nTEXT: If someone is kind then they need the dog.\nFOL: all x. (IsKind(x) -> NeedsDog(x))\nTEXT: If the cow needs the dog and the cow chases the cat then the dog is kind.\nFOL: (NeedsDog(Cow) & ChasesCat(Cow)) -> IsKind(Dog)\nTEXT: The cow needs the dog.\nFOL: NeedsDog(Cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat chases the dog.\nFOL: Cat(chasesDog)\nTEXT: The cat needs the cow.\nFOL: Cat(needsCow)\nTEXT: The cat sees the squirrel.\nFOL: Cat(seesSquirrel)\nTEXT: The cow chases the cat.\nFOL: Cow(chasesCat)\nTEXT: The cow chases the squirrel.\nFOL: Cow(chasesSquirrel)\nTEXT: The cow is kind.\nFOL: Cow(isKind)\nTEXT: The cow is red.\nFOL: Cow(isRed)\nTEXT: The cow needs the cat.\nFOL: Cow(needsCat)\nTEXT: The cow sees the squirrel.\nFOL: Cow(seesSquirrel)\nTEXT: The dog chases the squirrel.\nFOL: Dog(chasesSquirrel)\nTEXT: The dog is nice.\nFOL: Dog(isNice)\nTEXT: The dog needs the cow.\nFOL: Dog(needsCow)\nTEXT: The dog sees the cat.\nFOL: Dog(seesCat)\nTEXT: The squirrel is blue.\nFOL: Squirrel(isBlue)\nTEXT: The squirrel needs the cat.\nFOL: Squirrel(needsCat)\nTEXT: The squirrel sees the cow.\nFOL: Squirrel(seesCow)\nTEXT: If someone sees the squirrel then they need the cow.\nFOL: all x. (SeeSquirrel(x) -> NeedsCow(x))\nTEXT: If someone is kind then they need the dog.\nFOL: all x. (IsKind(x) -> NeedsDog(x))\nTEXT: If the cow needs the dog and the cow chases the cat then the dog is kind.\nFOL: (Cow(needsDog) & Cow(chasesCat) -> IsKind(Dog))\nTEXT: The cow needs the dog.\nFOL: NeedsDog(Cow)\n</EVALUATE>"
  ]
 },
 {
  "index": 76,
  "responses": [
   "<EVALUATE>\nTEXT: The lion chases the tiger.\nFOL: Lion(lion) & Tiger(tiger) & Chase(Lion, Tiger)\nTEXT: The lion eats the rabbit.\nFOL: Lion(lion) & Rabbit(rabbit) & Eat(Lion, Rabbit)\nTEXT: The lion eats the tiger.\nFOL: Lion(lion) & Tiger(tiger) & Eat(Lion, Tiger)\nTEXT: The lion is young.\nFOL: Lion(lion) & Young(Lion)\nTEXT: The rabbit chases the lion.\nFOL: Rabbit(rabbit) & Lion(lion) & Chase(Rabbit, Lion)\nTEXT: The rabbit eats the lion.\nFOL: Rabbit(rabbit) & Lion(lion) & Eat(Rabbit, Lion)\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(rabbit) & Tiger(tiger) & Eat(Rabbit, Tiger)\nTEXT: The rabbit is big.\nFOL: Rabbit(rabbit) & Big(Rabbit)\nTEXT: The rabbit is blue.\nFOL: Rabbit(rabbit) & Blue(Rabbit)\nTEXT: The rabbit is young.\nFOL: Rabbit(rabbit) & Young(Rabbit)\nTEXT: The rabbit needs the lion.\nFOL: Rabbit(rabbit) & Lion(lion) & Need(Rabbit, Lion)\nTEXT: The rabbit needs the tiger.\nFOL: Rabbit(rabbit) & Tiger(tiger) & Need(Rabbit, Tiger)\nTEXT: The tiger chases the rabbit.\nFOL: Tiger(tiger) & Rabbit(rabbit) & Chase(Tiger, Rabbit)\nTEXT: The tiger eats the lion.\nFOL: Tiger(tiger) & Lion(lion) & Eat(Tiger, Lion)\nTEXT: The tiger needs the lion.\nFOL: Tiger(tiger) & Lion(lion) & Need(Tiger, Lion)\nTEXT: If someone chases the rabbit then they are young.\nFOL: exists x. (Chase(x, Rabbit) -> Young(x))\nTEXT: If the lion is young then the lion chases the tiger.\nFOL: Young(Lion) -> Chase(Lion, Tiger)\nTEXT: If someone needs the tiger and the tiger eats the rabbit then the tiger chases the rabbit.\nFOL: exists x. (Need(x, Tiger) & Eat(Tiger, Rabbit) -> Chase(Tiger, Rabbit))\nTEXT: All kind, blue people are red.\nFOL: all x. (Kind(x) & Blue(x) -> Red(x))\nTEXT: If someone is big and they chase the lion then they need the lion.\nFOL: exists x. (Big(x) & Chase(x, Lion) -> Need(x, Lion))\nTEXT: If someone needs the lion and they eat the lion then the lion needs the tiger.\nFOL: exists x. (Need(x, Lion) & Eat(x, Lion) -> Need(Lion, Tiger))\nTEXT: If someone chases the lion then they need the tiger.\nFOL: exists x. (Chase(x, Lion) -> Need(x, Tiger))\nTEXT: If someone is young then they chase the lion.\nFOL: exists x. (Young(x) -> Chase(x, Lion))\nTEXT: The rabbit does not chase the rabbit.\nFOL: -Chase(Rabbit, Rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The lion chases the tiger.\nFOL: Lion(lion) & Tiger(tiger) & Chase(Lion, Tiger)\nTEXT: The lion eats the rabbit.\nFOL: Lion(lion) & Rabbit(rabbit) & Eat(Lion, Rabbit)\nTEXT: The lion eats the tiger.\nFOL: Lion(lion) & Tiger(tiger) & Eat(Lion, Tiger)\nTEXT: The lion is young.\nFOL: Lion(lion) & Young(Lion)\nTEXT: The rabbit chases the lion.\nFOL: Rabbit(rabbit) & Lion(lion) & Chase(Rabbit, Lion)\nTEXT: The rabbit eats the lion.\nFOL: Rabbit(rabbit) & Lion(lion) & Eat(Rabbit, Lion)\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(rabbit) & Tiger(tiger) & Eat(Rabbit, Tiger)\nTEXT: The rabbit is big.\nFOL: Rabbit(rabbit) & Big(Rabbit)\nTEXT: The rabbit is blue.\nFOL: Rabbit(rabbit) & Blue(Rabbit)\nTEXT: The rabbit is young.\nFOL: Rabbit(rabbit) & Young(Rabbit)\nTEXT: The rabbit needs the lion.\nFOL: Rabbit(rabbit) & Lion(lion) & Need(Rabbit, Lion)\nTEXT: The rabbit needs the tiger.\nFOL: Rabbit(rabbit) & Tiger(tiger) & Need(Rabbit, Tiger)\nTEXT: The tiger chases the rabbit.\nFOL: Tiger(tiger) & Rabbit(rabbit) & Chase(Tiger, Rabbit)\nTEXT: The tiger eats the lion.\nFOL: Tiger(tiger) & Lion(lion) & Eat(Tiger, Lion)\nTEXT: The tiger needs the lion.\nFOL: Tiger(tiger) & Lion(lion) & Need(Tiger, Lion)\nTEXT: If someone chases the rabbit then they are young.\nFOL: exists x. (Chase(x, Rabbit) -> Young(x))\nTEXT: If the lion is young then the lion chases the tiger.\nFOL: Young(Lion) -> Chase(Lion, Tiger)\nTEXT: If someone needs the tiger and the tiger eats the rabbit then the tiger chases the rabbit.\nFOL: exists x. (Need(x, Tiger) & Eat(Tiger, Rabbit) -> Chase(Tiger, Rabbit))\nTEXT: All kind, blue people are red.\nFOL: all x. (Kind(x) & Blue(x) -> Red(x))\nTEXT: If someone is big and they chase the lion then they need the lion.\nFOL: exists x. (Big(x) & Chase(x, Lion) -> Need(x, Lion))\nTEXT: If someone needs the lion and they eat the lion then the lion needs the tiger.\nFOL: exists x. (Need(x, Lion) & Eat(x, Lion) -> Need(Lion, Tiger))\nTEXT: If someone chases the lion then they need the tiger.\nFOL: exists x. (Chase(x, Lion) -> Need(x, Tiger))\nTEXT: If someone is young then they chase the lion.\nFOL: Young(x) -> Chase(x, Lion)\nTEXT: The rabbit does not chase the rabbit.\nFOL: -Chase(Rabbit, Rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The lion chases the tiger.\nFOL: Lion(lion) & Tiger(tiger) & Chase(Lion, Tiger)\nTEXT: The lion eats the rabbit.\nFOL: Lion(lion) & Rabbit(rabbit) & Eat(Lion, Rabbit)\nTEXT: The lion eats the tiger.\nFOL: Lion(lion) & Tiger(tiger) & Eat(Lion, Tiger)\nTEXT: The lion is young.\nFOL: Lion(lion) & Young(Lion)\nTEXT: The rabbit chases the lion.\nFOL: Rabbit(rabbit) & Lion(lion) & Chase(Rabbit, Lion)\nTEXT: The rabbit eats the lion.\nFOL: Rabbit(rabbit) & Lion(lion) & Eat(Rabbit, Lion)\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(rabbit) & Tiger(tiger) & Eat(Rabbit, Tiger)\nTEXT: The rabbit is big.\nFOL: Rabbit(rabbit) & Big(Rabbit)\nTEXT: The rabbit is blue.\nFOL: Rabbit(rabbit) & Blue(Rabbit)\nTEXT: The rabbit is young.\nFOL: Rabbit(rabbit) & Young(Rabbit)\nTEXT: The rabbit needs the lion.\nFOL: Rabbit(rabbit) & Lion(lion) & Need(Rabbit, Lion)\nTEXT: The rabbit needs the tiger.\nFOL: Rabbit(rabbit) & Tiger(tiger) & Need(Rabbit, Tiger)\nTEXT: The tiger chases the rabbit.\nFOL: Tiger(tiger) & Rabbit(rabbit) & Chase(Tiger, Rabbit)\nTEXT: The tiger eats the lion.\nFOL: Tiger(tiger) & Lion(lion) & Eat(Tiger, Lion)\nTEXT: The tiger needs the lion.\nFOL: Tiger(tiger) & Lion(lion) & Need(Tiger, Lion)\nTEXT: If someone chases the rabbit then they are young.\nFOL: exists x. (Chase(x, Rabbit) -> Young(x))\nTEXT: If the lion is young then the lion chases the tiger.\nFOL: Young(Lion) -> Chase(Lion, Tiger)\nTEXT: If someone needs the tiger and the tiger eats the rabbit then the tiger chases the rabbit.\nFOL: exists x. ((Need(x, Tiger) & Eat(Tiger, Rabbit)) -> Chase(Tiger, Rabbit))\nTEXT: All kind, blue people are red.\nFOL: all x. (Kind(x) & Blue(x) -> Red(x))\nTEXT: If someone is big and they chase the lion then they need the lion.\nFOL: exists x. ((Big(x) & Chase(x, Lion)) -> Need(x, Lion))\nTEXT: If someone needs the lion and they eat the lion then the lion needs the tiger.\nFOL: exists x. ((Need(x, Lion) & Eat(x, Lion)) -> Need(Lion, Tiger))\nTEXT: If someone chases the lion then they need the tiger.\nFOL: exists x. (Chase(x, Lion) -> Need(x, Tiger))\nTEXT: If someone is young then they chase the lion.\nFOL: exists x. (Young(x) -> Chase(x, Lion))\nTEXT: The rabbit does not chase the rabbit.\nFOL: -Chase(Rabbit, Rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The lion chases the tiger.\nFOL: Lion(lion) & Tiger(tiger) & Chase(Lion, Tiger)\nTEXT: The lion eats the rabbit.\nFOL: Lion(lion) & Rabbit(rabbit) & Eat(Lion, Rabbit)\nTEXT: The lion eats the tiger.\nFOL: Lion(lion) & Tiger(tiger) & Eat(Lion, Tiger)\nTEXT: The lion is young.\nFOL: Lion(lion) & Young(Lion)\nTEXT: The rabbit chases the lion.\nFOL: Rabbit(rabbit) & Lion(lion) & Chase(Rabbit, Lion)\nTEXT: The rabbit eats the lion.\nFOL: Rabbit(rabbit) & Lion(lion) & Eat(Rabbit, Lion)\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(rabbit) & Tiger(tiger) & Eat(Rabbit, Tiger)\nTEXT: The rabbit is big.\nFOL: Rabbit(rabbit) & Big(Rabbit)\nTEXT: The rabbit is blue.\nFOL: Rabbit(rabbit) & Blue(Rabbit)\nTEXT: The rabbit is young.\nFOL: Rabbit(rabbit) & Young(Rabbit)\nTEXT: The rabbit needs the lion.\nFOL: Rabbit(rabbit) & Lion(lion) & Need(Rabbit, Lion)\nTEXT: The rabbit needs the tiger.\nFOL: Rabbit(rabbit) & Tiger(tiger) & Need(Rabbit, Tiger)\nTEXT: The tiger chases the rabbit.\nFOL: Tiger(tiger) & Rabbit(rabbit) & Chase(Tiger, Rabbit)\nTEXT: The tiger eats the lion.\nFOL: Tiger(tiger) & Lion(lion) & Eat(Tiger, Lion)\nTEXT: The tiger needs the lion.\nFOL: Tiger(tiger) & Lion(lion) & Need(Tiger, Lion)\nTEXT: If someone chases the rabbit then they are young.\nFOL: all x. (Chase(x, Rabbit) -> Young(x))\nTEXT: If the lion is young then the lion chases the tiger.\nFOL: Lion(lion) & Young(Lion) & Chase(Lion, Tiger)\nTEXT: If someone needs the tiger and the tiger eats the rabbit then the tiger chases the rabbit.\nFOL: all x. ((Need(x, Tiger) & Eat(Tiger, Rabbit)) -> Chase(Tiger, Rabbit))\nTEXT: All kind, blue people are red.\nFOL: all x. (Kind(x) & Blue(x) -> Red(x))\nTEXT: If someone is big and they chase the lion then they need the lion.\nFOL: all x. ((Big(x) & Chase(x, Lion)) -> Need(x, Lion))\nTEXT: If someone needs the lion and they eat the lion then the lion needs the tiger.\nFOL: all x. ((Need(x, Lion) & Eat(x, Lion)) -> Need(Lion, Tiger))\nTEXT: If someone chases the lion then they need the tiger.\nFOL: all x. (Chase(x, Lion) -> Need(x, Tiger))\nTEXT: If someone is young then they chase the lion.\nFOL: all x. (Young(x) -> Chase(x, Lion))\nTEXT: The rabbit does not chase the rabbit.\nFOL: -Chase(Rabbit, Rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The lion chases the tiger.\nFOL: Lion(lion) & Tiger(tiger) & Chase(Lion, Tiger)\nTEXT: The lion eats the rabbit.\nFOL: Lion(lion) & Rabbit(rabbit) & Eat(Lion, Rabbit)\nTEXT: The lion eats the tiger.\nFOL: Lion(lion) & Tiger(tiger) & Eat(Lion, Tiger)\nTEXT: The lion is young.\nFOL: Lion(lion) & Young(Lion)\nTEXT: The rabbit chases the lion.\nFOL: Rabbit(rabbit) & Lion(lion) & Chase(Rabbit, Lion)\nTEXT: The rabbit eats the lion.\nFOL: Rabbit(rabbit) & Lion(lion) & Eat(Rabbit, Lion)\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(rabbit) & Tiger(tiger) & Eat(Rabbit, Tiger)\nTEXT: The rabbit is big.\nFOL: Rabbit(rabbit) & Big(Rabbit)\nTEXT: The rabbit is blue.\nFOL: Rabbit(rabbit) & Blue(Rabbit)\nTEXT: The rabbit is young.\nFOL: Rabbit(rabbit) & Young(Rabbit)\nTEXT: The rabbit needs the lion.\nFOL: Rabbit(rabbit) & Lion(lion) & Need(Rabbit, Lion)\nTEXT: The rabbit needs the tiger.\nFOL: Rabbit(rabbit) & Tiger(tiger) & Need(Rabbit, Tiger)\nTEXT: The tiger chases the rabbit.\nFOL: Tiger(tiger) & Rabbit(rabbit) & Chase(Tiger, Rabbit)\nTEXT: The tiger eats the lion.\nFOL: Tiger(tiger) & Lion(lion) & Eat(Tiger, Lion)\nTEXT: The tiger needs the lion.\nFOL: Tiger(tiger) & Lion(lion) & Need(Tiger, Lion)\nTEXT: If someone chases the rabbit then they are young.\nFOL: exists x. (Chase(x, Rabbit) -> Young(x))\nTEXT: If the lion is young then the lion chases the tiger.\nFOL: Young(Lion) -> Chase(Lion, Tiger)\nTEXT: If someone needs the tiger and the tiger eats the rabbit then the tiger chases the rabbit.\nFOL: exists x. (Need(x, Tiger) & Eat(Tiger, Rabbit) -> Chase(Tiger, Rabbit))\nTEXT: All kind, blue people are red.\nFOL: all x. (Kind(x) & Blue(x) -> Red(x))\nTEXT: If someone is big and they chase the lion then they need the lion.\nFOL: exists x. ((Big(x) & Chase(x, Lion)) -> Need(x, Lion))\nTEXT: If someone needs the lion and they eat the lion then the lion needs the tiger.\nFOL: exists x. (Need(x, Lion) & Eat(x, Lion) -> Need(Lion, Tiger))\nTEXT: If someone chases the lion then they need the tiger.\nFOL: exists x. (Chase(x, Lion) -> Need(x, Tiger))\nTEXT: If someone is young then they chase the lion.\nFOL: exists x. (Young(x) -> Chase(x, Lion))\nTEXT: The rabbit does not chase the rabbit.\nFOL: -Chase(Rabbit, Rabbit)\n</EVALUATE>"
  ]
 },
 {
  "index": 77,
  "responses": [
   "<EVALUATE>\nTEXT: The dog chases the tiger.\nFOL: Dog(chase(tiger))\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The dog is kind.\nFOL: Kind(dog)\nTEXT: The dog is red.\nFOL: Red(dog)\nTEXT: The dog does not see the tiger.\nFOL: -See(dog, tiger)\nTEXT: The dog visits the tiger.\nFOL: Visit(dog, tiger)\nTEXT: The tiger does not chase the dog.\nFOL: -Chase(tiger, dog)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger is red.\nFOL: Red(tiger)\nTEXT: The tiger visits the dog.\nFOL: Visit(tiger, dog)\nTEXT: If something is big then it does not visit the dog.\nFOL: all x. (Big(x) -> -Visit(x, dog))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x. (See(x, tiger) -> Big(tiger))\nTEXT: Kind things are big.\nFOL: all x. (Kind(x) -> Big(x))\nTEXT: If something visits the tiger then it is kind.\nFOL: all x. (Visit(x, tiger) -> Kind(x))\nTEXT: If something sees the tiger then it sees the dog.\nFOL: all x. (See(x, tiger) -> See(x, dog))\nTEXT: If something is green then it sees the dog.\nFOL: all x. (Green(x) -> See(x, dog))\nTEXT: If something visits the tiger and the tiger is not big then the tiger is not green.\nFOL: all x. ((Visit(x, tiger) & -Big(tiger)) -> -Green(tiger))\nTEXT: If something is red and it does not visit the dog then it chases the dog.\nFOL: all x. ((Red(x) & -Visit(x, dog)) -> Chase(x, dog))\nTEXT: The tiger does not chase the dog.\nFOL: -Chase(tiger, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog chases the tiger.\nFOL: Dog(chase(tiger))\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The dog is kind.\nFOL: Kind(dog)\nTEXT: The dog is red.\nFOL: Red(dog)\nTEXT: The dog does not see the tiger.\nFOL: -See(dog, tiger)\nTEXT: The dog visits the tiger.\nFOL: Visit(dog, tiger)\nTEXT: The tiger does not chase the dog.\nFOL: -Chase(tiger, dog)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger is red.\nFOL: Red(tiger)\nTEXT: The tiger visits the dog.\nFOL: Visit(tiger, dog)\nTEXT: If something is big then it does not visit the dog.\nFOL: all x. (Big(x) -> -Visit(x, dog))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x. (See(x, tiger) -> Big(tiger))\nTEXT: Kind things are big.\nFOL: all x. (Kind(x) -> Big(x))\nTEXT: If something visits the tiger then it is kind.\nFOL: all x. (Visit(x, tiger) -> Kind(x))\nTEXT: If something sees the tiger then it sees the dog.\nFOL: all x. (See(x, tiger) -> See(x, dog))\nTEXT: If something is green then it sees the dog.\nFOL: all x. (Green(x) -> See(x, dog))\nTEXT: If something visits the tiger and the tiger is not big then the tiger is not green.\nFOL: all x. ((Visit(x, tiger) & -Big(tiger)) -> -Green(tiger))\nTEXT: If something is red and it does not visit the dog then it chases the dog.\nFOL: all x. (Red(x) & -Visit(x, dog) -> Chase(x, dog))\nTEXT: The tiger does not chase the dog.\nFOL: -Chase(tiger, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog chases the tiger.\nFOL: Dog(chase(tiger))\nTEXT: The dog is green.\nFOL: Green(dog)\nTEXT: The dog is kind.\nFOL: Kind(dog)\nTEXT: The dog is red.\nFOL: Red(dog)\nTEXT: The dog does not see the tiger.\nFOL: -See(dog, tiger)\nTEXT: The dog visits the tiger.\nFOL: Visit(dog, tiger)\nTEXT: The tiger does not chase the dog.\nFOL: -Chase(tiger, dog)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger is red.\nFOL: Red(tiger)\nTEXT: The tiger visits the dog.\nFOL: Visit(tiger, dog)\nTEXT: If something is big then it does not visit the dog.\nFOL: all x. (Big(x) -> -Visit(x, dog))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x. (See(x, tiger) -> Big(tiger))\nTEXT: Kind things are big.\nFOL: all x. (Kind(x) -> Big(x))\nTEXT: If something visits the tiger then it is kind.\nFOL: all x. (Visit(x, tiger) -> Kind(x))\nTEXT: If something sees the tiger then it sees the dog.\nFOL: all x. (See(x, tiger) -> See(x, dog))\nTEXT: If something is green then it sees the dog.\nFOL: all x. (Green(x) -> See(x, dog))\nTEXT: If something visits the tiger and the tiger is not big then the tiger is not green.\nFOL: all x. (Visit(x, tiger) & -Big(tiger) -> -Green(tiger))\nTEXT: If something is red and it does not visit the dog then it chases the dog.\nFOL: all x. (Red(x) & -Visit(x, dog) -> Chase(x, dog))\nTEXT: The tiger does not chase the dog.\nFOL: -Chase(tiger, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog chases the tiger.\nFOL: Dog(chase(tiger))\nTEXT: The dog is green.\nFOL: Dog(green)\nTEXT: The dog is kind.\nFOL: Dog(kind)\nTEXT: The dog is red.\nFOL: Dog(red)\nTEXT: The dog does not see the tiger.\nFOL: -Dog(see(tiger))\nTEXT: The dog visits the tiger.\nFOL: Dog(visit(tiger))\nTEXT: The tiger does not chase the dog.\nFOL: -Tiger(chase(dog))\nTEXT: The tiger is green.\nFOL: Tiger(green)\nTEXT: The tiger is red.\nFOL: Tiger(red)\nTEXT: The tiger visits the dog.\nFOL: Tiger(visit(dog))\nTEXT: If something is big then it does not visit the dog.\nFOL: all x. (Big(x) -> -Dog(visit(x)))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x. (Dog(see(tiger)) -> Tiger(Big))\nTEXT: Kind things are big.\nFOL: all x. (Kind(x) -> Big(x))\nTEXT: If something visits the tiger then it is kind.\nFOL: all x. (Dog(visit(tiger)) -> Kind(x))\nTEXT: If something sees the tiger then it sees the dog.\nFOL: all x. (Dog(see(tiger)) -> Dog(see(x)))\nTEXT: If something is green then it sees the dog.\nFOL: all x. (Dog(see(x)) -> Green(x))\nTEXT: If something visits the tiger and the tiger is not big then the tiger is not green.\nFOL: all x. ((Dog(visit(tiger)) & -Tiger(Big)) -> -Tiger(green))\nTEXT: If something is red and it does not visit the dog then it chases the dog.\nFOL: all x. ((Red(x) & -Dog(visit(x))) -> Tiger(chase(x)))\nTEXT: The tiger does not chase the dog.\nFOL: -Tiger(chase(dog))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog chases the tiger.\nFOL: Dog(chase(tiger))\nTEXT: The dog is green.\nFOL: Dog(green)\nTEXT: The dog is kind.\nFOL: Dog(kind)\nTEXT: The dog is red.\nFOL: Dog(red)\nTEXT: The dog does not see the tiger.\nFOL: -Dog(see(tiger))\nTEXT: The dog visits the tiger.\nFOL: Dog(visit(tiger))\nTEXT: The tiger does not chase the dog.\nFOL: -Tiger(chase(dog))\nTEXT: The tiger is green.\nFOL: Tiger(green)\nTEXT: The tiger is red.\nFOL: Tiger(red)\nTEXT: The tiger visits the dog.\nFOL: Tiger(visit(dog))\nTEXT: If something is big then it does not visit the dog.\nFOL: all x. (Big(x) -> -Dog(visit(x)))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: all x. (Dog(see(tiger)) -> Tiger(Big))\nTEXT: Kind things are big.\nFOL: all x. (Kind(x) -> Big(x))\nTEXT: If something visits the tiger then it is kind.\nFOL: all x. (Dog(visit(tiger)) -> Kind(x))\nTEXT: If something sees the tiger then it sees the dog.\nFOL: all x. (Dog(see(tiger)) -> Dog(see(x)))\nTEXT: If something is green then it sees the dog.\nFOL: all x. (Green(x) -> Dog(see(x)))\nTEXT: If something visits the tiger and the tiger is not big then the tiger is not green.\nFOL: all x. ((Dog(visit(tiger)) & -Tiger(Big)) -> -Tiger(green))\nTEXT: If something is red and it does not visit the dog then it chases the dog.\nFOL: all x. ((Red(x) & -Dog(visit(x))) -> Tiger(chase(x)))\nTEXT: The tiger does not chase the dog.\nFOL: -Tiger(chase(dog))\n</EVALUATE>"
  ]
 },
 {
  "index": 78,
  "responses": [
   "<EVALUATE>\nTEXT: The cow does not chase the dog.\nFOL: -Chase(cow, dog)\nTEXT: The dog is kind.\nFOL: Kind(dog)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger chases the dog.\nFOL: Chase(tiger, dog)\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: If something is green then it chases the tiger.\nFOL: all x. (Green(x) -> Chase(x, tiger))\nTEXT: If the cow sees the dog then the dog sees the rabbit.\nFOL: Chase(cow, dog) -> Chase(dog, rabbit)\nTEXT: The rabbit sees the rabbit.\nFOL: Chase(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow does not chase the dog.\nFOL: -Chase(Cow, Dog)\nTEXT: The dog is kind.\nFOL: Kind(Dog)\nTEXT: The rabbit is round.\nFOL: Round(Rabbit)\nTEXT: The tiger chases the dog.\nFOL: Chase(Tiger, Dog)\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: If something is green then it chases the tiger.\nFOL: all x. (Green(x) -> Chase(x, Tiger))\nTEXT: If the cow sees the dog then the dog sees the rabbit.\nFOL: Chase(Cow, Dog) -> Chase(Dog, Rabbit)\nTEXT: The rabbit sees the rabbit.\nFOL: Chase(Rabbit, Rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow does not chase the dog.\nFOL: -Chase(cow, dog)\n\nTEXT: The dog is kind.\nFOL: Kind(dog)\n\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\n\nTEXT: The tiger chases the dog.\nFOL: Chase(tiger, dog)\n\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\n\nTEXT: If something is green then it chases the tiger.\nFOL: all x. (Green(x) -> Chase(x, tiger))\n\nTEXT: If the cow sees the dog then the dog sees the rabbit.\nFOL: Chase(cow, dog) -> Chase(dog, rabbit)\n\nTEXT: The rabbit sees the rabbit.\nFOL: Chase(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow does not chase the dog.\nFOL: -Chase(Cow, Dog)\n\nTEXT: The dog is kind.\nFOL: Kind(Dog)\n\nTEXT: The rabbit is round.\nFOL: Round(Rabbit)\n\nTEXT: The tiger chases the dog.\nFOL: Chase(Tiger, Dog)\n\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\n\nTEXT: If something is green then it chases the tiger.\nFOL: all x. (Green(x) -> Chase(x, Tiger))\n\nTEXT: If the cow sees the dog then the dog sees the rabbit.\nFOL: Chase(Cow, Dog) -> Chase(Dog, Rabbit)\n\nTEXT: The rabbit sees the rabbit.\nFOL: Chase(Rabbit, Rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow does not chase the dog.\nFOL: -Chase(Cow, Dog)\nTEXT: The dog is kind.\nFOL: Kind(Dog)\nTEXT: The rabbit is round.\nFOL: Round(Rabbit)\nTEXT: The tiger chases the dog.\nFOL: Chase(Tiger, Dog)\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: If something is green then it chases the tiger.\nFOL: all x. (Green(x) -> Chase(x, Tiger))\nTEXT: If the cow sees the dog then the dog sees the rabbit.\nFOL: Chase(Cow, Dog) -> Chase(Dog, Rabbit)\nTEXT: The rabbit sees the rabbit.\nFOL: See(Rabbit, Rabbit)\n</EVALUATE>"
  ]
 },
 {
  "index": 79,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: Bob(big)\nTEXT: Bob is nice.\nFOL: Bob(nice)\nTEXT: Bob is quiet.\nFOL: Bob(quiet)\nTEXT: Bob is rough.\nFOL: Bob(rough)\nTEXT: Bob is round.\nFOL: Bob(round)\nTEXT: Gary is red.\nFOL: Gary(red)\nTEXT: Gary is rough.\nFOL: Gary(rough)\nTEXT: Gary is round.\nFOL: Gary(round)\nTEXT: Harry is nice.\nFOL: Harry(nice)\nTEXT: Harry is rough.\nFOL: Harry(rough)\nTEXT: Round things are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If something is red and rough then it is big.\nFOL: all x. ((Red(x) & Rough(x)) -> Big(x))\nTEXT: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\nTEXT: All big, round things are quiet.\nFOL: all x. ((Big(x) & Round(x)) -> Quiet(x))\nTEXT: If something is nice and round then it is quiet.\nFOL: all x. ((Nice(x) & Round(x)) -> Quiet(x))\nTEXT: All rough, quiet things are nice.\nFOL: all x. ((Rough(x) & Quiet(x)) -> Nice(x))\nTEXT: Gary is young.\nFOL: Gary(young)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: Bob(big)\nTEXT: Bob is nice.\nFOL: Bob(nice)\nTEXT: Bob is quiet.\nFOL: Bob(quiet)\nTEXT: Bob is rough.\nFOL: Bob(rough)\nTEXT: Bob is round.\nFOL: Bob(round)\nTEXT: Gary is red.\nFOL: Gary(red)\nTEXT: Gary is rough.\nFOL: Gary(rough)\nTEXT: Gary is round.\nFOL: Gary(round)\nTEXT: Harry is nice.\nFOL: Harry(nice)\nTEXT: Harry is rough.\nFOL: Harry(rough)\nTEXT: Round things are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If something is red and rough then it is big.\nFOL: all x. (Red(x) & Rough(x) -> Big(x))\nTEXT: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\nTEXT: All big, round things are quiet.\nFOL: all x. (Big(x) & Round(x) -> Quiet(x))\nTEXT: If something is nice and round then it is quiet.\nFOL: all x. (Nice(x) & Round(x) -> Quiet(x))\nTEXT: All rough, quiet things are nice.\nFOL: all x. (Rough(x) & Quiet(x) -> Nice(x))\nTEXT: Gary is young.\nFOL: Gary(young)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: Big(Bob)\nTEXT: Bob is nice.\nFOL: Nice(Bob)\nTEXT: Bob is quiet.\nFOL: Quiet(Bob)\nTEXT: Bob is rough.\nFOL: Rough(Bob)\nTEXT: Bob is round.\nFOL: Round(Bob)\nTEXT: Gary is red.\nFOL: Red(Gary)\nTEXT: Gary is rough.\nFOL: Rough(Gary)\nTEXT: Gary is round.\nFOL: Round(Gary)\nTEXT: Harry is nice.\nFOL: Nice(Harry)\nTEXT: Harry is rough.\nFOL: Rough(Harry)\nTEXT: Round things are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If something is red and rough then it is big.\nFOL: all x. (Red(x) & Rough(x) -> Big(x))\nTEXT: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\nTEXT: All big, round things are quiet.\nFOL: all x. (Big(x) & Round(x) -> Quiet(x))\nTEXT: If something is nice and round then it is quiet.\nFOL: all x. (Nice(x) & Round(x) -> Quiet(x))\nTEXT: All rough, quiet things are nice.\nFOL: all x. (Rough(x) & Quiet(x) -> Nice(x))\nTEXT: Gary is young.\nFOL: Young(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: Big(Bob)\nTEXT: Bob is nice.\nFOL: Nice(Bob)\nTEXT: Bob is quiet.\nFOL: Quiet(Bob)\nTEXT: Bob is rough.\nFOL: Rough(Bob)\nTEXT: Bob is round.\nFOL: Round(Bob)\nTEXT: Gary is red.\nFOL: Red(Gary)\nTEXT: Gary is rough.\nFOL: Rough(Gary)\nTEXT: Gary is round.\nFOL: Round(Gary)\nTEXT: Harry is nice.\nFOL: Nice(Harry)\nTEXT: Harry is rough.\nFOL: Rough(Harry)\nTEXT: Round things are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If something is red and rough then it is big.\nFOL: all x. ((Red(x) & Rough(x)) -> Big(x))\nTEXT: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\nTEXT: All big, round things are quiet.\nFOL: all x. ((Big(x) & Round(x)) -> Quiet(x))\nTEXT: If something is nice and round then it is quiet.\nFOL: all x. ((Nice(x) & Round(x)) -> Quiet(x))\nTEXT: All rough, quiet things are nice.\nFOL: all x. ((Rough(x) & Quiet(x)) -> Nice(x))\nTEXT: Gary is young.\nFOL: Young(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: Bob(big)\nTEXT: Bob is nice.\nFOL: Bob(nice)\nTEXT: Bob is quiet.\nFOL: Bob(quiet)\nTEXT: Bob is rough.\nFOL: Bob(rough)\nTEXT: Bob is round.\nFOL: Bob(round)\nTEXT: Gary is red.\nFOL: Gary(red)\nTEXT: Gary is rough.\nFOL: Gary(rough)\nTEXT: Gary is round.\nFOL: Gary(round)\nTEXT: Harry is nice.\nFOL: Harry(nice)\nTEXT: Harry is rough.\nFOL: Harry(rough)\nTEXT: Round things are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If something is red and rough then it is big.\nFOL: all x. (Red(x) & Rough(x) -> Big(x))\nTEXT: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\nTEXT: All big, round things are quiet.\nFOL: all x. ((Big(x) & Round(x)) -> Quiet(x))\nTEXT: If something is nice and round then it is quiet.\nFOL: all x. (Nice(x) & Round(x) -> Quiet(x))\nTEXT: All rough, quiet things are nice.\nFOL: all x. (Rough(x) & Quiet(x) -> Nice(x))\nTEXT: Gary is young.\nFOL: Gary(young)\n</EVALUATE>"
  ]
 },
 {
  "index": 80,
  "responses": [
   "<EVALUATE>\nTEXT: The lion is rough.\nFOL: Lion(lion) -> Rough(lion)\n\nTEXT: The tiger chases the lion.\nFOL: Tiger(tiger) & Lion(lion) & Chases(tiger, lion)\n\nTEXT: If the lion eats the tiger and the lion sees the tiger then the tiger is kind.\nFOL: (Eats(lion, tiger) & Lion(lion) & Sees(lion, tiger)) -> Kind(tiger)\n\nTEXT: If something eats the tiger then the tiger eats the lion.\nFOL: all x. (Eats(x, tiger) -> Eats(tiger, x))\n\nTEXT: If something sees the tiger then the tiger does not eat the lion.\nFOL: all x. (Sees(x, tiger) -> -Eats(tiger, x))\n\nTEXT: If something is rough then it is red.\nFOL: all x. (Rough(x) -> Red(x))\n\nTEXT: If something chases the lion then the lion eats the tiger.\nFOL: all x. (Chases(x, lion) -> Eats(lion, tiger))\n\nTEXT: If something sees the tiger then the tiger sees the lion.\nFOL: all x. (Sees(x, tiger) -> Sees(tiger, x))\n\nTEXT: If something eats the lion then the lion chases the tiger.\nFOL: all x. (Eats(x, lion) -> Chases(lion, tiger))\n\nTEXT: If the lion is not rough then the lion is not kind.\nFOL: -Rough(lion) -> -Kind(lion)\n\nTEXT: The tiger does not eat the lion.\nFOL: -Eats(tiger, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The lion is rough.\nFOL: Lion(lion) -> Rough(lion)\nTEXT: The tiger chases the lion.\nFOL: Tiger(tiger) & Lion(lion) & Chases(tiger, lion)\nTEXT: If the lion eats the tiger and the lion sees the tiger then the tiger is kind.\nFOL: (Lion(lion) & Eats(lion, tiger) & Sees(lion, tiger)) -> Kind(tiger)\nTEXT: If something eats the tiger then the tiger eats the lion.\nFOL: all x. (Eats(x, tiger) -> Eats(tiger, x))\nTEXT: If something sees the tiger then the tiger does not eat the lion.\nFOL: all x. (Sees(x, tiger) -> -Eats(tiger, x))\nTEXT: If something is rough then it is red.\nFOL: all x. (Rough(x) -> Red(x))\nTEXT: If something chases the lion then the lion eats the tiger.\nFOL: all x. (Chases(x, lion) -> Eats(lion, tiger))\nTEXT: If something sees the tiger then the tiger sees the lion.\nFOL: all x. (Sees(x, tiger) -> Sees(tiger, x))\nTEXT: If something eats the lion then the lion chases the tiger.\nFOL: all x. (Eats(x, lion) -> Chases(lion, tiger))\nTEXT: If the lion is not rough then the lion is not kind.\nFOL: -Rough(lion) -> -Kind(lion)\nTEXT: The tiger does not eat the lion.\nFOL: -Eats(tiger, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The lion is rough.\nFOL: Lion(lion) -> Rough(lion)\n\nTEXT: The tiger chases the lion.\nFOL: Tiger(tiger) & Lion(lion) & Chases(tiger, lion)\n\nTEXT: If the lion eats the tiger and the lion sees the tiger then the tiger is kind.\nFOL: (Lion(lion) & Eats(lion, tiger) & Sees(lion, tiger)) -> Kind(tiger)\n\nTEXT: If something eats the tiger then the tiger eats the lion.\nFOL: all x. (Eats(x, tiger) -> Eats(tiger, x))\n\nTEXT: If something sees the tiger then the tiger does not eat the lion.\nFOL: all x. (Sees(x, tiger) -> -Eats(tiger, x))\n\nTEXT: If something is rough then it is red.\nFOL: all x. (Rough(x) -> Red(x))\n\nTEXT: If something chases the lion then the lion eats the tiger.\nFOL: all x. (Chases(x, lion) -> Eats(lion, tiger))\n\nTEXT: If something sees the tiger then the tiger sees the lion.\nFOL: all x. (Sees(x, tiger) -> Sees(tiger, x))\n\nTEXT: If something eats the lion then the lion chases the tiger.\nFOL: all x. (Eats(x, lion) -> Chases(lion, tiger))\n\nTEXT: If the lion is not rough then the lion is not kind.\nFOL: -Rough(lion) -> -Kind(lion)\n\nTEXT: The tiger does not eat the lion.\nFOL: -Eats(tiger, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The lion is rough.\nFOL: Lion(lion) -> Rough(lion)\nTEXT: The tiger chases the lion.\nFOL: Tiger(tiger) & Lion(lion) & Chases(tiger, lion)\nTEXT: If the lion eats the tiger and the lion sees the tiger then the tiger is kind.\nFOL: (Eats(lion, tiger) & Lion(lion) & Sees(lion, tiger)) -> Kind(tiger)\nTEXT: If something eats the tiger then the tiger eats the lion.\nFOL: all x. (Eats(x, tiger) -> Eats(tiger, x))\nTEXT: If something sees the tiger then the tiger does not eat the lion.\nFOL: all x. (Sees(x, tiger) -> -Eats(tiger, x))\nTEXT: If something is rough then it is red.\nFOL: all x. (Rough(x) -> Red(x))\nTEXT: If something chases the lion then the lion eats the tiger.\nFOL: all x. (Chases(x, lion) -> Eats(lion, tiger))\nTEXT: If something sees the tiger then the tiger sees the lion.\nFOL: all x. (Sees(x, tiger) -> Sees(tiger, x))\nTEXT: If something eats the lion then the lion chases the tiger.\nFOL: all x. (Eats(x, lion) -> Chases(lion, tiger))\nTEXT: If the lion is not rough then the lion is not kind.\nFOL: -Rough(lion) -> -Kind(lion)\nTEXT: The tiger does not eat the lion.\nFOL: -Eats(tiger, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The lion is rough.\nFOL: Lion(lion) -> Rough(lion)\nTEXT: The tiger chases the lion.\nFOL: Tiger(tiger) -> ChasesLion(tiger, lion)\nTEXT: If the lion eats the tiger and the lion sees the tiger then the tiger is kind.\nFOL: (Lion(lion) & EatsTiger(lion, tiger) & SeesTiger(lion, tiger)) -> Kind(tiger)\nTEXT: If something eats the tiger then the tiger eats the lion.\nFOL: all x. (EatsTiger(x, tiger) -> EatsLion(x, lion))\nTEXT: If something sees the tiger then the tiger does not eat the lion.\nFOL: all x. (SeesTiger(x, tiger) -> -EatsLion(x, lion))\nTEXT: If something is rough then it is red.\nFOL: all x. (Rough(x) -> Red(x))\nTEXT: If something chases the lion then the lion eats the tiger.\nFOL: all x. (ChasesLion(x, lion) -> EatsTiger(x, tiger))\nTEXT: If something sees the tiger then the tiger sees the lion.\nFOL: all x. (SeesTiger(x, tiger) -> SeesLion(x, lion))\nTEXT: If something eats the lion then the lion chases the tiger.\nFOL: all x. (EatsLion(x, lion) -> ChasesLion(x, tiger))\nTEXT: If the lion is not rough then the lion is not kind.\nFOL: -Rough(lion) -> -Kind(lion)\nTEXT: The tiger does not eat the lion.\nFOL: -EatsLion(tiger, lion)\n</EVALUATE>"
  ]
 },
 {
  "index": 81,
  "responses": [
   "<EVALUATE>\nTEXT: Erin is furry.\nFOL: Furry(erin)\n\nTEXT: Erin is smart.\nFOL: Smart(erin)\n\nTEXT: Fiona is green.\nFOL: Green(fiona)\n\nTEXT: If something is kind then it is nice.\nFOL: all x. (Kind(x) -> Nice(x))\n\nTEXT: If something is furry and white then it is rough.\nFOL: all x. (Furry(x) & White(x) -> Rough(x))\n\nTEXT: If something is kind and rough then it is nice.\nFOL: all x. (Kind(x) & Rough(x) -> Nice(x))\n\nTEXT: All nice things are white.\nFOL: all x. (Nice(x) -> White(x))\n\nTEXT: If Erin is smart then Erin is nice.\nFOL: Smart(erin) -> Nice(erin)\n\nTEXT: If something is green then it is rough.\nFOL: all x. (Green(x) -> Rough(x))\n\nTEXT: Erin is not rough.\nFOL: -Rough(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: If something is kind then it is nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: If something is furry and white then it is rough.\nFOL: all x. ((Furry(x) & White(x)) -> Rough(x))\nTEXT: If something is kind and rough then it is nice.\nFOL: all x. (Kind(x) & Rough(x) -> Nice(x))\nTEXT: All nice things are white.\nFOL: all x. (Nice(x) -> White(x))\nTEXT: If Erin is smart then Erin is nice.\nFOL: Smart(erin) -> Nice(erin)\nTEXT: If something is green then it is rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: Erin is not rough.\nFOL: -Rough(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: If something is kind then it is nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: If something is furry and white then it is rough.\nFOL: all x. (Furry(x) & White(x) -> Rough(x))\nTEXT: If something is kind and rough then it is nice.\nFOL: all x. (Kind(x) & Rough(x) -> Nice(x))\nTEXT: All nice things are white.\nFOL: all x. (Nice(x) -> White(x))\nTEXT: If Erin is smart then Erin is nice.\nFOL: Smart(erin) -> Nice(erin)\nTEXT: If something is green then it is rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: Erin is not rough.\nFOL: -Rough(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is furry.\nFOL: Furry(erin)\n\nTEXT: Erin is smart.\nFOL: Smart(erin)\n\nTEXT: Fiona is green.\nFOL: Green(fiona)\n\nTEXT: If something is kind then it is nice.\nFOL: all x. (Kind(x) -> Nice(x))\n\nTEXT: If something is furry and white then it is rough.\nFOL: all x. ((Furry(x) & White(x)) -> Rough(x))\n\nTEXT: If something is kind and rough then it is nice.\nFOL: all x. (Kind(x) & Rough(x) -> Nice(x))\n\nTEXT: All nice things are white.\nFOL: all x. (Nice(x) -> White(x))\n\nTEXT: If Erin is smart then Erin is nice.\nFOL: Smart(erin) -> Nice(erin)\n\nTEXT: If something is green then it is rough.\nFOL: all x. (Green(x) -> Rough(x))\n\nTEXT: Erin is not rough.\nFOL: -Rough(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is furry.\nFOL: Furry(erin)\nTEXT: Erin is smart.\nFOL: Smart(erin)\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: If something is kind then it is nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: If something is furry and white then it is rough.\nFOL: all x. ((Furry(x) & White(x)) -> Rough(x))\nTEXT: If something is kind and rough then it is nice.\nFOL: all x. ((Kind(x) & Rough(x)) -> Nice(x))\nTEXT: All nice things are white.\nFOL: all x. (Nice(x) -> White(x))\nTEXT: If Erin is smart then Erin is nice.\nFOL: Smart(erin) -> Nice(erin)\nTEXT: If something is green then it is rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: Erin is not rough.\nFOL: -Rough(erin)\n</EVALUATE>"
  ]
 },
 {
  "index": 82,
  "responses": [
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(Alan)\nTEXT: Dave is kind and nice and looks green.\nFOL: Kind(Dave) & Nice(Dave) & Green(Dave)\nTEXT: Even though Eric is round and big, he is very kind.\nFOL: -Round(Eric) & -Big(Eric) & Kind(Eric)\nTEXT: When Harry walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: (Nice(Harry) & Kind(Harry) & -Blue(Harry) & -Red(Harry)) | (Nice(Harry) & Kind(Harry) & Blue(Harry) & Red(Harry))\nTEXT: A green person that is red and blue are known for their rough skin.\nFOL: Green(x) & Red(x) & Blue(x) -> RoughSkin(x)\nTEXT: Young people who are both nice and cold also tend to be rough.\nFOL: Young(x) & Nice(x) & Cold(x) -> Rough(x)\nTEXT: Nice people who feel blue often look green when ill.\nFOL: Nice(x) & Blue(x) -> GreenWhenIll(x)\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) -> Red(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & Cold(x) -> Blue(x))\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: Green(x) & Nice(x) & Rough(x) -> Round(x)\nTEXT: Harry is not big.\nFOL: -Big(Harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(Alan)\nTEXT: Dave is kind and nice and looks green.\nFOL: Kind(Dave) & Nice(Dave) & Green(Dave)\nTEXT: Even though Eric is round and big, he is very kind.\nFOL: -Round(Eric) & -Big(Eric) & Kind(Eric)\nTEXT: When Harry walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: ((Nice(Harry) & Kind(Harry)) & -Blue(Harry) & -Red(Harry))\nTEXT: A green person that is red and blue are known for their rough skin.\nFOL: Green(x) & Red(x) & Blue(x) -> RoughSkin(x)\nTEXT: Young people who are both nice and cold also tend to be rough.\nFOL: Young(x) & Nice(x) & Cold(x) -> Rough(x)\nTEXT: Nice people who feel blue often look green when ill.\nFOL: Nice(x) & Blue(x) -> Green(x)\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) -> Red(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & Cold(x) -> Blue(x))\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: Green(x) & Nice(x) & Rough(x) -> Round(x)\nTEXT: Harry is not big.\nFOL: -Big(Harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(Alan)\nTEXT: Dave is kind and nice and looks green.\nFOL: Kind(Dave) & Nice(Dave) & Green(Dave)\nTEXT: Even though Eric is round and big, he is very kind.\nFOL: -Round(Eric) & -Big(Eric) & Kind(Eric)\nTEXT: When Harry walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: ((Nice(Harry) & Kind(Harry)) & -Blue(Harry) & -Red(Harry))\nTEXT: A green person that is red and blue are known for their rough skin.\nFOL: Green(x) & Red(x) & Blue(x) -> RoughSkin(x)\nTEXT: Young people who are both nice and cold also tend to be rough.\nFOL: Young(x) & Nice(x) & Cold(x) -> Rough(x)\nTEXT: Nice people who feel blue often look green when ill.\nFOL: Nice(x) & Blue(x) -> GreenWhenIll(x)\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) -> Red(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: all x. (Round(x) & Cold(x) -> Blue(x))\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: Green(x) & Nice(x) & Rough(x) -> Round(x)\nTEXT: Harry is not big.\nFOL: -Big(Harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(Alan)\n\nTEXT: Dave is kind and nice and looks green.\nFOL: Kind(Dave) & Nice(Dave) & Green(Dave)\n\nTEXT: Even though Eric is round and big, he is very kind.\nFOL: -Round(Eric) & -Big(Eric) & Kind(Eric)\n\nTEXT: When Harry walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: ((Nice(Harry) & Kind(Harry)) & -Blue(Harry) & -Red(Harry))\n\nTEXT: A green person that is red and blue are known for their rough skin.\nFOL: Green(x) & Red(x) & Blue(x) -> RoughSkin(x)\n\nTEXT: Young people who are both nice and cold also tend to be rough.\nFOL: Young(x) & Nice(x) & Cold(x) -> Rough(x)\n\nTEXT: Nice people who feel blue often look green when ill.\nFOL: Nice(x) & Blue(x) -> Green(x)\n\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) -> Red(x))\n\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: Round(x) & Cold(x) -> Blue(x)\n\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: Green(x) & Nice(x) & Rough(x) -> Round(x)\n\nTEXT: Harry is not big.\nFOL: -Big(Harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan seems to be round.\nFOL: Round(Alan)\nTEXT: Dave is kind and nice and looks green.\nFOL: Kind(Dave) & Nice(Dave) & Green(Dave)\nTEXT: Even though Eric is round and big, he is very kind.\nFOL: -Round(Eric) & -Big(Eric) & Kind(Eric)\nTEXT: When Harry walks around the neighborhood being nice and kind, the closer you get to him you can tell he is blue and red.\nFOL: ((Nice(Harry) & Kind(Harry)) & -Blue(Harry) & -Red(Harry))\nTEXT: A green person that is red and blue are known for their rough skin.\nFOL: Green(x) & Red(x) & Blue(x) -> RoughSkin(x)\nTEXT: Young people who are both nice and cold also tend to be rough.\nFOL: Young(x) & Nice(x) & Cold(x) -> Rough(x)\nTEXT: Nice people who feel blue often look green when ill.\nFOL: Nice(x) & Blue(x) -> GreenWhenIll(x)\nTEXT: All the people who have the characteristics of being green, round and cold, tend to be red.\nFOL: all x. (Green(x) & Round(x) & Cold(x) -> Red(x))\nTEXT: People who are round and behave in a cold way are surely blue.\nFOL: Round(x) & Cold(x) -> Blue(x)\nTEXT: Green folks who are nice and rough are a round shape.\nFOL: Green(x) & Nice(x) & Rough(x) -> Round(x)\nTEXT: Harry is not big.\nFOL: -Big(Harry)\n</EVALUATE>"
  ]
 },
 {
  "index": 83,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: BaldEagle(x) -> Cold(x)\nTEXT: The bald eagle is rough.\nFOL: BaldEagle(x) -> Rough(x)\nTEXT: The bald eagle likes the bear.\nFOL: BaldEagle(x) -> LikesBear(x)\nTEXT: The bald eagle likes the tiger.\nFOL: BaldEagle(x) -> LikesTiger(x)\nTEXT: The bald eagle visits the bear.\nFOL: BaldEagle(x) -> VisitsBear(x)\nTEXT: The bald eagle visits the tiger.\nFOL: BaldEagle(x) -> VisitsTiger(x)\nTEXT: The bear eats the bald eagle.\nFOL: Bear(x) -> EatsBaldEagle(x)\nTEXT: The bear is big.\nFOL: Bear(x) -> Big(x)\nTEXT: The bear is cold.\nFOL: Bear(x) -> Cold(x)\nTEXT: The bear is not young.\nFOL: Bear(x) -> NotYoung(x)\nTEXT: The bear likes the bald eagle.\nFOL: Bear(x) -> LikesBaldEagle(x)\nTEXT: The bear likes the tiger.\nFOL: Bear(x) -> LikesTiger(x)\nTEXT: The bear visits the bald eagle.\nFOL: Bear(x) -> VisitsBaldEagle(x)\nTEXT: The bear visits the tiger.\nFOL: Bear(x) -> VisitsTiger(x)\nTEXT: The tiger eats the bear.\nFOL: Tiger(x) -> EatsBear(x)\nTEXT: If someone eats the tiger then the tiger does not visit the bald eagle.\nFOL: exists x. (EatsTiger(x) -> -VisitsBaldEagle(x))\nTEXT: If the bear visits the bald eagle and the bear is cold then the bald eagle is big.\nFOL: (Bear(x) & VisitsBaldEagle(x) & Bear(x) -> Cold(x)) -> BaldEagle(x) -> Big(x)\nTEXT: If someone likes the bear and they are big then they eat the tiger.\nFOL: exists x. ((LikesBear(x) & Bear(x) -> Big(x)) -> EatsTiger(x))\nTEXT: If the tiger visits the bald eagle and the bear does not visit the tiger then the bald eagle is cold.\nFOL: (Tiger(x) & VisitsBaldEagle(x) & -Bear(x) -> VisitsTiger(x)) -> BaldEagle(x) -> Cold(x)\nTEXT: If someone visits the bald eagle and they are rough then the bald eagle is not cold.\nFOL: exists x. ((VisitsBaldEagle(x) & Bear(x) -> Rough(x)) -> -Cold(x))\nTEXT: If the bald eagle eats the tiger and the tiger is young then the bald eagle visits the tiger.\nFOL: (BaldEagle(x) -> EatsTiger(x) & Tiger(x) -> Young(x)) -> VisitsTiger(x)\nTEXT: The bear visits the tiger.\nFOL: Bear(x) -> VisitsTiger(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: BaldEagle(x) -> Cold(x)\nTEXT: The bald eagle is rough.\nFOL: BaldEagle(x) -> Rough(x)\nTEXT: The bald eagle likes the bear.\nFOL: BaldEagle(x) -> LikesBear(x)\nTEXT: The bald eagle likes the tiger.\nFOL: BaldEagle(x) -> LikesTiger(x)\nTEXT: The bald eagle visits the bear.\nFOL: BaldEagle(x) -> VisitsBear(x)\nTEXT: The bald eagle visits the tiger.\nFOL: BaldEagle(x) -> VisitsTiger(x)\nTEXT: The bear eats the bald eagle.\nFOL: Bear(x) -> EatsBaldEagle(x)\nTEXT: The bear is big.\nFOL: Bear(x) -> Big(x)\nTEXT: The bear is cold.\nFOL: Bear(x) -> Cold(x)\nTEXT: The bear is not young.\nFOL: Bear(x) -> NotYoung(x)\nTEXT: The bear likes the bald eagle.\nFOL: Bear(x) -> LikesBaldEagle(x)\nTEXT: The bear likes the tiger.\nFOL: Bear(x) -> LikesTiger(x)\nTEXT: The bear visits the bald eagle.\nFOL: Bear(x) -> VisitsBaldEagle(x)\nTEXT: The bear visits the tiger.\nFOL: Bear(x) -> VisitsTiger(x)\nTEXT: The tiger eats the bear.\nFOL: Tiger(x) -> EatsBear(x)\nTEXT: If someone eats the tiger then the tiger does not visit the bald eagle.\nFOL: all x. (EatsTiger(x) -> -VisitsBaldEagle(x))\nTEXT: If the bear visits the bald eagle and the bear is cold then the bald eagle is big.\nFOL: (Bear(x) & VisitsBaldEagle(x) & Bear(x) -> Cold(x)) -> BaldEagle(x) -> Big(x)\nTEXT: If someone likes the bear and they are big then they eat the tiger.\nFOL: all x. (LikesBear(x) & Big(x) -> EatsTiger(x))\nTEXT: If the tiger visits the bald eagle and the bear does not visit the tiger then the bald eagle is cold.\nFOL: (Tiger(x) & VisitsBaldEagle(x) & -Bear(x) -> VisitsTiger(x)) -> BaldEagle(x) -> Cold(x)\nTEXT: If someone visits the bald eagle and they are rough then the bald eagle is not cold.\nFOL: all x. (VisitsBaldEagle(x) & Rough(x) -> -Cold(x))\nTEXT: If the bald eagle eats the tiger and the tiger is young then the bald eagle visits the tiger.\nFOL: (BaldEagle(x) -> EatsTiger(x) & Tiger(x) -> Young(x)) -> VisitsTiger(x)\nTEXT: The bear visits the tiger.\nFOL: Bear(x) -> VisitsTiger(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: BaldEagle(x) -> Cold(x)\nTEXT: The bald eagle is rough.\nFOL: BaldEagle(x) -> Rough(x)\nTEXT: The bald eagle likes the bear.\nFOL: BaldEagle(x) -> LikesBear(x)\nTEXT: The bald eagle likes the tiger.\nFOL: BaldEagle(x) -> LikesTiger(x)\nTEXT: The bald eagle visits the bear.\nFOL: BaldEagle(x) -> VisitsBear(x)\nTEXT: The bald eagle visits the tiger.\nFOL: BaldEagle(x) -> VisitsTiger(x)\nTEXT: The bear eats the bald eagle.\nFOL: Bear(x) -> EatsBaldEagle(x)\nTEXT: The bear is big.\nFOL: Bear(x) -> Big(x)\nTEXT: The bear is cold.\nFOL: Bear(x) -> Cold(x)\nTEXT: The bear is not young.\nFOL: Bear(x) -> NotYoung(x)\nTEXT: The bear likes the bald eagle.\nFOL: Bear(x) -> LikesBaldEagle(x)\nTEXT: The bear likes the tiger.\nFOL: Bear(x) -> LikesTiger(x)\nTEXT: The bear visits the bald eagle.\nFOL: Bear(x) -> VisitsBaldEagle(x)\nTEXT: The bear visits the tiger.\nFOL: Bear(x) -> VisitsTiger(x)\nTEXT: The tiger eats the bear.\nFOL: Tiger(x) -> EatsBear(x)\nTEXT: If someone eats the tiger then the tiger does not visit the bald eagle.\nFOL: exists x. (EatsTiger(x) -> -VisitsBaldEagle(x))\nTEXT: If the bear visits the bald eagle and the bear is cold then the bald eagle is big.\nFOL: (Bear(x) & VisitsBaldEagle(x) & Bear(x) -> Cold(x)) -> BaldEagle(x) -> Big(x)\nTEXT: If someone likes the bear and they are big then they eat the tiger.\nFOL: exists x. ((LikesBear(x) & Bear(x) -> Big(x)) -> EatsTiger(x))\nTEXT: If the tiger visits the bald eagle and the bear does not visit the tiger then the bald eagle is cold.\nFOL: (Tiger(x) -> VisitsBaldEagle(x) & -Bear(x) -> VisitsTiger(x)) -> BaldEagle(x) -> Cold(x)\nTEXT: If someone visits the bald eagle and they are rough then the bald eagle is not cold.\nFOL: exists x. ((VisitsBaldEagle(x) & Bear(x) -> Rough(x)) -> -Cold(x))\nTEXT: If the bald eagle eats the tiger and the tiger is young then the bald eagle visits the tiger.\nFOL: (BaldEagle(x) -> EatsTiger(x) & Tiger(x) -> Young(x)) -> VisitsTiger(x)\nTEXT: The bear visits the tiger.\nFOL: Bear(x) -> VisitsTiger(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: BaldEagle(x) -> Cold(x)\nTEXT: The bald eagle is rough.\nFOL: BaldEagle(x) -> Rough(x)\nTEXT: The bald eagle likes the bear.\nFOL: BaldEagle(x) -> LikesBear(x)\nTEXT: The bald eagle likes the tiger.\nFOL: BaldEagle(x) -> LikesTiger(x)\nTEXT: The bald eagle visits the bear.\nFOL: BaldEagle(x) -> VisitsBear(x)\nTEXT: The bald eagle visits the tiger.\nFOL: BaldEagle(x) -> VisitsTiger(x)\nTEXT: The bear eats the bald eagle.\nFOL: Bear(x) -> EatsBaldEagle(x)\nTEXT: The bear is big.\nFOL: Bear(x) -> Big(x)\nTEXT: The bear is cold.\nFOL: Bear(x) -> Cold(x)\nTEXT: The bear is not young.\nFOL: Bear(x) -> NotYoung(x)\nTEXT: The bear likes the bald eagle.\nFOL: Bear(x) -> LikesBaldEagle(x)\nTEXT: The bear likes the tiger.\nFOL: Bear(x) -> LikesTiger(x)\nTEXT: The bear visits the bald eagle.\nFOL: Bear(x) -> VisitsBaldEagle(x)\nTEXT: The bear visits the tiger.\nFOL: Bear(x) -> VisitsTiger(x)\nTEXT: The tiger eats the bear.\nFOL: Tiger(x) -> EatsBear(x)\nTEXT: If someone eats the tiger then the tiger does not visit the bald eagle.\nFOL: all x. (EatsTiger(x) -> -VisitsBaldEagle(x))\nTEXT: If the bear visits the bald eagle and the bear is cold then the bald eagle is big.\nFOL: (Bear(x) & VisitsBaldEagle(x) & Bear(x) -> Cold(x)) -> BaldEagle(x) -> Big(x)\nTEXT: If someone likes the bear and they are big then they eat the tiger.\nFOL: all x. (LikesBear(x) & Bear(x) -> Big(x) -> EatsTiger(x))\nTEXT: If the tiger visits the bald eagle and the bear does not visit the tiger then the bald eagle is cold.\nFOL: (Tiger(x) & VisitsBaldEagle(x) & -Bear(x) -> VisitsTiger(x)) -> BaldEagle(x) -> Cold(x)\nTEXT: If someone visits the bald eagle and they are rough then the bald eagle is not cold.\nFOL: all x. (VisitsBaldEagle(x) & Bear(x) -> Rough(x) -> -Cold(x))\nTEXT: If the bald eagle eats the tiger and the tiger is young then the bald eagle visits the tiger.\nFOL: (BaldEagle(x) -> EatsTiger(x) & Tiger(x) -> Young(x)) -> VisitsTiger(x)\nTEXT: The bear visits the tiger.\nFOL: Bear(x) -> VisitsTiger(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: BaldEagle(x) -> Cold(x)\nTEXT: The bald eagle is rough.\nFOL: BaldEagle(x) -> Rough(x)\nTEXT: The bald eagle likes the bear.\nFOL: BaldEagle(x) -> LikesBear(x)\nTEXT: The bald eagle likes the tiger.\nFOL: BaldEagle(x) -> LikesTiger(x)\nTEXT: The bald eagle visits the bear.\nFOL: BaldEagle(x) -> VisitsBear(x)\nTEXT: The bald eagle visits the tiger.\nFOL: BaldEagle(x) -> VisitsTiger(x)\nTEXT: The bear eats the bald eagle.\nFOL: Bear(x) -> EatsBaldEagle(x)\nTEXT: The bear is big.\nFOL: Bear(x) -> Big(x)\nTEXT: The bear is cold.\nFOL: Bear(x) -> Cold(x)\nTEXT: The bear is not young.\nFOL: Bear(x) -> NotYoung(x)\nTEXT: The bear likes the bald eagle.\nFOL: Bear(x) -> LikesBaldEagle(x)\nTEXT: The bear likes the tiger.\nFOL: Bear(x) -> LikesTiger(x)\nTEXT: The bear visits the bald eagle.\nFOL: Bear(x) -> VisitsBaldEagle(x)\nTEXT: The bear visits the tiger.\nFOL: Bear(x) -> VisitsTiger(x)\nTEXT: The tiger eats the bear.\nFOL: Tiger(x) -> EatsBear(x)\nTEXT: If someone eats the tiger then the tiger does not visit the bald eagle.\nFOL: all x. (EatsTiger(x) -> -VisitsBaldEagle(x))\nTEXT: If the bear visits the bald eagle and the bear is cold then the bald eagle is big.\nFOL: (Bear(x) & VisitsBaldEagle(x) & Bear(x) -> Cold(x)) -> BaldEagle(x) -> Big(x)\nTEXT: If someone likes the bear and they are big then they eat the tiger.\nFOL: all x. (LikesBear(x) & Big(x) -> EatsTiger(x))\nTEXT: If the tiger visits the bald eagle and the bear does not visit the tiger then the bald eagle is cold.\nFOL: (Tiger(x) & VisitsBaldEagle(x) & -Bear(x) -> VisitsTiger(x)) -> BaldEagle(x) -> Cold(x)\nTEXT: If someone visits the bald eagle and they are rough then the bald eagle is not cold.\nFOL: all x. (VisitsBaldEagle(x) & Rough(x)) -> -Cold(x)\nTEXT: If the bald eagle eats the tiger and the tiger is young then the bald eagle visits the tiger.\nFOL: (BaldEagle(x) -> EatsTiger(x) & Tiger(x) -> Young(x)) -> VisitsTiger(x)\nTEXT: The bear visits the tiger.\nFOL: Bear(x) -> VisitsTiger(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 84,
  "responses": [
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: Bear(bear) -> Nice(bear)\n\nTEXT: The mouse needs the tiger.\nFOL: Mouse(mouse) -> NeedsTiger(mouse)\n\nTEXT: The rabbit is kind.\nFOL: Rabbit(rabbit) -> Kind(rabbit)\n\nTEXT: The tiger is green.\nFOL: Tiger(tiger) -> Green(tiger)\n\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (NeedsTiger(x) -> EatsTiger(x))\n\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x. ((Green(x) & ChasesRabbit(x)) -> ChasesTiger(x))\n\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x. ((Nice(x) & ChasesRabbit(x)) -> EatsMouse(x))\n\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x. (ChasesBear(x) -> EatsRabbit(x))\n\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x. (ChasesBear(x) -> ChasesMouse(x))\n\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: (Rough(bear) & NeedsRabbit(bear)) -> Green(rabbit)\n\nTEXT: If something is kind then it needs the mouse.\nFOL: all x. (Kind(x) -> NeedsMouse(x))\n\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x. (EatsTiger(x) -> ChasesBear(x))\n\nTEXT: The tiger chases the tiger.\nFOL: Tiger(tiger) -> ChasesTiger(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: Bear(bear) -> Nice(bear)\nTEXT: The mouse needs the tiger.\nFOL: Mouse(mouse) -> NeedsTiger(mouse)\nTEXT: The rabbit is kind.\nFOL: Rabbit(rabbit) -> Kind(rabbit)\nTEXT: The tiger is green.\nFOL: Tiger(tiger) -> Green(tiger)\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (NeedsTiger(x) -> EatsTiger(x))\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x. ((Green(x) & ChasesRabbit(x)) -> ChasesTiger(x))\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x. ((Nice(x) & ChasesRabbit(x)) -> EatsMouse(x))\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x. (ChasesBear(x) -> EatsRabbit(x))\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x. (ChasesBear(x) -> ChasesMouse(x))\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: (Rough(bear) & NeedsRabbit(bear)) -> Green(rabbit)\nTEXT: If something is kind then it needs the mouse.\nFOL: all x. (Kind(x) -> NeedsMouse(x))\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x. (EatsTiger(x) -> ChasesBear(x))\nTEXT: The tiger chases the tiger.\nFOL: Tiger(tiger) -> ChasesTiger(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: Bear(bear) -> Nice(bear)\n\nTEXT: The mouse needs the tiger.\nFOL: Mouse(mouse) -> NeedsTiger(mouse)\n\nTEXT: The rabbit is kind.\nFOL: Rabbit(rabbit) -> Kind(rabbit)\n\nTEXT: The tiger is green.\nFOL: Tiger(tiger) -> Green(tiger)\n\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (NeedsTiger(x) -> EatsTiger(x))\n\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x. ((Green(x) & ChasesRabbit(x)) -> ChasesTiger(x))\n\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x. ((Nice(x) & ChasesRabbit(x)) -> EatsMouse(x))\n\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x. (ChasesBear(x) -> EatsRabbit(x))\n\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x. (ChasesBear(x) -> ChasesMouse(x))\n\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: Bear(bear) & NeedsRabbit(bear) & Rough(bear) -> Green(rabbit)\n\nTEXT: If something is kind then it needs the mouse.\nFOL: all x. (Kind(x) -> NeedsMouse(x))\n\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x. (EatsTiger(x) -> ChasesBear(x))\n\nTEXT: The tiger chases the tiger.\nFOL: Tiger(tiger) -> ChasesTiger(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: Bear(bear) -> Nice(bear)\n\nTEXT: The mouse needs the tiger.\nFOL: Mouse(mouse) -> NeedsTiger(mouse)\n\nTEXT: The rabbit is kind.\nFOL: Rabbit(rabbit) -> Kind(rabbit)\n\nTEXT: The tiger is green.\nFOL: Tiger(tiger) -> Green(tiger)\n\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (NeedsTiger(x) -> EatsTiger(x))\n\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x. (Green(x) & ChasesRabbit(x) -> ChasesTiger(x))\n\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x. (Nice(x) & ChasesRabbit(x) -> EatsMouse(x))\n\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x. (ChasesBear(x) -> EatsRabbit(x))\n\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x. (ChasesBear(x) -> ChasesMouse(x))\n\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: Bear(bear) & NeedsRabbit(bear) & Rough(bear) -> Green(rabbit)\n\nTEXT: If something is kind then it needs the mouse.\nFOL: all x. (Kind(x) -> NeedsMouse(x))\n\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x. (EatsTiger(x) -> ChasesBear(x))\n\nTEXT: The tiger chases the tiger.\nFOL: Tiger(tiger) -> ChasesTiger(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: Bear(bear) -> Nice(bear)\n\nTEXT: The mouse needs the tiger.\nFOL: Mouse(mouse) -> NeedsTiger(mouse)\n\nTEXT: The rabbit is kind.\nFOL: Rabbit(rabbit) -> Kind(rabbit)\n\nTEXT: The tiger is green.\nFOL: Tiger(tiger) -> Green(tiger)\n\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (NeedsTiger(x) -> EatsTiger(x))\n\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x. ((Green(x) & ChasesRabbit(x)) -> ChasesTiger(x))\n\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x. ((Nice(x) & ChasesRabbit(x)) -> EatsMouse(x))\n\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x. (ChasesBear(x) -> EatsRabbit(x))\n\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x. (ChasesBear(x) -> ChasesMouse(x))\n\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: Bear(bear) & NeedsRabbit(bear) & Bear(bear) -> Green(rabbit)\n\nTEXT: If something is kind then it needs the mouse.\nFOL: all x. (Kind(x) -> NeedsMouse(x))\n\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x. (EatsTiger(x) -> ChasesBear(x))\n\nTEXT: The tiger chases the tiger.\nFOL: Tiger(tiger) -> ChasesTiger(tiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 85,
  "responses": [
   "<EVALUATE>\nTEXT: Erin is blue.\nFOL: Blue(erin)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: -Red(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is blue.\nFOL: Blue(erin)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. ((Red(x) & -Blue(x)) -> -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: -Red(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is blue.\nFOL: Blue(erin)\n\nTEXT: Fiona is white.\nFOL: White(fiona)\n\nTEXT: Gary is red.\nFOL: Red(gary)\n\nTEXT: Harry is white.\nFOL: White(harry)\n\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\n\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) -> -Big(x))\n\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\n\nTEXT: Erin is not red.\nFOL: -Red(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is blue.\nFOL: Blue(erin)\n\nTEXT: Fiona is white.\nFOL: White(fiona)\n\nTEXT: Gary is red.\nFOL: Red(gary)\n\nTEXT: Harry is white.\nFOL: White(harry)\n\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\n\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. ((Red(x) & -Blue(x)) -> -Big(x))\n\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\n\nTEXT: Erin is not red.\nFOL: -Red(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Erin is blue.\nFOL: Blue(erin)\nTEXT: Fiona is white.\nFOL: White(fiona)\nTEXT: Gary is red.\nFOL: Red(gary)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: If something is big then it is white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: If something is red and not blue then it is not big.\nFOL: all x. (Red(x) & -Blue(x) & -Big(x))\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Erin is not red.\nFOL: -Red(erin)\n</EVALUATE>"
  ]
 },
 {
  "index": 86,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: BaldEagle(eagle) -> EatsRabbit(rabbit)\nTEXT: The bald eagle is not blue.\nFOL: -Blue(eagle)\nTEXT: The bald eagle sees the mouse.\nFOL: BaldEagle(eagle) -> SeesMouse(mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: BaldEagle(eagle) -> SeesTiger(tiger)\nTEXT: The mouse is not kind.\nFOL: -Kind(mouse)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger sees the rabbit.\nFOL: SeesTiger(tiger) -> SeesRabbit(rabbit)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: Young(mouse) & MouseEatsBaldEagle(mouse, eagle) -> NeedsRabbit(mouse, rabbit)\nTEXT: If something is blue then it eats the mouse.\nFOL: Blue(x) -> EatsMouse(x, mouse)\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: Kind(x) & -Young(x) -> EatsMouse(x, mouse)\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: SeesTiger(x) -> EatsRabbit(x, rabbit)\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: SeesRabbit(x) -> -Blue(rabbit)\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: EatsMouse(x, mouse) -> Blue(mouse)\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: NeedsRabbit(x, rabbit) & RabbitEatsTiger(rabbit, tiger) -> SeesRabbit(tiger, rabbit)\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: EatsMouse(x, mouse) & MouseEatsTiger(mouse, tiger) -> -SeesRabbit(mouse, rabbit)\nTEXT: The bald eagle does not eat the mouse.\nFOL: -EatsBaldEagle(eagle, mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: BaldEagle(eagle) -> EatsRabbit(rabbit)\nTEXT: The bald eagle is not blue.\nFOL: -Blue(eagle)\nTEXT: The bald eagle sees the mouse.\nFOL: BaldEagle(eagle) -> SeesMouse(mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: BaldEagle(eagle) -> SeesTiger(tiger)\nTEXT: The mouse is not kind.\nFOL: -Kind(mouse)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger sees the rabbit.\nFOL: SeesTiger(tiger) -> SeesRabbit(rabbit)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: Young(mouse) & MouseEatsBaldEagle(mouse, eagle) -> NeedsRabbit(mouse, rabbit)\nTEXT: If something is blue then it eats the mouse.\nFOL: Blue(x) -> EatsMouse(x, mouse)\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: Kind(x) & -Young(x) -> EatsMouse(x, mouse)\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: SeesTiger(x) -> EatsRabbit(x, rabbit)\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: SeesRabbit(x) -> -Blue(rabbit)\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: EatsMouse(x, mouse) -> Blue(mouse)\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: NeedsRabbit(x, rabbit) & RabbitEatsTiger(rabbit, tiger) -> SeesRabbit(tiger, rabbit)\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: EatsMouse(x, mouse) & MouseEatsTiger(mouse, tiger) -> -SeesRabbit(mouse, rabbit)\nTEXT: The bald eagle does not eat the mouse.\nFOL: -EatsRabbit(eagle, mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: BaldEagle(eagle) -> EatsRabbit(rabbit)\nTEXT: The bald eagle is not blue.\nFOL: -Blue(eagle)\nTEXT: The bald eagle sees the mouse.\nFOL: BaldEagle(eagle) -> SeesMouse(mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: BaldEagle(eagle) -> SeesTiger(tiger)\nTEXT: The mouse is not kind.\nFOL: -Kind(mouse)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger sees the rabbit.\nFOL: SeesTiger(tiger) -> SeesRabbit(rabbit)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: Young(mouse) & MouseEatsBaldEagle(mouse, eagle) -> NeedsRabbit(mouse, rabbit)\nTEXT: If something is blue then it eats the mouse.\nFOL: Blue(x) -> EatsMouse(x, mouse)\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: Kind(x) & -Young(x) -> EatsMouse(x, mouse)\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: SeesTiger(x) -> EatsRabbit(x, rabbit)\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: SeesRabbit(x) -> -Blue(rabbit)\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: EatsMouse(x, mouse) -> Blue(mouse)\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: NeedsRabbit(x, rabbit) & EatsRabbit(rabbit, tiger) -> SeesRabbit(tiger, rabbit)\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: EatsMouse(x, mouse) & MouseEatsTiger(mouse, tiger) -> -SeesRabbit(mouse, rabbit)\nTEXT: The bald eagle does not eat the mouse.\nFOL: -EatsBaldEagle(eagle, mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: BaldEagle(eagle) -> EatsRabbit(rabbit)\nTEXT: The bald eagle is not blue.\nFOL: -Blue(eagle)\nTEXT: The bald eagle sees the mouse.\nFOL: BaldEagle(eagle) -> SeesMouse(mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: BaldEagle(eagle) -> SeesTiger(tiger)\nTEXT: The mouse is not kind.\nFOL: -Kind(mouse)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger sees the rabbit.\nFOL: SeesTiger(tiger) -> SeesRabbit(rabbit)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: Young(mouse) & MouseEatsBaldEagle(mouse, eagle) -> NeedsRabbit(mouse)\nTEXT: If something is blue then it eats the mouse.\nFOL: Blue(x) -> EatsMouse(x)\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: Kind(x) & -Young(x) -> EatsMouse(x)\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: SeesTiger(x) -> EatsRabbit(x)\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: SeesRabbit(x) -> -Blue(rabbit)\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: EatsMouse(x) -> Blue(mouse)\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: NeedsRabbit(x) & RabbitEatsTiger(rabbit, tiger) -> SeesRabbit(tiger)\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: EatsMouse(x) & MouseEatsTiger(mouse, tiger) -> -SeesRabbit(mouse)\nTEXT: The bald eagle does not eat the mouse.\nFOL: -EatsBaldEagle(eagle, mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: BaldEagle(eagle) -> EatsRabbit(rabbit)\nTEXT: The bald eagle is not blue.\nFOL: -Blue(eagle)\nTEXT: The bald eagle sees the mouse.\nFOL: BaldEagle(eagle) -> SeesMouse(mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: BaldEagle(eagle) -> SeesTiger(tiger)\nTEXT: The mouse is not kind.\nFOL: -Kind(mouse)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger sees the rabbit.\nFOL: SeesTiger(tiger) -> SeesRabbit(rabbit)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: Young(mouse) & MouseEatsBaldEagle(mouse, eagle) -> NeedsRabbit(mouse)\nTEXT: If something is blue then it eats the mouse.\nFOL: Blue(x) -> EatsMouse(x)\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: Kind(x) & -Young(x) -> EatsMouse(x)\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: SeesTiger(x) -> EatsRabbit(x)\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: SeesRabbit(x) -> -Blue(rabbit)\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: EatsMouse(x) -> Blue(mouse)\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: NeedsRabbit(x) & RabbitEatsTiger(rabbit, tiger) -> SeesRabbit(tiger)\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: EatsMouse(x) & MouseEatsTiger(mouse, tiger) -> -SeesRabbit(mouse)\nTEXT: The bald eagle does not eat the mouse.\nFOL: -EatsRabbit(eagle, mouse)\n</EVALUATE>"
  ]
 },
 {
  "index": 87,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is smart.\nFOL: Smart(dave)\n\nTEXT: Fiona is cold.\nFOL: Cold(fiona)\n\nTEXT: All rough people are not furry.\nFOL: all x. (Rough(x) -> -Furry(x))\n\nTEXT: If someone is big then they are not furry.\nFOL: all x. (Big(x) -> -Furry(x))\n\nTEXT: If Fiona is smart then Fiona is furry.\nFOL: Smart(fiona) -> Furry(fiona)\n\nTEXT: All furry people are cold.\nFOL: all x. (Furry(x) -> Cold(x))\n\nTEXT: If someone is cold then they are smart.\nFOL: all x. (Cold(x) -> Smart(x))\n\nTEXT: If someone is furry and smart then they are not green.\nFOL: (Furry(x) & Smart(x)) -> -Green(x)\n\nTEXT: Smart, big people are white.\nFOL: (Smart(x) & Big(x)) -> White(x)\n\nTEXT: If Dave is rough and Dave is not furry then Dave is not smart.\nFOL: (Rough(dave) & -Furry(dave)) -> -Smart(dave)\n\nTEXT: Dave is green.\nFOL: Green(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is smart.\nFOL: Smart(Dave)\n\nTEXT: Fiona is cold.\nFOL: Cold(Fiona)\n\nTEXT: All rough people are not furry.\nFOL: all x. (Rough(x) -> -Furry(x))\n\nTEXT: If someone is big then they are not furry.\nFOL: all x. (Big(x) -> -Furry(x))\n\nTEXT: If Fiona is smart then Fiona is furry.\nFOL: Smart(Fiona) -> Furry(Fiona)\n\nTEXT: All furry people are cold.\nFOL: all x. (Furry(x) -> Cold(x))\n\nTEXT: If someone is cold then they are smart.\nFOL: all x. (Cold(x) -> Smart(x))\n\nTEXT: If someone is furry and smart then they are not green.\nFOL: (Furry(x) & Smart(x)) -> -Green(x)\n\nTEXT: Smart, big people are white.\nFOL: (Smart(x) & Big(x)) -> White(x)\n\nTEXT: If Dave is rough and Dave is not furry then Dave is not smart.\nFOL: (Rough(Dave) & -Furry(Dave)) -> -Smart(Dave)\n\nTEXT: Dave is green.\nFOL: Green(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is smart.\nFOL: Smart(dave)\n\nTEXT: Fiona is cold.\nFOL: Cold(fiona)\n\nTEXT: All rough people are not furry.\nFOL: all x. (Rough(x) -> -Furry(x))\n\nTEXT: If someone is big then they are not furry.\nFOL: all x. (Big(x) -> -Furry(x))\n\nTEXT: If Fiona is smart then Fiona is furry.\nFOL: Smart(fiona) -> Furry(fiona)\n\nTEXT: All furry people are cold.\nFOL: all x. (Furry(x) -> Cold(x))\n\nTEXT: If someone is cold then they are smart.\nFOL: all x. (Cold(x) -> Smart(x))\n\nTEXT: If someone is furry and smart then they are not green.\nFOL: (Furry(x) & Smart(x)) -> -Green(x)\n\nTEXT: Smart, big people are white.\nFOL: (Big(x) & Smart(x)) -> White(x)\n\nTEXT: If Dave is rough and Dave is not furry then Dave is not smart.\nFOL: (Rough(dave) & -Furry(dave)) -> -Smart(dave)\n\nTEXT: Dave is green.\nFOL: Green(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is smart.\nFOL: Smart(dave)\n\nTEXT: Fiona is cold.\nFOL: Cold(fiona)\n\nTEXT: All rough people are not furry.\nFOL: all x. (Rough(x) -> -Furry(x))\n\nTEXT: If someone is big then they are not furry.\nFOL: all x. (Big(x) -> -Furry(x))\n\nTEXT: If Fiona is smart then Fiona is furry.\nFOL: Smart(fiona) -> Furry(fiona)\n\nTEXT: All furry people are cold.\nFOL: all x. (Furry(x) -> Cold(x))\n\nTEXT: If someone is cold then they are smart.\nFOL: all x. (Cold(x) -> Smart(x))\n\nTEXT: If someone is furry and smart then they are not green.\nFOL: (Furry(x) & Smart(x)) -> -Green(x)\n\nTEXT: Smart, big people are white.\nFOL: all x. ((Smart(x) & Big(x)) -> White(x))\n\nTEXT: If Dave is rough and Dave is not furry then Dave is not smart.\nFOL: (Rough(dave) & -Furry(dave)) -> -Smart(dave)\n\nTEXT: Dave is green.\nFOL: Green(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is smart.\nFOL: Smart(dave)\n\nTEXT: Fiona is cold.\nFOL: Cold(fiona)\n\nTEXT: All rough people are not furry.\nFOL: all x. (Rough(x) -> -Furry(x))\n\nTEXT: If someone is big then they are not furry.\nFOL: all x. (Big(x) -> -Furry(x))\n\nTEXT: If Fiona is smart then Fiona is furry.\nFOL: Smart(fiona) -> Furry(fiona)\n\nTEXT: All furry people are cold.\nFOL: all x. (Furry(x) -> Cold(x))\n\nTEXT: If someone is cold then they are smart.\nFOL: all x. (Cold(x) -> Smart(x))\n\nTEXT: If someone is furry and smart then they are not green.\nFOL: (Furry(x) & Smart(x)) -> -Green(x)\n\nTEXT: Smart, big people are white.\nFOL: all x. (Big(x) & Smart(x) -> White(x))\n\nTEXT: If Dave is rough and Dave is not furry then Dave is not smart.\nFOL: (Rough(dave) & -Furry(dave)) -> -Smart(dave)\n\nTEXT: Dave is green.\nFOL: Green(dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 88,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Gary is round.\nFOL: Round(gary)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: If someone is green and smart then they are white.\nFOL: all x. (Green(x) & Smart(x) -> White(x))\nTEXT: All white people are rough.\nFOL: all x. (White(x) -> Rough(x))\nTEXT: All smart people are green.\nFOL: all x. (Smart(x) -> Green(x))\nTEXT: If Dave is big and Dave is white then Dave is smart.\nFOL: Big(dave) & White(dave) -> Smart(dave)\nTEXT: If someone is big and green then they are smart.\nFOL: all x. (Big(x) & Green(x) -> Smart(x))\nTEXT: If someone is nice then they are smart.\nFOL: all x. (Nice(x) -> Smart(x))\nTEXT: All green, smart people are nice.\nFOL: all x. (Green(x) & Smart(x) -> Nice(x))\nTEXT: If Bob is not smart then Bob is round.\nFOL: -Smart(bob) -> Round(bob)\nTEXT: Harry is not nice.\nFOL: -Nice(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(Bob)\nTEXT: Dave is smart.\nFOL: Smart(Dave)\nTEXT: Gary is round.\nFOL: Round(Gary)\nTEXT: Harry is smart.\nFOL: Smart(Harry)\nTEXT: If someone is green and smart then they are white.\nFOL: all x. (Green(x) & Smart(x) -> White(x))\nTEXT: All white people are rough.\nFOL: all x. (White(x) -> Rough(x))\nTEXT: All smart people are green.\nFOL: all x. (Smart(x) -> Green(x))\nTEXT: If Dave is big and Dave is white then Dave is smart.\nFOL: Big(Dave) & White(Dave) -> Smart(Dave)\nTEXT: If someone is big and green then they are smart.\nFOL: all x. (Big(x) & Green(x) -> Smart(x))\nTEXT: If someone is nice then they are smart.\nFOL: all x. (Nice(x) -> Smart(x))\nTEXT: All green, smart people are nice.\nFOL: all x. (Green(x) & Smart(x) -> Nice(x))\nTEXT: If Bob is not smart then Bob is round.\nFOL: -Smart(Bob) -> Round(Bob)\nTEXT: Harry is not nice.\nFOL: -Nice(Harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(bob)\n\nTEXT: Dave is smart.\nFOL: Smart(dave)\n\nTEXT: Gary is round.\nFOL: Round(gary)\n\nTEXT: Harry is smart.\nFOL: Smart(harry)\n\nTEXT: If someone is green and smart then they are white.\nFOL: all x. (Green(x) & Smart(x) -> White(x))\n\nTEXT: All white people are rough.\nFOL: all x. (White(x) -> Rough(x))\n\nTEXT: All smart people are green.\nFOL: all x. (Smart(x) -> Green(x))\n\nTEXT: If Dave is big and Dave is white then Dave is smart.\nFOL: (Big(dave) & White(dave) -> Smart(dave))\n\nTEXT: If someone is big and green then they are smart.\nFOL: all x. (Big(x) & Green(x) -> Smart(x))\n\nTEXT: If someone is nice then they are smart.\nFOL: all x. (Nice(x) -> Smart(x))\n\nTEXT: All green, smart people are nice.\nFOL: all x. (Green(x) & Smart(x) -> Nice(x))\n\nTEXT: If Bob is not smart then Bob is round.\nFOL: -Smart(bob) -> Round(bob)\n\nTEXT: Harry is not nice.\nFOL: -Nice(harry)\n\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(bob)\n\nTEXT: Dave is smart.\nFOL: Smart(dave)\n\nTEXT: Gary is round.\nFOL: Round(gary)\n\nTEXT: Harry is smart.\nFOL: Smart(harry)\n\nTEXT: If someone is green and smart then they are white.\nFOL: all x. (Green(x) & Smart(x) -> White(x))\n\nTEXT: All white people are rough.\nFOL: all x. (White(x) -> Rough(x))\n\nTEXT: All smart people are green.\nFOL: all x. (Smart(x) -> Green(x))\n\nTEXT: If Dave is big and Dave is white then Dave is smart.\nFOL: Big(dave) & White(dave) -> Smart(dave)\n\nTEXT: If someone is big and green then they are smart.\nFOL: all x. (Big(x) & Green(x) -> Smart(x))\n\nTEXT: If someone is nice then they are smart.\nFOL: all x. (Nice(x) -> Smart(x))\n\nTEXT: All green, smart people are nice.\nFOL: all x. (Green(x) & Smart(x) -> Nice(x))\n\nTEXT: If Bob is not smart then Bob is round.\nFOL: -Smart(bob) -> Round(bob)\n\nTEXT: Harry is not nice.\nFOL: -Nice(harry)\n\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(Bob)\n\nTEXT: Dave is smart.\nFOL: Smart(Dave)\n\nTEXT: Gary is round.\nFOL: Round(Gary)\n\nTEXT: Harry is smart.\nFOL: Smart(Harry)\n\nTEXT: If someone is green and smart then they are white.\nFOL: all x. (Green(x) & Smart(x) -> White(x))\n\nTEXT: All white people are rough.\nFOL: all x. (White(x) -> Rough(x))\n\nTEXT: All smart people are green.\nFOL: all x. (Smart(x) -> Green(x))\n\nTEXT: If Dave is big and Dave is white then Dave is smart.\nFOL: (Big(Dave) & White(Dave)) -> Smart(Dave)\n\nTEXT: If someone is big and green then they are smart.\nFOL: all x. (Big(x) & Green(x) -> Smart(x))\n\nTEXT: If someone is nice then they are smart.\nFOL: all x. (Nice(x) -> Smart(x))\n\nTEXT: All green, smart people are nice.\nFOL: all x. (Green(x) & Smart(x) -> Nice(x))\n\nTEXT: If Bob is not smart then Bob is round.\nFOL: -Smart(Bob) -> Round(Bob)\n\nTEXT: Harry is not nice.\nFOL: -Nice(Harry)\n\n</EVALUATE>"
  ]
 },
 {
  "index": 89,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle chases the cat.\nFOL: BaldEagle(chases(cat))\nTEXT: The cat sees the cow.\nFOL: cat(sees(cow))\nTEXT: The cow chases the cat.\nFOL: cow(chases(cat))\nTEXT: The mouse chases the bald eagle.\nFOL: mouse(chases(baldEagle))\nTEXT: If something visits the mouse then it chases the cat.\nFOL: all x. (Visits(mouse) -> chases(cat))\nTEXT: If something chases the cow then the cow sees the mouse.\nFOL: all x. (chases(cow) -> sees(mouse))\nTEXT: If the mouse chases the bald eagle then the bald eagle chases the cow.\nFOL: mouse(chases(baldEagle)) -> cow(chases(cow))\nTEXT: The mouse does not chase the cat.\nFOL: -mouse(chases(cat))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the cat.\nFOL: BaldEagle(chases(cat))\nTEXT: The cat sees the cow.\nFOL: cat(sees(cow))\nTEXT: The cow chases the cat.\nFOL: cow(chases(cat))\nTEXT: The mouse chases the bald eagle.\nFOL: mouse(chases(baldEagle))\nTEXT: If something visits the mouse then it chases the cat.\nFOL: all x. (Visits(x, mouse) -> chases(x, cat))\nTEXT: If something chases the cow then the cow sees the mouse.\nFOL: all x. (chases(x, cow) -> sees(cow, mouse))\nTEXT: If the mouse chases the bald eagle then the bald eagle chases the cow.\nFOL: mouse(chases(baldEagle)) -> cow(chases(baldEagle))\nTEXT: The mouse does not chase the cat.\nFOL: -mouse(chases(cat))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the cat.\nFOL: BaldEagle(chases(cat))\nTEXT: The cat sees the cow.\nFOL: cat(sees(cow))\nTEXT: The cow chases the cat.\nFOL: cow(chases(cat))\nTEXT: The mouse chases the bald eagle.\nFOL: mouse(chases(baldEagle))\nTEXT: If something visits the mouse then it chases the cat.\nFOL: all x. (Visits(x, mouse) -> chases(x, cat))\nTEXT: If something chases the cow then the cow sees the mouse.\nFOL: all x. (chases(x, cow) -> sees(cow, mouse))\nTEXT: If the mouse chases the bald eagle then the bald eagle chases the cow.\nFOL: (mouse(chases(baldEagle)) -> cow(chases(baldEagle)))\nTEXT: The mouse does not chase the cat.\nFOL: -mouse(chases(cat))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the cat.\nFOL: BaldEagle(chases(cat))\nTEXT: The cat sees the cow.\nFOL: cat(sees(cow))\nTEXT: The cow chases the cat.\nFOL: cow(chases(cat))\nTEXT: The mouse chases the bald eagle.\nFOL: mouse(chases(baldEagle))\nTEXT: If something visits the mouse then it chases the cat.\nFOL: all x. (Visits(x, mouse) -> chases(x, cat))\nTEXT: If something chases the cow then the cow sees the mouse.\nFOL: all x. (chases(x, cow) -> sees(cow, mouse))\nTEXT: If the mouse chases the bald eagle then the bald eagle chases the cow.\nFOL: mouse(chases(baldEagle)) -> cow(chases(cow))\nTEXT: The mouse does not chase the cat.\nFOL: -mouse(chases(cat))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the cat.\nFOL: BaldEagle(chases(cat))\nTEXT: The cat sees the cow.\nFOL: cat(sees(cow))\nTEXT: The cow chases the cat.\nFOL: cow(chases(cat))\nTEXT: The mouse chases the bald eagle.\nFOL: mouse(chases(baldEagle))\nTEXT: If something visits the mouse then it chases the cat.\nFOL: exists x. (Visit(x, mouse) -> chases(x, cat))\nTEXT: If something chases the cow then the cow sees the mouse.\nFOL: exists x. (chases(x, cow) -> sees(cow, mouse))\nTEXT: If the mouse chases the bald eagle then the bald eagle chases the cow.\nFOL: mouse(chases(baldEagle)) -> cow(chases(baldEagle))\nTEXT: The mouse does not chase the cat.\nFOL: -mouse(chases(cat))\n</EVALUATE>"
  ]
 },
 {
  "index": 90,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is smart.\nFOL: Smart(Anne)\nTEXT: Dave is not green.\nFOL: -Green(Dave)\nTEXT: Fiona is green.\nFOL: Green(Fiona)\nTEXT: Harry is round.\nFOL: Round(Harry)\nTEXT: If someone is round and white then they are green.\nFOL: all x. ((Round(x) & White(x)) -> Green(x))\nTEXT: All smart, round people are green.\nFOL: all x. (Smart(x) & Round(x) -> Green(x))\nTEXT: All cold, kind people are white.\nFOL: all x. (Cold(x) & Kind(x) -> White(x))\nTEXT: All furry, white people are round.\nFOL: all x. (Furry(x) & White(x) -> Round(x))\nTEXT: All green people are furry.\nFOL: all x. (Green(x) -> Furry(x))\nTEXT: If Anne is smart then Anne is round.\nFOL: Smart(Anne) -> Round(Anne)\nTEXT: Anne is cold.\nFOL: Cold(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Dave is not green.\nFOL: -Green(dave)\nTEXT: Fiona is green.\nFOL: Green(fiona)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: If someone is round and white then they are green.\nFOL: all x. ((Round(x) & White(x)) -> Green(x))\nTEXT: All smart, round people are green.\nFOL: all x. (Smart(x) & Round(x) -> Green(x))\nTEXT: All cold, kind people are white.\nFOL: all x. (Cold(x) & Kind(x) -> White(x))\nTEXT: All furry, white people are round.\nFOL: all x. (Furry(x) & White(x) -> Round(x))\nTEXT: All green people are furry.\nFOL: all x. (Green(x) -> Furry(x))\nTEXT: If Anne is smart then Anne is round.\nFOL: Smart(anne) -> Round(anne)\nTEXT: Anne is cold.\nFOL: Cold(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is smart.\nFOL: Smart(Anne)\n\nTEXT: Dave is not green.\nFOL: -Green(Dave)\n\nTEXT: Fiona is green.\nFOL: Green(Fiona)\n\nTEXT: Harry is round.\nFOL: Round(Harry)\n\nTEXT: If someone is round and white then they are green.\nFOL: all x. ((Round(x) & White(x)) -> Green(x))\n\nTEXT: All smart, round people are green.\nFOL: all x. (Smart(x) & Round(x) -> Green(x))\n\nTEXT: All cold, kind people are white.\nFOL: all x. (Cold(x) & Kind(x) -> White(x))\n\nTEXT: All furry, white people are round.\nFOL: all x. (Furry(x) & White(x) -> Round(x))\n\nTEXT: All green people are furry.\nFOL: all x. (Green(x) -> Furry(x))\n\nTEXT: If Anne is smart then Anne is round.\nFOL: Smart(Anne) -> Round(Anne)\n\nTEXT: Anne is cold.\nFOL: Cold(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is smart.\nFOL: Smart(anne)\n\nTEXT: Dave is not green.\nFOL: -Green(dave)\n\nTEXT: Fiona is green.\nFOL: Green(fiona)\n\nTEXT: Harry is round.\nFOL: Round(harry)\n\nTEXT: If someone is round and white then they are green.\nFOL: all x. ((Round(x) & White(x)) -> Green(x))\n\nTEXT: All smart, round people are green.\nFOL: all x. (Smart(x) & Round(x) -> Green(x))\n\nTEXT: All cold, kind people are white.\nFOL: all x. (Cold(x) & Kind(x) -> White(x))\n\nTEXT: All furry, white people are round.\nFOL: all x. (Furry(x) & White(x) -> Round(x))\n\nTEXT: All green people are furry.\nFOL: all x. (Green(x) -> Furry(x))\n\nTEXT: If Anne is smart then Anne is round.\nFOL: Smart(anne) -> Round(anne)\n\nTEXT: Anne is cold.\nFOL: Cold(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is smart.\nFOL: Smart(Anne)\nTEXT: Dave is not green.\nFOL: -Green(Dave)\nTEXT: Fiona is green.\nFOL: Green(Fiona)\nTEXT: Harry is round.\nFOL: Round(Harry)\nTEXT: If someone is round and white then they are green.\nFOL: all x. (Round(x) & White(x) -> Green(x))\nTEXT: All smart, round people are green.\nFOL: all x. (Smart(x) & Round(x) -> Green(x))\nTEXT: All cold, kind people are white.\nFOL: all x. (Cold(x) & Kind(x) -> White(x))\nTEXT: All furry, white people are round.\nFOL: all x. (Furry(x) & White(x) -> Round(x))\nTEXT: All green people are furry.\nFOL: all x. (Green(x) -> Furry(x))\nTEXT: If Anne is smart then Anne is round.\nFOL: Smart(Anne) -> Round(Anne)\nTEXT: Anne is cold.\nFOL: Cold(Anne)\n</EVALUATE>"
  ]
 },
 {
  "index": 91,
  "responses": [
   "<EVALUATE>\nTEXT: The cat needs the mouse.\nFOL: NeedsTheMouse(cat, mouse)\nTEXT: The cow does not see the cat.\nFOL: -SeesTheCat(cow, cat)\nTEXT: The mouse is big.\nFOL: Big(mouse)\nTEXT: If something chases the cat then the cat is not nice.\nFOL: all x. (Chases(x, cat) -> -Nice(x))\nTEXT: If something needs the mouse then the mouse is not nice.\nFOL: all x. (NeedsTheMouse(x, mouse) -> -Nice(mouse))\nTEXT: If something chases the cow and it is not nice then it sees the mouse.\nFOL: all x. ((Chases(x, cow) & -Nice(x)) -> SeesTheMouse(x, mouse))\nTEXT: The mouse is not young.\nFOL: -Young(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat needs the mouse.\nFOL: NeedsTheMouse(cat, mouse)\n\nTEXT: The cow does not see the cat.\nFOL: -SeesTheCat(cow, cat)\n\nTEXT: The mouse is big.\nFOL: Big(mouse)\n\nTEXT: If something chases the cat then the cat is not nice.\nFOL: all x. (Chases(x, cat) -> -Nice(x))\n\nTEXT: If something needs the mouse then the mouse is not nice.\nFOL: all x. (NeedsTheMouse(x, mouse) -> -Nice(mouse))\n\nTEXT: If something chases the cow and it is not nice then it sees the mouse.\nFOL: all x. ((Chases(x, cow) & -Nice(x)) -> SeesTheMouse(x, mouse))\n\nTEXT: The mouse is not young.\nFOL: -Young(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat needs the mouse.\nFOL: NeedsMouse(cat)\nTEXT: The cow does not see the cat.\nFOL: -SeesCat(cow)\nTEXT: The mouse is big.\nFOL: BigMouse(mouse)\nTEXT: If something chases the cat then the cat is not nice.\nFOL: all x. (Chases(x, cat) -> -Nice(x))\nTEXT: If something needs the mouse then the mouse is not nice.\nFOL: all x. (NeedsMouse(x) -> -NiceMouse(x))\nTEXT: If something chases the cow and it is not nice then it sees the mouse.\nFOL: all x. ((Chases(x, cow) & -Nice(x)) -> SeesMouse(x))\nTEXT: The mouse is not young.\nFOL: -YoungMouse(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat needs the mouse.\nFOL: NeedsMouse(cat)\nTEXT: The cow does not see the cat.\nFOL: -SeesCat(cow)\nTEXT: The mouse is big.\nFOL: BigMouse(mouse)\nTEXT: If something chases the cat then the cat is not nice.\nFOL: all x. (ChasesCat(x) -> -Nice(cat))\nTEXT: If something needs the mouse then the mouse is not nice.\nFOL: all x. (NeedsMouse(x) -> -Nice(mouse))\nTEXT: If something chases the cow and it is not nice then it sees the mouse.\nFOL: all x. ((ChasesCow(x) & -Nice(x)) -> SeesMouse(x))\nTEXT: The mouse is not young.\nFOL: -YoungMouse(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat needs the mouse.\nFOL: NeedsTheMouse(cat, mouse)\nTEXT: The cow does not see the cat.\nFOL: -SeesTheCat(cow, cat)\nTEXT: The mouse is big.\nFOL: Big(mouse)\nTEXT: If something chases the cat then the cat is not nice.\nFOL: all x. (Chases(x, cat) -> -Nice(x))\nTEXT: If something needs the mouse then the mouse is not nice.\nFOL: all x. (Needs(x, mouse) -> -Nice(mouse))\nTEXT: If something chases the cow and it is not nice then it sees the mouse.\nFOL: all x. ((Chases(x, cow) & -Nice(x)) -> SeesTheMouse(x))\nTEXT: The mouse is not young.\nFOL: -Young(mouse)\n</EVALUATE>"
  ]
 },
 {
  "index": 92,
  "responses": [
   "<EVALUATE>\nTEXT: The dog is green.\nFOL: Dog(dog) -> Green(dog)\nTEXT: The mouse visits the dog.\nFOL: Mouse(mouse) & Visit(mouse, dog)\nTEXT: If something visits the dog then the dog is young.\nFOL: all x. (Visit(x, dog) -> Young(dog))\nTEXT: If something is red and young then it does not need the mouse.\nFOL: all x. (Red(x) & Young(x) -> -Need(x, mouse))\nTEXT: If something eats the mouse then the mouse is not cold.\nFOL: all x. (Eat(x, mouse) -> -Cold(mouse))\nTEXT: If something needs the dog then it is green.\nFOL: all x. (Need(x, dog) -> Green(x))\nTEXT: If something eats the mouse then the mouse needs the dog.\nFOL: all x. (Eat(x, mouse) -> Need(mouse, dog))\nTEXT: If something needs the mouse then the mouse needs the dog.\nFOL: all x. (Need(x, mouse) -> Need(mouse, dog))\nTEXT: If something is green and not young then it eats the mouse.\nFOL: all x. (Green(x) & -Young(x) -> Eat(x, mouse))\nTEXT: If something is green then it eats the mouse.\nFOL: all x. (Green(x) -> Eat(x, mouse))\nTEXT: The dog does not eat the mouse.\nFOL: -Eat(dog, mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is green.\nFOL: Dog(dog) -> Green(dog)\nTEXT: The mouse visits the dog.\nFOL: Mouse(dog) & Visit(dog, mouse)\nTEXT: If something visits the dog then the dog is young.\nFOL: all x. (Visit(x, dog) -> Young(dog))\nTEXT: If something is red and young then it does not need the mouse.\nFOL: all x. (Red(x) & Young(x) -> -Need(x, mouse))\nTEXT: If something eats the mouse then the mouse is not cold.\nFOL: all x. (Eat(x, mouse) -> -Cold(mouse))\nTEXT: If something needs the dog then it is green.\nFOL: all x. (Need(x, dog) -> Green(x))\nTEXT: If something eats the mouse then the mouse needs the dog.\nFOL: all x. (Eat(x, mouse) -> Need(mouse, dog))\nTEXT: If something needs the mouse then the mouse needs the dog.\nFOL: all x. (Need(x, mouse) -> Need(mouse, dog))\nTEXT: If something is green and not young then it eats the mouse.\nFOL: all x. (Green(x) & -Young(x) -> Eat(x, mouse))\nTEXT: If something is green then it eats the mouse.\nFOL: all x. (Green(x) -> Eat(x, mouse))\nTEXT: The dog does not eat the mouse.\nFOL: -Eat(dog, mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is green.\nFOL: Dog(isGreen)\nTEXT: The mouse visits the dog.\nFOL: Mouse(visitsDog)\nTEXT: If something visits the dog then the dog is young.\nFOL: all x. (VisitsDog(x) -> YoungDog(x))\nTEXT: If something is red and young then it does not need the mouse.\nFOL: all x. (Red(x) & Young(x) -> -NeedsMouse(x))\nTEXT: If something eats the mouse then the mouse is not cold.\nFOL: all x. (EatsMouse(x) -> -ColdMouse(x))\nTEXT: If something needs the dog then it is green.\nFOL: all x. (NeedsDog(x) -> isGreen(x))\nTEXT: If something eats the mouse then the mouse needs the dog.\nFOL: all x. (EatsMouse(x) -> NeedsDog(x))\nTEXT: If something needs the mouse then the mouse needs the dog.\nFOL: all x. (NeedsMouse(x) -> NeedsDog(x))\nTEXT: If something is green and not young then it eats the mouse.\nFOL: all x. (isGreen(x) & -Young(x) -> EatsMouse(x))\nTEXT: If something is green then it eats the mouse.\nFOL: all x. (isGreen(x) -> EatsMouse(x))\nTEXT: The dog does not eat the mouse.\nFOL: -EatsMouse(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is green.\nFOL: Dog(dog) -> Green(dog)\nTEXT: The mouse visits the dog.\nFOL: Mouse(mouse) & Visit(mouse, dog)\nTEXT: If something visits the dog then the dog is young.\nFOL: all x. (Visit(x, dog) -> Young(dog))\nTEXT: If something is red and young then it does not need the mouse.\nFOL: all x. (Red(x) & Young(x) -> -Need(mouse, x))\nTEXT: If something eats the mouse then the mouse is not cold.\nFOL: all x. (Eat(x, mouse) -> -Cold(mouse))\nTEXT: If something needs the dog then it is green.\nFOL: all x. (Need(x, dog) -> Green(x))\nTEXT: If something eats the mouse then the mouse needs the dog.\nFOL: all x. (Eat(x, mouse) -> Need(dog, x))\nTEXT: If something needs the mouse then the mouse needs the dog.\nFOL: all x. (Need(x, mouse) -> Need(dog, x))\nTEXT: If something is green and not young then it eats the mouse.\nFOL: all x. (Green(x) & -Young(x) -> Eat(mouse, x))\nTEXT: If something is green then it eats the mouse.\nFOL: all x. (Green(x) -> Eat(mouse, x))\nTEXT: The dog does not eat the mouse.\nFOL: -Eat(dog, mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is green.\nFOL: Dog(isGreen)\nTEXT: The mouse visits the dog.\nFOL: Mouse(visitsDog)\nTEXT: If something visits the dog then the dog is young.\nFOL: all x. (VisitsDog(x) -> YoungDog(x))\nTEXT: If something is red and young then it does not need the mouse.\nFOL: all x. (Red(x) & Young(x) -> -NeedsMouse(x))\nTEXT: If something eats the mouse then the mouse is not cold.\nFOL: all x. (EatsMouse(x) -> -ColdMouse(x))\nTEXT: If something needs the dog then it is green.\nFOL: all x. (NeedsDog(x) -> isGreen(x))\nTEXT: If something eats the mouse then the mouse needs the dog.\nFOL: all x. (EatsMouse(x) -> NeedsDog(x))\nTEXT: If something needs the mouse then the mouse needs the dog.\nFOL: all x. (NeedsMouse(x) -> NeedsDog(x))\nTEXT: If something is green and not young then it eats the mouse.\nFOL: all x. ((isGreen(x) & -Young(x)) -> EatsMouse(x))\nTEXT: If something is green then it eats the mouse.\nFOL: all x. (isGreen(x) -> EatsMouse(x))\nTEXT: The dog does not eat the mouse.\nFOL: -EatsMouse(dog)\n</EVALUATE>"
  ]
 },
 {
  "index": 93,
  "responses": [
   "<EVALUATE>\nTEXT: Fiona is green.\nFOL: Fiona(Green(Fiona))\n\nTEXT: If Fiona is kind then Fiona is young.\nFOL: Fiona(Kind(Fiona) -> Young(Fiona))\n\nTEXT: All big people are not green.\nFOL: all x. (Big(x) -> -Green(x))\n\nTEXT: If someone is big and not red then they are green.\nFOL: all x. ((Big(x) & -Red(x)) -> Green(x))\n\nTEXT: All green people are rough.\nFOL: all x. (Green(x) -> Rough(x))\n\nTEXT: Rough people are kind.\nFOL: Rough(x) -> Kind(x)\n\nTEXT: If someone is young then they are kind.\nFOL: all x. (Young(x) -> Kind(x))\n\nTEXT: Cold people are kind.\nFOL: Cold(x) -> Kind(x)\n\nTEXT: If someone is red and young then they are not big.\nFOL: all x. ((Red(x) & Young(x)) -> -Big(x))\n\nTEXT: Fiona is not green.\nFOL: -Green(Fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Fiona is green.\nFOL: Fiona(Green(Fiona))\n\nTEXT: If Fiona is kind then Fiona is young.\nFOL: Fiona(Kind(Fiona) -> Young(Fiona))\n\nTEXT: All big people are not green.\nFOL: all x. (Big(x) -> -Green(x))\n\nTEXT: If someone is big and not red then they are green.\nFOL: all x. (Big(x) & -Red(x) -> Green(x))\n\nTEXT: All green people are rough.\nFOL: all x. (Green(x) -> Rough(x))\n\nTEXT: Rough people are kind.\nFOL: Rough(x) -> Kind(x)\n\nTEXT: If someone is young then they are kind.\nFOL: all x. (Young(x) -> Kind(x))\n\nTEXT: Cold people are kind.\nFOL: Cold(x) -> Kind(x)\n\nTEXT: If someone is red and young then they are not big.\nFOL: all x. ((Red(x) & Young(x)) -> -Big(x))\n\nTEXT: Fiona is not green.\nFOL: -Green(Fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Fiona is green.\nFOL: Fiona(Green(Fiona))\nTEXT: If Fiona is kind then Fiona is young.\nFOL: Fiona(Kind(Fiona) -> Young(Fiona))\nTEXT: All big people are not green.\nFOL: all x. (Big(x) -> -Green(x))\nTEXT: If someone is big and not red then they are green.\nFOL: all x. (Big(x) & -Red(x) -> Green(x))\nTEXT: All green people are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: Rough people are kind.\nFOL: Rough(x) -> Kind(x)\nTEXT: If someone is young then they are kind.\nFOL: all x. (Young(x) -> Kind(x))\nTEXT: Cold people are kind.\nFOL: Cold(x) -> Kind(x)\nTEXT: If someone is red and young then they are not big.\nFOL: all x. ((Red(x) & Young(x)) -> -Big(x))\nTEXT: Fiona is not green.\nFOL: -Green(Fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Fiona is green.\nFOL: Fiona(Green(Fiona))\n\nTEXT: If Fiona is kind then Fiona is young.\nFOL: Fiona(Kind(Fiona) -> Young(Fiona))\n\nTEXT: All big people are not green.\nFOL: all x. (Big(x) -> -Green(x))\n\nTEXT: If someone is big and not red then they are green.\nFOL: all x. (Big(x) & -Red(x) -> Green(x))\n\nTEXT: All green people are rough.\nFOL: all x. (Green(x) -> Rough(x))\n\nTEXT: Rough people are kind.\nFOL: Rough(x) -> Kind(x)\n\nTEXT: If someone is young then they are kind.\nFOL: all x. (Young(x) -> Kind(x))\n\nTEXT: Cold people are kind.\nFOL: Cold(x) -> Kind(x)\n\nTEXT: If someone is red and young then they are not big.\nFOL: all x. (Red(x) & Young(x) -> -Big(x))\n\nTEXT: Fiona is not green.\nFOL: -Green(Fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Fiona is green.\nFOL: Fiona(Green(Fiona))\nTEXT: If Fiona is kind then Fiona is young.\nFOL: Fiona(Kind(Fiona) -> Young(Fiona))\nTEXT: All big people are not green.\nFOL: all x. (Big(x) -> -Green(x))\nTEXT: If someone is big and not red then they are green.\nFOL: all x. (Big(x) & -Red(x) -> Green(x))\nTEXT: All green people are rough.\nFOL: all x. (Green(x) -> Rough(x))\nTEXT: Rough people are kind.\nFOL: Rough(x) -> Kind(x)\nTEXT: If someone is young then they are kind.\nFOL: all x. (Young(x) -> Kind(x))\nTEXT: Cold people are kind.\nFOL: Cold(x) -> Kind(x)\nTEXT: If someone is red and young then they are not big.\nFOL: all x. (Red(x) & Young(x) -> -Big(x))\nTEXT: Fiona is not green.\nFOL: -Green(Fiona)\n</EVALUATE>"
  ]
 },
 {
  "index": 94,
  "responses": [
   "<EVALUATE>\nTEXT: The bear is green.\nFOL: Bear(bear) -> Green(bear)\nTEXT: The bear is young.\nFOL: Bear(bear) -> Young(bear)\nTEXT: The bear sees the rabbit.\nFOL: Bear(bear) & Rabbit(rabbit) -> Sees(bear, rabbit)\nTEXT: The lion is cold.\nFOL: Lion(lion) -> Cold(lion)\nTEXT: The lion is young.\nFOL: Lion(lion) -> Young(lion)\nTEXT: The lion needs the bear.\nFOL: Lion(lion) & Bear(bear) -> Needs(lion, bear)\nTEXT: The lion needs the rabbit.\nFOL: Lion(lion) & Rabbit(rabbit) -> Needs(lion, rabbit)\nTEXT: The rabbit needs the bear.\nFOL: Rabbit(rabbit) & Bear(bear) -> Needs(rabbit, bear)\nTEXT: The rabbit needs the lion.\nFOL: Rabbit(rabbit) & Lion(lion) -> Needs(rabbit, lion)\nTEXT: The rabbit does not see the bear.\nFOL: Rabbit(rabbit) & Bear(bear) -> -Sees(rabbit, bear)\nTEXT: The rabbit visits the bear.\nFOL: Rabbit(rabbit) & Bear(bear) -> Visits(rabbit, bear)\nTEXT: If someone visits the bear and the bear is not red then the bear sees the rabbit.\nFOL: exists x. (Visits(x, bear) & -Red(bear) -> Sees(x, rabbit))\nTEXT: If the lion is cold and the lion visits the bear then the lion sees the bear.\nFOL: Lion(lion) & Cold(lion) & Visits(lion, bear) -> Sees(lion, bear)\nTEXT: If someone visits the bear and they need the lion then the lion sees the bear.\nFOL: exists x. (Visits(x, bear) & Needs(x, lion) -> Sees(lion, bear))\nTEXT: If the bear sees the lion then the bear is cold.\nFOL: Sees(bear, lion) -> Cold(bear)\nTEXT: If someone is cold then they need the rabbit.\nFOL: exists x. (Cold(x) -> Needs(x, rabbit))\nTEXT: If someone needs the lion and the lion sees the bear then the bear sees the lion.\nFOL: exists x. (Needs(x, lion) & Sees(lion, bear) -> Sees(bear, lion))\nTEXT: The bear visits the lion.\nFOL: Bear(bear) & Visits(bear, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is green.\nFOL: Bear(bear) -> Green(bear)\nTEXT: The bear is young.\nFOL: Bear(bear) -> Young(bear)\nTEXT: The bear sees the rabbit.\nFOL: Bear(bear) & Rabbit(rabbit) -> Sees(bear, rabbit)\nTEXT: The lion is cold.\nFOL: Lion(lion) -> Cold(lion)\nTEXT: The lion is young.\nFOL: Lion(lion) -> Young(lion)\nTEXT: The lion needs the bear.\nFOL: Lion(lion) & Bear(bear) -> Needs(lion, bear)\nTEXT: The lion needs the rabbit.\nFOL: Lion(lion) & Rabbit(rabbit) -> Needs(lion, rabbit)\nTEXT: The rabbit needs the bear.\nFOL: Rabbit(rabbit) & Bear(bear) -> Needs(rabbit, bear)\nTEXT: The rabbit needs the lion.\nFOL: Rabbit(rabbit) & Lion(lion) -> Needs(rabbit, lion)\nTEXT: The rabbit does not see the bear.\nFOL: Rabbit(rabbit) & Bear(bear) -> -Sees(rabbit, bear)\nTEXT: The rabbit visits the bear.\nFOL: Rabbit(rabbit) & Bear(bear) -> Visits(rabbit, bear)\nTEXT: If someone visits the bear and the bear is not red then the bear sees the rabbit.\nFOL: exists x. (Visits(x, bear) & -Red(bear) -> Sees(x, rabbit))\nTEXT: If the lion is cold and the lion visits the bear then the lion sees the bear.\nFOL: Lion(lion) & Cold(lion) & Visits(lion, bear) -> Sees(lion, bear)\nTEXT: If someone visits the bear and they need the lion then the lion sees the bear.\nFOL: exists x. (Visits(x, bear) & Needs(x, lion) -> Sees(lion, bear))\nTEXT: If the bear sees the lion then the bear is cold.\nFOL: Sees(bear, lion) -> Cold(bear)\nTEXT: If someone is cold then they need the rabbit.\nFOL: Cold(x) -> Needs(x, rabbit)\nTEXT: If someone needs the lion and the lion sees the bear then the bear sees the lion.\nFOL: Needs(x, lion) & Sees(lion, bear) -> Sees(bear, lion)\nTEXT: The bear visits the lion.\nFOL: Bear(bear) & Visits(bear, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is green.\nFOL: Bear(bear) -> Green(bear)\nTEXT: The bear is young.\nFOL: Bear(bear) -> Young(bear)\nTEXT: The bear sees the rabbit.\nFOL: Bear(bear) & Rabbit(rabbit) -> Sees(bear, rabbit)\nTEXT: The lion is cold.\nFOL: Lion(lion) -> Cold(lion)\nTEXT: The lion is young.\nFOL: Lion(lion) -> Young(lion)\nTEXT: The lion needs the bear.\nFOL: Lion(lion) & Bear(bear) -> Needs(lion, bear)\nTEXT: The lion needs the rabbit.\nFOL: Lion(lion) & Rabbit(rabbit) -> Needs(lion, rabbit)\nTEXT: The rabbit needs the bear.\nFOL: Rabbit(rabbit) & Bear(bear) -> Needs(rabbit, bear)\nTEXT: The rabbit needs the lion.\nFOL: Rabbit(rabbit) & Lion(lion) -> Needs(rabbit, lion)\nTEXT: The rabbit does not see the bear.\nFOL: Rabbit(rabbit) & Bear(bear) -> -Sees(rabbit, bear)\nTEXT: The rabbit visits the bear.\nFOL: Rabbit(rabbit) & Bear(bear) -> Visits(rabbit, bear)\nTEXT: If someone visits the bear and the bear is not red then the bear sees the rabbit.\nFOL: exists x. (Visits(x, bear) & -Red(bear) & Bear(bear) & Sees(bear, rabbit))\nTEXT: If the lion is cold and the lion visits the bear then the lion sees the bear.\nFOL: Lion(lion) & Cold(lion) & Visits(lion, bear) -> Sees(lion, bear)\nTEXT: If someone visits the bear and they need the lion then the lion sees the bear.\nFOL: exists x. (Visits(x, bear) & Needs(x, lion) & Lion(lion) & Sees(lion, bear))\nTEXT: If the bear sees the lion then the bear is cold.\nFOL: Sees(bear, lion) -> Cold(bear)\nTEXT: If someone is cold then they need the rabbit.\nFOL: exists x. (Cold(x) -> Needs(x, rabbit))\nTEXT: If someone needs the lion and the lion sees the bear then the bear sees the lion.\nFOL: exists x. (Needs(x, lion) & Sees(lion, bear) -> Sees(bear, lion))\nTEXT: The bear visits the lion.\nFOL: Bear(bear) & Visits(bear, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is green.\nFOL: Bear(bear) -> Green(bear)\nTEXT: The bear is young.\nFOL: Bear(bear) -> Young(bear)\nTEXT: The bear sees the rabbit.\nFOL: Bear(bear) & Rabbit(rabbit) -> Sees(bear, rabbit)\nTEXT: The lion is cold.\nFOL: Lion(lion) -> Cold(lion)\nTEXT: The lion is young.\nFOL: Lion(lion) -> Young(lion)\nTEXT: The lion needs the bear.\nFOL: Lion(lion) & Bear(bear) -> Needs(lion, bear)\nTEXT: The lion needs the rabbit.\nFOL: Lion(lion) & Rabbit(rabbit) -> Needs(lion, rabbit)\nTEXT: The rabbit needs the bear.\nFOL: Rabbit(rabbit) & Bear(bear) -> Needs(rabbit, bear)\nTEXT: The rabbit needs the lion.\nFOL: Rabbit(rabbit) & Lion(lion) -> Needs(rabbit, lion)\nTEXT: The rabbit does not see the bear.\nFOL: Rabbit(rabbit) & Bear(bear) -> -Sees(rabbit, bear)\nTEXT: The rabbit visits the bear.\nFOL: Rabbit(rabbit) & Bear(bear) -> Visits(rabbit, bear)\nTEXT: If someone visits the bear and the bear is not red then the bear sees the rabbit.\nFOL: exists x. (Visits(x, bear) & -Red(bear) & Bear(bear) -> Sees(x, rabbit))\nTEXT: If the lion is cold and the lion visits the bear then the lion sees the bear.\nFOL: Lion(lion) & Cold(lion) & Visits(lion, bear) -> Sees(lion, bear)\nTEXT: If someone visits the bear and they need the lion then the lion sees the bear.\nFOL: exists x. (Visits(x, bear) & Needs(x, lion) & Lion(lion) & Bear(bear) -> Sees(x, lion))\nTEXT: If the bear sees the lion then the bear is cold.\nFOL: Sees(bear, lion) -> Cold(bear)\nTEXT: If someone is cold then they need the rabbit.\nFOL: exists x. (Cold(x) -> Needs(x, rabbit))\nTEXT: If someone needs the lion and the lion sees the bear then the bear sees the lion.\nFOL: exists x. (Needs(x, lion) & Sees(lion, bear) & Bear(bear) -> Sees(x, lion))\nTEXT: The bear visits the lion.\nFOL: Bear(bear) & Visits(bear, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is green.\nFOL: Bear(bear) -> Green(bear)\nTEXT: The bear is young.\nFOL: Bear(bear) -> Young(bear)\nTEXT: The bear sees the rabbit.\nFOL: Bear(bear) & Rabbit(rabbit) -> Sees(bear, rabbit)\nTEXT: The lion is cold.\nFOL: Lion(lion) -> Cold(lion)\nTEXT: The lion is young.\nFOL: Lion(lion) -> Young(lion)\nTEXT: The lion needs the bear.\nFOL: Lion(lion) & Bear(bear) -> Needs(lion, bear)\nTEXT: The lion needs the rabbit.\nFOL: Lion(lion) & Rabbit(rabbit) -> Needs(lion, rabbit)\nTEXT: The rabbit needs the bear.\nFOL: Rabbit(rabbit) & Bear(bear) -> Needs(rabbit, bear)\nTEXT: The rabbit needs the lion.\nFOL: Rabbit(rabbit) & Lion(lion) -> Needs(rabbit, lion)\nTEXT: The rabbit does not see the bear.\nFOL: Rabbit(rabbit) & Bear(bear) -> -Sees(rabbit, bear)\nTEXT: The rabbit visits the bear.\nFOL: Rabbit(rabbit) & Bear(bear) -> Visits(rabbit, bear)\nTEXT: If someone visits the bear and the bear is not red then the bear sees the rabbit.\nFOL: exists x. (Visits(x, bear) & -Red(bear) -> Sees(x, rabbit))\nTEXT: If the lion is cold and the lion visits the bear then the lion sees the bear.\nFOL: Lion(lion) & Cold(lion) & Visits(lion, bear) -> Sees(lion, bear)\nTEXT: If someone visits the bear and they need the lion then the lion sees the bear.\nFOL: exists x. (Visits(x, bear) & Needs(x, lion) -> Sees(lion, bear))\nTEXT: If the bear sees the lion then the bear is cold.\nFOL: Sees(bear, lion) -> Cold(bear)\nTEXT: If someone is cold then they need the rabbit.\nFOL: exists x. (Cold(x) -> Needs(x, rabbit))\nTEXT: If someone needs the lion and the lion sees the bear then the bear sees the lion.\nFOL: exists x. (Needs(x, lion) & Sees(lion, bear) -> Sees(bear, lion))\nTEXT: The bear visits the lion.\nFOL: Bear(bear) & Lion(lion) -> Visits(bear, lion)\n</EVALUATE>"
  ]
 },
 {
  "index": 95,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is not blue.\nFOL: -Blue(baldEagle)\nTEXT: The bald eagle is cold.\nFOL: BaldEagle(cold)\nTEXT: The bald eagle does not need the tiger.\nFOL: -Need(baldEagle, tiger)\nTEXT: The bald eagle sees the cat.\nFOL: See(baldEagle, cat)\nTEXT: The bald eagle does not see the tiger.\nFOL: -See(baldEagle, tiger)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat visits the tiger.\nFOL: Visit(cat, tiger)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger needs the cat.\nFOL: Need(tiger, cat)\nTEXT: The tiger sees the cat.\nFOL: See(tiger, cat)\nTEXT: If the bald eagle does not need the tiger then the tiger does not see the bald eagle.\nFOL: -Need(baldEagle, tiger) -> -See(tiger, baldEagle)\nTEXT: The bald eagle does not need the cat.\nFOL: -Need(baldEagle, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is not blue.\nFOL: -Blue(baldEagle)\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle does not need the tiger.\nFOL: -Needs(baldEagle, tiger)\nTEXT: The bald eagle sees the cat.\nFOL: See(baldEagle, cat)\nTEXT: The bald eagle does not see the tiger.\nFOL: -See(baldEagle, tiger)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat visits the tiger.\nFOL: Visit(cat, tiger)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger needs the cat.\nFOL: Needs(tiger, cat)\nTEXT: The tiger sees the cat.\nFOL: See(tiger, cat)\nTEXT: If the bald eagle does not need the tiger then the tiger does not see the bald eagle.\nFOL: -Needs(baldEagle, tiger) -> -See(tiger, baldEagle)\nTEXT: The bald eagle does not need the cat.\nFOL: -Needs(baldEagle, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is not blue.\nFOL: -Blue(baldEagle)\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle does not need the tiger.\nFOL: -Needs(baldEagle, tiger)\nTEXT: The bald eagle sees the cat.\nFOL: Sees(baldEagle, cat)\nTEXT: The bald eagle does not see the tiger.\nFOL: -Sees(baldEagle, tiger)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat visits the tiger.\nFOL: Visits(cat, tiger)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger needs the cat.\nFOL: Needs(tiger, cat)\nTEXT: The tiger sees the cat.\nFOL: Sees(tiger, cat)\nTEXT: If the bald eagle does not need the tiger then the tiger does not see the bald eagle.\nFOL: -Needs(baldEagle, tiger) -> -Sees(tiger, baldEagle)\nTEXT: The bald eagle does not need the cat.\nFOL: -Needs(baldEagle, cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is not blue.\nFOL: -Blue(baldEagle)\nTEXT: The bald eagle is cold.\nFOL: Cold(baldEagle)\nTEXT: The bald eagle does not need the tiger.\nFOL: -NeedsTiger(baldEagle)\nTEXT: The bald eagle sees the cat.\nFOL: SeeCat(baldEagle)\nTEXT: The bald eagle does not see the tiger.\nFOL: -SeeTiger(baldEagle)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat visits the tiger.\nFOL: VisitTiger(cat)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger needs the cat.\nFOL: NeedsCat(tiger)\nTEXT: The tiger sees the cat.\nFOL: SeeCat(tiger)\nTEXT: If the bald eagle does not need the tiger then the tiger does not see the bald eagle.\nFOL: -NeedsTiger(baldEagle) -> -SeeTiger(baldEagle)\nTEXT: The bald eagle does not need the cat.\nFOL: -NeedsCat(baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is not blue.\nFOL: -Blue(baldEagle)\nTEXT: The bald eagle is cold.\nFOL: BaldEagle(cold)\nTEXT: The bald eagle does not need the tiger.\nFOL: -NeedsTiger(baldEagle)\nTEXT: The bald eagle sees the cat.\nFOL: SeesCat(baldEagle, cat)\nTEXT: The bald eagle does not see the tiger.\nFOL: -SeesTiger(baldEagle, tiger)\nTEXT: The cat is nice.\nFOL: Nice(cat)\nTEXT: The cat visits the tiger.\nFOL: VisitsTiger(cat, tiger)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger needs the cat.\nFOL: NeedsCat(tiger)\nTEXT: The tiger sees the cat.\nFOL: SeesCat(tiger, cat)\nTEXT: If the bald eagle does not need the tiger then the tiger does not see the bald eagle.\nFOL: -NeedsTiger(baldEagle) -> -SeesTiger(baldEagle, tiger)\nTEXT: The bald eagle does not need the cat.\nFOL: -NeedsCat(baldEagle)\n</EVALUATE>"
  ]
 },
 {
  "index": 96,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: Furry(Anne)\n\nTEXT: Anne is not kind.\nFOL: -Kind(Anne)\n\nTEXT: Anne is red.\nFOL: Red(Anne)\n\nTEXT: Erin is cold.\nFOL: Cold(Erin)\n\nTEXT: Erin is nice.\nFOL: Nice(Erin)\n\nTEXT: Erin is not quiet.\nFOL: -Quiet(Erin)\n\nTEXT: Erin is red.\nFOL: Red(Erin)\n\nTEXT: If Anne is red and Anne is not kind then Anne is quiet.\nFOL: (Red(Anne) & -Kind(Anne)) -> Quiet(Anne)\n\nTEXT: Quiet, furry people are not nice.\nFOL: all x. (Quiet(x) & Furry(x) -> -Nice(x))\n\nTEXT: If Anne is quiet and Anne is not nice then Anne is cold.\nFOL: (Quiet(Anne) & -Nice(Anne)) -> Cold(Anne)\n\nTEXT: Anne is kind.\nFOL: Kind(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: Furry(Anne)\n\nTEXT: Anne is not kind.\nFOL: -Kind(Anne)\n\nTEXT: Anne is red.\nFOL: Red(Anne)\n\nTEXT: Erin is cold.\nFOL: Cold(Erin)\n\nTEXT: Erin is nice.\nFOL: Nice(Erin)\n\nTEXT: Erin is not quiet.\nFOL: -Quiet(Erin)\n\nTEXT: Erin is red.\nFOL: Red(Erin)\n\nTEXT: If Anne is red and Anne is not kind then Anne is quiet.\nFOL: (Red(Anne) & -Kind(Anne)) -> Quiet(Anne)\n\nTEXT: Quiet, furry people are not nice.\nFOL: (Quiet(x) & Furry(x)) -> -Nice(x)\n\nTEXT: If Anne is quiet and Anne is not nice then Anne is cold.\nFOL: (Quiet(Anne) & -Nice(Anne)) -> Cold(Anne)\n\nTEXT: Anne is kind.\nFOL: Kind(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: Furry(Anne)\nTEXT: Anne is not kind.\nFOL: -Kind(Anne)\nTEXT: Anne is red.\nFOL: Red(Anne)\nTEXT: Erin is cold.\nFOL: Cold(Erin)\nTEXT: Erin is nice.\nFOL: Nice(Erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(Erin)\nTEXT: Erin is red.\nFOL: Red(Erin)\nTEXT: If Anne is red and Anne is not kind then Anne is quiet.\nFOL: (Red(Anne) & -Kind(Anne)) -> Quiet(Anne)\nTEXT: Quiet, furry people are not nice.\nFOL: all x. (Quiet(x) & Furry(x) -> -Nice(x))\nTEXT: If Anne is quiet and Anne is not nice then Anne is cold.\nFOL: (Quiet(Anne) & -Nice(Anne)) -> Cold(Anne)\nTEXT: Anne is kind.\nFOL: Kind(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: Furry(Anne)\nTEXT: Anne is not kind.\nFOL: -Kind(Anne)\nTEXT: Anne is red.\nFOL: Red(Anne)\nTEXT: Erin is cold.\nFOL: Cold(Erin)\nTEXT: Erin is nice.\nFOL: Nice(Erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(Erin)\nTEXT: Erin is red.\nFOL: Red(Erin)\nTEXT: If Anne is red and Anne is not kind then Anne is quiet.\nFOL: (Red(Anne) & -Kind(Anne)) -> Quiet(Anne)\nTEXT: Quiet, furry people are not nice.\nFOL: (Quiet(x) & Furry(x)) -> -Nice(x)\nTEXT: If Anne is quiet and Anne is not nice then Anne is cold.\nFOL: (Quiet(Anne) & -Nice(Anne)) -> Cold(Anne)\nTEXT: Anne is kind.\nFOL: Kind(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is furry.\nFOL: Furry(Anne)\n\nTEXT: Anne is not kind.\nFOL: -Kind(Anne)\n\nTEXT: Anne is red.\nFOL: Red(Anne)\n\nTEXT: Erin is cold.\nFOL: Cold(Erin)\n\nTEXT: Erin is nice.\nFOL: Nice(Erin)\n\nTEXT: Erin is not quiet.\nFOL: -Quiet(Erin)\n\nTEXT: Erin is red.\nFOL: Red(Erin)\n\nTEXT: If Anne is red and Anne is not kind then Anne is quiet.\nFOL: (Red(Anne) & -Kind(Anne)) -> Quiet(Anne)\n\nTEXT: Quiet, furry people are not nice.\nFOL: (Quiet(x) & Furry(x)) -> -Nice(x)\n\nTEXT: If Anne is quiet and Anne is not nice then Anne is cold.\nFOL: (Quiet(Anne) & -Nice(Anne)) -> Cold(Anne)\n\nTEXT: Anne is kind.\nFOL: Kind(Anne)\n\n</EVALUATE>"
  ]
 },
 {
  "index": 97,
  "responses": [
   "<EVALUATE>\nTEXT: The mouse is rough.\nFOL: Mouse(mouse) & Rough(mouse)\n\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\n\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\n\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\n\nTEXT: The mouse is rough.\nFOL: Mouse(mouse) & Rough(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse is rough.\nFOL: Mouse(mouse) -> Rough(mouse)\n\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\n\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\n\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\n\nTEXT: The mouse is rough.\nFOL: Mouse(mouse) -> Rough(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse is rough.\nFOL: Mouse(mouse) -> Rough(mouse)\n\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\n\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\n\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\n\nTEXT: The mouse is rough.\nFOL: Mouse(mouse) -> Rough(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse is rough.\nFOL: Mouse(mouse) & Rough(mouse)\n\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\n\nTEXT: All rough, red things are kind.\nFOL: all x. ((Rough(x) & Red(x)) -> Kind(x))\n\nTEXT: All round, red things are rough.\nFOL: all x. ((Round(x) & Red(x)) -> Rough(x))\n\nTEXT: The mouse is rough.\nFOL: Mouse(mouse) & Rough(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse is rough.\nFOL: Mouse(mouse) & Rough(mouse)\nTEXT: If something is kind then it is green.\nFOL: all x. (Kind(x) -> Green(x))\nTEXT: All rough, red things are kind.\nFOL: all x. (Rough(x) & Red(x) -> Kind(x))\nTEXT: All round, red things are rough.\nFOL: all x. (Round(x) & Red(x) -> Rough(x))\nTEXT: The mouse is rough.\nFOL: Mouse(mouse) & Rough(mouse)\n</EVALUATE>"
  ]
 },
 {
  "index": 98,
  "responses": [
   "<EVALUATE>\nTEXT: Round, nice Bob felt as blue and big as he had ever been.\nFOL: Round(Bob) & Nice(Bob) & Blue(Bob) & Big(Bob) & (Round(Bob) & Nice(Bob) & Blue(Bob) & Big(Bob))\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: exists x. (Young(x) & Cold(x) & Name(x, Charlie))\nTEXT: That guy Eric sure is nice.\nFOL: Guy(Eric) & Nice(Eric)\nTEXT: That guy Fred sure is nice.\nFOL: Guy(Fred) & Nice(Fred)\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: exists x. (Person(x) & Big(x) & Kind(x) & Cold(x) & Red(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: exists x. (Person(x) & Blue(x) & Big(x) & Cold(x))\nTEXT: You must be aware of big, red, young people being rough.\nFOL: exists x. (Person(x) & Big(x) & Red(x) & Young(x) & Rough(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: -Big(x) & Cold(x) & Kind(x)\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: exists x. (Person(x) & Rough(x) & Red(x) & Big(x))\nTEXT: Bob is kind.\nFOL: Bob & Kind(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Round, nice Bob felt as blue and big as he had ever been.\nFOL: Round(Bob) & Nice(Bob) & Blue(Bob) & Big(Bob) & (Round(Bob) & Nice(Bob) & Blue(Bob) & Big(Bob))\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: exists x. (Young(x) & Cold(x) & Name(x, Charlie))\nTEXT: That guy Eric sure is nice.\nFOL: Guy(Eric) & Nice(Eric)\nTEXT: That guy Fred sure is nice.\nFOL: Guy(Fred) & Nice(Fred)\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: exists x. (Person(x) & Big(x) & Kind(x) & Cold(x) & Red(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: all x. (Blue(x) & Big(x) -> Cold(x))\nTEXT: You must be aware of big, red, young people being rough.\nFOL: exists x. (Big(x) & Red(x) & Young(x) & Rough(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: -Big(x) & Cold(x) -> Kind(x)\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & Red(x) -> Big(x))\nTEXT: Bob is kind.\nFOL: Bob & Kind(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Round, nice Bob felt as blue and big as he had ever been.\nFOL: Round(Bob) & Nice(Bob) & Blue(Bob) & Big(Bob) & (Round(Bob) & Nice(Bob) & Blue(Bob) & Big(Bob))\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: exists x. (Young(x) & Cold(x) & Name(x, Charlie))\nTEXT: That guy Eric sure is nice.\nFOL: Guy(Eric) & Nice(Eric)\nTEXT: That guy Fred sure is nice.\nFOL: Guy(Fred) & Nice(Fred)\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: exists x. (Person(x) & Big(x) & Kind(x) & Cold(x) & Red(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: exists x. (Person(x) & Blue(x) & Big(x) & Cold(x))\nTEXT: You must be aware of big, red, young people being rough.\nFOL: exists x. (Big(x) & Red(x) & Young(x) & Person(x) & Rough(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: -Big(x) & Cold(x) & Kind(x)\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: exists x. (Person(x) & Rough(x) & Red(x) & Big(x))\nTEXT: Bob is kind.\nFOL: Bob & Kind(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Round, nice Bob felt as blue and big as he had ever been.\nFOL: Round(Bob) & Nice(Bob) & Blue(Bob) & Big(Bob) & (Round(Bob) & Nice(Bob) & Blue(Bob) & Big(Bob))\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: exists x. (Young(x) & Cold(x) & Name(x, Charlie))\nTEXT: That guy Eric sure is nice.\nFOL: Guy(Eric) & Nice(Eric)\nTEXT: That guy Fred sure is nice.\nFOL: Guy(Fred) & Nice(Fred)\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: exists x. (Person(x) & Big(x) & Kind(x) & Cold(x) & Red(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: all x. (Blue(x) & Big(x) -> Cold(x))\nTEXT: You must be aware of big, red, young people being rough.\nFOL: exists x. (Big(x) & Red(x) & Young(x) & Rough(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: -Big(x) & Cold(x) -> Kind(x)\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: all x. (Rough(x) & Red(x) -> Big(x))\nTEXT: Bob is kind.\nFOL: Kind(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Round, nice Bob felt as blue and big as he had ever been.\nFOL: Round(Bob) & Nice(Bob) & Blue(Bob) & Big(Bob) & (Round(Bob) & Nice(Bob) & Blue(Bob) & Big(Bob))\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: exists x. (Young(x) & Cold(x) & Name(x, Charlie))\nTEXT: That guy Eric sure is nice.\nFOL: Guy(Eric) & Nice(Eric)\nTEXT: That guy Fred sure is nice.\nFOL: Guy(Fred) & Nice(Fred)\nTEXT: People here that are both big and kind while being cold are always red.\nFOL: exists x. (Person(x) & Big(x) & Kind(x) & Cold(x) & Red(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: exists x. (Person(x) & Blue(x) & Big(x) & Cold(x))\nTEXT: You must be aware of big, red, young people being rough.\nFOL: exists x. (Big(x) & Red(x) & Young(x) & Person(x) & Rough(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: -Big(x) & Cold(x) & Kind(x)\nTEXT: People that are rough and red in the face, are usually big in size.\nFOL: exists x. (Rough(x) & Red(x) & Person(x) & Big(x))\nTEXT: Bob is kind.\nFOL: Bob & Kind(Bob)\n</EVALUATE>"
  ]
 },
 {
  "index": 99,
  "responses": [
   "<EVALUATE>\nTEXT: The cat eats the dog.\nFOL: Cat(eatsDog)\nTEXT: The cat is nice.\nFOL: Cat(nice)\nTEXT: The cat is rough.\nFOL: Cat(rough)\nTEXT: The dog eats the mouse.\nFOL: Dog(eatsMouse)\nTEXT: The dog needs the cat.\nFOL: Dog(needsCat)\nTEXT: The dog sees the cat.\nFOL: Dog(seesCat)\nTEXT: The dog sees the mouse.\nFOL: Dog(seesMouse)\nTEXT: The mouse eats the dog.\nFOL: Mouse(eatsDog)\nTEXT: The mouse is rough.\nFOL: Mouse(rough)\nTEXT: The mouse is young.\nFOL: Mouse(young)\nTEXT: The mouse needs the dog.\nFOL: Mouse(needsDog)\nTEXT: The mouse sees the dog.\nFOL: Mouse(seesDog)\nTEXT: If something needs the mouse and the mouse sees the dog then the mouse is red.\nFOL: (exists x. (Mouse(x) & Mouse(needsMouse(x)) & Mouse(seesDog(x)) -> Mouse(red(x)))\nTEXT: If something sees the cat then the cat sees the dog.\nFOL: (exists x. (Cat(seesCat(x)) -> Cat(seesDog(x))))\nTEXT: If something is young then it sees the dog.\nFOL: (exists x. (Mouse(x) & Mouse(young(x)) -> Mouse(seesDog(x))))\nTEXT: If something needs the cat then the cat needs the mouse.\nFOL: (exists x. (Cat(x) & Cat(needsCat(x)) -> Mouse(needsMouse(x))))\nTEXT: If something is rough and it eats the mouse then it sees the cat.\nFOL: (exists x. ((Mouse(x) & Mouse(rough(x)) & Mouse(eatsMouse(x))) -> Cat(seesCat(x))))\nTEXT: If something is red then it needs the cat.\nFOL: (exists x. (Mouse(x) & Mouse(red(x)) -> Cat(needsCat(x))))\nTEXT: If the dog is young and the dog is red then the dog is rough.\nFOL: (Dog(young) & Dog(red) -> Dog(rough))\nTEXT: If something eats the dog and it is nice then it sees the dog.\nFOL: (exists x. ((Dog(x) & Dog(eatsDog(x)) & Cat(nice(x))) -> Cat(seesDog(x))))\nTEXT: The mouse is not red.\nFOL: -Mouse(red)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the dog.\nFOL: Cat(eatsDog)\nTEXT: The cat is nice.\nFOL: Cat(nice)\nTEXT: The cat is rough.\nFOL: Cat(rough)\nTEXT: The dog eats the mouse.\nFOL: Dog(eatsMouse)\nTEXT: The dog needs the cat.\nFOL: Dog(needsCat)\nTEXT: The dog sees the cat.\nFOL: Dog(seesCat)\nTEXT: The dog sees the mouse.\nFOL: Dog(seesMouse)\nTEXT: The mouse eats the dog.\nFOL: Mouse(eatsDog)\nTEXT: The mouse is rough.\nFOL: Mouse(rough)\nTEXT: The mouse is young.\nFOL: Mouse(young)\nTEXT: The mouse needs the dog.\nFOL: Mouse(needsDog)\nTEXT: The mouse sees the dog.\nFOL: Mouse(seesDog)\nTEXT: If something needs the mouse and the mouse sees the dog then the mouse is red.\nFOL: (exists x. (Mouse(x) & Mouse(needsMouse(x)) & Mouse(seesDog(x)) -> Mouse(red(x)))\nTEXT: If something sees the cat then the cat sees the dog.\nFOL: (exists x. (Cat(seesCat(x)) -> Cat(seesDog(x))))\nTEXT: If something is young then it sees the dog.\nFOL: (exists x. (Mouse(x) & Mouse(young(x)) -> Mouse(seesDog(x))))\nTEXT: If something needs the cat then the cat needs the mouse.\nFOL: (exists x. (Cat(x) & Cat(needsCat(x)) -> Mouse(needsMouse(x))))\nTEXT: If something is rough and it eats the mouse then it sees the cat.\nFOL: (exists x. ((Mouse(x) & Mouse(rough(x)) & Mouse(eatsMouse(x))) -> Cat(seesCat(x))))\nTEXT: If something is red then it needs the cat.\nFOL: (exists x. (Mouse(x) & Mouse(red(x)) -> Cat(needsCat(x))))\nTEXT: If the dog is young and the dog is red then the dog is rough.\nFOL: (Dog(young(x) & Dog(red(x)) -> Dog(rough(x)))\nTEXT: If something eats the dog and it is nice then it sees the dog.\nFOL: (exists x. ((Dog(x) & Dog(eatsDog(x)) & Cat(nice(x))) -> Cat(seesDog(x))))\nTEXT: The mouse is not red.\nFOL: -Mouse(red)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the dog.\nFOL: Cat(eatsDog)\nTEXT: The cat is nice.\nFOL: Cat(nice)\nTEXT: The cat is rough.\nFOL: Cat(rough)\nTEXT: The dog eats the mouse.\nFOL: Dog(eatsMouse)\nTEXT: The dog needs the cat.\nFOL: Dog(needsCat)\nTEXT: The dog sees the cat.\nFOL: Dog(seesCat)\nTEXT: The dog sees the mouse.\nFOL: Dog(seesMouse)\nTEXT: The mouse eats the dog.\nFOL: Mouse(eatsDog)\nTEXT: The mouse is rough.\nFOL: Mouse(rough)\nTEXT: The mouse is young.\nFOL: Mouse(young)\nTEXT: The mouse needs the dog.\nFOL: Mouse(needsDog)\nTEXT: The mouse sees the dog.\nFOL: Mouse(seesDog)\nTEXT: If something needs the mouse and the mouse sees the dog then the mouse is red.\nFOL: (exists x. (Mouse(x) & Mouse(needsMouse(x)) & Mouse(seesDog(x)) -> Mouse(red(x)))\nTEXT: If something sees the cat then the cat sees the dog.\nFOL: (exists x. (Cat(seesCat(x)) -> Cat(seesDog(x))))\nTEXT: If something is young then it sees the dog.\nFOL: (exists x. (Mouse(x) & Mouse(young(x)) -> Mouse(seesDog(x))))\nTEXT: If something needs the cat then the cat needs the mouse.\nFOL: (exists x. (Cat(x) & Cat(needsCat(x)) -> Mouse(needsMouse(x))))\nTEXT: If something is rough and it eats the mouse then it sees the cat.\nFOL: (exists x. ((Mouse(x) & Mouse(rough(x)) & Mouse(eatsMouse(x))) -> Cat(seesCat(x))))\nTEXT: If something is red then it needs the cat.\nFOL: (exists x. (Mouse(x) & Mouse(red(x)) -> Cat(needsCat(x))))\nTEXT: If the dog is young and the dog is red then the dog is rough.\nFOL: (Dog(young(x)) & Dog(red(x)) -> Dog(rough(x)))\nTEXT: If something eats the dog and it is nice then it sees the dog.\nFOL: (exists x. ((Dog(x) & Dog(eatsDog(x)) & Cat(nice(x))) -> Cat(seesDog(x))))\nTEXT: The mouse is not red.\nFOL: -Mouse(red)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the dog.\nFOL: Cat(eatsDog)\nTEXT: The cat is nice.\nFOL: Cat(nice)\nTEXT: The cat is rough.\nFOL: Cat(rough)\nTEXT: The dog eats the mouse.\nFOL: Dog(eatsMouse)\nTEXT: The dog needs the cat.\nFOL: Dog(needsCat)\nTEXT: The dog sees the cat.\nFOL: Dog(seesCat)\nTEXT: The dog sees the mouse.\nFOL: Dog(seesMouse)\nTEXT: The mouse eats the dog.\nFOL: Mouse(eatsDog)\nTEXT: The mouse is rough.\nFOL: Mouse(rough)\nTEXT: The mouse is young.\nFOL: Mouse(young)\nTEXT: The mouse needs the dog.\nFOL: Mouse(needsDog)\nTEXT: The mouse sees the dog.\nFOL: Mouse(seesDog)\nTEXT: If something needs the mouse and the mouse sees the dog then the mouse is red.\nFOL: (exists x. (Mouse(x) & Mouse(needsMouse(x)) & Mouse(seesDog(x)) -> Mouse(red(x)))\nTEXT: If something sees the cat then the cat sees the dog.\nFOL: (exists x. (Cat(seesCat(x)) -> Cat(seesDog(x))))\nTEXT: If something is young then it sees the dog.\nFOL: (exists x. (Mouse(x) & Mouse(young(x)) -> Mouse(seesDog(x))))\nTEXT: If something needs the cat then the cat needs the mouse.\nFOL: (exists x. (Cat(x) & Cat(needsCat(x)) -> Mouse(needsMouse(x))))\nTEXT: If something is rough and it eats the mouse then it sees the cat.\nFOL: (exists x. ((Mouse(x) & Mouse(rough(x)) & Mouse(eatsMouse(x))) -> Cat(seesCat(x))))\nTEXT: If something is red then it needs the cat.\nFOL: (exists x. (Mouse(x) & Mouse(red(x)) -> Cat(needsCat(x))))\nTEXT: If the dog is young and the dog is red then the dog is rough.\nFOL: (Dog(young) & Dog(red) -> Dog(rough))\nTEXT: If something eats the dog and it is nice then it sees the dog.\nFOL: (exists x. ((Dog(x) & Dog(eatsDog(x)) & Cat(x) & Cat(nice(x))) -> Cat(seesDog(x))))\nTEXT: The mouse is not red.\nFOL: -Mouse(red)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the dog.\nFOL: Cat(eatsDog)\nTEXT: The cat is nice.\nFOL: Cat(nice)\nTEXT: The cat is rough.\nFOL: Cat(rough)\nTEXT: The dog eats the mouse.\nFOL: Dog(eatsMouse)\nTEXT: The dog needs the cat.\nFOL: Dog(needsCat)\nTEXT: The dog sees the cat.\nFOL: Dog(seesCat)\nTEXT: The dog sees the mouse.\nFOL: Dog(seesMouse)\nTEXT: The mouse eats the dog.\nFOL: Mouse(eatsDog)\nTEXT: The mouse is rough.\nFOL: Mouse(rough)\nTEXT: The mouse is young.\nFOL: Mouse(young)\nTEXT: The mouse needs the dog.\nFOL: Mouse(needsDog)\nTEXT: The mouse sees the dog.\nFOL: Mouse(seesDog)\nTEXT: If something needs the mouse and the mouse sees the dog then the mouse is red.\nFOL: (exists x. (Mouse(x) & Mouse(needsMouse(x)) & Mouse(seesDog(x)) -> Mouse(red(x)))\nTEXT: If something sees the cat then the cat sees the dog.\nFOL: (exists x. (Cat(seesCat(x)) -> Cat(seesDog(x))))\nTEXT: If something is young then it sees the dog.\nFOL: (exists x. (Mouse(x) & Mouse(young(x)) -> Mouse(seesDog(x))))\nTEXT: If something needs the cat then the cat needs the mouse.\nFOL: (exists x. (Cat(x) & Cat(needsCat(x)) -> Mouse(needsMouse(x))))\nTEXT: If something is rough and it eats the mouse then it sees the cat.\nFOL: (exists x. ((Mouse(x) & Mouse(rough(x)) & Mouse(eatsMouse(x))) -> Cat(seesCat(x))))\nTEXT: If something is red then it needs the cat.\nFOL: (exists x. (Mouse(x) & Mouse(red(x)) -> Cat(needsCat(x))))\nTEXT: If the dog is young and the dog is red then the dog is rough.\nFOL: (Dog(red(x)) & Dog(young(x)) -> Dog(rough(x)))\nTEXT: If something eats the dog and it is nice then it sees the dog.\nFOL: (exists x. ((Dog(x) & Dog(eatsDog(x)) & Cat(nice(x))) -> Cat(seesDog(x))))\nTEXT: The mouse is not red.\nFOL: -Mouse(red)\n</EVALUATE>"
  ]
 },
 {
  "index": 100,
  "responses": [
   "<EVALUATE>\nTEXT: The cow is red.\nFOL: Cow(cow) & Red(cow)\n\nTEXT: Kind, round things are not red.\nFOL: all x. (Kind(x) & Round(x) -> -Red(x))\n\nTEXT: All young, red things are not kind.\nFOL: all x. (Young(x) & Red(x) -> -Kind(x))\n\nTEXT: All red, rough things are round.\nFOL: all x. (Red(x) & Rough(x) -> Round(x))\n\nTEXT: All rough things are round.\nFOL: all x. (Rough(x) -> Round(x))\n\nTEXT: If the cow is young and the cow is kind then the cow is round.\nFOL: (Young(cow) & Kind(cow)) -> Round(cow)\n\nTEXT: If something is red then it is rough.\nFOL: all x. (Red(x) -> Rough(x))\n\nTEXT: If something is round and young then it is rough.\nFOL: (Round(x) & Young(x)) -> Rough(x)\n\nTEXT: If something is rough then it is young.\nFOL: all x. (Rough(x) -> Young(x))\n\nTEXT: The cow needs the cow.\nFOL: Needs(cow, cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is red.\nFOL: Cow(cow) & Red(cow)\n\nTEXT: Kind, round things are not red.\nFOL: all x. (Kind(x) & Round(x) -> -Red(x))\n\nTEXT: All young, red things are not kind.\nFOL: all x. (Young(x) & Red(x) -> -Kind(x))\n\nTEXT: All red, rough things are round.\nFOL: all x. (Red(x) & Rough(x) -> Round(x))\n\nTEXT: All rough things are round.\nFOL: all x. (Rough(x) -> Round(x))\n\nTEXT: If the cow is young and the cow is kind then the cow is round.\nFOL: (Young(cow) & Kind(cow)) -> Round(cow)\n\nTEXT: If something is red then it is rough.\nFOL: all x. (Red(x) -> Rough(x))\n\nTEXT: If something is round and young then it is rough.\nFOL: all x. (Round(x) & Young(x) -> Rough(x))\n\nTEXT: If something is rough then it is young.\nFOL: all x. (Rough(x) -> Young(x))\n\nTEXT: The cow needs the cow.\nFOL: Needs(cow, cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is red.\nFOL: Cow(cow) & Red(cow)\nTEXT: Kind, round things are not red.\nFOL: all x. (Kind(x) & Round(x) -> -Red(x))\nTEXT: All young, red things are not kind.\nFOL: all x. (Young(x) & Red(x) -> -Kind(x))\nTEXT: All red, rough things are round.\nFOL: all x. (Red(x) & Rough(x) -> Round(x))\nTEXT: All rough things are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: If the cow is young and the cow is kind then the cow is round.\nFOL: (Young(cow) & Kind(cow)) -> Round(cow)\nTEXT: If something is red then it is rough.\nFOL: all x. (Red(x) -> Rough(x))\nTEXT: If something is round and young then it is rough.\nFOL: all x. (Round(x) & Young(x) -> Rough(x))\nTEXT: If something is rough then it is young.\nFOL: all x. (Rough(x) -> Young(x))\nTEXT: The cow needs the cow.\nFOL: Needs(cow, cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is red.\nFOL: Cow(cow) -> Red(cow)\n\nTEXT: Kind, round things are not red.\nFOL: all x. (Kind(x) & Round(x) -> -Red(x))\n\nTEXT: All young, red things are not kind.\nFOL: all x. (Young(x) & Red(x) -> -Kind(x))\n\nTEXT: All red, rough things are round.\nFOL: all x. (Red(x) & Rough(x) -> Round(x))\n\nTEXT: All rough things are round.\nFOL: all x. (Rough(x) -> Round(x))\n\nTEXT: If the cow is young and the cow is kind then the cow is round.\nFOL: (Young(cow) & Kind(cow)) -> Round(cow)\n\nTEXT: If something is red then it is rough.\nFOL: all x. (Red(x) -> Rough(x))\n\nTEXT: If something is round and young then it is rough.\nFOL: all x. (Round(x) & Young(x) -> Rough(x))\n\nTEXT: If something is rough then it is young.\nFOL: all x. (Rough(x) -> Young(x))\n\nTEXT: The cow needs the cow.\nFOL: Cow(cow) -> Needs(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is red.\nFOL: Cow(cow) -> Red(cow)\n\nTEXT: Kind, round things are not red.\nFOL: all x. (Kind(x) & Round(x) -> -Red(x))\n\nTEXT: All young, red things are not kind.\nFOL: all x. (Young(x) & Red(x) -> -Kind(x))\n\nTEXT: All red, rough things are round.\nFOL: all x. (Red(x) & Rough(x) -> Round(x))\n\nTEXT: All rough things are round.\nFOL: all x. (Rough(x) -> Round(x))\n\nTEXT: If the cow is young and the cow is kind then the cow is round.\nFOL: (Young(cow) & Kind(cow)) -> Round(cow)\n\nTEXT: If something is red then it is rough.\nFOL: all x. (Red(x) -> Rough(x))\n\nTEXT: If something is round and young then it is rough.\nFOL: (Round(x) & Young(x)) -> Rough(x)\n\nTEXT: If something is rough then it is young.\nFOL: all x. (Rough(x) -> Young(x))\n\nTEXT: The cow needs the cow.\nFOL: Cow(cow) -> Needs(cow)\n</EVALUATE>"
  ]
 },
 {
  "index": 101,
  "responses": [
   "<EVALUATE>\nTEXT: The cow eats the squirrel.\nFOL: Cow(eatsSquirrel)\nTEXT: The squirrel eats the cow.\nFOL: Squirrel(eatsCow)\nTEXT: The tiger likes the cow.\nFOL: Tiger(likesCow)\nTEXT: If something likes the tiger and it is nice then it eats the tiger.\nFOL: all x. ((LikesTiger(x) & Nice(x)) -> EatsTiger(x))\nTEXT: If something eats the cow then it likes the squirrel.\nFOL: all x. (EatsCow(x) -> LikesSquirrel(x))\nTEXT: If something visits the squirrel then the squirrel visits the cow.\nFOL: all x. (VisitsSquirrel(x) -> VisitsCow(x))\nTEXT: If the cow eats the tiger and the tiger visits the squirrel then the cow eats the squirrel.\nFOL: (Cow(eatsTiger) & Tiger(VisitsSquirrel)) -> Cow(eatsSquirrel)\nTEXT: If something visits the tiger and it eats the tiger then it is blue.\nFOL: all x. (VisitsTiger(x) & EatsTiger(x) -> Blue(x))\nTEXT: If something likes the squirrel then it visits the squirrel.\nFOL: all x. (LikesSquirrel(x) -> VisitsSquirrel(x))\nTEXT: The cow eats the tiger.\nFOL: Cow(eatsTiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow eats the squirrel.\nFOL: Cow(eatsSquirrel)\nTEXT: The squirrel eats the cow.\nFOL: Squirrel(eatsCow)\nTEXT: The tiger likes the cow.\nFOL: Tiger(likesCow)\nTEXT: If something likes the tiger and it is nice then it eats the tiger.\nFOL: all x. (LikesTiger(x) & Nice(x) -> EatsTiger(x))\nTEXT: If something eats the cow then it likes the squirrel.\nFOL: all x. (EatsCow(x) -> LikesSquirrel(x))\nTEXT: If something visits the squirrel then the squirrel visits the cow.\nFOL: all x. (VisitsSquirrel(x) -> VisitsCow(x))\nTEXT: If the cow eats the tiger and the tiger visits the squirrel then the cow eats the squirrel.\nFOL: (Cow(eatsTiger) & Tiger(VisitsSquirrel) -> Cow(eatsSquirrel))\nTEXT: If something visits the tiger and it eats the tiger then it is blue.\nFOL: all x. (VisitsTiger(x) & EatsTiger(x) -> Blue(x))\nTEXT: If something likes the squirrel then it visits the squirrel.\nFOL: all x. (LikesSquirrel(x) -> VisitsSquirrel(x))\nTEXT: The cow eats the tiger.\nFOL: Cow(eatsTiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow eats the squirrel.\nFOL: Cow eatsSquirrel\nTEXT: The squirrel eats the cow.\nFOL: Squirrel eatsCow\nTEXT: The tiger likes the cow.\nFOL: Tiger likesCow\nTEXT: If something likes the tiger and it is nice then it eats the tiger.\nFOL: all x. ((LikesTiger(x) & Nice(x)) -> EatsTiger(x))\nTEXT: If something eats the cow then it likes the squirrel.\nFOL: all x. (EatsCow(x) -> LikesSquirrel(x))\nTEXT: If something visits the squirrel then the squirrel visits the cow.\nFOL: all x. (VisitsSquirrel(x) -> VisitsCow(x))\nTEXT: If the cow eats the tiger and the tiger visits the squirrel then the cow eats the squirrel.\nFOL: (CowEatsTiger & TigerVisitsSquirrel) -> CowEatsSquirrel\nTEXT: If something visits the tiger and it eats the tiger then it is blue.\nFOL: all x. (VisitsTiger(x) & EatsTiger(x) -> Blue(x))\nTEXT: If something likes the squirrel then it visits the squirrel.\nFOL: all x. (LikesSquirrel(x) -> VisitsSquirrel(x))\nTEXT: The cow eats the tiger.\nFOL: CowEatsTiger\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow eats the squirrel.\nFOL: Cow(eatsSquirrel)\nTEXT: The squirrel eats the cow.\nFOL: Squirrel(eatsCow)\nTEXT: The tiger likes the cow.\nFOL: Tiger(likesCow)\nTEXT: If something likes the tiger and it is nice then it eats the tiger.\nFOL: all x. ((LikesTiger(x) & Nice(x)) -> EatsTiger(x))\nTEXT: If something eats the cow then it likes the squirrel.\nFOL: all x. (EatsCow(x) -> LikesSquirrel(x))\nTEXT: If something visits the squirrel then the squirrel visits the cow.\nFOL: all x. (VisitsSquirrel(x) -> VisitsCow(x))\nTEXT: If the cow eats the tiger and the tiger visits the squirrel then the cow eats the squirrel.\nFOL: (Cow(eatsTiger) & Tiger(VisitsSquirrel)) -> Cow(eatsSquirrel)\nTEXT: If something visits the tiger and it eats the tiger then it is blue.\nFOL: all x. (VisitsTiger(x) -> (EatsTiger(x) -> Blue(x)))\nTEXT: If something likes the squirrel then it visits the squirrel.\nFOL: all x. (LikesSquirrel(x) -> VisitsSquirrel(x))\nTEXT: The cow eats the tiger.\nFOL: Cow(eatsTiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow eats the squirrel.\nFOL: Cow(eatsSquirrel)\nTEXT: The squirrel eats the cow.\nFOL: Squirrel(eatsCow)\nTEXT: The tiger likes the cow.\nFOL: Tiger(likesCow)\nTEXT: If something likes the tiger and it is nice then it eats the tiger.\nFOL: all x. (LikesTiger(x) & Nice(x) -> EatsTiger(x))\nTEXT: If something eats the cow then it likes the squirrel.\nFOL: all x. (EatsCow(x) -> LikesSquirrel(x))\nTEXT: If something visits the squirrel then the squirrel visits the cow.\nFOL: all x. (VisitsSquirrel(x) -> VisitsCow(x))\nTEXT: If the cow eats the tiger and the tiger visits the squirrel then the cow eats the squirrel.\nFOL: (Cow(eatsTiger) & Tiger(VisitsSquirrel)) -> Cow(eatsSquirrel)\nTEXT: If something visits the tiger and it eats the tiger then it is blue.\nFOL: all x. (VisitsTiger(x) & EatsTiger(x) -> Blue(x))\nTEXT: If something likes the squirrel then it visits the squirrel.\nFOL: all x. (LikesSquirrel(x) -> VisitsSquirrel(x))\nTEXT: The cow eats the tiger.\nFOL: Cow(eatsTiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 102,
  "responses": [
   "<EVALUATE>\nTEXT: The cow visits the lion.\nFOL: Visits(Cow, Lion)\nTEXT: The lion is kind.\nFOL: Kind(Lion)\nTEXT: The lion visits the cow.\nFOL: Visits(Lion, Cow)\nTEXT: The rabbit eats the squirrel.\nFOL: Eats(Rabbit, Squirrel)\nTEXT: The rabbit is kind.\nFOL: Kind(Rabbit)\nTEXT: The rabbit is round.\nFOL: Round(Rabbit)\nTEXT: The rabbit visits the lion.\nFOL: Visits(Rabbit, Lion)\nTEXT: The squirrel is big.\nFOL: Big(Squirrel)\nTEXT: The squirrel is green.\nFOL: Green(Squirrel)\nTEXT: The squirrel is round.\nFOL: Round(Squirrel)\nTEXT: If something needs the lion then it eats the squirrel.\nFOL: all x. (Needs(x, Lion) -> Eats(x, Squirrel))\nTEXT: If something eats the cow and the cow visits the rabbit then the cow needs the rabbit.\nFOL: all x. (Eats(x, Cow) & Visits(Cow, Rabbit) -> Needs(x, Rabbit))\nTEXT: If something eats the squirrel and it is big then the squirrel visits the lion.\nFOL: all x. (Eats(x, Squirrel) & Big(x) -> Visits(Squirrel, Lion))\nTEXT: If something needs the squirrel then it is big.\nFOL: all x. (Needs(x, Squirrel) -> Big(x))\nTEXT: If something needs the cow then it is nice.\nFOL: all x. (Needs(x, Cow) -> Nice(x))\nTEXT: If something eats the lion and it eats the squirrel then it is green.\nFOL: all x. (Eats(x, Lion) & Eats(x, Squirrel) -> Green(x))\nTEXT: If something is round and nice then it needs the squirrel.\nFOL: all x. (Round(x) & Nice(x) -> Needs(x, Squirrel))\nTEXT: If something eats the squirrel then it is nice.\nFOL: all x. (Eats(x, Squirrel) -> Nice(x))\nTEXT: The rabbit needs the squirrel.\nFOL: Needs(Rabbit, Squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow visits the lion.\nFOL: Visits(cow, lion)\nTEXT: The lion is kind.\nFOL: Kind(lion)\nTEXT: The lion visits the cow.\nFOL: Visits(lion, cow)\nTEXT: The rabbit eats the squirrel.\nFOL: Eats(rabbit, squirrel)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The rabbit visits the lion.\nFOL: Visits(rabbit, lion)\nTEXT: The squirrel is big.\nFOL: Big(squirrel)\nTEXT: The squirrel is green.\nFOL: Green(squirrel)\nTEXT: The squirrel is round.\nFOL: Round(squirrel)\nTEXT: If something needs the lion then it eats the squirrel.\nFOL: all x. (Needs(x, lion) -> Eats(x, squirrel))\nTEXT: If something eats the cow and the cow visits the rabbit then the cow needs the rabbit.\nFOL: all x. (Eats(x, cow) & Visits(cow, rabbit) -> Needs(x, rabbit))\nTEXT: If something eats the squirrel and it is big then the squirrel visits the lion.\nFOL: all x. (Eats(x, squirrel) & Big(x) -> Visits(squirrel, lion))\nTEXT: If something needs the squirrel then it is big.\nFOL: all x. (Needs(x, squirrel) -> Big(x))\nTEXT: If something needs the cow then it is nice.\nFOL: all x. (Needs(x, cow) -> Nice(x))\nTEXT: If something eats the lion and it eats the squirrel then it is green.\nFOL: all x. (Eats(x, lion) & Eats(x, squirrel) -> Green(x))\nTEXT: If something is round and nice then it needs the squirrel.\nFOL: all x. (Round(x) & Nice(x) -> Needs(x, squirrel))\nTEXT: If something eats the squirrel then it is nice.\nFOL: all x. (Eats(x, squirrel) -> Nice(x))\nTEXT: The rabbit needs the squirrel.\nFOL: Needs(rabbit, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow visits the lion.\nFOL: Visits(Cow, Lion)\nTEXT: The lion is kind.\nFOL: Kind(Lion)\nTEXT: The lion visits the cow.\nFOL: Visits(Lion, Cow)\nTEXT: The rabbit eats the squirrel.\nFOL: Eats(Rabbit, Squirrel)\nTEXT: The rabbit is kind.\nFOL: Kind(Rabbit)\nTEXT: The rabbit is round.\nFOL: Round(Rabbit)\nTEXT: The rabbit visits the lion.\nFOL: Visits(Rabbit, Lion)\nTEXT: The squirrel is big.\nFOL: Big(Squirrel)\nTEXT: The squirrel is green.\nFOL: Green(Squirrel)\nTEXT: The squirrel is round.\nFOL: Round(Squirrel)\nTEXT: If something needs the lion then it eats the squirrel.\nFOL: all x. (Needs(x, Lion) -> Eats(x, Squirrel))\nTEXT: If something eats the cow and the cow visits the rabbit then the cow needs the rabbit.\nFOL: all x. ((Eats(x, Cow) & Visits(Cow, Rabbit)) -> Needs(x, Rabbit))\nTEXT: If something eats the squirrel and it is big then the squirrel visits the lion.\nFOL: all x. ((Eats(x, Squirrel) & Big(x)) -> Visits(Squirrel, Lion))\nTEXT: If something needs the squirrel then it is big.\nFOL: all x. (Needs(x, Squirrel) -> Big(x))\nTEXT: If something needs the cow then it is nice.\nFOL: all x. (Needs(x, Cow) -> Nice(x))\nTEXT: If something eats the lion and it eats the squirrel then it is green.\nFOL: all x. ((Eats(x, Lion) & Eats(x, Squirrel)) -> Green(x))\nTEXT: If something is round and nice then it needs the squirrel.\nFOL: all x. ((Round(x) & Nice(x)) -> Needs(x, Squirrel))\nTEXT: If something eats the squirrel then it is nice.\nFOL: all x. (Eats(x, Squirrel) -> Nice(x))\nTEXT: The rabbit needs the squirrel.\nFOL: Needs(Rabbit, Squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow visits the lion.\nFOL: Visits(Cow, Lion)\nTEXT: The lion is kind.\nFOL: Kind(Lion)\nTEXT: The lion visits the cow.\nFOL: Visits(Lion, Cow)\nTEXT: The rabbit eats the squirrel.\nFOL: Eats(Rabbit, Squirrel)\nTEXT: The rabbit is kind.\nFOL: Kind(Rabbit)\nTEXT: The rabbit is round.\nFOL: Round(Rabbit)\nTEXT: The rabbit visits the lion.\nFOL: Visits(Rabbit, Lion)\nTEXT: The squirrel is big.\nFOL: Big(Squirrel)\nTEXT: The squirrel is green.\nFOL: Green(Squirrel)\nTEXT: The squirrel is round.\nFOL: Round(Squirrel)\nTEXT: If something needs the lion then it eats the squirrel.\nFOL: all x. (Needs(x, Lion) -> Eats(x, Squirrel))\nTEXT: If something eats the cow and the cow visits the rabbit then the cow needs the rabbit.\nFOL: all x. ((Eats(x, Cow) & Visits(Cow, Rabbit)) -> Needs(x, Rabbit))\nTEXT: If something eats the squirrel and it is big then the squirrel visits the lion.\nFOL: all x. ((Eats(x, Squirrel) & Big(x)) -> Visits(x, Lion))\nTEXT: If something needs the squirrel then it is big.\nFOL: all x. (Needs(x, Squirrel) -> Big(x))\nTEXT: If something needs the cow then it is nice.\nFOL: all x. (Needs(x, Cow) -> Nice(x))\nTEXT: If something eats the lion and it eats the squirrel then it is green.\nFOL: all x. ((Eats(x, Lion) & Eats(x, Squirrel)) -> Green(x))\nTEXT: If something is round and nice then it needs the squirrel.\nFOL: all x. ((Round(x) & Nice(x)) -> Needs(x, Squirrel))\nTEXT: If something eats the squirrel then it is nice.\nFOL: all x. (Eats(x, Squirrel) -> Nice(x))\nTEXT: The rabbit needs the squirrel.\nFOL: Needs(Rabbit, Squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow visits the lion.\nFOL: Visit(Cow, Lion)\nTEXT: The lion is kind.\nFOL: Kind(Lion)\nTEXT: The lion visits the cow.\nFOL: Visit(Lion, Cow)\nTEXT: The rabbit eats the squirrel.\nFOL: Eat(Rabbit, Squirrel)\nTEXT: The rabbit is kind.\nFOL: Kind(Rabbit)\nTEXT: The rabbit is round.\nFOL: Round(Rabbit)\nTEXT: The rabbit visits the lion.\nFOL: Visit(Rabbit, Lion)\nTEXT: The squirrel is big.\nFOL: Big(Squirrel)\nTEXT: The squirrel is green.\nFOL: Green(Squirrel)\nTEXT: The squirrel is round.\nFOL: Round(Squirrel)\nTEXT: If something needs the lion then it eats the squirrel.\nFOL: all x. (Needs(x, Lion) -> Eat(x, Squirrel))\nTEXT: If something eats the cow and the cow visits the rabbit then the cow needs the rabbit.\nFOL: all x. ((Eat(x, Cow) & Visit(Cow, Rabbit)) -> Needs(Rabbit, x))\nTEXT: If something eats the squirrel and it is big then the squirrel visits the lion.\nFOL: all x. ((Eat(x, Squirrel) & Big(x)) -> Visit(Lion, Squirrel))\nTEXT: If something needs the squirrel then it is big.\nFOL: all x. (Needs(x, Squirrel) -> Big(x))\nTEXT: If something needs the cow then it is nice.\nFOL: all x. (Needs(x, Cow) -> Nice(x))\nTEXT: If something eats the lion and it eats the squirrel then it is green.\nFOL: all x. ((Eat(x, Lion) & Eat(x, Squirrel)) -> Green(x))\nTEXT: If something is round and nice then it needs the squirrel.\nFOL: all x. ((Round(x) & Nice(x)) -> Needs(x, Squirrel))\nTEXT: If something eats the squirrel then it is nice.\nFOL: all x. (Eat(x, Squirrel) -> Nice(x))\nTEXT: The rabbit needs the squirrel.\nFOL: Needs(Rabbit, Squirrel)\n</EVALUATE>"
  ]
 },
 {
  "index": 103,
  "responses": [
   "<EVALUATE>\nTEXT: Even though Bob is big and rough he is sometimes round and kind.\nFOL: -Big(Bob) & -Rough(Bob) & Round(Bob) & Kind(Bob)\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: Wet(Dave) & Cold(Dave)\nTEXT: He also looks green but big.\nFOL: Green(he) & Big(he)\nTEXT: Eric is somehow red and kind and also green.\nFOL: Red(eric) & Kind(eric) & Green(eric)\nTEXT: Gary is green and cold too.\nFOL: Green(gary) & Cold(gary)\nTEXT: A big, rough person who is green in color is definitely young aged.\nFOL: Big(x) & Rough(x) & Green(x) -> Young(x)\nTEXT: Big, kind folks are green ones.\nFOL: Big(x) & Kind(x) -> Green(x)\nTEXT: A nice but rough person will also be green and cold.\nFOL: Nice(x) & Rough(x) -> Green(x) & Cold(x)\nTEXT: A big round young person is often blue.\nFOL: Big(x) & Round(x) & Young(x) -> Blue(x)\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: Cold(x) & Rough(x) & Red(x) -> Kind(x)\nTEXT: People who are young are also blue.\nFOL: Young(x) -> Blue(x)\nTEXT: A person who is rough and young while being kind tends to be red.\nFOL: Rough(x) & Young(x) & Kind(x) -> Red(x)\nTEXT: Gary is not kind.\nFOL: -Kind(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Even though Bob is big and rough he is sometimes round and kind.\nFOL: -Big(Bob) & -Rough(Bob) & Round(Bob) & Kind(Bob)\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: Wet(Dave) & Cold(Dave)\nTEXT: He also looks green but big.\nFOL: Green(he) & Big(he)\nTEXT: Eric is somehow red and kind and also green.\nFOL: Red(eric) & Kind(eric) & Green(eric)\nTEXT: Gary is green and cold too.\nFOL: Green(gary) & Cold(gary)\nTEXT: A big, rough person who is green in color is definitely young aged.\nFOL: Big(x) & Rough(x) & Green(x) -> Young(x)\nTEXT: Big, kind folks are green ones.\nFOL: Big(x) & Kind(x) -> Green(x)\nTEXT: A nice but rough person will also be green and cold.\nFOL: Nice(x) & Rough(x) -> (Green(x) & Cold(x))\nTEXT: A big round young person is often blue.\nFOL: Big(x) & Round(x) & Young(x) -> Blue(x)\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: Cold(x) & Rough(x) & Red(x) -> Kind(x)\nTEXT: People who are young are also blue.\nFOL: Young(x) -> Blue(x)\nTEXT: A person who is rough and young while being kind tends to be red.\nFOL: Rough(x) & Young(x) & Kind(x) -> Red(x)\nTEXT: Gary is not kind.\nFOL: -Kind(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Even though Bob is big and rough he is sometimes round and kind.\nFOL: -Big(Bob) & -Rough(Bob) & Round(Bob) & Kind(Bob)\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: Wet(Dave) & Cold(Dave)\nTEXT: He also looks green but big.\nFOL: Green(he) & Big(he)\nTEXT: Eric is somehow red and kind and also green.\nFOL: Red(eric) & Kind(eric) & Green(eric)\nTEXT: Gary is green and cold too.\nFOL: Green(gary) & Cold(gary)\nTEXT: A big, rough person who is green in color is definitely young aged.\nFOL: (Big(x) & Rough(x) & Green(x)) -> Young(x)\nTEXT: Big, kind folks are green ones.\nFOL: (Big(x) & Kind(x)) -> Green(x)\nTEXT: A nice but rough person will also be green and cold.\nFOL: (Nice(x) & Rough(x)) -> (Green(x) & Cold(x))\nTEXT: A big round young person is often blue.\nFOL: (Big(x) & Round(x) & Young(x)) -> Blue(x)\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: (Cold(x) & Rough(x) & Red(x)) -> Kind(x)\nTEXT: People who are young are also blue.\nFOL: Young(x) -> Blue(x)\nTEXT: A person who is rough and young while being kind tends to be red.\nFOL: (Rough(x) & Young(x) & Kind(x)) -> Red(x)\nTEXT: Gary is not kind.\nFOL: -Kind(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Even though Bob is big and rough he is sometimes round and kind.\nFOL: -Big(Bob) & -Rough(Bob) & Round(Bob) & Kind(Bob)\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: Wet(Dave) & Cold(Dave)\nTEXT: He also looks green but big.\nFOL: Green(he) & Big(he)\nTEXT: Eric is somehow red and kind and also green.\nFOL: Red(eric) & Kind(eric) & Green(eric)\nTEXT: Gary is green and cold too.\nFOL: Green(gary) & Cold(gary)\nTEXT: A big, rough person who is green in color is definitely young aged.\nFOL: Big(x) & Rough(x) & Green(x) -> Young(x)\nTEXT: Big, kind folks are green ones.\nFOL: Kind(x) & Big(x) -> Green(x)\nTEXT: A nice but rough person will also be green and cold.\nFOL: Nice(x) & Rough(x) -> (Green(x) & Cold(x))\nTEXT: A big round young person is often blue.\nFOL: Big(x) & Round(x) & Young(x) -> Blue(x)\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: Cold(x) & Rough(x) & Red(x) -> Kind(x)\nTEXT: People who are young are also blue.\nFOL: Young(x) -> Blue(x)\nTEXT: A person who is rough and young while being kind tends to be red.\nFOL: Rough(x) & Young(x) & Kind(x) -> Red(x)\nTEXT: Gary is not kind.\nFOL: -Kind(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Even though Bob is big and rough he is sometimes round and kind.\nFOL: -Big(Bob) & -Rough(Bob) & Round(Bob) & Kind(Bob)\nTEXT: After Dave got wet in the rain, he feels cold.\nFOL: Wet(Dave) & Cold(Dave)\nTEXT: He also looks green but big.\nFOL: Green(he) & Big(he)\nTEXT: Eric is somehow red and kind and also green.\nFOL: Red(eric) & Kind(eric) & Green(eric)\nTEXT: Gary is green and cold too.\nFOL: Green(gary) & Cold(gary)\nTEXT: A big, rough person who is green in color is definitely young aged.\nFOL: (Big(x) & Rough(x) & Green(x) -> Young(x))\nTEXT: Big, kind folks are green ones.\nFOL: (Big(x) & Kind(x) -> Green(x))\nTEXT: A nice but rough person will also be green and cold.\nFOL: (Nice(x) & Rough(x) -> (Green(x) & Cold(x)))\nTEXT: A big round young person is often blue.\nFOL: (Big(x) & Round(x) & Young(x) -> Blue(x))\nTEXT: Someone that is cold rough and red is also considered to be kind.\nFOL: (Cold(x) & Rough(x) & Red(x) -> Kind(x))\nTEXT: People who are young are also blue.\nFOL: (Young(x) -> Blue(x))\nTEXT: A person who is rough and young while being kind tends to be red.\nFOL: (Rough(x) & Young(x) & Kind(x) -> Red(x))\nTEXT: Gary is not kind.\nFOL: -Kind(gary)\n</EVALUATE>"
  ]
 },
 {
  "index": 104,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is nice.\nFOL: Nice(Bob)\nTEXT: Bob is quiet.\nFOL: Quiet(Bob)\nTEXT: Dave is big.\nFOL: Big(Dave)\nTEXT: Dave is not nice.\nFOL: -Nice(Dave)\nTEXT: Erin is furry.\nFOL: Furry(Erin)\nTEXT: Erin is nice.\nFOL: Nice(Erin)\nTEXT: Erin is red.\nFOL: Red(Erin)\nTEXT: Erin is round.\nFOL: Round(Erin)\nTEXT: Erin is smart.\nFOL: Smart(Erin)\nTEXT: Harry is not big.\nFOL: -Big(Harry)\nTEXT: Harry is furry.\nFOL: Furry(Harry)\nTEXT: Harry is nice.\nFOL: Nice(Harry)\nTEXT: Harry is quiet.\nFOL: Quiet(Harry)\nTEXT: Harry is red.\nFOL: Red(Harry)\nTEXT: Harry is round.\nFOL: Round(Harry)\nTEXT: If someone is furry then they are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nTEXT: All round people are quiet.\nFOL: all x. (Round(x) -> Quiet(x))\nTEXT: All furry, quiet people are round.\nFOL: all x. (Furry(x) & Quiet(x) -> Round(x))\nTEXT: If Dave is big then Dave is furry.\nFOL: Big(Dave) -> Furry(Dave)\nTEXT: Round, smart people are nice.\nFOL: all x. ((Round(x) & Smart(x)) -> Nice(x))\nTEXT: Smart, quiet people are red.\nFOL: all x. ((Smart(x) & Quiet(x)) -> Red(x))\nTEXT: If someone is furry and not big then they are smart.\nFOL: all x. ((Furry(x) & -Big(x)) -> Smart(x))\nTEXT: If someone is nice and not round then they are smart.\nFOL: all x. ((Nice(x) & -Round(x)) -> Smart(x))\nTEXT: Dave is not quiet.\nFOL: -Quiet(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is nice.\nFOL: Nice(Bob)\nTEXT: Bob is quiet.\nFOL: Quiet(Bob)\nTEXT: Dave is big.\nFOL: Big(Dave)\nTEXT: Dave is not nice.\nFOL: -Nice(Dave)\nTEXT: Erin is furry.\nFOL: Furry(Erin)\nTEXT: Erin is nice.\nFOL: Nice(Erin)\nTEXT: Erin is red.\nFOL: Red(Erin)\nTEXT: Erin is round.\nFOL: Round(Erin)\nTEXT: Erin is smart.\nFOL: Smart(Erin)\nTEXT: Harry is not big.\nFOL: -Big(Harry)\nTEXT: Harry is furry.\nFOL: Furry(Harry)\nTEXT: Harry is nice.\nFOL: Nice(Harry)\nTEXT: Harry is quiet.\nFOL: Quiet(Harry)\nTEXT: Harry is red.\nFOL: Red(Harry)\nTEXT: Harry is round.\nFOL: Round(Harry)\nTEXT: If someone is furry then they are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nTEXT: All round people are quiet.\nFOL: all x. (Round(x) -> Quiet(x))\nTEXT: All furry, quiet people are round.\nFOL: all x. (Furry(x) & Quiet(x) -> Round(x))\nTEXT: If Dave is big then Dave is furry.\nFOL: Big(Dave) -> Furry(Dave)\nTEXT: Round, smart people are nice.\nFOL: all x. (Round(x) & Smart(x) -> Nice(x))\nTEXT: Smart, quiet people are red.\nFOL: all x. (Smart(x) & Quiet(x) -> Red(x))\nTEXT: If someone is furry and not big then they are smart.\nFOL: all x. ((Furry(x) & -Big(x)) -> Smart(x))\nTEXT: If someone is nice and not round then they are smart.\nFOL: all x. ((Nice(x) & -Round(x)) -> Smart(x))\nTEXT: Dave is not quiet.\nFOL: -Quiet(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is nice.\nFOL: Nice(Bob)\nTEXT: Bob is quiet.\nFOL: Quiet(Bob)\nTEXT: Dave is big.\nFOL: Big(Dave)\nTEXT: Dave is not nice.\nFOL: -Nice(Dave)\nTEXT: Erin is furry.\nFOL: Furry(Erin)\nTEXT: Erin is nice.\nFOL: Nice(Erin)\nTEXT: Erin is red.\nFOL: Red(Erin)\nTEXT: Erin is round.\nFOL: Round(Erin)\nTEXT: Erin is smart.\nFOL: Smart(Erin)\nTEXT: Harry is not big.\nFOL: -Big(Harry)\nTEXT: Harry is furry.\nFOL: Furry(Harry)\nTEXT: Harry is nice.\nFOL: Nice(Harry)\nTEXT: Harry is quiet.\nFOL: Quiet(Harry)\nTEXT: Harry is red.\nFOL: Red(Harry)\nTEXT: Harry is round.\nFOL: Round(Harry)\nTEXT: If someone is furry then they are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nTEXT: All round people are quiet.\nFOL: all x. (Round(x) -> Quiet(x))\nTEXT: All furry, quiet people are round.\nFOL: all x. (Furry(x) & Quiet(x) -> Round(x))\nTEXT: If Dave is big then Dave is furry.\nFOL: Big(Dave) -> Furry(Dave)\nTEXT: Round, smart people are nice.\nFOL: all x. (Round(x) & Smart(x) -> Nice(x))\nTEXT: Smart, quiet people are red.\nFOL: all x. (Smart(x) & Quiet(x) -> Red(x))\nTEXT: If someone is furry and not big then they are smart.\nFOL: all x. (Furry(x) & -Big(x) -> Smart(x))\nTEXT: If someone is nice and not round then they are smart.\nFOL: all x. (Nice(x) & -Round(x) -> Smart(x))\nTEXT: Dave is not quiet.\nFOL: -Quiet(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is nice.\nFOL: Nice(Bob)\n\nTEXT: Bob is quiet.\nFOL: Quiet(Bob)\n\nTEXT: Dave is big.\nFOL: Big(Dave)\n\nTEXT: Dave is not nice.\nFOL: -Nice(Dave)\n\nTEXT: Erin is furry.\nFOL: Furry(Erin)\n\nTEXT: Erin is nice.\nFOL: Nice(Erin)\n\nTEXT: Erin is red.\nFOL: Red(Erin)\n\nTEXT: Erin is round.\nFOL: Round(Erin)\n\nTEXT: Erin is smart.\nFOL: Smart(Erin)\n\nTEXT: Harry is not big.\nFOL: -Big(Harry)\n\nTEXT: Harry is furry.\nFOL: Furry(Harry)\n\nTEXT: Harry is nice.\nFOL: Nice(Harry)\n\nTEXT: Harry is quiet.\nFOL: Quiet(Harry)\n\nTEXT: Harry is red.\nFOL: Red(Harry)\n\nTEXT: Harry is round.\nFOL: Round(Harry)\n\nTEXT: If someone is furry then they are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\n\nTEXT: All round people are quiet.\nFOL: all x. (Round(x) -> Quiet(x))\n\nTEXT: All furry, quiet people are round.\nFOL: all x. (Furry(x) & Quiet(x) -> Round(x))\n\nTEXT: If Dave is big then Dave is furry.\nFOL: Big(Dave) -> Furry(Dave)\n\nTEXT: Round, smart people are nice.\nFOL: all x. ((Round(x) & Smart(x)) -> Nice(x))\n\nTEXT: Smart, quiet people are red.\nFOL: all x. ((Smart(x) & Quiet(x)) -> Red(x))\n\nTEXT: If someone is furry and not big then they are smart.\nFOL: all x. ((Furry(x) & -Big(x)) -> Smart(x))\n\nTEXT: If someone is nice and not round then they are smart.\nFOL: all x. ((Nice(x) & -Round(x)) -> Smart(x))\n\nTEXT: Dave is not quiet.\nFOL: -Quiet(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is nice.\nFOL: Nice(Bob)\nTEXT: Bob is quiet.\nFOL: Quiet(Bob)\nTEXT: Dave is big.\nFOL: Big(Dave)\nTEXT: Dave is not nice.\nFOL: -Nice(Dave)\nTEXT: Erin is furry.\nFOL: Furry(Erin)\nTEXT: Erin is nice.\nFOL: Nice(Erin)\nTEXT: Erin is red.\nFOL: Red(Erin)\nTEXT: Erin is round.\nFOL: Round(Erin)\nTEXT: Erin is smart.\nFOL: Smart(Erin)\nTEXT: Harry is not big.\nFOL: -Big(Harry)\nTEXT: Harry is furry.\nFOL: Furry(Harry)\nTEXT: Harry is nice.\nFOL: Nice(Harry)\nTEXT: Harry is quiet.\nFOL: Quiet(Harry)\nTEXT: Harry is red.\nFOL: Red(Harry)\nTEXT: Harry is round.\nFOL: Round(Harry)\nTEXT: If someone is furry then they are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nTEXT: All round people are quiet.\nFOL: all x. (Round(x) -> Quiet(x))\nTEXT: All furry, quiet people are round.\nFOL: all x. (Furry(x) & Quiet(x) -> Round(x))\nTEXT: If Dave is big then Dave is furry.\nFOL: Big(Dave) -> Furry(Dave)\nTEXT: Round, smart people are nice.\nFOL: all x. (Round(x) & Smart(x) -> Nice(x))\nTEXT: Smart, quiet people are red.\nFOL: all x. (Smart(x) & Quiet(x) -> Red(x))\nTEXT: If someone is furry and not big then they are smart.\nFOL: all x. ((Furry(x) & -Big(x)) -> Smart(x))\nTEXT: If someone is nice and not round then they are smart.\nFOL: all x. ((Nice(x) & -Round(x)) -> Smart(x))\nTEXT: Dave is not quiet.\nFOL: -Quiet(Dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 105,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: BaldEagle(chases(dog))\nTEXT: The bald eagle eats the squirrel.\nFOL: BaldEagle(eats(squirrel))\nTEXT: The bald eagle is young.\nFOL: BaldEagle(young)\nTEXT: The dog chases the bald eagle.\nFOL: Dog(chases(baldEagle))\nTEXT: The dog chases the squirrel.\nFOL: Dog(chases(squirrel))\nTEXT: The squirrel chases the dog.\nFOL: Squirrel(chases(dog))\nTEXT: The squirrel eats the bald eagle.\nFOL: Squirrel(eats(baldEagle))\nTEXT: The squirrel is nice.\nFOL: Squirrel(nice)\nTEXT: The squirrel is red.\nFOL: Squirrel(red)\nTEXT: The squirrel visits the bald eagle.\nFOL: Squirrel(visits(baldEagle))\nTEXT: If something chases the dog and it visits the dog then the dog visits the squirrel.\nFOL: all x. ((Chases(x, dog) & Visits(x, dog)) -> Visits(x, squirrel))\nTEXT: If something is kind and it visits the dog then the dog is nice.\nFOL: all x. ((Kind(x) & Visits(x, dog)) -> Nice(dog))\nTEXT: If the squirrel is kind then the squirrel is nice.\nFOL: Kind(squirrel) -> Nice(squirrel)\nTEXT: If something is red then it is nice.\nFOL: Red(x) -> Nice(x)\nTEXT: If something visits the bald eagle then the bald eagle visits the squirrel.\nFOL: all x. (Visits(x, baldEagle) -> Visits(baldEagle, squirrel))\nTEXT: If something visits the dog then the dog chases the squirrel.\nFOL: all x. (Visits(x, dog) -> Chases(dog, squirrel))\nTEXT: If something chases the dog and the dog is young then it visits the dog.\nFOL: all x. ((Chases(x, dog) & Young(dog)) -> Visits(x, dog))\nTEXT: If something is kind then it visits the dog.\nFOL: all x. (Kind(x) -> Visits(x, dog))\nTEXT: The bald eagle does not visit the squirrel.\nFOL: -Visits(baldEagle, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: BaldEagle(chases(dog))\nTEXT: The bald eagle eats the squirrel.\nFOL: BaldEagle(eats(squirrel))\nTEXT: The bald eagle is young.\nFOL: BaldEagle(young)\nTEXT: The dog chases the bald eagle.\nFOL: Dog(chases(baldEagle))\nTEXT: The dog chases the squirrel.\nFOL: Dog(chases(squirrel))\nTEXT: The squirrel chases the dog.\nFOL: Squirrel(chases(dog))\nTEXT: The squirrel eats the bald eagle.\nFOL: Squirrel(eats(baldEagle))\nTEXT: The squirrel is nice.\nFOL: Squirrel(nice)\nTEXT: The squirrel is red.\nFOL: Squirrel(red)\nTEXT: The squirrel visits the bald eagle.\nFOL: Squirrel(visits(baldEagle))\nTEXT: If something chases the dog and it visits the dog then the dog visits the squirrel.\nFOL: all x. ((Chases(x, dog) & Visits(x, dog)) -> Visits(x, squirrel))\nTEXT: If something is kind and it visits the dog then the dog is nice.\nFOL: all x. ((Kind(x) & Visits(x, dog)) -> Nice(dog))\nTEXT: If the squirrel is kind then the squirrel is nice.\nFOL: Kind(squirrel) -> Nice(squirrel)\nTEXT: If something is red then it is nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If something visits the bald eagle then the bald eagle visits the squirrel.\nFOL: all x. ((Visits(x, baldEagle)) -> Visits(baldEagle, squirrel))\nTEXT: If something visits the dog then the dog chases the squirrel.\nFOL: all x. ((Visits(x, dog)) -> Chases(dog, squirrel))\nTEXT: If something chases the dog and the dog is young then it visits the dog.\nFOL: all x. ((Chases(x, dog) & Young(dog)) -> Visits(x, dog))\nTEXT: If something is kind then it visits the dog.\nFOL: all x. (Kind(x) -> Visits(x, dog))\nTEXT: The bald eagle does not visit the squirrel.\nFOL: -Visits(baldEagle, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: BaldEagle(chases(dog))\nTEXT: The bald eagle eats the squirrel.\nFOL: BaldEagle(eats(squirrel))\nTEXT: The bald eagle is young.\nFOL: BaldEagle(young)\nTEXT: The dog chases the bald eagle.\nFOL: Dog(chases(baldEagle))\nTEXT: The dog chases the squirrel.\nFOL: Dog(chases(squirrel))\nTEXT: The squirrel chases the dog.\nFOL: Squirrel(chases(dog))\nTEXT: The squirrel eats the bald eagle.\nFOL: Squirrel(eats(baldEagle))\nTEXT: The squirrel is nice.\nFOL: Squirrel(nice)\nTEXT: The squirrel is red.\nFOL: Squirrel(red)\nTEXT: The squirrel visits the bald eagle.\nFOL: Squirrel(visits(baldEagle))\nTEXT: If something chases the dog and it visits the dog then the dog visits the squirrel.\nFOL: all x. (Chases(x, dog) & Visits(x, dog) -> Visits(x, squirrel))\nTEXT: If something is kind and it visits the dog then the dog is nice.\nFOL: all x. (Kind(x) & Visits(x, dog) -> Nice(dog))\nTEXT: If the squirrel is kind then the squirrel is nice.\nFOL: Squirrel(kind) -> Squirrel(nice)\nTEXT: If something is red then it is nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If something visits the bald eagle then the bald eagle visits the squirrel.\nFOL: all x. (Visits(x, baldEagle) -> Visits(baldEagle, squirrel))\nTEXT: If something visits the dog then the dog chases the squirrel.\nFOL: all x. (Visits(x, dog) -> Chases(dog, squirrel))\nTEXT: If something chases the dog and the dog is young then it visits the dog.\nFOL: all x. (Chases(x, dog) & Young(dog) -> Visits(x, dog))\nTEXT: If something is kind then it visits the dog.\nFOL: all x. (Kind(x) -> Visits(x, dog))\nTEXT: The bald eagle does not visit the squirrel.\nFOL: -Visits(baldEagle, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: BaldEagle(chases(dog))\nTEXT: The bald eagle eats the squirrel.\nFOL: BaldEagle(eats(squirrel))\nTEXT: The bald eagle is young.\nFOL: BaldEagle(young)\nTEXT: The dog chases the bald eagle.\nFOL: Dog(chases(baldEagle))\nTEXT: The dog chases the squirrel.\nFOL: Dog(chases(squirrel))\nTEXT: The squirrel chases the dog.\nFOL: Squirrel(chases(dog))\nTEXT: The squirrel eats the bald eagle.\nFOL: Squirrel(eats(baldEagle))\nTEXT: The squirrel is nice.\nFOL: Squirrel(nice)\nTEXT: The squirrel is red.\nFOL: Squirrel(red)\nTEXT: The squirrel visits the bald eagle.\nFOL: Squirrel(visits(baldEagle))\nTEXT: If something chases the dog and it visits the dog then the dog visits the squirrel.\nFOL: all x. ((Chases(x, dog) & Visits(x, dog)) -> Visits(x, squirrel))\nTEXT: If something is kind and it visits the dog then the dog is nice.\nFOL: all x. ((Kind(x) & Visits(x, dog)) -> Nice(dog))\nTEXT: If the squirrel is kind then the squirrel is nice.\nFOL: Kind(squirrel) -> Nice(squirrel)\nTEXT: If something is red then it is nice.\nFOL: Red(x) -> Nice(x)\nTEXT: If something visits the bald eagle then the bald eagle visits the squirrel.\nFOL: all x. ((Visits(x, baldEagle)) -> Visits(baldEagle, squirrel))\nTEXT: If something visits the dog then the dog chases the squirrel.\nFOL: all x. ((Visits(x, dog)) -> Chases(dog, squirrel))\nTEXT: If something chases the dog and the dog is young then it visits the dog.\nFOL: all x. ((Chases(x, dog) & Young(dog)) -> Visits(x, dog))\nTEXT: If something is kind then it visits the dog.\nFOL: all x. (Kind(x) -> Visits(x, dog))\nTEXT: The bald eagle does not visit the squirrel.\nFOL: -Visits(baldEagle, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: BaldEagle(chases(dog))\nTEXT: The bald eagle eats the squirrel.\nFOL: BaldEagle(eats(squirrel))\nTEXT: The bald eagle is young.\nFOL: BaldEagle(young)\nTEXT: The dog chases the bald eagle.\nFOL: Dog(chases(baldEagle))\nTEXT: The dog chases the squirrel.\nFOL: Dog(chases(squirrel))\nTEXT: The squirrel chases the dog.\nFOL: Squirrel(chases(dog))\nTEXT: The squirrel eats the bald eagle.\nFOL: Squirrel(eats(baldEagle))\nTEXT: The squirrel is nice.\nFOL: Squirrel(nice)\nTEXT: The squirrel is red.\nFOL: Squirrel(red)\nTEXT: The squirrel visits the bald eagle.\nFOL: Squirrel(visits(baldEagle))\nTEXT: If something chases the dog and it visits the dog then the dog visits the squirrel.\nFOL: all x. (Chases(x, dog) & Visits(x, dog) -> Visits(x, squirrel))\nTEXT: If something is kind and it visits the dog then the dog is nice.\nFOL: all x. (Kind(x) & Visits(x, dog) -> Nice(dog))\nTEXT: If the squirrel is kind then the squirrel is nice.\nFOL: Squirrel(kind) -> Squirrel(nice)\nTEXT: If something is red then it is nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If something visits the bald eagle then the bald eagle visits the squirrel.\nFOL: all x. (Visits(x, baldEagle) -> Visits(baldEagle, squirrel))\nTEXT: If something visits the dog then the dog chases the squirrel.\nFOL: all x. (Visits(x, dog) -> Chases(dog, squirrel))\nTEXT: If something chases the dog and the dog is young then it visits the dog.\nFOL: all x. (Chases(x, dog) & Dog(young) -> Visits(x, dog))\nTEXT: If something is kind then it visits the dog.\nFOL: all x. (Kind(x) -> Visits(x, dog))\nTEXT: The bald eagle does not visit the squirrel.\nFOL: -Visits(baldEagle, squirrel)\n</EVALUATE>"
  ]
 },
 {
  "index": 106,
  "responses": [
   "<EVALUATE>\nTEXT: The cat eats the cow.\nFOL: Cat(eats(cow))\nTEXT: The cow chases the cat.\nFOL: Cow(chases(cat))\nTEXT: The cow is blue.\nFOL: Cow(blue)\nTEXT: The cow is red.\nFOL: Cow(red)\nTEXT: The cow visits the cat.\nFOL: Cow(visits(cat))\nTEXT: The lion visits the cat.\nFOL: Lion(visits(cat))\nTEXT: The lion visits the cow.\nFOL: Lion(visits(cow))\nTEXT: If the lion chases the cat and the cat eats the lion then the cat visits the cow.\nFOL: (Lion(chases(cat)) & Cat(eats(Lion)) -> Cow(visits(cat)))\nTEXT: If someone visits the lion then they visit the cow.\nFOL: exists x. (Lion(visits(x)) -> Cow(visits(x)))\nTEXT: If someone eats the cow and the cow chases the cat then they visit the lion.\nFOL: exists x. (Cow(eats(x)) & Cow(chases(cat)) -> Lion(visits(x)))\nTEXT: If someone visits the cow and the cow visits the cat then they chase the cow.\nFOL: exists x. (Cow(visits(x)) & Cow(visits(cat)) -> Cow(chases(x)))\nTEXT: If someone chases the lion then the lion eats the cat.\nFOL: exists x. (Lion(chases(x)) -> Lion(eats(cat)))\nTEXT: If someone visits the lion and the lion chases the cow then they are green.\nFOL: exists x. (Lion(visits(x)) & Lion(chases(cow)) -> Green(x))\nTEXT: The cow is rough.\nFOL: Cow(rough)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the cow.\nFOL: Cat(eats(cow))\nTEXT: The cow chases the cat.\nFOL: Cow(chases(cat))\nTEXT: The cow is blue.\nFOL: Cow(blue)\nTEXT: The cow is red.\nFOL: Cow(red)\nTEXT: The cow visits the cat.\nFOL: Cow(visits(cat))\nTEXT: The lion visits the cat.\nFOL: Lion(visits(cat))\nTEXT: The lion visits the cow.\nFOL: Lion(visits(cow))\nTEXT: If the lion chases the cat and the cat eats the lion then the cat visits the cow.\nFOL: (Lion(chases(cat)) & Cat(eats(Lion)) -> Cow(visits(cat)))\nTEXT: If someone visits the lion then they visit the cow.\nFOL: exists x. (Lion(visits(x)) -> Cow(visits(x)))\nTEXT: If someone eats the cow and the cow chases the cat then they visit the lion.\nFOL: exists x. (Cow(eats(x)) & Cow(chases(cat)) -> Lion(visits(x)))\nTEXT: If someone visits the cow and the cow visits the cat then they chase the cow.\nFOL: exists x. (Cow(visits(x)) & Cow(visits(cat)) -> Cow(chases(x)))\nTEXT: If someone chases the lion then the lion eats the cat.\nFOL: exists x. (Lion(chases(x)) -> Lion(eats(cat)))\nTEXT: If someone visits the lion and the lion chases the cow then they are green.\nFOL: exists x. ((Lion(visits(x)) & Lion(chases(cow))) -> Green(x))\nTEXT: The cow is rough.\nFOL: Cow(rough)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the cow.\nFOL: Cat(eats(cow))\nTEXT: The cow chases the cat.\nFOL: Cow(chases(cat))\nTEXT: The cow is blue.\nFOL: Cow(blue)\nTEXT: The cow is red.\nFOL: Cow(red)\nTEXT: The cow visits the cat.\nFOL: Cow(visits(cat))\nTEXT: The lion visits the cat.\nFOL: Lion(visits(cat))\nTEXT: The lion visits the cow.\nFOL: Lion(visits(cow))\nTEXT: If the lion chases the cat and the cat eats the lion then the cat visits the cow.\nFOL: (Lion(chases(cat)) & Cat(eats(Lion)) -> Cow(visits(cat)))\nTEXT: If someone visits the lion then they visit the cow.\nFOL: exists x. (Lion(visits(x)) -> Cow(visits(x)))\nTEXT: If someone eats the cow and the cow chases the cat then they visit the lion.\nFOL: exists x. (Cow(eats(x)) & Cow(chases(cat)) -> Lion(visits(x)))\nTEXT: If someone visits the cow and the cow visits the cat then they chase the cow.\nFOL: exists x. (Cow(visits(x)) & Cow(visits(cat)) -> Cow(chase(x)))\nTEXT: If someone chases the lion then the lion eats the cat.\nFOL: exists x. (Lion(chases(x)) -> Lion(eats(cat)))\nTEXT: If someone visits the lion and the lion chases the cow then they are green.\nFOL: exists x. (Lion(visits(x)) & Lion(chases(cow)) -> Green(x))\nTEXT: The cow is rough.\nFOL: Cow(rough)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the cow.\nFOL: Cat(eats(cow))\nTEXT: The cow chases the cat.\nFOL: Cow(chases(cat))\nTEXT: The cow is blue.\nFOL: Cow(blue)\nTEXT: The cow is red.\nFOL: Cow(red)\nTEXT: The cow visits the cat.\nFOL: Cow(visits(cat))\nTEXT: The lion visits the cat.\nFOL: Lion(visits(cat))\nTEXT: The lion visits the cow.\nFOL: Lion(visits(cow))\nTEXT: If the lion chases the cat and the cat eats the lion then the cat visits the cow.\nFOL: (Lion(chases(cat)) & Cat(eats(Lion)) -> Cow(visits(cat)))\nTEXT: If someone visits the lion then they visit the cow.\nFOL: exists x. (Lion(visits(x)) -> Cow(visits(x)))\nTEXT: If someone eats the cow and the cow chases the cat then they visit the lion.\nFOL: exists x. (Cow(eats(x)) & Cow(chases(cat)) -> Lion(visits(x)))\nTEXT: If someone visits the cow and the cow visits the cat then they chase the cow.\nFOL: exists x. (Cow(visits(x)) & Cow(visits(cat)) -> Cow(chases(x)))\nTEXT: If someone chases the lion then the lion eats the cat.\nFOL: exists x. (Lion(chases(x)) -> Lion(eats(cat)))\nTEXT: If someone visits the lion and the lion chases the cow then they are green.\nFOL: exists x. (Lion(visits(x)) & Lion(chases(cow)) -> x(green))\nTEXT: The cow is rough.\nFOL: Cow(rough)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the cow.\nFOL: Cat(eats(cow))\nTEXT: The cow chases the cat.\nFOL: Cow(chases(cat))\nTEXT: The cow is blue.\nFOL: Cow(blue)\nTEXT: The cow is red.\nFOL: Cow(red)\nTEXT: The cow visits the cat.\nFOL: Cow(visits(cat))\nTEXT: The lion visits the cat.\nFOL: Lion(visits(cat))\nTEXT: The lion visits the cow.\nFOL: Lion(visits(cow))\nTEXT: If the lion chases the cat and the cat eats the lion then the cat visits the cow.\nFOL: (Lion(chases(cat)) & Cat(eats(Lion)) -> Cow(visits(cat)))\nTEXT: If someone visits the lion then they visit the cow.\nFOL: exists x. (Lion(visits(x)) -> Cow(visits(x)))\nTEXT: If someone eats the cow and the cow chases the cat then they visit the lion.\nFOL: exists x. (Cow(eats(x)) & Cow(chases(cat)) -> Lion(visits(x)))\nTEXT: If someone visits the cow and the cow visits the cat then they chase the cow.\nFOL: exists x. (Cow(visits(x)) & Cow(visits(cat)) -> Cow(chases(x)))\nTEXT: If someone chases the lion then the lion eats the cat.\nFOL: (Lion(chases(x)) -> Lion(eats(cat)))\nTEXT: If someone visits the lion and the lion chases the cow then they are green.\nFOL: exists x. (Lion(visits(x)) & Lion(chases(cow)) -> Green(x))\nTEXT: The cow is rough.\nFOL: Cow(rough)\n</EVALUATE>"
  ]
 },
 {
  "index": 107,
  "responses": [
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: Bear(bear) -> Nice(bear)\n\nTEXT: The mouse needs the tiger.\nFOL: Mouse(mouse) -> NeedsTiger(mouse)\n\nTEXT: The rabbit is kind.\nFOL: Rabbit(rabbit) -> Kind(rabbit)\n\nTEXT: The tiger is green.\nFOL: Tiger(tiger) -> Green(tiger)\n\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (NeedsTiger(x) -> EatsTiger(x))\n\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x. ((Green(x) & ChasesRabbit(x)) -> ChasesTiger(x))\n\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x. ((Nice(x) & ChasesRabbit(x)) -> EatsMouse(x))\n\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x. (ChasesBear(x) -> EatsRabbit(x))\n\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x. (ChasesBear(x) -> ChasesMouse(x))\n\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: (Rough(bear) & NeedsRabbit(bear)) -> Green(rabbit)\n\nTEXT: If something is kind then it needs the mouse.\nFOL: all x. (Kind(x) -> NeedsMouse(x))\n\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x. (EatsTiger(x) -> ChasesBear(x))\n\nTEXT: The mouse does not chase the bear.\nFOL: -ChasesMouse(mouse) & -ChasesBear(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: Bear(bear) -> Nice(bear)\nTEXT: The mouse needs the tiger.\nFOL: Mouse(mouse) -> NeedsTiger(mouse)\nTEXT: The rabbit is kind.\nFOL: Rabbit(rabbit) -> Kind(rabbit)\nTEXT: The tiger is green.\nFOL: Tiger(tiger) -> Green(tiger)\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (NeedsTiger(x) -> EatsTiger(x))\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x. ((Green(x) & ChasesRabbit(x)) -> ChasesTiger(x))\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x. ((Nice(x) & ChasesRabbit(x)) -> EatsMouse(x))\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x. (ChasesBear(x) -> EatsRabbit(x))\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x. (ChasesBear(x) -> ChasesMouse(x))\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: (Rough(bear) & NeedsRabbit(bear)) -> Green(rabbit)\nTEXT: If something is kind then it needs the mouse.\nFOL: all x. (Kind(x) -> NeedsMouse(x))\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x. (EatsTiger(x) -> ChasesBear(x))\nTEXT: The mouse does not chase the bear.\nFOL: -ChasesMouse(bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: Bear(bear) -> Nice(bear)\n\nTEXT: The mouse needs the tiger.\nFOL: Mouse(mouse) -> NeedsTiger(mouse)\n\nTEXT: The rabbit is kind.\nFOL: Rabbit(rabbit) -> Kind(rabbit)\n\nTEXT: The tiger is green.\nFOL: Tiger(tiger) -> Green(tiger)\n\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (NeedsTiger(x) -> EatsTiger(x))\n\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x. ((Green(x) & ChasesRabbit(x)) -> ChasesTiger(x))\n\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x. ((Nice(x) & ChasesRabbit(x)) -> EatsMouse(x))\n\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x. (ChasesBear(x) -> EatsRabbit(x))\n\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x. (ChasesBear(x) -> ChasesMouse(x))\n\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: (Rough(bear) & NeedsRabbit(bear)) -> Green(rabbit)\n\nTEXT: If something is kind then it needs the mouse.\nFOL: all x. (Kind(x) -> NeedsMouse(x))\n\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x. (EatsTiger(x) -> ChasesBear(x))\n\nTEXT: The mouse does not chase the bear.\nFOL: -ChasesMouse(mouse) & ChasesBear(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: Bear(bear) -> Nice(bear)\nTEXT: The mouse needs the tiger.\nFOL: Mouse(mouse) -> NeedsTiger(mouse)\nTEXT: The rabbit is kind.\nFOL: Rabbit(rabbit) -> Kind(rabbit)\nTEXT: The tiger is green.\nFOL: Tiger(tiger) -> Green(tiger)\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (NeedsTiger(x) -> EatsTiger(x))\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x. ((Green(x) & ChasesRabbit(x)) -> ChasesTiger(x))\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x. ((Nice(x) & ChasesRabbit(x)) -> EatsMouse(x))\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x. (ChasesBear(x) -> EatsRabbit(x))\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x. (ChasesBear(x) -> ChasesMouse(x))\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: (Rough(bear) & NeedsRabbit(bear)) -> Green(rabbit)\nTEXT: If something is kind then it needs the mouse.\nFOL: all x. (Kind(x) -> NeedsMouse(x))\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x. (EatsTiger(x) -> ChasesBear(x))\nTEXT: The mouse does not chase the bear.\nFOL: -ChasesMouse(mouse) & ChasesBear(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is nice.\nFOL: Bear(bear) -> Nice(bear)\nTEXT: The mouse needs the tiger.\nFOL: Mouse(mouse) -> NeedsTiger(mouse)\nTEXT: The rabbit is kind.\nFOL: Rabbit(rabbit) -> Kind(rabbit)\nTEXT: The tiger is green.\nFOL: Tiger(tiger) -> Green(tiger)\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (NeedsTiger(x) -> EatsTiger(x))\nTEXT: If something is green and it chases the rabbit then the rabbit chases the tiger.\nFOL: all x. ((Green(x) & ChasesRabbit(x)) -> ChasesTiger(x))\nTEXT: If something is nice and it chases the rabbit then the rabbit eats the mouse.\nFOL: all x. ((Nice(x) & ChasesRabbit(x)) -> EatsMouse(x))\nTEXT: If something chases the bear then the bear eats the rabbit.\nFOL: all x. (ChasesBear(x) -> EatsRabbit(x))\nTEXT: If something chases the bear then it chases the mouse.\nFOL: all x. (ChasesBear(x) -> ChasesMouse(x))\nTEXT: If the bear is rough and the bear needs the rabbit then the rabbit is green.\nFOL: (Rough(bear) & NeedsRabbit(bear)) -> Green(rabbit)\nTEXT: If something is kind then it needs the mouse.\nFOL: all x. (Kind(x) -> NeedsMouse(x))\nTEXT: If something eats the tiger then it chases the bear.\nFOL: all x. (EatsTiger(x) -> ChasesBear(x))\nTEXT: The mouse does not chase the bear.\nFOL: -ChasesMouse(mouse) & -ChasesBear(mouse)\n</EVALUATE>"
  ]
 },
 {
  "index": 108,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: BaldEagle(chasesDog)\nTEXT: The dog chases the squirrel.\nFOL: Dog(chasesSquirrel)\nTEXT: The squirrel is rough.\nFOL: Squirrel(isRough)\nTEXT: If something sees the squirrel then the squirrel sees the dog.\nFOL: all x. (SeesSquirrel(x) -> SeesDog(x))\nTEXT: If something sees the squirrel then the squirrel does not need the dog.\nFOL: all x. (SeesSquirrel(x) -> -NeedsDog(x))\nTEXT: If something is nice then it does not see the bald eagle.\nFOL: all x. (Nice(x) -> -SeesBaldEagle(x))\nTEXT: If something needs the bald eagle and the bald eagle needs the squirrel then it needs the squirrel.\nFOL: all x. ((NeedsBaldEagle(x) & NeedsSquirrel(x)) -> NeedsSquirrel(x))\nTEXT: If something needs the squirrel then the squirrel chases the bald eagle.\nFOL: all x. (NeedsSquirrel(x) -> ChasesBaldEagle(x))\nTEXT: If something chases the bald eagle then the bald eagle is cold.\nFOL: all x. (ChasesBaldEagle(x) -> IsCold(x))\nTEXT: If the dog chases the squirrel then the dog needs the squirrel.\nFOL: Dog(chasesSquirrel) -> NeedsSquirrel(Dog)\nTEXT: If something is kind and not nice then it chases the squirrel.\nFOL: all x. (Kind(x) & -Nice(x) -> ChasesSquirrel(x))\nTEXT: The dog chases the squirrel.\nFOL: Dog(chasesSquirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: BaldEagle(chasesDog)\nTEXT: The dog chases the squirrel.\nFOL: Dog(chasesSquirrel)\nTEXT: The squirrel is rough.\nFOL: Squirrel(isRough)\nTEXT: If something sees the squirrel then the squirrel sees the dog.\nFOL: all x. (SeesSquirrel(x) -> SeesDog(x))\nTEXT: If something sees the squirrel then the squirrel does not need the dog.\nFOL: all x. (SeesSquirrel(x) -> -NeedsDog(x))\nTEXT: If something is nice then it does not see the bald eagle.\nFOL: all x. (Nice(x) -> -SeesBaldEagle(x))\nTEXT: If something needs the bald eagle and the bald eagle needs the squirrel then it needs the squirrel.\nFOL: all x. ((NeedsBaldEagle(x) & NeedsSquirrel(x)) -> NeedsSquirrel(x))\nTEXT: If something needs the squirrel then the squirrel chases the bald eagle.\nFOL: all x. (NeedsSquirrel(x) -> ChasesBaldEagle(x))\nTEXT: If something chases the bald eagle then the bald eagle is cold.\nFOL: all x. (ChasesBaldEagle(x) -> BaldEagle(isCold))\nTEXT: If the dog chases the squirrel then the dog needs the squirrel.\nFOL: Dog(chasesSquirrel) -> NeedsSquirrel(Dog)\nTEXT: If something is kind and not nice then it chases the squirrel.\nFOL: all x. (Kind(x) & -Nice(x) -> ChasesSquirrel(x))\nTEXT: The dog chases the squirrel.\nFOL: Dog(chasesSquirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: BaldEagle(chasesDog)\nTEXT: The dog chases the squirrel.\nFOL: Dog(chasesSquirrel)\nTEXT: The squirrel is rough.\nFOL: Squirrel(isRough)\nTEXT: If something sees the squirrel then the squirrel sees the dog.\nFOL: all x. (SeesSquirrel(x) -> SeesDog(x))\nTEXT: If something sees the squirrel then the squirrel does not need the dog.\nFOL: all x. (SeesSquirrel(x) -> -NeedsDog(x))\nTEXT: If something is nice then it does not see the bald eagle.\nFOL: all x. (Nice(x) -> -SeesBaldEagle(x))\nTEXT: If something needs the bald eagle and the bald eagle needs the squirrel then it needs the squirrel.\nFOL: all x. ((NeedsBaldEagle(x) & BaldEagle(NeedsSquirrel)) -> NeedsSquirrel(x))\nTEXT: If something needs the squirrel then the squirrel chases the bald eagle.\nFOL: all x. (NeedsSquirrel(x) -> Squirrel(chasesBaldEagle(x)))\nTEXT: If something chases the bald eagle then the bald eagle is cold.\nFOL: all x. (ChasesBaldEagle(x) -> BaldEagle(isCold(x)))\nTEXT: If the dog chases the squirrel then the dog needs the squirrel.\nFOL: Dog(chasesSquirrel) -> NeedsSquirrel(Dog)\nTEXT: If something is kind and not nice then it chases the squirrel.\nFOL: all x. (Kind(x) & -Nice(x) -> ChasesSquirrel(x))\nTEXT: The dog chases the squirrel.\nFOL: Dog(chasesSquirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: BaldEagle(chasesDog)\nTEXT: The dog chases the squirrel.\nFOL: Dog(chasesSquirrel)\nTEXT: The squirrel is rough.\nFOL: Squirrel(isRough)\nTEXT: If something sees the squirrel then the squirrel sees the dog.\nFOL: all x. (SeesSquirrel(x) -> SeesDog(x))\nTEXT: If something sees the squirrel then the squirrel does not need the dog.\nFOL: all x. (SeesSquirrel(x) -> -NeedsDog(x))\nTEXT: If something is nice then it does not see the bald eagle.\nFOL: all x. (Nice(x) -> -SeesBaldEagle(x))\nTEXT: If something needs the bald eagle and the bald eagle needs the squirrel then it needs the squirrel.\nFOL: all x. ((NeedsBaldEagle(x) & BaldEagle(NeedsSquirrel)) -> NeedsSquirrel(x))\nTEXT: If something needs the squirrel then the squirrel chases the bald eagle.\nFOL: all x. (NeedsSquirrel(x) -> Squirrel(chasesBaldEagle(x)))\nTEXT: If something chases the bald eagle then the bald eagle is cold.\nFOL: all x. (ChasesBaldEagle(x) -> BaldEagle(isCold))\nTEXT: If the dog chases the squirrel then the dog needs the squirrel.\nFOL: Dog(chasesSquirrel) -> NeedsSquirrel(Dog)\nTEXT: If something is kind and not nice then it chases the squirrel.\nFOL: all x. (Kind(x) & -Nice(x) -> ChasesSquirrel(x))\nTEXT: The dog chases the squirrel.\nFOL: Dog(chasesSquirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the dog.\nFOL: BaldEagle(chasesDog)\nTEXT: The dog chases the squirrel.\nFOL: Dog(chasesSquirrel)\nTEXT: The squirrel is rough.\nFOL: Squirrel(isRough)\nTEXT: If something sees the squirrel then the squirrel sees the dog.\nFOL: all x. (SeesSquirrel(x) -> SeesDog(x))\nTEXT: If something sees the squirrel then the squirrel does not need the dog.\nFOL: all x. (SeesSquirrel(x) -> -NeedsDog(x))\nTEXT: If something is nice then it does not see the bald eagle.\nFOL: all x. (Nice(x) -> -SeesBaldEagle(x))\nTEXT: If something needs the bald eagle and the bald eagle needs the squirrel then it needs the squirrel.\nFOL: all x. ((NeedsBaldEagle(x) & BaldEagle(NeedsSquirrel)) -> NeedsSquirrel(x))\nTEXT: If something needs the squirrel then the squirrel chases the bald eagle.\nFOL: all x. (NeedsSquirrel(x) -> ChasesBaldEagle(x))\nTEXT: If something chases the bald eagle then the bald eagle is cold.\nFOL: all x. (ChasesBaldEagle(x) -> IsCold(x))\nTEXT: If the dog chases the squirrel then the dog needs the squirrel.\nFOL: Dog(chasesSquirrel) -> NeedsSquirrel(Dog)\nTEXT: If something is kind and not nice then it chases the squirrel.\nFOL: all x. (Kind(x) & -Nice(x) -> ChasesSquirrel(x))\nTEXT: The dog chases the squirrel.\nFOL: Dog(chasesSquirrel)\n</EVALUATE>"
  ]
 },
 {
  "index": 109,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is not green.\nFOL: -Green(Bob)\nTEXT: Bob is red.\nFOL: Red(Bob)\nTEXT: Bob is not smart.\nFOL: -Smart(Bob)\nTEXT: Charlie is not rough.\nFOL: -Rough(Charlie)\nTEXT: Dave is smart.\nFOL: Smart(Dave)\nTEXT: Erin is big.\nFOL: Big(Erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(Erin)\nTEXT: If someone is big and not red then they are smart.\nFOL: all x. ((Big(x) & -Red(x)) -> Smart(x))\nTEXT: Cold, quiet people are not green.\nFOL: all x. ((Cold(x) & Quiet(x)) -> -Green(x))\nTEXT: If someone is big and quiet then they are green.\nFOL: all x. ((Big(x) & Quiet(x)) -> Green(x))\nTEXT: If Erin is green and Erin is rough then Erin is quiet.\nFOL: Green(Erin) & Rough(Erin) -> Quiet(Erin)\nTEXT: If someone is cold and big then they are not quiet.\nFOL: all x. ((Cold(x) & Big(x)) -> -Quiet(x))\nTEXT: If someone is big then they are rough.\nFOL: all x. (Big(x) -> Rough(x))\nTEXT: If someone is rough then they are not cold.\nFOL: all x. (Rough(x) -> -Cold(x))\nTEXT: Red people are big.\nFOL: all x. (Red(x) -> Big(x))\nTEXT: Erin is not smart.\nFOL: -Smart(Erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is not green.\nFOL: -Green(Bob)\nTEXT: Bob is red.\nFOL: Red(Bob)\nTEXT: Bob is not smart.\nFOL: -Smart(Bob)\nTEXT: Charlie is not rough.\nFOL: -Rough(Charlie)\nTEXT: Dave is smart.\nFOL: Smart(Dave)\nTEXT: Erin is big.\nFOL: Big(Erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(Erin)\nTEXT: If someone is big and not red then they are smart.\nFOL: all x. (Big(x) & -Red(x) -> Smart(x))\nTEXT: Cold, quiet people are not green.\nFOL: all x. (Cold(x) & Quiet(x) -> -Green(x))\nTEXT: If someone is big and quiet then they are green.\nFOL: all x. (Big(x) & Quiet(x) -> Green(x))\nTEXT: If Erin is green and Erin is rough then Erin is quiet.\nFOL: Green(Erin) & Rough(Erin) -> Quiet(Erin)\nTEXT: If someone is cold and big then they are not quiet.\nFOL: all x. (Cold(x) & Big(x) -> -Quiet(x))\nTEXT: If someone is big then they are rough.\nFOL: all x. (Big(x) -> Rough(x))\nTEXT: If someone is rough then they are not cold.\nFOL: all x. (Rough(x) -> -Cold(x))\nTEXT: Red people are big.\nFOL: all x. (Red(x) -> Big(x))\nTEXT: Erin is not smart.\nFOL: -Smart(Erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is not green.\nFOL: -Green(Bob)\nTEXT: Bob is red.\nFOL: Red(Bob)\nTEXT: Bob is not smart.\nFOL: -Smart(Bob)\nTEXT: Charlie is not rough.\nFOL: -Rough(Charlie)\nTEXT: Dave is smart.\nFOL: Smart(Dave)\nTEXT: Erin is big.\nFOL: Big(Erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(Erin)\nTEXT: If someone is big and not red then they are smart.\nFOL: all x. ((Big(x) & -Red(x)) -> Smart(x))\nTEXT: Cold, quiet people are not green.\nFOL: all x. (Cold(x) & Quiet(x) -> -Green(x))\nTEXT: If someone is big and quiet then they are green.\nFOL: all x. ((Big(x) & Quiet(x)) -> Green(x))\nTEXT: If Erin is green and Erin is rough then Erin is quiet.\nFOL: Green(Erin) & Rough(Erin) -> Quiet(Erin)\nTEXT: If someone is cold and big then they are not quiet.\nFOL: all x. (Cold(x) & Big(x) -> -Quiet(x))\nTEXT: If someone is big then they are rough.\nFOL: all x. (Big(x) -> Rough(x))\nTEXT: If someone is rough then they are not cold.\nFOL: all x. (Rough(x) -> -Cold(x))\nTEXT: Red people are big.\nFOL: all x. (Red(x) -> Big(x))\nTEXT: Erin is not smart.\nFOL: -Smart(Erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is not green.\nFOL: -Green(Bob)\nTEXT: Bob is red.\nFOL: Red(Bob)\nTEXT: Bob is not smart.\nFOL: -Smart(Bob)\nTEXT: Charlie is not rough.\nFOL: -Rough(Charlie)\nTEXT: Dave is smart.\nFOL: Smart(Dave)\nTEXT: Erin is big.\nFOL: Big(Erin)\nTEXT: Erin is not quiet.\nFOL: -Quiet(Erin)\nTEXT: If someone is big and not red then they are smart.\nFOL: all x. ((Big(x) & -Red(x)) -> Smart(x))\nTEXT: Cold, quiet people are not green.\nFOL: all x. ((Cold(x) & Quiet(x)) -> -Green(x))\nTEXT: If someone is big and quiet then they are green.\nFOL: all x. ((Big(x) & Quiet(x)) -> Green(x))\nTEXT: If Erin is green and Erin is rough then Erin is quiet.\nFOL: (Green(Erin) & Rough(Erin)) -> Quiet(Erin)\nTEXT: If someone is cold and big then they are not quiet.\nFOL: all x. ((Cold(x) & Big(x)) -> -Quiet(x))\nTEXT: If someone is big then they are rough.\nFOL: all x. (Big(x) -> Rough(x))\nTEXT: If someone is rough then they are not cold.\nFOL: all x. (Rough(x) -> -Cold(x))\nTEXT: Red people are big.\nFOL: all x. (Red(x) -> Big(x))\nTEXT: Erin is not smart.\nFOL: -Smart(Erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is not green.\nFOL: -Green(Bob)\n\nTEXT: Bob is red.\nFOL: Red(Bob)\n\nTEXT: Bob is not smart.\nFOL: -Smart(Bob)\n\nTEXT: Charlie is not rough.\nFOL: -Rough(Charlie)\n\nTEXT: Dave is smart.\nFOL: Smart(Dave)\n\nTEXT: Erin is big.\nFOL: Big(Erin)\n\nTEXT: Erin is not quiet.\nFOL: -Quiet(Erin)\n\nTEXT: If someone is big and not red then they are smart.\nFOL: all x. (Big(x) & -Red(x) -> Smart(x))\n\nTEXT: Cold, quiet people are not green.\nFOL: all x. (Cold(x) & Quiet(x) -> -Green(x))\n\nTEXT: If someone is big and quiet then they are green.\nFOL: all x. (Big(x) & Quiet(x) -> Green(x))\n\nTEXT: If Erin is green and Erin is rough then Erin is quiet.\nFOL: Green(Erin) & Rough(Erin) -> Quiet(Erin)\n\nTEXT: If someone is cold and big then they are not quiet.\nFOL: all x. (Cold(x) & Big(x) -> -Quiet(x))\n\nTEXT: If someone is big then they are rough.\nFOL: all x. (Big(x) -> Rough(x))\n\nTEXT: If someone is rough then they are not cold.\nFOL: all x. (Rough(x) -> -Cold(x))\n\nTEXT: Red people are big.\nFOL: all x. (Red(x) -> Big(x))\n\nTEXT: Erin is not smart.\nFOL: -Smart(Erin)\n</EVALUATE>"
  ]
 },
 {
  "index": 110,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is red.\nFOL: Dave(Red)\nTEXT: Dave is round.\nFOL: Dave(Round)\nTEXT: Erin is quiet.\nFOL: Erin(Quiet)\nTEXT: Erin is rough.\nFOL: Erin(Rough)\nTEXT: Erin is round.\nFOL: Erin(Round)\nTEXT: Erin is young.\nFOL: Erin(Young)\nTEXT: Fiona is red.\nFOL: Fiona(Red)\nTEXT: Fiona is rough.\nFOL: Fiona(Rough)\nTEXT: Fiona is round.\nFOL: Fiona(Round)\nTEXT: Gary is blue.\nFOL: Gary(Blue)\nTEXT: Gary is red.\nFOL: Gary(Red)\nTEXT: Gary is smart.\nFOL: Gary(Smart)\nTEXT: If someone is red and round then they are rough.\nFOL: all x. (Red(x) & Round(x) -> Rough(x))\nTEXT: All smart people are round.\nFOL: all x. (Smart(x) -> Round(x))\nTEXT: If Erin is young then Erin is rough.\nFOL: Erin(Young) -> Erin(Rough)\nTEXT: Young, red people are quiet.\nFOL: all x. (Young(x) & Red(x) -> Quiet(x))\nTEXT: All blue, smart people are rough.\nFOL: all x. (Blue(x) & Smart(x) -> Rough(x))\nTEXT: Round people are young.\nFOL: all x. (Round(x) -> Young(x))\nTEXT: Dave is smart.\nFOL: Dave(Smart)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is red.\nFOL: Red(Dave)\nTEXT: Dave is round.\nFOL: Round(Dave)\nTEXT: Erin is quiet.\nFOL: Quiet(Erin)\nTEXT: Erin is rough.\nFOL: Rough(Erin)\nTEXT: Erin is round.\nFOL: Round(Erin)\nTEXT: Erin is young.\nFOL: Young(Erin)\nTEXT: Fiona is red.\nFOL: Red(Fiona)\nTEXT: Fiona is rough.\nFOL: Rough(Fiona)\nTEXT: Fiona is round.\nFOL: Round(Fiona)\nTEXT: Gary is blue.\nFOL: Blue(Gary)\nTEXT: Gary is red.\nFOL: Red(Gary)\nTEXT: Gary is smart.\nFOL: Smart(Gary)\nTEXT: If someone is red and round then they are rough.\nFOL: all x. (Red(x) & Round(x) -> Rough(x))\nTEXT: All smart people are round.\nFOL: all x. (Smart(x) -> Round(x))\nTEXT: If Erin is young then Erin is rough.\nFOL: Young(Erin) -> Rough(Erin)\nTEXT: Young, red people are quiet.\nFOL: all x. (Young(x) & Red(x) -> Quiet(x))\nTEXT: All blue, smart people are rough.\nFOL: all x. (Blue(x) & Smart(x) -> Rough(x))\nTEXT: Round people are young.\nFOL: all x. (Round(x) -> Young(x))\nTEXT: Dave is smart.\nFOL: Smart(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is red.\nFOL: Red(Dave)\n\nTEXT: Dave is round.\nFOL: Round(Dave)\n\nTEXT: Erin is quiet.\nFOL: Quiet(Erin)\n\nTEXT: Erin is rough.\nFOL: Rough(Erin)\n\nTEXT: Erin is round.\nFOL: Round(Erin)\n\nTEXT: Erin is young.\nFOL: Young(Erin)\n\nTEXT: Fiona is red.\nFOL: Red(Fiona)\n\nTEXT: Fiona is rough.\nFOL: Rough(Fiona)\n\nTEXT: Fiona is round.\nFOL: Round(Fiona)\n\nTEXT: Gary is blue.\nFOL: Blue(Gary)\n\nTEXT: Gary is red.\nFOL: Red(Gary)\n\nTEXT: Gary is smart.\nFOL: Smart(Gary)\n\nTEXT: If someone is red and round then they are rough.\nFOL: all x. (Red(x) & Round(x) -> Rough(x))\n\nTEXT: All smart people are round.\nFOL: all x. (Smart(x) -> Round(x))\n\nTEXT: If Erin is young then Erin is rough.\nFOL: Young(Erin) -> Rough(Erin)\n\nTEXT: Young, red people are quiet.\nFOL: all x. (Young(x) & Red(x) -> Quiet(x))\n\nTEXT: All blue, smart people are rough.\nFOL: all x. (Blue(x) & Smart(x) -> Rough(x))\n\nTEXT: Round people are young.\nFOL: all x. (Round(x) -> Young(x))\n\nTEXT: Dave is smart.\nFOL: Smart(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is red.\nFOL: Dave(Red)\nTEXT: Dave is round.\nFOL: Dave(Round)\nTEXT: Erin is quiet.\nFOL: Erin(Quiet)\nTEXT: Erin is rough.\nFOL: Erin(Rough)\nTEXT: Erin is round.\nFOL: Erin(Round)\nTEXT: Erin is young.\nFOL: Erin(Young)\nTEXT: Fiona is red.\nFOL: Fiona(Red)\nTEXT: Fiona is rough.\nFOL: Fiona(Rough)\nTEXT: Fiona is round.\nFOL: Fiona(Round)\nTEXT: Gary is blue.\nFOL: Gary(Blue)\nTEXT: Gary is red.\nFOL: Gary(Red)\nTEXT: Gary is smart.\nFOL: Gary(Smart)\nTEXT: If someone is red and round then they are rough.\nFOL: all x. (Red(x) & Round(x) -> Rough(x))\nTEXT: All smart people are round.\nFOL: all x. (Smart(x) -> Round(x))\nTEXT: If Erin is young then Erin is rough.\nFOL: Erin(Young) -> Erin(Rough)\nTEXT: Young, red people are quiet.\nFOL: all x. (Young(x) & Red(x) -> Quiet(x))\nTEXT: All blue, smart people are rough.\nFOL: all x. (Blue(x) & Smart(x) -> Rough(x))\nTEXT: Round people are young.\nFOL: all x. (Round(x) -> Young(x))\nTEXT: Dave is smart.\nFOL: Dave(Smart)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is red.\nFOL: Dave(red)\nTEXT: Dave is round.\nFOL: Dave(round)\nTEXT: Erin is quiet.\nFOL: Erin(quiet)\nTEXT: Erin is rough.\nFOL: Erin(rough)\nTEXT: Erin is round.\nFOL: Erin(round)\nTEXT: Erin is young.\nFOL: Erin(young)\nTEXT: Fiona is red.\nFOL: Fiona(red)\nTEXT: Fiona is rough.\nFOL: Fiona(rough)\nTEXT: Fiona is round.\nFOL: Fiona(round)\nTEXT: Gary is blue.\nFOL: Gary(blue)\nTEXT: Gary is red.\nFOL: Gary(red)\nTEXT: Gary is smart.\nFOL: Gary(smart)\nTEXT: If someone is red and round then they are rough.\nFOL: all x. (Red(x) & Round(x) -> Rough(x))\nTEXT: All smart people are round.\nFOL: all x. (Smart(x) -> Round(x))\nTEXT: If Erin is young then Erin is rough.\nFOL: Erin(young) -> Erin(rough)\nTEXT: Young, red people are quiet.\nFOL: all x. (Young(x) & Red(x) -> Quiet(x))\nTEXT: All blue, smart people are rough.\nFOL: all x. (Blue(x) & Smart(x) -> Rough(x))\nTEXT: Round people are young.\nFOL: all x. (Round(x) -> Young(x))\nTEXT: Dave is smart.\nFOL: Dave(smart)\n</EVALUATE>"
  ]
 },
 {
  "index": 111,
  "responses": [
   "<EVALUATE>\nTEXT: The cat is big.\nFOL: Cat(big)\nTEXT: The cat is kind.\nFOL: Cat(kind)\nTEXT: The cat needs the tiger.\nFOL: Cat(needsTiger)\nTEXT: The cat visits the rabbit.\nFOL: Cat(visitsRabbit)\nTEXT: The rabbit eats the cat.\nFOL: Rabbit(eatsCat)\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(eatsTiger)\nTEXT: The rabbit is rough.\nFOL: Rabbit(rough)\nTEXT: The rabbit is round.\nFOL: Rabbit(round)\nTEXT: The rabbit needs the tiger.\nFOL: Rabbit(needsTiger)\nTEXT: The rabbit visits the cat.\nFOL: Rabbit(visitsCat)\nTEXT: The tiger is rough.\nFOL: Tiger(rough)\nTEXT: The tiger is round.\nFOL: Tiger(round)\nTEXT: The tiger needs the cat.\nFOL: Tiger(needsCat)\nTEXT: The tiger visits the cat.\nFOL: Tiger(visitsCat)\nTEXT: The tiger visits the rabbit.\nFOL: Tiger(visitsRabbit)\nTEXT: If someone needs the cat then the cat eats the tiger.\nFOL: all x. (needsCat(x) -> eatsTiger(x))\nTEXT: If someone is cold then they eat the tiger.\nFOL: all x. (cold(x) -> eatsTiger(x))\nTEXT: Round people are cold.\nFOL: all x. (round(x) -> cold(x))\nTEXT: If someone eats the tiger and the tiger eats the cat then they are rough.\nFOL: all x. ((eatsTiger(x) & eatsCat(x)) -> rough(x))\nTEXT: If someone eats the tiger then they need the tiger.\nFOL: all x. (eatsTiger(x) -> needsTiger(x))\nTEXT: If someone is round then they eat the cat.\nFOL: all x. (round(x) -> eatsCat(x))\nTEXT: If someone is cold and they need the tiger then they need the rabbit.\nFOL: all x. (cold(x) & needsTiger(x) -> needsRabbit(x))\nTEXT: If someone eats the tiger and the tiger eats the rabbit then the tiger visits the cat.\nFOL: all x. ((eatsTiger(x) & eatsRabbit(x)) -> visitsCat(x))\nTEXT: The cat eats the tiger.\nFOL: eatsTiger(cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is big.\nFOL: Cat(big)\nTEXT: The cat is kind.\nFOL: Cat(kind)\nTEXT: The cat needs the tiger.\nFOL: Cat(needsTiger)\nTEXT: The cat visits the rabbit.\nFOL: Cat(visitsRabbit)\nTEXT: The rabbit eats the cat.\nFOL: Rabbit(eatsCat)\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(eatsTiger)\nTEXT: The rabbit is rough.\nFOL: Rabbit(rough)\nTEXT: The rabbit is round.\nFOL: Rabbit(round)\nTEXT: The rabbit needs the tiger.\nFOL: Rabbit(needsTiger)\nTEXT: The rabbit visits the cat.\nFOL: Rabbit(visitsCat)\nTEXT: The tiger is rough.\nFOL: Tiger(rough)\nTEXT: The tiger is round.\nFOL: Tiger(round)\nTEXT: The tiger needs the cat.\nFOL: Tiger(needsCat)\nTEXT: The tiger visits the cat.\nFOL: Tiger(visitsCat)\nTEXT: The tiger visits the rabbit.\nFOL: Tiger(visitsRabbit)\nTEXT: If someone needs the cat then the cat eats the tiger.\nFOL: all x. (needsCat(x) -> eatsTiger(x))\nTEXT: If someone is cold then they eat the tiger.\nFOL: all x. (cold(x) -> eatsTiger(x))\nTEXT: Round people are cold.\nFOL: all x. (round(x) -> cold(x))\nTEXT: If someone eats the tiger and the tiger eats the cat then they are rough.\nFOL: all x. ((eatsTiger(x) & eatsCat(x)) -> rough(x))\nTEXT: If someone eats the tiger then they need the tiger.\nFOL: all x. (eatsTiger(x) -> needsTiger(x))\nTEXT: If someone is round then they eat the cat.\nFOL: all x. (round(x) -> eatsCat(x))\nTEXT: If someone is cold and they need the tiger then they need the rabbit.\nFOL: all x. (cold(x) & needsTiger(x) -> needsRabbit(x))\nTEXT: If someone eats the tiger and the tiger eats the rabbit then the tiger visits the cat.\nFOL: all x. ((eatsTiger(x) & eatsRabbit(x)) -> visitsCat(x))\nTEXT: The cat eats the tiger.\nFOL: eatsCat(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is big.\nFOL: Cat(big)\nTEXT: The cat is kind.\nFOL: Cat(kind)\nTEXT: The cat needs the tiger.\nFOL: Cat(needsTiger)\nTEXT: The cat visits the rabbit.\nFOL: Cat(visitsRabbit)\nTEXT: The rabbit eats the cat.\nFOL: Rabbit(eatsCat)\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(eatsTiger)\nTEXT: The rabbit is rough.\nFOL: Rabbit(rough)\nTEXT: The rabbit is round.\nFOL: Rabbit(round)\nTEXT: The rabbit needs the tiger.\nFOL: Rabbit(needsTiger)\nTEXT: The rabbit visits the cat.\nFOL: Rabbit(visitsCat)\nTEXT: The tiger is rough.\nFOL: Tiger(rough)\nTEXT: The tiger is round.\nFOL: Tiger(round)\nTEXT: The tiger needs the cat.\nFOL: Tiger(needsCat)\nTEXT: The tiger visits the cat.\nFOL: Tiger(visitsCat)\nTEXT: The tiger visits the rabbit.\nFOL: Tiger(visitsRabbit)\nTEXT: If someone needs the cat then the cat eats the tiger.\nFOL: all x. (needsCat(x) -> eatsTiger(x))\nTEXT: If someone is cold then they eat the tiger.\nFOL: all x. (Cold(x) -> eatsTiger(x))\nTEXT: Round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: If someone eats the tiger and the tiger eats the cat then they are rough.\nFOL: all x. ((eatsTiger(x) & eatsCat(x)) -> Rough(x))\nTEXT: If someone eats the tiger then they need the tiger.\nFOL: all x. (eatsTiger(x) -> needsTiger(x))\nTEXT: If someone is round then they eat the cat.\nFOL: all x. (Round(x) -> eatsCat(x))\nTEXT: If someone is cold and they need the tiger then they need the rabbit.\nFOL: all x. ((Cold(x) & needsTiger(x)) -> needsRabbit(x))\nTEXT: If someone eats the tiger and the tiger eats the rabbit then the tiger visits the cat.\nFOL: all x. ((eatsTiger(x) & eatsRabbit(x)) -> visitsCat(x))\nTEXT: The cat eats the tiger.\nFOL: eatsTiger(cat)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is big.\nFOL: Cat(big)\nTEXT: The cat is kind.\nFOL: Cat(kind)\nTEXT: The cat needs the tiger.\nFOL: Cat(needsTiger)\nTEXT: The cat visits the rabbit.\nFOL: Cat(visitsRabbit)\nTEXT: The rabbit eats the cat.\nFOL: Rabbit(eatsCat)\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(eatsTiger)\nTEXT: The rabbit is rough.\nFOL: Rabbit(rough)\nTEXT: The rabbit is round.\nFOL: Rabbit(round)\nTEXT: The rabbit needs the tiger.\nFOL: Rabbit(needsTiger)\nTEXT: The rabbit visits the cat.\nFOL: Rabbit(visitsCat)\nTEXT: The tiger is rough.\nFOL: Tiger(rough)\nTEXT: The tiger is round.\nFOL: Tiger(round)\nTEXT: The tiger needs the cat.\nFOL: Tiger(needsCat)\nTEXT: The tiger visits the cat.\nFOL: Tiger(visitsCat)\nTEXT: The tiger visits the rabbit.\nFOL: Tiger(visitsRabbit)\nTEXT: If someone needs the cat then the cat eats the tiger.\nFOL: all x. (needsCat(x) -> eatsTiger(x))\nTEXT: If someone is cold then they eat the tiger.\nFOL: all x. (Cold(x) -> eatsTiger(x))\nTEXT: Round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: If someone eats the tiger and the tiger eats the cat then they are rough.\nFOL: all x. ((eatsTiger(x) & eatsCat(x)) -> Rough(x))\nTEXT: If someone eats the tiger then they need the tiger.\nFOL: all x. (eatsTiger(x) -> needsTiger(x))\nTEXT: If someone is round then they eat the cat.\nFOL: all x. (Round(x) -> eatsCat(x))\nTEXT: If someone is cold and they need the tiger then they need the rabbit.\nFOL: all x. (Cold(x) & needsTiger(x) -> needsRabbit(x))\nTEXT: If someone eats the tiger and the tiger eats the rabbit then the tiger visits the cat.\nFOL: all x. ((eatsTiger(x) & eatsRabbit(x)) -> visitsCat(x))\nTEXT: The cat eats the tiger.\nFOL: eatsCat(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is big.\nFOL: Cat(big)\nTEXT: The cat is kind.\nFOL: Cat(kind)\nTEXT: The cat needs the tiger.\nFOL: Cat(needsTiger)\nTEXT: The cat visits the rabbit.\nFOL: Cat(visitsRabbit)\nTEXT: The rabbit eats the cat.\nFOL: Rabbit(eatsCat)\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(eatsTiger)\nTEXT: The rabbit is rough.\nFOL: Rabbit(rough)\nTEXT: The rabbit is round.\nFOL: Rabbit(round)\nTEXT: The rabbit needs the tiger.\nFOL: Rabbit(needsTiger)\nTEXT: The rabbit visits the cat.\nFOL: Rabbit(visitsCat)\nTEXT: The tiger is rough.\nFOL: Tiger(rough)\nTEXT: The tiger is round.\nFOL: Tiger(round)\nTEXT: The tiger needs the cat.\nFOL: Tiger(needsCat)\nTEXT: The tiger visits the cat.\nFOL: Tiger(visitsCat)\nTEXT: The tiger visits the rabbit.\nFOL: Tiger(visitsRabbit)\nTEXT: If someone needs the cat then the cat eats the tiger.\nFOL: all x. (needsCat(x) -> eatsTiger(x))\nTEXT: If someone is cold then they eat the tiger.\nFOL: all x. (Cold(x) -> eatsTiger(x))\nTEXT: Round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: If someone eats the tiger and the tiger eats the cat then they are rough.\nFOL: all x. ((eatsTiger(x) & eatsCat(x)) -> Rough(x))\nTEXT: If someone eats the tiger then they need the tiger.\nFOL: all x. (eatsTiger(x) -> needsTiger(x))\nTEXT: If someone is round then they eat the cat.\nFOL: all x. (Round(x) -> eatsCat(x))\nTEXT: If someone is cold and they need the tiger then they need the rabbit.\nFOL: all x. (Cold(x) & needsTiger(x) -> needsRabbit(x))\nTEXT: If someone eats the tiger and the tiger eats the rabbit then the tiger visits the cat.\nFOL: all x. ((eatsTiger(x) & eatsRabbit(x)) -> visitsCat(x))\nTEXT: The cat eats the tiger.\nFOL: eatsTiger(cat)\n</EVALUATE>"
  ]
 },
 {
  "index": 112,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(dave)\n\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\n\nTEXT: If Dave is furry then Dave is rough.\nFOL: (Furry(dave) -> Rough(dave))\n\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\n\nTEXT: Dave is rough.\nFOL: Rough(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(dave)\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: (Furry(dave) -> Rough(dave))\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is rough.\nFOL: Rough(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(dave)\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\nTEXT: If Dave is furry then Dave is rough.\nFOL: Furry(dave) -> Rough(dave)\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\nTEXT: Dave is rough.\nFOL: Rough(dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(Dave)\n\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\n\nTEXT: If Dave is furry then Dave is rough.\nFOL: (Furry(Dave) -> Rough(Dave))\n\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\n\nTEXT: Dave is rough.\nFOL: Rough(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is white.\nFOL: White(Dave)\n\nTEXT: White things are blue.\nFOL: all x. (White(x) -> Blue(x))\n\nTEXT: If Dave is furry then Dave is rough.\nFOL: (Furry(Dave) -> Rough(Dave))\n\nTEXT: Blue things are furry.\nFOL: all x. (Blue(x) -> Furry(x))\n\nTEXT: Dave is rough.\nFOL: Rough(Dave)\n\n</EVALUATE>"
  ]
 },
 {
  "index": 113,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: Rough(Anne)\nTEXT: Bob is furry.\nFOL: Furry(Bob)\nTEXT: Gary is kind.\nFOL: Kind(Gary)\nTEXT: White people are rough.\nFOL: all x. (White(x) -> Rough(x))\nTEXT: All furry, kind people are white.\nFOL: all x. ((Furry(x) & Kind(x)) -> White(x))\nTEXT: All furry people are kind.\nFOL: all x. (Furry(x) -> Kind(x))\nTEXT: Gary is not furry.\nFOL: -Furry(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: Rough(Anne)\n\nTEXT: Bob is furry.\nFOL: Furry(Bob)\n\nTEXT: Gary is kind.\nFOL: Kind(Gary)\n\nTEXT: White people are rough.\nFOL: all x. (White(x) -> Rough(x))\n\nTEXT: All furry, kind people are white.\nFOL: all x. ((Furry(x) & Kind(x)) -> White(x))\n\nTEXT: All furry people are kind.\nFOL: all x. (Furry(x) -> Kind(x))\n\nTEXT: Gary is not furry.\nFOL: -Furry(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: Rough(anne)\n\nTEXT: Bob is furry.\nFOL: Furry(bob)\n\nTEXT: Gary is kind.\nFOL: Kind(gary)\n\nTEXT: White people are rough.\nFOL: all x. (White(x) -> Rough(x))\n\nTEXT: All furry, kind people are white.\nFOL: all x. ((Furry(x) & Kind(x)) -> White(x))\n\nTEXT: All furry people are kind.\nFOL: all x. (Furry(x) -> Kind(x))\n\nTEXT: Gary is not furry.\nFOL: -Furry(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: Rough(Anne)\n\nTEXT: Bob is furry.\nFOL: Furry(Bob)\n\nTEXT: Gary is kind.\nFOL: Kind(Gary)\n\nTEXT: White people are rough.\nFOL: all x. (White(x) -> Rough(x))\n\nTEXT: All furry, kind people are white.\nFOL: all x. (Furry(x) & Kind(x) -> White(x))\n\nTEXT: All furry people are kind.\nFOL: all x. (Furry(x) -> Kind(x))\n\nTEXT: Gary is not furry.\nFOL: -Furry(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is rough.\nFOL: Rough(Anne)\nTEXT: Bob is furry.\nFOL: Furry(Bob)\nTEXT: Gary is kind.\nFOL: Kind(Gary)\nTEXT: White people are rough.\nFOL: all x. (White(x) -> Rough(x))\nTEXT: All furry, kind people are white.\nFOL: all x. (Furry(x) & Kind(x) -> White(x))\nTEXT: All furry people are kind.\nFOL: all x. (Furry(x) -> Kind(x))\nTEXT: Gary is not furry.\nFOL: -Furry(Gary)\n</EVALUATE>"
  ]
 },
 {
  "index": 114,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(Anne)\nTEXT: Anne is cold.\nFOL: Cold(Anne)\nTEXT: Anne is nice.\nFOL: Nice(Anne)\nTEXT: Anne is smart.\nFOL: Smart(Anne)\nTEXT: Anne is white.\nFOL: White(Anne)\nTEXT: Bob is big.\nFOL: Big(Bob)\nTEXT: Bob is red.\nFOL: Red(Bob)\nTEXT: Bob is round.\nFOL: Round(Bob)\nTEXT: Bob is smart.\nFOL: Smart(Bob)\nTEXT: Fiona is nice.\nFOL: Nice(Fiona)\nTEXT: Fiona is round.\nFOL: Round(Fiona)\nTEXT: Fiona is white.\nFOL: White(Fiona)\nTEXT: All round, red people are cold.\nFOL: all x. (Round(x) & Red(x) -> Cold(x))\nTEXT: White, round people are cold.\nFOL: all x. (White(x) & Round(x) -> Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x. (Nice(x) & Round(x) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x. (Smart(x) & Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: Round(Anne) -> Cold(Anne)\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Bob is big.\nFOL: Big(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Anne(big)\nTEXT: Anne is cold.\nFOL: Anne(cold)\nTEXT: Anne is nice.\nFOL: Anne(nice)\nTEXT: Anne is smart.\nFOL: Anne(smart)\nTEXT: Anne is white.\nFOL: Anne(white)\nTEXT: Bob is big.\nFOL: Bob(big)\nTEXT: Bob is red.\nFOL: Bob(red)\nTEXT: Bob is round.\nFOL: Bob(round)\nTEXT: Bob is smart.\nFOL: Bob(smart)\nTEXT: Fiona is nice.\nFOL: Fiona(nice)\nTEXT: Fiona is round.\nFOL: Fiona(round)\nTEXT: Fiona is white.\nFOL: Fiona(white)\nTEXT: All round, red people are cold.\nFOL: all x. (Round(x) & Red(x) -> Cold(x))\nTEXT: White, round people are cold.\nFOL: all x. (White(x) & Round(x) -> Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x. (Nice(x) & Round(x) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x. (Smart(x) & Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: Anne(round) -> Anne(cold)\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Bob is big.\nFOL: Bob(big)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(Anne)\nTEXT: Anne is cold.\nFOL: Cold(Anne)\nTEXT: Anne is nice.\nFOL: Nice(Anne)\nTEXT: Anne is smart.\nFOL: Smart(Anne)\nTEXT: Anne is white.\nFOL: White(Anne)\nTEXT: Bob is big.\nFOL: Big(Bob)\nTEXT: Bob is red.\nFOL: Red(Bob)\nTEXT: Bob is round.\nFOL: Round(Bob)\nTEXT: Bob is smart.\nFOL: Smart(Bob)\nTEXT: Fiona is nice.\nFOL: Nice(Fiona)\nTEXT: Fiona is round.\nFOL: Round(Fiona)\nTEXT: Fiona is white.\nFOL: White(Fiona)\nTEXT: All round, red people are cold.\nFOL: all x y. (Round(x) & Red(y) -> Cold(x))\nTEXT: White, round people are cold.\nFOL: all x y. (White(x) & Round(y) -> Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x y. (Nice(x) & Round(y) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x y. (Smart(x) & Cold(y) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: Round(Anne) -> Cold(Anne)\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Bob is big.\nFOL: Big(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Anne(big)\nTEXT: Anne is cold.\nFOL: Anne(cold)\nTEXT: Anne is nice.\nFOL: Anne(nice)\nTEXT: Anne is smart.\nFOL: Anne(smart)\nTEXT: Anne is white.\nFOL: Anne(white)\nTEXT: Bob is big.\nFOL: Bob(big)\nTEXT: Bob is red.\nFOL: Bob(red)\nTEXT: Bob is round.\nFOL: Bob(round)\nTEXT: Bob is smart.\nFOL: Bob(smart)\nTEXT: Fiona is nice.\nFOL: Fiona(nice)\nTEXT: Fiona is round.\nFOL: Fiona(round)\nTEXT: Fiona is white.\nFOL: Fiona(white)\nTEXT: All round, red people are cold.\nFOL: all x y. (Round(x) & Red(y) -> Cold(x))\nTEXT: White, round people are cold.\nFOL: all x y. (White(x) & Round(y) -> Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x y. (Nice(x) & Round(y) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x y. (Smart(x) & Cold(y) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: Anne(round) -> Anne(cold)\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Bob is big.\nFOL: Bob(big)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(Anne)\nTEXT: Anne is cold.\nFOL: Cold(Anne)\nTEXT: Anne is nice.\nFOL: Nice(Anne)\nTEXT: Anne is smart.\nFOL: Smart(Anne)\nTEXT: Anne is white.\nFOL: White(Anne)\nTEXT: Bob is big.\nFOL: Big(Bob)\nTEXT: Bob is red.\nFOL: Red(Bob)\nTEXT: Bob is round.\nFOL: Round(Bob)\nTEXT: Bob is smart.\nFOL: Smart(Bob)\nTEXT: Fiona is nice.\nFOL: Nice(Fiona)\nTEXT: Fiona is round.\nFOL: Round(Fiona)\nTEXT: Fiona is white.\nFOL: White(Fiona)\nTEXT: All round, red people are cold.\nFOL: all x y. (Round(x) & Red(y) -> Cold(x))\nTEXT: White, round people are cold.\nFOL: all x. (White(x) & Round(x) -> Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x. (Nice(x) & Round(x) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x. (Smart(x) & Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: Round(Anne) -> Cold(Anne)\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Bob is big.\nFOL: Big(Bob)\n</EVALUATE>"
  ]
 },
 {
  "index": 115,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: Green(Anne)\nTEXT: Anne is smart.\nFOL: Smart(Anne)\nTEXT: Bob is green.\nFOL: Green(Bob)\nTEXT: Bob is round.\nFOL: Round(Bob)\nTEXT: Dave is red.\nFOL: Red(Dave)\nTEXT: Dave is smart.\nFOL: Smart(Dave)\nTEXT: Dave is young.\nFOL: Young(Dave)\nTEXT: If Dave is white then Dave is round.\nFOL: White(Dave) -> Round(Dave)\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: If Dave is smart then Dave is white.\nFOL: Smart(Dave) -> White(Dave)\nTEXT: If someone is red and not smart then they are not blue.\nFOL: Red(x) & -Smart(x) -> -Blue(x)\nTEXT: Round people are blue.\nFOL: all x. (Round(x) -> Blue(x))\nTEXT: If someone is red and not blue then they are green.\nFOL: Red(x) & -Blue(x) -> Green(x)\nTEXT: Anne is not smart.\nFOL: -Smart(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: Green(anne)\nTEXT: Anne is smart.\nFOL: Smart(anne)\nTEXT: Bob is green.\nFOL: Green(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Dave is red.\nFOL: Red(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Dave is young.\nFOL: Young(dave)\nTEXT: If Dave is white then Dave is round.\nFOL: White(dave) -> Round(dave)\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: If Dave is smart then Dave is white.\nFOL: Smart(dave) -> White(dave)\nTEXT: If someone is red and not smart then they are not blue.\nFOL: Red(x) & -Smart(x) -> -Blue(x)\nTEXT: Round people are blue.\nFOL: all x. (Round(x) -> Blue(x))\nTEXT: If someone is red and not blue then they are green.\nFOL: Red(x) & -Blue(x) -> Green(x)\nTEXT: Anne is not smart.\nFOL: -Smart(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: Green(Anne)\n\nTEXT: Anne is smart.\nFOL: Smart(Anne)\n\nTEXT: Bob is green.\nFOL: Green(Bob)\n\nTEXT: Bob is round.\nFOL: Round(Bob)\n\nTEXT: Dave is red.\nFOL: Red(Dave)\n\nTEXT: Dave is smart.\nFOL: Smart(Dave)\n\nTEXT: Dave is young.\nFOL: Young(Dave)\n\nTEXT: If Dave is white then Dave is round.\nFOL: White(Dave) -> Round(Dave)\n\nTEXT: White people are round.\nFOL: All x. (White(x) -> Round(x))\n\nTEXT: If Dave is smart then Dave is white.\nFOL: Smart(Dave) -> White(Dave)\n\nTEXT: If someone is red and not smart then they are not blue.\nFOL: Red(x) & -Smart(x) -> -Blue(x)\n\nTEXT: Round people are blue.\nFOL: All x. (Round(x) -> Blue(x))\n\nTEXT: If someone is red and not blue then they are green.\nFOL: Red(x) & -Blue(x) -> Green(x)\n\nTEXT: Anne is not smart.\nFOL: -Smart(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: Green(Anne)\nTEXT: Anne is smart.\nFOL: Smart(Anne)\nTEXT: Bob is green.\nFOL: Green(Bob)\nTEXT: Bob is round.\nFOL: Round(Bob)\nTEXT: Dave is red.\nFOL: Red(Dave)\nTEXT: Dave is smart.\nFOL: Smart(Dave)\nTEXT: Dave is young.\nFOL: Young(Dave)\nTEXT: If Dave is white then Dave is round.\nFOL: White(Dave) -> Round(Dave)\nTEXT: White people are round.\nFOL: All x. (White(x) -> Round(x))\nTEXT: If Dave is smart then Dave is white.\nFOL: Smart(Dave) -> White(Dave)\nTEXT: If someone is red and not smart then they are not blue.\nFOL: Red(x) & -Smart(x) -> -Blue(x)\nTEXT: Round people are blue.\nFOL: All x. (Round(x) -> Blue(x))\nTEXT: If someone is red and not blue then they are green.\nFOL: Red(x) & -Blue(x) -> Green(x)\nTEXT: Anne is not smart.\nFOL: -Smart(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is green.\nFOL: Green(Anne)\nTEXT: Anne is smart.\nFOL: Smart(Anne)\nTEXT: Bob is green.\nFOL: Green(bob)\nTEXT: Bob is round.\nFOL: Round(bob)\nTEXT: Dave is red.\nFOL: Red(dave)\nTEXT: Dave is smart.\nFOL: Smart(dave)\nTEXT: Dave is young.\nFOL: Young(dave)\nTEXT: If Dave is white then Dave is round.\nFOL: White(dave) -> Round(dave)\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: If Dave is smart then Dave is white.\nFOL: Smart(dave) -> White(dave)\nTEXT: If someone is red and not smart then they are not blue.\nFOL: Red(x) & -Smart(x) -> -Blue(x)\nTEXT: Round people are blue.\nFOL: all x. (Round(x) -> Blue(x))\nTEXT: If someone is red and not blue then they are green.\nFOL: Red(x) & -Blue(x) -> Green(x)\nTEXT: Anne is not smart.\nFOL: -Smart(Anne)\n</EVALUATE>"
  ]
 },
 {
  "index": 116,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(Bob)\nTEXT: Bob is young.\nFOL: Young(Bob)\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(Charlie)\nTEXT: Charlie is rough.\nFOL: Rough(Charlie)\nTEXT: Charlie is round.\nFOL: Round(Charlie)\nTEXT: Charlie is young.\nFOL: Young(Charlie)\nTEXT: Gary is rough.\nFOL: Rough(Gary)\nTEXT: Gary is not white.\nFOL: -White(Gary)\nTEXT: Gary is young.\nFOL: Young(Gary)\nTEXT: If someone is round and not white then they are not blue.\nFOL: all x. ((Round(x) & -White(x)) -> -Blue(x))\nTEXT: If someone is white and red then they are blue.\nFOL: all x. ((White(x) & Red(x)) -> Blue(x))\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: All round people are red.\nFOL: all x. (Round(x) -> Red(x))\nTEXT: If someone is red then they are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\nTEXT: If someone is rough and not red then they are young.\nFOL: all x. ((Rough(x) & -Red(x)) -> Young(x))\nTEXT: If someone is round and not blue then they are young.\nFOL: all x. ((Round(x) & -Blue(x)) -> Young(x))\nTEXT: Blue, white people are young.\nFOL: all x. (Blue(x) & White(x) -> Young(x))\nTEXT: Gary is not red.\nFOL: -Red(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\nTEXT: Charlie is rough.\nFOL: Rough(charlie)\nTEXT: Charlie is round.\nFOL: Round(charlie)\nTEXT: Charlie is young.\nFOL: Young(charlie)\nTEXT: Gary is rough.\nFOL: Rough(gary)\nTEXT: Gary is not white.\nFOL: -White(gary)\nTEXT: Gary is young.\nFOL: Young(gary)\nTEXT: If someone is round and not white then they are not blue.\nFOL: all x. ((Round(x) & -White(x)) -> -Blue(x))\nTEXT: If someone is white and red then they are blue.\nFOL: all x. ((White(x) & Red(x)) -> Blue(x))\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: All round people are red.\nFOL: all x. (Round(x) -> Red(x))\nTEXT: If someone is red then they are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\nTEXT: If someone is rough and not red then they are young.\nFOL: all x. ((Rough(x) & -Red(x)) -> Young(x))\nTEXT: If someone is round and not blue then they are young.\nFOL: all x. ((Round(x) & -Blue(x)) -> Young(x))\nTEXT: Blue, white people are young.\nFOL: all x. (Blue(x) & White(x) -> Young(x))\nTEXT: Gary is not red.\nFOL: -Red(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(Bob)\nTEXT: Bob is young.\nFOL: Young(Bob)\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(Charlie)\nTEXT: Charlie is rough.\nFOL: Rough(Charlie)\nTEXT: Charlie is round.\nFOL: Round(Charlie)\nTEXT: Charlie is young.\nFOL: Young(Charlie)\nTEXT: Gary is rough.\nFOL: Rough(Gary)\nTEXT: Gary is not white.\nFOL: -White(Gary)\nTEXT: Gary is young.\nFOL: Young(Gary)\nTEXT: If someone is round and not white then they are not blue.\nFOL: all x. ((Round(x) & -White(x)) -> -Blue(x))\nTEXT: If someone is white and red then they are blue.\nFOL: all x. (White(x) & Red(x) -> Blue(x))\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: All round people are red.\nFOL: all x. (Round(x) -> Red(x))\nTEXT: If someone is red then they are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\nTEXT: If someone is rough and not red then they are young.\nFOL: all x. ((Rough(x) & -Red(x)) -> Young(x))\nTEXT: If someone is round and not blue then they are young.\nFOL: all x. ((Round(x) & -Blue(x)) -> Young(x))\nTEXT: Blue, white people are young.\nFOL: all x. (Blue(x) & White(x) -> Young(x))\nTEXT: Gary is not red.\nFOL: -Red(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\nTEXT: Charlie is rough.\nFOL: Rough(charlie)\nTEXT: Charlie is round.\nFOL: Round(charlie)\nTEXT: Charlie is young.\nFOL: Young(charlie)\nTEXT: Gary is rough.\nFOL: Rough(gary)\nTEXT: Gary is not white.\nFOL: -White(gary)\nTEXT: Gary is young.\nFOL: Young(gary)\nTEXT: If someone is round and not white then they are not blue.\nFOL: all x. ((Round(x) & -White(x)) -> -Blue(x))\nTEXT: If someone is white and red then they are blue.\nFOL: all x. (White(x) & Red(x) -> Blue(x))\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: All round people are red.\nFOL: all x. (Round(x) -> Red(x))\nTEXT: If someone is red then they are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\nTEXT: If someone is rough and not red then they are young.\nFOL: all x. ((Rough(x) & -Red(x)) -> Young(x))\nTEXT: If someone is round and not blue then they are young.\nFOL: all x. ((Round(x) & -Blue(x)) -> Young(x))\nTEXT: Blue, white people are young.\nFOL: all x. (Blue(x) & White(x) -> Young(x))\nTEXT: Gary is not red.\nFOL: -Red(gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Bob(Blue)\nTEXT: Bob is young.\nFOL: Bob(Young)\nTEXT: Charlie is blue.\nFOL: Charlie(Blue)\nTEXT: Charlie is quiet.\nFOL: Charlie(Quiet)\nTEXT: Charlie is rough.\nFOL: Charlie(Rough)\nTEXT: Charlie is round.\nFOL: Charlie(Round)\nTEXT: Charlie is young.\nFOL: Charlie(Young)\nTEXT: Gary is rough.\nFOL: Gary(Rough)\nTEXT: Gary is not white.\nFOL: -Gary(White)\nTEXT: Gary is young.\nFOL: Gary(Young)\nTEXT: If someone is round and not white then they are not blue.\nFOL: all x. ((Round(x) & -White(x)) -> -Blue(x))\nTEXT: If someone is white and red then they are blue.\nFOL: all x. ((White(x) & Red(x)) -> Blue(x))\nTEXT: Rough people are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: All round people are red.\nFOL: all x. (Round(x) -> Red(x))\nTEXT: If someone is red then they are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\nTEXT: If someone is rough and not red then they are young.\nFOL: all x. ((Rough(x) & -Red(x)) -> Young(x))\nTEXT: If someone is round and not blue then they are young.\nFOL: all x. ((Round(x) & -Blue(x)) -> Young(x))\nTEXT: Blue, white people are young.\nFOL: all x. (Blue(x) & White(x) -> Young(x))\nTEXT: Gary is not red.\nFOL: -Gary(Red)\n</EVALUATE>"
  ]
 },
 {
  "index": 117,
  "responses": [
   "<EVALUATE>\nTEXT: The bear is big.\nFOL: Bear(bear) -> Big(bear)\nTEXT: The bear is blue.\nFOL: Bear(bear) -> Blue(bear)\nTEXT: The bear is nice.\nFOL: Bear(bear) -> Nice(bear)\nTEXT: The bear is red.\nFOL: Bear(bear) -> Red(bear)\nTEXT: The bear visits the lion.\nFOL: Bear(bear) & Lion(lion) -> Visit(bear, lion)\nTEXT: The lion chases the bear.\nFOL: Lion(lion) & Bear(bear) -> Chase(lion, bear)\nTEXT: The lion is big.\nFOL: Lion(lion) -> Big(lion)\nTEXT: The lion is not green.\nFOL: Lion(lion) -> -Green(lion)\nTEXT: The lion sees the bear.\nFOL: Lion(lion) & Bear(bear) -> See(lion, bear)\nTEXT: The lion visits the bear.\nFOL: Lion(lion) & Bear(bear) -> Visit(lion, bear)\nTEXT: If the lion sees the bear then the bear is blue.\nFOL: Lion(lion) & Bear(bear) & See(lion, bear) -> Blue(bear)\nTEXT: If something chases the bear then the bear is blue.\nFOL: exists x. (Chase(x, bear) -> Blue(bear))\nTEXT: If the bear chases the lion then the lion is big.\nFOL: Bear(bear) & Lion(lion) & Chase(bear, lion) -> Big(lion)\nTEXT: If something chases the lion then it sees the lion.\nFOL: exists x. (Chase(x, lion) -> See(x, lion))\nTEXT: If something visits the lion and the lion does not chase the bear then the bear chases the lion.\nFOL: exists x. (Visit(x, lion) & -Chase(lion, bear) -> Chase(bear, lion))\nTEXT: If something visits the bear then the bear does not chase the lion.\nFOL: exists x. (Visit(x, bear) -> -Chase(bear, lion))\nTEXT: If something sees the bear and the bear does not chase the lion then the bear does not see the lion.\nFOL: exists x. (See(x, bear) & -Chase(bear, lion) -> -See(x, lion))\nTEXT: If something is red and it does not see the lion then the lion is blue.\nFOL: exists x. (Red(x) & -See(x, lion) -> Blue(lion))\nTEXT: The bear sees the bear.\nFOL: Bear(bear) & See(bear, bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is big.\nFOL: Bear(bear) -> Big(bear)\nTEXT: The bear is blue.\nFOL: Bear(bear) -> Blue(bear)\nTEXT: The bear is nice.\nFOL: Bear(bear) -> Nice(bear)\nTEXT: The bear is red.\nFOL: Bear(bear) -> Red(bear)\nTEXT: The bear visits the lion.\nFOL: Bear(bear) & Lion(lion) -> Visit(bear, lion)\nTEXT: The lion chases the bear.\nFOL: Lion(lion) & Bear(bear) -> Chase(lion, bear)\nTEXT: The lion is big.\nFOL: Lion(lion) -> Big(lion)\nTEXT: The lion is not green.\nFOL: Lion(lion) -> -Green(lion)\nTEXT: The lion sees the bear.\nFOL: Lion(lion) & Bear(bear) -> See(lion, bear)\nTEXT: The lion visits the bear.\nFOL: Lion(lion) & Bear(bear) -> Visit(lion, bear)\nTEXT: If the lion sees the bear then the bear is blue.\nFOL: See(lion, bear) -> Blue(bear)\nTEXT: If something chases the bear then the bear is blue.\nFOL: Chase(x, bear) -> Blue(bear)\nTEXT: If the bear chases the lion then the lion is big.\nFOL: Bear(bear) & Chase(bear, lion) -> Big(lion)\nTEXT: If something chases the lion then it sees the lion.\nFOL: Chase(x, lion) -> See(x, lion)\nTEXT: If something visits the lion and the lion does not chase the bear then the bear chases the lion.\nFOL: Visit(x, lion) & -Chase(lion, bear) -> Chase(bear, lion)\nTEXT: If something visits the bear then the bear does not chase the lion.\nFOL: Visit(x, bear) -> -Chase(bear, lion)\nTEXT: If something sees the bear and the bear does not chase the lion then the bear does not see the lion.\nFOL: See(x, bear) & -Chase(bear, lion) -> -See(x, lion)\nTEXT: If something is red and it does not see the lion then the lion is blue.\nFOL: Red(x) & -See(x, lion) -> Blue(lion)\nTEXT: The bear sees the bear.\nFOL: See(bear, bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is big.\nFOL: Bear(bear) -> Big(bear)\nTEXT: The bear is blue.\nFOL: Bear(bear) -> Blue(bear)\nTEXT: The bear is nice.\nFOL: Bear(bear) -> Nice(bear)\nTEXT: The bear is red.\nFOL: Bear(bear) -> Red(bear)\nTEXT: The bear visits the lion.\nFOL: Bear(bear) & Lion(lion) -> Visit(bear, lion)\nTEXT: The lion chases the bear.\nFOL: Lion(lion) & Bear(bear) -> Chase(lion, bear)\nTEXT: The lion is big.\nFOL: Lion(lion) -> Big(lion)\nTEXT: The lion is not green.\nFOL: Lion(lion) -> -Green(lion)\nTEXT: The lion sees the bear.\nFOL: Lion(lion) & Bear(bear) -> See(lion, bear)\nTEXT: The lion visits the bear.\nFOL: Lion(lion) & Bear(bear) -> Visit(lion, bear)\nTEXT: If the lion sees the bear then the bear is blue.\nFOL: See(lion, bear) -> Blue(bear)\nTEXT: If something chases the bear then the bear is blue.\nFOL: Chase(x, bear) -> Blue(bear)\nTEXT: If the bear chases the lion then the lion is big.\nFOL: Bear(bear) & Chase(bear, lion) -> Big(lion)\nTEXT: If something chases the lion then it sees the lion.\nFOL: Chase(x, lion) -> See(x, lion)\nTEXT: If something visits the lion and the lion does not chase the bear then the bear chases the lion.\nFOL: Visit(x, lion) & -Chase(lion, bear) -> Chase(bear, lion)\nTEXT: If something visits the bear then the bear does not chase the lion.\nFOL: Visit(x, bear) -> -Chase(bear, lion)\nTEXT: If something sees the bear and the bear does not chase the lion then the bear does not see the lion.\nFOL: See(x, bear) & -Chase(bear, lion) -> -See(x, lion)\nTEXT: If something is red and it does not see the lion then the lion is blue.\nFOL: Red(x) & -See(x, lion) -> Blue(lion)\nTEXT: The bear sees the bear.\nFOL: Bear(bear) & See(bear, bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is big.\nFOL: Bear(bear) -> Big(bear)\nTEXT: The bear is blue.\nFOL: Bear(bear) -> Blue(bear)\nTEXT: The bear is nice.\nFOL: Bear(bear) -> Nice(bear)\nTEXT: The bear is red.\nFOL: Bear(bear) -> Red(bear)\nTEXT: The bear visits the lion.\nFOL: Bear(bear) & Lion(lion) -> Visit(bear, lion)\nTEXT: The lion chases the bear.\nFOL: Lion(lion) & Bear(bear) -> Chase(lion, bear)\nTEXT: The lion is big.\nFOL: Lion(lion) -> Big(lion)\nTEXT: The lion is not green.\nFOL: Lion(lion) -> -Green(lion)\nTEXT: The lion sees the bear.\nFOL: Lion(lion) & Bear(bear) -> See(lion, bear)\nTEXT: The lion visits the bear.\nFOL: Lion(lion) & Bear(bear) -> Visit(lion, bear)\nTEXT: If the lion sees the bear then the bear is blue.\nFOL: Lion(lion) & Bear(bear) & See(lion, bear) -> Blue(bear)\nTEXT: If something chases the bear then the bear is blue.\nFOL: exists x. (Chase(x, bear) -> Blue(bear))\nTEXT: If the bear chases the lion then the lion is big.\nFOL: Bear(bear) & Lion(lion) & Chase(bear, lion) -> Big(lion)\nTEXT: If something chases the lion then it sees the lion.\nFOL: exists x. (Chase(x, lion) -> See(x, lion))\nTEXT: If something visits the lion and the lion does not chase the bear then the bear chases the lion.\nFOL: exists x. (Visit(x, lion) & -Chase(lion, bear) -> Chase(bear, lion))\nTEXT: If something visits the bear then the bear does not chase the lion.\nFOL: exists x. (Visit(x, bear) -> -Chase(bear, lion))\nTEXT: If something sees the bear and the bear does not chase the lion then the bear does not see the lion.\nFOL: exists x. (See(x, bear) & -Chase(bear, lion) -> -See(x, lion))\nTEXT: If something is red and it does not see the lion then the lion is blue.\nFOL: exists x. (Red(x) & -See(x, lion) -> Blue(lion))\nTEXT: The bear sees the bear.\nFOL: Bear(bear) -> See(bear, bear)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear is big.\nFOL: Bear(bear) -> Big(bear)\nTEXT: The bear is blue.\nFOL: Bear(bear) -> Blue(bear)\nTEXT: The bear is nice.\nFOL: Bear(bear) -> Nice(bear)\nTEXT: The bear is red.\nFOL: Bear(bear) -> Red(bear)\nTEXT: The bear visits the lion.\nFOL: Bear(bear) & Lion(lion) -> Visit(bear, lion)\nTEXT: The lion chases the bear.\nFOL: Lion(lion) & Bear(bear) -> Chase(lion, bear)\nTEXT: The lion is big.\nFOL: Lion(lion) -> Big(lion)\nTEXT: The lion is not green.\nFOL: Lion(lion) -> -Green(lion)\nTEXT: The lion sees the bear.\nFOL: Lion(lion) & Bear(bear) -> See(lion, bear)\nTEXT: The lion visits the bear.\nFOL: Lion(lion) & Bear(bear) -> Visit(lion, bear)\nTEXT: If the lion sees the bear then the bear is blue.\nFOL: See(lion, bear) -> Blue(bear)\nTEXT: If something chases the bear then the bear is blue.\nFOL: Chase(x, bear) -> Blue(bear)\nTEXT: If the bear chases the lion then the lion is big.\nFOL: Chase(bear, lion) -> Big(lion)\nTEXT: If something chases the lion then it sees the lion.\nFOL: Chase(x, lion) -> See(x, lion)\nTEXT: If something visits the lion and the lion does not chase the bear then the bear chases the lion.\nFOL: Visit(x, lion) & -Chase(lion, bear) -> Chase(bear, lion)\nTEXT: If something visits the bear then the bear does not chase the lion.\nFOL: Visit(x, bear) -> -Chase(bear, lion)\nTEXT: If something sees the bear and the bear does not chase the lion then the bear does not see the lion.\nFOL: See(x, bear) & -Chase(bear, lion) -> -See(x, lion)\nTEXT: If something is red and it does not see the lion then the lion is blue.\nFOL: Red(x) & -See(x, lion) -> Blue(lion)\nTEXT: The bear sees the bear.\nFOL: Bear(bear) & See(bear, bear)\n</EVALUATE>"
  ]
 },
 {
  "index": 118,
  "responses": [
   "<EVALUATE>\nTEXT: Alan may be young but he is nice, wears green shoes and is cold.\nFOL: Young(Alan) & Nice(Alan) & GreenShoes(Alan) & Cold(Alan)\nTEXT: Bob is green with envy, and rough with his kids, but overall is just a nice, round individual.\nFOL: GreenWithEnvy(Bob) & RoughWithKids(Bob) & Nice(Bob) & Round(Bob)\nTEXT: That guy Dave sure is nice.\nFOL: Nice(Dave)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: GreenToJob(Fred) & Cold(Fred) & Blue(Fred)\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) -> Rough(x))\nTEXT: If a person has a rough and round shape and is nice, then they will be big too.\nFOL: all x. (Rough(x) & Round(x) & Nice(x) -> Big(x))\nTEXT: Truth be told, every big, rough person out there that is green, will also be colored blue.\nFOL: all x. (Big(x) & Rough(x) & Green(x) -> Blue(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. (Blue(x) & Green(x) -> Red(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Kind(x) & Round(x) -> Big(x))\nTEXT: If a person is blue and red and big, then that person is cold.\nFOL: all x. ((Blue(x) & Red(x) & Big(x)) -> Cold(x))\nTEXT: Bob is blue.\nFOL: Blue(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan may be young but he is nice, wears green shoes and is cold.\nFOL: (Young(Alan) & Nice(Alan) & GreenShoes(Alan) & Cold(Alan))\nTEXT: Bob is green with envy, and rough with his kids, but overall is just a nice, round individual.\nFOL: (GreenWithEnvy(Bob) & RoughWithKids(Bob) & Nice(Bob) & Round(Bob))\nTEXT: That guy Dave sure is nice.\nFOL: Nice(Dave)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: (GreenToJob(Fred) & Cold(Fred) & Blue(Fred))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. (Green(x) & Young(x) & Round(x) -> Rough(x))\nTEXT: If a person has a rough and round shape and is nice, then they will be big too.\nFOL: all x. (Rough(x) & Round(x) & Nice(x) -> Big(x))\nTEXT: Truth be told, every big, rough person out there that is green, will also be colored blue.\nFOL: all x. (Big(x) & Rough(x) & Green(x) -> Blue(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. (Blue(x) & Green(x) -> Red(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Kind(x) & Round(x) -> Big(x))\nTEXT: If a person is blue and red and big, then that person is cold.\nFOL: all x. ((Blue(x) & Red(x) & Big(x)) -> Cold(x))\nTEXT: Bob is blue.\nFOL: Blue(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan may be young but he is nice, wears green shoes and is cold.\nFOL: Young(Alan) & Nice(Alan) & GreenShoes(Alan) & Cold(Alan)\nTEXT: Bob is green with envy, and rough with his kids, but overall is just a nice, round individual.\nFOL: GreenWithEnvy(Bob) & RoughWithKids(Bob) & Nice(Bob) & Round(Bob)\nTEXT: That guy Dave sure is nice.\nFOL: Nice(Dave)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: GreenToJob(Fred) & Cold(Fred) & Blue(Fred)\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. ((Green(x) & Young(x) & Round(x)) -> Rough(x))\nTEXT: If a person has a rough and round shape and is nice, then they will be big too.\nFOL: all x. ((Rough(x) & Round(x) & Nice(x)) -> Big(x))\nTEXT: Truth be told, every big, rough person out there that is green, will also be colored blue.\nFOL: all x. (Big(x) & Rough(x) & Green(x) -> Blue(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. (Blue(x) & Green(x) -> Red(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Kind(x) & Round(x) -> Big(x))\nTEXT: If a person is blue and red and big, then that person is cold.\nFOL: all x. ((Blue(x) & Red(x) & Big(x)) -> Cold(x))\nTEXT: Bob is blue.\nFOL: Blue(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan may be young but he is nice, wears green shoes and is cold.\nFOL: (Young(Alan) & Nice(Alan) & GreenShoes(Alan) & Cold(Alan))\nTEXT: Bob is green with envy, and rough with his kids, but overall is just a nice, round individual.\nFOL: (GreenWithEnvy(Bob) & RoughWithKids(Bob) & Nice(Bob) & Round(Bob))\nTEXT: That guy Dave sure is nice.\nFOL: Nice(Dave)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: (GreenToJob(Fred) & Cold(Fred) & Blue(Fred))\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: (Green(x) & Young(x) & Round(x) -> Rough(x))\nTEXT: If a person has a rough and round shape and is nice, then they will be big too.\nFOL: all x. (Rough(x) & Round(x) & Nice(x) -> Big(x))\nTEXT: Truth be told, every big, rough person out there that is green, will also be colored blue.\nFOL: all x. (Big(x) & Rough(x) & Green(x) -> Blue(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. (Blue(x) & Green(x) -> Red(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Kind(x) & Round(x) -> Big(x))\nTEXT: If a person is blue and red and big, then that person is cold.\nFOL: all x. ((Blue(x) & Red(x) & Big(x)) -> Cold(x))\nTEXT: Bob is blue.\nFOL: Blue(Bob)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan may be young but he is nice, wears green shoes and is cold.\nFOL: Young(Alan) & Nice(Alan) & GreenShoes(Alan) & Cold(Alan)\nTEXT: Bob is green with envy, and rough with his kids, but overall is just a nice, round individual.\nFOL: GreenWithEnvy(Bob) & RoughWithKids(Bob) & Nice(Bob) & Round(Bob)\nTEXT: That guy Dave sure is nice.\nFOL: Nice(Dave)\nTEXT: Fred is green to the job, which is why he turned blue from being so cold.\nFOL: GreenToJob(Fred) & Cold(Fred) & Blue(Fred)\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: (Green(x) & Young(x) & Round(x)) -> Rough(x)\nTEXT: If a person has a rough and round shape and is nice, then they will be big too.\nFOL: all x. (Rough(x) & Round(x) & Nice(x) -> Big(x))\nTEXT: Truth be told, every big, rough person out there that is green, will also be colored blue.\nFOL: all x. (Big(x) & Rough(x) & Green(x) -> Blue(x))\nTEXT: People who are feeling blue and green are said to be red.\nFOL: all x. (Blue(x) & Green(x) -> Red(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Kind(x) & Round(x) -> Big(x))\nTEXT: If a person is blue and red and big, then that person is cold.\nFOL: all x. ((Blue(x) & Red(x) & Big(x)) -> Cold(x))\nTEXT: Bob is blue.\nFOL: Blue(Bob)\n</EVALUATE>"
  ]
 },
 {
  "index": 119,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(Bob)\n\nTEXT: Charlie is cold.\nFOL: Cold(Charlie)\n\nTEXT: Gary is quiet.\nFOL: Quiet(Gary)\n\nTEXT: Harry is smart.\nFOL: Smart(Harry)\n\nTEXT: Cold, quiet people are smart.\nFOL: all x. (Cold(x) & Quiet(x) -> Smart(x))\n\nTEXT: All smart people are white.\nFOL: all x. (Smart(x) -> White(x))\n\nTEXT: If Charlie is cold then Charlie is quiet.\nFOL: Cold(Charlie) -> Quiet(Charlie)\n\nTEXT: Charlie is not white.\nFOL: -White(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(Bob)\nTEXT: Charlie is cold.\nFOL: Cold(Charlie)\nTEXT: Gary is quiet.\nFOL: Quiet(Gary)\nTEXT: Harry is smart.\nFOL: Smart(Harry)\nTEXT: Cold, quiet people are smart.\nFOL: all x. (Cold(x) & Quiet(x) -> Smart(x))\nTEXT: All smart people are white.\nFOL: all x. (Smart(x) -> White(x))\nTEXT: If Charlie is cold then Charlie is quiet.\nFOL: Cold(Charlie) -> Quiet(Charlie)\nTEXT: Charlie is not white.\nFOL: -White(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(bob)\n\nTEXT: Charlie is cold.\nFOL: Cold(charlie)\n\nTEXT: Gary is quiet.\nFOL: Quiet(gary)\n\nTEXT: Harry is smart.\nFOL: Smart(harry)\n\nTEXT: Cold, quiet people are smart.\nFOL: all x. (Cold(x) & Quiet(x) -> Smart(x))\n\nTEXT: All smart people are white.\nFOL: all x. (Smart(x) -> White(x))\n\nTEXT: If Charlie is cold then Charlie is quiet.\nFOL: Cold(charlie) -> Quiet(charlie)\n\nTEXT: Charlie is not white.\nFOL: -White(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Charlie is cold.\nFOL: Cold(charlie)\nTEXT: Gary is quiet.\nFOL: Quiet(gary)\nTEXT: Harry is smart.\nFOL: Smart(harry)\nTEXT: Cold, quiet people are smart.\nFOL: all x. (Cold(x) & Quiet(x) -> Smart(x))\nTEXT: All smart people are white.\nFOL: all x. (Smart(x) -> White(x))\nTEXT: If Charlie is cold then Charlie is quiet.\nFOL: Cold(charlie) -> Quiet(charlie)\nTEXT: Charlie is not white.\nFOL: -White(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(Bob)\n\nTEXT: Charlie is cold.\nFOL: Cold(Charlie)\n\nTEXT: Gary is quiet.\nFOL: Quiet(Gary)\n\nTEXT: Harry is smart.\nFOL: Smart(Harry)\n\nTEXT: Cold, quiet people are smart.\nFOL: all x y. (Cold(x) & Quiet(y) -> Smart(x))\n\nTEXT: All smart people are white.\nFOL: all x. (Smart(x) -> White(x))\n\nTEXT: If Charlie is cold then Charlie is quiet.\nFOL: Cold(Charlie) -> Quiet(Charlie)\n\nTEXT: Charlie is not white.\nFOL: -White(Charlie)\n</EVALUATE>"
  ]
 },
 {
  "index": 120,
  "responses": [
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: CatIsRough(cat)\nTEXT: The cat is round.\nFOL: CatIsRound(cat)\nTEXT: The dog does not chase the lion.\nFOL: -DogChasesLion(dog, lion)\nTEXT: The dog eats the cat.\nFOL: DogEatsCat(dog, cat)\nTEXT: The dog does not like the cat.\nFOL: -DogLikesCat(dog, cat)\nTEXT: The lion chases the dog.\nFOL: LionChasesDog(lion, dog)\nTEXT: The lion is green.\nFOL: LionIsGreen(lion)\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x. ((Green(x) & LionLikes(x)) -> DogEats(x))\nTEXT: If someone is round then they chase the lion.\nFOL: all x. (Round(x) -> LionChases(x))\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x. (LionChases(x) -> DogLikes(x))\nTEXT: If someone eats the dog then they are not round.\nFOL: all x. (DogEats(x) -> -Round(x))\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: -DogLikesLion(dog, lion) -> LionIsRed(lion)\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x. ((LionLikes(x) & LionLikes(cat)) -> DogChases(x))\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x. ((LionLikes(x) & LionIsGreen(lion)) -> LionIsRound(lion))\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x. (DogLikes(x) -> LionEats(x))\nTEXT: The cat does not eat the dog.\nFOL: -CatEatsDog(cat, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: CatIsRough(cat)\nTEXT: The cat is round.\nFOL: CatIsRound(cat)\nTEXT: The dog does not chase the lion.\nFOL: -DogChasesLion(dog, lion)\nTEXT: The dog eats the cat.\nFOL: DogEatsCat(dog, cat)\nTEXT: The dog does not like the cat.\nFOL: -DogLikesCat(dog, cat)\nTEXT: The lion chases the dog.\nFOL: LionChasesDog(lion, dog)\nTEXT: The lion is green.\nFOL: LionIsGreen(lion)\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x. ((Green(x) & LionLikes(x)) -> DogEats(x))\nTEXT: If someone is round then they chase the lion.\nFOL: all x. (Round(x) -> LionChases(x))\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x. (LionChases(x) -> DogLikes(x))\nTEXT: If someone eats the dog then they are not round.\nFOL: all x. (DogEats(x) -> -Round(x))\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: -DogLikesLion(dog, lion) -> LionIsRed(lion)\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x. ((LionLikes(x) & LionLikes(cat)) -> DogChases(x))\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x. ((LionLikes(x) & LionIsGreen(lion)) -> LionIsRound(x))\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x. (DogLikes(x) -> LionEats(x))\nTEXT: The cat does not eat the dog.\nFOL: -CatEatsDog(cat, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: CatIsRough(cat)\nTEXT: The cat is round.\nFOL: CatIsRound(cat)\nTEXT: The dog does not chase the lion.\nFOL: -DogChasesLion(dog, lion)\nTEXT: The dog eats the cat.\nFOL: DogEatsCat(dog, cat)\nTEXT: The dog does not like the cat.\nFOL: -DogLikesCat(dog, cat)\nTEXT: The lion chases the dog.\nFOL: DogChasesLion(lion, dog)\nTEXT: The lion is green.\nFOL: LionIsGreen(lion)\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x. ((Green(x) & LionLikes(x)) -> DogEats(x))\nTEXT: If someone is round then they chase the lion.\nFOL: all x. (CatIsRound(x) -> DogChasesLion(x))\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x. (DogChasesLion(x) -> DogLikes(x))\nTEXT: If someone eats the dog then they are not round.\nFOL: all x. (DogEats(x) -> -CatIsRound(x))\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: -DogLikesLion(dog, lion) -> LionIsRed(lion)\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x. ((LionLikes(x) & LionLikes(cat)) -> DogChases(x))\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x. ((LionLikes(x) & LionIsGreen(lion)) -> CatIsRound(x))\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x. (DogLikes(x) -> DogEats(lion))\nTEXT: The cat does not eat the dog.\nFOL: -DogEats(cat, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: CatIsRough(cat)\nTEXT: The cat is round.\nFOL: CatIsRound(cat)\nTEXT: The dog does not chase the lion.\nFOL: -DogChasesLion(dog, lion)\nTEXT: The dog eats the cat.\nFOL: DogEatsCat(dog, cat)\nTEXT: The dog does not like the cat.\nFOL: -DogLikesCat(dog, cat)\nTEXT: The lion chases the dog.\nFOL: LionChasesDog(lion, dog)\nTEXT: The lion is green.\nFOL: LionIsGreen(lion)\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x. ((Green(x) & LionLikes(x)) -> DogEats(x))\nTEXT: If someone is round then they chase the lion.\nFOL: all x. (Round(x) -> LionChases(x))\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x. (LionChases(x) -> DogLikes(x))\nTEXT: If someone eats the dog then they are not round.\nFOL: all x. (DogEats(x) -> -Round(x))\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: -DogLikesLion(dog, lion) -> LionIsRed(lion)\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x. ((LionLikes(x) & LionLikes(cat)) -> DogChases(x))\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x. ((LionLikes(x) & LionIsGreen(lion)) -> LionIsRound(lion))\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x. (DogLikes(x) -> LionEats(x))\nTEXT: The cat does not eat the dog.\nFOL: -DogEatsCat(cat, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: CatIsRough(cat)\nTEXT: The cat is round.\nFOL: CatIsRound(cat)\nTEXT: The dog does not chase the lion.\nFOL: -DogChasesLion(dog, lion)\nTEXT: The dog eats the cat.\nFOL: DogEatsCat(dog, cat)\nTEXT: The dog does not like the cat.\nFOL: -DogLikesCat(dog, cat)\nTEXT: The lion chases the dog.\nFOL: LionChasesDog(lion, dog)\nTEXT: The lion is green.\nFOL: LionIsGreen(lion)\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x. ((Green(x) & LionLikes(x)) -> DogEats(x))\nTEXT: If someone is round then they chase the lion.\nFOL: all x. (Round(x) -> LionChases(x))\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x. (LionChases(x) -> DogLikes(x))\nTEXT: If someone eats the dog then they are not round.\nFOL: all x. (DogEats(x) -> -Round(x))\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: -DogLikesLion(dog, lion) -> LionIsRed(lion)\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x. ((LionLikes(x) & LionLikes(cat)) -> DogChases(x))\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x. ((LionLikes(x) & LionIsGreen(lion)) -> LionIsRound(lion))\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x. (DogLikes(x) -> LionEats(x))\nTEXT: The cat does not eat the dog.\nFOL: -DogEats(cat, dog)\n</EVALUATE>"
  ]
 },
 {
  "index": 121,
  "responses": [
   "<EVALUATE>\nTEXT: The mouse is round.\nFOL: Mouse(mouse) -> Round(mouse)\nTEXT: Round things are not kind.\nFOL: Round(x) -> -Kind(x)\nTEXT: If something is round and not kind then it is young.\nFOL: (Round(x) & -Kind(x)) -> Young(x)\nTEXT: If something is young and round then it is not red.\nFOL: (Young(x) & Round(x)) -> -Red(x)\nTEXT: The mouse is kind.\nFOL: Mouse(mouse) -> Kind(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse is round.\nFOL: Mouse(mouse) -> Round(mouse)\nTEXT: Round things are not kind.\nFOL: Round(x) -> -Kind(x)\nTEXT: If something is round and not kind then it is young.\nFOL: (Round(x) & -Kind(x) -> Young(x))\nTEXT: If something is young and round then it is not red.\nFOL: (Young(x) & Round(x) -> -Red(x))\nTEXT: The mouse is kind.\nFOL: Mouse(mouse) -> Kind(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse is round.\nFOL: Mouse(mouse) -> Round(mouse)\n\nTEXT: Round things are not kind.\nFOL: Round(x) -> -Kind(x)\n\nTEXT: If something is round and not kind then it is young.\nFOL: (Round(x) & -Kind(x)) -> Young(x)\n\nTEXT: If something is young and round then it is not red.\nFOL: (Young(x) & Round(x)) -> -Red(x)\n\nTEXT: The mouse is kind.\nFOL: Mouse(mouse) -> Kind(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse is round.\nFOL: Mouse(mouse) -> Round(mouse)\nTEXT: Round things are not kind.\nFOL: Round(x) -> -Kind(x)\nTEXT: If something is round and not kind then it is young.\nFOL: (Round(x) & -Kind(x) -> Young(x))\nTEXT: If something is young and round then it is not red.\nFOL: (Young(x) & Round(x) -> -Red(x))\nTEXT: The mouse is kind.\nFOL: Mouse(mouse) -> Kind(mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse is round.\nFOL: Mouse(mouse) -> Round(mouse)\nTEXT: Round things are not kind.\nFOL: Round(x) -> -Kind(x)\nTEXT: If something is round and not kind then it is young.\nFOL: (Round(x) & -Kind(x)) -> Young(x)\nTEXT: If something is young and round then it is not red.\nFOL: (Young(x) & Round(x)) -> -Red(x)\nTEXT: The mouse is kind.\nFOL: Mouse(mouse) -> Kind(mouse)\n</EVALUATE>"
  ]
 },
 {
  "index": 122,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: BaldEagle(x) -> Cold(x)\nTEXT: The bald eagle is kind.\nFOL: BaldEagle(x) -> Kind(x)\nTEXT: The bald eagle is young.\nFOL: BaldEagle(x) -> Young(x)\nTEXT: The bald eagle sees the cat.\nFOL: BaldEagle(x) -> SeesCat(x)\nTEXT: The bald eagle visits the cat.\nFOL: BaldEagle(x) -> VisitsCat(x)\nTEXT: The bald eagle visits the dog.\nFOL: BaldEagle(x) -> VisitsDog(x)\nTEXT: The cat is kind.\nFOL: Cat(x) -> Kind(x)\nTEXT: The cat sees the dog.\nFOL: Cat(x) -> SeesDog(x)\nTEXT: The dog eats the bald eagle.\nFOL: Dog(x) -> EatsBaldEagle(x)\nTEXT: The dog eats the cat.\nFOL: Dog(x) -> EatsCat(x)\nTEXT: The dog is cold.\nFOL: Dog(x) -> Cold(x)\nTEXT: The dog is round.\nFOL: Dog(x) -> Round(x)\nTEXT: The dog sees the bald eagle.\nFOL: Dog(x) -> SeesBaldEagle(x)\nTEXT: The dog sees the cat.\nFOL: Dog(x) -> SeesCat(x)\nTEXT: The dog visits the bald eagle.\nFOL: Dog(x) -> VisitsBaldEagle(x)\nTEXT: The dog visits the cat.\nFOL: Dog(x) -> VisitsCat(x)\nTEXT: If the dog visits the cat then the cat eats the dog.\nFOL: (Dog(x) & VisitsCat(x)) -> EatsDog(x)\nTEXT: If something is kind then it sees the dog.\nFOL: (Kind(x) -> SeesDog(x))\nTEXT: If the bald eagle sees the dog then the dog is cold.\nFOL: (BaldEagle(x) & SeesDog(x)) -> Cold(x)\nTEXT: If something visits the cat and the cat eats the dog then the dog is kind.\nFOL: (VisitsCat(x) & EatsDog(x)) -> Kind(x)\nTEXT: If something eats the cat and it is round then the cat is rough.\nFOL: (EatsCat(x) & Round(x)) -> Rough(x)\nTEXT: If something visits the cat and the cat visits the bald eagle then the cat visits the dog.\nFOL: (VisitsCat(x) & VisitsBaldEagle(x)) -> VisitsDog(x)\nTEXT: The cat does not eat the dog.\nFOL: -EatsDog(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: BaldEagle(x) -> Cold(x)\nTEXT: The bald eagle is kind.\nFOL: BaldEagle(x) -> Kind(x)\nTEXT: The bald eagle is young.\nFOL: BaldEagle(x) -> Young(x)\nTEXT: The bald eagle sees the cat.\nFOL: BaldEagle(x) -> SeesCat(x)\nTEXT: The bald eagle visits the cat.\nFOL: BaldEagle(x) -> VisitsCat(x)\nTEXT: The bald eagle visits the dog.\nFOL: BaldEagle(x) -> VisitsDog(x)\nTEXT: The cat is kind.\nFOL: Cat(x) -> Kind(x)\nTEXT: The cat sees the dog.\nFOL: Cat(x) -> SeesDog(x)\nTEXT: The dog eats the bald eagle.\nFOL: Dog(x) -> EatsBaldEagle(x)\nTEXT: The dog eats the cat.\nFOL: Dog(x) -> EatsCat(x)\nTEXT: The dog is cold.\nFOL: Dog(x) -> Cold(x)\nTEXT: The dog is round.\nFOL: Dog(x) -> Round(x)\nTEXT: The dog sees the bald eagle.\nFOL: Dog(x) -> SeesBaldEagle(x)\nTEXT: The dog sees the cat.\nFOL: Dog(x) -> SeesCat(x)\nTEXT: The dog visits the bald eagle.\nFOL: Dog(x) -> VisitsBaldEagle(x)\nTEXT: The dog visits the cat.\nFOL: Dog(x) -> VisitsCat(x)\nTEXT: If the dog visits the cat then the cat eats the dog.\nFOL: (Dog(x) & VisitsCat(x)) -> EatsDog(x)\nTEXT: If something is kind then it sees the dog.\nFOL: Kind(x) -> SeesDog(x)\nTEXT: If the bald eagle sees the dog then the dog is cold.\nFOL: (BaldEagle(x) & SeesDog(x)) -> Cold(x)\nTEXT: If something visits the cat and the cat eats the dog then the dog is kind.\nFOL: (VisitsCat(x) & EatsDog(x)) -> Kind(x)\nTEXT: If something eats the cat and it is round then the cat is rough.\nFOL: (EatsCat(x) & Round(x)) -> Rough(x)\nTEXT: If something visits the cat and the cat visits the bald eagle then the cat visits the dog.\nFOL: (VisitsCat(x) & VisitsBaldEagle(x)) -> VisitsDog(x)\nTEXT: The cat does not eat the dog.\nFOL: -EatsDog(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: BaldEagle(x) -> Cold(x)\nTEXT: The bald eagle is kind.\nFOL: BaldEagle(x) -> Kind(x)\nTEXT: The bald eagle is young.\nFOL: BaldEagle(x) -> Young(x)\nTEXT: The bald eagle sees the cat.\nFOL: BaldEagle(x) -> SeesCat(x)\nTEXT: The bald eagle visits the cat.\nFOL: BaldEagle(x) -> VisitsCat(x)\nTEXT: The bald eagle visits the dog.\nFOL: BaldEagle(x) -> VisitsDog(x)\nTEXT: The cat is kind.\nFOL: Cat(x) -> Kind(x)\nTEXT: The cat sees the dog.\nFOL: Cat(x) -> SeesDog(x)\nTEXT: The dog eats the bald eagle.\nFOL: Dog(x) -> EatsBaldEagle(x)\nTEXT: The dog eats the cat.\nFOL: Dog(x) -> EatsCat(x)\nTEXT: The dog is cold.\nFOL: Dog(x) -> Cold(x)\nTEXT: The dog is round.\nFOL: Dog(x) -> Round(x)\nTEXT: The dog sees the bald eagle.\nFOL: Dog(x) -> SeesBaldEagle(x)\nTEXT: The dog sees the cat.\nFOL: Dog(x) -> SeesCat(x)\nTEXT: The dog visits the bald eagle.\nFOL: Dog(x) -> VisitsBaldEagle(x)\nTEXT: The dog visits the cat.\nFOL: Dog(x) -> VisitsCat(x)\nTEXT: If the dog visits the cat then the cat eats the dog.\nFOL: (Dog(x) & VisitsCat(x)) -> EatsDog(x)\nTEXT: If something is kind then it sees the dog.\nFOL: Kind(x) -> SeesDog(x)\nTEXT: If the bald eagle sees the dog then the dog is cold.\nFOL: (BaldEagle(x) & SeesDog(x)) -> Cold(x)\nTEXT: If something visits the cat and the cat eats the dog then the dog is kind.\nFOL: (x & VisitsCat(x) & EatsDog(x)) -> Kind(x)\nTEXT: If something eats the cat and it is round then the cat is rough.\nFOL: (x & EatsCat(x) & Round(x)) -> Rough(x)\nTEXT: If something visits the cat and the cat visits the bald eagle then the cat visits the dog.\nFOL: (x & VisitsCat(x) & VisitsBaldEagle(x)) -> VisitsDog(x)\nTEXT: The cat does not eat the dog.\nFOL: -EatsDog(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: BaldEagle(x) -> Cold(x)\nTEXT: The bald eagle is kind.\nFOL: BaldEagle(x) -> Kind(x)\nTEXT: The bald eagle is young.\nFOL: BaldEagle(x) -> Young(x)\nTEXT: The bald eagle sees the cat.\nFOL: BaldEagle(x) -> SeesCat(x)\nTEXT: The bald eagle visits the cat.\nFOL: BaldEagle(x) -> VisitsCat(x)\nTEXT: The bald eagle visits the dog.\nFOL: BaldEagle(x) -> VisitsDog(x)\nTEXT: The cat is kind.\nFOL: Cat(x) -> Kind(x)\nTEXT: The cat sees the dog.\nFOL: Cat(x) -> SeesDog(x)\nTEXT: The dog eats the bald eagle.\nFOL: Dog(x) -> EatsBaldEagle(x)\nTEXT: The dog eats the cat.\nFOL: Dog(x) -> EatsCat(x)\nTEXT: The dog is cold.\nFOL: Dog(x) -> Cold(x)\nTEXT: The dog is round.\nFOL: Dog(x) -> Round(x)\nTEXT: The dog sees the bald eagle.\nFOL: Dog(x) -> SeesBaldEagle(x)\nTEXT: The dog sees the cat.\nFOL: Dog(x) -> SeesCat(x)\nTEXT: The dog visits the bald eagle.\nFOL: Dog(x) -> VisitsBaldEagle(x)\nTEXT: The dog visits the cat.\nFOL: Dog(x) -> VisitsCat(x)\nTEXT: If the dog visits the cat then the cat eats the dog.\nFOL: (Dog(x) & VisitsCat(x)) -> EatsDog(x)\nTEXT: If something is kind then it sees the dog.\nFOL: Kind(x) -> SeesDog(x)\nTEXT: If the bald eagle sees the dog then the dog is cold.\nFOL: (BaldEagle(x) & SeesDog(x)) -> Cold(x)\nTEXT: If something visits the cat and the cat eats the dog then the dog is kind.\nFOL: (x & VisitsCat(x) & EatsDog(x)) -> Kind(x)\nTEXT: If something eats the cat and it is round then the cat is rough.\nFOL: (x & EatsCat(x) & Round(x)) -> Rough(x)\nTEXT: If something visits the cat and the cat visits the bald eagle then the cat visits the dog.\nFOL: (x & VisitsCat(x) & VisitsBaldEagle(x)) -> VisitsDog(x)\nTEXT: The cat does not eat the dog.\nFOL: -EatsCat(Dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is cold.\nFOL: BaldEagle(x) -> Cold(x)\nTEXT: The bald eagle is kind.\nFOL: BaldEagle(x) -> Kind(x)\nTEXT: The bald eagle is young.\nFOL: BaldEagle(x) -> Young(x)\nTEXT: The bald eagle sees the cat.\nFOL: BaldEagle(x) -> SeesCat(x)\nTEXT: The bald eagle visits the cat.\nFOL: BaldEagle(x) -> VisitsCat(x)\nTEXT: The bald eagle visits the dog.\nFOL: BaldEagle(x) -> VisitsDog(x)\nTEXT: The cat is kind.\nFOL: Cat(x) -> Kind(x)\nTEXT: The cat sees the dog.\nFOL: Cat(x) -> SeesDog(x)\nTEXT: The dog eats the bald eagle.\nFOL: Dog(x) -> EatsBaldEagle(x)\nTEXT: The dog eats the cat.\nFOL: Dog(x) -> EatsCat(x)\nTEXT: The dog is cold.\nFOL: Dog(x) -> Cold(x)\nTEXT: The dog is round.\nFOL: Dog(x) -> Round(x)\nTEXT: The dog sees the bald eagle.\nFOL: Dog(x) -> SeesBaldEagle(x)\nTEXT: The dog sees the cat.\nFOL: Dog(x) -> SeesCat(x)\nTEXT: The dog visits the bald eagle.\nFOL: Dog(x) -> VisitsBaldEagle(x)\nTEXT: The dog visits the cat.\nFOL: Dog(x) -> VisitsCat(x)\nTEXT: If the dog visits the cat then the cat eats the dog.\nFOL: (Dog(x) & VisitsCat(x)) -> EatsDog(x)\nTEXT: If something is kind then it sees the dog.\nFOL: Kind(x) -> SeesDog(x)\nTEXT: If the bald eagle sees the dog then the dog is cold.\nFOL: (BaldEagle(x) & SeesDog(x)) -> Cold(x)\nTEXT: If something visits the cat and the cat eats the dog then the dog is kind.\nFOL: (x & VisitsCat(x) & EatsDog(x)) -> Kind(x)\nTEXT: If something eats the cat and it is round then the cat is rough.\nFOL: (x & EatsCat(x) & Round(x)) -> Rough(x)\nTEXT: If something visits the cat and the cat visits the bald eagle then the cat visits the dog.\nFOL: (x & VisitsCat(x) & VisitsBaldEagle(x)) -> VisitsDog(x)\nTEXT: The cat does not eat the dog.\nFOL: -EatsCat(Dog(x))\n</EVALUATE>"
  ]
 },
 {
  "index": 123,
  "responses": [
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: CatIsRough(cat)\nTEXT: The cat is round.\nFOL: CatIsRound(cat)\nTEXT: The dog does not chase the lion.\nFOL: -DogChasesLion(dog, lion)\nTEXT: The dog eats the cat.\nFOL: DogEatsCat(dog, cat)\nTEXT: The dog does not like the cat.\nFOL: -DogLikesCat(dog, cat)\nTEXT: The lion chases the dog.\nFOL: LionChasesDog(lion, dog)\nTEXT: The lion is green.\nFOL: LionIsGreen(lion)\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x. ((Green(x) & LionLikes(x)) -> DogEats(x))\nTEXT: If someone is round then they chase the lion.\nFOL: all x. (Round(x) -> LionChases(x))\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x. (LionChases(x) -> DogLikes(x))\nTEXT: If someone eats the dog then they are not round.\nFOL: all x. (DogEats(x) -> -Round(x))\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: -DogLikesLion(dog, lion) -> LionIsRed(lion)\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x. ((LionLikes(x) & LionLikes(cat)) -> DogChases(x))\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x. ((LionLikes(x) & LionIsGreen(lion)) -> LionIsRound(lion))\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x. (DogLikes(x) -> LionEats(x))\nTEXT: The cat likes the lion.\nFOL: CatLikesLion(cat, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: CatIsRough(cat)\nTEXT: The cat is round.\nFOL: CatIsRound(cat)\nTEXT: The dog does not chase the lion.\nFOL: -DogChasesLion(dog, lion)\nTEXT: The dog eats the cat.\nFOL: DogEatsCat(dog, cat)\nTEXT: The dog does not like the cat.\nFOL: -DogLikesCat(dog, cat)\nTEXT: The lion chases the dog.\nFOL: LionChasesDog(lion, dog)\nTEXT: The lion is green.\nFOL: LionIsGreen(lion)\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x. ((Green(x) & LionLikes(x)) -> DogEats(x))\nTEXT: If someone is round then they chase the lion.\nFOL: all x. (Round(x) -> LionChases(x))\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x. (LionChases(x) -> DogLikes(x))\nTEXT: If someone eats the dog then they are not round.\nFOL: all x. (DogEats(x) -> -Round(x))\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: -DogLikesLion(dog, lion) -> LionIsRed(lion)\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x. ((LionLikes(x) & LionLikes(cat)) -> DogChases(x))\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x. ((LionLikes(x) & LionIsGreen(lion)) -> LionIsRound(x))\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x. (DogLikes(x) -> LionEats(x))\nTEXT: The cat likes the lion.\nFOL: CatLikesLion(cat, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: CatIsRough(cat)\nTEXT: The cat is round.\nFOL: CatIsRound(cat)\nTEXT: The dog does not chase the lion.\nFOL: -DogChasesLion(dog, lion)\nTEXT: The dog eats the cat.\nFOL: DogEatsCat(dog, cat)\nTEXT: The dog does not like the cat.\nFOL: -DogLikesCat(dog, cat)\nTEXT: The lion chases the dog.\nFOL: LionChasesDog(lion, dog)\nTEXT: The lion is green.\nFOL: LionIsGreen(lion)\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x. ((Green(x) & LionLikes(x)) -> DogEats(x))\nTEXT: If someone is round then they chase the lion.\nFOL: all x. (Round(x) -> LionChases(x))\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x. (LionChases(x) -> DogLikes(x))\nTEXT: If someone eats the dog then they are not round.\nFOL: all x. (DogEats(x) -> -Round(x))\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: -DogLikesLion(dog, lion) -> LionIsRed(lion)\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x. ((LionLikes(x) & LionLikes(cat)) -> LionChases(x))\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x. ((LionLikes(x) & LionIsGreen(lion)) -> LionIsRound(x))\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x. (DogLikes(x) -> LionEats(x))\nTEXT: The cat likes the lion.\nFOL: CatLikesLion(cat, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: CatIsRough(cat)\nTEXT: The cat is round.\nFOL: CatIsRound(cat)\nTEXT: The dog does not chase the lion.\nFOL: -DogChasesLion(dog, lion)\nTEXT: The dog eats the cat.\nFOL: DogEatsCat(dog, cat)\nTEXT: The dog does not like the cat.\nFOL: -DogLikesCat(dog, cat)\nTEXT: The lion chases the dog.\nFOL: DogChasesLion(lion, dog)\nTEXT: The lion is green.\nFOL: LionIsGreen(lion)\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x. ((Green(x) & LionLikes(x)) -> DogEats(x))\nTEXT: If someone is round then they chase the lion.\nFOL: all x. (CatIsRound(x) -> DogChasesLion(x))\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x. (DogChasesLion(x) -> DogLikes(x))\nTEXT: If someone eats the dog then they are not round.\nFOL: all x. (DogEats(x) -> -CatIsRound(x))\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: -DogLikesLion(dog, lion) -> LionIsRed(lion)\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x. ((LionLikes(x) & LionLikes(cat)) -> DogChases(x))\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x. ((LionLikes(x) & LionIsGreen(lion)) -> CatIsRound(x))\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x. (DogLikes(x) -> DogEats(lion))\nTEXT: The cat likes the lion.\nFOL: CatLikesLion(cat, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is rough.\nFOL: CatIsRough(cat)\nTEXT: The cat is round.\nFOL: CatIsRound(cat)\nTEXT: The dog does not chase the lion.\nFOL: -DogChasesLion(dog, lion)\nTEXT: The dog eats the cat.\nFOL: DogEatsCat(dog, cat)\nTEXT: The dog does not like the cat.\nFOL: -DogLikesCat(dog, cat)\nTEXT: The lion chases the dog.\nFOL: DogChasesLion(lion, dog)\nTEXT: The lion is green.\nFOL: LionIsGreen(lion)\nTEXT: If someone is green and they like the lion then they eat the dog.\nFOL: all x. ((Green(x) & LionLikes(x)) -> DogEats(x))\nTEXT: If someone is round then they chase the lion.\nFOL: all x. (Round(x) -> DogChasesLion(x))\nTEXT: If someone chases the lion then they like the dog.\nFOL: all x. (DogChasesLion(x) -> DogLikes(x))\nTEXT: If someone eats the dog then they are not round.\nFOL: all x. (DogEats(x) -> -Round(x))\nTEXT: If the dog does not like the lion then the lion is red.\nFOL: -DogLikesLion(dog, lion) -> LionIsRed(lion)\nTEXT: If someone likes the lion and the lion likes the cat then they chase the dog.\nFOL: all x. ((LionLikes(x) & LionLikes(cat)) -> DogChases(x))\nTEXT: If someone likes the lion and the lion is green then the lion is round.\nFOL: all x. ((LionLikes(x) & LionIsGreen(lion)) -> LionIsRound(x))\nTEXT: If someone likes the dog then they eat the lion.\nFOL: all x. (DogLikes(x) -> DogEats(lion))\nTEXT: The cat likes the lion.\nFOL: CatLikesLion(cat, lion)\n</EVALUATE>"
  ]
 },
 {
  "index": 124,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Smart(Bob)\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\nTEXT: Charlie is smart.\nFOL: Smart(Charlie)\nTEXT: If Bob is furry then Bob is cold.\nFOL: Furry(Bob) -> Cold(Bob)\nTEXT: If Bob is furry then Bob is kind.\nFOL: Furry(Bob) -> Kind(Bob)\nTEXT: All smart people are furry.\nFOL: all x. (Smart(x) -> Furry(x))\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If someone is cold and not smart then they are kind.\nFOL: Cold(x) & -Smart(x) -> Kind(x)\nTEXT: All smart, cold people are white.\nFOL: all x. (Smart(x) & Cold(x) -> White(x))\nTEXT: Kind, cold people are white.\nFOL: Kind(x) & Cold(x) -> White(x)\nTEXT: If someone is smart and not cold then they are not white.\nFOL: Smart(x) & -Cold(x) -> -White(x)\nTEXT: Charlie is not big.\nFOL: -Big(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Smart(Bob)\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\nTEXT: Charlie is smart.\nFOL: Smart(Charlie)\nTEXT: If Bob is furry then Bob is cold.\nFOL: Furry(Bob) -> Cold(Bob)\nTEXT: If Bob is furry then Bob is kind.\nFOL: Furry(Bob) -> Kind(Bob)\nTEXT: All smart people are furry.\nFOL: all x. (Smart(x) -> Furry(x))\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If someone is cold and not smart then they are kind.\nFOL: (Cold(x) & -Smart(x)) -> Kind(x)\nTEXT: All smart, cold people are white.\nFOL: all x. (Smart(x) & Cold(x) -> White(x))\nTEXT: Kind, cold people are white.\nFOL: (Kind(x) & Cold(x)) -> White(x)\nTEXT: If someone is smart and not cold then they are not white.\nFOL: (Smart(x) & -Cold(x)) -> -White(x)\nTEXT: Charlie is not big.\nFOL: -Big(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Smart(Bob)\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\nTEXT: Charlie is smart.\nFOL: Smart(Charlie)\nTEXT: If Bob is furry then Bob is cold.\nFOL: Furry(Bob) -> Cold(Bob)\nTEXT: If Bob is furry then Bob is kind.\nFOL: Furry(Bob) -> Kind(Bob)\nTEXT: All smart people are furry.\nFOL: all x. (Smart(x) -> Furry(x))\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If someone is cold and not smart then they are kind.\nFOL: (Cold(x) & -Smart(x)) -> Kind(x)\nTEXT: All smart, cold people are white.\nFOL: all x. (Smart(x) & Cold(x) -> White(x))\nTEXT: Kind, cold people are white.\nFOL: all x. (Kind(x) & Cold(x) -> White(x))\nTEXT: If someone is smart and not cold then they are not white.\nFOL: (Smart(x) & -Cold(x)) -> -White(x)\nTEXT: Charlie is not big.\nFOL: -Big(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Smart(Bob)\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\nTEXT: Charlie is smart.\nFOL: Smart(Charlie)\nTEXT: If Bob is furry then Bob is cold.\nFOL: Furry(Bob) -> Cold(Bob)\nTEXT: If Bob is furry then Bob is kind.\nFOL: Furry(Bob) -> Kind(Bob)\nTEXT: All smart people are furry.\nFOL: all x. (Smart(x) -> Furry(x))\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If someone is cold and not smart then they are kind.\nFOL: (Cold(x) & -Smart(x)) -> Kind(x)\nTEXT: All smart, cold people are white.\nFOL: all x. (Smart(x) & Cold(x) -> White(x))\nTEXT: Kind, cold people are white.\nFOL: Kind(x) & Cold(x) -> White(x)\nTEXT: If someone is smart and not cold then they are not white.\nFOL: (Smart(x) & -Cold(x)) -> -White(x)\nTEXT: Charlie is not big.\nFOL: -Big(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Smart(Bob)\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\nTEXT: Charlie is smart.\nFOL: Smart(Charlie)\nTEXT: If Bob is furry then Bob is cold.\nFOL: Furry(Bob) -> Cold(Bob)\nTEXT: If Bob is furry then Bob is kind.\nFOL: Furry(Bob) -> Kind(Bob)\nTEXT: All smart people are furry.\nFOL: all x. (Smart(x) -> Furry(x))\nTEXT: Big people are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: If someone is cold and not smart then they are kind.\nFOL: exists x. (Cold(x) & -Smart(x) -> Kind(x))\nTEXT: All smart, cold people are white.\nFOL: all x. (Smart(x) & Cold(x) -> White(x))\nTEXT: Kind, cold people are white.\nFOL: exists x. (Kind(x) & Cold(x) -> White(x))\nTEXT: If someone is smart and not cold then they are not white.\nFOL: exists x. (Smart(x) & -Cold(x) -> -White(x))\nTEXT: Charlie is not big.\nFOL: -Big(Charlie)\n</EVALUATE>"
  ]
 },
 {
  "index": 125,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Bob(blue)\nTEXT: Bob is green.\nFOL: Bob(green)\nTEXT: Erin is not blue.\nFOL: -Erin(blue)\nTEXT: Erin is green.\nFOL: Erin(green)\nTEXT: Erin is not nice.\nFOL: -Erin(nice)\nTEXT: Gary is not green.\nFOL: -Gary(green)\nTEXT: Gary is smart.\nFOL: Gary(smart)\nTEXT: If someone is green and blue then they are round.\nFOL: all x. ((Green(x) & Blue(x)) -> Round(x))\nTEXT: If Erin is not green then Erin is blue.\nFOL: -Erin(green) -> Erin(blue)\nTEXT: If someone is green and round then they are not cold.\nFOL: all x. ((Green(x) & Round(x)) -> -Cold(x))\nTEXT: If someone is red then they are not blue.\nFOL: all x. (Red(x) -> -Blue(x))\nTEXT: If Bob is not green then Bob is nice.\nFOL: -Bob(green) -> Bob(nice)\nTEXT: If someone is blue and not cold then they are nice.\nFOL: all x. ((Blue(x) & -Cold(x)) -> Bob(nice))\nTEXT: If Erin is nice then Erin is not smart.\nFOL: Erin(nice) -> -Erin(smart)\nTEXT: If Erin is red then Erin is smart.\nFOL: Erin(red) -> Erin(smart)\nTEXT: Erin is green.\nFOL: Erin(green)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: BobBlue\nTEXT: Bob is green.\nFOL: BobGreen\nTEXT: Erin is not blue.\nFOL: -ErinBlue\nTEXT: Erin is green.\nFOL: ErinGreen\nTEXT: Erin is not nice.\nFOL: -ErinNice\nTEXT: Gary is not green.\nFOL: -GaryGreen\nTEXT: Gary is smart.\nFOL: GarySmart\nTEXT: If someone is green and blue then they are round.\nFOL: all x. ((Green(x) & Blue(x)) -> Round(x))\nTEXT: If Erin is not green then Erin is blue.\nFOL: -ErinGreen -> ErinBlue\nTEXT: If someone is green and round then they are not cold.\nFOL: all x. ((Green(x) & Round(x)) -> -Cold(x))\nTEXT: If someone is red then they are not blue.\nFOL: all x. (Red(x) -> -Blue(x))\nTEXT: If Bob is not green then Bob is nice.\nFOL: -BobGreen -> BobNice\nTEXT: If someone is blue and not cold then they are nice.\nFOL: all x. ((Blue(x) & -Cold(x)) -> Nice(x))\nTEXT: If Erin is nice then Erin is not smart.\nFOL: ErinNice -> -ErinSmart\nTEXT: If Erin is red then Erin is smart.\nFOL: ErinRed -> ErinSmart\nTEXT: Erin is green.\nFOL: ErinGreen\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Bob(Blue)\nTEXT: Bob is green.\nFOL: Bob(Green)\nTEXT: Erin is not blue.\nFOL: -Erin(Blue)\nTEXT: Erin is green.\nFOL: Erin(Green)\nTEXT: Erin is not nice.\nFOL: -Erin(Nice)\nTEXT: Gary is not green.\nFOL: -Gary(Green)\nTEXT: Gary is smart.\nFOL: Gary(Smart)\nTEXT: If someone is green and blue then they are round.\nFOL: all x. ((Green(x) & Blue(x)) -> Round(x))\nTEXT: If Erin is not green then Erin is blue.\nFOL: -Erin(Green) -> Erin(Blue)\nTEXT: If someone is green and round then they are not cold.\nFOL: all x. ((Green(x) & Round(x)) -> -Cold(x))\nTEXT: If someone is red then they are not blue.\nFOL: all x. (Red(x) -> -Blue(x))\nTEXT: If Bob is not green then Bob is nice.\nFOL: -Bob(Green) -> Bob(Nice)\nTEXT: If someone is blue and not cold then they are nice.\nFOL: all x. ((Blue(x) & -Cold(x)) -> Nice(x))\nTEXT: If Erin is nice then Erin is not smart.\nFOL: Erin(Nice) -> -Erin(Smart)\nTEXT: If Erin is red then Erin is smart.\nFOL: Erin(Red) -> Erin(Smart)\nTEXT: Erin is green.\nFOL: Erin(Green)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Bob(Blue)\nTEXT: Bob is green.\nFOL: Bob(Green)\nTEXT: Erin is not blue.\nFOL: -Erin(Blue)\nTEXT: Erin is green.\nFOL: Erin(Green)\nTEXT: Erin is not nice.\nFOL: -Erin(Nice)\nTEXT: Gary is not green.\nFOL: -Gary(Green)\nTEXT: Gary is smart.\nFOL: Gary(Smart)\nTEXT: If someone is green and blue then they are round.\nFOL: all x. ((Green(x) & Blue(x)) -> Round(x))\nTEXT: If Erin is not green then Erin is blue.\nFOL: -Erin(Green) -> Erin(Blue)\nTEXT: If someone is green and round then they are not cold.\nFOL: all x. ((Green(x) & Round(x)) -> -Cold(x))\nTEXT: If someone is red then they are not blue.\nFOL: all x. (Red(x) -> -Blue(x))\nTEXT: If Bob is not green then Bob is nice.\nFOL: -Bob(Green) -> Bob(Nice)\nTEXT: If someone is blue and not cold then they are nice.\nFOL: all x. ((Blue(x) & -Cold(x)) -> Bob(Nice))\nTEXT: If Erin is nice then Erin is not smart.\nFOL: Erin(Nice) -> -Erin(Smart)\nTEXT: If Erin is red then Erin is smart.\nFOL: Erin(Red) -> Erin(Smart)\nTEXT: Erin is green.\nFOL: Erin(Green)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Bob(Blue)\nTEXT: Bob is green.\nFOL: Bob(Green)\nTEXT: Erin is not blue.\nFOL: -Erin(Blue)\nTEXT: Erin is green.\nFOL: Erin(Green)\nTEXT: Erin is not nice.\nFOL: -Erin(Nice)\nTEXT: Gary is not green.\nFOL: -Gary(Green)\nTEXT: Gary is smart.\nFOL: Gary(Smart)\nTEXT: If someone is green and blue then they are round.\nFOL: all x. (Green(x) & Blue(x) -> Round(x))\nTEXT: If Erin is not green then Erin is blue.\nFOL: -Erin(Green) -> Erin(Blue)\nTEXT: If someone is green and round then they are not cold.\nFOL: all x. (Green(x) & Round(x) -> -Cold(x))\nTEXT: If someone is red then they are not blue.\nFOL: all x. (Red(x) -> -Blue(x))\nTEXT: If Bob is not green then Bob is nice.\nFOL: -Bob(Green) -> Bob(Nice)\nTEXT: If someone is blue and not cold then they are nice.\nFOL: all x. (Blue(x) & -Cold(x) -> Nice(x))\nTEXT: If Erin is nice then Erin is not smart.\nFOL: Erin(Nice) -> -Erin(Smart)\nTEXT: If Erin is red then Erin is smart.\nFOL: Erin(Red) -> Erin(Smart)\nTEXT: Erin is green.\nFOL: Erin(Green)\n</EVALUATE>"
  ]
 },
 {
  "index": 126,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(Bob)\nTEXT: Fiona is round.\nFOL: Round(Fiona)\nTEXT: Harry is big.\nFOL: Big(Harry)\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x. (Blue(x) & Cold(x) -> -Big(x))\nTEXT: Fiona is not big.\nFOL: -Big(Fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Blue(Bob)\n\nTEXT: Fiona is round.\nFOL: Round(Fiona)\n\nTEXT: Harry is big.\nFOL: Big(Harry)\n\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x. (Blue(x) & Cold(x) -> -Big(x))\n\nTEXT: Fiona is not big.\nFOL: -Big(Fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Bob(isBlue)\nTEXT: Fiona is round.\nFOL: Fiona(isRound)\nTEXT: Harry is big.\nFOL: Harry(isBig)\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x. (Blue(x) & Cold(x) -> -Big(x))\nTEXT: Fiona is not big.\nFOL: -Fiona(isBig)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Bob is blue.\nTEXT: Fiona is round.\nFOL: Fiona is round.\nTEXT: Harry is big.\nFOL: Harry is big.\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x. (Blue(x) & Cold(x) -> -Big(x))\nTEXT: Fiona is not big.\nFOL: -Fiona is big.\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is blue.\nFOL: Bob(blue)\nTEXT: Fiona is round.\nFOL: Fiona(round)\nTEXT: Harry is big.\nFOL: Harry(big)\nTEXT: If someone is blue and cold then they are not big.\nFOL: all x. (Blue(x) & Cold(x) -> -Big(x))\nTEXT: Fiona is not big.\nFOL: -Fiona(big)\n</EVALUATE>"
  ]
 },
 {
  "index": 127,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle does not chase the cow.\nFOL: -Chase(baldEagle, cow)\n\nTEXT: The bald eagle is not kind.\nFOL: -Kind(baldEagle)\n\nTEXT: The bald eagle is not red.\nFOL: -Red(baldEagle)\n\nTEXT: The bald eagle likes the cow.\nFOL: Like(baldEagle, cow)\n\nTEXT: The bald eagle likes the mouse.\nFOL: Like(baldEagle, mouse)\n\nTEXT: The cow chases the bald eagle.\nFOL: Chase(cow, baldEagle)\n\nTEXT: The cow is red.\nFOL: Red(cow)\n\nTEXT: The cow likes the mouse.\nFOL: Like(cow, mouse)\n\nTEXT: The cow visits the mouse.\nFOL: Visit(cow, mouse)\n\nTEXT: The mouse chases the cow.\nFOL: Chase(mouse, cow)\n\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\n\nTEXT: The mouse does not like the cow.\nFOL: -Like(mouse, cow)\n\nTEXT: If the mouse chases the bald eagle and the mouse is kind then the mouse does not like the cow.\nFOL: (Chase(mouse, baldEagle) & Kind(mouse)) -> -Like(mouse, cow)\n\nTEXT: If the mouse is young then the mouse likes the cow.\nFOL: Young(mouse) -> Like(mouse, cow)\n\nTEXT: If someone chases the mouse then the mouse likes the cow.\nFOL: Chase(x, mouse) -> Like(mouse, cow)\n\nTEXT: If someone is red and not green then they do not chase the cow.\nFOL: (Red(x) & -Green(x)) -> -Chase(x, cow)\n\nTEXT: If someone visits the mouse then the mouse likes the bald eagle.\nFOL: Visit(x, mouse) -> Like(mouse, baldEagle)\n\nTEXT: If someone likes the bald eagle then they are red.\nFOL: Like(x, baldEagle) -> Red(x)\n\nTEXT: If someone visits the bald eagle then the bald eagle does not chase the mouse.\nFOL: Visit(x, baldEagle) -> -Chase(baldEagle, mouse)\n\nTEXT: If someone is red then they visit the cow.\nFOL: Red(x) -> Visit(x, cow)\n\nTEXT: The mouse likes the bald eagle.\nFOL: Like(mouse, baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle does not chase the cow.\nFOL: -Chase(baldEagle, cow)\n\nTEXT: The bald eagle is not kind.\nFOL: -Kind(baldEagle)\n\nTEXT: The bald eagle is not red.\nFOL: -Red(baldEagle)\n\nTEXT: The bald eagle likes the cow.\nFOL: Like(baldEagle, cow)\n\nTEXT: The bald eagle likes the mouse.\nFOL: Like(baldEagle, mouse)\n\nTEXT: The cow chases the bald eagle.\nFOL: Chase(cow, baldEagle)\n\nTEXT: The cow is red.\nFOL: Red(cow)\n\nTEXT: The cow likes the mouse.\nFOL: Like(cow, mouse)\n\nTEXT: The cow visits the mouse.\nFOL: Visit(cow, mouse)\n\nTEXT: The mouse chases the cow.\nFOL: Chase(mouse, cow)\n\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\n\nTEXT: The mouse does not like the cow.\nFOL: -Like(mouse, cow)\n\nTEXT: If the mouse chases the bald eagle and the mouse is kind then the mouse does not like the cow.\nFOL: (Chase(mouse, baldEagle) & Kind(mouse)) -> -Like(mouse, cow)\n\nTEXT: If the mouse is young then the mouse likes the cow.\nFOL: Young(mouse) -> Like(mouse, cow)\n\nTEXT: If someone chases the mouse then the mouse likes the cow.\nFOL: Chase(x, mouse) -> Like(mouse, cow)\n\nTEXT: If someone is red and not green then they do not chase the cow.\nFOL: (Red(x) & -Green(x)) -> -Chase(x, cow)\n\nTEXT: If someone visits the mouse then the mouse likes the bald eagle.\nFOL: Visit(x, mouse) -> Like(baldEagle, mouse)\n\nTEXT: If someone likes the bald eagle then they are red.\nFOL: Like(x, baldEagle) -> Red(x)\n\nTEXT: If someone visits the bald eagle then the bald eagle does not chase the mouse.\nFOL: Visit(x, baldEagle) -> -Chase(baldEagle, mouse)\n\nTEXT: If someone is red then they visit the cow.\nFOL: Red(x) -> Visit(x, cow)\n\nTEXT: The mouse likes the bald eagle.\nFOL: Like(mouse, baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle does not chase the cow.\nFOL: -Chase(baldEagle, cow)\nTEXT: The bald eagle is not kind.\nFOL: -Kind(baldEagle)\nTEXT: The bald eagle is not red.\nFOL: -Red(baldEagle)\nTEXT: The bald eagle likes the cow.\nFOL: Like(baldEagle, cow)\nTEXT: The bald eagle likes the mouse.\nFOL: Like(baldEagle, mouse)\nTEXT: The cow chases the bald eagle.\nFOL: Chase(cow, baldEagle)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow likes the mouse.\nFOL: Like(cow, mouse)\nTEXT: The cow visits the mouse.\nFOL: Visit(cow, mouse)\nTEXT: The mouse chases the cow.\nFOL: Chase(mouse, cow)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: The mouse does not like the cow.\nFOL: -Like(mouse, cow)\nTEXT: If the mouse chases the bald eagle and the mouse is kind then the mouse does not like the cow.\nFOL: (Chase(mouse, baldEagle) & Kind(mouse)) -> -Like(mouse, cow)\nTEXT: If the mouse is young then the mouse likes the cow.\nFOL: Young(mouse) -> Like(mouse, cow)\nTEXT: If someone chases the mouse then the mouse likes the cow.\nFOL: all x. (Chase(x, mouse) -> Like(x, cow))\nTEXT: If someone is red and not green then they do not chase the cow.\nFOL: all x. (Red(x) & -Green(x) -> -Chase(x, cow))\nTEXT: If someone visits the mouse then the mouse likes the bald eagle.\nFOL: all x. (Visit(x, mouse) -> Like(mouse, baldEagle))\nTEXT: If someone likes the bald eagle then they are red.\nFOL: all x. (Like(x, baldEagle) -> Red(x))\nTEXT: If someone visits the bald eagle then the bald eagle does not chase the mouse.\nFOL: all x. (Visit(x, baldEagle) -> -Chase(baldEagle, mouse))\nTEXT: If someone is red then they visit the cow.\nFOL: all x. (Red(x) -> Visit(x, cow))\nTEXT: The mouse likes the bald eagle.\nFOL: Like(mouse, baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle does not chase the cow.\nFOL: -Chase(baldEagle, cow)\nTEXT: The bald eagle is not kind.\nFOL: -Kind(baldEagle)\nTEXT: The bald eagle is not red.\nFOL: -Red(baldEagle)\nTEXT: The bald eagle likes the cow.\nFOL: Like(baldEagle, cow)\nTEXT: The bald eagle likes the mouse.\nFOL: Like(baldEagle, mouse)\nTEXT: The cow chases the bald eagle.\nFOL: Chase(cow, baldEagle)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow likes the mouse.\nFOL: Like(cow, mouse)\nTEXT: The cow visits the mouse.\nFOL: Visit(cow, mouse)\nTEXT: The mouse chases the cow.\nFOL: Chase(mouse, cow)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: The mouse does not like the cow.\nFOL: -Like(mouse, cow)\nTEXT: If the mouse chases the bald eagle and the mouse is kind then the mouse does not like the cow.\nFOL: (Chase(mouse, baldEagle) & Kind(mouse)) -> -Like(mouse, cow)\nTEXT: If the mouse is young then the mouse likes the cow.\nFOL: Young(mouse) -> Like(mouse, cow)\nTEXT: If someone chases the mouse then the mouse likes the cow.\nFOL: all x. (Chase(x, mouse) -> Like(x, cow))\nTEXT: If someone is red and not green then they do not chase the cow.\nFOL: all x. ((Red(x) & -Green(x)) -> -Chase(x, cow))\nTEXT: If someone visits the mouse then the mouse likes the bald eagle.\nFOL: all x. (Visit(x, mouse) -> Like(mouse, baldEagle))\nTEXT: If someone likes the bald eagle then they are red.\nFOL: all x. (Like(x, baldEagle) -> Red(x))\nTEXT: If someone visits the bald eagle then the bald eagle does not chase the mouse.\nFOL: all x. (Visit(x, baldEagle) -> -Chase(baldEagle, mouse))\nTEXT: If someone is red then they visit the cow.\nFOL: all x. (Red(x) -> Visit(x, cow))\nTEXT: The mouse likes the bald eagle.\nFOL: Like(mouse, baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle does not chase the cow.\nFOL: -Chase(baldEagle, cow)\nTEXT: The bald eagle is not kind.\nFOL: -Kind(baldEagle)\nTEXT: The bald eagle is not red.\nFOL: -Red(baldEagle)\nTEXT: The bald eagle likes the cow.\nFOL: Like(baldEagle, cow)\nTEXT: The bald eagle likes the mouse.\nFOL: Like(baldEagle, mouse)\nTEXT: The cow chases the bald eagle.\nFOL: Chase(cow, baldEagle)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow likes the mouse.\nFOL: Like(cow, mouse)\nTEXT: The cow visits the mouse.\nFOL: Visit(cow, mouse)\nTEXT: The mouse chases the cow.\nFOL: Chase(mouse, cow)\nTEXT: The mouse is blue.\nFOL: Blue(mouse)\nTEXT: The mouse does not like the cow.\nFOL: -Like(mouse, cow)\nTEXT: If the mouse chases the bald eagle and the mouse is kind then the mouse does not like the cow.\nFOL: (Chase(mouse, baldEagle) & Kind(mouse)) -> -Like(mouse, cow)\nTEXT: If the mouse is young then the mouse likes the cow.\nFOL: Young(mouse) -> Like(mouse, cow)\nTEXT: If someone chases the mouse then the mouse likes the cow.\nFOL: all x. (Chase(x, mouse) -> Like(x, cow))\nTEXT: If someone is red and not green then they do not chase the cow.\nFOL: all x. ((Red(x) & -Green(x)) -> -Chase(x, cow))\nTEXT: If someone visits the mouse then the mouse likes the bald eagle.\nFOL: all x. (Visit(x, mouse) -> Like(baldEagle, x))\nTEXT: If someone likes the bald eagle then they are red.\nFOL: all x. (Like(x, baldEagle) -> Red(x))\nTEXT: If someone visits the bald eagle then the bald eagle does not chase the mouse.\nFOL: all x. (Visit(x, baldEagle) -> -Chase(x, mouse))\nTEXT: If someone is red then they visit the cow.\nFOL: all x. (Red(x) -> Visit(x, cow))\nTEXT: The mouse likes the bald eagle.\nFOL: Like(mouse, baldEagle)\n</EVALUATE>"
  ]
 },
 {
  "index": 128,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is quiet.\nFOL: Quiet(anne)\n\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\n\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\n\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\n\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\n\nTEXT: Fiona is smart.\nFOL: Smart(fiona)\n\nTEXT: Gary is green.\nFOL: Green(gary)\n\nTEXT: Nice, blue things are kind.\nFOL: all x. (Nice(x) & Blue(x) -> Kind(x))\n\nTEXT: All kind things are blue.\nFOL: all x. (Kind(x) -> Blue(x))\n\nTEXT: Blue, smart things are nice.\nFOL: all x. (Blue(x) & Smart(x) -> Nice(x))\n\nTEXT: All kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\n\nTEXT: Big, kind things are quiet.\nFOL: all x. (Big(x) & Kind(x) -> Quiet(x))\n\nTEXT: If Fiona is green and Fiona is nice then Fiona is quiet.\nFOL: (Green(fiona) & Nice(fiona)) -> Quiet(fiona)\n\nTEXT: If something is nice then it is big.\nFOL: all x. (Nice(x) -> Big(x))\n\nTEXT: Blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\n\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is quiet.\nFOL: Quiet(anne)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Fiona is smart.\nFOL: Smart(fiona)\nTEXT: Gary is green.\nFOL: Green(gary)\nTEXT: Nice, blue things are kind.\nFOL: all x. (Nice(x) & Blue(x) -> Kind(x))\nTEXT: All kind things are blue.\nFOL: all x. (Kind(x) -> Blue(x))\nTEXT: Blue, smart things are nice.\nFOL: all x. (Blue(x) & Smart(x) -> Nice(x))\nTEXT: All kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: Big, kind things are quiet.\nFOL: all x. (Big(x) & Kind(x) -> Quiet(x))\nTEXT: If Fiona is green and Fiona is nice then Fiona is quiet.\nFOL: (Green(fiona) & Nice(fiona)) -> Quiet(fiona)\nTEXT: If something is nice then it is big.\nFOL: all x. (Nice(x) -> Big(x))\nTEXT: Blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is quiet.\nFOL: Quiet(anne)\n\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\n\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\n\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\n\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\n\nTEXT: Fiona is smart.\nFOL: Smart(fiona)\n\nTEXT: Gary is green.\nFOL: Green(gary)\n\nTEXT: Nice, blue things are kind.\nFOL: all x. (Nice(x) & Blue(x) -> Kind(x))\n\nTEXT: All kind things are blue.\nFOL: all x. (Kind(x) -> Blue(x))\n\nTEXT: Blue, smart things are nice.\nFOL: all x. (Blue(x) & Smart(x) -> Nice(x))\n\nTEXT: All kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\n\nTEXT: Big, kind things are quiet.\nFOL: all x. (Kind(x) & Big(x) -> Quiet(x))\n\nTEXT: If Fiona is green and Fiona is nice then Fiona is quiet.\nFOL: (Green(fiona) & Nice(fiona)) -> Quiet(fiona)\n\nTEXT: If something is nice then it is big.\nFOL: all x. (Nice(x) -> Big(x))\n\nTEXT: Blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\n\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is quiet.\nFOL: Quiet(anne)\n\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\n\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\n\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\n\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\n\nTEXT: Fiona is smart.\nFOL: Smart(fiona)\n\nTEXT: Gary is green.\nFOL: Green(gary)\n\nTEXT: Nice, blue things are kind.\nFOL: all x. (Nice(x) & Blue(x) -> Kind(x))\n\nTEXT: All kind things are blue.\nFOL: all x. (Kind(x) -> Blue(x))\n\nTEXT: Blue, smart things are nice.\nFOL: all x. (Blue(x) & Smart(x) -> Nice(x))\n\nTEXT: All kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\n\nTEXT: Big, kind things are quiet.\nFOL: all x. (Big(x) & Kind(x) -> Quiet(x))\n\nTEXT: If Fiona is green and Fiona is nice then Fiona is quiet.\nFOL: (Green(fiona) & Nice(fiona) -> Quiet(fiona))\n\nTEXT: If something is nice then it is big.\nFOL: all x. (Nice(x) -> Big(x))\n\nTEXT: Blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\n\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is quiet.\nFOL: Quiet(anne)\nTEXT: Charlie is blue.\nFOL: Blue(charlie)\nTEXT: Charlie is kind.\nFOL: Kind(charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\nTEXT: Fiona is kind.\nFOL: Kind(fiona)\nTEXT: Fiona is smart.\nFOL: Smart(fiona)\nTEXT: Gary is green.\nFOL: Green(gary)\nTEXT: Nice, blue things are kind.\nFOL: all x. ((Blue(x) & Nice(x)) -> Kind(x))\nTEXT: All kind things are blue.\nFOL: all x. (Kind(x) -> Blue(x))\nTEXT: Blue, smart things are nice.\nFOL: all x. ((Blue(x) & Smart(x)) -> Nice(x))\nTEXT: All kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: Big, kind things are quiet.\nFOL: all x. (Kind(x) & -Big(x) -> Quiet(x))\nTEXT: If Fiona is green and Fiona is nice then Fiona is quiet.\nFOL: (Green(fiona) & Nice(fiona)) -> Quiet(fiona)\nTEXT: If something is nice then it is big.\nFOL: all x. (Nice(x) -> Big(x))\nTEXT: Blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Fiona is not quiet.\nFOL: -Quiet(fiona)\n</EVALUATE>"
  ]
 },
 {
  "index": 129,
  "responses": [
   "<EVALUATE>\nTEXT: The cat is blue.\nFOL: Cat(BlueCat)\nTEXT: The cat is green.\nFOL: Cat(GreenCat)\nTEXT: The cat is kind.\nFOL: Cat(KindCat)\nTEXT: The cat is nice.\nFOL: Cat(NiceCat)\nTEXT: The cat is young.\nFOL: Cat(YoungCat)\nTEXT: The cat likes the mouse.\nFOL: Cat(LikesMouse)\nTEXT: The cat sees the mouse.\nFOL: Cat(SeesMouse)\nTEXT: The cat visits the mouse.\nFOL: Cat(VisitsMouse)\nTEXT: The mouse is blue.\nFOL: Mouse(BlueMouse)\nTEXT: The mouse likes the cat.\nFOL: Mouse(LikesCat)\nTEXT: The mouse sees the cat.\nFOL: Mouse(SeesCat)\nTEXT: The mouse visits the cat.\nFOL: Mouse(VisitsCat)\nTEXT: If someone is green then they like the cat.\nFOL: all x. (Green(x) -> LikesCat(x))\nTEXT: If someone is kind then they like the mouse.\nFOL: all x. (Kind(x) -> LikesMouse(x))\nTEXT: If someone sees the cat and the cat sees the mouse then the mouse is blue.\nFOL: all x. ((SeesCat(x) & SeesMouse(x)) -> BlueMouse(x))\nTEXT: If someone likes the mouse and the mouse is blue then they visit the mouse.\nFOL: all x. ((LikesMouse(x) & BlueMouse(x)) -> VisitsMouse(x))\nTEXT: If the mouse likes the cat then the mouse is kind.\nFOL: LikesCat(Mouse) -> Kind(Mouse)\nTEXT: If someone likes the cat then they visit the cat.\nFOL: all x. (LikesCat(x) -> VisitsCat(x))\nTEXT: The mouse is nice.\nFOL: Mouse(NiceMouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is blue.\nFOL: Cat(BlueCat)\nTEXT: The cat is green.\nFOL: Cat(GreenCat)\nTEXT: The cat is kind.\nFOL: Cat(KindCat)\nTEXT: The cat is nice.\nFOL: Cat(NiceCat)\nTEXT: The cat is young.\nFOL: Cat(YoungCat)\nTEXT: The cat likes the mouse.\nFOL: Cat(LikesMouse)\nTEXT: The cat sees the mouse.\nFOL: Cat(SeesMouse)\nTEXT: The cat visits the mouse.\nFOL: Cat(VisitsMouse)\nTEXT: The mouse is blue.\nFOL: Mouse(BlueMouse)\nTEXT: The mouse likes the cat.\nFOL: Mouse(LikesCat)\nTEXT: The mouse sees the cat.\nFOL: Mouse(SeesCat)\nTEXT: The mouse visits the cat.\nFOL: Mouse(VisitsCat)\nTEXT: If someone is green then they like the cat.\nFOL: all x. (Green(x) -> LikesCat(x))\nTEXT: If someone is kind then they like the mouse.\nFOL: all x. (Kind(x) -> LikesMouse(x))\nTEXT: If someone sees the cat and the cat sees the mouse then the mouse is blue.\nFOL: all x. ((SeesCat(x) & SeesMouse(x)) -> BlueMouse)\nTEXT: If someone likes the mouse and the mouse is blue then they visit the mouse.\nFOL: all x. ((LikesMouse(x) & BlueMouse(x)) -> VisitsMouse(x))\nTEXT: If the mouse likes the cat then the mouse is kind.\nFOL: LikesCat(Mouse) -> Kind(Mouse)\nTEXT: If someone likes the cat then they visit the cat.\nFOL: all x. (LikesCat(x) -> VisitsCat(x))\nTEXT: The mouse is nice.\nFOL: Mouse(NiceMouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is blue.\nFOL: Cat(BlueCat)\nTEXT: The cat is green.\nFOL: Cat(GreenCat)\nTEXT: The cat is kind.\nFOL: Cat(KindCat)\nTEXT: The cat is nice.\nFOL: Cat(NiceCat)\nTEXT: The cat is young.\nFOL: Cat(YoungCat)\nTEXT: The cat likes the mouse.\nFOL: Cat(LikesMouse)\nTEXT: The cat sees the mouse.\nFOL: Cat(SeesMouse)\nTEXT: The cat visits the mouse.\nFOL: Cat(VisitsMouse)\nTEXT: The mouse is blue.\nFOL: Mouse(BlueMouse)\nTEXT: The mouse likes the cat.\nFOL: Mouse(LikesCat)\nTEXT: The mouse sees the cat.\nFOL: Mouse(SeesCat)\nTEXT: The mouse visits the cat.\nFOL: Mouse(VisitsCat)\nTEXT: If someone is green then they like the cat.\nFOL: all x. (Green(x) -> LikesCat(x))\nTEXT: If someone is kind then they like the mouse.\nFOL: all x. (Kind(x) -> LikesMouse(x))\nTEXT: If someone sees the cat and the cat sees the mouse then the mouse is blue.\nFOL: all x y. ((SeesCat(x) & SeesMouse(y)) -> BlueMouse(y))\nTEXT: If someone likes the mouse and the mouse is blue then they visit the mouse.\nFOL: all x y. ((LikesMouse(x) & BlueMouse(y)) -> VisitsMouse(x))\nTEXT: If the mouse likes the cat then the mouse is kind.\nFOL: LikesCat(Mouse) -> Kind(Mouse)\nTEXT: If someone likes the cat then they visit the cat.\nFOL: all x. (LikesCat(x) -> VisitsCat(x))\nTEXT: The mouse is nice.\nFOL: Mouse(NiceMouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is blue.\nFOL: Cat(BlueCat)\nTEXT: The cat is green.\nFOL: Cat(GreenCat)\nTEXT: The cat is kind.\nFOL: Cat(KindCat)\nTEXT: The cat is nice.\nFOL: Cat(NiceCat)\nTEXT: The cat is young.\nFOL: Cat(YoungCat)\nTEXT: The cat likes the mouse.\nFOL: Cat(LikesMouse)\nTEXT: The cat sees the mouse.\nFOL: Cat(SeesMouse)\nTEXT: The cat visits the mouse.\nFOL: Cat(VisitsMouse)\nTEXT: The mouse is blue.\nFOL: Mouse(BlueMouse)\nTEXT: The mouse likes the cat.\nFOL: Mouse(LikesCat)\nTEXT: The mouse sees the cat.\nFOL: Mouse(SeesCat)\nTEXT: The mouse visits the cat.\nFOL: Mouse(VisitsCat)\nTEXT: If someone is green then they like the cat.\nFOL: all x. (Green(x) -> LikesCat(x))\nTEXT: If someone is kind then they like the mouse.\nFOL: all x. (Kind(x) -> LikesMouse(x))\nTEXT: If someone sees the cat and the cat sees the mouse then the mouse is blue.\nFOL: all x y. ((SeesCat(x) & SeesMouse(y)) -> BlueMouse(y))\nTEXT: If someone likes the mouse and the mouse is blue then they visit the mouse.\nFOL: all x. (LikesMouse(x) & BlueMouse(x) -> VisitsMouse(x))\nTEXT: If the mouse likes the cat then the mouse is kind.\nFOL: LikesCat(Mouse) -> Kind(Mouse)\nTEXT: If someone likes the cat then they visit the cat.\nFOL: all x. (LikesCat(x) -> VisitsCat(x))\nTEXT: The mouse is nice.\nFOL: Mouse(NiceMouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat is blue.\nFOL: Cat(BlueCat)\nTEXT: The cat is green.\nFOL: Cat(GreenCat)\nTEXT: The cat is kind.\nFOL: Cat(KindCat)\nTEXT: The cat is nice.\nFOL: Cat(NiceCat)\nTEXT: The cat is young.\nFOL: Cat(YoungCat)\nTEXT: The cat likes the mouse.\nFOL: Cat(LikesMouse)\nTEXT: The cat sees the mouse.\nFOL: Cat(SeesMouse)\nTEXT: The cat visits the mouse.\nFOL: Cat(VisitsMouse)\nTEXT: The mouse is blue.\nFOL: Mouse(BlueMouse)\nTEXT: The mouse likes the cat.\nFOL: Mouse(LikesCat)\nTEXT: The mouse sees the cat.\nFOL: Mouse(SeesCat)\nTEXT: The mouse visits the cat.\nFOL: Mouse(VisitsCat)\nTEXT: If someone is green then they like the cat.\nFOL: all x. (Green(x) -> LikesCat(x))\nTEXT: If someone is kind then they like the mouse.\nFOL: all x. (Kind(x) -> LikesMouse(x))\nTEXT: If someone sees the cat and the cat sees the mouse then the mouse is blue.\nFOL: all x. ((SeesCat(x) & SeesMouse(x)) -> BlueMouse(x))\nTEXT: If someone likes the mouse and the mouse is blue then they visit the mouse.\nFOL: all x. ((LikesMouse(x) & BlueMouse(x)) -> VisitsMouse(x))\nTEXT: If the mouse likes the cat then the mouse is kind.\nFOL: LikesMouse(Mouse) -> Kind(Mouse)\nTEXT: If someone likes the cat then they visit the cat.\nFOL: all x. (LikesCat(x) -> VisitsCat(x))\nTEXT: The mouse is nice.\nFOL: Mouse(NiceMouse)\n</EVALUATE>"
  ]
 },
 {
  "index": 130,
  "responses": [
   "<EVALUATE>\nTEXT: The rabbit is green.\nFOL: Rabbit(rabbit) & Green(rabbit)\nTEXT: If someone is nice then they are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: All nice people are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\nTEXT: If the rabbit is cold and the rabbit is not green then the rabbit is not big.\nFOL: (Cold(rabbit) & -Green(rabbit)) -> -Big(rabbit)\nTEXT: If someone is cold and green then they are nice.\nFOL: all x. (Cold(x) & Green(x) -> Nice(x))\nTEXT: All big, young people are nice.\nFOL: all x. (Big(x) & Young(x) -> Nice(x))\nTEXT: All green people are cold.\nFOL: all x. (Green(x) -> Cold(x))\nTEXT: The rabbit does not eat the rabbit.\nFOL: -Eat(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The rabbit is green.\nFOL: Rabbit(rabbit) & Green(rabbit)\nTEXT: If someone is nice then they are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: All nice people are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\nTEXT: If the rabbit is cold and the rabbit is not green then the rabbit is not big.\nFOL: (Cold(rabbit) & -Green(rabbit)) -> -Big(rabbit)\nTEXT: If someone is cold and green then they are nice.\nFOL: (Cold(x) & Green(x)) -> Nice(x)\nTEXT: All big, young people are nice.\nFOL: all x. (Big(x) & Young(x) -> Nice(x))\nTEXT: All green people are cold.\nFOL: all x. (Green(x) -> Cold(x))\nTEXT: The rabbit does not eat the rabbit.\nFOL: -Eat(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The rabbit is green.\nFOL: Rabbit(rabbit) & Green(rabbit)\n\nTEXT: If someone is nice then they are young.\nFOL: all x. (Nice(x) -> Young(x))\n\nTEXT: All nice people are young.\nFOL: all x. (Nice(x) -> Young(x))\n\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\n\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\n\nTEXT: If the rabbit is cold and the rabbit is not green then the rabbit is not big.\nFOL: (Cold(rabbit) & -Green(rabbit)) -> -Big(rabbit)\n\nTEXT: If someone is cold and green then they are nice.\nFOL: (Cold(x) & Green(x)) -> Nice(x)\n\nTEXT: All big, young people are nice.\nFOL: all x. (Big(x) & Young(x) -> Nice(x))\n\nTEXT: All green people are cold.\nFOL: all x. (Green(x) -> Cold(x))\n\nTEXT: The rabbit does not eat the rabbit.\nFOL: -Eat(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The rabbit is green.\nFOL: Rabbit(rabbit) & Green(rabbit)\n\nTEXT: If someone is nice then they are young.\nFOL: all x. (Nice(x) -> Young(x))\n\nTEXT: All nice people are young.\nFOL: all x. (Nice(x) -> Young(x))\n\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\n\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\n\nTEXT: If the rabbit is cold and the rabbit is not green then the rabbit is not big.\nFOL: (Cold(rabbit) & -Green(rabbit)) -> -Big(rabbit)\n\nTEXT: If someone is cold and green then they are nice.\nFOL: (Cold(x) & Green(x)) -> Nice(x)\n\nTEXT: All big, young people are nice.\nFOL: all x. ((Big(x) & Young(x)) -> Nice(x))\n\nTEXT: All green people are cold.\nFOL: all x. (Green(x) -> Cold(x))\n\nTEXT: The rabbit does not eat the rabbit.\nFOL: -Eat(rabbit, rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The rabbit is green.\nFOL: Rabbit(rabbit) & Green(rabbit)\nTEXT: If someone is nice then they are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: All nice people are young.\nFOL: all x. (Nice(x) -> Young(x))\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\nTEXT: Young people are not big.\nFOL: all x. (Young(x) -> -Big(x))\nTEXT: If the rabbit is cold and the rabbit is not green then the rabbit is not big.\nFOL: ((Cold(rabbit) & -Green(rabbit)) -> -Big(rabbit))\nTEXT: If someone is cold and green then they are nice.\nFOL: all x. (Cold(x) & Green(x) -> Nice(x))\nTEXT: All big, young people are nice.\nFOL: all x. (Big(x) & Young(x) -> Nice(x))\nTEXT: All green people are cold.\nFOL: all x. (Green(x) -> Cold(x))\nTEXT: The rabbit does not eat the rabbit.\nFOL: -Eat(rabbit, rabbit)\n</EVALUATE>"
  ]
 },
 {
  "index": 131,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is green to the job, which is why he turned blue from being so cold.\nFOL: Bob greenToJob -> Bob blueFromCold\nTEXT: Green, big and red are qualities which all describe Charlie.\nFOL: all x. (Green(x) & Big(x) & Red(x) -> Charlie(x))\nTEXT: Dave is a kind person and he is also often cold.\nFOL: Dave kindPerson & Dave oftenCold\nTEXT: Gary is a really nice guy with a big round body, usually wearing red.\nFOL: Gary niceGuy & Gary bigBody & Gary redClothing\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: all x. (Big(x) & Round(x) & Kind(x) -> Naive(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: all x. (Blue(x) & Big(x) -> Cold(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: -Big(x) & Cold(x) -> kindPerson(x)\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: Big(x) & Red(x) -> Blue(x)\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> kindToOthers(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: Cold(x) & Red(x) & Blue(x) -> Big(x)\nTEXT: Charlie is big.\nFOL: Charlie Big\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green to the job, which is why he turned blue from being so cold.\nFOL: Bob greenToJob -> Bob blueFromCold\nTEXT: Green, big and red are qualities which all describe Charlie.\nFOL: all x. (Green(x) & Big(x) & Red(x) -> Charlie(x))\nTEXT: Dave is a kind person and he is also often cold.\nFOL: Dave kindPerson & Dave oftenCold\nTEXT: Gary is a really nice guy with a big round body, usually wearing red.\nFOL: Gary niceGuy & Gary bigBody & Gary redClothing\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: all x. (Big(x) & Round(x) & Kind(x) -> Naive(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: all x. (Blue(x) & Big(x) -> Cold(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: -Big(x) & Cold(x) -> kind(x)\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: Big(x) & Red(x) -> Blue(x)\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> kind(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: Cold(x) & Red(x) & Blue(x) -> Big(x)\nTEXT: Charlie is big.\nFOL: Charlie Big\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green to the job, which is why he turned blue from being so cold.\nFOL: Bob greenToJob -> Bob blueFromCold\nTEXT: Green, big and red are qualities which all describe Charlie.\nFOL: all x. (Green(x) & Big(x) & Red(x) -> Charlie(x))\nTEXT: Dave is a kind person and he is also often cold.\nFOL: Dave kindPerson & Dave oftenCold\nTEXT: Gary is a really nice guy with a big round body, usually wearing red.\nFOL: Gary niceGuy & Gary bigBody & Gary redClothing\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: all x. (Big(x) & Round(x) & Kind(x) -> Naive(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: all x. (Blue(x) & Big(x) -> Cold(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: -Big(x) & Cold(x) -> kind(x)\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: Big(x) & Red(x) -> Blue(x)\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> kindToOthers(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: Cold(x) & Red(x) & Blue(x) -> Big(x)\nTEXT: Charlie is big.\nFOL: Charlie Big\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green to the job, which is why he turned blue from being so cold.\nFOL: Bob greenToJob -> Bob blueFromCold\nTEXT: Green, big and red are qualities which all describe Charlie.\nFOL: all x. (Green(x) & Big(x) & Red(x) -> Charlie(x))\nTEXT: Dave is a kind person and he is also often cold.\nFOL: Dave kindPerson & Dave oftenCold\nTEXT: Gary is a really nice guy with a big round body, usually wearing red.\nFOL: Gary niceGuy & Gary bigBody & Gary redClothing\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: all x. (Big(x) & Round(x) & Kind(x) -> Naive(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: all x. (Blue(x) & Big(x) -> Cold(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: -Big(x) & Cold(x) -> kind(x)\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: Big(x) & Red(x) -> Blue(x)\nTEXT: Cold and red people are always kind to others.\nFOL: Cold(x) & Red(x) -> kindToOthers(x)\nTEXT: A person who is cold and red and blue is big.\nFOL: Cold(x) & Red(x) & Blue(x) -> Big(x)\nTEXT: Charlie is big.\nFOL: Charlie Big\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is green to the job, which is why he turned blue from being so cold.\nFOL: Bob greenToJob -> Bob blueFromCold\nTEXT: Green, big and red are qualities which all describe Charlie.\nFOL: all x. (Green(x) & Big(x) & Red(x) -> Charlie(x))\nTEXT: Dave is a kind person and he is also often cold.\nFOL: Dave kindPerson & Dave oftenCold\nTEXT: Gary is a really nice guy with a big round body, usually wearing red.\nFOL: Gary niceGuy & Gary bigBody & Gary redClothing\nTEXT: A person with big, round, kind face appears to be rough around the edges because they are naive.\nFOL: all x. (Big(x) & Round(x) & Kind(x) -> Naive(x))\nTEXT: A person feeling blue because of their big size will always be cold.\nFOL: all x. (Blue(x) & Big(x) -> Cold(x))\nTEXT: Do not fear big cold people for they are often kind.\nFOL: -Big(x) & Cold(x) -> kind(x)\nTEXT: A person that is very big and also the color red they will also be blue.\nFOL: Big(x) & Red(x) -> Blue(x)\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> kind(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: Cold(x) & Red(x) & Blue(x) -> Big(x)\nTEXT: Charlie is big.\nFOL: Charlie(x) -> Big(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 132,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle sees the rabbit.\nFOL: BaldEagle(sees(rabbit))\nTEXT: The lion is not big.\nFOL: -Big(Lion)\nTEXT: The lion is kind.\nFOL: Kind(Lion)\nTEXT: The lion likes the bald eagle.\nFOL: Likes(Lion, BaldEagle)\nTEXT: The lion sees the squirrel.\nFOL: Lion(sees(squirrel))\nTEXT: The rabbit is not big.\nFOL: -Big(Rabbit)\nTEXT: The squirrel is not green.\nFOL: -Green(Squirrel)\nTEXT: The squirrel is red.\nFOL: Red(Squirrel)\nTEXT: The squirrel does not like the lion.\nFOL: -Likes(Squirrel, Lion)\nTEXT: The squirrel sees the rabbit.\nFOL: Squirrel(sees(rabbit))\nTEXT: If something likes the squirrel and it likes the rabbit then it does not see the bald eagle.\nFOL: all x. ((Likes(x, Squirrel) & Likes(x, Rabbit)) -> -BaldEagle(sees(x)))\nTEXT: If something likes the rabbit then it chases the lion.\nFOL: all x. (Likes(x, Rabbit) -> Chases(x, Lion))\nTEXT: If something likes the lion then the lion sees the bald eagle.\nFOL: all x. (Likes(x, Lion) -> BaldEagle(sees(x)))\nTEXT: If something is nice and it chases the rabbit then the rabbit likes the lion.\nFOL: all x. (Nice(x) & Chases(x, Rabbit) -> Likes(Rabbit, Lion))\nTEXT: If something chases the lion then it is nice.\nFOL: all x. (Chases(x, Lion) -> Nice(x))\nTEXT: If something is red then it likes the rabbit.\nFOL: all x. (Red(x) -> Likes(x, Rabbit))\nTEXT: The squirrel is nice.\nFOL: Nice(Squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle sees the rabbit.\nFOL: BaldEagle(sees(rabbit))\nTEXT: The lion is not big.\nFOL: -Big(Lion)\nTEXT: The lion is kind.\nFOL: Kind(Lion)\nTEXT: The lion likes the bald eagle.\nFOL: Likes(Lion, BaldEagle)\nTEXT: The lion sees the squirrel.\nFOL: Lion(sees(squirrel))\nTEXT: The rabbit is not big.\nFOL: -Big(Rabbit)\nTEXT: The squirrel is not green.\nFOL: -Green(Squirrel)\nTEXT: The squirrel is red.\nFOL: Red(Squirrel)\nTEXT: The squirrel does not like the lion.\nFOL: -Likes(Squirrel, Lion)\nTEXT: The squirrel sees the rabbit.\nFOL: Squirrel(sees(rabbit))\nTEXT: If something likes the squirrel and it likes the rabbit then it does not see the bald eagle.\nFOL: all x. ((Likes(x, Squirrel) & Likes(x, Rabbit)) -> -BaldEagle(sees(x)))\nTEXT: If something likes the rabbit then it chases the lion.\nFOL: all x. (Likes(x, Rabbit) -> Chases(x, Lion))\nTEXT: If something likes the lion then the lion sees the bald eagle.\nFOL: all x. (Likes(x, Lion) -> BaldEagle(sees(x)))\nTEXT: If something is nice and it chases the rabbit then the rabbit likes the lion.\nFOL: all x. ((Nice(x) & Chases(x, Rabbit)) -> Likes(Rabbit, Lion))\nTEXT: If something chases the lion then it is nice.\nFOL: all x. (Chases(x, Lion) -> Nice(x))\nTEXT: If something is red then it likes the rabbit.\nFOL: all x. (Red(x) -> Likes(x, Rabbit))\nTEXT: The squirrel is nice.\nFOL: Nice(Squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle sees the rabbit.\nFOL: BaldEagle(sees(rabbit))\nTEXT: The lion is not big.\nFOL: -Big(Lion)\nTEXT: The lion is kind.\nFOL: Kind(Lion)\nTEXT: The lion likes the bald eagle.\nFOL: Likes(Lion, BaldEagle)\nTEXT: The lion sees the squirrel.\nFOL: Lion(sees(squirrel))\nTEXT: The rabbit is not big.\nFOL: -Big(Rabbit)\nTEXT: The squirrel is not green.\nFOL: -Green(Squirrel)\nTEXT: The squirrel is red.\nFOL: Red(Squirrel)\nTEXT: The squirrel does not like the lion.\nFOL: -Likes(Squirrel, Lion)\nTEXT: The squirrel sees the rabbit.\nFOL: Squirrel(sees(rabbit))\nTEXT: If something likes the squirrel and it likes the rabbit then it does not see the bald eagle.\nFOL: all x. (Likes(x, Squirrel) & Likes(x, Rabbit) & -Likes(x, BaldEagle))\nTEXT: If something likes the rabbit then it chases the lion.\nFOL: all x. (Likes(x, Rabbit) -> Chases(x, Lion))\nTEXT: If something likes the lion then the lion sees the bald eagle.\nFOL: all x. (Likes(x, Lion) -> Lion(sees(BaldEagle)))\nTEXT: If something is nice and it chases the rabbit then the rabbit likes the lion.\nFOL: all x. (Nice(x) & Chases(x, Rabbit) -> Likes(Rabbit, Lion))\nTEXT: If something chases the lion then it is nice.\nFOL: all x. (Chases(x, Lion) -> Nice(x))\nTEXT: If something is red then it likes the rabbit.\nFOL: all x. (Red(x) -> Likes(x, Rabbit))\nTEXT: The squirrel is nice.\nFOL: Nice(Squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle sees the rabbit.\nFOL: BaldEagle(seesRabbit)\nTEXT: The lion is not big.\nFOL: -Big(Lion)\nTEXT: The lion is kind.\nFOL: Kind(Lion)\nTEXT: The lion likes the bald eagle.\nFOL: Likes(Lion, BaldEagle)\nTEXT: The lion sees the squirrel.\nFOL: Lion(seesSquirrel)\nTEXT: The rabbit is not big.\nFOL: -Big(Rabbit)\nTEXT: The squirrel is not green.\nFOL: -Green(Squirrel)\nTEXT: The squirrel is red.\nFOL: Red(Squirrel)\nTEXT: The squirrel does not like the lion.\nFOL: -Likes(Squirrel, Lion)\nTEXT: The squirrel sees the rabbit.\nFOL: Squirrel(seesRabbit)\nTEXT: If something likes the squirrel and it likes the rabbit then it does not see the bald eagle.\nFOL: all x. ((Likes(x, Squirrel) & Likes(x, Rabbit)) -> -BaldEagle(seesRabbit))\nTEXT: If something likes the rabbit then it chases the lion.\nFOL: all x. (Likes(x, Rabbit) -> Chases(x, Lion))\nTEXT: If something likes the lion then the lion sees the bald eagle.\nFOL: all x. (Likes(x, Lion) -> BaldEagle(seesBaldEagle))\nTEXT: If something is nice and it chases the rabbit then the rabbit likes the lion.\nFOL: all x. (Nice(x) & Chases(x, Rabbit) -> Likes(Rabbit, Lion))\nTEXT: If something chases the lion then it is nice.\nFOL: all x. (Chases(x, Lion) -> Nice(x))\nTEXT: If something is red then it likes the rabbit.\nFOL: all x. (Red(x) -> Likes(x, Rabbit))\nTEXT: The squirrel is nice.\nFOL: Nice(Squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle sees the rabbit.\nFOL: BaldEagle(sees(rabbit))\nTEXT: The lion is not big.\nFOL: -Big(Lion)\nTEXT: The lion is kind.\nFOL: Kind(Lion)\nTEXT: The lion likes the bald eagle.\nFOL: Likes(Lion, BaldEagle)\nTEXT: The lion sees the squirrel.\nFOL: Lion(sees(squirrel))\nTEXT: The rabbit is not big.\nFOL: -Big(Rabbit)\nTEXT: The squirrel is not green.\nFOL: -Green(Squirrel)\nTEXT: The squirrel is red.\nFOL: Red(Squirrel)\nTEXT: The squirrel does not like the lion.\nFOL: -Likes(Squirrel, Lion)\nTEXT: The squirrel sees the rabbit.\nFOL: Squirrel(sees(rabbit))\nTEXT: If something likes the squirrel and it likes the rabbit then it does not see the bald eagle.\nFOL: all x. ((Likes(x, Squirrel) & Likes(x, Rabbit)) -> -BaldEagle(sees(x)))\nTEXT: If something likes the rabbit then it chases the lion.\nFOL: all x. (Likes(x, Rabbit) -> Chases(x, Lion))\nTEXT: If something likes the lion then the lion sees the bald eagle.\nFOL: all x. (Likes(x, Lion) -> BaldEagle(sees(Lion)))\nTEXT: If something is nice and it chases the rabbit then the rabbit likes the lion.\nFOL: all x. (Nice(x) & Chases(x, Rabbit) -> Likes(Rabbit, Lion))\nTEXT: If something chases the lion then it is nice.\nFOL: all x. (Chases(x, Lion) -> Nice(x))\nTEXT: If something is red then it likes the rabbit.\nFOL: all x. (Red(x) -> Likes(x, Rabbit))\nTEXT: The squirrel is nice.\nFOL: Nice(Squirrel)\n</EVALUATE>"
  ]
 },
 {
  "index": 133,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: BaldEagle(eagle) -> EatsRabbit(rabbit)\nTEXT: The bald eagle is green.\nFOL: BaldEagle(eagle) -> Green(eagle)\nTEXT: The bald eagle is kind.\nFOL: BaldEagle(eagle) -> Kind(eagle)\nTEXT: The bald eagle needs the tiger.\nFOL: BaldEagle(eagle) -> NeedsTiger(tiger)\nTEXT: The cat is green.\nFOL: Cat(cat) -> Green(cat)\nTEXT: The cat needs the rabbit.\nFOL: Cat(cat) -> NeedsRabbit(rabbit)\nTEXT: The rabbit chases the cat.\nFOL: Rabbit(rabbit) -> ChasesCat(cat)\nTEXT: The rabbit eats the cat.\nFOL: Rabbit(rabbit) -> EatsCat(cat)\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(rabbit) -> EatsTiger(tiger)\nTEXT: The rabbit needs the tiger.\nFOL: Rabbit(rabbit) -> NeedsTiger(tiger)\nTEXT: The tiger chases the cat.\nFOL: Tiger(tiger) -> ChasesCat(cat)\nTEXT: The tiger needs the bald eagle.\nFOL: Tiger(tiger) -> NeedsBaldEagle(eagle)\nTEXT: If something needs the rabbit and it is kind then it eats the rabbit.\nFOL: all x. ((NeedsRabbit(x) & Kind(x)) -> EatsRabbit(x))\nTEXT: If something needs the bald eagle and it chases the cat then the cat is young.\nFOL: all x. ((NeedsBaldEagle(x) & ChasesCat(x)) -> YoungCat(x))\nTEXT: If the tiger chases the cat then the cat is round.\nFOL: Tiger(tiger) -> ChasesCat(cat) -> RoundCat(cat)\nTEXT: If something chases the cat then it needs the rabbit.\nFOL: all x. (ChasesCat(x) -> NeedsRabbit(x))\nTEXT: If something needs the rabbit then it eats the cat.\nFOL: all x. (NeedsRabbit(x) -> EatsCat(x))\nTEXT: If something eats the cat then it chases the tiger.\nFOL: all x. (EatsCat(x) -> ChasesTiger(x))\nTEXT: The cat needs the tiger.\nFOL: Cat(cat) -> NeedsTiger(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: BaldEagle(eagle) -> Eat(Rabbit(rabbit))\nTEXT: The bald eagle is green.\nFOL: BaldEagle(eagle) -> Green(eagle)\nTEXT: The bald eagle is kind.\nFOL: BaldEagle(eagle) -> Kind(eagle)\nTEXT: The bald eagle needs the tiger.\nFOL: BaldEagle(eagle) -> Need(Tiger(tiger))\nTEXT: The cat is green.\nFOL: Cat(cat) -> Green(cat)\nTEXT: The cat needs the rabbit.\nFOL: Cat(cat) -> Need(Rabbit(rabbit))\nTEXT: The rabbit chases the cat.\nFOL: Rabbit(rabbit) -> Chase(Cat(cat))\nTEXT: The rabbit eats the cat.\nFOL: Rabbit(rabbit) -> Eat(Cat(cat))\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(rabbit) -> Eat(Tiger(tiger))\nTEXT: The rabbit needs the tiger.\nFOL: Rabbit(rabbit) -> Need(Tiger(tiger))\nTEXT: The tiger chases the cat.\nFOL: Tiger(tiger) -> Chase(Cat(cat))\nTEXT: The tiger needs the bald eagle.\nFOL: Tiger(tiger) -> Need(BaldEagle(eagle))\nTEXT: If something needs the rabbit and it is kind then it eats the rabbit.\nFOL: all x. ((Need(Rabbit(rabbit)) & Kind(x)) -> Eat(Rabbit(rabbit)))\nTEXT: If something needs the bald eagle and it chases the cat then the cat is young.\nFOL: all x. ((Need(BaldEagle(eagle)) & Chase(Cat(cat))) -> Young(Cat(cat)))\nTEXT: If the tiger chases the cat then the cat is round.\nFOL: (Tiger(tiger) -> Chase(Cat(cat))) -> Round(Cat(cat))\nTEXT: If something chases the cat then it needs the rabbit.\nFOL: all x. (Chase(Cat(cat)) -> Need(Rabbit(rabbit)))\nTEXT: If something needs the rabbit then it eats the cat.\nFOL: all x. (Need(Rabbit(rabbit)) -> Eat(Cat(cat)))\nTEXT: The cat needs the tiger.\nFOL: Cat(cat) -> Need(Tiger(tiger))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: BaldEagle(eagle) -> Eat(Rabbit(rabbit))\nTEXT: The bald eagle is green.\nFOL: BaldEagle(eagle) -> Green(eagle)\nTEXT: The bald eagle is kind.\nFOL: BaldEagle(eagle) -> Kind(eagle)\nTEXT: The bald eagle needs the tiger.\nFOL: BaldEagle(eagle) -> Needs(Tiger(tiger))\nTEXT: The cat is green.\nFOL: Cat(cat) -> Green(cat)\nTEXT: The cat needs the rabbit.\nFOL: Cat(cat) -> Needs(Rabbit(rabbit))\nTEXT: The rabbit chases the cat.\nFOL: Rabbit(rabbit) -> Chases(Cat(cat))\nTEXT: The rabbit eats the cat.\nFOL: Rabbit(rabbit) -> Eat(Cat(cat))\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(rabbit) -> Eat(Tiger(tiger))\nTEXT: The rabbit needs the tiger.\nFOL: Rabbit(rabbit) -> Needs(Tiger(tiger))\nTEXT: The tiger chases the cat.\nFOL: Tiger(tiger) -> Chases(Cat(cat))\nTEXT: The tiger needs the bald eagle.\nFOL: Tiger(tiger) -> Needs(BaldEagle(eagle))\nTEXT: If something needs the rabbit and it is kind then it eats the rabbit.\nFOL: all x. ((Needs(Rabbit(rabbit)) & Kind(x)) -> Eat(Rabbit(rabbit)))\nTEXT: If something needs the bald eagle and it chases the cat then the cat is young.\nFOL: all x. ((Needs(BaldEagle(eagle)) & Chases(x, Cat(cat))) -> Young(Cat(cat)))\nTEXT: If the tiger chases the cat then the cat is round.\nFOL: (Tiger(tiger) -> Chases(Cat(cat))) -> Round(Cat(cat))\nTEXT: If something chases the cat then it needs the rabbit.\nFOL: all x. (Chases(x, Cat(cat)) -> Needs(Rabbit(rabbit)))\nTEXT: If something needs the rabbit then it eats the cat.\nFOL: all x. (Needs(Rabbit(rabbit)) -> Eat(Cat(cat)))\nTEXT: If something eats the cat then it chases the tiger.\nFOL: all x. (Eat(x, Cat(cat)) -> Chases(x, Tiger(tiger)))\nTEXT: The cat needs the tiger.\nFOL: Cat(cat) -> Needs(Tiger(tiger))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: BaldEagle(eagle) -> EatsRabbit(rabbit)\nTEXT: The bald eagle is green.\nFOL: BaldEagle(eagle) -> Green(eagle)\nTEXT: The bald eagle is kind.\nFOL: BaldEagle(eagle) -> Kind(eagle)\nTEXT: The bald eagle needs the tiger.\nFOL: BaldEagle(eagle) -> NeedsTiger(tiger)\nTEXT: The cat is green.\nFOL: Cat(cat) -> Green(cat)\nTEXT: The cat needs the rabbit.\nFOL: Cat(cat) -> NeedsRabbit(rabbit)\nTEXT: The rabbit chases the cat.\nFOL: Rabbit(rabbit) -> ChasesCat(cat)\nTEXT: The rabbit eats the cat.\nFOL: Rabbit(rabbit) -> EatsCat(cat)\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(rabbit) -> EatsTiger(tiger)\nTEXT: The rabbit needs the tiger.\nFOL: Rabbit(rabbit) -> NeedsTiger(tiger)\nTEXT: The tiger chases the cat.\nFOL: Tiger(tiger) -> ChasesCat(cat)\nTEXT: The tiger needs the bald eagle.\nFOL: Tiger(tiger) -> NeedsBaldEagle(eagle)\nTEXT: If something needs the rabbit and it is kind then it eats the rabbit.\nFOL: all x. ((NeedsRabbit(x) & Kind(x)) -> EatsRabbit(x))\nTEXT: If something needs the bald eagle and it chases the cat then the cat is young.\nFOL: all x. ((NeedsBaldEagle(x) & ChasesCat(x)) -> Young(cat))\nTEXT: If the tiger chases the cat then the cat is round.\nFOL: Tiger(tiger) -> ChasesCat(cat) -> Round(cat)\nTEXT: If something chases the cat then it needs the rabbit.\nFOL: all x. (ChasesCat(x) -> NeedsRabbit(x))\nTEXT: If something needs the rabbit then it eats the cat.\nFOL: all x. (NeedsRabbit(x) -> EatsCat(x))\nTEXT: If something eats the cat then it chases the tiger.\nFOL: all x. (EatsCat(x) -> ChasesTiger(x))\nTEXT: The cat needs the tiger.\nFOL: Cat(cat) -> NeedsTiger(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: BaldEagle(eagle) -> Eat(Rabbit(rabbit))\nTEXT: The bald eagle is green.\nFOL: BaldEagle(eagle) -> Green(eagle)\nTEXT: The bald eagle is kind.\nFOL: BaldEagle(eagle) -> Kind(eagle)\nTEXT: The bald eagle needs the tiger.\nFOL: BaldEagle(eagle) -> Needs(Tiger(tiger))\nTEXT: The cat is green.\nFOL: Cat(cat) -> Green(cat)\nTEXT: The cat needs the rabbit.\nFOL: Cat(cat) -> Needs(Rabbit(rabbit))\nTEXT: The rabbit chases the cat.\nFOL: Rabbit(rabbit) -> Chases(Cat(cat))\nTEXT: The rabbit eats the cat.\nFOL: Rabbit(rabbit) -> Eat(Cat(cat))\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(rabbit) -> Eat(Tiger(tiger))\nTEXT: The rabbit needs the tiger.\nFOL: Rabbit(rabbit) -> Needs(Tiger(tiger))\nTEXT: The tiger chases the cat.\nFOL: Tiger(tiger) -> Chases(Cat(cat))\nTEXT: The tiger needs the bald eagle.\nFOL: Tiger(tiger) -> Needs(BaldEagle(eagle))\nTEXT: If something needs the rabbit and it is kind then it eats the rabbit.\nFOL: all x. (Needs(Rabbit(rabbit)) & Kind(x) -> Eat(Rabbit(rabbit)))\nTEXT: If something needs the bald eagle and it chases the cat then the cat is young.\nFOL: all x. (Needs(BaldEagle(eagle)) & Chases(x, Cat(cat)) -> Young(Cat(cat)))\nTEXT: If the tiger chases the cat then the cat is round.\nFOL: Tiger(tiger) -> Chases(Cat(cat)) -> Round(Cat(cat))\nTEXT: If something chases the cat then it needs the rabbit.\nFOL: all x. (Chases(x, Cat(cat)) -> Needs(Rabbit(rabbit)))\nTEXT: If something needs the rabbit then it eats the cat.\nFOL: all x. (Needs(Rabbit(rabbit)) -> Eat(Cat(cat)))\nTEXT: If something eats the cat then it chases the tiger.\nFOL: all x. (Eat(x, Cat(cat)) -> Chases(x, Tiger(tiger)))\nTEXT: The cat needs the tiger.\nFOL: Cat(cat) -> Needs(Tiger(tiger))\n</EVALUATE>"
  ]
 },
 {
  "index": 134,
  "responses": [
   "<EVALUATE>\nTEXT: No one knows Bob like me and he is a kind guy, very round in the belly and green as grass.\nFOL: all x. (-Knows(x, bob) & Me(x) & Kind(x) & Round(x) & Green(x))\nTEXT: That guy Charlie sure is nice.\nFOL: Nice(Charlie)\nTEXT: Dave is shaped big and round like a balloon.\nFOL: Big(Dave) & Round(Dave)\nTEXT: His red color shows how kind he is.\nFOL: Red(Dave) -> Kind(Dave)\nTEXT: Young Gary here is always rough but nice and yes he is big.\nFOL: Young(Gary) & Rough(Gary) & Nice(Gary) & Big(Gary)\nTEXT: Young, red people are usually quite blue too.\nFOL: Young(x) & Red(x) -> Blue(x)\nTEXT: A nice but rough person will also be green and cold.\nFOL: Nice(x) & Rough(x) -> Green(x) & Cold(x)\nTEXT: Most young kind people tend to be red too.\nFOL: Young(x) & Kind(x) -> Red(x)\nTEXT: Why is it that every round person that is blue is so young.\nFOL: Round(x) & Blue(x) -> Young(x)\nTEXT: Young and red people look round.\nFOL: Young(x) & Red(x) -> Round(x)\nTEXT: I bet anyone who is round and kind is also pretty young.\nFOL: Round(x) & Kind(x) -> Young(x)\nTEXT: Dave is not cold.\nFOL: -Cold(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: No one knows Bob like me and he is a kind guy, very round in the belly and green as grass.\nFOL: all x. (-Knows(x, bob) & Me(x) & Kind(x) & Round(x) & Green(x))\nTEXT: That guy Charlie sure is nice.\nFOL: Nice(Charlie)\nTEXT: Dave is shaped big and round like a balloon.\nFOL: Big(Dave) & Round(Dave)\nTEXT: His red color shows how kind he is.\nFOL: Red(Dave) & Kind(Dave)\nTEXT: Young Gary here is always rough but nice and yes he is big.\nFOL: Young(Gary) & Rough(Gary) & Nice(Gary) & Big(Gary)\nTEXT: Young, red people are usually quite blue too.\nFOL: Young(x) & Red(x) -> Blue(x)\nTEXT: A nice but rough person will also be green and cold.\nFOL: Nice(x) & Rough(x) -> Green(x) & Cold(x)\nTEXT: Most young kind people tend to be red too.\nFOL: Young(x) & Kind(x) -> Red(x)\nTEXT: Why is it that every round person that is blue is so young.\nFOL: Round(x) & Blue(x) -> Young(x)\nTEXT: Young and red people look round.\nFOL: Young(x) & Red(x) -> Round(x)\nTEXT: I bet anyone who is round and kind is also pretty young.\nFOL: Round(x) & Kind(x) -> Young(x)\nTEXT: Dave is not cold.\nFOL: -Cold(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: No one knows Bob like me and he is a kind guy, very round in the belly and green as grass.\nFOL: all x. (-Knows(x, bob) & Me(x) & Kind(x) & Round(x) & Green(x))\nTEXT: That guy Charlie sure is nice.\nFOL: Nice(Charlie)\nTEXT: Dave is shaped big and round like a balloon.\nFOL: Big(Dave) & Round(Dave)\nTEXT: His red color shows how kind he is.\nFOL: Red(Dave) -> Kind(Dave)\nTEXT: Young Gary here is always rough but nice and yes he is big.\nFOL: Young(Gary) & Rough(Gary) & Nice(Gary) & Big(Gary)\nTEXT: Young, red people are usually quite blue too.\nFOL: Red(x) & Young(x) -> Blue(x)\nTEXT: A nice but rough person will also be green and cold.\nFOL: Nice(x) & Rough(x) -> Green(x) & Cold(x)\nTEXT: Most young kind people tend to be red too.\nFOL: Young(x) & Kind(x) -> Red(x)\nTEXT: Why is it that every round person that is blue is so young.\nFOL: Round(x) & Blue(x) -> Young(x)\nTEXT: Young and red people look round.\nFOL: Young(x) & Red(x) -> Round(x)\nTEXT: I bet anyone who is round and kind is also pretty young.\nFOL: Round(x) & Kind(x) -> Young(x)\nTEXT: Dave is not cold.\nFOL: -Cold(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: No one knows Bob like me and he is a kind guy, very round in the belly and green as grass.\nFOL: all x. (-Knows(x, bob) & Me(x) & Kind(x) & Round(x) & Green(x))\nTEXT: That guy Charlie sure is nice.\nFOL: Nice(Charlie)\nTEXT: Dave is shaped big and round like a balloon.\nFOL: Big(Dave) & Round(Dave)\nTEXT: His red color shows how kind he is.\nFOL: Red(Dave) -> Kind(Dave)\nTEXT: Young Gary here is always rough but nice and yes he is big.\nFOL: Young(Gary) & Rough(Gary) & Nice(Gary) & Big(Gary)\nTEXT: Young, red people are usually quite blue too.\nFOL: Young(x) & Red(x) -> Blue(x)\nTEXT: A nice but rough person will also be green and cold.\nFOL: Nice(x) & Rough(x) -> Green(x) & Cold(x)\nTEXT: Most young kind people tend to be red too.\nFOL: Young(x) & Kind(x) -> Red(x)\nTEXT: Why is it that every round person that is blue is so young.\nFOL: Round(x) & Blue(x) -> Young(x)\nTEXT: Young and red people look round.\nFOL: Young(x) & Red(x) -> Round(x)\nTEXT: I bet anyone who is round and kind is also pretty young.\nFOL: Round(x) & Kind(x) -> PrettyYoung(x)\nTEXT: Dave is not cold.\nFOL: -Cold(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: No one knows Bob like me and he is a kind guy, very round in the belly and green as grass.\nFOL: all x. (-Knows(x, bob) & Me(x) & Kind(x) & Round(x) & Green(x))\nTEXT: That guy Charlie sure is nice.\nFOL: Nice(Charlie)\nTEXT: Dave is shaped big and round like a balloon.\nFOL: Big(Dave) & Round(Dave)\nTEXT: His red color shows how kind he is.\nFOL: Red(Dave) -> Kind(Dave)\nTEXT: Young Gary here is always rough but nice and yes he is big.\nFOL: Young(Gary) & Rough(Gary) & Nice(Gary) & Big(Gary)\nTEXT: Young, red people are usually quite blue too.\nFOL: Red(x) & Young(x) -> Blue(x)\nTEXT: A nice but rough person will also be green and cold.\nFOL: Nice(x) & Rough(x) -> Green(x) & Cold(x)\nTEXT: Most young kind people tend to be red too.\nFOL: Young(x) & Kind(x) -> Red(x)\nTEXT: Why is it that every round person that is blue is so young.\nFOL: Blue(x) & Round(x) -> Young(x)\nTEXT: Young and red people look round.\nFOL: Young(x) & Red(x) -> Round(x)\nTEXT: I bet anyone who is round and kind is also pretty young.\nFOL: Round(x) & Kind(x) -> Young(x)\nTEXT: Dave is not cold.\nFOL: -Cold(Dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 135,
  "responses": [
   "<EVALUATE>\nTEXT: The dog is red.\nFOL: Dog(dog) -> Red(dog)\nTEXT: The squirrel is cold.\nFOL: Squirrel(squirrel) -> Cold(squirrel)\nTEXT: The tiger eats the dog.\nFOL: Tiger(tiger) & Dog(dog) -> Eat(tiger, dog)\nTEXT: If someone eats the dog then the dog sees the squirrel.\nFOL: all x. (Eat(x, dog) -> See(x, squirrel))\nTEXT: If someone sees the tiger then the tiger eats the dog.\nFOL: all x. (See(x, tiger) -> Eat(tiger, dog))\nTEXT: If someone eats the tiger then they chase the dog.\nFOL: all x. (Eat(x, tiger) -> Chase(x, dog))\nTEXT: If someone chases the dog and they are kind then they are cold.\nFOL: all x. (Chase(x, dog) & Kind(x) -> Cold(x))\nTEXT: If someone is kind and they chase the squirrel then the squirrel eats the dog.\nFOL: all x. (Kind(x) & Chase(x, squirrel) -> Eat(squirrel, dog))\nTEXT: If someone sees the squirrel then the squirrel eats the tiger.\nFOL: all x. (See(x, squirrel) -> Eat(squirrel, tiger))\nTEXT: The squirrel chases the dog.\nFOL: Squirrel(squirrel) & Dog(dog) -> Chase(squirrel, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is red.\nFOL: Dog(dog) -> Red(dog)\nTEXT: The squirrel is cold.\nFOL: Squirrel(squirrel) -> Cold(squirrel)\nTEXT: The tiger eats the dog.\nFOL: Tiger(tiger) & Dog(dog) -> Eat(tiger, dog)\nTEXT: If someone eats the dog then the dog sees the squirrel.\nFOL: all x. (Eat(x, dog) -> See(x, squirrel))\nTEXT: If someone sees the tiger then the tiger eats the dog.\nFOL: all x. (See(x, tiger) -> Eat(tiger, dog))\nTEXT: If someone eats the tiger then they chase the dog.\nFOL: all x. (Eat(x, tiger) -> Chase(x, dog))\nTEXT: If someone chases the dog and they are kind then they are cold.\nFOL: all x. ((Chase(x, dog) & Kind(x)) -> Cold(x))\nTEXT: If someone is kind and they chase the squirrel then the squirrel eats the dog.\nFOL: all x. ((Kind(x) & Chase(x, squirrel)) -> Eat(squirrel, dog))\nTEXT: If someone sees the squirrel then the squirrel eats the tiger.\nFOL: all x. (See(x, squirrel) -> Eat(squirrel, tiger))\nTEXT: The squirrel chases the dog.\nFOL: Squirrel(squirrel) & Dog(dog) -> Chase(squirrel, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is red.\nFOL: Dog(dog) -> Red(dog)\nTEXT: The squirrel is cold.\nFOL: Squirrel(squirrel) -> Cold(squirrel)\nTEXT: The tiger eats the dog.\nFOL: Tiger(tiger) & Dog(dog) -> Eats(tiger, dog)\nTEXT: If someone eats the dog then the dog sees the squirrel.\nFOL: all x. (Eats(x, dog) -> Sees(x, squirrel))\nTEXT: If someone sees the tiger then the tiger eats the dog.\nFOL: all x. (Sees(x, tiger) -> Eats(tiger, dog))\nTEXT: If someone eats the tiger then they chase the dog.\nFOL: all x. (Eats(x, tiger) -> Chases(x, dog))\nTEXT: If someone chases the dog and they are kind then they are cold.\nFOL: all x. (Chases(x, dog) & Kind(x) -> Cold(x))\nTEXT: If someone is kind and they chase the squirrel then the squirrel eats the dog.\nFOL: all x. (Kind(x) & Chases(x, squirrel) -> Eats(squirrel, dog))\nTEXT: If someone sees the squirrel then the squirrel eats the tiger.\nFOL: all x. (Sees(x, squirrel) -> Eats(squirrel, tiger))\nTEXT: The squirrel chases the dog.\nFOL: Squirrel(squirrel) & Dog(dog) -> Chases(squirrel, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is red.\nFOL: Dog(dog) -> Red(dog)\nTEXT: The squirrel is cold.\nFOL: Squirrel(squirrel) -> Cold(squirrel)\nTEXT: The tiger eats the dog.\nFOL: Tiger(tiger) & Dog(dog) -> Eats(tiger, dog)\nTEXT: If someone eats the dog then the dog sees the squirrel.\nFOL: all x. (Eats(x, dog) -> Sees(dog, squirrel))\nTEXT: If someone sees the tiger then the tiger eats the dog.\nFOL: all x. (Sees(x, tiger) -> Eats(tiger, dog))\nTEXT: If someone eats the tiger then they chase the dog.\nFOL: all x. (Eats(x, tiger) -> Chases(x, dog))\nTEXT: If someone chases the dog and they are kind then they are cold.\nFOL: all x. (Chases(x, dog) & Kind(x) -> Cold(x))\nTEXT: If someone is kind and they chase the squirrel then the squirrel eats the dog.\nFOL: all x. (Kind(x) & Chases(x, squirrel) -> Eats(squirrel, dog))\nTEXT: If someone sees the squirrel then the squirrel eats the tiger.\nFOL: all x. (Sees(x, squirrel) -> Eats(squirrel, tiger))\nTEXT: The squirrel chases the dog.\nFOL: Squirrel(squirrel) & Dog(dog) -> Chases(squirrel, dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is red.\nFOL: Dog(dog) -> Red(dog)\nTEXT: The squirrel is cold.\nFOL: Squirrel(squirrel) -> Cold(squirrel)\nTEXT: The tiger eats the dog.\nFOL: Tiger(tiger) & Dog(dog) -> Eat(tiger, dog)\nTEXT: If someone eats the dog then the dog sees the squirrel.\nFOL: exists x. (Eat(x, dog) -> See(dog, squirrel))\nTEXT: If someone sees the tiger then the tiger eats the dog.\nFOL: exists x. (See(x, tiger) -> Eat(tiger, dog))\nTEXT: If someone eats the tiger then they chase the dog.\nFOL: exists x. (Eat(x, tiger) -> Chase(x, dog))\nTEXT: If someone chases the dog and they are kind then they are cold.\nFOL: exists x. (Chase(x, dog) & Kind(x) -> Cold(x))\nTEXT: If someone is kind and they chase the squirrel then the squirrel eats the dog.\nFOL: exists x. (Kind(x) & Chase(x, squirrel) -> Eat(squirrel, dog))\nTEXT: If someone sees the squirrel then the squirrel eats the tiger.\nFOL: exists x. (See(x, squirrel) -> Eat(squirrel, tiger))\nTEXT: The squirrel chases the dog.\nFOL: Squirrel(squirrel) & Dog(dog) -> Chase(squirrel, dog)\n</EVALUATE>"
  ]
 },
 {
  "index": 136,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is rough.\nFOL: Bob(Rough)\nTEXT: Dave is cold.\nFOL: Dave(Cold)\nTEXT: Round people are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If someone is cold and round then they are green.\nFOL: all x. (Cold(x) & Round(x) -> Green(x))\nTEXT: All blue people are rough.\nFOL: all x. (Blue(x) -> Rough(x))\nTEXT: If someone is round then they are nice.\nFOL: all x. (Round(x) -> Nice(x))\nTEXT: If someone is big and round then they are cold.\nFOL: all x. ((Big(x) & Round(x)) -> Cold(x))\nTEXT: If someone is rough then they are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: Nice, big people are green.\nFOL: all x. (Nice(x) & Big(x) -> Green(x))\nTEXT: If Bob is green and Bob is rough then Bob is nice.\nFOL: Bob(Green) & Bob(Rough) -> Bob(Nice)\nTEXT: Dave is not blue.\nFOL: -Dave(Blue)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is rough.\nFOL: Bob(Rough)\nTEXT: Dave is cold.\nFOL: Dave(Cold)\nTEXT: Round people are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If someone is cold and round then they are green.\nFOL: all x. (Cold(x) & Round(x) -> Green(x))\nTEXT: All blue people are rough.\nFOL: all x. (Blue(x) -> Rough(x))\nTEXT: If someone is round then they are nice.\nFOL: all x. (Round(x) -> Nice(x))\nTEXT: If someone is big and round then they are cold.\nFOL: all x. (Big(x) & Round(x) -> Cold(x))\nTEXT: If someone is rough then they are round.\nFOL: all x. (Rough(x) -> Round(x))\nTEXT: Nice, big people are green.\nFOL: all x. (Nice(x) & Big(x) -> Green(x))\nTEXT: If Bob is green and Bob is rough then Bob is nice.\nFOL: Bob(Green) & Bob(Rough) -> Bob(Nice)\nTEXT: Dave is not blue.\nFOL: -Dave(Blue)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is rough.\nFOL: BobRough\n\nTEXT: Dave is cold.\nFOL: DaveCold\n\nTEXT: Round people are big.\nFOL: all x. (Round(x) -> Big(x))\n\nTEXT: If someone is cold and round then they are green.\nFOL: all x. (Cold(x) & Round(x) -> Green(x))\n\nTEXT: All blue people are rough.\nFOL: all x. (Blue(x) -> BobRough)\n\nTEXT: If someone is round then they are nice.\nFOL: all x. (Round(x) -> Nice(x))\n\nTEXT: If someone is big and round then they are cold.\nFOL: all x. ((Big(x) & Round(x)) -> DaveCold)\n\nTEXT: If someone is rough then they are round.\nFOL: all x. (BobRough(x) -> Round(x))\n\nTEXT: Nice, big people are green.\nFOL: all x. (Nice(x) & Big(x) -> Green(x))\n\nTEXT: If Bob is green and Bob is rough then Bob is nice.\nFOL: BobGreen & BobRough -> Nice(Bob)\n\nTEXT: Dave is not blue.\nFOL: -Blue(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is rough.\nFOL: BobRough\n\nTEXT: Dave is cold.\nFOL: DaveCold\n\nTEXT: Round people are big.\nFOL: all x. (Round(x) -> Big(x))\n\nTEXT: If someone is cold and round then they are green.\nFOL: all x. (Cold(x) & Round(x) -> Green(x))\n\nTEXT: All blue people are rough.\nFOL: all x. (Blue(x) -> BobRough)\n\nTEXT: If someone is round then they are nice.\nFOL: all x. (Round(x) -> Nice(x))\n\nTEXT: If someone is big and round then they are cold.\nFOL: all x. ((Big(x) & Round(x)) -> DaveCold)\n\nTEXT: If someone is rough then they are round.\nFOL: all x. (BobRough(x) -> Round(x))\n\nTEXT: Nice, big people are green.\nFOL: all x. (Nice(x) & Big(x) -> Green(x))\n\nTEXT: If Bob is green and Bob is rough then Bob is nice.\nFOL: BobGreen & BobRough -> BobNice\n\nTEXT: Dave is not blue.\nFOL: -Blue(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is rough.\nFOL: BobRough\nTEXT: Dave is cold.\nFOL: DaveCold\nTEXT: Round people are big.\nFOL: all x. (Round(x) -> Big(x))\nTEXT: If someone is cold and round then they are green.\nFOL: all x. (Cold(x) & Round(x) -> Green(x))\nTEXT: All blue people are rough.\nFOL: all x. (Blue(x) -> BobRough)\nTEXT: If someone is round then they are nice.\nFOL: all x. (Round(x) -> Nice(x))\nTEXT: If someone is big and round then they are cold.\nFOL: all x. (Big(x) & Round(x) -> DaveCold)\nTEXT: If someone is rough then they are round.\nFOL: all x. (BobRough(x) -> Round(x))\nTEXT: Nice, big people are green.\nFOL: all x. (Nice(x) & Big(x) -> Green(x))\nTEXT: If Bob is green and Bob is rough then Bob is nice.\nFOL: BobGreen & BobRough -> BobNice\nTEXT: Dave is not blue.\nFOL: -Blue(Dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 137,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Erin is young.\nFOL: Young(erin)\nTEXT: Gary is white.\nFOL: White(gary)\nTEXT: All white, young things are not smart.\nFOL: all x. (White(x) & Young(x) -> -Smart(x))\nTEXT: All rough things are not smart.\nFOL: all x. (Rough(x) -> -Smart(x))\nTEXT: Green things are cold.\nFOL: all x. (Green(x) -> Cold(x))\nTEXT: If something is rough then it is not green.\nFOL: all x. (Rough(x) -> -Green(x))\nTEXT: Young things are green.\nFOL: all x. (Young(x) -> Green(x))\nTEXT: Rough, young things are blue.\nFOL: all x. (Rough(x) & Young(x) -> Blue(x))\nTEXT: White things are young.\nFOL: all x. (White(x) -> Young(x))\nTEXT: If something is white and not rough then it is young.\nFOL: all x. ((White(x) & -Rough(x)) -> Young(x))\nTEXT: Erin is not white.\nFOL: -White(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(Bob)\nTEXT: Erin is young.\nFOL: Young(erin)\nTEXT: Gary is white.\nFOL: White(gary)\nTEXT: All white, young things are not smart.\nFOL: all x. (White(x) & Young(x) -> -Smart(x))\nTEXT: All rough things are not smart.\nFOL: all x. (Rough(x) -> -Smart(x))\nTEXT: Green things are cold.\nFOL: all x. (Green(x) -> Cold(x))\nTEXT: If something is rough then it is not green.\nFOL: all x. (Rough(x) -> -Green(x))\nTEXT: Young things are green.\nFOL: all x. (Young(x) -> Green(x))\nTEXT: Rough, young things are blue.\nFOL: all x. (Rough(x) & Young(x) -> Blue(x))\nTEXT: White things are young.\nFOL: all x. (White(x) -> Young(x))\nTEXT: If something is white and not rough then it is young.\nFOL: all x. ((White(x) & -Rough(x)) -> Young(x))\nTEXT: Erin is not white.\nFOL: -White(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Erin is young.\nFOL: Young(erin)\nTEXT: Gary is white.\nFOL: White(gary)\nTEXT: All white, young things are not smart.\nFOL: all x. (White(x) & Young(x) -> -Smart(x))\nTEXT: All rough things are not smart.\nFOL: all x. (Rough(x) -> -Smart(x))\nTEXT: Green things are cold.\nFOL: all x. (Green(x) -> Cold(x))\nTEXT: If something is rough then it is not green.\nFOL: all x. (Rough(x) -> -Green(x))\nTEXT: Young things are green.\nFOL: all x. (Young(x) -> Green(x))\nTEXT: Rough, young things are blue.\nFOL: all x. (Rough(x) & Young(x) -> Blue(x))\nTEXT: White things are young.\nFOL: all x. (White(x) -> Young(x))\nTEXT: If something is white and not rough then it is young.\nFOL: all x. ((White(x) & -Rough(x)) -> Young(x))\nTEXT: Erin is not white.\nFOL: -White(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(bob)\nTEXT: Erin is young.\nFOL: Young(erin)\nTEXT: Gary is white.\nFOL: White(gary)\nTEXT: All white, young things are not smart.\nFOL: all x. (White(x) & Young(x) -> -Smart(x))\nTEXT: All rough things are not smart.\nFOL: all x. (Rough(x) -> -Smart(x))\nTEXT: Green things are cold.\nFOL: all x. (Green(x) -> Cold(x))\nTEXT: If something is rough then it is not green.\nFOL: all x. (Rough(x) -> -Green(x))\nTEXT: Young things are green.\nFOL: all x. (Young(x) -> Green(x))\nTEXT: Rough, young things are blue.\nFOL: all x. (Rough(x) & Young(x) -> Blue(x))\nTEXT: White things are young.\nFOL: all x. (White(x) -> Young(x))\nTEXT: If something is white and not rough then it is young.\nFOL: all x. (White(x) & -Rough(x) -> Young(x))\nTEXT: Erin is not white.\nFOL: -White(erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is white.\nFOL: White(bob)\n\nTEXT: Erin is young.\nFOL: Young(erin)\n\nTEXT: Gary is white.\nFOL: White(gary)\n\nTEXT: All white, young things are not smart.\nFOL: all x. (White(x) & Young(x) -> -Smart(x))\n\nTEXT: All rough things are not smart.\nFOL: all x. (Rough(x) -> -Smart(x))\n\nTEXT: Green things are cold.\nFOL: all x. (Green(x) -> Cold(x))\n\nTEXT: If something is rough then it is not green.\nFOL: all x. (Rough(x) -> -Green(x))\n\nTEXT: Young things are green.\nFOL: all x. (Young(x) -> Green(x))\n\nTEXT: Rough, young things are blue.\nFOL: all x. (Rough(x) & Young(x) -> Blue(x))\n\nTEXT: White things are young.\nFOL: all x. (White(x) -> Young(x))\n\nTEXT: If something is white and not rough then it is young.\nFOL: all x. ((White(x) & -Rough(x)) -> Young(x))\n\nTEXT: Erin is not white.\nFOL: -White(erin)\n</EVALUATE>"
  ]
 },
 {
  "index": 138,
  "responses": [
   "<EVALUATE>\nTEXT: Charlie is green.\nFOL: Charlie green\nTEXT: Charlie is kind.\nFOL: Charlie kind\nTEXT: Charlie is quiet.\nFOL: Charlie quiet\nTEXT: Charlie is white.\nFOL: Charlie white\nTEXT: Dave is furry.\nFOL: Dave furry\nTEXT: Dave is quiet.\nFOL: Dave quiet\nTEXT: Dave is rough.\nFOL: Dave rough\nTEXT: Dave is smart.\nFOL: Dave smart\nTEXT: Erin is quiet.\nFOL: Erin quiet\nTEXT: Gary is furry.\nFOL: Gary furry\nTEXT: Gary is kind.\nFOL: Gary kind\nTEXT: Gary is rough.\nFOL: Gary rough\nTEXT: All furry, rough people are quiet.\nFOL: all x. (Furry(x) & Rough(x) -> Quiet(x))\nTEXT: If someone is green and smart then they are quiet.\nFOL: all x. (Green(x) & Smart(x) -> Quiet(x))\nTEXT: All furry, quiet people are kind.\nFOL: all x. (Furry(x) & Quiet(x) -> Kind(x))\nTEXT: All white, furry people are kind.\nFOL: all x. (White(x) & Furry(x) -> Kind(x))\nTEXT: If Dave is white and Dave is kind then Dave is green.\nFOL: Dave white & Dave kind -> Dave green\nTEXT: If someone is quiet then they are kind.\nFOL: all x. (Quiet(x) -> Kind(x))\nTEXT: All kind people are white.\nFOL: all x. (Kind(x) -> White(x))\nTEXT: White, green people are smart.\nFOL: all x. (White(x) & Green(x) -> Smart(x))\nTEXT: Gary is smart.\nFOL: Gary smart\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is green.\nFOL: Green(Charlie)\nTEXT: Charlie is kind.\nFOL: Kind(Charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(Charlie)\nTEXT: Charlie is white.\nFOL: White(Charlie)\nTEXT: Dave is furry.\nFOL: Furry(Dave)\nTEXT: Dave is quiet.\nFOL: Quiet(Dave)\nTEXT: Dave is rough.\nFOL: Rough(Dave)\nTEXT: Dave is smart.\nFOL: Smart(Dave)\nTEXT: Erin is quiet.\nFOL: Quiet(Erin)\nTEXT: Gary is furry.\nFOL: Furry(Gary)\nTEXT: Gary is kind.\nFOL: Kind(Gary)\nTEXT: Gary is rough.\nFOL: Rough(Gary)\nTEXT: All furry, rough people are quiet.\nFOL: all x. (Furry(x) & Rough(x) -> Quiet(x))\nTEXT: If someone is green and smart then they are quiet.\nFOL: all x. (Green(x) & Smart(x) -> Quiet(x))\nTEXT: All furry, quiet people are kind.\nFOL: all x. (Furry(x) & Quiet(x) -> Kind(x))\nTEXT: All white, furry people are kind.\nFOL: all x. (White(x) & Furry(x) -> Kind(x))\nTEXT: If Dave is white and Dave is kind then Dave is green.\nFOL: (White(Dave) & Kind(Dave)) -> Green(Dave)\nTEXT: If someone is quiet then they are kind.\nFOL: all x. (Quiet(x) -> Kind(x))\nTEXT: All kind people are white.\nFOL: all x. (Kind(x) -> White(x))\nTEXT: White, green people are smart.\nFOL: all x. (White(x) & Green(x) -> Smart(x))\nTEXT: Gary is smart.\nFOL: Smart(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is green.\nFOL: Green(Charlie)\nTEXT: Charlie is kind.\nFOL: Kind(Charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(Charlie)\nTEXT: Charlie is white.\nFOL: White(Charlie)\nTEXT: Dave is furry.\nFOL: Furry(Dave)\nTEXT: Dave is quiet.\nFOL: Quiet(Dave)\nTEXT: Dave is rough.\nFOL: Rough(Dave)\nTEXT: Dave is smart.\nFOL: Smart(Dave)\nTEXT: Erin is quiet.\nFOL: Quiet(Erin)\nTEXT: Gary is furry.\nFOL: Furry(Gary)\nTEXT: Gary is kind.\nFOL: Kind(Gary)\nTEXT: Gary is rough.\nFOL: Rough(Gary)\nTEXT: All furry, rough people are quiet.\nFOL: all x. (Furry(x) & Rough(x) -> Quiet(x))\nTEXT: If someone is green and smart then they are quiet.\nFOL: all x. (Green(x) & Smart(x) -> Quiet(x))\nTEXT: All furry, quiet people are kind.\nFOL: all x. (Furry(x) & Quiet(x) -> Kind(x))\nTEXT: All white, furry people are kind.\nFOL: all x. (White(x) & Furry(x) -> Kind(x))\nTEXT: If Dave is white and Dave is kind then Dave is green.\nFOL: (White(Dave) & Kind(Dave)) -> Green(Dave)\nTEXT: If someone is quiet then they are kind.\nFOL: all x. (Quiet(x) -> Kind(x))\nTEXT: All kind people are white.\nFOL: all x. (Kind(x) -> White(x))\nTEXT: White, green people are smart.\nFOL: all x. (White(x) & Green(x) -> Smart(x))\nTEXT: Gary is smart.\nFOL: Smart(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is green.\nFOL: Green(Charlie)\nTEXT: Charlie is kind.\nFOL: Kind(Charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(Charlie)\nTEXT: Charlie is white.\nFOL: White(Charlie)\nTEXT: Dave is furry.\nFOL: Furry(Dave)\nTEXT: Dave is quiet.\nFOL: Quiet(Dave)\nTEXT: Dave is rough.\nFOL: Rough(Dave)\nTEXT: Dave is smart.\nFOL: Smart(Dave)\nTEXT: Erin is quiet.\nFOL: Quiet(Erin)\nTEXT: Gary is furry.\nFOL: Furry(Gary)\nTEXT: Gary is kind.\nFOL: Kind(Gary)\nTEXT: Gary is rough.\nFOL: Rough(Gary)\nTEXT: All furry, rough people are quiet.\nFOL: all x. (Furry(x) & Rough(x) -> Quiet(x))\nTEXT: If someone is green and smart then they are quiet.\nFOL: all x. (Green(x) & Smart(x) -> Quiet(x))\nTEXT: All furry, quiet people are kind.\nFOL: all x. (Furry(x) & Quiet(x) -> Kind(x))\nTEXT: All white, furry people are kind.\nFOL: all x. (White(x) & Furry(x) -> Kind(x))\nTEXT: If Dave is white and Dave is kind then Dave is green.\nFOL: (White(Dave) & Kind(Dave) -> Green(Dave))\nTEXT: If someone is quiet then they are kind.\nFOL: all x. (Quiet(x) -> Kind(x))\nTEXT: All kind people are white.\nFOL: all x. (Kind(x) -> White(x))\nTEXT: White, green people are smart.\nFOL: all x. (White(x) & Green(x) -> Smart(x))\nTEXT: Gary is smart.\nFOL: Smart(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is green.\nFOL: Green(Charlie)\nTEXT: Charlie is kind.\nFOL: Kind(Charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(Charlie)\nTEXT: Charlie is white.\nFOL: White(Charlie)\nTEXT: Dave is furry.\nFOL: Furry(Dave)\nTEXT: Dave is quiet.\nFOL: Quiet(Dave)\nTEXT: Dave is rough.\nFOL: Rough(Dave)\nTEXT: Dave is smart.\nFOL: Smart(Dave)\nTEXT: Erin is quiet.\nFOL: Quiet(Erin)\nTEXT: Gary is furry.\nFOL: Furry(Gary)\nTEXT: Gary is kind.\nFOL: Kind(Gary)\nTEXT: Gary is rough.\nFOL: Rough(Gary)\nTEXT: All furry, rough people are quiet.\nFOL: all x. (Furry(x) & Rough(x) -> Quiet(x))\nTEXT: If someone is green and smart then they are quiet.\nFOL: all x. (Green(x) & Smart(x) -> Quiet(x))\nTEXT: All furry, quiet people are kind.\nFOL: all x. (Furry(x) & Quiet(x) -> Kind(x))\nTEXT: All white, furry people are kind.\nFOL: all x. (White(x) & Furry(x) -> Kind(x))\nTEXT: If Dave is white and Dave is kind then Dave is green.\nFOL: (White(Dave) & Kind(Dave) -> Green(Dave))\nTEXT: If someone is quiet then they are kind.\nFOL: all x. (Quiet(x) -> Kind(x))\nTEXT: All kind people are white.\nFOL: all x. (Kind(x) -> White(x))\nTEXT: White, green people are smart.\nFOL: all x. (White(x) & Green(x) -> Smart(x))\nTEXT: Gary is smart.\nFOL: Smart(Gary)\n</EVALUATE>"
  ]
 },
 {
  "index": 139,
  "responses": [
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Guy(Alan) & Nice(Alan)\n\nTEXT: Bob is kind and nice and looks green.\nFOL: Bob & Kind(Bob) & Nice(Bob) & Green(Bob)\n\nTEXT: Harry is a young man who is rather round and kind.\nFOL: YoungMan(Harry) & Round(Harry) & Kind(Harry)\n\nTEXT: Harry is feeling blue because he has a sunburn that is making him rather red and he is also rather ill which makes him appear green.\nFOL: FeelingBlue(Harry) & Sunburn(Harry) & Red(Harry) & Ill(Harry) & Green(Harry)\n\nTEXT: A very nice person who is also green is certainly kind.\nFOL: Nice(x) & Green(x) & Kind(x)\n\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: Rough(x) & Nice(x) & Round(x) & Big(x)\n\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: Kind(x) & Cold(x) & Blue(x) & Big(x)\n\nTEXT: A person who is kind and rough and blue is young.\nFOL: Kind(x) & Rough(x) & Blue(x) & YoungMan(x)\n\nTEXT: People turn green when they are feeling blue.\nFOL: FeelingBlue(x) & Green(x)\n\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: ColoredBlue(x) & Kind(x) & Nice(x) & Cold(x)\n\nTEXT: A nice and green man or woman is also red in color.\nFOL: Nice(x) & Green(x) & Red(x)\n\nTEXT: Alan is round.\nFOL: Round(Alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Guy(Alan) & Nice(Alan)\n\nTEXT: Bob is kind and nice and looks green.\nFOL: Bob & Kind(Bob) & Nice(Bob) & Green(Bob)\n\nTEXT: Harry is a young man who is rather round and kind.\nFOL: YoungMan(Harry) & Round(Harry) & Kind(Harry)\n\nTEXT: Harry is feeling blue because he has a sunburn that is making him rather red and he is also rather ill which makes him appear green.\nFOL: FeelingBlue(Harry) & Sunburn(Harry) & Red(Harry) & Ill(Harry) & Green(Harry)\n\nTEXT: A very nice person who is also green is certainly kind.\nFOL: Nice(x) & Green(x) & Kind(x)\n\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: Rough(x) & Nice(x) & Round(x) & Big(x)\n\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: Kind(x) & Cold(x) & Blue(x) & Big(x)\n\nTEXT: A person who is kind and rough and blue is young.\nFOL: Kind(x) & Rough(x) & Blue(x) & YoungMan(x)\n\nTEXT: People turn green when they are feeling blue.\nFOL: FeelingBlue(x) & Green(x)\n\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: ColoredBlue(x) & Kind(x) & Nice(x) & Cold(x)\n\nTEXT: A nice and green man or woman is also red in color.\nFOL: Nice(x) & Green(x) & Red(x)\n\nTEXT: Alan is round.\nFOL: Alan & Round(Alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Guy(Alan) & Nice(Alan)\n\nTEXT: Bob is kind and nice and looks green.\nFOL: Bob & Kind(Bob) & Nice(Bob) & Green(Bob)\n\nTEXT: Harry is a young man who is rather round and kind.\nFOL: YoungMan(Harry) & Round(Harry) & Kind(Harry)\n\nTEXT: Harry is feeling blue because he has a sunburn that is making him rather red and he is also rather ill which makes him appear green.\nFOL: FeelingBlue(Harry) & Sunburn(Harry) & Red(Harry) & Ill(Harry) & Green(Harry)\n\nTEXT: A very nice person who is also green is certainly kind.\nFOL: Nice(x) & Green(x) & Kind(x)\n\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: PlayRough(x) & Nice(x) & Round(x) & Big(x)\n\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: Kind(x) & Cold(x) & Blue(x) & Big(x)\n\nTEXT: A person who is kind and rough and blue is young.\nFOL: Kind(x) & Rough(x) & Blue(x) & YoungMan(x)\n\nTEXT: People turn green when they are feeling blue.\nFOL: FeelingBlue(x) & Green(x)\n\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: ColoredBlue(x) & Kind(x) & Nice(x) & Cold(x)\n\nTEXT: A nice and green man or woman is also red in color.\nFOL: Nice(x) & Green(x) & Red(x)\n\nTEXT: Alan is round.\nFOL: Round(Alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Guy(Alan) & Nice(Alan)\n\nTEXT: Bob is kind and nice and looks green.\nFOL: Bob & Kind(Bob) & Nice(Bob) & Green(Bob)\n\nTEXT: Harry is a young man who is rather round and kind.\nFOL: YoungMan(Harry) & Round(Harry) & Kind(Harry)\n\nTEXT: Harry is feeling blue because he has a sunburn that is making him rather red and he is also rather ill which makes him appear green.\nFOL: FeelingBlue(Harry) & Sunburn(Harry) & Red(Harry) & Ill(Harry) & Green(Harry)\n\nTEXT: A very nice person who is also green is certainly kind.\nFOL: Nice(x) & Green(x) & Kind(x)\n\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: PlaysRough(x) & Nice(x) & Round(x) & Big(x)\n\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: Kind(x) & Cold(x) & Blue(x) & Big(x)\n\nTEXT: A person who is kind and rough and blue is young.\nFOL: Kind(x) & Rough(x) & Blue(x) & YoungMan(x)\n\nTEXT: People turn green when they are feeling blue.\nFOL: FeelingBlue(x) & Green(x)\n\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: ColoredBlue(x) & Kind(x) & Nice(x) & Cold(x)\n\nTEXT: A nice and green man or woman is also red in color.\nFOL: Nice(x) & Green(x) & Red(x)\n\nTEXT: Alan is round.\nFOL: Round(Alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Guy(Alan) & Nice(Alan)\n\nTEXT: Bob is kind and nice and looks green.\nFOL: Bob & Kind(Bob) & Nice(Bob) & Green(Bob)\n\nTEXT: Harry is a young man who is rather round and kind.\nFOL: YoungMan(Harry) & Round(Harry) & Kind(Harry)\n\nTEXT: Harry is feeling blue because he has a sunburn that is making him rather red and he is also rather ill which makes him appear green.\nFOL: FeelingBlue(Harry) & Sunburn(Harry) & Red(Harry) & Ill(Harry) & Green(Harry)\n\nTEXT: A very nice person who is also green is certainly kind.\nFOL: Nice(x) & Green(x) & Kind(x)\n\nTEXT: If someone plays rough and is nice and round, they will be big.\nFOL: PlayRough(x) & Nice(x) & Round(x) & Big(x)\n\nTEXT: When someone is kind yet can be cold and blue, they will also be very big.\nFOL: Kind(x) & Cold(x) & Blue(x) & Big(x)\n\nTEXT: A person who is kind and rough and blue is young.\nFOL: Kind(x) & Rough(x) & Blue(x) & YoungMan(x)\n\nTEXT: People turn green when they are feeling blue.\nFOL: FeelingBlue(x) & Green(x)\n\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: ColoredBlue(x) & Kind(x) & Nice(x) & Cold(x)\n\nTEXT: A nice and green man or woman is also red in color.\nFOL: Nice(x) & Green(x) & Red(x)\n\nTEXT: Alan is round.\nFOL: Alan & Round(Alan)\n</EVALUATE>"
  ]
 },
 {
  "index": 140,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle visits the rabbit.\nFOL: BaldEagle(visits(rabbit))\n\nTEXT: The rabbit chases the bald eagle.\nFOL: Rabbit(chases(baldEagle))\n\nTEXT: The rabbit visits the bald eagle.\nFOL: Rabbit(visits(baldEagle))\n\nTEXT: If something chases the bald eagle and it visits the bald eagle then it sees the bald eagle.\nFOL: all x. ((Chases(x, baldEagle) & visits(x, baldEagle)) -> Sees(x, baldEagle))\n\nTEXT: If something sees the rabbit then the rabbit chases the bald eagle.\nFOL: all x. (Sees(x, rabbit) -> Chases(rabbit, baldEagle))\n\nTEXT: If something is red and it chases the rabbit then the rabbit is big.\nFOL: all x. (Red(x) & Chases(x, rabbit) -> Big(rabbit))\n\nTEXT: The rabbit visits the bald eagle.\nFOL: Rabbit(visits(baldEagle))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle visits the rabbit.\nFOL: BaldEagle(visits(rabbit))\nTEXT: The rabbit chases the bald eagle.\nFOL: Rabbit(chases(baldEagle))\nTEXT: The rabbit visits the bald eagle.\nFOL: Rabbit(visits(baldEagle))\nTEXT: If something chases the bald eagle and it visits the bald eagle then it sees the bald eagle.\nFOL: all x. ((Chases(x, baldEagle) & visits(x, baldEagle)) -> Sees(x, baldEagle))\nTEXT: If something sees the rabbit then the rabbit chases the bald eagle.\nFOL: all x. (Sees(x, rabbit) -> Chases(rabbit, baldEagle))\nTEXT: If something is red and it chases the rabbit then the rabbit is big.\nFOL: all x. (Red(x) & Chases(x, rabbit) -> Big(rabbit))\nTEXT: The rabbit visits the bald eagle.\nFOL: Rabbit(visits(baldEagle))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle visits the rabbit.\nFOL: BaldEagle(visits(rabbit))\n\nTEXT: The rabbit chases the bald eagle.\nFOL: rabbit(chases(baldEagle))\n\nTEXT: The rabbit visits the bald eagle.\nFOL: rabbit(visits(baldEagle))\n\nTEXT: If something chases the bald eagle and it visits the bald eagle then it sees the bald eagle.\nFOL: all x. ((chases(x, baldEagle) & visits(x, baldEagle)) -> sees(x, baldEagle))\n\nTEXT: If something sees the rabbit then the rabbit chases the bald eagle.\nFOL: all x. (sees(x, rabbit) -> rabbit(chases(baldEagle)))\n\nTEXT: If something is red and it chases the rabbit then the rabbit is big.\nFOL: all x. (Red(x) & chases(x, rabbit) -> rabbit(isBig(x)))\n\nTEXT: The rabbit visits the bald eagle.\nFOL: rabbit(visits(baldEagle))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle visits the rabbit.\nFOL: BaldEagle(visits(rabbit))\n\nTEXT: The rabbit chases the bald eagle.\nFOL: rabbit(chases(baldEagle))\n\nTEXT: The rabbit visits the bald eagle.\nFOL: rabbit(visits(baldEagle))\n\nTEXT: If something chases the bald eagle and it visits the bald eagle then it sees the bald eagle.\nFOL: exists x. (chases(x, baldEagle) & visits(x, baldEagle) -> sees(x, baldEagle))\n\nTEXT: If something sees the rabbit then the rabbit chases the bald eagle.\nFOL: exists x. (sees(x, rabbit) -> rabbit(chases(baldEagle)))\n\nTEXT: If something is red and it chases the rabbit then the rabbit is big.\nFOL: exists x. (Red(x) & chases(x, rabbit) -> rabbit(isBig(x)))\n\nTEXT: The rabbit visits the bald eagle.\nFOL: rabbit(visits(baldEagle))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle visits the rabbit.\nFOL: BaldEagle(visits(rabbit))\n\nTEXT: The rabbit chases the bald eagle.\nFOL: Rabbit(chases(baldEagle))\n\nTEXT: The rabbit visits the bald eagle.\nFOL: Rabbit(visits(baldEagle))\n\nTEXT: If something chases the bald eagle and it visits the bald eagle then it sees the bald eagle.\nFOL: all x. ((Chases(x, baldEagle) & visits(x, baldEagle)) -> Sees(x, baldEagle))\n\nTEXT: If something sees the rabbit then the rabbit chases the bald eagle.\nFOL: all x. (Sees(x, rabbit) -> chases(rabbit, baldEagle))\n\nTEXT: If something is red and it chases the rabbit then the rabbit is big.\nFOL: all x. (Red(x) & Chases(x, rabbit) -> Big(rabbit))\n\nTEXT: The rabbit visits the bald eagle.\nFOL: Rabbit(visits(baldEagle))\n</EVALUATE>"
  ]
 },
 {
  "index": 141,
  "responses": [
   "<EVALUATE>\nTEXT: Charlie is round but he is also nice and kind.\nFOL: Charlie(Round & Nice & Kind)\nTEXT: Dave is both young and red, but is nice and kind but he can be cold.\nFOL: Dave(Young & Red & Nice & Kind & -Cold)\nTEXT: The young person who is always feeling cold is named Fred.\nFOL: exists x. (Young(x) & Cold(x) & x = Fred)\nTEXT: Gary may be round, but he is also kind.\nFOL: Gary(Round & Kind)\nTEXT: Young people that are turning blue from being cold will be rough looking.\nFOL: all x. (Young(x) & Cold(x) & Blue(x) -> Rough(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: A person that is both nice and rough is someone who is also big.\nFOL: all x. (Nice(x) & Rough(x) -> Big(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Kind(x) & Round(x) -> Big(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> Kind(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: Cold(Blue & Rough & Kind)\nTEXT: Dave is rough.\nFOL: Dave(Rough)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is round but he is also nice and kind.\nFOL: Charlie(Round & Nice & Kind)\nTEXT: Dave is both young and red, but is nice and kind but he can be cold.\nFOL: Dave(Young & Red & Nice & Kind & -Cold)\nTEXT: The young person who is always feeling cold is named Fred.\nFOL: exists x. (Young(x) & Cold(x) & x = Fred)\nTEXT: Gary may be round, but he is also kind.\nFOL: Gary(Round & -Kind)\nTEXT: Young people that are turning blue from being cold will be rough looking.\nFOL: all x. (Young(x) & Cold(x) & Blue(x) -> Rough(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: A person that is both nice and rough is someone who is also big.\nFOL: all x. (Nice(x) & Rough(x) -> Big(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Kind(x) & Round(x) -> Big(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> Kind(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: Cold(Blue & Rough & Kind)\nTEXT: Dave is rough.\nFOL: Dave(Rough)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is round but he is also nice and kind.\nFOL: Charlie(Round & Nice & Kind)\nTEXT: Dave is both young and red, but is nice and kind but he can be cold.\nFOL: Dave(Young & Red & Nice & Kind & -Cold)\nTEXT: The young person who is always feeling cold is named Fred.\nFOL: exists x. (Young(x) & Cold(x) & x = Fred)\nTEXT: Gary may be round, but he is also kind.\nFOL: Gary(Round & Kind)\nTEXT: Young people that are turning blue from being cold will be rough looking.\nFOL: all x. (Young(x) & Cold(x) & Blue(x) -> Rough(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: A person that is both nice and rough is someone who is also big.\nFOL: all x. (Nice(x) & Rough(x) -> Big(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Kind(x) & Round(x) -> Big(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> Kind(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: Cold(Blue(x) & Rough(x) -> Kind(x))\nTEXT: Dave is rough.\nFOL: Dave(Rough)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is round but he is also nice and kind.\nFOL: Charlie(Round & Nice & Kind)\nTEXT: Dave is both young and red, but is nice and kind but he can be cold.\nFOL: Dave(Young & Red & Nice & Kind & -Cold)\nTEXT: The young person who is always feeling cold is named Fred.\nFOL: exists x. (Young(x) & Cold(x) & x = Fred)\nTEXT: Gary may be round, but he is also kind.\nFOL: Gary(Round & -Kind)\nTEXT: Young people that are turning blue from being cold will be rough looking.\nFOL: all x. (Young(x) & Cold(x) & Blue(x) -> Rough(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: A person that is both nice and rough is someone who is also big.\nFOL: all x. (Nice(x) & Rough(x) -> Big(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Kind(x) & Round(x) -> Big(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> Kind(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: Cold(Blue(x) & Rough(x) -> Kind(x))\nTEXT: Dave is rough.\nFOL: Dave(Rough)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is round but he is also nice and kind.\nFOL: Charlie(Round & Nice & Kind)\nTEXT: Dave is both young and red, but is nice and kind but he can be cold.\nFOL: Dave(Young & Red & Nice & Kind & -Cold)\nTEXT: The young person who is always feeling cold is named Fred.\nFOL: exists x. (Young(x) & Cold(x) & x = Fred)\nTEXT: Gary may be round, but he is also kind.\nFOL: Gary(Round & Kind)\nTEXT: Young people that are turning blue from being cold will be rough looking.\nFOL: all x. (Young(x) & Cold(x) & Blue(x) -> Rough(x))\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x. (Nice(x) & Kind(x) -> -Blue(x))\nTEXT: A person that is both nice and rough is someone who is also big.\nFOL: all x. (Nice(x) & Rough(x) -> Big(x))\nTEXT: Kind people that are round are on the big side.\nFOL: all x. (Kind(x) & Round(x) -> Big(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> Kind(x))\nTEXT: A cold blue person who is rough is also kind.\nFOL: Cold(Blue(x) & Rough(x) & Kind(x))\nTEXT: Dave is rough.\nFOL: Dave(Rough)\n</EVALUATE>"
  ]
 },
 {
  "index": 142,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Dave(big)\nTEXT: Dave is quiet.\nFOL: Dave(quiet)\nTEXT: Dave is rough.\nFOL: Dave(rough)\nTEXT: Dave is smart.\nFOL: Dave(smart)\nTEXT: Fiona is kind.\nFOL: Fiona(kind)\nTEXT: Fiona is quiet.\nFOL: Fiona(quiet)\nTEXT: Gary is green.\nFOL: Gary(green)\nTEXT: Gary is kind.\nFOL: Gary(kind)\nTEXT: Harry is big.\nFOL: Harry(big)\nTEXT: Harry is furry.\nFOL: Harry(furry)\nTEXT: Harry is kind.\nFOL: Harry(kind)\nTEXT: Harry is smart.\nFOL: Harry(smart)\nTEXT: Quiet, furry things are green.\nFOL: all x. (Quiet(x) & Furry(x) -> Green(x))\nTEXT: All furry, rough things are quiet.\nFOL: all x. (Furry(x) & Rough(x) -> Quiet(x))\nTEXT: If Fiona is quiet then Fiona is furry.\nFOL: Fiona(quiet) -> Fiona(furry)\nTEXT: Dave is smart.\nFOL: Dave(smart)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Dave(big)\nTEXT: Dave is quiet.\nFOL: Dave(quiet)\nTEXT: Dave is rough.\nFOL: Dave(rough)\nTEXT: Dave is smart.\nFOL: Dave(smart)\nTEXT: Fiona is kind.\nFOL: Fiona(kind)\nTEXT: Fiona is quiet.\nFOL: Fiona(quiet)\nTEXT: Gary is green.\nFOL: Gary(green)\nTEXT: Gary is kind.\nFOL: Gary(kind)\nTEXT: Harry is big.\nFOL: Harry(big)\nTEXT: Harry is furry.\nFOL: Harry(furry)\nTEXT: Harry is kind.\nFOL: Harry(kind)\nTEXT: Harry is smart.\nFOL: Harry(smart)\nTEXT: Quiet, furry things are green.\nFOL: all x. ((Furry(x) & Quiet(x)) -> Green(x))\nTEXT: All furry, rough things are quiet.\nFOL: all x. ((Furry(x) & Rough(x)) -> Quiet(x))\nTEXT: If Fiona is quiet then Fiona is furry.\nFOL: Fiona(quiet) -> Fiona(furry)\nTEXT: Dave is smart.\nFOL: Dave(smart)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Big(Dave)\nTEXT: Dave is quiet.\nFOL: Quiet(Dave)\nTEXT: Dave is rough.\nFOL: Rough(Dave)\nTEXT: Dave is smart.\nFOL: Smart(Dave)\nTEXT: Fiona is kind.\nFOL: Kind(Fiona)\nTEXT: Fiona is quiet.\nFOL: Quiet(Fiona)\nTEXT: Gary is green.\nFOL: Green(Gary)\nTEXT: Gary is kind.\nFOL: Kind(Gary)\nTEXT: Harry is big.\nFOL: Big(Harry)\nTEXT: Harry is furry.\nFOL: Furry(Harry)\nTEXT: Harry is kind.\nFOL: Kind(Harry)\nTEXT: Harry is smart.\nFOL: Smart(Harry)\nTEXT: Quiet, furry things are green.\nFOL: all x. (Quiet(x) & Furry(x) -> Green(x))\nTEXT: All furry, rough things are quiet.\nFOL: all x. (Furry(x) & Rough(x) -> Quiet(x))\nTEXT: If Fiona is quiet then Fiona is furry.\nFOL: Quiet(Fiona) -> Furry(Fiona)\nTEXT: Dave is smart.\nFOL: Smart(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Dave(big)\nTEXT: Dave is quiet.\nFOL: Dave(quiet)\nTEXT: Dave is rough.\nFOL: Dave(rough)\nTEXT: Dave is smart.\nFOL: Dave(smart)\nTEXT: Fiona is kind.\nFOL: Fiona(kind)\nTEXT: Fiona is quiet.\nFOL: Fiona(quiet)\nTEXT: Gary is green.\nFOL: Gary(green)\nTEXT: Gary is kind.\nFOL: Gary(kind)\nTEXT: Harry is big.\nFOL: Harry(big)\nTEXT: Harry is furry.\nFOL: Harry(furry)\nTEXT: Harry is kind.\nFOL: Harry(kind)\nTEXT: Harry is smart.\nFOL: Harry(smart)\nTEXT: Quiet, furry things are green.\nFOL: all x. ((Furry(x) & Quiet(x)) -> Green(x))\nTEXT: All furry, rough things are quiet.\nFOL: all x. ((Rough(x) & Furry(x)) -> Quiet(x))\nTEXT: If Fiona is quiet then Fiona is furry.\nFOL: Fiona(quiet) -> Fiona(furry)\nTEXT: Dave is smart.\nFOL: Dave(smart)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Big(Dave)\nTEXT: Dave is quiet.\nFOL: Quiet(Dave)\nTEXT: Dave is rough.\nFOL: Rough(Dave)\nTEXT: Dave is smart.\nFOL: Smart(Dave)\nTEXT: Fiona is kind.\nFOL: Kind(Fiona)\nTEXT: Fiona is quiet.\nFOL: Quiet(Fiona)\nTEXT: Gary is green.\nFOL: Green(Gary)\nTEXT: Gary is kind.\nFOL: Kind(Gary)\nTEXT: Harry is big.\nFOL: Big(Harry)\nTEXT: Harry is furry.\nFOL: Furry(Harry)\nTEXT: Harry is kind.\nFOL: Kind(Harry)\nTEXT: Harry is smart.\nFOL: Smart(Harry)\nTEXT: Quiet, furry things are green.\nFOL: all x. (Furry(x) & Quiet(x) -> Green(x))\nTEXT: All furry, rough things are quiet.\nFOL: all x. (Rough(x) & Furry(x) -> Quiet(x))\nTEXT: If Fiona is quiet then Fiona is furry.\nFOL: Fiona -> Quiet(Fiona) -> Furry(Fiona)\nTEXT: Dave is smart.\nFOL: Smart(Dave)\n</EVALUATE>"
  ]
 },
 {
  "index": 143,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: BaldEagle(eagle) -> EatsRabbit(rabbit)\nTEXT: The bald eagle is not blue.\nFOL: -Blue(eagle)\nTEXT: The bald eagle sees the mouse.\nFOL: BaldEagle(eagle) -> SeesMouse(mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: BaldEagle(eagle) -> SeesTiger(tiger)\nTEXT: The mouse is not kind.\nFOL: -Kind(mouse)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger sees the rabbit.\nFOL: SeesTiger(tiger) -> SeesRabbit(rabbit)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: Young(mouse) & EatsBaldEagle(mouse, eagle) -> NeedsRabbit(mouse, rabbit)\nTEXT: If something is blue then it eats the mouse.\nFOL: Blue(x) -> EatsMouse(x, mouse)\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: Kind(x) & -Young(x) -> EatsMouse(x, mouse)\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: SeesTiger(x) -> EatsRabbit(x, rabbit)\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: SeesRabbit(x) -> -Blue(rabbit)\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: EatsMouse(x, mouse) -> Blue(mouse)\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: NeedsRabbit(x, rabbit) & EatsRabbit(rabbit, tiger) -> SeesRabbit(tiger, rabbit)\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: EatsMouse(x, mouse) & EatsMouse(mouse, tiger) -> -SeesRabbit(mouse, rabbit)\nTEXT: The tiger is round.\nFOL: Round(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: BaldEagle(eagle) -> EatsRabbit(rabbit)\nTEXT: The bald eagle is not blue.\nFOL: -Blue(eagle)\nTEXT: The bald eagle sees the mouse.\nFOL: BaldEagle(eagle) -> SeesMouse(mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: BaldEagle(eagle) -> SeesTiger(tiger)\nTEXT: The mouse is not kind.\nFOL: -Kind(mouse)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger sees the rabbit.\nFOL: SeesTiger(tiger) -> SeesRabbit(rabbit)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: Young(mouse) & MouseEatsBaldEagle(mouse, eagle) -> NeedsRabbit(mouse)\nTEXT: If something is blue then it eats the mouse.\nFOL: Blue(x) -> EatsMouse(x)\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: Kind(x) & -Young(x) -> EatsMouse(x)\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: SeesTiger(x) -> EatsRabbit(x)\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: SeesRabbit(x) -> -Blue(rabbit)\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: EatsMouse(x) -> Blue(mouse)\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: NeedsRabbit(x) & RabbitEatsTiger(rabbit, tiger) -> SeesRabbit(tiger)\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: EatsMouse(x) & MouseEatsTiger(mouse, tiger) -> -SeesRabbit(mouse)\nTEXT: The tiger is round.\nFOL: Round(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: BaldEagle(eagle) -> EatsRabbit(rabbit)\nTEXT: The bald eagle is not blue.\nFOL: -Blue(eagle)\nTEXT: The bald eagle sees the mouse.\nFOL: BaldEagle(eagle) -> SeesMouse(mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: BaldEagle(eagle) -> SeesTiger(tiger)\nTEXT: The mouse is not kind.\nFOL: -Kind(mouse)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger sees the rabbit.\nFOL: SeesTiger(tiger) -> SeesRabbit(rabbit)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: Young(mouse) & EatsBaldEagle(mouse, eagle) -> NeedsRabbit(mouse, rabbit)\nTEXT: If something is blue then it eats the mouse.\nFOL: Blue(x) -> EatsMouse(x, mouse)\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: Kind(x) & -Young(x) -> EatsMouse(x, mouse)\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: SeesTiger(x, tiger) -> EatsRabbit(x, rabbit)\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: SeesRabbit(x, rabbit) -> -Blue(rabbit)\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: EatsMouse(x, mouse) -> Blue(mouse)\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: NeedsRabbit(x, rabbit) & EatsRabbit(rabbit, tiger) -> SeesRabbit(tiger, rabbit)\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: EatsMouse(x, mouse) & EatsMouse(mouse, tiger) -> -SeesRabbit(mouse, rabbit)\nTEXT: The tiger is round.\nFOL: Round(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: BaldEagle(eagle) -> EatsRabbit(rabbit)\nTEXT: The bald eagle is not blue.\nFOL: -Blue(eagle)\nTEXT: The bald eagle sees the mouse.\nFOL: BaldEagle(eagle) -> SeesMouse(mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: BaldEagle(eagle) -> SeesTiger(tiger)\nTEXT: The mouse is not kind.\nFOL: -Kind(mouse)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger sees the rabbit.\nFOL: SeesTiger(tiger) -> SeesRabbit(rabbit)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: Young(mouse) & EatsBaldEagle(mouse, eagle) -> NeedsRabbit(mouse, rabbit)\nTEXT: If something is blue then it eats the mouse.\nFOL: Blue(x) -> EatsMouse(x, mouse)\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: Kind(x) & -Young(x) -> EatsMouse(x, mouse)\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: SeesTiger(x) -> EatsRabbit(x, rabbit)\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: SeesRabbit(x) -> -Blue(rabbit)\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: EatsMouse(x, mouse) -> Blue(mouse)\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: NeedsRabbit(x, rabbit) & EatsRabbit(rabbit, tiger) -> SeesRabbit(tiger, rabbit)\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: EatsMouse(x, mouse) & EatsMouse(mouse, tiger) -> -SeesMouse(x, rabbit)\nTEXT: The tiger is round.\nFOL: Round(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the rabbit.\nFOL: BaldEagle(eagle) -> EatsRabbit(rabbit)\nTEXT: The bald eagle is not blue.\nFOL: -Blue(eagle)\nTEXT: The bald eagle sees the mouse.\nFOL: BaldEagle(eagle) -> SeesMouse(mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: BaldEagle(eagle) -> SeesTiger(tiger)\nTEXT: The mouse is not kind.\nFOL: -Kind(mouse)\nTEXT: The rabbit is kind.\nFOL: Kind(rabbit)\nTEXT: The rabbit is round.\nFOL: Round(rabbit)\nTEXT: The tiger is blue.\nFOL: Blue(tiger)\nTEXT: The tiger is green.\nFOL: Green(tiger)\nTEXT: The tiger sees the rabbit.\nFOL: SeesTiger(tiger) -> SeesRabbit(rabbit)\nTEXT: If the mouse is young and the mouse eats the bald eagle then the mouse needs the rabbit.\nFOL: Young(mouse) & EatsBaldEagle(mouse, eagle) -> NeedsRabbit(mouse, rabbit)\nTEXT: If something is blue then it eats the mouse.\nFOL: Blue(x) -> EatsMouse(x, mouse)\nTEXT: If something is kind and not young then it eats the mouse.\nFOL: Kind(x) & -Young(x) -> EatsMouse(x, mouse)\nTEXT: If something sees the tiger then it eats the rabbit.\nFOL: SeesTiger(x) -> EatsRabbit(x, rabbit)\nTEXT: If something sees the rabbit then the rabbit is not blue.\nFOL: SeesRabbit(x) -> -Blue(rabbit)\nTEXT: If something eats the mouse then the mouse is blue.\nFOL: EatsMouse(x, mouse) -> Blue(mouse)\nTEXT: If something needs the rabbit and the rabbit eats the tiger then the tiger sees the rabbit.\nFOL: NeedsRabbit(x, rabbit) & EatsRabbit(rabbit, tiger) -> SeesRabbit(tiger, rabbit)\nTEXT: If something eats the mouse and the mouse eats the tiger then the mouse does not see the rabbit.\nFOL: EatsMouse(x, mouse) & EatsBaldEagle(mouse, tiger) -> -SeesRabbit(mouse, rabbit)\nTEXT: The tiger is round.\nFOL: Round(tiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 144,
  "responses": [
   "<EVALUATE>\nTEXT: Fiona is big.\nFOL: Fiona(big)\n\nTEXT: Fiona is furry.\nFOL: Fiona(furry)\n\nTEXT: Fiona is quiet.\nFOL: Fiona(quiet)\n\nTEXT: All furry things are nice.\nFOL: all x. (Furry(x) -> Nice(x))\n\nTEXT: If something is quiet and furry then it is rough.\nFOL: all x. (Quiet(x) & Furry(x) -> Rough(x))\n\nTEXT: If Fiona is big and Fiona is white then Fiona is quiet.\nFOL: Fiona(big) & Fiona(white) -> Fiona(quiet)\n\nTEXT: If something is white then it is smart.\nFOL: all x. (White(x) -> Smart(x))\n\nTEXT: If Fiona is nice then Fiona is big.\nFOL: Fiona(nice) -> Fiona(big)\n\nTEXT: If Fiona is rough then Fiona is white.\nFOL: Fiona(rough) -> Fiona(white)\n\nTEXT: Fiona is not smart.\nFOL: -Fiona(smart)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Fiona is big.\nFOL: Fiona(big)\nTEXT: Fiona is furry.\nFOL: Fiona(furry)\nTEXT: Fiona is quiet.\nFOL: Fiona(quiet)\nTEXT: All furry things are nice.\nFOL: all x. (Furry(x) -> Nice(x))\nTEXT: If something is quiet and furry then it is rough.\nFOL: all x. (Quiet(x) & Furry(x) -> Rough(x))\nTEXT: If Fiona is big and Fiona is white then Fiona is quiet.\nFOL: Fiona(big) & Fiona(white) -> Fiona(quiet)\nTEXT: If something is white then it is smart.\nFOL: all x. (White(x) -> Smart(x))\nTEXT: If Fiona is nice then Fiona is big.\nFOL: Fiona(nice) -> Fiona(big)\nTEXT: If Fiona is rough then Fiona is white.\nFOL: Fiona(rough) -> Fiona(white)\nTEXT: Fiona is not smart.\nFOL: -Fiona(smart)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Fiona is big.\nFOL: Fiona(big)\nTEXT: Fiona is furry.\nFOL: Fiona(furry)\nTEXT: Fiona is quiet.\nFOL: Fiona(quiet)\nTEXT: All furry things are nice.\nFOL: all x. (Furry(x) -> Nice(x))\nTEXT: If something is quiet and furry then it is rough.\nFOL: all x. ((Quiet(x) & Furry(x)) -> Rough(x))\nTEXT: If Fiona is big and Fiona is white then Fiona is quiet.\nFOL: Fiona(big) & Fiona(white) -> Fiona(quiet)\nTEXT: If something is white then it is smart.\nFOL: all x. (White(x) -> Smart(x))\nTEXT: If Fiona is nice then Fiona is big.\nFOL: Fiona(nice) -> Fiona(big)\nTEXT: If Fiona is rough then Fiona is white.\nFOL: Fiona(rough) -> Fiona(white)\nTEXT: Fiona is not smart.\nFOL: -Fiona(smart)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Fiona is big.\nFOL: Fiona(big)\nTEXT: Fiona is furry.\nFOL: Fiona(furry)\nTEXT: Fiona is quiet.\nFOL: Fiona(quiet)\nTEXT: All furry things are nice.\nFOL: all x. (Furry(x) -> Nice(x))\nTEXT: If something is quiet and furry then it is rough.\nFOL: all x. ((Quiet(x) & Furry(x)) -> Rough(x))\nTEXT: If Fiona is big and Fiona is white then Fiona is quiet.\nFOL: (Fiona(big) & Fiona(white) -> Fiona(quiet))\nTEXT: If something is white then it is smart.\nFOL: all x. (White(x) -> Smart(x))\nTEXT: If Fiona is nice then Fiona is big.\nFOL: Fiona(nice) -> Fiona(big)\nTEXT: If Fiona is rough then Fiona is white.\nFOL: Fiona(rough) -> Fiona(white)\nTEXT: Fiona is not smart.\nFOL: -Fiona(smart)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Fiona is big.\nFOL: Fiona(big)\nTEXT: Fiona is furry.\nFOL: Fiona(furry)\nTEXT: Fiona is quiet.\nFOL: Fiona(quiet)\nTEXT: All furry things are nice.\nFOL: all x. (Furry(x) -> Nice(x))\nTEXT: If something is quiet and furry then it is rough.\nFOL: all x. ((Quiet(x) & Furry(x)) -> Rough(x))\nTEXT: If Fiona is big and Fiona is white then Fiona is quiet.\nFOL: (Fiona(big) & Fiona(white)) -> Fiona(quiet)\nTEXT: If something is white then it is smart.\nFOL: all x. (White(x) -> Smart(x))\nTEXT: If Fiona is nice then Fiona is big.\nFOL: Fiona(nice) -> Fiona(big)\nTEXT: If Fiona is rough then Fiona is white.\nFOL: Fiona(rough) -> Fiona(white)\nTEXT: Fiona is not smart.\nFOL: -Fiona(smart)\n</EVALUATE>"
  ]
 },
 {
  "index": 145,
  "responses": [
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: exists x. (Young(x) & Cold(x) & Name(x, charlie))\nTEXT: Eric is kind.\nFOL: Eric(kind)\nTEXT: He is also very cold and blue.\nFOL: Cold(he) & Blue(he)\nTEXT: Fred seems to be round.\nFOL: Round(fred)\nTEXT: Harry is green and cold too.\nFOL: Green(harry) & Cold(harry)\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> Nice(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) -> Kind(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Young(x) -> YoungLooking(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: all x. (Blue(x) & Kind(x) & Nice(x) -> Cold(x))\nTEXT: Harry is not young.\nFOL: -Young(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: exists x. (Young(x) & Cold(x) & Name(x, charlie))\nTEXT: Eric is kind.\nFOL: Eric(kind)\nTEXT: He is also very cold and blue.\nFOL: Cold(he) & Blue(he)\nTEXT: Fred seems to be round.\nFOL: Round(fred)\nTEXT: Harry is green and cold too.\nFOL: Green(harry) & Cold(harry)\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> Nice(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) -> Kind(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Young(x) -> YoungLooking(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: all x. ((Blue(x) & Kind(x) & Nice(x)) -> Cold(x))\nTEXT: Harry is not young.\nFOL: -Young(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: exists x. (Young(x) & Cold(x) & Name(x, charlie))\nTEXT: Eric is kind.\nFOL: Eric(kind)\nTEXT: He is also very cold and blue.\nFOL: Cold(he) & Blue(he)\nTEXT: Fred seems to be round.\nFOL: Round(fred)\nTEXT: Harry is green and cold too.\nFOL: Green(harry) & Cold(harry)\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> Nice(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) -> Kind(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Young(x) -> YoungLooking(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x) & Red(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: all x. (Blue(x) & Kind(x) & Nice(x) -> Cold(x))\nTEXT: Harry is not young.\nFOL: -Young(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: exists x. (Young(x) & Cold(x) & Name(x, charlie))\nTEXT: Eric is kind.\nFOL: Eric(kind)\nTEXT: He is also very cold and blue.\nFOL: Cold(he) & Blue(he)\nTEXT: Fred seems to be round.\nFOL: Round(fred)\nTEXT: Harry is green and cold too.\nFOL: Green(harry) & Cold(harry)\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> Nice(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) -> Kind(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Young(x) -> LookYoung(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x) & Red(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: all x. (Blue(x) & Kind(x) & Nice(x) -> Cold(x))\nTEXT: Harry is not young.\nFOL: -Young(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: exists x. (Young(x) & Cold(x) & Name(x, charlie))\nTEXT: Eric is kind.\nFOL: Eric(kind)\nTEXT: He is also very cold and blue.\nFOL: Cold(he) & Blue(he)\nTEXT: Fred seems to be round.\nFOL: Round(fred)\nTEXT: Harry is green and cold too.\nFOL: Green(harry) & Cold(harry)\nTEXT: A person who is cold and blue is nice.\nFOL: all x. (Cold(x) & Blue(x) -> Nice(x))\nTEXT: People who have red coloration usually treat people in a kind manner.\nFOL: all x. (Red(x) -> Kind(x))\nTEXT: They are also usually young looking.\nFOL: all x. (Young(x) -> LookYoung(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x) & Red(x))\nTEXT: When someone is colored blue and is both kind and nice to others then they are cold.\nFOL: all x. (Blue(x) & Kind(x) & Nice(x, y) -> Cold(x))\nTEXT: Harry is not young.\nFOL: -Young(harry)\n</EVALUATE>"
  ]
 },
 {
  "index": 146,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: Nice(anne)\n\nTEXT: Bob is red.\nFOL: Red(bob)\n\nTEXT: Bob is rough.\nFOL: Rough(bob)\n\nTEXT: Bob is young.\nFOL: Young(bob)\n\nTEXT: Charlie is red.\nFOL: Red(charlie)\n\nTEXT: Harry is round.\nFOL: Round(harry)\n\nTEXT: Harry is white.\nFOL: White(harry)\n\nTEXT: If Harry is nice then Harry is big.\nFOL: Nice(harry) -> Big(harry)\n\nTEXT: All young, white people are round.\nFOL: all x. (Young(x) & White(x) -> Round(x))\n\nTEXT: Red people are nice.\nFOL: all x. (Red(x) -> Nice(x))\n\nTEXT: If Charlie is nice and Charlie is round then Charlie is red.\nFOL: Nice(charlie) & Round(charlie) -> Red(charlie)\n\nTEXT: Rough, red people are big.\nFOL: Rough(x) & Red(x) -> Big(x)\n\nTEXT: All big people are white.\nFOL: all x. (Big(x) -> White(x))\n\nTEXT: Harry is not big.\nFOL: -Big(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is rough.\nFOL: Rough(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Charlie is red.\nFOL: Red(charlie)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: If Harry is nice then Harry is big.\nFOL: Nice(harry) -> Big(harry)\nTEXT: All young, white people are round.\nFOL: all x. (Young(x) & White(x) -> Round(x))\nTEXT: Red people are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If Charlie is nice and Charlie is round then Charlie is red.\nFOL: Nice(charlie) & Round(charlie) -> Red(charlie)\nTEXT: Rough, red people are big.\nFOL: Rough(x) & Red(x) -> Big(x)\nTEXT: All big people are white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: Harry is not big.\nFOL: -Big(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is rough.\nFOL: Rough(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Charlie is red.\nFOL: Red(charlie)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: If Harry is nice then Harry is big.\nFOL: Nice(harry) -> Big(harry)\nTEXT: All young, white people are round.\nFOL: all x. (Young(x) & White(x) -> Round(x))\nTEXT: Red people are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If Charlie is nice and Charlie is round then Charlie is red.\nFOL: (Nice(charlie) & Round(charlie)) -> Red(charlie)\nTEXT: Rough, red people are big.\nFOL: (Rough(x) & Red(x)) -> Big(x)\nTEXT: All big people are white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: Harry is not big.\nFOL: -Big(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: Nice(anne)\nTEXT: Bob is red.\nFOL: Red(bob)\nTEXT: Bob is rough.\nFOL: Rough(bob)\nTEXT: Bob is young.\nFOL: Young(bob)\nTEXT: Charlie is red.\nFOL: Red(charlie)\nTEXT: Harry is round.\nFOL: Round(harry)\nTEXT: Harry is white.\nFOL: White(harry)\nTEXT: If Harry is nice then Harry is big.\nFOL: Nice(harry) -> Big(harry)\nTEXT: All young, white people are round.\nFOL: all x. (Young(x) & White(x) -> Round(x))\nTEXT: Red people are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If Charlie is nice and Charlie is round then Charlie is red.\nFOL: (Nice(charlie) & Round(charlie)) -> Red(charlie)\nTEXT: Rough, red people are big.\nFOL: all x. (Rough(x) & Red(x) -> Big(x))\nTEXT: All big people are white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: Harry is not big.\nFOL: -Big(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is nice.\nFOL: Nice(Anne)\nTEXT: Bob is red.\nFOL: Red(Bob)\nTEXT: Bob is rough.\nFOL: Rough(Bob)\nTEXT: Bob is young.\nFOL: Young(Bob)\nTEXT: Charlie is red.\nFOL: Red(Charlie)\nTEXT: Harry is round.\nFOL: Round(Harry)\nTEXT: Harry is white.\nFOL: White(Harry)\nTEXT: If Harry is nice then Harry is big.\nFOL: Nice(Harry) -> Big(Harry)\nTEXT: All young, white people are round.\nFOL: all x. (Young(x) & White(x) -> Round(x))\nTEXT: Red people are nice.\nFOL: all x. (Red(x) -> Nice(x))\nTEXT: If Charlie is nice and Charlie is round then Charlie is red.\nFOL: (Nice(Charlie) & Round(Charlie)) -> Red(Charlie)\nTEXT: Rough, red people are big.\nFOL: (Rough(x) & Red(x)) -> Big(x)\nTEXT: All big people are white.\nFOL: all x. (Big(x) -> White(x))\nTEXT: Harry is not big.\nFOL: -Big(Harry)\n</EVALUATE>"
  ]
 },
 {
  "index": 147,
  "responses": [
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: Big(Dave)\nTEXT: Dave is cold.\nFOL: Cold(Dave)\nTEXT: Dave is furry.\nFOL: Furry(Dave)\nTEXT: Dave is not red.\nFOL: -Red(Dave)\nTEXT: Dave is round.\nFOL: Round(Dave)\nTEXT: Fiona is not red.\nFOL: -Red(Fiona)\nTEXT: Fiona is round.\nFOL: Round(Fiona)\nTEXT: If someone is red and not blue then they are big.\nFOL: all x. (Red(x) & -Blue(x) -> Big(x))\nTEXT: All furry people are big.\nFOL: all x. (Furry(x) -> Big(x))\nTEXT: If someone is kind and not red then they are furry.\nFOL: all x. (Kind(x) & -Red(x) -> Furry(x))\nTEXT: If Fiona is round then Fiona is kind.\nFOL: Round(Fiona) -> Kind(Fiona)\nTEXT: If Fiona is round then Fiona is cold.\nFOL: Round(Fiona) -> Cold(Fiona)\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x. (Red(x) & -Kind(x) -> Cold(x))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: Dave is not red.\nFOL: -Red(Dave)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: BigDave\nTEXT: Dave is cold.\nFOL: ColdDave\nTEXT: Dave is furry.\nFOL: FurryDave\nTEXT: Dave is not red.\nFOL: -RedDave\nTEXT: Dave is round.\nFOL: RoundDave\nTEXT: Fiona is not red.\nFOL: -RedFiona\nTEXT: Fiona is round.\nFOL: RoundFiona\nTEXT: If someone is red and not blue then they are big.\nFOL: all x. (Red(x) & -Blue(x) -> Big(x))\nTEXT: All furry people are big.\nFOL: all x. (Furry(x) -> Big(x))\nTEXT: If someone is kind and not red then they are furry.\nFOL: all x. (Kind(x) & -Red(x) -> Furry(x))\nTEXT: If Fiona is round then Fiona is kind.\nFOL: RoundFiona -> KindFiona\nTEXT: If Fiona is round then Fiona is cold.\nFOL: RoundFiona -> ColdFiona\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x. (Red(x) & -Kind(x) -> Cold(x))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: Dave is not red.\nFOL: -RedDave\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: BigDave\n\nTEXT: Dave is cold.\nFOL: ColdDave\n\nTEXT: Dave is furry.\nFOL: FurryDave\n\nTEXT: Dave is not red.\nFOL: -RedDave\n\nTEXT: Dave is round.\nFOL: RoundDave\n\nTEXT: Fiona is not red.\nFOL: -RedFiona\n\nTEXT: Fiona is round.\nFOL: RoundFiona\n\nTEXT: If someone is red and not blue then they are big.\nFOL: all x. (Red(x) & -Blue(x) -> Big(x))\n\nTEXT: All furry people are big.\nFOL: all x. (Furry(x) -> Big(x))\n\nTEXT: If someone is kind and not red then they are furry.\nFOL: all x. (Kind(x) & -Red(x) -> Furry(x))\n\nTEXT: If Fiona is round then Fiona is kind.\nFOL: RoundFiona -> KindFiona\n\nTEXT: If Fiona is round then Fiona is cold.\nFOL: RoundFiona -> ColdFiona\n\nTEXT: Blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\n\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x. (Red(x) & -Kind(x) -> Cold(x))\n\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\n\nTEXT: Dave is not red.\nFOL: -RedDave\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: BigDave\nTEXT: Dave is cold.\nFOL: ColdDave\nTEXT: Dave is furry.\nFOL: FurryDave\nTEXT: Dave is not red.\nFOL: -RedDave\nTEXT: Dave is round.\nFOL: RoundDave\nTEXT: Fiona is not red.\nFOL: -RedFiona\nTEXT: Fiona is round.\nFOL: RoundFiona\nTEXT: If someone is red and not blue then they are big.\nFOL: all x. (Red(x) & -Blue(x) -> Big(x))\nTEXT: All furry people are big.\nFOL: all x. (Furry(x) -> Big(x))\nTEXT: If someone is kind and not red then they are furry.\nFOL: all x. (Kind(x) & -Red(x) -> Furry(x))\nTEXT: If Fiona is round then Fiona is kind.\nFOL: RoundFiona -> KindFiona\nTEXT: If Fiona is round then Fiona is cold.\nFOL: RoundFiona -> ColdFiona\nTEXT: Blue people are round.\nFOL: Blue(x) -> Round(x)\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x. (Red(x) & -Kind(x) -> Cold(x))\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\nTEXT: Dave is not red.\nFOL: -RedDave\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Dave is big.\nFOL: BigDave\n\nTEXT: Dave is cold.\nFOL: ColdDave\n\nTEXT: Dave is furry.\nFOL: FurryDave\n\nTEXT: Dave is not red.\nFOL: -RedDave\n\nTEXT: Dave is round.\nFOL: RoundDave\n\nTEXT: Fiona is not red.\nFOL: -RedFiona\n\nTEXT: Fiona is round.\nFOL: RoundFiona\n\nTEXT: If someone is red and not blue then they are big.\nFOL: all x. (Red(x) & -Blue(x) -> Big(x))\n\nTEXT: All furry people are big.\nFOL: all x. (Furry(x) -> Big(x))\n\nTEXT: If someone is kind and not red then they are furry.\nFOL: all x. (Kind(x) & -Red(x) -> Furry(x))\n\nTEXT: If Fiona is round then Fiona is kind.\nFOL: RoundFiona -> KindFiona\n\nTEXT: If Fiona is round then Fiona is cold.\nFOL: RoundFiona -> ColdFiona\n\nTEXT: Blue people are round.\nFOL: Blue(x) -> Round(x)\n\nTEXT: If someone is red and not kind then they are cold.\nFOL: all x. (Red(x) & -Kind(x) -> Cold(x))\n\nTEXT: All round people are cold.\nFOL: all x. (Round(x) -> Cold(x))\n\nTEXT: Dave is not red.\nFOL: -RedDave\n</EVALUATE>"
  ]
 },
 {
  "index": 148,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is kind.\nFOL: Kind(Anne)\nTEXT: Fiona is blue.\nFOL: Blue(Fiona)\nTEXT: Fiona is nice.\nFOL: Nice(Fiona)\nTEXT: Fiona is not round.\nFOL: -Round(Fiona)\nTEXT: Fiona is young.\nFOL: Young(Fiona)\nTEXT: Gary is blue.\nFOL: Blue(Gary)\nTEXT: Gary is nice.\nFOL: Nice(Gary)\nTEXT: Gary is quiet.\nFOL: Quiet(Gary)\nTEXT: Harry is blue.\nFOL: Blue(Harry)\nTEXT: Harry is round.\nFOL: Round(Harry)\nTEXT: If something is blue then it is white.\nFOL: all x. (Blue(x) -> White(x))\nTEXT: Nice, quiet things are white.\nFOL: all x. (Nice(x) & Quiet(x) -> White(x))\nTEXT: If something is blue then it is white.\nFOL: all x. (Blue(x) -> White(x))\nTEXT: If something is round then it is white.\nFOL: all x. (Round(x) -> White(x))\nTEXT: All white, quiet things are kind.\nFOL: all x. (White(x) & Quiet(x) -> Kind(x))\nTEXT: If Gary is kind then Gary is not young.\nFOL: Kind(Gary) -> -Young(Gary)\nTEXT: Anne is not blue.\nFOL: -Blue(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is kind.\nFOL: Kind(Anne)\n\nTEXT: Fiona is blue.\nFOL: Blue(Fiona)\n\nTEXT: Fiona is nice.\nFOL: Nice(Fiona)\n\nTEXT: Fiona is not round.\nFOL: -Round(Fiona)\n\nTEXT: Fiona is young.\nFOL: Young(Fiona)\n\nTEXT: Gary is blue.\nFOL: Blue(Gary)\n\nTEXT: Gary is nice.\nFOL: Nice(Gary)\n\nTEXT: Gary is quiet.\nFOL: Quiet(Gary)\n\nTEXT: Harry is blue.\nFOL: Blue(Harry)\n\nTEXT: Harry is round.\nFOL: Round(Harry)\n\nTEXT: If something is blue then it is white.\nFOL: all x. (Blue(x) -> White(x))\n\nTEXT: Nice, quiet things are white.\nFOL: all x. (Nice(x) & Quiet(x) -> White(x))\n\nTEXT: If something is blue then it is white.\nFOL: all x. (Blue(x) -> White(x))\n\nTEXT: If something is round then it is white.\nFOL: all x. (Round(x) -> White(x))\n\nTEXT: All white, quiet things are kind.\nFOL: all x. (White(x) & Quiet(x) -> Kind(x))\n\nTEXT: If Gary is kind then Gary is not young.\nFOL: Kind(Gary) -> -Young(Gary)\n\nTEXT: Anne is not blue.\nFOL: -Blue(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is kind.\nFOL: Kind(Anne)\nTEXT: Fiona is blue.\nFOL: Blue(Fiona)\nTEXT: Fiona is nice.\nFOL: Nice(Fiona)\nTEXT: Fiona is not round.\nFOL: -Round(Fiona)\nTEXT: Fiona is young.\nFOL: Young(Fiona)\nTEXT: Gary is blue.\nFOL: Blue(Gary)\nTEXT: Gary is nice.\nFOL: Nice(Gary)\nTEXT: Gary is quiet.\nFOL: Quiet(Gary)\nTEXT: Harry is blue.\nFOL: Blue(Harry)\nTEXT: Harry is round.\nFOL: Round(Harry)\nTEXT: If something is blue then it is white.\nFOL: all x. (Blue(x) -> White(x))\nTEXT: Nice, quiet things are white.\nFOL: all x. ((Nice(x) & Quiet(x)) -> White(x))\nTEXT: If something is blue then it is white.\nFOL: all x. (Blue(x) -> White(x))\nTEXT: If something is round then it is white.\nFOL: all x. (Round(x) -> White(x))\nTEXT: All white, quiet things are kind.\nFOL: all x. ((White(x) & Quiet(x)) -> Kind(x))\nTEXT: If Gary is kind then Gary is not young.\nFOL: Kind(Gary) -> -Young(Gary)\nTEXT: Anne is not blue.\nFOL: -Blue(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is kind.\nFOL: Kind(Anne)\n\nTEXT: Fiona is blue.\nFOL: Blue(Fiona)\n\nTEXT: Fiona is nice.\nFOL: Nice(Fiona)\n\nTEXT: Fiona is not round.\nFOL: -Round(Fiona)\n\nTEXT: Fiona is young.\nFOL: Young(Fiona)\n\nTEXT: Gary is blue.\nFOL: Blue(Gary)\n\nTEXT: Gary is nice.\nFOL: Nice(Gary)\n\nTEXT: Gary is quiet.\nFOL: Quiet(Gary)\n\nTEXT: Harry is blue.\nFOL: Blue(Harry)\n\nTEXT: Harry is round.\nFOL: Round(Harry)\n\nTEXT: If something is blue then it is white.\nFOL: all x. (Blue(x) -> White(x))\n\nTEXT: Nice, quiet things are white.\nFOL: all x. (Nice(x) & Quiet(x) -> White(x))\n\nTEXT: If something is blue then it is white.\nFOL: all x. (Blue(x) -> White(x))\n\nTEXT: If something is round then it is white.\nFOL: all x. (Round(x) -> White(x))\n\nTEXT: All white, quiet things are kind.\nFOL: all x. (White(x) & Quiet(x) -> Kind(x))\n\nTEXT: If Gary is kind then Gary is not young.\nFOL: -Young(Gary) | Kind(Gary)\n\nTEXT: Anne is not blue.\nFOL: -Blue(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is kind.\nFOL: Kind(Anne)\nTEXT: Fiona is blue.\nFOL: Blue(Fiona)\nTEXT: Fiona is nice.\nFOL: Nice(Fiona)\nTEXT: Fiona is not round.\nFOL: -Round(Fiona)\nTEXT: Fiona is young.\nFOL: Young(Fiona)\nTEXT: Gary is blue.\nFOL: Blue(Gary)\nTEXT: Gary is nice.\nFOL: Nice(Gary)\nTEXT: Gary is quiet.\nFOL: Quiet(Gary)\nTEXT: Harry is blue.\nFOL: Blue(Harry)\nTEXT: Harry is round.\nFOL: Round(Harry)\nTEXT: If something is blue then it is white.\nFOL: all x. (Blue(x) -> White(x))\nTEXT: Nice, quiet things are white.\nFOL: all x. (Nice(x) & Quiet(x) -> White(x))\nTEXT: If something is blue then it is white.\nFOL: all x. (Blue(x) -> White(x))\nTEXT: If something is round then it is white.\nFOL: all x. (Round(x) -> White(x))\nTEXT: All white, quiet things are kind.\nFOL: all x. (White(x) & Quiet(x) -> Kind(x))\nTEXT: If Gary is kind then Gary is not young.\nFOL: -Young(Gary) | Kind(Gary)\nTEXT: Anne is not blue.\nFOL: -Blue(Anne)\n</EVALUATE>"
  ]
 },
 {
  "index": 149,
  "responses": [
   "<EVALUATE>\nTEXT: The bear needs the cat.\nFOL: NeedsTheCat(bear, cat)\nTEXT: The cat needs the bear.\nFOL: NeedsTheBear(cat, bear)\nTEXT: The lion chases the bear.\nFOL: ChasesTheBear(lion, bear)\nTEXT: The lion needs the bear.\nFOL: NeedsTheBear(lion, bear)\nTEXT: The lion needs the cat.\nFOL: NeedsTheCat(lion, cat)\nTEXT: The lion sees the bear.\nFOL: SeesTheBear(lion, bear)\nTEXT: The lion sees the cat.\nFOL: SeesTheCat(lion, cat)\nTEXT: If something is round and it needs the lion then the lion sees the bear.\nFOL: all x. ((Round(x) & NeedsTheLion(x)) -> SeesTheBear(x, lion))\nTEXT: If the lion needs the bear and the lion sees the bear then the bear is blue.\nFOL: NeedsTheBear(lion, bear) & SeesTheBear(lion, bear) -> Blue(bear)\nTEXT: If the bear is green and the bear is rough then the bear is blue.\nFOL: Green(bear) & Rough(bear) -> Blue(bear)\nTEXT: If something sees the lion and the lion sees the cat then the lion chases the bear.\nFOL: all x. (SeesTheLion(x, lion) & SeesTheCat(x, lion) -> ChasesTheBear(x, bear))\nTEXT: If something chases the lion then the lion does not chase the bear.\nFOL: all x. (ChasesTheLion(x, lion) -> -ChasesTheBear(x, bear))\nTEXT: If something sees the bear and it is cold then it is not round.\nFOL: all x. (SeesTheBear(x, bear) & Cold(x) -> -Round(x))\nTEXT: If something needs the cat then it is round.\nFOL: all x. (NeedsTheCat(x, cat) -> Round(x))\nTEXT: If something chases the bear and the bear sees the lion then the bear chases the lion.\nFOL: ChasesTheBear(x, bear) & SeesTheBear(bear, lion) -> ChasesTheLion(x, lion)\nTEXT: The bear does not chase the lion.\nFOL: -ChasesTheLion(bear, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear needs the cat.\nFOL: NeedsTheCat(bear, cat)\nTEXT: The cat needs the bear.\nFOL: NeedsTheBear(cat, bear)\nTEXT: The lion chases the bear.\nFOL: ChasesTheBear(lion, bear)\nTEXT: The lion needs the bear.\nFOL: NeedsTheBear(lion, bear)\nTEXT: The lion needs the cat.\nFOL: NeedsTheCat(lion, cat)\nTEXT: The lion sees the bear.\nFOL: SeesTheBear(lion, bear)\nTEXT: The lion sees the cat.\nFOL: SeesTheCat(lion, cat)\nTEXT: If something is round and it needs the lion then the lion sees the bear.\nFOL: all x. ((Round(x) & NeedsTheLion(x)) -> SeesTheBear(x))\nTEXT: If the lion needs the bear and the lion sees the bear then the bear is blue.\nFOL: NeedsTheBear(lion, bear) & SeesTheBear(lion, bear) -> Blue(bear)\nTEXT: If the bear is green and the bear is rough then the bear is blue.\nFOL: Green(bear) & Rough(bear) -> Blue(bear)\nTEXT: If something sees the lion and the lion sees the cat then the lion chases the bear.\nFOL: all x. (SeesTheLion(x) & SeesTheCat(x) -> ChasesTheBear(x))\nTEXT: If something chases the lion then the lion does not chase the bear.\nFOL: all x. (ChasesTheLion(x) -> -ChasesTheBear(x))\nTEXT: If something sees the bear and it is cold then it is not round.\nFOL: all x. (SeesTheBear(x) & Cold(x) -> -Round(x))\nTEXT: If something needs the cat then it is round.\nFOL: all x. (NeedsTheCat(x, cat) -> Round(x))\nTEXT: If something chases the bear and the bear sees the lion then the bear chases the lion.\nFOL: ChasesTheBear(x, bear) & SeesTheBear(bear, lion) -> ChasesTheLion(x, lion)\nTEXT: The bear does not chase the lion.\nFOL: -ChasesTheLion(bear, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear needs the cat.\nFOL: NeedsTheCat(bear, cat)\nTEXT: The cat needs the bear.\nFOL: NeedsTheBear(cat, bear)\nTEXT: The lion chases the bear.\nFOL: ChasesTheBear(lion, bear)\nTEXT: The lion needs the bear.\nFOL: NeedsTheBear(lion, bear)\nTEXT: The lion needs the cat.\nFOL: NeedsTheCat(lion, cat)\nTEXT: The lion sees the bear.\nFOL: SeesTheBear(lion, bear)\nTEXT: The lion sees the cat.\nFOL: SeesTheCat(lion, cat)\nTEXT: If something is round and it needs the lion then the lion sees the bear.\nFOL: all x. ((Round(x) & NeedsTheLion(x)) -> SeesTheBear(x))\nTEXT: If the lion needs the bear and the lion sees the bear then the bear is blue.\nFOL: NeedsTheBear(lion, bear) & SeesTheBear(lion, bear) -> Blue(bear)\nTEXT: If the bear is green and the bear is rough then the bear is blue.\nFOL: Green(bear) & Rough(bear) -> Blue(bear)\nTEXT: If something sees the lion and the lion sees the cat then the lion chases the bear.\nFOL: all x. (SeesTheLion(x) & SeesTheCat(x) -> ChasesTheBear(x))\nTEXT: If something chases the lion then the lion does not chase the bear.\nFOL: all x. (ChasesTheLion(x) -> -ChasesTheBear(x))\nTEXT: If something sees the bear and it is cold then it is not round.\nFOL: all x. (SeesTheBear(x) & Cold(x) -> -Round(x))\nTEXT: If something needs the cat then it is round.\nFOL: all x. (NeedsTheCat(x, cat) -> Round(x))\nTEXT: If something chases the bear and the bear sees the lion then the bear chases the lion.\nFOL: ChasesTheBear(x, bear) & SeesTheBear(bear, lion) -> ChasesTheBear(x, lion)\nTEXT: The bear does not chase the lion.\nFOL: -ChasesTheBear(bear, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear needs the cat.\nFOL: NeedsTheCat(bear, cat)\nTEXT: The cat needs the bear.\nFOL: NeedsTheBear(cat, bear)\nTEXT: The lion chases the bear.\nFOL: ChasesTheBear(lion, bear)\nTEXT: The lion needs the bear.\nFOL: NeedsTheBear(lion, bear)\nTEXT: The lion needs the cat.\nFOL: NeedsTheCat(lion, cat)\nTEXT: The lion sees the bear.\nFOL: SeesTheBear(lion, bear)\nTEXT: The lion sees the cat.\nFOL: SeesTheCat(lion, cat)\nTEXT: If something is round and it needs the lion then the lion sees the bear.\nFOL: all x. ((Round(x) & NeedsTheLion(x)) -> SeesTheBear(x, lion))\nTEXT: If the lion needs the bear and the lion sees the bear then the bear is blue.\nFOL: NeedsTheBear(lion, bear) & SeesTheBear(lion, bear) -> Blue(bear)\nTEXT: If the bear is green and the bear is rough then the bear is blue.\nFOL: Green(bear) & Rough(bear) -> Blue(bear)\nTEXT: If something sees the lion and the lion sees the cat then the lion chases the bear.\nFOL: all x. (SeesTheLion(x, lion) & SeesTheCat(x, lion) -> ChasesTheBear(x, bear))\nTEXT: If something chases the lion then the lion does not chase the bear.\nFOL: all x. (ChasesTheLion(x) -> -ChasesTheBear(x, lion))\nTEXT: If something sees the bear and it is cold then it is not round.\nFOL: all x. (SeesTheBear(x, bear) & Cold(x) -> -Round(x))\nTEXT: If something needs the cat then it is round.\nFOL: all x. (NeedsTheCat(x, cat) -> Round(x))\nTEXT: If something chases the bear and the bear sees the lion then the bear chases the lion.\nFOL: ChasesTheBear(x, bear) & SeesTheBear(bear, lion) -> ChasesTheLion(x, lion)\nTEXT: The bear does not chase the lion.\nFOL: -ChasesTheLion(bear, lion)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear needs the cat.\nFOL: NeedsTheCat(bear, cat)\n\nTEXT: The cat needs the bear.\nFOL: NeedsTheBear(cat, bear)\n\nTEXT: The lion chases the bear.\nFOL: ChasesTheBear(lion, bear)\n\nTEXT: The lion needs the bear.\nFOL: NeedsTheBear(lion, bear)\n\nTEXT: The lion needs the cat.\nFOL: NeedsTheCat(lion, cat)\n\nTEXT: The lion sees the bear.\nFOL: SeesTheBear(lion, bear)\n\nTEXT: The lion sees the cat.\nFOL: SeesTheCat(lion, cat)\n\nTEXT: If something is round and it needs the lion then the lion sees the bear.\nFOL: all x. ((Round(x) & NeedsTheLion(x)) -> SeesTheBear(lion, x))\n\nTEXT: If the lion needs the bear and the lion sees the bear then the bear is blue.\nFOL: NeedsTheBear(lion, bear) & SeesTheBear(lion, bear) -> Blue(bear)\n\nTEXT: If the bear is green and the bear is rough then the bear is blue.\nFOL: Green(bear) & Rough(bear) -> Blue(bear)\n\nTEXT: If something sees the lion and the lion sees the cat then the lion chases the bear.\nFOL: SeesTheLion(x) & SeesTheCat(lion, x) -> ChasesTheBear(lion, x)\n\nTEXT: If something chases the lion then the lion does not chase the bear.\nFOL: ChasesTheLion(x) -> -ChasesTheBear(lion, x)\n\nTEXT: If something sees the bear and it is cold then it is not round.\nFOL: SeesTheBear(x) & Cold(x) -> -Round(x)\n\nTEXT: If something needs the cat then it is round.\nFOL: NeedsTheCat(x, cat) -> Round(x)\n\nTEXT: If something chases the bear and the bear sees the lion then the bear chases the lion.\nFOL: ChasesTheBear(x, bear) & SeesTheBear(bear, lion) -> ChasesTheLion(x, lion)\n\nTEXT: The bear does not chase the lion.\nFOL: -ChasesTheLion(bear, lion)\n</EVALUATE>"
  ]
 },
 {
  "index": 150,
  "responses": [
   "<EVALUATE>\nTEXT: The bear does not chase the mouse.\nFOL: -Chase(bear, mouse)\nTEXT: The bear eats the lion.\nFOL: Eat(bear, lion)\nTEXT: The bear is green.\nFOL: Green(bear)\nTEXT: The bear is round.\nFOL: Round(bear)\nTEXT: The bear is young.\nFOL: Young(bear)\nTEXT: The bear does not need the mouse.\nFOL: -Need(bear, mouse)\nTEXT: The lion does not chase the mouse.\nFOL: -Chase(lion, mouse)\nTEXT: The lion eats the tiger.\nFOL: Eat(lion, tiger)\nTEXT: The mouse chases the bear.\nFOL: Chase(mouse, bear)\nTEXT: The mouse does not eat the lion.\nFOL: -Eat(mouse, lion)\nTEXT: The mouse is young.\nFOL: Young(mouse)\nTEXT: The mouse does not need the bear.\nFOL: -Need(mouse, bear)\nTEXT: The mouse needs the lion.\nFOL: Need(mouse, lion)\nTEXT: The tiger chases the mouse.\nFOL: Chase(tiger, mouse)\nTEXT: The tiger eats the bear.\nFOL: Eat(tiger, bear)\nTEXT: The tiger is round.\nFOL: Round(tiger)\nTEXT: If the tiger eats the mouse and the mouse is young then the mouse is red.\nFOL: (Eat(tiger, mouse) & Young(mouse)) -> Red(mouse)\nTEXT: If someone is young then they need the tiger.\nFOL: Young(x) -> Need(x, tiger)\nTEXT: If someone needs the tiger and they are not young then they are red.\nFOL: Need(x, tiger) & -Young(x) -> Red(x)\nTEXT: If someone is red then they chase the mouse.\nFOL: Red(x) -> Chase(x, mouse)\nTEXT: If the tiger is young and the tiger is red then the tiger needs the mouse.\nFOL: Young(tiger) & Red(tiger) -> Need(tiger, mouse)\nTEXT: If someone is round then they eat the mouse.\nFOL: Round(x) -> Eat(x, mouse)\nTEXT: If the tiger needs the bear and the tiger does not chase the lion then the bear eats the lion.\nFOL: Need(tiger, bear) & -Chase(tiger, lion) -> Eat(bear, lion)\nTEXT: If the bear is not red and the bear does not need the mouse then the bear chases the mouse.\nFOL: -Red(bear) & -Need(bear, mouse) -> Chase(bear, mouse)\nTEXT: The bear eats the mouse.\nFOL: Eat(bear, mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear does not chase the mouse.\nFOL: -Chase(Bear, Mouse)\nTEXT: The bear eats the lion.\nFOL: Eat(Bear, Lion)\nTEXT: The bear is green.\nFOL: Green(Bear)\nTEXT: The bear is round.\nFOL: Round(Bear)\nTEXT: The bear is young.\nFOL: Young(Bear)\nTEXT: The bear does not need the mouse.\nFOL: -Need(Bear, Mouse)\nTEXT: The lion does not chase the mouse.\nFOL: -Chase(Lion, Mouse)\nTEXT: The lion eats the tiger.\nFOL: Eat(Lion, Tiger)\nTEXT: The mouse chases the bear.\nFOL: Chase(Mouse, Bear)\nTEXT: The mouse does not eat the lion.\nFOL: -Eat(Mouse, Lion)\nTEXT: The mouse is young.\nFOL: Young(Mouse)\nTEXT: The mouse does not need the bear.\nFOL: -Need(Mouse, Bear)\nTEXT: The mouse needs the lion.\nFOL: Need(Mouse, Lion)\nTEXT: The tiger chases the mouse.\nFOL: Chase(Tiger, Mouse)\nTEXT: The tiger eats the bear.\nFOL: Eat(Tiger, Bear)\nTEXT: The tiger is round.\nFOL: Round(Tiger)\nTEXT: If the tiger eats the mouse and the mouse is young then the mouse is red.\nFOL: (Eat(Tiger, Mouse) & Young(Mouse)) -> Red(Mouse)\nTEXT: If someone is young then they need the tiger.\nFOL: Young(x) -> Need(x, Tiger)\nTEXT: If someone needs the tiger and they are not young then they are red.\nFOL: Need(x, Tiger) & -Young(x) -> Red(x)\nTEXT: If someone is red then they chase the mouse.\nFOL: Red(x) -> Chase(x, Mouse)\nTEXT: If the tiger is young and the tiger is red then the tiger needs the mouse.\nFOL: Young(Tiger) & Red(Tiger) -> Need(Tiger, Mouse)\nTEXT: If someone is round then they eat the mouse.\nFOL: Round(x) -> Eat(x, Mouse)\nTEXT: If the tiger needs the bear and the tiger does not chase the lion then the bear eats the lion.\nFOL: Need(Tiger, Bear) & -Chase(Tiger, Lion) -> Eat(Bear, Lion)\nTEXT: If the bear is not red and the bear does not need the mouse then the bear chases the mouse.\nFOL: -Red(Bear) & -Need(Bear, Mouse) -> Chase(Bear, Mouse)\nTEXT: The bear eats the mouse.\nFOL: Eat(Bear, Mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear does not chase the mouse.\nFOL: -ChaseTheMouse(bear, mouse)\nTEXT: The bear eats the lion.\nFOL: EatTheLion(bear, lion)\nTEXT: The bear is green.\nFOL: Green(bear)\nTEXT: The bear is round.\nFOL: Round(bear)\nTEXT: The bear is young.\nFOL: Young(bear)\nTEXT: The bear does not need the mouse.\nFOL: -NeedTheMouse(bear, mouse)\nTEXT: The lion does not chase the mouse.\nFOL: -ChaseTheMouse(lion, mouse)\nTEXT: The lion eats the tiger.\nFOL: EatTheTiger(lion, tiger)\nTEXT: The mouse chases the bear.\nFOL: ChaseTheBear(mouse, bear)\nTEXT: The mouse does not eat the lion.\nFOL: -EatTheLion(mouse, lion)\nTEXT: The mouse is young.\nFOL: Young(mouse)\nTEXT: The mouse does not need the bear.\nFOL: -NeedTheBear(mouse, bear)\nTEXT: The mouse needs the lion.\nFOL: NeedTheLion(mouse, lion)\nTEXT: The tiger chases the mouse.\nFOL: ChaseTheMouse(tiger, mouse)\nTEXT: The tiger eats the bear.\nFOL: EatTheBear(tiger, bear)\nTEXT: The tiger is round.\nFOL: Round(tiger)\nTEXT: If the tiger eats the mouse and the mouse is young then the mouse is red.\nFOL: (EatTheMouse(tiger, mouse) & Young(mouse)) -> Red(mouse)\nTEXT: If someone is young then they need the tiger.\nFOL: Young(x) -> NeedTheTiger(x)\nTEXT: If someone needs the tiger and they are not young then they are red.\nFOL: NeedTheTiger(x) & -Young(x) -> Red(x)\nTEXT: If someone is red then they chase the mouse.\nFOL: Red(x) -> ChaseTheMouse(x, mouse)\nTEXT: If the tiger is young and the tiger is red then the tiger needs the mouse.\nFOL: Young(tiger) & Red(tiger) -> NeedTheMouse(tiger, mouse)\nTEXT: If someone is round then they eat the mouse.\nFOL: Round(x) -> EatTheMouse(x, mouse)\nTEXT: If the tiger needs the bear and the tiger does not chase the lion then the bear eats the lion.\nFOL: NeedTheBear(tiger, bear) & -ChaseTheLion(tiger, lion) -> EatTheLion(bear, lion)\nTEXT: If the bear is not red and the bear does not need the mouse then the bear chases the mouse.\nFOL: -Red(bear) & -NeedTheMouse(bear, mouse) -> ChaseTheMouse(bear, mouse)\nTEXT: The bear eats the mouse.\nFOL: EatTheMouse(bear, mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear does not chase the mouse.\nFOL: -Chase(bear, mouse)\nTEXT: The bear eats the lion.\nFOL: Eat(bear, lion)\nTEXT: The bear is green.\nFOL: Color(bear, green)\nTEXT: The bear is round.\nFOL: Shape(bear, round)\nTEXT: The bear is young.\nFOL: Age(bear, young)\nTEXT: The bear does not need the mouse.\nFOL: -Need(bear, mouse)\nTEXT: The lion does not chase the mouse.\nFOL: -Chase(lion, mouse)\nTEXT: The lion eats the tiger.\nFOL: Eat(lion, tiger)\nTEXT: The mouse chases the bear.\nFOL: Chase(mouse, bear)\nTEXT: The mouse does not eat the lion.\nFOL: -Eat(mouse, lion)\nTEXT: The mouse is young.\nFOL: Age(mouse, young)\nTEXT: The mouse does not need the bear.\nFOL: -Need(mouse, bear)\nTEXT: The mouse needs the lion.\nFOL: Need(mouse, lion)\nTEXT: The tiger chases the mouse.\nFOL: Chase(tiger, mouse)\nTEXT: The tiger eats the bear.\nFOL: Eat(tiger, bear)\nTEXT: The tiger is round.\nFOL: Shape(tiger, round)\nTEXT: If the tiger eats the mouse and the mouse is young then the mouse is red.\nFOL: (Eat(tiger, mouse) & Age(mouse, young) -> Color(mouse, red))\nTEXT: If someone is young then they need the tiger.\nFOL: Age(x, young) -> Need(x, tiger)\nTEXT: If someone needs the tiger and they are not young then they are red.\nFOL: Need(x, tiger) & -Age(x, young) -> Color(x, red)\nTEXT: If someone is red then they chase the mouse.\nFOL: Color(x, red) -> Chase(x, mouse)\nTEXT: If the tiger is young and the tiger is red then the tiger needs the mouse.\nFOL: (Age(tiger, young) & Color(tiger, red) -> Need(tiger, mouse))\nTEXT: If someone is round then they eat the mouse.\nFOL: Shape(x, round) -> Eat(x, mouse)\nTEXT: If the tiger needs the bear and the tiger does not chase the lion then the bear eats the lion.\nFOL: (Need(tiger, bear) & -Chase(tiger, lion) -> Eat(bear, lion))\nTEXT: If the bear is not red and the bear does not need the mouse then the bear chases the mouse.\nFOL: -Color(bear, red) & -Need(bear, mouse) -> Chase(bear, mouse)\nTEXT: The bear eats the mouse.\nFOL: Eat(bear, mouse)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear does not chase the mouse.\nFOL: -Chase(Bear, Mouse)\nTEXT: The bear eats the lion.\nFOL: Eat(Bear, Lion)\nTEXT: The bear is green.\nFOL: Green(Bear)\nTEXT: The bear is round.\nFOL: Round(Bear)\nTEXT: The bear is young.\nFOL: Young(Bear)\nTEXT: The bear does not need the mouse.\nFOL: -Need(Bear, Mouse)\nTEXT: The lion does not chase the mouse.\nFOL: -Chase(Lion, Mouse)\nTEXT: The lion eats the tiger.\nFOL: Eat(Lion, Tiger)\nTEXT: The mouse chases the bear.\nFOL: Chase(Mouse, Bear)\nTEXT: The mouse does not eat the lion.\nFOL: -Eat(Mouse, Lion)\nTEXT: The mouse is young.\nFOL: Young(Mouse)\nTEXT: The mouse does not need the bear.\nFOL: -Need(Mouse, Bear)\nTEXT: The mouse needs the lion.\nFOL: Need(Mouse, Lion)\nTEXT: The tiger chases the mouse.\nFOL: Chase(Tiger, Mouse)\nTEXT: The tiger eats the bear.\nFOL: Eat(Tiger, Bear)\nTEXT: The tiger is round.\nFOL: Round(Tiger)\nTEXT: If the tiger eats the mouse and the mouse is young then the mouse is red.\nFOL: (Eat(Tiger, Mouse) & Young(Mouse)) -> Red(Mouse)\nTEXT: If someone is young then they need the tiger.\nFOL: Young(x) -> Need(x, Tiger)\nTEXT: If someone needs the tiger and they are not young then they are red.\nFOL: Need(x, Tiger) & -Young(x) -> Red(x)\nTEXT: If someone is red then they chase the mouse.\nFOL: Red(x) -> Chase(x, Mouse)\nTEXT: If the tiger is young and the tiger is red then the tiger needs the mouse.\nFOL: (Young(Tiger) & Red(Tiger)) -> Need(Tiger, Mouse)\nTEXT: If someone is round then they eat the mouse.\nFOL: Round(x) -> Eat(x, Mouse)\nTEXT: If the tiger needs the bear and the tiger does not chase the lion then the bear eats the lion.\nFOL: (Need(Tiger, Bear) & -Chase(Tiger, Lion)) -> Eat(Bear, Lion)\nTEXT: If the bear is not red and the bear does not need the mouse then the bear chases the mouse.\nFOL: -Red(Bear) & -Need(Bear, Mouse) -> Chase(Bear, Mouse)\nTEXT: The bear eats the mouse.\nFOL: Eat(Bear, Mouse)\n</EVALUATE>"
  ]
 },
 {
  "index": 151,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: BaldEagle(chases(rabbit))\nTEXT: The bald eagle needs the cat.\nFOL: BaldEagle(needs(cat))\nTEXT: The bald eagle needs the rabbit.\nFOL: BaldEagle(needs(rabbit))\nTEXT: The bald eagle visits the cat.\nFOL: BaldEagle(visits(cat))\nTEXT: The cat is big.\nFOL: cat(isBig)\nTEXT: The cat is kind.\nFOL: cat(isKind)\nTEXT: The cat needs the bald eagle.\nFOL: cat(needs(BaldEagle))\nTEXT: The rabbit is big.\nFOL: rabbit(isBig)\nTEXT: The rabbit is cold.\nFOL: rabbit(isCold)\nTEXT: The rabbit needs the cat.\nFOL: rabbit(needs(cat))\nTEXT: The rabbit visits the bald eagle.\nFOL: rabbit(visits(BaldEagle))\nTEXT: The rabbit visits the cat.\nFOL: rabbit(visits(cat))\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x. (x(visits(cat)) -> x(needs(cat)))\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (x(visits(rabbit)) -> rabbit(visits(BaldEagle)))\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x. ((x(visits(cat)) & cat(visits(BaldEagle))) -> BaldEagle(visits(rabbit)))\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x. (x(needs(cat)) -> x(needs(rabbit)))\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x. (x(needs(BaldEagle)) -> x(visits(cat)))\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: (rabbit(isKind) & rabbit(needs(cat)) -> rabbit(needs(BaldEagle)))\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (x(isKind) & x(needs(rabbit)) -> rabbit(visits(BaldEagle)))\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x. (x(needs(rabbit)) -> rabbit(visits(rabbit)))\nTEXT: The bald eagle is not big.\nFOL: -BaldEagle(isBig)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: BaldEagle(chases(rabbit))\nTEXT: The bald eagle needs the cat.\nFOL: BaldEagle(needs(cat))\nTEXT: The bald eagle needs the rabbit.\nFOL: BaldEagle(needs(rabbit))\nTEXT: The bald eagle visits the cat.\nFOL: BaldEagle(visits(cat))\nTEXT: The cat is big.\nFOL: cat(isBig)\nTEXT: The cat is kind.\nFOL: cat(isKind)\nTEXT: The cat needs the bald eagle.\nFOL: cat(needs(BaldEagle))\nTEXT: The rabbit is big.\nFOL: rabbit(isBig)\nTEXT: The rabbit is cold.\nFOL: rabbit(isCold)\nTEXT: The rabbit needs the cat.\nFOL: rabbit(needs(cat))\nTEXT: The rabbit visits the bald eagle.\nFOL: rabbit(visits(BaldEagle))\nTEXT: The rabbit visits the cat.\nFOL: rabbit(visits(cat))\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x. (x(visits(cat)) -> x(needs(cat)))\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (x(visits(rabbit)) -> rabbit(visits(BaldEagle)))\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x. ((x(visits(cat)) & cat(visits(BaldEagle))) -> BaldEagle(visits(rabbit)))\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x. (x(needs(cat)) -> x(needs(rabbit)))\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x. (x(needs(BaldEagle)) -> x(visits(cat)))\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: rabbit(isKind) & rabbit(needs(cat)) -> rabbit(needs(BaldEagle)))\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (x(isKind) & x(needs(rabbit)) -> rabbit(visits(BaldEagle)))\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x. (x(needs(rabbit)) -> rabbit(visits(rabbit)))\nTEXT: The bald eagle is not big.\nFOL: -BaldEagle(isBig)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: BaldEagle(chases(rabbit))\nTEXT: The bald eagle needs the cat.\nFOL: BaldEagle(needs(cat))\nTEXT: The bald eagle needs the rabbit.\nFOL: BaldEagle(needs(rabbit))\nTEXT: The bald eagle visits the cat.\nFOL: BaldEagle(visits(cat))\nTEXT: The cat is big.\nFOL: cat(isBig)\nTEXT: The cat is kind.\nFOL: cat(isKind)\nTEXT: The cat needs the bald eagle.\nFOL: cat(needs(BaldEagle))\nTEXT: The rabbit is big.\nFOL: rabbit(isBig)\nTEXT: The rabbit is cold.\nFOL: rabbit(isCold)\nTEXT: The rabbit needs the cat.\nFOL: rabbit(needs(cat))\nTEXT: The rabbit visits the bald eagle.\nFOL: rabbit(visits(BaldEagle))\nTEXT: The rabbit visits the cat.\nFOL: rabbit(visits(cat))\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x. (x(visits(cat)) -> x(needs(cat)))\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (x(visits(rabbit)) -> rabbit(visits(BaldEagle)))\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x. ((x(visits(cat)) & cat(visits(BaldEagle))) -> BaldEagle(visits(rabbit)))\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x. (x(needs(cat)) -> x(needs(rabbit)))\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x. (x(needs(BaldEagle)) -> x(visits(cat)))\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: rabbit(isKind) & rabbit(needs(cat)) & rabbit(needs(BaldEagle))\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (x(isKind) & x(needs(rabbit)) -> rabbit(visits(BaldEagle)))\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x. (x(needs(rabbit)) -> rabbit(visits(rabbit)))\nTEXT: The bald eagle is not big.\nFOL: -BaldEagle(isBig)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: BaldEagle(chases(rabbit))\nTEXT: The bald eagle needs the cat.\nFOL: BaldEagle(needs(cat))\nTEXT: The bald eagle needs the rabbit.\nFOL: BaldEagle(needs(rabbit))\nTEXT: The bald eagle visits the cat.\nFOL: BaldEagle(visits(cat))\nTEXT: The cat is big.\nFOL: cat(isBig)\nTEXT: The cat is kind.\nFOL: cat(isKind)\nTEXT: The cat needs the bald eagle.\nFOL: cat(needs(BaldEagle))\nTEXT: The rabbit is big.\nFOL: rabbit(isBig)\nTEXT: The rabbit is cold.\nFOL: rabbit(isCold)\nTEXT: The rabbit needs the cat.\nFOL: rabbit(needs(cat))\nTEXT: The rabbit visits the bald eagle.\nFOL: rabbit(visits(BaldEagle))\nTEXT: The rabbit visits the cat.\nFOL: rabbit(visits(cat))\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x. (x(visits(cat)) -> x(needs(cat)))\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (x(visits(rabbit)) -> rabbit(visits(BaldEagle)))\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x. ((x(visits(cat)) & cat(visits(BaldEagle))) -> BaldEagle(visits(rabbit)))\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x. (x(needs(cat)) -> x(needs(rabbit)))\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x. (x(needs(BaldEagle)) -> x(visits(cat)))\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: rabbit(isKind) & rabbit(needs(cat)) -> rabbit(needs(BaldEagle)))\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (x(isKind) & x(needs(rabbit)) -> rabbit(visits(BaldEagle)))\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x. (x(needs(rabbit)) -> x(visits(rabbit)))\nTEXT: The bald eagle is not big.\nFOL: -BaldEagle(isBig)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle chases the rabbit.\nFOL: BaldEagle(chases(rabbit))\nTEXT: The bald eagle needs the cat.\nFOL: BaldEagle(needs(cat))\nTEXT: The bald eagle needs the rabbit.\nFOL: BaldEagle(needs(rabbit))\nTEXT: The bald eagle visits the cat.\nFOL: BaldEagle(visits(cat))\nTEXT: The cat is big.\nFOL: cat(isBig)\nTEXT: The cat is kind.\nFOL: cat(isKind)\nTEXT: The cat needs the bald eagle.\nFOL: cat(needs(BaldEagle))\nTEXT: The rabbit is big.\nFOL: rabbit(isBig)\nTEXT: The rabbit is cold.\nFOL: rabbit(isCold)\nTEXT: The rabbit needs the cat.\nFOL: rabbit(needs(cat))\nTEXT: The rabbit visits the bald eagle.\nFOL: rabbit(visits(BaldEagle))\nTEXT: The rabbit visits the cat.\nFOL: rabbit(visits(cat))\nTEXT: If something visits the cat then it needs the cat.\nFOL: all x. (x(visits(cat)) -> x(needs(cat)))\nTEXT: If something visits the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (x(visits(rabbit)) -> rabbit(visits(BaldEagle)))\nTEXT: If something visits the cat and the cat visits the bald eagle then the bald eagle visits the rabbit.\nFOL: all x. ((x(visits(cat)) & cat(visits(BaldEagle))) -> BaldEagle(visits(rabbit)))\nTEXT: If something needs the cat then it needs the rabbit.\nFOL: all x. (x(needs(cat)) -> x(needs(rabbit)))\nTEXT: If something needs the bald eagle then it visits the cat.\nFOL: all x. (x(needs(BaldEagle)) -> x(visits(cat)))\nTEXT: If the rabbit is kind and the rabbit needs the cat then the rabbit needs the bald eagle.\nFOL: (rabbit(isKind) & rabbit(needs(cat)) -> rabbit(needs(BaldEagle)))\nTEXT: If something is kind and it needs the rabbit then the rabbit visits the bald eagle.\nFOL: all x. (x(isKind) & x(needs(rabbit)) -> rabbit(visits(BaldEagle)))\nTEXT: If something needs the rabbit then it visits the rabbit.\nFOL: all x. (x(needs(rabbit)) -> x(visits(rabbit)))\nTEXT: The bald eagle is not big.\nFOL: -BaldEagle(isBig)\n</EVALUATE>"
  ]
 },
 {
  "index": 152,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(Anne)\nTEXT: Anne is red.\nFOL: Red(Anne)\nTEXT: Bob is big.\nFOL: Big(Bob)\nTEXT: Bob is kind.\nFOL: Kind(Bob)\nTEXT: Bob is round.\nFOL: Round(Bob)\nTEXT: Bob is smart.\nFOL: Smart(Bob)\nTEXT: Bob is white.\nFOL: White(Bob)\nTEXT: If Anne is kind then Anne is red.\nFOL: Kind(Anne) -> Red(Anne)\nTEXT: Red, smart people are white.\nFOL: (Red(x) & Smart(x)) -> White(x)\nTEXT: If Bob is white then Bob is kind.\nFOL: White(Bob) -> Kind(Bob)\nTEXT: If someone is big and red then they are kind.\nFOL: (Big(x) & Red(x)) -> Kind(x)\nTEXT: All white, round people are smart.\nFOL: all x. (White(x) & Round(x) -> Smart(x))\nTEXT: All kind people are round.\nFOL: all x. (Kind(x) -> Round(x))\nTEXT: All round, blue people are white.\nFOL: all x. (Round(x) & Blue(x) -> White(x))\nTEXT: Big people are blue.\nFOL: all x. (Big(x) -> Blue(x))\nTEXT: Anne is white.\nFOL: White(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(Anne)\n\nTEXT: Anne is red.\nFOL: Red(Anne)\n\nTEXT: Bob is big.\nFOL: Big(Bob)\n\nTEXT: Bob is kind.\nFOL: Kind(Bob)\n\nTEXT: Bob is round.\nFOL: Round(Bob)\n\nTEXT: Bob is smart.\nFOL: Smart(Bob)\n\nTEXT: Bob is white.\nFOL: White(Bob)\n\nTEXT: If Anne is kind then Anne is red.\nFOL: Kind(Anne) -> Red(Anne)\n\nTEXT: Red, smart people are white.\nFOL: (Red(x) & Smart(x)) -> White(x)\n\nTEXT: If Bob is white then Bob is kind.\nFOL: White(Bob) -> Kind(Bob)\n\nTEXT: If someone is big and red then they are kind.\nFOL: (Big(x) & Red(x)) -> Kind(x)\n\nTEXT: All white, round people are smart.\nFOL: all x. (White(x) & Round(x) -> Smart(x))\n\nTEXT: All kind people are round.\nFOL: all x. (Kind(x) -> Round(x))\n\nTEXT: All round, blue people are white.\nFOL: all x. (Round(x) & Blue(x) -> White(x))\n\nTEXT: Big people are blue.\nFOL: all x. (Big(x) -> Blue(x))\n\nTEXT: Anne is white.\nFOL: White(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(Anne)\nTEXT: Anne is red.\nFOL: Red(Anne)\nTEXT: Bob is big.\nFOL: Big(Bob)\nTEXT: Bob is kind.\nFOL: Kind(Bob)\nTEXT: Bob is round.\nFOL: Round(Bob)\nTEXT: Bob is smart.\nFOL: Smart(Bob)\nTEXT: Bob is white.\nFOL: White(Bob)\nTEXT: If Anne is kind then Anne is red.\nFOL: Kind(Anne) -> Red(Anne)\nTEXT: Red, smart people are white.\nFOL: (Red(x) & Smart(x)) -> White(x)\nTEXT: If Bob is white then Bob is kind.\nFOL: White(Bob) -> Kind(Bob)\nTEXT: If someone is big and red then they are kind.\nFOL: (Big(x) & Red(x)) -> Kind(x)\nTEXT: All white, round people are smart.\nFOL: all x. (White(x) & Round(x) -> Smart(x))\nTEXT: All kind people are round.\nFOL: all x. (Kind(x) -> Round(x))\nTEXT: All round, blue people are white.\nFOL: all x. ((Round(x) & Blue(x)) -> White(x))\nTEXT: Big people are blue.\nFOL: all x. (Big(x) -> Blue(x))\nTEXT: Anne is white.\nFOL: White(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(Anne)\n\nTEXT: Anne is red.\nFOL: Red(Anne)\n\nTEXT: Bob is big.\nFOL: Big(Bob)\n\nTEXT: Bob is kind.\nFOL: Kind(Bob)\n\nTEXT: Bob is round.\nFOL: Round(Bob)\n\nTEXT: Bob is smart.\nFOL: Smart(Bob)\n\nTEXT: Bob is white.\nFOL: White(Bob)\n\nTEXT: If Anne is kind then Anne is red.\nFOL: Kind(Anne) -> Red(Anne)\n\nTEXT: Red, smart people are white.\nFOL: Red(x) & Smart(x) -> White(x)\n\nTEXT: If Bob is white then Bob is kind.\nFOL: White(Bob) -> Kind(Bob)\n\nTEXT: If someone is big and red then they are kind.\nFOL: Big(x) & Red(x) -> Kind(x)\n\nTEXT: All white, round people are smart.\nFOL: White(x) & Round(x) -> Smart(x)\n\nTEXT: All kind people are round.\nFOL: Kind(x) -> Round(x)\n\nTEXT: All round, blue people are white.\nFOL: Round(x) & Blue(x) -> White(x)\n\nTEXT: Big people are blue.\nFOL: Big(x) -> Blue(x)\n\nTEXT: Anne is white.\nFOL: White(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(Anne)\nTEXT: Anne is red.\nFOL: Red(Anne)\nTEXT: Bob is big.\nFOL: Big(Bob)\nTEXT: Bob is kind.\nFOL: Kind(Bob)\nTEXT: Bob is round.\nFOL: Round(Bob)\nTEXT: Bob is smart.\nFOL: Smart(Bob)\nTEXT: Bob is white.\nFOL: White(Bob)\nTEXT: If Anne is kind then Anne is red.\nFOL: Kind(Anne) -> Red(Anne)\nTEXT: Red, smart people are white.\nFOL: Red(x) & Smart(x) -> White(x)\nTEXT: If Bob is white then Bob is kind.\nFOL: White(Bob) -> Kind(Bob)\nTEXT: If someone is big and red then they are kind.\nFOL: Big(x) & Red(x) -> Kind(x)\nTEXT: All white, round people are smart.\nFOL: White(x) & Round(x) -> Smart(x)\nTEXT: All kind people are round.\nFOL: Kind(x) -> Round(x)\nTEXT: All round, blue people are white.\nFOL: Round(x) & Blue(x) -> White(x)\nTEXT: Big people are blue.\nFOL: Big(x) -> Blue(x)\nTEXT: Anne is white.\nFOL: White(Anne)\n</EVALUATE>"
  ]
 },
 {
  "index": 153,
  "responses": [
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: Dog(big)\nTEXT: The dog is not green.\nFOL: -Green(Dog)\nTEXT: The dog is not red.\nFOL: -Red(Dog)\nTEXT: The dog is round.\nFOL: Round(Dog)\nTEXT: The dog needs the lion.\nFOL: Needs(Dog, Lion)\nTEXT: The dog sees the lion.\nFOL: Sees(Dog, Lion)\nTEXT: The dog visits the lion.\nFOL: Visits(Dog, Lion)\nTEXT: The lion is not big.\nFOL: -Big(Lion)\nTEXT: The lion is green.\nFOL: Green(Lion)\nTEXT: The lion is kind.\nFOL: Kind(Lion)\nTEXT: The lion is red.\nFOL: Red(Lion)\nTEXT: The lion is round.\nFOL: Round(Lion)\nTEXT: The lion needs the dog.\nFOL: Needs(Lion, Dog)\nTEXT: The lion sees the dog.\nFOL: Sees(Lion, Dog)\nTEXT: The lion visits the dog.\nFOL: Visits(Lion, Dog)\nTEXT: If the lion visits the dog and the dog visits the lion then the lion sees the dog.\nFOL: (Visits(Lion, Dog) & Visits(Dog, Lion)) -> Sees(Lion, Dog)\nTEXT: If something visits the lion then it does not see the dog.\nFOL: all x. (Visits(x, Lion) -> -Sees(x, Dog))\nTEXT: If something needs the lion and it does not visit the lion then the lion needs the dog.\nFOL: all x. (Needs(x, Lion) & -Visits(x, Lion) -> Needs(Lion, x))\nTEXT: The dog is kind.\nFOL: Kind(Dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: Dog(big)\nTEXT: The dog is not green.\nFOL: -Green(Dog)\nTEXT: The dog is not red.\nFOL: -Red(Dog)\nTEXT: The dog is round.\nFOL: Round(Dog)\nTEXT: The dog needs the lion.\nFOL: NeedsLion(Dog)\nTEXT: The dog sees the lion.\nFOL: SeesLion(Dog,Lion)\nTEXT: The dog visits the lion.\nFOL: VisitsLion(Dog,Lion)\nTEXT: The lion is not big.\nFOL: -Big(Lion)\nTEXT: The lion is green.\nFOL: Green(Lion)\nTEXT: The lion is kind.\nFOL: Kind(Lion)\nTEXT: The lion is red.\nFOL: Red(Lion)\nTEXT: The lion is round.\nFOL: Round(Lion)\nTEXT: The lion needs the dog.\nFOL: NeedsDog(Lion)\nTEXT: The lion sees the dog.\nFOL: SeesDog(Lion,Dog)\nTEXT: The lion visits the dog.\nFOL: VisitsDog(Lion,Dog)\nTEXT: If the lion visits the dog and the dog visits the lion then the lion sees the dog.\nFOL: (VisitsLion(Lion,Dog) & VisitsDog(Dog,Lion)) -> SeesDog(Lion,Dog)\nTEXT: If something visits the lion then it does not see the dog.\nFOL: all x. (VisitsLion(x,Lion) -> -SeesDog(x,Dog))\nTEXT: If something needs the lion and it does not visit the lion then the lion needs the dog.\nFOL: all x. (NeedsLion(x) & -VisitsLion(x,Lion) -> NeedsDog(x))\nTEXT: The dog is kind.\nFOL: Kind(Dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: Dog(big)\nTEXT: The dog is not green.\nFOL: -Green(Dog)\nTEXT: The dog is not red.\nFOL: -Red(Dog)\nTEXT: The dog is round.\nFOL: Round(Dog)\nTEXT: The dog needs the lion.\nFOL: Needs(Dog, Lion)\nTEXT: The dog sees the lion.\nFOL: Sees(Dog, Lion)\nTEXT: The dog visits the lion.\nFOL: Visits(Dog, Lion)\nTEXT: The lion is not big.\nFOL: -Big(Lion)\nTEXT: The lion is green.\nFOL: Green(Lion)\nTEXT: The lion is kind.\nFOL: Kind(Lion)\nTEXT: The lion is red.\nFOL: Red(Lion)\nTEXT: The lion is round.\nFOL: Round(Lion)\nTEXT: The lion needs the dog.\nFOL: Needs(Lion, Dog)\nTEXT: The lion sees the dog.\nFOL: Sees(Lion, Dog)\nTEXT: The lion visits the dog.\nFOL: Visits(Lion, Dog)\nTEXT: If the lion visits the dog and the dog visits the lion then the lion sees the dog.\nFOL: ((Visits(Lion, Dog) & Visits(Dog, Lion)) -> Sees(Lion, Dog))\nTEXT: If something visits the lion then it does not see the dog.\nFOL: all x. (Visits(x, Lion) -> -Sees(x, Dog))\nTEXT: If something needs the lion and it does not visit the lion then the lion needs the dog.\nFOL: all x. (Needs(x, Lion) & -Visits(x, Lion) -> Needs(Lion, x))\nTEXT: The dog is kind.\nFOL: Kind(Dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: Dog(big)\nTEXT: The dog is not green.\nFOL: -Green(Dog)\nTEXT: The dog is not red.\nFOL: -Red(Dog)\nTEXT: The dog is round.\nFOL: Round(Dog)\nTEXT: The dog needs the lion.\nFOL: NeedsLion(Dog)\nTEXT: The dog sees the lion.\nFOL: SeesLion(Dog,Lion)\nTEXT: The dog visits the lion.\nFOL: VisitsLion(Dog,Lion)\nTEXT: The lion is not big.\nFOL: -Big(Lion)\nTEXT: The lion is green.\nFOL: Green(Lion)\nTEXT: The lion is kind.\nFOL: Kind(Lion)\nTEXT: The lion is red.\nFOL: Red(Lion)\nTEXT: The lion is round.\nFOL: Round(Lion)\nTEXT: The lion needs the dog.\nFOL: NeedsDog(Lion)\nTEXT: The lion sees the dog.\nFOL: SeesDog(Lion,Dog)\nTEXT: The lion visits the dog.\nFOL: VisitsDog(Lion,Dog)\nTEXT: If the lion visits the dog and the dog visits the lion then the lion sees the dog.\nFOL: (VisitsLion(Lion,Dog) & VisitsDog(Dog,Lion)) -> SeesDog(Lion,Dog)\nTEXT: If something visits the lion then it does not see the dog.\nFOL: all x. (VisitsLion(x,Lion) -> -SeesDog(x,Dog))\nTEXT: If something needs the lion and it does not visit the lion then the lion needs the dog.\nFOL: all x. (NeedsLion(x) & -VisitsLion(x,Lion) -> NeedsDog(x))\nTEXT: The dog is kind.\nFOL: Kind(Dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: Dog(big)\nTEXT: The dog is not green.\nFOL: -Green(Dog)\nTEXT: The dog is not red.\nFOL: -Red(Dog)\nTEXT: The dog is round.\nFOL: Round(Dog)\nTEXT: The dog needs the lion.\nFOL: Needs(Dog, Lion)\nTEXT: The dog sees the lion.\nFOL: Sees(Dog, Lion)\nTEXT: The dog visits the lion.\nFOL: Visits(Dog, Lion)\nTEXT: The lion is not big.\nFOL: -Big(Lion)\nTEXT: The lion is green.\nFOL: Green(Lion)\nTEXT: The lion is kind.\nFOL: Kind(Lion)\nTEXT: The lion is red.\nFOL: Red(Lion)\nTEXT: The lion is round.\nFOL: Round(Lion)\nTEXT: The lion needs the dog.\nFOL: Needs(Lion, Dog)\nTEXT: The lion sees the dog.\nFOL: Sees(Lion, Dog)\nTEXT: The lion visits the dog.\nFOL: Visits(Lion, Dog)\nTEXT: If the lion visits the dog and the dog visits the lion then the lion sees the dog.\nFOL: ((Visits(Lion, Dog) & Visits(Dog, Lion)) -> Sees(Lion, Dog))\nTEXT: If something visits the lion then it does not see the dog.\nFOL: all x. (Visits(x, Lion) -> -Sees(x, Dog))\nTEXT: If something needs the lion and it does not visit the lion then the lion needs the dog.\nFOL: all x. ((Needs(x, Lion) & -Visits(x, Lion)) -> Needs(Lion, x))\nTEXT: The dog is kind.\nFOL: Kind(Dog)\n</EVALUATE>"
  ]
 },
 {
  "index": 154,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is green.\nFOL: BaldEagle(green)\nTEXT: The bald eagle is red.\nFOL: BaldEagle(red)\nTEXT: The tiger is red.\nFOL: Tiger(red)\nTEXT: If something visits the bald eagle and it is blue then the bald eagle likes the tiger.\nFOL: all x. (VisitBaldEagle(x) & BaldEagle(x) & Blue(x) -> LikesTiger(x))\nTEXT: If something visits the bald eagle and it is red then the bald eagle needs the tiger.\nFOL: all x. (VisitBaldEagle(x) & BaldEagle(x) & Red(x) -> NeedsTiger(x))\nTEXT: If something needs the bald eagle and the bald eagle is red then the bald eagle likes the tiger.\nFOL: all x. (NeedsBaldEagle(x) & BaldEagle(red) -> LikesTiger(x))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Green(x) -> NeedsBaldEagle(x))\nTEXT: If something visits the bald eagle then the bald eagle visits the tiger.\nFOL: all x. (VisitBaldEagle(x) -> VisitTiger(x))\nTEXT: If something is blue and it likes the tiger then the tiger likes the bald eagle.\nFOL: all x. (Blue(x) & LikesTiger(x) -> LikesBaldEagle(x))\nTEXT: The bald eagle visits the bald eagle.\nFOL: VisitBaldEagle(baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is green.\nFOL: BaldEagle(green)\nTEXT: The bald eagle is red.\nFOL: BaldEagle(red)\nTEXT: The tiger is red.\nFOL: Tiger(red)\nTEXT: If something visits the bald eagle and it is blue then the bald eagle likes the tiger.\nFOL: all x. (VisitBaldEagle(x) & BaldEagle(x) & Blue(x) -> LikesTiger(x))\nTEXT: If something visits the bald eagle and it is red then the bald eagle needs the tiger.\nFOL: all x. (VisitBaldEagle(x) & BaldEagle(x) & Red(x) -> NeedsTiger(x))\nTEXT: If something needs the bald eagle and the bald eagle is red then the bald eagle likes the tiger.\nFOL: all x. (NeedsBaldEagle(x) & BaldEagle(x) & Red(x) -> LikesTiger(x))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Green(x) -> NeedsBaldEagle(x))\nTEXT: If something visits the bald eagle then the bald eagle visits the tiger.\nFOL: all x. (VisitBaldEagle(x) -> VisitTiger(x))\nTEXT: If something is blue and it likes the tiger then the tiger likes the bald eagle.\nFOL: all x. (Blue(x) & LikesTiger(x) -> LikesBaldEagle(x))\nTEXT: The bald eagle visits the bald eagle.\nFOL: VisitBaldEagle(baldEagle)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is green.\nFOL: BaldEagle(x) -> Green(x)\nTEXT: The bald eagle is red.\nFOL: BaldEagle(x) -> Red(x)\nTEXT: The tiger is red.\nFOL: Tiger(x) -> Red(x)\nTEXT: If something visits the bald eagle and it is blue then the bald eagle likes the tiger.\nFOL: all x. (Visit(x, BaldEagle(x)) & Blue(x) -> Likes(x, Tiger(x)))\nTEXT: If something visits the bald eagle and it is red then the bald eagle needs the tiger.\nFOL: all x. (Visit(x, BaldEagle(x)) & Red(x) -> Needs(x, Tiger(x)))\nTEXT: If something needs the bald eagle and the bald eagle is red then the bald eagle likes the tiger.\nFOL: all x. (Needs(x, BaldEagle(x)) & BaldEagle(x) -> Likes(x, Tiger(x)))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Green(x) -> Needs(x, BaldEagle(x)))\nTEXT: If something visits the bald eagle then the bald eagle visits the tiger.\nFOL: all x. (Visit(x, BaldEagle(x)) -> Visit(x, Tiger(x)))\nTEXT: If something is blue and it likes the tiger then the tiger likes the bald eagle.\nFOL: all x. (Blue(x) & Likes(x, Tiger(x)) -> Likes(Tiger(x), BaldEagle(x)))\nTEXT: The bald eagle visits the bald eagle.\nFOL: Visit(BaldEagle(x), BaldEagle(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is green.\nFOL: BaldEagle(x) -> Green(x)\nTEXT: The bald eagle is red.\nFOL: BaldEagle(x) -> Red(x)\nTEXT: The tiger is red.\nFOL: Tiger(x) -> Red(x)\nTEXT: If something visits the bald eagle and it is blue then the bald eagle likes the tiger.\nFOL: all x. (Visit(x, BaldEagle(x)) & Blue(x) -> Likes(x, Tiger(x)))\nTEXT: If something visits the bald eagle and it is red then the bald eagle needs the tiger.\nFOL: all x. (Visit(x, BaldEagle(x)) & Red(x) -> Needs(x, Tiger(x)))\nTEXT: If something needs the bald eagle and the bald eagle is red then the bald eagle likes the tiger.\nFOL: all x. (Needs(x, BaldEagle(x)) & BaldEagle(x) -> Likes(x, Tiger(x)))\nTEXT: If something is green then it needs the bald eagle.\nFOL: Green(x) -> Needs(x, BaldEagle(x))\nTEXT: If something visits the bald eagle then the bald eagle visits the tiger.\nFOL: all x. (Visit(x, BaldEagle(x)) -> Visit(x, Tiger(x)))\nTEXT: If something is blue and it likes the tiger then the tiger likes the bald eagle.\nFOL: Blue(x) & Likes(x, Tiger(x)) -> Likes(Tiger(x), BaldEagle(x))\nTEXT: The bald eagle visits the bald eagle.\nFOL: Visit(BaldEagle(x), BaldEagle(x))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is green.\nFOL: BaldEagle(x) -> Green(x)\nTEXT: The bald eagle is red.\nFOL: BaldEagle(x) -> Red(x)\nTEXT: The tiger is red.\nFOL: Tiger(x) -> Red(x)\nTEXT: If something visits the bald eagle and it is blue then the bald eagle likes the tiger.\nFOL: all x. (Visit(x, BaldEagle(x)) & Blue(x) -> BaldEagle(x) -> LikesTiger(x))\nTEXT: If something visits the bald eagle and it is red then the bald eagle needs the tiger.\nFOL: all x. (Visit(x, BaldEagle(x)) & Red(x) -> BaldEagle(x) -> NeedsTiger(x))\nTEXT: If something needs the bald eagle and the bald eagle is red then the bald eagle likes the tiger.\nFOL: all x. (Needs(x, BaldEagle(x)) & BaldEagle(x) -> Red(x) -> LikesTiger(x))\nTEXT: If something is green then it needs the bald eagle.\nFOL: all x. (Green(x) -> Needs(x, BaldEagle(x)))\nTEXT: If something visits the bald eagle then the bald eagle visits the tiger.\nFOL: all x. (Visit(x, BaldEagle(x)) -> BaldEagle(x) -> Visit(x, Tiger(x)))\nTEXT: If something is blue and it likes the tiger then the tiger likes the bald eagle.\nFOL: all x. (Blue(x) & LikesTiger(x) -> LikesBaldEagle(x))\nTEXT: The bald eagle visits the bald eagle.\nFOL: BaldEagle(x) -> Visit(x, x)\n</EVALUATE>"
  ]
 },
 {
  "index": 155,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle eats the lion.\nFOL: BaldEagle(baldEagle) & Lion(lion) & Eat(baldEagle, lion)\nTEXT: The bald eagle eats the tiger.\nFOL: BaldEagle(baldEagle) & Tiger(tiger) & Eat(baldEagle, tiger)\nTEXT: The bald eagle is green.\nFOL: BaldEagle(baldEagle) & Green(baldEagle)\nTEXT: The bald eagle needs the mouse.\nFOL: BaldEagle(baldEagle) & Needs(baldEagle, mouse)\nTEXT: The bald eagle sees the mouse.\nFOL: BaldEagle(baldEagle) & See(baldEagle, mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: BaldEagle(baldEagle) & See(baldEagle, tiger)\nTEXT: The lion eats the bald eagle.\nFOL: Lion(lion) & BaldEagle(baldEagle) & Eat(lion, baldEagle)\nTEXT: The lion eats the mouse.\nFOL: Lion(lion) & Mouse(mouse) & Eat(lion, mouse)\nTEXT: The lion is red.\nFOL: Lion(lion) & Red(lion)\nTEXT: The lion needs the mouse.\nFOL: Lion(lion) & Needs(lion, mouse)\nTEXT: The mouse is red.\nFOL: Mouse(mouse) & Red(mouse)\nTEXT: The mouse is round.\nFOL: Mouse(mouse) & Round(mouse)\nTEXT: The mouse needs the lion.\nFOL: Mouse(mouse) & Needs(mouse, lion)\nTEXT: The mouse sees the bald eagle.\nFOL: Mouse(mouse) & See(mouse, baldEagle)\nTEXT: The mouse sees the lion.\nFOL: Mouse(mouse) & See(mouse, lion)\nTEXT: The tiger needs the lion.\nFOL: Tiger(tiger) & Needs(tiger, lion)\nTEXT: If someone needs the mouse and they need the tiger then the mouse is green.\nFOL: all x. (Needs(x, mouse) & Needs(x, tiger) -> Green(mouse))\nTEXT: If someone is nice and they need the mouse then they eat the mouse.\nFOL: all x. (Nice(x) & Needs(x, mouse) -> Eat(x, mouse))\nTEXT: If someone is green and they see the tiger then the tiger needs the bald eagle.\nFOL: all x. (Green(x) & See(x, tiger) -> Needs(baldEagle, tiger))\nTEXT: If someone is round and they see the tiger then the tiger is red.\nFOL: all x. (Round(x) & See(x, tiger) -> Red(tiger))\nTEXT: If someone sees the bald eagle then the bald eagle is cold.\nFOL: all x. (See(x, baldEagle) -> Cold(baldEagle))\nTEXT: If someone is green then they need the tiger.\nFOL: all x. (Green(x) -> Needs(x, tiger))\nTEXT: The mouse does not need the tiger.\nFOL: -Needs(mouse, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the lion.\nFOL: BaldEagle(baldEagle) & Lion(lion) & Eat(baldEagle, lion)\nTEXT: The bald eagle eats the tiger.\nFOL: BaldEagle(baldEagle) & Tiger(tiger) & Eat(baldEagle, tiger)\nTEXT: The bald eagle is green.\nFOL: BaldEagle(baldEagle) & Green(baldEagle)\nTEXT: The bald eagle needs the mouse.\nFOL: BaldEagle(baldEagle) & Needs(baldEagle, mouse)\nTEXT: The bald eagle sees the mouse.\nFOL: BaldEagle(baldEagle) & See(baldEagle, mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: BaldEagle(baldEagle) & See(baldEagle, tiger)\nTEXT: The lion eats the bald eagle.\nFOL: Lion(lion) & BaldEagle(baldEagle) & Eat(lion, baldEagle)\nTEXT: The lion eats the mouse.\nFOL: Lion(lion) & Mouse(mouse) & Eat(lion, mouse)\nTEXT: The lion is red.\nFOL: Lion(lion) & Red(lion)\nTEXT: The lion needs the mouse.\nFOL: Lion(lion) & Needs(lion, mouse)\nTEXT: The mouse is red.\nFOL: Mouse(mouse) & Red(mouse)\nTEXT: The mouse is round.\nFOL: Mouse(mouse) & Round(mouse)\nTEXT: The mouse needs the lion.\nFOL: Mouse(mouse) & Needs(mouse, lion)\nTEXT: The mouse sees the bald eagle.\nFOL: Mouse(mouse) & See(mouse, baldEagle)\nTEXT: The mouse sees the lion.\nFOL: Mouse(mouse) & See(mouse, lion)\nTEXT: The tiger needs the lion.\nFOL: Tiger(tiger) & Needs(tiger, lion)\nTEXT: If someone needs the mouse and they need the tiger then the mouse is green.\nFOL: all x. (Needs(x, mouse) & Needs(x, tiger) -> Green(mouse))\nTEXT: If someone is nice and they need the mouse then they eat the mouse.\nFOL: all x. (Nice(x) & Needs(x, mouse) -> Eat(x, mouse))\nTEXT: If someone is green and they see the tiger then the tiger needs the bald eagle.\nFOL: all x. (Green(x) & See(x, tiger) -> Needs(tiger, baldEagle))\nTEXT: If someone is round and they see the tiger then the tiger is red.\nFOL: all x. (Round(x) & See(x, tiger) -> Red(tiger))\nTEXT: If someone sees the bald eagle then the bald eagle is cold.\nFOL: all x. (See(x, baldEagle) -> Cold(baldEagle))\nTEXT: If someone is green then they need the tiger.\nFOL: all x. (Green(x) -> Needs(x, tiger))\nTEXT: The mouse does not need the tiger.\nFOL: -Needs(mouse, tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the lion.\nFOL: BaldEagle(x) & Lion(y) & Eat(x, y)\nTEXT: The bald eagle eats the tiger.\nFOL: BaldEagle(x) & Tiger(y) & Eat(x, y)\nTEXT: The bald eagle is green.\nFOL: BaldEagle(x) & Green(x)\nTEXT: The bald eagle needs the mouse.\nFOL: BaldEagle(x) & Needs(x, Mouse)\nTEXT: The bald eagle sees the mouse.\nFOL: BaldEagle(x) & See(x, Mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: BaldEagle(x) & See(x, Tiger)\nTEXT: The lion eats the bald eagle.\nFOL: Lion(x) & BaldEagle(y) & Eat(x, y)\nTEXT: The lion eats the mouse.\nFOL: Lion(x) & Mouse(y) & Eat(x, y)\nTEXT: The lion is red.\nFOL: Lion(x) & Red(x)\nTEXT: The lion needs the mouse.\nFOL: Lion(x) & Needs(x, Mouse)\nTEXT: The mouse is red.\nFOL: Mouse(x) & Red(x)\nTEXT: The mouse is round.\nFOL: Mouse(x) & Round(x)\nTEXT: The mouse needs the lion.\nFOL: Mouse(x) & Needs(x, Lion)\nTEXT: The mouse sees the bald eagle.\nFOL: Mouse(x) & BaldEagle(y) & See(x, y)\nTEXT: The mouse sees the lion.\nFOL: Mouse(x) & Lion(y) & See(x, y)\nTEXT: The tiger needs the lion.\nFOL: Tiger(x) & Needs(x, Lion)\nTEXT: If someone needs the mouse and they need the tiger then the mouse is green.\nFOL: all x. (Needs(x, Mouse) & Needs(x, Tiger) -> Green(x))\nTEXT: If someone is nice and they need the mouse then they eat the mouse.\nFOL: all x. (Nice(x) & Needs(x, Mouse) -> Eat(x, Mouse))\nTEXT: If someone is green and they see the tiger then the tiger needs the bald eagle.\nFOL: all x. (Green(x) & See(x, Tiger) -> Needs(BaldEagle(x), BaldEagle(x)))\nTEXT: If someone is round and they see the tiger then the tiger is red.\nFOL: all x. (Round(x) & See(x, Tiger) -> Red(Tiger(x)))\nTEXT: If someone sees the bald eagle then the bald eagle is cold.\nFOL: all x. (See(x, BaldEagle(x)) -> Cold(BaldEagle(x)))\nTEXT: If someone is green then they need the tiger.\nFOL: all x. (Green(x) -> Needs(x, Tiger))\nTEXT: The mouse does not need the tiger.\nFOL: -Needs(Mouse, Tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the lion.\nFOL: BaldEagle(x) & Lion(y) & Eat(x, y)\nTEXT: The bald eagle eats the tiger.\nFOL: BaldEagle(x) & Tiger(y) & Eat(x, y)\nTEXT: The bald eagle is green.\nFOL: BaldEagle(x) & Green(x)\nTEXT: The bald eagle needs the mouse.\nFOL: BaldEagle(x) & Needs(x, Mouse)\nTEXT: The bald eagle sees the mouse.\nFOL: BaldEagle(x) & See(x, Mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: BaldEagle(x) & See(x, Tiger)\nTEXT: The lion eats the bald eagle.\nFOL: Lion(x) & BaldEagle(y) & Eat(x, y)\nTEXT: The lion eats the mouse.\nFOL: Lion(x) & Mouse(y) & Eat(x, y)\nTEXT: The lion is red.\nFOL: Lion(x) & Red(x)\nTEXT: The lion needs the mouse.\nFOL: Lion(x) & Needs(x, Mouse)\nTEXT: The mouse is red.\nFOL: Mouse(x) & Red(x)\nTEXT: The mouse is round.\nFOL: Mouse(x) & Round(x)\nTEXT: The mouse needs the lion.\nFOL: Mouse(x) & Needs(x, Lion)\nTEXT: The mouse sees the bald eagle.\nFOL: Mouse(x) & BaldEagle(y) & See(x, y)\nTEXT: The mouse sees the lion.\nFOL: Mouse(x) & Lion(y) & See(x, y)\nTEXT: The tiger needs the lion.\nFOL: Tiger(x) & Needs(x, Lion)\nTEXT: If someone needs the mouse and they need the tiger then the mouse is green.\nFOL: all x. (Needs(x, Mouse) & Needs(x, Tiger) -> Green(x))\nTEXT: If someone is nice and they need the mouse then they eat the mouse.\nFOL: all x. (Nice(x) & Needs(x, Mouse) -> Eat(x, Mouse))\nTEXT: If someone is green and they see the tiger then the tiger needs the bald eagle.\nFOL: all x. (Green(x) & See(x, Tiger) -> Needs(BaldEagle, x))\nTEXT: If someone is round and they see the tiger then the tiger is red.\nFOL: all x. (Round(x) & See(x, Tiger) -> Red(x))\nTEXT: If someone sees the bald eagle then the bald eagle is cold.\nFOL: all x. (See(x, BaldEagle) -> Cold(x))\nTEXT: If someone is green then they need the tiger.\nFOL: all x. (Green(x) -> Needs(x, Tiger))\nTEXT: The mouse does not need the tiger.\nFOL: -Needs(Mouse, Tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the lion.\nFOL: BaldEagle(x) & Lion(y) & Eat(x, y)\nTEXT: The bald eagle eats the tiger.\nFOL: BaldEagle(x) & Tiger(y) & Eat(x, y)\nTEXT: The bald eagle is green.\nFOL: BaldEagle(x) & Green(x)\nTEXT: The bald eagle needs the mouse.\nFOL: BaldEagle(x) & Needs(x, Mouse)\nTEXT: The bald eagle sees the mouse.\nFOL: BaldEagle(x) & See(x, Mouse)\nTEXT: The bald eagle sees the tiger.\nFOL: BaldEagle(x) & See(x, Tiger)\nTEXT: The lion eats the bald eagle.\nFOL: Lion(x) & BaldEagle(y) & Eat(x, y)\nTEXT: The lion eats the mouse.\nFOL: Lion(x) & Mouse(y) & Eat(x, y)\nTEXT: The lion is red.\nFOL: Lion(x) & Red(x)\nTEXT: The lion needs the mouse.\nFOL: Lion(x) & Needs(x, Mouse)\nTEXT: The mouse is red.\nFOL: Mouse(x) & Red(x)\nTEXT: The mouse is round.\nFOL: Mouse(x) & Round(x)\nTEXT: The mouse needs the lion.\nFOL: Mouse(x) & Needs(x, Lion)\nTEXT: The mouse sees the bald eagle.\nFOL: Mouse(x) & BaldEagle(y) & See(x, y)\nTEXT: The mouse sees the lion.\nFOL: Mouse(x) & Lion(y) & See(x, y)\nTEXT: The tiger needs the lion.\nFOL: Tiger(x) & Needs(x, Lion)\nTEXT: If someone needs the mouse and they need the tiger then the mouse is green.\nFOL: all x. (Needs(x, Mouse) & Needs(x, Tiger) -> Green(x))\nTEXT: If someone is nice and they need the mouse then they eat the mouse.\nFOL: all x. (Nice(x) & Needs(x, Mouse) -> Eat(x, Mouse))\nTEXT: If someone is green and they see the tiger then the tiger needs the bald eagle.\nFOL: all x. (Green(x) & See(x, Tiger) -> Needs(BaldEagle(x), x))\nTEXT: If someone is round and they see the tiger then the tiger is red.\nFOL: all x. (Round(x) & See(x, Tiger) -> Red(x))\nTEXT: If someone sees the bald eagle then the bald eagle is cold.\nFOL: all x. (See(x, BaldEagle) -> Cold(x))\nTEXT: If someone is green then they need the tiger.\nFOL: all x. (Green(x) -> Needs(x, Tiger))\nTEXT: The mouse does not need the tiger.\nFOL: -Needs(Mouse, Tiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 156,
  "responses": [
   "<EVALUATE>\nTEXT: Charlie is a really nice guy with a big round body, usually wearing red.\nFOL: NiceGuy(charlie) & Big(charlie) & Round(charlie) & Red(charlie)\nTEXT: Dave seems to be round.\nFOL: Round(dave)\nTEXT: That guy Eric sure is nice.\nFOL: NiceGuy(eric)\nTEXT: Fred is still young, which explains why he is round and cold, however, most people still think Fred is nice.\nFOL: Young(fred) & Cold(fred) & Round(fred) & Nice(fred)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: Cold(x) & Nice(x) & Red(x)\nTEXT: Rough people who are red in color and big are usally round in shape.\nFOL: Rough(x) & Red(x) & Big(x) & Round(x)\nTEXT: I've noticed that nice people who have rough, green skin have a tendancy to be round.\nFOL: NiceGuy(x) & Rough(x) & Green(x) & Round(x)\nTEXT: Having cold and red qualities means a person will also have a rough quality.\nFOL: Cold(x) & Red(x) & Rough(x)\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: Kind(x) & Cold(x) & Red(x) -> Young(x)\nTEXT: Red people, who are also round and young, are often quite blue as well.\nFOL: Red(x) & Round(x) & Young(x) -> Blue(x)\nTEXT: When someone is blue, nice and young they will also be as big as the sun.\nFOL: Blue(x) & Nice(x) & Young(x) -> Big(x)\nTEXT: Charlie is not blue.\nFOL: -Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is a really nice guy with a big round body, usually wearing red.\nFOL: NiceGuy(charlie) & Big(charlie) & Round(charlie) & Red(charlie)\nTEXT: Dave seems to be round.\nFOL: Round(dave)\nTEXT: That guy Eric sure is nice.\nFOL: NiceGuy(eric)\nTEXT: Fred is still young, which explains why he is round and cold, however, most people still think Fred is nice.\nFOL: Young(fred) & Cold(fred) & Round(fred) & Nice(fred)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: Cold(x) & Nice(x) & Red(x)\nTEXT: Rough people who are red in color and big are usally round in shape.\nFOL: Rough(x) & Red(x) & Big(x) & Round(x)\nTEXT: I've noticed that nice people who have rough, green skin have a tendancy to be round.\nFOL: NiceGuy(x) & Rough(x) & Green(x) & Round(x)\nTEXT: Having cold and red qualities means a person will also have a rough quality.\nFOL: Cold(x) & Red(x) -> Rough(x)\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: Kind(x) & Cold(x) & Red(x) -> Young(x)\nTEXT: Red people, who are also round and young, are often quite blue as well.\nFOL: Red(x) & Round(x) & Young(x) -> Blue(x)\nTEXT: When someone is blue, nice and young they will also be as big as the sun.\nFOL: Blue(x) & Nice(x) & Young(x) -> Big(x)\nTEXT: Charlie is not blue.\nFOL: -Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is a really nice guy with a big round body, usually wearing red.\nFOL: NiceGuy(charlie) & Big(charlie) & Round(charlie) & Red(charlie)\nTEXT: Dave seems to be round.\nFOL: Round(dave)\nTEXT: That guy Eric sure is nice.\nFOL: NiceGuy(eric)\nTEXT: Fred is still young, which explains why he is round and cold, however, most people still think Fred is nice.\nFOL: Young(fred) & Round(fred) & Cold(fred) & Nice(fred)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: Cold(x) & Nice(x) & Red(x)\nTEXT: Rough people who are red in color and big are usally round in shape.\nFOL: Rough(x) & Red(x) & Big(x) & Round(x)\nTEXT: I've noticed that nice people who have rough, green skin have a tendancy to be round.\nFOL: NiceGuy(x) & Rough(x) & Green(x) & Round(x)\nTEXT: Having cold and red qualities means a person will also have a rough quality.\nFOL: Cold(x) & Red(x) -> Rough(x)\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: Kind(x) & Cold(x) & Red(x) -> Young(x)\nTEXT: Red people, who are also round and young, are often quite blue as well.\nFOL: Red(x) & Round(x) & Young(x) -> Blue(x)\nTEXT: When someone is blue, nice and young they will also be as big as the sun.\nFOL: Blue(x) & Nice(x) & Young(x) -> Big(x)\nTEXT: Charlie is not blue.\nFOL: -Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is a really nice guy with a big round body, usually wearing red.\nFOL: NiceGuy(charlie) & Big(charlie) & Round(charlie) & Red(charlie)\nTEXT: Dave seems to be round.\nFOL: Round(dave)\nTEXT: That guy Eric sure is nice.\nFOL: NiceGuy(eric)\nTEXT: Fred is still young, which explains why he is round and cold, however, most people still think Fred is nice.\nFOL: Young(fred) & Cold(fred) & Round(fred) & Nice(fred)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: Cold(x) & Nice(x) | Red(x)\nTEXT: Rough people who are red in color and big are usally round in shape.\nFOL: Rough(x) & Red(x) & Big(x) -> Round(x)\nTEXT: I've noticed that nice people who have rough, green skin have a tendancy to be round.\nFOL: NiceGuy(x) & Green(x) & Rough(x) -> Round(x)\nTEXT: Having cold and red qualities means a person will also have a rough quality.\nFOL: Cold(x) & Red(x) -> Rough(x)\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: Kind(x) & Cold(x) & Red(x) -> Young(x)\nTEXT: Red people, who are also round and young, are often quite blue as well.\nFOL: Red(x) & Round(x) & Young(x) -> Blue(x)\nTEXT: When someone is blue, nice and young they will also be as big as the sun.\nFOL: Blue(x) & Nice(x) & Young(x) -> Big(x)\nTEXT: Charlie is not blue.\nFOL: -Blue(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is a really nice guy with a big round body, usually wearing red.\nFOL: NiceGuy(charlie) & Big(charlie) & Round(charlie) & Red(charlie)\nTEXT: Dave seems to be round.\nFOL: Round(dave)\nTEXT: That guy Eric sure is nice.\nFOL: NiceGuy(eric)\nTEXT: Fred is still young, which explains why he is round and cold, however, most people still think Fred is nice.\nFOL: Young(fred) & Cold(fred) & Round(fred) & Nice(fred)\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: Cold(x) & Nice(x) & Red(x)\nTEXT: Rough people who are red in color and big are usally round in shape.\nFOL: Rough(x) & Red(x) & Big(x) & Round(x)\nTEXT: I've noticed that nice people who have rough, green skin have a tendancy to be round.\nFOL: NiceGuy(x) & Rough(x) & Green(x) & Round(x)\nTEXT: Having cold and red qualities means a person will also have a rough quality.\nFOL: Cold(x) & Red(x) & Rough(x)\nTEXT: Is a kind person if feeling cold and looking red then they are usually young.\nFOL: Kind(x) & Cold(x) & Red(x) & Young(x)\nTEXT: Red people, who are also round and young, are often quite blue as well.\nFOL: Red(x) & Round(x) & Young(x) & Blue(x)\nTEXT: When someone is blue, nice and young they will also be as big as the sun.\nFOL: Blue(x) & Nice(x) & Young(x) & Big(x) & Sun(x)\nTEXT: Charlie is not blue.\nFOL: -Blue(charlie)\n</EVALUATE>"
  ]
 },
 {
  "index": 157,
  "responses": [
   "<EVALUATE>\nTEXT: Bob may be young but he is nice, wears green shoes and is cold.\nFOL: (Young(Bob) & Nice(Bob) & GreenShoes(Bob) & Cold(Bob))\nTEXT: Eric was proud of being round, yet rough.\nFOL: (Proud(Eric) & Round(Eric) & Rough(Eric))\nTEXT: His red cheeks glowed.\nFOL: RedCheeks(Glowed)\nTEXT: Fred is feeling cold -- he is also feeling quite rough, red, nice and round.\nFOL: (Cold(Fred) & Rough(Fred) & Red(Fred) & Nice(Fred) & Round(Fred))\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: all x. (Rough(x) & Tumble(x) & Gentle(x) & Kind(x) -> Blue(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: (Green(x) & Young(x) & Round(x) -> Rough(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: all x. (Nice(x) & Green(x) & Big(x) -> Young(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: all x. (Cold(x) & Red(x) & Blue(x) -> Big(x))\nTEXT: Fred is not blue.\nFOL: -Blue(Fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob may be young but he is nice, wears green shoes and is cold.\nFOL: (Young(Bob) & Nice(Bob) & GreenShoes(Bob) & Cold(Bob))\nTEXT: Eric was proud of being round, yet rough.\nFOL: ProudOfBeingRound(Eric) & Rough(Eric)\nTEXT: His red cheeks glowed.\nFOL: RedCheeks(Glowed)\nTEXT: Fred is feeling cold -- he is also feeling quite rough, red, nice and round.\nFOL: Cold(Fred) & Rough(Fred) & Red(Fred) & Nice(Fred) & Round(Fred)\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: (Rough(x) & Tumble(x) & Gentle(x) & Kind(x)) -> Blue(x)\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: (Green(x) & Young(x) & Round(x)) -> Rough(x)\nTEXT: Cold and red people are always kind to others.\nFOL: (Cold(x) & Red(x)) -> KindToOthers(x)\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: (Nice(x) & Green(x) & Big(x)) -> Young(x)\nTEXT: A person who is cold and red and blue is big.\nFOL: (Cold(x) & Red(x) & Blue(x)) -> Big(x)\nTEXT: Fred is not blue.\nFOL: -Blue(Fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob may be young but he is nice, wears green shoes and is cold.\nFOL: (Young(Bob) & Nice(Bob) & GreenShoes(Bob) & Cold(Bob))\nTEXT: Eric was proud of being round, yet rough.\nFOL: (Proud(Eric) & Round(Eric) & Rough(Eric))\nTEXT: His red cheeks glowed.\nFOL: RedCheeks(Glowed)\nTEXT: Fred is feeling cold -- he is also feeling quite rough, red, nice and round.\nFOL: (Cold(Fred) & Rough(Fred) & Red(Fred) & Nice(Fred) & Round(Fred))\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: all x. (Rough(x) & Tumble(x) & Gentle(x) & Kind(x) -> Blue(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: ((Green(x) & Young(x) & Round(x)) -> Rough(x))\nTEXT: Cold and red people are always kind to others.\nFOL: all x. (Cold(x) & Red(x) -> Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: all x. (Nice(x) & Green(x) & Big(x) -> Young(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: all x. (Cold(x) & Red(x) & Blue(x) -> Big(x))\nTEXT: Fred is not blue.\nFOL: -Blue(Fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob may be young but he is nice, wears green shoes and is cold.\nFOL: (Young(Bob) & Nice(Bob) & GreenShoes(Bob) & Cold(Bob))\nTEXT: Eric was proud of being round, yet rough.\nFOL: ProudOfBeingRound(Eric) & Rough(Eric)\nTEXT: His red cheeks glowed.\nFOL: RedCheeks(Glowed)\nTEXT: Fred is feeling cold -- he is also feeling quite rough, red, nice and round.\nFOL: Cold(Fred) & Rough(Fred) & Red(Fred) & Nice(Fred) & Round(Fred)\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: (Rough(x) & Tumble(x) & Gentle(x) & Kind(x) -> Blue(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: (Green(x) & Young(x) & Round(x) -> Rough(x))\nTEXT: Cold and red people are always kind to others.\nFOL: (Cold(x) & Red(x) -> Kind(x))\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: (Nice(x) & Green(x) & Big(x) -> Young(x))\nTEXT: A person who is cold and red and blue is big.\nFOL: (Cold(x) & Red(x) & Blue(x) -> Big(x))\nTEXT: Fred is not blue.\nFOL: -Blue(Fred)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob may be young but he is nice, wears green shoes and is cold.\nFOL: (Young(Bob) & Nice(Bob) & GreenShoes(Bob) & Cold(Bob))\nTEXT: Eric was proud of being round, yet rough.\nFOL: ProudOfBeingRound(Eric) & Rough(Eric)\nTEXT: His red cheeks glowed.\nFOL: RedCheeks(Glowed)\nTEXT: Fred is feeling cold -- he is also feeling quite rough, red, nice and round.\nFOL: Cold(Fred) & Rough(Fred) & Red(Fred) & Nice(Fred) & Round(Fred)\nTEXT: Folks who are rough and tumble yet gentle and kind are blue.\nFOL: (Rough(x) & Tumble(x) & Gentle(x) & Kind(x)) -> Blue(x)\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: (Green(x) & Young(x) & Round(x)) -> Rough(x)\nTEXT: Cold and red people are always kind to others.\nFOL: (Cold(x) & Red(x)) -> Kind(x)\nTEXT: If you know someone who is nice, green, and big, you know a young person.\nFOL: (Nice(x) & Green(x) & Big(x)) -> Young(x)\nTEXT: A person who is cold and red and blue is big.\nFOL: (Cold(x) & Red(x) & Blue(x)) -> Big(x)\nTEXT: Fred is not blue.\nFOL: -Blue(Fred)\n</EVALUATE>"
  ]
 },
 {
  "index": 158,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(Bob)\n\nTEXT: Bob is rough.\nFOL: Rough(Bob)\n\nTEXT: Bob is white.\nFOL: White(Bob)\n\nTEXT: Bob is young.\nFOL: Young(Bob)\n\nTEXT: Charlie is green.\nFOL: Green(Charlie)\n\nTEXT: Charlie is quiet.\nFOL: Quiet(Charlie)\n\nTEXT: Charlie is rough.\nFOL: Rough(Charlie)\n\nTEXT: Charlie is round.\nFOL: Round(Charlie)\n\nTEXT: Charlie is young.\nFOL: Young(Charlie)\n\nTEXT: Harry is furry.\nFOL: Furry(Harry)\n\nTEXT: Harry is green.\nFOL: Green(Harry)\n\nTEXT: Harry is quiet.\nFOL: Quiet(Harry)\n\nTEXT: Harry is rough.\nFOL: Rough(Harry)\n\nTEXT: Harry is round.\nFOL: Round(Harry)\n\nTEXT: Harry is white.\nFOL: White(Harry)\n\nTEXT: Harry is young.\nFOL: Young(Harry)\n\nTEXT: Round things are white.\nFOL: all x. (Round(x) -> White(x))\n\nTEXT: If something is rough then it is furry.\nFOL: all x. (Rough(x) -> Furry(x))\n\nTEXT: All rough things are furry.\nFOL: all x. (Rough(x) -> Furry(x))\n\nTEXT: Charlie is young.\nFOL: Young(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(bob)\n\nTEXT: Bob is rough.\nFOL: Rough(bob)\n\nTEXT: Bob is white.\nFOL: White(bob)\n\nTEXT: Bob is young.\nFOL: Young(bob)\n\nTEXT: Charlie is green.\nFOL: Green(charlie)\n\nTEXT: Charlie is quiet.\nFOL: Quiet(charlie)\n\nTEXT: Charlie is rough.\nFOL: Rough(charlie)\n\nTEXT: Charlie is round.\nFOL: Round(charlie)\n\nTEXT: Charlie is young.\nFOL: Young(charlie)\n\nTEXT: Harry is furry.\nFOL: Furry(harry)\n\nTEXT: Harry is green.\nFOL: Green(harry)\n\nTEXT: Harry is quiet.\nFOL: Quiet(harry)\n\nTEXT: Harry is rough.\nFOL: Rough(harry)\n\nTEXT: Harry is round.\nFOL: Round(harry)\n\nTEXT: Harry is white.\nFOL: White(harry)\n\nTEXT: Harry is young.\nFOL: Young(harry)\n\nTEXT: Round things are white.\nFOL: all x. (Round(x) -> White(x))\n\nTEXT: If something is rough then it is furry.\nFOL: all x. (Rough(x) -> Furry(x))\n\nTEXT: All rough things are furry.\nFOL: all x. (Rough(x) -> Furry(x))\n\nTEXT: Charlie is young.\nFOL: Young(charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Furry(Bob)\nTEXT: Bob is rough.\nFOL: Rough(Bob)\nTEXT: Bob is white.\nFOL: White(Bob)\nTEXT: Bob is young.\nFOL: Young(Bob)\nTEXT: Charlie is green.\nFOL: Green(Charlie)\nTEXT: Charlie is quiet.\nFOL: Quiet(Charlie)\nTEXT: Charlie is rough.\nFOL: Rough(Charlie)\nTEXT: Charlie is round.\nFOL: Round(Charlie)\nTEXT: Charlie is young.\nFOL: Young(Charlie)\nTEXT: Harry is furry.\nFOL: Furry(Harry)\nTEXT: Harry is green.\nFOL: Green(Harry)\nTEXT: Harry is quiet.\nFOL: Quiet(Harry)\nTEXT: Harry is rough.\nFOL: Rough(Harry)\nTEXT: Harry is round.\nFOL: Round(Harry)\nTEXT: Harry is white.\nFOL: White(Harry)\nTEXT: Harry is young.\nFOL: Young(Harry)\nTEXT: Round things are white.\nFOL: all x. (Round(x) -> White(x))\nTEXT: If something is rough then it is furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: All rough things are furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: Charlie is young.\nFOL: Young(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: Bob(Furry)\nTEXT: Bob is rough.\nFOL: Bob(Rough)\nTEXT: Bob is white.\nFOL: Bob(White)\nTEXT: Bob is young.\nFOL: Bob(Young)\nTEXT: Charlie is green.\nFOL: Charlie(Green)\nTEXT: Charlie is quiet.\nFOL: Charlie(Quiet)\nTEXT: Charlie is rough.\nFOL: Charlie(Rough)\nTEXT: Charlie is round.\nFOL: Charlie(Round)\nTEXT: Charlie is young.\nFOL: Charlie(Young)\nTEXT: Harry is furry.\nFOL: Harry(Furry)\nTEXT: Harry is green.\nFOL: Harry(Green)\nTEXT: Harry is quiet.\nFOL: Harry(Quiet)\nTEXT: Harry is rough.\nFOL: Harry(Rough)\nTEXT: Harry is round.\nFOL: Harry(Round)\nTEXT: Harry is white.\nFOL: Harry(White)\nTEXT: Harry is young.\nFOL: Harry(Young)\nTEXT: Round things are white.\nFOL: all x. (Round(x) -> White(x))\nTEXT: If something is rough then it is furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: All rough things are furry.\nFOL: all x. (Rough(x) -> Furry(x))\nTEXT: Charlie is young.\nFOL: Charlie(Young)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is furry.\nFOL: BobFurry\n\nTEXT: Bob is rough.\nFOL: BobRough\n\nTEXT: Bob is white.\nFOL: BobWhite\n\nTEXT: Bob is young.\nFOL: BobYoung\n\nTEXT: Charlie is green.\nFOL: CharlieGreen\n\nTEXT: Charlie is quiet.\nFOL: CharlieQuiet\n\nTEXT: Charlie is rough.\nFOL: CharlieRough\n\nTEXT: Charlie is round.\nFOL: CharlieRound\n\nTEXT: Charlie is young.\nFOL: CharlieYoung\n\nTEXT: Harry is furry.\nFOL: HarryFurry\n\nTEXT: Harry is green.\nFOL: HarryGreen\n\nTEXT: Harry is quiet.\nFOL: HarryQuiet\n\nTEXT: Harry is rough.\nFOL: HarryRough\n\nTEXT: Harry is round.\nFOL: HarryRound\n\nTEXT: Harry is white.\nFOL: HarryWhite\n\nTEXT: Harry is young.\nFOL: HarryYoung\n\nTEXT: Round things are white.\nFOL: all x. (Round(x) -> White(x))\n\nTEXT: If something is rough then it is furry.\nFOL: all x. (Rough(x) -> Furry(x))\n\nTEXT: All rough things are furry.\nFOL: all x. (Rough(x) -> Furry(x))\n\nTEXT: Charlie is young.\nFOL: CharlieYoung\n</EVALUATE>"
  ]
 },
 {
  "index": 159,
  "responses": [
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: Dog(dog) -> Big(dog)\n\nTEXT: If the dog is young then the dog is blue.\nFOL: Dog(dog) & Young(dog) -> Blue(dog)\n\nTEXT: Big things are kind.\nFOL: Big(x) -> Kind(x)\n\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) -> Young(x))\n\nTEXT: The dog is not cold.\nFOL: -Cold(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: Dog(dog) -> Big(dog)\nTEXT: If the dog is young then the dog is blue.\nFOL: Dog(dog) & Young(dog) -> Blue(dog)\nTEXT: Big things are kind.\nFOL: Big(x) -> Kind(x)\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: The dog is not cold.\nFOL: -Cold(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: Dog(dog) & Big(dog)\n\nTEXT: If the dog is young then the dog is blue.\nFOL: Young(dog) -> Blue(dog)\n\nTEXT: Big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\n\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) -> Young(x))\n\nTEXT: The dog is not cold.\nFOL: -Cold(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: Dog(dog) & Big(dog)\nTEXT: If the dog is young then the dog is blue.\nFOL: Young(dog) -> Blue(dog)\nTEXT: Big things are kind.\nFOL: all x. (Big(x) -> Kind(x))\nTEXT: All kind things are young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: The dog is not cold.\nFOL: -Cold(dog)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The dog is big.\nFOL: Dog(dog) -> Big(dog)\n\nTEXT: If the dog is young then the dog is blue.\nFOL: Dog(dog) & Young(dog) -> Blue(dog)\n\nTEXT: Big things are kind.\nFOL: Big(x) -> Kind(x)\n\nTEXT: All kind things are young.\nFOL: Kind(x) -> Young(x)\n\nTEXT: The dog is not cold.\nFOL: -Cold(dog)\n</EVALUATE>"
  ]
 },
 {
  "index": 160,
  "responses": [
   "<EVALUATE>\nTEXT: The rabbit is cold.\nFOL: Rabbit(cold)\nTEXT: If something is rough and kind then it is blue.\nFOL: all x. (Rough(x) & Kind(x) -> Blue(x))\nTEXT: Nice, rough things are kind.\nFOL: all x. (Nice(x) & Rough(x) -> Kind(x))\nTEXT: If the rabbit is cold then the rabbit is nice.\nFOL: Cold(rabbit) -> Nice(rabbit)\nTEXT: Kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\nTEXT: Cold things are kind.\nFOL: all x. (Cold(x) -> Kind(x))\nTEXT: All nice things are rough.\nFOL: all x. (Nice(x) -> Rough(x))\nTEXT: The rabbit is nice.\nFOL: Nice(rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The rabbit is cold.\nFOL: Rabbit(rabbit) & Cold(rabbit)\n\nTEXT: If something is rough and kind then it is blue.\nFOL: all x. (Rough(x) & Kind(x) -> Blue(x))\n\nTEXT: Nice, rough things are kind.\nFOL: all x. (Nice(x) & Rough(x) -> Kind(x))\n\nTEXT: If the rabbit is cold then the rabbit is nice.\nFOL: Cold(rabbit) -> Nice(rabbit)\n\nTEXT: Kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\n\nTEXT: Cold things are kind.\nFOL: all x. (Cold(x) -> Kind(x))\n\nTEXT: All nice things are rough.\nFOL: all x. (Nice(x) -> Rough(x))\n\nTEXT: The rabbit is nice.\nFOL: Nice(rabbit)\n\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The rabbit is cold.\nFOL: Rabbit(rabbit) & Cold(rabbit)\n\nTEXT: If something is rough and kind then it is blue.\nFOL: all x. (Rough(x) & Kind(x) -> Blue(x))\n\nTEXT: Nice, rough things are kind.\nFOL: all x. (Nice(x) & Rough(x) -> Kind(x))\n\nTEXT: If the rabbit is cold then the rabbit is nice.\nFOL: Cold(rabbit) -> Nice(rabbit)\n\nTEXT: Kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\n\nTEXT: Cold things are kind.\nFOL: all x. (Cold(x) -> Kind(x))\n\nTEXT: All nice things are rough.\nFOL: all x. (Nice(x) -> Rough(x))\n\nTEXT: The rabbit is nice.\nFOL: Nice(rabbit)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The rabbit is cold.\nFOL: Rabbit(rabbit) -> Cold(rabbit)\n\nTEXT: If something is rough and kind then it is blue.\nFOL: all x. (Rough(x) & Kind(x) -> Blue(x))\n\nTEXT: Nice, rough things are kind.\nFOL: all x. (Nice(x) & Rough(x) -> Kind(x))\n\nTEXT: If the rabbit is cold then the rabbit is nice.\nFOL: Cold(rabbit) -> Nice(rabbit)\n\nTEXT: Kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\n\nTEXT: Cold things are kind.\nFOL: all x. (Cold(x) -> Kind(x))\n\nTEXT: All nice things are rough.\nFOL: all x. (Nice(x) -> Rough(x))\n\nTEXT: The rabbit is nice.\nFOL: Nice(rabbit)\n\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The rabbit is cold.\nFOL: Rabbit(rabbit) -> Cold(rabbit)\n\nTEXT: If something is rough and kind then it is blue.\nFOL: all x. (Rough(x) & Kind(x) -> Blue(x))\n\nTEXT: Nice, rough things are kind.\nFOL: all x. (Nice(x) & Rough(x) -> Kind(x))\n\nTEXT: If the rabbit is cold then the rabbit is nice.\nFOL: Rabbit(rabbit) -> Cold(rabbit) -> Kind(rabbit)\n\nTEXT: Kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\n\nTEXT: Cold things are kind.\nFOL: all x. (Cold(x) -> Kind(x))\n\nTEXT: All nice things are rough.\nFOL: all x. (Nice(x) -> Rough(x))\n\nTEXT: The rabbit is nice.\nFOL: Rabbit(rabbit) -> Nice(rabbit)\n</EVALUATE>"
  ]
 },
 {
  "index": 161,
  "responses": [
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(Alan)\n\nTEXT: Bob is cold but nice with red hair and dresses green.\nFOL: Cold(Bob) & Nice(Bob) & RedHair(Bob) & DressesGreen(Bob)\n\nTEXT: Young Dave here is always rough but nice and yes he is big.\nFOL: Rough(Dave) & Nice(Dave) & Big(Dave)\n\nTEXT: Eric seems to be round.\nFOL: Round(Eric)\n\nTEXT: If you run across a young person with rough skin and a round figure, you can count on them being kind.\nFOL: exists x. (Young(x) & Rough(x) & Round(x) -> Kind(x))\n\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: Nice(x) & Kind(x) -> -Blue(x)\n\nTEXT: Even though young people are rough, they are still very red.\nFOL: Young(x) -> Rough(x) & Red(x)\n\nTEXT: Rough, cold people are blue.\nFOL: Rough(x) & Cold(x) -> Blue(x)\n\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: Big(x) & Blue(x) & Red(x) -> Rough(x)\n\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: Young(x) & Big(x) & Rough(x) -> Round(x)\n\nTEXT: People who are round and green while being cold are also red.\nFOL: Round(x) & Green(x) & Cold(x) -> Red(x)\n\nTEXT: Alan is not big.\nFOL: -Big(Alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(Alan)\n\nTEXT: Bob is cold but nice with red hair and dresses green.\nFOL: Cold(Bob) & Nice(Bob) & RedHair(Bob) & DressesGreen(Bob)\n\nTEXT: Young Dave here is always rough but nice and yes he is big.\nFOL: Rough(Dave) & Nice(Dave) & Big(Dave)\n\nTEXT: Eric seems to be round.\nFOL: Round(Eric)\n\nTEXT: If you run across a young person with rough skin and a round figure, you can count on them being kind.\nFOL: exists x. (Young(x) & Rough(x) & Round(x) -> Kind(x))\n\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x. (Nice(x) & Kind(x) -> -Blue(x))\n\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) -> Rough(x) & Red(x))\n\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\n\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: all x. (Big(x) & Blue(x) & Red(x) -> Rough(x))\n\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: exists x. (Young(x) & Big(x) & Rough(x) & Round(x))\n\nTEXT: People who are round and green while being cold are also red.\nFOL: all x. (Round(x) & Cold(x) & Green(x) -> Red(x))\n\nTEXT: Alan is not big.\nFOL: -Big(Alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(Alan)\n\nTEXT: Bob is cold but nice with red hair and dresses green.\nFOL: Cold(Bob) & Nice(Bob) & RedHair(Bob) & DressesGreen(Bob)\n\nTEXT: Young Dave here is always rough but nice and yes he is big.\nFOL: Rough(Dave) & Nice(Dave) & Big(Dave)\n\nTEXT: Eric seems to be round.\nFOL: Round(Eric)\n\nTEXT: If you run across a young person with rough skin and a round figure, you can count on them being kind.\nFOL: exists x. (Young(x) & Rough(x) & Round(x) -> Kind(x))\n\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x. (Nice(x) & Kind(x) -> -Blue(x))\n\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) -> Rough(x) & Red(x))\n\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\n\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: all x. (Big(x) & Blue(x) & Red(x) -> Rough(x))\n\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: exists x. (Young(x) & Big(x) & Rough(x) & Round(x))\n\nTEXT: People who are round and green while being cold are also red.\nFOL: all x. (Round(x) & Green(x) & Cold(x) -> Red(x))\n\nTEXT: Alan is not big.\nFOL: -Big(Alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(Alan)\n\nTEXT: Bob is cold but nice with red hair and dresses green.\nFOL: Cold(Bob) & Nice(Bob) & RedHair(Bob) & DressesGreen(Bob)\n\nTEXT: Young Dave here is always rough but nice and yes he is big.\nFOL: Rough(Dave) & Nice(Dave) & Big(Dave)\n\nTEXT: Eric seems to be round.\nFOL: Round(Eric)\n\nTEXT: If you run across a young person with rough skin and a round figure, you can count on them being kind.\nFOL: exists x. (Young(x) & Rough(x) & Round(x) -> Kind(x))\n\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x. (Nice(x) & Kind(x) -> -Blue(x))\n\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) -> Rough(x) & Red(x))\n\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\n\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: all x. (Big(x) & Blue(x) & Red(x) -> Rough(x))\n\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: ((Young(x) & Big(x) & Rough(x)) -> Round(x))\n\nTEXT: People who are round and green while being cold are also red.\nFOL: all x. (Round(x) & Cold(x) & Green(x) -> Red(x))\n\nTEXT: Alan is not big.\nFOL: -Big(Alan)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(Alan)\n\nTEXT: Bob is cold but nice with red hair and dresses green.\nFOL: Cold(Bob) & Nice(Bob) & RedHair(Bob) & DressesGreen(Bob)\n\nTEXT: Young Dave here is always rough but nice and yes he is big.\nFOL: Rough(Dave) & Nice(Dave) & Big(Dave)\n\nTEXT: Eric seems to be round.\nFOL: Round(Eric)\n\nTEXT: If you run across a young person with rough skin and a round figure, you can count on them being kind.\nFOL: exists x. (Young(x) & Rough(x) & Round(x) -> Kind(x))\n\nTEXT: When you meet someone who is nice and kind, they wont feel blue.\nFOL: all x. (Nice(x) & Kind(x) -> -Blue(x))\n\nTEXT: Even though young people are rough, they are still very red.\nFOL: all x. (Young(x) -> Rough(x) & Red(x))\n\nTEXT: Rough, cold people are blue.\nFOL: all x. (Rough(x) & Cold(x) -> Blue(x))\n\nTEXT: Big people who are blue and red are afflicted with rough skin.\nFOL: all x. (Big(x) & Blue(x) & Red(x) -> Rough(x))\n\nTEXT: A young person who is big and rough and big is also usually round.\nFOL: exists x. (Young(x) & Big(x) & Rough(x) -> Round(x))\n\nTEXT: People who are round and green while being cold are also red.\nFOL: all x. (Round(x) & Cold(x) & Green(x) -> Red(x))\n\nTEXT: Alan is not big.\nFOL: -Big(Alan)\n</EVALUATE>"
  ]
 },
 {
  "index": 162,
  "responses": [
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: Cow(cow) & Cold(cow)\nTEXT: The cow is kind.\nFOL: Cow(cow) & Kind(cow)\nTEXT: The cow is red.\nFOL: Cow(cow) & Red(cow)\nTEXT: The cow is rough.\nFOL: Cow(cow) & Rough(cow)\nTEXT: The cow is round.\nFOL: Cow(cow) & Round(cow)\nTEXT: All cold people are red.\nFOL: all x. (Cold(x) -> Red(x))\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) -> Kind(x))\nTEXT: If someone is kind and round then they are cold.\nFOL: all x. ((Kind(x) & Round(x)) -> Cold(x))\nTEXT: All kind people are cold.\nFOL: all x. (Kind(x) -> Cold(x))\nTEXT: If someone is rough then they are red.\nFOL: all x. (Rough(x) -> Red(x))\nTEXT: All cold people are round.\nFOL: all x. (Cold(x) -> Round(x))\nTEXT: The cow is round.\nFOL: Cow(cow) & Round(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: Cold(cow)\nTEXT: The cow is kind.\nFOL: Kind(cow)\nTEXT: The cow is red.\nFOL: Red(cow)\nTEXT: The cow is rough.\nFOL: Rough(cow)\nTEXT: The cow is round.\nFOL: Round(cow)\nTEXT: All cold people are red.\nFOL: all x. (Cold(x) -> Red(x))\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) -> Kind(x))\nTEXT: If someone is kind and round then they are cold.\nFOL: (Kind(x) & Round(x) -> Cold(x))\nTEXT: All kind people are cold.\nFOL: all x. (Kind(x) -> Cold(x))\nTEXT: If someone is rough then they are red.\nFOL: (Rough(x) -> Red(x))\nTEXT: All cold people are round.\nFOL: all x. (Cold(x) -> Round(x))\nTEXT: The cow is round.\nFOL: Round(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: Cow(cow) & Cold(cow)\nTEXT: The cow is kind.\nFOL: Cow(cow) & Kind(cow)\nTEXT: The cow is red.\nFOL: Cow(cow) & Red(cow)\nTEXT: The cow is rough.\nFOL: Cow(cow) & Rough(cow)\nTEXT: The cow is round.\nFOL: Cow(cow) & Round(cow)\nTEXT: All cold people are red.\nFOL: all x. (Cold(x) -> Red(x))\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) -> Kind(x))\nTEXT: If someone is kind and round then they are cold.\nFOL: (Kind(x) & Round(x) -> Cold(x))\nTEXT: All kind people are cold.\nFOL: all x. (Kind(x) -> Cold(x))\nTEXT: If someone is rough then they are red.\nFOL: (Rough(x) -> Red(x))\nTEXT: All cold people are round.\nFOL: all x. (Cold(x) -> Round(x))\nTEXT: The cow is round.\nFOL: Cow(cow) & Round(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: Cow(cow) & Cold(cow)\nTEXT: The cow is kind.\nFOL: Cow(cow) & Kind(cow)\nTEXT: The cow is red.\nFOL: Cow(cow) & Red(cow)\nTEXT: The cow is rough.\nFOL: Cow(cow) & Rough(cow)\nTEXT: The cow is round.\nFOL: Cow(cow) & Round(cow)\nTEXT: All cold people are red.\nFOL: all x. (Cold(x) -> Red(x))\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) -> Kind(x))\nTEXT: If someone is kind and round then they are cold.\nFOL: (Kind(x) & Round(x)) -> Cold(x)\nTEXT: All kind people are cold.\nFOL: all x. (Kind(x) -> Cold(x))\nTEXT: If someone is rough then they are red.\nFOL: Rough(x) -> Red(x)\nTEXT: All cold people are round.\nFOL: all x. (Cold(x) -> Round(x))\nTEXT: The cow is round.\nFOL: Cow(cow) & Round(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: Cow(cow) & Cold(cow)\n\nTEXT: The cow is kind.\nFOL: Cow(cow) & Kind(cow)\n\nTEXT: The cow is red.\nFOL: Cow(cow) & Red(cow)\n\nTEXT: The cow is rough.\nFOL: Cow(cow) & Rough(cow)\n\nTEXT: The cow is round.\nFOL: Cow(cow) & Round(cow)\n\nTEXT: All cold people are red.\nFOL: all x. (Cold(x) -> Red(x))\n\nTEXT: Rough people are kind.\nFOL: all x. (Rough(x) -> Kind(x))\n\nTEXT: If someone is kind and round then they are cold.\nFOL: all x. ((Kind(x) & Round(x)) -> Cold(x))\n\nTEXT: All kind people are cold.\nFOL: all x. (Kind(x) -> Cold(x))\n\nTEXT: If someone is rough then they are red.\nFOL: all x. (Rough(x) -> Red(x))\n\nTEXT: All cold people are round.\nFOL: all x. (Cold(x) -> Round(x))\n\nTEXT: The cow is round.\nFOL: Cow(cow) & Round(cow)\n</EVALUATE>"
  ]
 },
 {
  "index": 163,
  "responses": [
   "<EVALUATE>\nTEXT: The mouse chases the squirrel.\nFOL: Mouse(m) & Squirrel(s) & Chases(m, s)\nTEXT: The mouse is big.\nFOL: Mouse(m) & Big(m)\nTEXT: The mouse is blue.\nFOL: Mouse(m) & Blue(m)\nTEXT: The mouse is young.\nFOL: Mouse(m) & Young(m)\nTEXT: The mouse sees the squirrel.\nFOL: Mouse(m) & Squirrel(s) & Sees(m, s)\nTEXT: The squirrel is big.\nFOL: Squirrel(s) & Big(s)\nTEXT: The squirrel is blue.\nFOL: Squirrel(s) & Blue(s)\nTEXT: The squirrel is round.\nFOL: Squirrel(s) & Round(s)\nTEXT: The squirrel sees the mouse.\nFOL: Squirrel(s) & Mouse(m) & Sees(s, m)\nTEXT: The squirrel visits the mouse.\nFOL: Squirrel(s) & Mouse(m) & Visits(s, m)\nTEXT: If something visits the mouse then the mouse chases the squirrel.\nFOL: Visits(x, m) -> Chases(x, s)\nTEXT: If the squirrel sees the mouse and the squirrel is young then the squirrel is round.\nFOL: Sees(s, m) & Young(s) -> Round(s)\nTEXT: If something is nice then it visits the mouse.\nFOL: Nice(x) -> Visits(x, m)\nTEXT: If something is big and it chases the squirrel then it visits the squirrel.\nFOL: Big(x) & Chases(x, s) -> Visits(x, s)\nTEXT: If the squirrel visits the mouse and the mouse visits the squirrel then the mouse is nice.\nFOL: Visits(s, m) & Visits(m, s) -> Nice(m)\nTEXT: If something chases the squirrel and the squirrel chases the mouse then it visits the squirrel.\nFOL: Chases(x, s) & Chases(s, m) -> Visits(x, s)\nTEXT: The mouse visits the squirrel.\nFOL: Mouse(m) & Squirrel(s) & Visits(m, s)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse chases the squirrel.\nFOL: Mouse(m) & Squirrel(s) & Chases(m, s)\nTEXT: The mouse is big.\nFOL: Mouse(m) & Big(m)\nTEXT: The mouse is blue.\nFOL: Mouse(m) & Blue(m)\nTEXT: The mouse is young.\nFOL: Mouse(m) & Young(m)\nTEXT: The mouse sees the squirrel.\nFOL: Mouse(m) & Squirrel(s) & Sees(m, s)\nTEXT: The squirrel is big.\nFOL: Squirrel(s) & Big(s)\nTEXT: The squirrel is blue.\nFOL: Squirrel(s) & Blue(s)\nTEXT: The squirrel is round.\nFOL: Squirrel(s) & Round(s)\nTEXT: The squirrel sees the mouse.\nFOL: Squirrel(s) & Mouse(m) & Sees(s, m)\nTEXT: The squirrel visits the mouse.\nFOL: Squirrel(s) & Mouse(m) & Visits(s, m)\nTEXT: If something visits the mouse then the mouse chases the squirrel.\nFOL: all x. (Visits(x, m) -> Chases(x, s))\nTEXT: If the squirrel sees the mouse and the squirrel is young then the squirrel is round.\nFOL: Squirrel(s) & Mouse(m) & Sees(s, m) & Young(s) -> Round(s)\nTEXT: If something is nice then it visits the mouse.\nFOL: all x. (Nice(x) -> Visits(x, m))\nTEXT: If something is big and it chases the squirrel then it visits the squirrel.\nFOL: all x. (Big(x) & Chases(x, s) -> Visits(x, s))\nTEXT: If the squirrel visits the mouse and the mouse visits the squirrel then the mouse is nice.\nFOL: Squirrel(s) & Mouse(m) & Visits(s, m) & Mouse(m) & Visits(m, s) -> Nice(m)\nTEXT: If something chases the squirrel and the squirrel chases the mouse then it visits the squirrel.\nFOL: all x. (Chases(x, s) & Squirrel(s) & Chases(s, m) -> Visits(x, s))\nTEXT: The mouse visits the squirrel.\nFOL: Mouse(m) & Squirrel(s) & Visits(m, s)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse chases the squirrel.\nFOL: Mouse(m) & Squirrel(s) & Chases(m, s)\nTEXT: The mouse is big.\nFOL: Mouse(m) & Big(m)\nTEXT: The mouse is blue.\nFOL: Mouse(m) & Blue(m)\nTEXT: The mouse is young.\nFOL: Mouse(m) & Young(m)\nTEXT: The mouse sees the squirrel.\nFOL: Mouse(m) & Squirrel(s) & Sees(m, s)\nTEXT: The squirrel is big.\nFOL: Squirrel(s) & Big(s)\nTEXT: The squirrel is blue.\nFOL: Squirrel(s) & Blue(s)\nTEXT: The squirrel is round.\nFOL: Squirrel(s) & Round(s)\nTEXT: The squirrel sees the mouse.\nFOL: Squirrel(s) & Mouse(m) & Sees(s, m)\nTEXT: The squirrel visits the mouse.\nFOL: Squirrel(s) & Mouse(m) & Visits(s, m)\nTEXT: If something visits the mouse then the mouse chases the squirrel.\nFOL: exists x. (Visits(x, m) -> Chases(x, s))\nTEXT: If the squirrel sees the mouse and the squirrel is young then the squirrel is round.\nFOL: Squirrel(s) & Mouse(m) & Sees(s, m) & Young(s) -> Round(s)\nTEXT: If something is nice then it visits the mouse.\nFOL: Nice(x) -> Visits(x, m)\nTEXT: If something is big and it chases the squirrel then it visits the squirrel.\nFOL: Big(x) & Chases(x, s) -> Visits(x, s)\nTEXT: If the squirrel visits the mouse and the mouse visits the squirrel then the mouse is nice.\nFOL: Squirrel(s) & Mouse(m) & Visits(s, m) & Mouse(m) & Visits(m, s) -> Nice(m)\nTEXT: If something chases the squirrel and the squirrel chases the mouse then it visits the squirrel.\nFOL: Chases(x, s) & Squirrel(s) & Chases(s, m) -> Visits(x, s)\nTEXT: The mouse visits the squirrel.\nFOL: Mouse(m) & Squirrel(s) & Visits(m, s)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse chases the squirrel.\nFOL: Mouse(m) & Squirrel(s) & Chases(m, s)\nTEXT: The mouse is big.\nFOL: Mouse(m) & Big(m)\nTEXT: The mouse is blue.\nFOL: Mouse(m) & Blue(m)\nTEXT: The mouse is young.\nFOL: Mouse(m) & Young(m)\nTEXT: The mouse sees the squirrel.\nFOL: Mouse(m) & Squirrel(s) & Sees(m, s)\nTEXT: The squirrel is big.\nFOL: Squirrel(s) & Big(s)\nTEXT: The squirrel is blue.\nFOL: Squirrel(s) & Blue(s)\nTEXT: The squirrel is round.\nFOL: Squirrel(s) & Round(s)\nTEXT: The squirrel sees the mouse.\nFOL: Squirrel(s) & Mouse(m) & Sees(s, m)\nTEXT: The squirrel visits the mouse.\nFOL: Squirrel(s) & Mouse(m) & Visits(s, m)\nTEXT: If something visits the mouse then the mouse chases the squirrel.\nFOL: Visits(x, m) -> Chases(x, s)\nTEXT: If the squirrel sees the mouse and the squirrel is young then the squirrel is round.\nFOL: Sees(s, m) & Young(s) -> Round(s)\nTEXT: If something is nice then it visits the mouse.\nFOL: Nice(x) -> Visits(x, m)\nTEXT: If something is big and it chases the squirrel then it visits the squirrel.\nFOL: Big(x) & Chases(x, s) -> Visits(x, s)\nTEXT: If the squirrel visits the mouse and the mouse visits the squirrel then the mouse is nice.\nFOL: Visits(s, m) & Visits(m, s) -> Nice(m)\nTEXT: If something chases the squirrel and the squirrel chases the mouse then it visits the squirrel.\nFOL: Chases(x, s) & Chases(s, m) -> Visits(x, s)\nTEXT: The mouse visits the squirrel.\nFOL: Mouse(m) & Visits(m, s)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The mouse chases the squirrel.\nFOL: Mouse(m) & Squirrel(s) & Chases(m, s)\nTEXT: The mouse is big.\nFOL: Mouse(m) & Big(m)\nTEXT: The mouse is blue.\nFOL: Mouse(m) & Blue(m)\nTEXT: The mouse is young.\nFOL: Mouse(m) & Young(m)\nTEXT: The mouse sees the squirrel.\nFOL: Mouse(m) & Squirrel(s) & Sees(m, s)\nTEXT: The squirrel is big.\nFOL: Squirrel(s) & Big(s)\nTEXT: The squirrel is blue.\nFOL: Squirrel(s) & Blue(s)\nTEXT: The squirrel is round.\nFOL: Squirrel(s) & Round(s)\nTEXT: The squirrel sees the mouse.\nFOL: Squirrel(s) & Mouse(m) & Sees(s, m)\nTEXT: The squirrel visits the mouse.\nFOL: Squirrel(s) & Mouse(m) & Visits(s, m)\nTEXT: If something visits the mouse then the mouse chases the squirrel.\nFOL: exists x. (Visits(x, m) -> Chases(x, s))\nTEXT: If the squirrel sees the mouse and the squirrel is young then the squirrel is round.\nFOL: Squirrel(s) & Mouse(m) & Sees(s, m) & Young(s) -> Round(s)\nTEXT: If something is nice then it visits the mouse.\nFOL: Nice(x) -> Visits(x, m)\nTEXT: If something is big and it chases the squirrel then it visits the squirrel.\nFOL: Big(x) & Chases(x, s) -> Visits(x, s)\nTEXT: If the squirrel visits the mouse and the mouse visits the squirrel then the mouse is nice.\nFOL: Squirrel(s) & Mouse(m) & Visits(s, m) & Mouse(m) & Visits(m, s) -> Nice(m)\nTEXT: If something chases the squirrel and the squirrel chases the mouse then it visits the squirrel.\nFOL: exists x. (Chases(x, s) & Squirrel(s) & Chases(s, m) -> Visits(x, s))\nTEXT: The mouse visits the squirrel.\nFOL: Mouse(m) & Squirrel(s) & Visits(m, s)\n</EVALUATE>"
  ]
 },
 {
  "index": 164,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Bob is smart.\nTEXT: Erin is blue.\nFOL: Erin is blue.\nTEXT: Erin is green.\nFOL: Erin is green.\nTEXT: Erin is red.\nFOL: Erin is red.\nTEXT: Erin is rough.\nFOL: Erin is rough.\nTEXT: Harry is red.\nFOL: Harry is red.\nTEXT: Harry is smart.\nFOL: Harry is smart.\nTEXT: Furry things are smart.\nFOL: all x. (Furry(x) -> Smart(x))\nTEXT: If something is smart and green then it is furry.\nFOL: all x. ((Smart(x) & Green(x)) -> Furry(x))\nTEXT: Harry is not furry.\nFOL: -Furry(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Bob is smart.\nTEXT: Erin is blue.\nFOL: Erin is blue.\nTEXT: Erin is green.\nFOL: Erin is green.\nTEXT: Erin is red.\nFOL: Erin is red.\nTEXT: Erin is rough.\nFOL: Erin is rough.\nTEXT: Harry is red.\nFOL: Harry is red.\nTEXT: Harry is smart.\nFOL: Harry is smart.\nTEXT: Furry things are smart.\nFOL: all x. (Furry(x) -> Smart(x))\nTEXT: If something is smart and green then it is furry.\nFOL: all x. (Smart(x) & Green(x) -> Furry(x))\nTEXT: Harry is not furry.\nFOL: -Furry(harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: BobSmart\n\nTEXT: Erin is blue.\nFOL: ErinBlue\n\nTEXT: Erin is green.\nFOL: ErinGreen\n\nTEXT: Erin is red.\nFOL: ErinRed\n\nTEXT: Erin is rough.\nFOL: ErinRough\n\nTEXT: Harry is red.\nFOL: HarryRed\n\nTEXT: Harry is smart.\nFOL: HarrySmart\n\nTEXT: Furry things are smart.\nFOL: all x. (Furry(x) -> Smart(x))\n\nTEXT: If something is smart and green then it is furry.\nFOL: all x. (Smart(x) & Green(x) -> Furry(x))\n\nTEXT: Harry is not furry.\nFOL: -Furry(Harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Bob is smart.\nTEXT: Erin is blue.\nFOL: Erin is blue.\nTEXT: Erin is green.\nFOL: Erin is green.\nTEXT: Erin is red.\nFOL: Erin is red.\nTEXT: Erin is rough.\nFOL: Erin is rough.\nTEXT: Harry is red.\nFOL: Harry is red.\nTEXT: Harry is smart.\nFOL: Harry is smart.\nTEXT: Furry things are smart.\nFOL: all x. (Furry(x) -> Smart(x))\nTEXT: If something is smart and green then it is furry.\nFOL: all x. ((Smart(x) & Green(x)) -> Furry(x))\nTEXT: Harry is not furry.\nFOL: -Furry(Harry)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is smart.\nFOL: Bob(smart)\nTEXT: Erin is blue.\nFOL: Erin(blue)\nTEXT: Erin is green.\nFOL: Erin(green)\nTEXT: Erin is red.\nFOL: Erin(red)\nTEXT: Erin is rough.\nFOL: Erin(rough)\nTEXT: Harry is red.\nFOL: Harry(red)\nTEXT: Harry is smart.\nFOL: Harry(smart)\nTEXT: Furry things are smart.\nFOL: all x. (Furry(x) -> smart(x))\nTEXT: If something is smart and green then it is furry.\nFOL: all x. (smart(x) & green(x) -> furry(x))\nTEXT: Harry is not furry.\nFOL: -Furry(Harry)\n</EVALUATE>"
  ]
 },
 {
  "index": 165,
  "responses": [
   "<EVALUATE>\nTEXT: Alan is big, rough and red, but that's because he's often blue.\nFOL: Big(Alan) & Rough(Alan) & Red(Alan) & -Blue(Alan)\nTEXT: Really, his is nice and kind.\nFOL: Nice(Alan) & Kind(Alan)\nTEXT: Dave is cold to his ex-wife.\nFOL: Cold(Dave) & Ex(Wife(Dave))\nTEXT: She knows he is round and red.\nFOL: Knows(She, Dave) & Round(Dave) & Red(Dave)\nTEXT: He is kind to everyone else.\nFOL: Kind(He, EveryoneElse)\nTEXT: Fred is green and cold too.\nFOL: Green(Fred) & Cold(Fred)\nTEXT: If a person is described as being nice, cold and young it usually follow that they are red.\nFOL: all x. (Nice(x) & Cold(x) & Young(x) -> Red(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: all x. ((Blue(x) & Red(x) & Nice(x)) -> Young(x))\nTEXT: It's pretty typical of red, rough, and cold people to be round.\nFOL: all x. (Red(x) & Rough(x) & Cold(x) -> Round(x))\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: (Young(BluePerson) & Big(BluePerson)) -> Cold(BluePerson)\nTEXT: A kind person will certainly be young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: Eric is young.\nFOL: Young(Eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is big, rough and red, but that's because he's often blue.\nFOL: Big(Alan) & Rough(Alan) & Red(Alan) & -Blue(Alan)\nTEXT: Really, his is nice and kind.\nFOL: Nice(Alan) & Kind(Alan)\nTEXT: Dave is cold to his ex-wife.\nFOL: Cold(Dave) & Ex(Wife(Dave))\nTEXT: She knows he is round and red.\nFOL: Knows(She, Dave) & Round(Dave) & Red(Dave)\nTEXT: He is kind to everyone else.\nFOL: Kind(He, EveryoneElse)\nTEXT: Fred is green and cold too.\nFOL: Green(Fred) & Cold(Fred)\nTEXT: If a person is described as being nice, cold and young it usually follow that they are red.\nFOL: all x. (Nice(x) & Cold(x) & Young(x) -> Red(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: all x. ((Blue(x) & Red(x) & Nice(x)) -> Young(x))\nTEXT: It's pretty typical of red, rough, and cold people to be round.\nFOL: all x. (Red(x) & Rough(x) & Cold(x) -> Round(x))\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: Young(BluePerson) & Big(BluePerson) -> Cold(BluePerson)\nTEXT: A kind person will certainly be young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: Eric is young.\nFOL: Young(Eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is big, rough and red, but that's because he's often blue.\nFOL: Big(Alan) & Rough(Alan) & Red(Alan) & -Blue(Alan)\nTEXT: Really, his is nice and kind.\nFOL: Nice(Alan) & Kind(Alan)\nTEXT: Dave is cold to his ex-wife.\nFOL: Cold(Dave) & Ex(Wife(Dave))\nTEXT: She knows he is round and red.\nFOL: Knows(She, Dave) & Round(Dave) & Red(Dave)\nTEXT: He is kind to everyone else.\nFOL: Kind(He, EveryoneElse)\nTEXT: Fred is green and cold too.\nFOL: Green(Fred) & Cold(Fred)\nTEXT: If a person is described as being nice, cold and young it usually follow that they are red.\nFOL: all x. (Nice(x) & Cold(x) & Young(x) -> Red(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: all x. ((Blue(x) & Red(x) & Nice(x)) -> Young(x))\nTEXT: It's pretty typical of red, rough, and cold people to be round.\nFOL: all x. (Red(x) & Rough(x) & Cold(x) -> Round(x))\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: Young(BluePerson) & Big(BluePerson) -> Cold(BluePerson)\nTEXT: A kind person will certainly be young.\nFOL: Kind(Person) -> Young(Person)\nTEXT: Eric is young.\nFOL: Young(Eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is big, rough and red, but that's because he's often blue.\nFOL: Big(Alan) & Rough(Alan) & Red(Alan) & -Blue(Alan)\nTEXT: Really, his is nice and kind.\nFOL: Nice(Alan) & Kind(Alan)\nTEXT: Dave is cold to his ex-wife.\nFOL: Cold(Dave) & Ex(Wife(Dave))\nTEXT: She knows he is round and red.\nFOL: Knows(She, Dave) & Round(Dave) & Red(Dave)\nTEXT: He is kind to everyone else.\nFOL: Kind(He, EveryoneElse)\nTEXT: Fred is green and cold too.\nFOL: Green(Fred) & Cold(Fred)\nTEXT: If a person is described as being nice, cold and young it usually follow that they are red.\nFOL: all x. (Nice(x) & Cold(x) & Young(x) -> Red(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: all x. ((Blue(x) & Red(x) & Nice(x)) -> Young(x))\nTEXT: It's pretty typical of red, rough, and cold people to be round.\nFOL: all x. (Red(x) & Rough(x) & Cold(x) -> Round(x))\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: Young(BluePerson) & Big(BluePerson) & Cold(BluePerson)\nTEXT: A kind person will certainly be young.\nFOL: all x. (Kind(x) -> Young(x))\nTEXT: Eric is young.\nFOL: Young(Eric)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is big, rough and red, but that's because he's often blue.\nFOL: Big(Alan) & Rough(Alan) & Red(Alan) & -Blue(Alan)\nTEXT: Really, his is nice and kind.\nFOL: Nice(Alan) & Kind(Alan)\nTEXT: Dave is cold to his ex-wife.\nFOL: Cold(Dave) & Ex(Wife(Dave))\nTEXT: She knows he is round and red.\nFOL: Knows(She, Dave) & Round(Dave) & Red(Dave)\nTEXT: He is kind to everyone else.\nFOL: Kind(He, EveryoneElse)\nTEXT: Fred is green and cold too.\nFOL: Green(Fred) & Cold(Fred)\nTEXT: If a person is described as being nice, cold and young it usually follow that they are red.\nFOL: all x. (Nice(x) & Cold(x) & Young(x) -> Red(x))\nTEXT: A person who is blue, red and nice is usually considered to be a young person.\nFOL: all x. ((Blue(x) & Red(x) & Nice(x)) -> Young(x))\nTEXT: It's pretty typical of red, rough, and cold people to be round.\nFOL: all x. (Red(x) & Rough(x) & Cold(x) -> Round(x))\nTEXT: A young aged and big blue person will definitely be cold.\nFOL: Young(BluePerson) & Big(BluePerson) -> Cold(BluePerson)\nTEXT: A kind person will certainly be young.\nFOL: Kind(x) -> Young(x)\nTEXT: Eric is young.\nFOL: Young(Eric)\n</EVALUATE>"
  ]
 },
 {
  "index": 166,
  "responses": [
   "<EVALUATE>\nTEXT: The bear eats the squirrel.\nFOL: Bear(bear) & Squirrel(squirrel) & Eat(bear, squirrel)\nTEXT: The bear is cold.\nFOL: Bear(bear) & Cold(bear)\nTEXT: The bear is nice.\nFOL: Bear(bear) & Nice(bear)\nTEXT: The bear needs the tiger.\nFOL: Bear(bear) & Needs(bear, tiger)\nTEXT: The squirrel chases the bear.\nFOL: Squirrel(squirrel) & Chases(squirrel, bear)\nTEXT: The squirrel is cold.\nFOL: Squirrel(squirrel) & Cold(squirrel)\nTEXT: The squirrel is young.\nFOL: Squirrel(squirrel) & Young(squirrel)\nTEXT: The squirrel needs the bear.\nFOL: Squirrel(squirrel) & Needs(squirrel, bear)\nTEXT: The tiger does not eat the bear.\nFOL: Tiger(tiger) & -Eat(tiger, bear)\nTEXT: The tiger is young.\nFOL: Tiger(tiger) & Young(tiger)\nTEXT: If the bear chases the tiger and the tiger does not eat the squirrel then the tiger chases the bear.\nFOL: (Chases(bear, tiger) & -Eat(tiger, squirrel)) -> Chases(tiger, bear)\nTEXT: If something eats the tiger then it chases the squirrel.\nFOL: all x. (Eat(x, tiger) -> Chases(x, squirrel))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (Needs(x, tiger) -> Eat(x, tiger))\nTEXT: All blue things are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: If something eats the squirrel then it is blue.\nFOL: all x. (Eat(x, squirrel) -> Blue(x))\nTEXT: If something eats the squirrel and the squirrel chases the bear then the squirrel needs the tiger.\nFOL: (Eat(x, squirrel) & Chases(squirrel, bear)) -> Needs(squirrel, tiger)\nTEXT: If the tiger chases the squirrel and the squirrel does not eat the tiger then the squirrel is not green.\nFOL: (Chases(tiger, squirrel) & -Eat(tiger, squirrel)) -> -Green(squirrel)\nTEXT: If something is nice and it does not chase the bear then it needs the squirrel.\nFOL: all x. (Nice(x) & -Chases(x, bear)) -> Needs(x, squirrel)\nTEXT: The tiger is cold.\nFOL: Tiger(tiger) & Cold(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear eats the squirrel.\nFOL: Bear(bear) & Squirrel(squirrel) & Eat(bear, squirrel)\nTEXT: The bear is cold.\nFOL: Bear(bear) & Cold(bear)\nTEXT: The bear is nice.\nFOL: Bear(bear) & Nice(bear)\nTEXT: The bear needs the tiger.\nFOL: Bear(bear) & Needs(bear, tiger)\nTEXT: The squirrel chases the bear.\nFOL: Squirrel(squirrel) & Chases(squirrel, bear)\nTEXT: The squirrel is cold.\nFOL: Squirrel(squirrel) & Cold(squirrel)\nTEXT: The squirrel is young.\nFOL: Squirrel(squirrel) & Young(squirrel)\nTEXT: The squirrel needs the bear.\nFOL: Squirrel(squirrel) & Needs(squirrel, bear)\nTEXT: The tiger does not eat the bear.\nFOL: Tiger(tiger) & -Eat(tiger, bear)\nTEXT: The tiger is young.\nFOL: Tiger(tiger) & Young(tiger)\nTEXT: If the bear chases the tiger and the tiger does not eat the squirrel then the tiger chases the bear.\nFOL: (Chases(bear, tiger) & -Eat(tiger, squirrel)) -> Chases(tiger, bear)\nTEXT: If something eats the tiger then it chases the squirrel.\nFOL: (Eat(x, tiger) -> Chases(x, squirrel))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: (Needs(x, tiger) -> Eat(x, tiger))\nTEXT: All blue things are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: If something eats the squirrel then it is blue.\nFOL: (Eat(x, squirrel) -> Blue(x))\nTEXT: If something eats the squirrel and the squirrel chases the bear then the squirrel needs the tiger.\nFOL: (Eat(x, squirrel) & Chases(squirrel, bear)) -> Needs(squirrel, tiger)\nTEXT: If the tiger chases the squirrel and the squirrel does not eat the tiger then the squirrel is not green.\nFOL: (Chases(tiger, squirrel) & -Eat(tiger, squirrel)) -> -Green(squirrel)\nTEXT: If something is nice and it does not chase the bear then it needs the squirrel.\nFOL: (Nice(x) & -Chases(x, bear)) -> Needs(x, squirrel)\nTEXT: The tiger is cold.\nFOL: Tiger(tiger) & Cold(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear eats the squirrel.\nFOL: Bear(bear) & Squirrel(squirrel) & Eat(bear, squirrel)\nTEXT: The bear is cold.\nFOL: Bear(bear) & Cold(bear)\nTEXT: The bear is nice.\nFOL: Bear(bear) & Nice(bear)\nTEXT: The bear needs the tiger.\nFOL: Bear(bear) & Needs(bear, tiger)\nTEXT: The squirrel chases the bear.\nFOL: Squirrel(squirrel) & Chases(squirrel, bear)\nTEXT: The squirrel is cold.\nFOL: Squirrel(squirrel) & Cold(squirrel)\nTEXT: The squirrel is young.\nFOL: Squirrel(squirrel) & Young(squirrel)\nTEXT: The squirrel needs the bear.\nFOL: Squirrel(squirrel) & Needs(squirrel, bear)\nTEXT: The tiger does not eat the bear.\nFOL: Tiger(tiger) & -Eat(tiger, bear)\nTEXT: The tiger is young.\nFOL: Tiger(tiger) & Young(tiger)\nTEXT: If the bear chases the tiger and the tiger does not eat the squirrel then the tiger chases the bear.\nFOL: (Chases(bear, tiger) & -Eat(tiger, squirrel)) -> Chases(tiger, bear)\nTEXT: If something eats the tiger then it chases the squirrel.\nFOL: all x. (Eat(x, tiger) -> Chases(x, squirrel))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (Needs(x, tiger) -> Eat(x, tiger))\nTEXT: All blue things are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: If something eats the squirrel then it is blue.\nFOL: all x. (Eat(x, squirrel) -> Blue(x))\nTEXT: If something eats the squirrel and the squirrel chases the bear then the squirrel needs the tiger.\nFOL: (Eat(x, squirrel) & Chases(squirrel, bear)) -> Needs(squirrel, tiger)\nTEXT: If the tiger chases the squirrel and the squirrel does not eat the tiger then the squirrel is not green.\nFOL: (Chases(tiger, squirrel) & -Eat(tiger, squirrel)) -> -Green(squirrel)\nTEXT: If something is nice and it does not chase the bear then it needs the squirrel.\nFOL: all x. (Nice(x) & -Chases(x, bear) -> Needs(x, squirrel))\nTEXT: The tiger is cold.\nFOL: Tiger(tiger) & Cold(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear eats the squirrel.\nFOL: Bear(bear) & Squirrel(squirrel) & Eat(bear, squirrel)\nTEXT: The bear is cold.\nFOL: Bear(bear) & Cold(bear)\nTEXT: The bear is nice.\nFOL: Bear(bear) & Nice(bear)\nTEXT: The bear needs the tiger.\nFOL: Bear(bear) & Needs(bear, tiger)\nTEXT: The squirrel chases the bear.\nFOL: Squirrel(squirrel) & Chases(squirrel, bear)\nTEXT: The squirrel is cold.\nFOL: Squirrel(squirrel) & Cold(squirrel)\nTEXT: The squirrel is young.\nFOL: Squirrel(squirrel) & Young(squirrel)\nTEXT: The squirrel needs the bear.\nFOL: Squirrel(squirrel) & Needs(squirrel, bear)\nTEXT: The tiger does not eat the bear.\nFOL: Tiger(tiger) & -Eat(tiger, bear)\nTEXT: The tiger is young.\nFOL: Tiger(tiger) & Young(tiger)\nTEXT: If the bear chases the tiger and the tiger does not eat the squirrel then the tiger chases the bear.\nFOL: (Chases(bear, tiger) & -Eat(tiger, squirrel)) -> Chases(tiger, bear)\nTEXT: If something eats the tiger then it chases the squirrel.\nFOL: all x. (Eat(x, tiger) -> Chases(x, squirrel))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (Needs(x, tiger) -> Eat(x, tiger))\nTEXT: All blue things are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: If something eats the squirrel then it is blue.\nFOL: all x. (Eat(x, squirrel) -> Blue(x))\nTEXT: If something eats the squirrel and the squirrel chases the bear then the squirrel needs the tiger.\nFOL: all x. (Eat(x, squirrel) & Chases(squirrel, bear) -> Needs(squirrel, tiger))\nTEXT: If the tiger chases the squirrel and the squirrel does not eat the tiger then the squirrel is not green.\nFOL: (Chases(tiger, squirrel) & -Eat(tiger, squirrel)) -> -Green(squirrel)\nTEXT: If something is nice and it does not chase the bear then it needs the squirrel.\nFOL: all x. (Nice(x) & -Chases(x, bear) -> Needs(x, squirrel))\nTEXT: The tiger is cold.\nFOL: Tiger(tiger) & Cold(tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bear eats the squirrel.\nFOL: Bear(bear) & Squirrel(squirrel) & Eat(bear, squirrel)\nTEXT: The bear is cold.\nFOL: Bear(bear) & Cold(bear)\nTEXT: The bear is nice.\nFOL: Bear(bear) & Nice(bear)\nTEXT: The bear needs the tiger.\nFOL: Bear(bear) & Needs(bear, tiger)\nTEXT: The squirrel chases the bear.\nFOL: Squirrel(squirrel) & Chases(squirrel, bear)\nTEXT: The squirrel is cold.\nFOL: Squirrel(squirrel) & Cold(squirrel)\nTEXT: The squirrel is young.\nFOL: Squirrel(squirrel) & Young(squirrel)\nTEXT: The squirrel needs the bear.\nFOL: Squirrel(squirrel) & Needs(squirrel, bear)\nTEXT: The tiger does not eat the bear.\nFOL: Tiger(tiger) & -Eat(tiger, bear)\nTEXT: The tiger is young.\nFOL: Tiger(tiger) & Young(tiger)\nTEXT: If the bear chases the tiger and the tiger does not eat the squirrel then the tiger chases the bear.\nFOL: (Chases(bear, tiger) & -Eat(tiger, squirrel)) -> Chases(tiger, bear)\nTEXT: If something eats the tiger then it chases the squirrel.\nFOL: all x. (Eat(x, tiger) -> Chases(x, squirrel))\nTEXT: If something needs the tiger then it eats the tiger.\nFOL: all x. (Needs(x, tiger) -> Eat(x, tiger))\nTEXT: All blue things are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: If something eats the squirrel then it is blue.\nFOL: all x. (Eat(x, squirrel) -> Blue(x))\nTEXT: If something eats the squirrel and the squirrel chases the bear then the squirrel needs the tiger.\nFOL: all x. ((Eat(x, squirrel) & Chases(squirrel, bear)) -> Needs(squirrel, tiger))\nTEXT: If the tiger chases the squirrel and the squirrel does not eat the tiger then the squirrel is not green.\nFOL: (Chases(tiger, squirrel) & -Eat(tiger, squirrel)) -> -Green(squirrel)\nTEXT: If something is nice and it does not chase the bear then it needs the squirrel.\nFOL: all x. (Nice(x) & -Chases(x, bear) -> Needs(x, squirrel))\nTEXT: The tiger is cold.\nFOL: Tiger(tiger) & Cold(tiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 167,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: Bob(big)\nTEXT: Bob is blue.\nFOL: Bob(blue)\nTEXT: Bob is nice.\nFOL: Bob(nice)\nTEXT: Fiona is cold.\nFOL: Fiona(cold)\nTEXT: Fiona is nice.\nFOL: Fiona(nice)\nTEXT: Fiona is not rough.\nFOL: -Fiona(rough)\nTEXT: Gary is blue.\nFOL: Gary(blue)\nTEXT: Gary is kind.\nFOL: Gary(kind)\nTEXT: Gary is nice.\nFOL: Gary(nice)\nTEXT: Harry is big.\nFOL: Harry(big)\nTEXT: Harry is cold.\nFOL: Harry(cold)\nTEXT: Harry is rough.\nFOL: Harry(rough)\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: If Gary is big and Gary is not kind then Gary is blue.\nFOL: (Gary(big) & -Gary(kind) -> Gary(blue))\nTEXT: Big, cold things are red.\nFOL: all x. (Big(x) & Cold(x) -> Red(x))\nTEXT: All big things are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: All rough, blue things are nice.\nFOL: all x. (Rough(x) & Blue(x) -> Nice(x))\nTEXT: If something is nice and blue then it is rough.\nFOL: all x. (Nice(x) & Blue(x) -> Rough(x))\nTEXT: Fiona is nice.\nFOL: Fiona(nice)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: Big(Bob)\nTEXT: Bob is blue.\nFOL: Blue(Bob)\nTEXT: Bob is nice.\nFOL: Nice(Bob)\nTEXT: Fiona is cold.\nFOL: Cold(Fiona)\nTEXT: Fiona is nice.\nFOL: Nice(Fiona)\nTEXT: Fiona is not rough.\nFOL: -Rough(Fiona)\nTEXT: Gary is blue.\nFOL: Blue(Gary)\nTEXT: Gary is kind.\nFOL: Kind(Gary)\nTEXT: Gary is nice.\nFOL: Nice(Gary)\nTEXT: Harry is big.\nFOL: Big(Harry)\nTEXT: Harry is cold.\nFOL: Cold(Harry)\nTEXT: Harry is rough.\nFOL: Rough(Harry)\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: If Gary is big and Gary is not kind then Gary is blue.\nFOL: (Big(Gary) & -Kind(Gary)) -> Blue(Gary)\nTEXT: Big, cold things are red.\nFOL: all x. (Big(x) & Cold(x) -> Red(x))\nTEXT: All big things are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: All rough, blue things are nice.\nFOL: all x. (Rough(x) & Blue(x) -> Nice(x))\nTEXT: If something is nice and blue then it is rough.\nFOL: all x. (Nice(x) & Blue(x) -> Rough(x))\nTEXT: Fiona is nice.\nFOL: Nice(Fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: Bob(big)\nTEXT: Bob is blue.\nFOL: Bob(blue)\nTEXT: Bob is nice.\nFOL: Bob(nice)\nTEXT: Fiona is cold.\nFOL: Fiona(cold)\nTEXT: Fiona is nice.\nFOL: Fiona(nice)\nTEXT: Fiona is not rough.\nFOL: -Fiona(rough)\nTEXT: Gary is blue.\nFOL: Gary(blue)\nTEXT: Gary is kind.\nFOL: Gary(kind)\nTEXT: Gary is nice.\nFOL: Gary(nice)\nTEXT: Harry is big.\nFOL: Harry(big)\nTEXT: Harry is cold.\nFOL: Harry(cold)\nTEXT: Harry is rough.\nFOL: Harry(rough)\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: If Gary is big and Gary is not kind then Gary is blue.\nFOL: (Gary(big) & -Gary(kind) -> Gary(blue))\nTEXT: Big, cold things are red.\nFOL: all x. (Big(x) & Cold(x) -> Red(x))\nTEXT: All big things are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: All rough, blue things are nice.\nFOL: all x. ((Rough(x) & Blue(x)) -> Nice(x))\nTEXT: If something is nice and blue then it is rough.\nFOL: all x. (Nice(x) & Blue(x) -> Rough(x))\nTEXT: Fiona is nice.\nFOL: Fiona(nice)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: Bob(big)\nTEXT: Bob is blue.\nFOL: Bob(blue)\nTEXT: Bob is nice.\nFOL: Bob(nice)\nTEXT: Fiona is cold.\nFOL: Fiona(cold)\nTEXT: Fiona is nice.\nFOL: Fiona(nice)\nTEXT: Fiona is not rough.\nFOL: -Fiona(rough)\nTEXT: Gary is blue.\nFOL: Gary(blue)\nTEXT: Gary is kind.\nFOL: Gary(kind)\nTEXT: Gary is nice.\nFOL: Gary(nice)\nTEXT: Harry is big.\nFOL: Harry(big)\nTEXT: Harry is cold.\nFOL: Harry(cold)\nTEXT: Harry is rough.\nFOL: Harry(rough)\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: If Gary is big and Gary is not kind then Gary is blue.\nFOL: (Gary(big) & -Gary(kind) -> Gary(blue))\nTEXT: Big, cold things are red.\nFOL: all x. (Big(x) & Cold(x) -> Red(x))\nTEXT: All big things are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: All rough, blue things are nice.\nFOL: all x. (Rough(x) & Blue(x) -> Nice(x))\nTEXT: If something is nice and blue then it is rough.\nFOL: all x. ((Nice(x) & Blue(x)) -> Rough(x))\nTEXT: Fiona is nice.\nFOL: Fiona(nice)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is big.\nFOL: Bob(big)\nTEXT: Bob is blue.\nFOL: Bob(blue)\nTEXT: Bob is nice.\nFOL: Bob(nice)\nTEXT: Fiona is cold.\nFOL: Fiona(cold)\nTEXT: Fiona is nice.\nFOL: Fiona(nice)\nTEXT: Fiona is not rough.\nFOL: -Fiona(rough)\nTEXT: Gary is blue.\nFOL: Gary(blue)\nTEXT: Gary is kind.\nFOL: Gary(kind)\nTEXT: Gary is nice.\nFOL: Gary(nice)\nTEXT: Harry is big.\nFOL: Harry(big)\nTEXT: Harry is cold.\nFOL: Harry(cold)\nTEXT: Harry is rough.\nFOL: Harry(rough)\nTEXT: All blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: If Gary is big and Gary is not kind then Gary is blue.\nFOL: (Gary(big) & -Gary(kind) -> Gary(blue))\nTEXT: Big, cold things are red.\nFOL: all x. (Big(x) & Cold(x) -> Red(x))\nTEXT: All big things are cold.\nFOL: all x. (Big(x) -> Cold(x))\nTEXT: All rough, blue things are nice.\nFOL: all x. (Rough(x) & Blue(x) -> Nice(x))\nTEXT: If something is nice and blue then it is rough.\nFOL: all x. (Nice(x) & Blue(x) -> Rough(x))\nTEXT: Fiona is nice.\nFOL: Fiona(nice)\n</EVALUATE>"
  ]
 },
 {
  "index": 168,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is red.\nFOL: Red(Anne)\nTEXT: Anne is young.\nFOL: Young(Anne)\nTEXT: Bob is smart.\nFOL: Smart(Bob)\nTEXT: Fiona is furry.\nFOL: Furry(Fiona)\nTEXT: Fiona is smart.\nFOL: Smart(Fiona)\nTEXT: Gary is cold.\nFOL: Cold(Gary)\nTEXT: Gary is smart.\nFOL: Smart(Gary)\nTEXT: If someone is blue then they are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: If someone is nice then they are red.\nFOL: all x. (Nice(x) -> Red(x))\nTEXT: Nice, smart people are young.\nFOL: all x. (Nice(x) & Smart(x) -> Young(x))\nTEXT: All furry people are blue.\nFOL: all x. (Furry(x) -> Blue(x))\nTEXT: If someone is blue then they are red.\nFOL: all x. (Blue(x) -> Red(x))\nTEXT: If Fiona is cold then Fiona is smart.\nFOL: Cold(Fiona) -> Smart(Fiona)\nTEXT: If someone is furry then they are smart.\nFOL: all x. (Furry(x) -> Smart(x))\nTEXT: Red, furry people are smart.\nFOL: Red(Fiona) & Furry(Fiona) -> Smart(Fiona)\nTEXT: Anne is not nice.\nFOL: -Nice(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is red.\nFOL: Red(Anne)\nTEXT: Anne is young.\nFOL: Young(Anne)\nTEXT: Bob is smart.\nFOL: Smart(Bob)\nTEXT: Fiona is furry.\nFOL: Furry(Fiona)\nTEXT: Fiona is smart.\nFOL: Smart(Fiona)\nTEXT: Gary is cold.\nFOL: Cold(Gary)\nTEXT: Gary is smart.\nFOL: Smart(Gary)\nTEXT: If someone is blue then they are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: If someone is nice then they are red.\nFOL: all x. (Nice(x) -> Red(x))\nTEXT: Nice, smart people are young.\nFOL: all x. (Nice(x) & Smart(x) -> Young(x))\nTEXT: All furry people are blue.\nFOL: all x. (Furry(x) -> Blue(x))\nTEXT: If someone is blue then they are red.\nFOL: all x. (Blue(x) -> Red(x))\nTEXT: If Fiona is cold then Fiona is smart.\nFOL: Cold(Fiona) -> Smart(Fiona)\nTEXT: If someone is furry then they are smart.\nFOL: all x. (Furry(x) -> Smart(x))\nTEXT: Red, furry people are smart.\nFOL: all x. (Red(x) & Furry(x) -> Smart(x))\nTEXT: Anne is not nice.\nFOL: -Nice(Anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is red.\nFOL: Red(anne)\nTEXT: Anne is young.\nFOL: Young(anne)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\nTEXT: Fiona is smart.\nFOL: Smart(fiona)\nTEXT: Gary is cold.\nFOL: Cold(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: If someone is blue then they are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: If someone is nice then they are red.\nFOL: all x. (Nice(x) -> Red(x))\nTEXT: Nice, smart people are young.\nFOL: all x. (Nice(x) & Smart(x) -> Young(x))\nTEXT: All furry people are blue.\nFOL: all x. (Furry(x) -> Blue(x))\nTEXT: If someone is blue then they are red.\nFOL: all x. (Blue(x) -> Red(x))\nTEXT: If Fiona is cold then Fiona is smart.\nFOL: Cold(fiona) -> Smart(fiona)\nTEXT: If someone is furry then they are smart.\nFOL: all x. (Furry(x) -> Smart(x))\nTEXT: Red, furry people are smart.\nFOL: Red(fiona) & Furry(fiona) -> Smart(fiona)\nTEXT: Anne is not nice.\nFOL: -Nice(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is red.\nFOL: Red(anne)\nTEXT: Anne is young.\nFOL: Young(anne)\nTEXT: Bob is smart.\nFOL: Smart(bob)\nTEXT: Fiona is furry.\nFOL: Furry(fiona)\nTEXT: Fiona is smart.\nFOL: Smart(fiona)\nTEXT: Gary is cold.\nFOL: Cold(gary)\nTEXT: Gary is smart.\nFOL: Smart(gary)\nTEXT: If someone is blue then they are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nTEXT: If someone is nice then they are red.\nFOL: all x. (Nice(x) -> Red(x))\nTEXT: Nice, smart people are young.\nFOL: all x. (Nice(x) & Smart(x) -> Young(x))\nTEXT: All furry people are blue.\nFOL: all x. (Furry(x) -> Blue(x))\nTEXT: If someone is blue then they are red.\nFOL: all x. (Blue(x) -> Red(x))\nTEXT: If Fiona is cold then Fiona is smart.\nFOL: Cold(fiona) -> Smart(fiona)\nTEXT: If someone is furry then they are smart.\nFOL: all x. (Furry(x) -> Smart(x))\nTEXT: Red, furry people are smart.\nFOL: all x. (Red(x) & Furry(x) -> Smart(x))\nTEXT: Anne is not nice.\nFOL: -Nice(anne)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is red.\nFOL: Red(Anne)\n\nTEXT: Anne is young.\nFOL: Young(Anne)\n\nTEXT: Bob is smart.\nFOL: Smart(Bob)\n\nTEXT: Fiona is furry.\nFOL: Furry(Fiona)\n\nTEXT: Fiona is smart.\nFOL: Smart(Fiona)\n\nTEXT: Gary is cold.\nFOL: Cold(Gary)\n\nTEXT: If someone is blue then they are nice.\nFOL: all x. (Blue(x) -> Nice(x))\n\nTEXT: If someone is nice then they are red.\nFOL: all x. (Nice(x) -> Red(x))\n\nTEXT: Nice, smart people are young.\nFOL: all x. (Nice(x) & Smart(x) -> Young(x))\n\nTEXT: All furry people are blue.\nFOL: all x. (Furry(x) -> Blue(x))\n\nTEXT: If someone is blue then they are red.\nFOL: all x. (Blue(x) -> Red(x))\n\nTEXT: If Fiona is cold then Fiona is smart.\nFOL: Cold(Fiona) -> Smart(Fiona)\n\nTEXT: If someone is furry then they are smart.\nFOL: all x. (Furry(x) -> Smart(x))\n\nTEXT: Red, furry people are smart.\nFOL: Red(Fiona) & Furry(Fiona) -> Smart(Fiona)\n\nTEXT: Anne is not nice.\nFOL: -Nice(Anne)\n</EVALUATE>"
  ]
 },
 {
  "index": 169,
  "responses": [
   "<EVALUATE>\nTEXT: Charlie is big.\nFOL: Big(Charlie)\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\nTEXT: Fiona is not blue.\nFOL: -Blue(Fiona)\nTEXT: Fiona is furry.\nFOL: Furry(Fiona)\nTEXT: Fiona is red.\nFOL: Red(Fiona)\nTEXT: Fiona is not round.\nFOL: -Round(Fiona)\nTEXT: Gary is not big.\nFOL: -Big(Gary)\nTEXT: Gary is cold.\nFOL: Cold(Gary)\nTEXT: Harry is big.\nFOL: Big(Harry)\nTEXT: Harry is red.\nFOL: Red(Harry)\nTEXT: Harry is round.\nFOL: Round(Harry)\nTEXT: Harry is young.\nFOL: Young(Harry)\nTEXT: Blue things are young.\nFOL: all x. (Blue(x) -> Young(x))\nTEXT: If Gary is round and Gary is cold then Gary is not furry.\nFOL: (Round(Gary) & Cold(Gary)) -> -Furry(Gary)\nTEXT: Young, cold things are furry.\nFOL: all x. (Young(x) & Cold(x) -> Furry(x))\nTEXT: All young things are furry.\nFOL: all x. (Young(x) -> Furry(x))\nTEXT: If something is furry and not young then it is red.\nFOL: all x. ((Furry(x) & -Young(x)) -> Red(x))\nTEXT: All furry things are red.\nFOL: all x. (Furry(x) -> Red(x))\nTEXT: Gary is not furry.\nFOL: -Furry(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is big.\nFOL: Big(Charlie)\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\nTEXT: Fiona is not blue.\nFOL: -Blue(Fiona)\nTEXT: Fiona is furry.\nFOL: Furry(Fiona)\nTEXT: Fiona is red.\nFOL: Red(Fiona)\nTEXT: Fiona is not round.\nFOL: -Round(Fiona)\nTEXT: Gary is not big.\nFOL: -Big(Gary)\nTEXT: Gary is cold.\nFOL: Cold(Gary)\nTEXT: Harry is big.\nFOL: Big(Harry)\nTEXT: Harry is red.\nFOL: Red(Harry)\nTEXT: Harry is round.\nFOL: Round(Harry)\nTEXT: Harry is young.\nFOL: Young(Harry)\nTEXT: Blue things are young.\nFOL: all x. (Blue(x) -> Young(x))\nTEXT: If Gary is round and Gary is cold then Gary is not furry.\nFOL: (Round(Gary) & Cold(Gary)) -> -Furry(Gary)\nTEXT: Young, cold things are furry.\nFOL: all x. (Young(x) & Cold(x) -> Furry(x))\nTEXT: All young things are furry.\nFOL: all x. (Young(x) -> Furry(x))\nTEXT: If something is furry and not young then it is red.\nFOL: all x. ((Furry(x) & -Young(x)) -> Red(x))\nTEXT: All furry things are red.\nFOL: all x. (Furry(x) -> Red(x))\nTEXT: Gary is not furry.\nFOL: -Furry(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is big.\nFOL: Big(Charlie)\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\nTEXT: Fiona is not blue.\nFOL: -Blue(Fiona)\nTEXT: Fiona is furry.\nFOL: Furry(Fiona)\nTEXT: Fiona is red.\nFOL: Red(Fiona)\nTEXT: Fiona is not round.\nFOL: -Round(Fiona)\nTEXT: Gary is not big.\nFOL: -Big(Gary)\nTEXT: Gary is cold.\nFOL: Cold(Gary)\nTEXT: Harry is big.\nFOL: Big(Harry)\nTEXT: Harry is red.\nFOL: Red(Harry)\nTEXT: Harry is round.\nFOL: Round(Harry)\nTEXT: Harry is young.\nFOL: Young(Harry)\nTEXT: Blue things are young.\nFOL: all x. (Blue(x) -> Young(x))\nTEXT: If Gary is round and Gary is cold then Gary is not furry.\nFOL: (Round(Gary) & Cold(Gary)) -> -Furry(Gary)\nTEXT: Young, cold things are furry.\nFOL: all x. (Young(x) & Cold(x) -> Furry(x))\nTEXT: All young things are furry.\nFOL: all x. (Young(x) -> Furry(x))\nTEXT: If something is furry and not young then it is red.\nFOL: all x. (Furry(x) & -Young(x) -> Red(x))\nTEXT: All furry things are red.\nFOL: all x. (Furry(x) -> Red(x))\nTEXT: Gary is not furry.\nFOL: -Furry(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is big.\nFOL: Big(Charlie)\n\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\n\nTEXT: Fiona is not blue.\nFOL: -Blue(Fiona)\n\nTEXT: Fiona is furry.\nFOL: Furry(Fiona)\n\nTEXT: Fiona is red.\nFOL: Red(Fiona)\n\nTEXT: Fiona is not round.\nFOL: -Round(Fiona)\n\nTEXT: Gary is not big.\nFOL: -Big(Gary)\n\nTEXT: Gary is cold.\nFOL: Cold(Gary)\n\nTEXT: Harry is big.\nFOL: Big(Harry)\n\nTEXT: Harry is red.\nFOL: Red(Harry)\n\nTEXT: Harry is round.\nFOL: Round(Harry)\n\nTEXT: Harry is young.\nFOL: Young(Harry)\n\nTEXT: Blue things are young.\nFOL: all x. (Blue(x) -> Young(x))\n\nTEXT: If Gary is round and Gary is cold then Gary is not furry.\nFOL: (Round(Gary) & Cold(Gary)) -> -Furry(Gary)\n\nTEXT: Young, cold things are furry.\nFOL: all x. (Young(x) & Cold(x) -> Furry(x))\n\nTEXT: All young things are furry.\nFOL: all x. (Young(x) -> Furry(x))\n\nTEXT: If something is furry and not young then it is red.\nFOL: all x. ((Furry(x) & -Young(x)) -> Red(x))\n\nTEXT: All furry things are red.\nFOL: all x. (Furry(x) -> Red(x))\n\nTEXT: Gary is not furry.\nFOL: -Furry(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Charlie is big.\nFOL: Big(Charlie)\n\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\n\nTEXT: Fiona is not blue.\nFOL: -Blue(Fiona)\n\nTEXT: Fiona is furry.\nFOL: Furry(Fiona)\n\nTEXT: Fiona is red.\nFOL: Red(Fiona)\n\nTEXT: Fiona is not round.\nFOL: -Round(Fiona)\n\nTEXT: Gary is not big.\nFOL: -Big(Gary)\n\nTEXT: Gary is cold.\nFOL: Cold(Gary)\n\nTEXT: Harry is big.\nFOL: Big(Harry)\n\nTEXT: Harry is red.\nFOL: Red(Harry)\n\nTEXT: Harry is round.\nFOL: Round(Harry)\n\nTEXT: Harry is young.\nFOL: Young(Harry)\n\nTEXT: Blue things are young.\nFOL: all x. (Blue(x) -> Young(x))\n\nTEXT: If Gary is round and Gary is cold then Gary is not furry.\nFOL: (Round(Gary) & Cold(Gary)) -> -Furry(Gary)\n\nTEXT: Young, cold things are furry.\nFOL: all x. (Young(x) & Cold(x) -> Furry(x))\n\nTEXT: All young things are furry.\nFOL: all x. (Young(x) -> Furry(x))\n\nTEXT: If something is furry and not young then it is red.\nFOL: all x. (Furry(x) & -Young(x) -> Red(x))\n\nTEXT: All furry things are red.\nFOL: all x. (Furry(x) -> Red(x))\n\nTEXT: Gary is not furry.\nFOL: -Furry(Gary)\n</EVALUATE>"
  ]
 },
 {
  "index": 170,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle is big.\nFOL: BaldEagle(x) -> Big(x)\nTEXT: The bear needs the cat.\nFOL: Bear(x) -> Needs(x, Cat(x))\nTEXT: The cat does not chase the bald eagle.\nFOL: Cat(x) -> -Chase(x, BaldEagle(x))\nTEXT: The lion is big.\nFOL: Lion(x) -> Big(x)\nTEXT: If someone is kind then they do not eat the lion.\nFOL: Kind(x) -> -Eat(x, Lion(x))\nTEXT: If the bald eagle is big then the bald eagle needs the lion.\nFOL: BaldEagle(x) -> Big(x) -> Needs(x, Lion(x))\nTEXT: If someone is rough and they chase the bear then they do not need the bear.\nFOL: Rough(x) & Chase(x, Bear(x)) -> -Needs(x, Bear(x))\nTEXT: If someone needs the lion then the lion is kind.\nFOL: Needs(x, Lion(x)) -> Kind(x)\nTEXT: If someone needs the bear then they chase the lion.\nFOL: Needs(x, Bear(x)) -> Chase(x, Lion(x))\nTEXT: If someone chases the bear and they are kind then the bear chases the bald eagle.\nFOL: Chase(x, Bear(x)) & Kind(x) -> Chase(Bear(x), BaldEagle(x))\nTEXT: The bald eagle is rough.\nFOL: BaldEagle(x) -> Rough(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is big.\nFOL: BaldEagle(x) -> Big(x)\nTEXT: The bear needs the cat.\nFOL: Bear(x) -> Needs(x, Cat(x))\nTEXT: The cat does not chase the bald eagle.\nFOL: Cat(x) & -Chase(x, BaldEagle(x))\nTEXT: The lion is big.\nFOL: Lion(x) -> Big(x)\nTEXT: If someone is kind then they do not eat the lion.\nFOL: Kind(x) -> -Eat(x, Lion(x))\nTEXT: If the bald eagle is big then the bald eagle needs the lion.\nFOL: BaldEagle(x) -> Big(x) -> Needs(x, Lion(x))\nTEXT: If someone is rough and they chase the bear then they do not need the bear.\nFOL: Rough(x) & Chase(x, Bear(x)) -> -Needs(x, Bear(x))\nTEXT: If someone needs the lion then the lion is kind.\nFOL: Needs(x, Lion(x)) -> Kind(x)\nTEXT: If someone needs the bear then they chase the lion.\nFOL: Needs(x, Bear(x)) -> Chase(x, Lion(x))\nTEXT: If someone chases the bear and they are kind then the bear chases the bald eagle.\nFOL: Chase(x, Bear(x)) & Kind(x) -> Chase(Bear(x), BaldEagle(x))\nTEXT: The bald eagle is rough.\nFOL: BaldEagle(x) -> Rough(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is big.\nFOL: BaldEagle(x) -> Big(x)\nTEXT: The bear needs the cat.\nFOL: Bear(x) -> Needs(x, Cat(x))\nTEXT: The cat does not chase the bald eagle.\nFOL: Cat(x) -> -Chase(x, BaldEagle(x))\nTEXT: The lion is big.\nFOL: Lion(x) -> Big(x)\nTEXT: If someone is kind then they do not eat the lion.\nFOL: Kind(x) -> -Eat(x, Lion(x))\nTEXT: If the bald eagle is big then the bald eagle needs the lion.\nFOL: BaldEagle(x) -> Big(x) -> Needs(x, Lion(x))\nTEXT: If someone is rough and they chase the bear then they do not need the bear.\nFOL: Rough(x) -> Chase(x, Bear(x)) -> -Needs(x, Bear(x))\nTEXT: If someone needs the lion then the lion is kind.\nFOL: Needs(x, Lion(x)) -> Kind(x)\nTEXT: If someone needs the bear then they chase the lion.\nFOL: Needs(x, Bear(x)) -> Chase(x, Lion(x))\nTEXT: If someone chases the bear and they are kind then the bear chases the bald eagle.\nFOL: Chase(x, Bear(x)) & Kind(x) -> Chase(Bear(x), BaldEagle(x))\nTEXT: The bald eagle is rough.\nFOL: BaldEagle(x) -> Rough(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is big.\nFOL: BaldEagle(x) -> Big(x)\nTEXT: The bear needs the cat.\nFOL: Bear(x) -> NeedsCat(x)\nTEXT: The cat does not chase the bald eagle.\nFOL: Cat(x) -> -ChaseBaldEagle(x)\nTEXT: The lion is big.\nFOL: Lion(x) -> Big(x)\nTEXT: If someone is kind then they do not eat the lion.\nFOL: Kind(x) -> -EatLion(x)\nTEXT: If the bald eagle is big then the bald eagle needs the lion.\nFOL: BaldEagle(x) -> Big(x) -> NeedsLion(x)\nTEXT: If someone is rough and they chase the bear then they do not need the bear.\nFOL: Rough(x) & ChaseBear(x) -> -NeedsBear(x)\nTEXT: If someone needs the lion then the lion is kind.\nFOL: NeedsLion(x) -> Kind(x)\nTEXT: If someone needs the bear then they chase the lion.\nFOL: NeedsBear(x) -> ChaseLion(x)\nTEXT: If someone chases the bear and they are kind then the bear chases the bald eagle.\nFOL: ChaseBear(x) & Kind(x) -> ChaseBaldEagle(x)\nTEXT: The bald eagle is rough.\nFOL: BaldEagle(x) -> Rough(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle is big.\nFOL: BaldEagle(x) -> Big(x)\nTEXT: The bear needs the cat.\nFOL: Bear(x) -> Needs(x, Cat(x))\nTEXT: The cat does not chase the bald eagle.\nFOL: Cat(x) -> -Chase(x, BaldEagle(x))\nTEXT: The lion is big.\nFOL: Lion(x) -> Big(x)\nTEXT: If someone is kind then they do not eat the lion.\nFOL: Kind(x) -> -Eat(x, Lion(x))\nTEXT: If the bald eagle is big then the bald eagle needs the lion.\nFOL: BaldEagle(x) -> Big(x) -> Needs(x, Lion(x))\nTEXT: If someone is rough and they chase the bear then they do not need the bear.\nFOL: Rough(x) -> Chase(x, Bear(x)) -> -Needs(x, Bear(x))\nTEXT: If someone needs the lion then the lion is kind.\nFOL: Needs(x, Lion(x)) -> Kind(x)\nTEXT: If someone needs the bear then they chase the lion.\nFOL: Needs(x, Bear(x)) -> Chase(x, Lion(x))\nTEXT: If someone chases the bear and they are kind then the bear chases the bald eagle.\nFOL: Chase(x, Bear(x)) -> Kind(x) -> Chase(Bear(x), BaldEagle(x))\nTEXT: The bald eagle is rough.\nFOL: BaldEagle(x) -> Rough(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 171,
  "responses": [
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Cat(eats(rabbit))\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(eats(tiger))\nTEXT: The tiger sees the cat.\nFOL: Tiger(sees(cat))\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: -Tiger(sees(rabbit)) -> Round(Tiger)\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: Cat(needs(Tiger)) -> Round(Tiger)\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: Needs(x, Cat) -> -Needs(x, Tiger)\nTEXT: If something sees the tiger then the tiger is big.\nFOL: Sees(x, Tiger) -> Big(Tiger)\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: Round(Tiger) -> Needs(Tiger, Rabbit)\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: Eats(x, Rabbit) -> Needs(x, Tiger)\nTEXT: The tiger does not see the cat.\nFOL: -Tiger(sees(cat))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Cat(eats(rabbit))\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(eats(tiger))\nTEXT: The tiger sees the cat.\nFOL: Tiger(sees(cat))\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: -Tiger(sees(rabbit)) -> Round(Tiger)\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: Cat(needs(Tiger)) -> Round(Tiger)\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: Something(needs(Cat)) -> -Cat(needs(Tiger))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: Something(sees(Tiger)) -> Big(Tiger)\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: Round(Tiger) -> Tiger(needs(rabbit))\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: Something(eats(rabbit)) -> Tiger(needs(Something))\nTEXT: The tiger does not see the cat.\nFOL: -Tiger(sees(cat))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Cat(eats(rabbit))\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(eats(tiger))\nTEXT: The tiger sees the cat.\nFOL: Tiger(sees(cat))\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: -Tiger(sees(rabbit)) -> Round(Tiger)\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: Cat(needs(Tiger)) -> Round(Tiger)\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: Something(needs(cat)) -> -Cat(needs(Tiger))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: Something(sees(Tiger)) -> Big(Tiger)\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: Round(Tiger) -> Cat(needs(rabbit))\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: Something(eats(rabbit)) -> Cat(needs(Tiger))\nTEXT: The tiger does not see the cat.\nFOL: -Tiger(sees(cat))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Cat(eats(rabbit))\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(eats(tiger))\nTEXT: The tiger sees the cat.\nFOL: Tiger(sees(cat))\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: -Tiger(sees(rabbit)) -> Round(Tiger)\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: Cat(needs(Tiger)) -> Round(Tiger)\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: Something(needs(Cat)) -> -Cat(needs(Tiger))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: Something(sees(Tiger)) -> Big(Tiger)\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: Round(Tiger) -> Cat(needs(rabbit))\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: Something(eats(rabbit)) -> Cat(needs(Tiger))\nTEXT: The tiger does not see the cat.\nFOL: -Tiger(sees(cat))\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Cat(eats(rabbit))\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(eats(tiger))\nTEXT: The tiger sees the cat.\nFOL: Tiger(sees(cat))\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: -Tiger(sees(rabbit)) -> Round(Tiger)\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: Needs(Tiger, Cat) -> Round(Tiger)\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: Needs(x, Cat) -> -Needs(Tiger, x)\nTEXT: If something sees the tiger then the tiger is big.\nFOL: Sees(x, Tiger) -> Big(Tiger)\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: Round(Tiger) -> Needs(Rabbit, Tiger)\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: Eats(x, Rabbit) -> Needs(Tiger, x)\nTEXT: The tiger does not see the cat.\nFOL: -Tiger(sees(cat))\n</EVALUATE>"
  ]
 },
 {
  "index": 172,
  "responses": [
   "<EVALUATE>\nTEXT: Bob is cold.\nFOL: Cold(Bob)\nTEXT: Bob is red.\nFOL: Red(Bob)\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\nTEXT: Erin is not furry.\nFOL: -Furry(Erin)\nTEXT: Gary is not blue.\nFOL: -Blue(Gary)\nTEXT: Gary is kind.\nFOL: Kind(Gary)\nTEXT: Gary is nice.\nFOL: Nice(Gary)\nTEXT: If something is big and red then it is furry.\nFOL: all x. (Big(x) & Red(x) -> Furry(x))\nTEXT: If something is cold then it is blue.\nFOL: all x. (Cold(x) -> Blue(x))\nTEXT: Blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Charlie is not blue.\nFOL: -Blue(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is cold.\nFOL: Cold(Bob)\n\nTEXT: Bob is red.\nFOL: Red(Bob)\n\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\n\nTEXT: Erin is not furry.\nFOL: -Furry(Erin)\n\nTEXT: Gary is not blue.\nFOL: -Blue(Gary)\n\nTEXT: Gary is kind.\nFOL: Kind(Gary)\n\nTEXT: Gary is nice.\nFOL: Nice(Gary)\n\nTEXT: If something is big and red then it is furry.\nFOL: all x. (Big(x) & Red(x) -> Furry(x))\n\nTEXT: If something is cold then it is blue.\nFOL: all x. (Cold(x) -> Blue(x))\n\nTEXT: Blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\n\nTEXT: Charlie is not blue.\nFOL: -Blue(Charlie)\n\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is cold.\nFOL: Cold(Bob)\nTEXT: Bob is red.\nFOL: Red(Bob)\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\nTEXT: Erin is not furry.\nFOL: -Furry(Erin)\nTEXT: Gary is not blue.\nFOL: -Blue(Gary)\nTEXT: Gary is kind.\nFOL: Kind(Gary)\nTEXT: Gary is nice.\nFOL: Nice(Gary)\nTEXT: If something is big and red then it is furry.\nFOL: all x. ((Big(x) & Red(x)) -> Furry(x))\nTEXT: If something is cold then it is blue.\nFOL: all x. (Cold(x) -> Blue(x))\nTEXT: Blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Charlie is not blue.\nFOL: -Blue(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is cold.\nFOL: Cold(Bob)\nTEXT: Bob is red.\nFOL: Red(Bob)\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\nTEXT: Erin is not furry.\nFOL: -Furry(Erin)\nTEXT: Gary is not blue.\nFOL: -Blue(Gary)\nTEXT: Gary is kind.\nFOL: Kind(Gary)\nTEXT: Gary is nice.\nFOL: Nice(Gary)\nTEXT: If something is big and red then it is furry.\nFOL: all x. (Big(x) & Red(x) -> Furry(x))\nTEXT: If something is cold then it is blue.\nFOL: all x. (Cold(x) -> Blue(x))\nTEXT: Blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\nTEXT: Charlie is not blue.\nFOL: -Blue(Charlie)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob is cold.\nFOL: Cold(Bob)\n\nTEXT: Bob is red.\nFOL: Red(Bob)\n\nTEXT: Charlie is blue.\nFOL: Blue(Charlie)\n\nTEXT: Erin is not furry.\nFOL: -Furry(Erin)\n\nTEXT: Gary is not blue.\nFOL: -Blue(Gary)\n\nTEXT: Gary is kind.\nFOL: Kind(Gary)\n\nTEXT: Gary is nice.\nFOL: Nice(Gary)\n\nTEXT: If something is big and red then it is furry.\nFOL: all x. ((Big(x) & Red(x)) -> Furry(x))\n\nTEXT: If something is cold then it is blue.\nFOL: all x. (Cold(x) -> Blue(x))\n\nTEXT: Blue things are big.\nFOL: all x. (Blue(x) -> Big(x))\n\nTEXT: Charlie is not blue.\nFOL: -Blue(Charlie)\n\n</EVALUATE>"
  ]
 },
 {
  "index": 173,
  "responses": [
   "<EVALUATE>\nTEXT: Alan is a big guy who is colored red from a sunburn.\nFOL: BigGuy(Alan) & Red(Alan)\nTEXT: He also has a cold.\nFOL: Cold(Alan)\nTEXT: Eric seems to be round.\nFOL: Round(Eric)\nTEXT: Gary was proud of being round, yet rough.\nFOL: ProudOfBeingRound(Gary) & Rough(Gary)\nTEXT: His red cheeks glowed.\nFOL: RedCheeks(Gary) & Glowed(Gary)\nTEXT: Harry seems big and rough, but he's actually quite kind.\nFOL: BigAndRough(Harry) & Kind(Harry)\nTEXT: Even though young people are rough, they are still very red.\nFOL: YoungPerson(x) & Rough(x) & Red(x)\nTEXT: Anybody young person covered in blue and green will be kind.\nFOL: YoungPerson(x) & Blue(x) & Green(x) -> Kind(x)\nTEXT: Anyone who is both red and green must be as cold as Christmas.\nFOL: Red(x) & Green(x) -> Cold(x)\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: Rough(x) & Cold(x) & Green(x) -> BigQuality(x)\nTEXT: Most young kind people tend to be red too.\nFOL: YoungPerson(x) & Kind(x) -> Red(x)\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: Red(x) -> Green(x)\nTEXT: Gary is cold.\nFOL: Cold(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a big guy who is colored red from a sunburn.\nFOL: BigGuy(Alan) & Red(Alan) & Sunburn(Alan)\nTEXT: He also has a cold.\nFOL: Cold(Alan)\nTEXT: Eric seems to be round.\nFOL: Round(Eric)\nTEXT: Gary was proud of being round, yet rough.\nFOL: ProudOfBeingRound(Gary) & Rough(Gary)\nTEXT: His red cheeks glowed.\nFOL: RedCheeks(Gary) & Glowed(Gary)\nTEXT: Harry seems big and rough, but he's actually quite kind.\nFOL: BigAndRough(Harry) & Kind(Harry)\nTEXT: Even though young people are rough, they are still very red.\nFOL: YoungPerson(x) & Rough(x) & Red(x)\nTEXT: Anybody young person covered in blue and green will be kind.\nFOL: YoungPerson(x) & Blue(x) & Green(x) -> Kind(x)\nTEXT: Anyone who is both red and green must be as cold as Christmas.\nFOL: Red(x) & Green(x) -> Cold(x)\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: Rough(x) & Cold(x) & Green(x) -> BigQuality(x)\nTEXT: Most young kind people tend to be red too.\nFOL: YoungPerson(x) & Kind(x) -> Red(x)\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: Red(x) -> Green(x)\nTEXT: Gary is cold.\nFOL: Cold(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a big guy who is colored red from a sunburn.\nFOL: BigGuy(Alan) & Red(Alan)\nTEXT: He also has a cold.\nFOL: Cold(Alan)\nTEXT: Eric seems to be round.\nFOL: Round(Eric)\nTEXT: Gary was proud of being round, yet rough.\nFOL: ProudOfBeingRound(Gary) & Rough(Gary)\nTEXT: His red cheeks glowed.\nFOL: RedCheeks(Gary) & Glowed(Gary)\nTEXT: Harry seems big and rough, but he's actually quite kind.\nFOL: BigAndRough(Harry) & Kind(Harry)\nTEXT: Even though young people are rough, they are still very red.\nFOL: YoungPerson(x) & Rough(x) & Red(x)\nTEXT: Anybody young person covered in blue and green will be kind.\nFOL: YoungPerson(x) & Blue(x) & Green(x) -> Kind(x)\nTEXT: Anyone who is both red and green must be as cold as Christmas.\nFOL: Red(x) & Green(x) -> Cold(x)\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: Rough(x) & Cold(x) & Green(x) -> BigQuality(x)\nTEXT: Most young kind people tend to be red too.\nFOL: YoungKindPerson(x) & Kind(x) -> Red(x)\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: Red(x) -> Green(x)\nTEXT: Gary is cold.\nFOL: Cold(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a big guy who is colored red from a sunburn.\nFOL: BigGuy(Alan) & Red(Alan)\nTEXT: He also has a cold.\nFOL: Cold(Alan)\nTEXT: Eric seems to be round.\nFOL: Round(Eric)\nTEXT: Gary was proud of being round, yet rough.\nFOL: ProudOfBeingRound(Gary) & Rough(Gary)\nTEXT: His red cheeks glowed.\nFOL: RedCheeks(Gary) & Glowed(Gary)\nTEXT: Harry seems big and rough, but he's actually quite kind.\nFOL: BigAndRough(Harry) & Kind(Harry)\nTEXT: Even though young people are rough, they are still very red.\nFOL: YoungPerson(x) & Rough(x) & Red(x)\nTEXT: Anybody young person covered in blue and green will be kind.\nFOL: YoungPerson(x) & Blue(x) & Green(x) -> Kind(x)\nTEXT: Anyone who is both red and green must be as cold as Christmas.\nFOL: Red(x) & Green(x) -> Cold(x)\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: Rough(x) & Cold(x) & Green(x) -> BigQuality(x)\nTEXT: Most young kind people tend to be red too.\nFOL: YoungPerson(x) & Kind(x) & Red(x)\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: Red(x) -> Green(x)\nTEXT: Gary is cold.\nFOL: Cold(Gary)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Alan is a big guy who is colored red from a sunburn.\nFOL: BigGuy(Alan) & Red(Alan) & Sunburn(Alan)\nTEXT: He also has a cold.\nFOL: Cold(Alan)\nTEXT: Eric seems to be round.\nFOL: Round(Eric)\nTEXT: Gary was proud of being round, yet rough.\nFOL: Proud(Gary) & Round(Gary) & Rough(Gary)\nTEXT: His red cheeks glowed.\nFOL: RedCheeks(Gary) & Glowed(Gary)\nTEXT: Harry seems big and rough, but he's actually quite kind.\nFOL: BigAndRough(Harry) & Kind(Harry)\nTEXT: Even though young people are rough, they are still very red.\nFOL: YoungPerson(x) & Rough(x) & Red(x)\nTEXT: Anybody young person covered in blue and green will be kind.\nFOL: YoungPerson(x) & Blue(x) & Green(x) -> Kind(x)\nTEXT: Anyone who is both red and green must be as cold as Christmas.\nFOL: Red(x) & Green(x) -> Cold(x)\nTEXT: Anyone having rough, cold and green qualities will also have a big quality.\nFOL: Rough(x) & Cold(x) & Green(x) -> BigQuality(x)\nTEXT: Most young kind people tend to be red too.\nFOL: YoungPerson(x) & Kind(x) -> Red(x)\nTEXT: If someone shows that they are red, then they are also showing that they are green.\nFOL: Red(x) -> Green(x)\nTEXT: Gary is cold.\nFOL: Cold(Gary)\n</EVALUATE>"
  ]
 },
 {
  "index": 174,
  "responses": [
   "<EVALUATE>\nTEXT: The cow is big.\nFOL: Cow(cow) & Big(cow)\nTEXT: The cow is blue.\nFOL: Cow(cow) & Blue(cow)\nTEXT: The cow likes the squirrel.\nFOL: Cow(cow) & Squirrel(squirrel) & Likes(cow, squirrel)\nTEXT: The cow sees the lion.\nFOL: Cow(cow) & Lion(lion) & Sees(cow, lion)\nTEXT: The lion eats the cow.\nFOL: Lion(lion) & Cow(cow) & Eats(lion, cow)\nTEXT: The lion eats the squirrel.\nFOL: Lion(lion) & Squirrel(squirrel) & Eats(lion, squirrel)\nTEXT: The lion is big.\nFOL: Lion(lion) & Big(lion)\nTEXT: The lion is kind.\nFOL: Lion(lion) & Kind(lion)\nTEXT: The lion is nice.\nFOL: Lion(lion) & Nice(lion)\nTEXT: The squirrel eats the cow.\nFOL: Squirrel(squirrel) & Cow(cow) & Eats(squirrel, cow)\nTEXT: The squirrel is kind.\nFOL: Squirrel(squirrel) & Kind(squirrel)\nTEXT: The squirrel is nice.\nFOL: Squirrel(squirrel) & Nice(squirrel)\nTEXT: If someone likes the cow then they are red.\nFOL: all x. (Likes(x, cow) -> Red(x))\nTEXT: If someone is big then they like the squirrel.\nFOL: all x. (Big(x) -> Likes(x, squirrel))\nTEXT: The lion likes the squirrel.\nFOL: Lion(lion) & Squirrel(squirrel) & Likes(lion, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is big.\nFOL: Cow(cow) & Big(cow)\nTEXT: The cow is blue.\nFOL: Cow(cow) & Blue(cow)\nTEXT: The cow likes the squirrel.\nFOL: Cow(cow) & Squirrel(squirrel) & Likes(cow, squirrel)\nTEXT: The cow sees the lion.\nFOL: Cow(cow) & Lion(lion) & Sees(cow, lion)\nTEXT: The lion eats the cow.\nFOL: Lion(lion) & Cow(cow) & Eats(lion, cow)\nTEXT: The lion eats the squirrel.\nFOL: Lion(lion) & Squirrel(squirrel) & Eats(lion, squirrel)\nTEXT: The lion is big.\nFOL: Lion(lion) & Big(lion)\nTEXT: The lion is kind.\nFOL: Lion(lion) & Kind(lion)\nTEXT: The lion is nice.\nFOL: Lion(lion) & Nice(lion)\nTEXT: The squirrel eats the cow.\nFOL: Squirrel(squirrel) & Cow(cow) & Eats(squirrel, cow)\nTEXT: The squirrel is kind.\nFOL: Squirrel(squirrel) & Kind(squirrel)\nTEXT: The squirrel is nice.\nFOL: Squirrel(squirrel) & Nice(squirrel)\nTEXT: If someone likes the cow then they are red.\nFOL: exists x. (Likes(x, cow) -> Red(x))\nTEXT: If someone is big then they like the squirrel.\nFOL: exists x. (Big(x) -> Likes(x, squirrel))\nTEXT: The lion likes the squirrel.\nFOL: Lion(lion) & Squirrel(squirrel) & Likes(lion, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is big.\nFOL: Cow(cow) & Big(cow)\n\nTEXT: The cow is blue.\nFOL: Cow(cow) & Blue(cow)\n\nTEXT: The cow likes the squirrel.\nFOL: Cow(cow) & Squirrel(squirrel) & Likes(cow, squirrel)\n\nTEXT: The cow sees the lion.\nFOL: Cow(cow) & Lion(lion) & Sees(cow, lion)\n\nTEXT: The lion eats the cow.\nFOL: Lion(lion) & Cow(cow) & Eats(lion, cow)\n\nTEXT: The lion eats the squirrel.\nFOL: Lion(lion) & Squirrel(squirrel) & Eats(lion, squirrel)\n\nTEXT: The lion is big.\nFOL: Lion(lion) & Big(lion)\n\nTEXT: The lion is kind.\nFOL: Lion(lion) & Kind(lion)\n\nTEXT: The lion is nice.\nFOL: Lion(lion) & Nice(lion)\n\nTEXT: The squirrel eats the cow.\nFOL: Squirrel(squirrel) & Cow(cow) & Eats(squirrel, cow)\n\nTEXT: The squirrel is kind.\nFOL: Squirrel(squirrel) & Kind(squirrel)\n\nTEXT: The squirrel is nice.\nFOL: Squirrel(squirrel) & Nice(squirrel)\n\nTEXT: If someone likes the cow then they are red.\nFOL: all x. (Likes(x, cow) -> Red(x))\n\nTEXT: If someone is big then they like the squirrel.\nFOL: all x. (Big(x) -> Likes(x, squirrel))\n\nTEXT: The lion likes the squirrel.\nFOL: Lion(lion) & Squirrel(squirrel) & Likes(lion, squirrel)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is big.\nFOL: Cow(cow) & Big(cow)\n\nTEXT: The cow is blue.\nFOL: Cow(cow) & Blue(cow)\n\nTEXT: The cow likes the squirrel.\nFOL: Cow(cow) & Squirrel(squirrel) & Likes(cow, squirrel)\n\nTEXT: The cow sees the lion.\nFOL: Cow(cow) & Lion(lion) & Sees(cow, lion)\n\nTEXT: The lion eats the cow.\nFOL: Lion(lion) & Cow(cow) & Eats(lion, cow)\n\nTEXT: The lion eats the squirrel.\nFOL: Lion(lion) & Squirrel(squirrel) & Eats(lion, squirrel)\n\nTEXT: The lion is big.\nFOL: Lion(lion) & Big(lion)\n\nTEXT: The lion is kind.\nFOL: Lion(lion) & Kind(lion)\n\nTEXT: The lion is nice.\nFOL: Lion(lion) & Nice(lion)\n\nTEXT: The squirrel eats the cow.\nFOL: Squirrel(squirrel) & Cow(cow) & Eats(squirrel, cow)\n\nTEXT: The squirrel is kind.\nFOL: Squirrel(squirrel) & Kind(squirrel)\n\nTEXT: The squirrel is nice.\nFOL: Squirrel(squirrel) & Nice(squirrel)\n\nTEXT: If someone likes the cow then they are red.\nFOL: all x. (Likes(x, cow) -> Red(x))\n\nTEXT: If someone is big then they like the squirrel.\nFOL: all x. (Big(x) -> Likes(x, squirrel))\n\nTEXT: The lion likes the squirrel.\nFOL: Lion(lion) & Squirrel(squirrel) & Likes(lion, squirrel)\n\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is big.\nFOL: Cow(cow) & Big(cow)\nTEXT: The cow is blue.\nFOL: Cow(cow) & Blue(cow)\nTEXT: The cow likes the squirrel.\nFOL: Cow(cow) & Squirrel(squirrel) & Likes(cow, squirrel)\nTEXT: The cow sees the lion.\nFOL: Cow(cow) & Lion(lion) & Sees(cow, lion)\nTEXT: The lion eats the cow.\nFOL: Lion(lion) & Cow(cow) & Eats(lion, cow)\nTEXT: The lion eats the squirrel.\nFOL: Lion(lion) & Squirrel(squirrel) & Eats(lion, squirrel)\nTEXT: The lion is big.\nFOL: Lion(lion) & Big(lion)\nTEXT: The lion is kind.\nFOL: Lion(lion) & Kind(lion)\nTEXT: The lion is nice.\nFOL: Lion(lion) & Nice(lion)\nTEXT: The squirrel eats the cow.\nFOL: Squirrel(squirrel) & Cow(cow) & Eats(squirrel, cow)\nTEXT: The squirrel is kind.\nFOL: Squirrel(squirrel) & Kind(squirrel)\nTEXT: The squirrel is nice.\nFOL: Squirrel(squirrel) & Nice(squirrel)\nTEXT: If someone likes the cow then they are red.\nFOL: ForAll x. (Likes(x, cow) -> Red(x))\nTEXT: If someone is big then they like the squirrel.\nFOL: ForAll x. (Big(x) -> Likes(x, squirrel))\nTEXT: The lion likes the squirrel.\nFOL: Lion(lion) & Squirrel(squirrel) & Likes(lion, squirrel)\n</EVALUATE>"
  ]
 },
 {
  "index": 175,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: Cold(Anne)\nTEXT: Bob is nice.\nFOL: Nice(Bob)\nTEXT: Erin is red.\nFOL: Red(Erin)\nTEXT: Harry is not smart.\nFOL: -Smart(Harry)\nTEXT: Furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nTEXT: Red, quiet things are young.\nFOL: all x. (Red(x) & Quiet(x) -> Young(x))\nTEXT: All cold, nice things are furry.\nFOL: all x. (Cold(x) & Nice(x) -> Furry(x))\nTEXT: Red things are furry.\nFOL: all x. (Red(x) -> Furry(x))\nTEXT: If something is quiet and cold then it is furry.\nFOL: all x. (Quiet(x) & Cold(x) -> Furry(x))\nTEXT: If something is red then it is smart.\nFOL: all x. (Red(x) -> Smart(x))\nTEXT: Erin is cold.\nFOL: Cold(Erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: Cold(Anne)\nTEXT: Bob is nice.\nFOL: Nice(Bob)\nTEXT: Erin is red.\nFOL: Red(Erin)\nTEXT: Harry is not smart.\nFOL: -Smart(Harry)\nTEXT: Furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nTEXT: Red, quiet things are young.\nFOL: all x. (Red(x) & Quiet(x) -> Young(x))\nTEXT: All cold, nice things are furry.\nFOL: all x. (Cold(x) & Nice(x) -> Furry(x))\nTEXT: Red things are furry.\nFOL: all x. (Red(x) -> Furry(x))\nTEXT: If something is quiet and cold then it is furry.\nFOL: all x. (Quiet(x) & Cold(x) -> Furry(x))\nTEXT: If something is red then it is smart.\nFOL: all x. (Red(x) -> Smart(x))\nTEXT: Erin is cold.\nFOL: Cold(Erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: Cold(Anne)\n\nTEXT: Bob is nice.\nFOL: Nice(Bob)\n\nTEXT: Erin is red.\nFOL: Red(Erin)\n\nTEXT: Harry is not smart.\nFOL: -Smart(Harry)\n\nTEXT: Furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\n\nTEXT: Red, quiet things are young.\nFOL: all x. (Red(x) & Quiet(x) -> Young(x))\n\nTEXT: All cold, nice things are furry.\nFOL: all x. (Cold(x) & Nice(x) -> Furry(x))\n\nTEXT: Red things are furry.\nFOL: all x. (Red(x) -> Furry(x))\n\nTEXT: If something is quiet and cold then it is furry.\nFOL: all x. (Quiet(x) & Cold(x) -> Furry(x))\n\nTEXT: If something is red then it is smart.\nFOL: all x. (Red(x) -> Smart(x))\n\nTEXT: Erin is cold.\nFOL: Cold(Erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: Cold(Anne)\n\nTEXT: Bob is nice.\nFOL: Nice(Bob)\n\nTEXT: Erin is red.\nFOL: Red(Erin)\n\nTEXT: Harry is not smart.\nFOL: -Smart(Harry)\n\nTEXT: Furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\n\nTEXT: Red, quiet things are young.\nFOL: all x. (Red(x) & Quiet(x) -> Young(x))\n\nTEXT: All cold, nice things are furry.\nFOL: all x. (Cold(x) & Nice(x) -> Furry(x))\n\nTEXT: Red things are furry.\nFOL: all x. (Red(x) -> Furry(x))\n\nTEXT: If something is quiet and cold then it is furry.\nFOL: all x. (Quiet(x) & Cold(x) -> Furry(x))\n\nTEXT: If something is red then it is smart.\nFOL: all x. (Red(x) -> Smart(x))\n\nTEXT: Erin is cold.\nFOL: Cold(Erin)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is cold.\nFOL: Cold(anne)\nTEXT: Bob is nice.\nFOL: Nice(bob)\nTEXT: Erin is red.\nFOL: Red(erin)\nTEXT: Harry is not smart.\nFOL: -Smart(harry)\nTEXT: Furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nTEXT: Red, quiet things are young.\nFOL: all x. (Red(x) & Quiet(x) -> Young(x))\nTEXT: All cold, nice things are furry.\nFOL: all x. (Cold(x) & Nice(x) -> Furry(x))\nTEXT: Red things are furry.\nFOL: all x. (Red(x) -> Furry(x))\nTEXT: If something is quiet and cold then it is furry.\nFOL: all x. (Quiet(x) & Cold(x) -> Furry(x))\nTEXT: If something is red then it is smart.\nFOL: all x. (Red(x) -> Smart(x))\nTEXT: Erin is cold.\nFOL: Cold(erin)\n</EVALUATE>"
  ]
 },
 {
  "index": 176,
  "responses": [
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(Anne)\nTEXT: Anne is cold.\nFOL: Cold(Anne)\nTEXT: Anne is nice.\nFOL: Nice(Anne)\nTEXT: Anne is smart.\nFOL: Smart(Anne)\nTEXT: Anne is white.\nFOL: White(Anne)\nTEXT: Bob is big.\nFOL: Big(Bob)\nTEXT: Bob is red.\nFOL: Red(Bob)\nTEXT: Bob is round.\nFOL: Round(Bob)\nTEXT: Bob is smart.\nFOL: Smart(Bob)\nTEXT: Fiona is nice.\nFOL: Nice(Fiona)\nTEXT: Fiona is round.\nFOL: Round(Fiona)\nTEXT: Fiona is white.\nFOL: White(Fiona)\nTEXT: All round, red people are cold.\nFOL: all x. (Round(x) & Red(x) -> Cold(x))\nTEXT: White, round people are cold.\nFOL: all x. (White(x) & Round(x) -> Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x. (Nice(x) & Round(x) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x. (Smart(x) & Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: Round(Anne) -> Cold(Anne)\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Fiona is big.\nFOL: Big(Fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Anne(big)\nTEXT: Anne is cold.\nFOL: Anne(cold)\nTEXT: Anne is nice.\nFOL: Anne(nice)\nTEXT: Anne is smart.\nFOL: Anne(smart)\nTEXT: Anne is white.\nFOL: Anne(white)\nTEXT: Bob is big.\nFOL: Bob(big)\nTEXT: Bob is red.\nFOL: Bob(red)\nTEXT: Bob is round.\nFOL: Bob(round)\nTEXT: Bob is smart.\nFOL: Bob(smart)\nTEXT: Fiona is nice.\nFOL: Fiona(nice)\nTEXT: Fiona is round.\nFOL: Fiona(round)\nTEXT: Fiona is white.\nFOL: Fiona(white)\nTEXT: All round, red people are cold.\nFOL: all x. (Round(x) & Red(x) -> Cold(x))\nTEXT: White, round people are cold.\nFOL: all x. (White(x) & Round(x) -> Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x. (Nice(x) & Round(x) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x. (Smart(x) & Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: Anne(round) -> Anne(cold)\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Fiona is big.\nFOL: Fiona(big)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(Anne)\nTEXT: Anne is cold.\nFOL: Cold(Anne)\nTEXT: Anne is nice.\nFOL: Nice(Anne)\nTEXT: Anne is smart.\nFOL: Smart(Anne)\nTEXT: Anne is white.\nFOL: White(Anne)\nTEXT: Bob is big.\nFOL: Big(Bob)\nTEXT: Bob is red.\nFOL: Red(Bob)\nTEXT: Bob is round.\nFOL: Round(Bob)\nTEXT: Bob is smart.\nFOL: Smart(Bob)\nTEXT: Fiona is nice.\nFOL: Nice(Fiona)\nTEXT: Fiona is round.\nFOL: Round(Fiona)\nTEXT: Fiona is white.\nFOL: White(Fiona)\nTEXT: All round, red people are cold.\nFOL: all x y. (Round(x) & Red(y) -> Cold(x))\nTEXT: White, round people are cold.\nFOL: all x y. (White(x) & Round(y) -> Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x y. (Nice(x) & Round(y) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x y. (Smart(x) & Cold(y) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: Round(Anne) -> Cold(Anne)\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Fiona is big.\nFOL: Big(Fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(Anne)\nTEXT: Anne is cold.\nFOL: Cold(Anne)\nTEXT: Anne is nice.\nFOL: Nice(Anne)\nTEXT: Anne is smart.\nFOL: Smart(Anne)\nTEXT: Anne is white.\nFOL: White(Anne)\nTEXT: Bob is big.\nFOL: Big(Bob)\nTEXT: Bob is red.\nFOL: Red(Bob)\nTEXT: Bob is round.\nFOL: Round(Bob)\nTEXT: Bob is smart.\nFOL: Smart(Bob)\nTEXT: Fiona is nice.\nFOL: Nice(Fiona)\nTEXT: Fiona is round.\nFOL: Round(Fiona)\nTEXT: Fiona is white.\nFOL: White(Fiona)\nTEXT: All round, red people are cold.\nFOL: all x y. (Round(x) & Red(y) -> Cold(x))\nTEXT: White, round people are cold.\nFOL: all x. (White(x) & Round(x) -> Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x. (Nice(x) & Round(x) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x. (Smart(x) & Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: Round(Anne) -> Cold(Anne)\nTEXT: White people are round.\nFOL: all x. (White(x) -> Round(x))\nTEXT: Fiona is big.\nFOL: Big(Fiona)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Anne is big.\nFOL: Big(Anne)\nTEXT: Anne is cold.\nFOL: Cold(Anne)\nTEXT: Anne is nice.\nFOL: Nice(Anne)\nTEXT: Anne is smart.\nFOL: Smart(Anne)\nTEXT: Anne is white.\nFOL: White(Anne)\nTEXT: Bob is big.\nFOL: Big(Bob)\nTEXT: Bob is red.\nFOL: Red(Bob)\nTEXT: Bob is round.\nFOL: Round(Bob)\nTEXT: Bob is smart.\nFOL: Smart(Bob)\nTEXT: Fiona is nice.\nFOL: Nice(Fiona)\nTEXT: Fiona is round.\nFOL: Round(Fiona)\nTEXT: Fiona is white.\nFOL: White(Fiona)\nTEXT: All round, red people are cold.\nFOL: all x. (Round(x) & Red(x) -> Cold(x))\nTEXT: White, round people are cold.\nFOL: all x. (White(x) & Round(x) -> Cold(x))\nTEXT: If someone is nice and round then they are smart.\nFOL: all x. (Nice(x) & Round(x) -> Smart(x))\nTEXT: All smart, cold people are big.\nFOL: all x. (Smart(x) & Cold(x) -> Big(x))\nTEXT: If Anne is round then Anne is cold.\nFOL: Round(Anne) -> Cold(Anne)\nTEXT: White people are round.\nFOL: White(x) -> Round(x)\nTEXT: Fiona is big.\nFOL: Big(Fiona)\n</EVALUATE>"
  ]
 },
 {
  "index": 177,
  "responses": [
   "<EVALUATE>\nTEXT: The bald eagle eats the squirrel.\nFOL: BaldEagle(eatsSquirrel)\nTEXT: The squirrel eats the bald eagle.\nFOL: Squirrel(eatsBaldEagle)\nTEXT: The squirrel is kind.\nFOL: Squirrel(isKind)\nTEXT: If someone sees the squirrel then the squirrel eats the bald eagle.\nFOL: exists x. (SeeSquirrel(x) -> Squirrel(eatsBaldEagle))\nTEXT: If someone needs the bald eagle then the bald eagle does not see the squirrel.\nFOL: all x. (NeedBaldEagle(x) -> -SeeSquirrel(x))\nTEXT: If someone needs the bald eagle and they do not eat the squirrel then they need the squirrel.\nFOL: all x. ((NeedBaldEagle(x) & -Squirrel(eatsBaldEagle)) -> NeedSquirrel(x))\nTEXT: If the bald eagle eats the squirrel then the squirrel does not see the bald eagle.\nFOL: BaldEagle(eatsSquirrel) -> -SeeBaldEagle\nTEXT: If someone eats the squirrel then they need the bald eagle.\nFOL: all x. (Squirrel(eats(x)) -> NeedBaldEagle(x))\nTEXT: If someone needs the bald eagle and the bald eagle does not see the squirrel then the bald eagle is nice.\nFOL: all x. ((NeedBaldEagle(x) & -SeeSquirrel(x)) -> BaldEagle(isNice))\nTEXT: The bald eagle is nice.\nFOL: BaldEagle(isNice)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the squirrel.\nFOL: BaldEagle(eatsSquirrel)\nTEXT: The squirrel eats the bald eagle.\nFOL: Squirrel(eatsBaldEagle)\nTEXT: The squirrel is kind.\nFOL: Squirrel(isKind)\nTEXT: If someone sees the squirrel then the squirrel eats the bald eagle.\nFOL: exists x. (SeesSquirrel(x) -> Squirrel(eatsBaldEagle))\nTEXT: If someone needs the bald eagle then the bald eagle does not see the squirrel.\nFOL: all x. (NeedsBaldEagle(x) -> -SeesSquirrel(x))\nTEXT: If someone needs the bald eagle and they do not eat the squirrel then they need the squirrel.\nFOL: all x. (NeedsBaldEagle(x) & -Squirrel(eatsBaldEagle(x)) -> NeedsSquirrel(x))\nTEXT: If the bald eagle eats the squirrel then the squirrel does not see the bald eagle.\nFOL: BaldEagle(eatsSquirrel) -> -SeesSquirrel(BaldEagle)\nTEXT: If someone eats the squirrel then they need the bald eagle.\nFOL: all x. (EatsSquirrel(x) -> NeedsBaldEagle(x))\nTEXT: If someone needs the bald eagle and the bald eagle does not see the squirrel then the bald eagle is nice.\nFOL: all x. (NeedsBaldEagle(x) & -SeesSquirrel(x) -> BaldEagle(isNice))\nTEXT: The bald eagle is nice.\nFOL: BaldEagle(isNice)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the squirrel.\nFOL: BaldEagle(eatsSquirrel)\nTEXT: The squirrel eats the bald eagle.\nFOL: Squirrel(eatsBaldEagle)\nTEXT: The squirrel is kind.\nFOL: Squirrel(isKind)\nTEXT: If someone sees the squirrel then the squirrel eats the bald eagle.\nFOL: exists x. (SeesSquirrel(x) -> Squirrel(eatsBaldEagle))\nTEXT: If someone needs the bald eagle then the bald eagle does not see the squirrel.\nFOL: all x. (NeedsBaldEagle(x) -> -SeesSquirrel(x))\nTEXT: If someone needs the bald eagle and they do not eat the squirrel then they need the squirrel.\nFOL: all x. (NeedsBaldEagle(x) & -Squirrel(eatsBaldEagle(x)) -> NeedsSquirrel(x))\nTEXT: If the bald eagle eats the squirrel then the squirrel does not see the bald eagle.\nFOL: BaldEagle(eatsSquirrel) -> -SeesBaldEagle(Squirrel)\nTEXT: If someone eats the squirrel then they need the bald eagle.\nFOL: all x. (EatsSquirrel(x) -> NeedsBaldEagle(x))\nTEXT: If someone needs the bald eagle and the bald eagle does not see the squirrel then the bald eagle is nice.\nFOL: all x. (NeedsBaldEagle(x) & -SeesSquirrel(x) -> BaldEagle(isNice))\nTEXT: The bald eagle is nice.\nFOL: BaldEagle(isNice)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the squirrel.\nFOL: BaldEagle(eatsSquirrel)\nTEXT: The squirrel eats the bald eagle.\nFOL: Squirrel(eatsBaldEagle)\nTEXT: The squirrel is kind.\nFOL: Squirrel(isKind)\nTEXT: If someone sees the squirrel then the squirrel eats the bald eagle.\nFOL: exists x. (SeeSquirrel(x) -> Squirrel(eatsBaldEagle))\nTEXT: If someone needs the bald eagle then the bald eagle does not see the squirrel.\nFOL: all x. (NeedBaldEagle(x) -> -SeeSquirrel(x))\nTEXT: If someone needs the bald eagle and they do not eat the squirrel then they need the squirrel.\nFOL: all x. (NeedBaldEagle(x) & -Squirrel(eatsBaldEagle(x)) -> NeedSquirrel(x))\nTEXT: If the bald eagle eats the squirrel then the squirrel does not see the bald eagle.\nFOL: BaldEagle(eatsSquirrel) -> -SeeSquirrel(BaldEagle)\nTEXT: If someone eats the squirrel then they need the bald eagle.\nFOL: all x. (Squirrel(eats(x)) -> NeedBaldEagle(x))\nTEXT: If someone needs the bald eagle and the bald eagle does not see the squirrel then the bald eagle is nice.\nFOL: all x. (NeedBaldEagle(x) & -SeeSquirrel(x) -> BaldEagle(isNice))\nTEXT: The bald eagle is nice.\nFOL: BaldEagle(isNice)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The bald eagle eats the squirrel.\nFOL: BaldEagle(eatsSquirrel)\nTEXT: The squirrel eats the bald eagle.\nFOL: Squirrel(eatsBaldEagle)\nTEXT: The squirrel is kind.\nFOL: Squirrel(isKind)\nTEXT: If someone sees the squirrel then the squirrel eats the bald eagle.\nFOL: exists x. (SeeSquirrel(x) -> Squirrel(eatsBaldEagle))\nTEXT: If someone needs the bald eagle then the bald eagle does not see the squirrel.\nFOL: all x. (NeedBaldEagle(x) -> -SeeSquirrel(x))\nTEXT: If someone needs the bald eagle and they do not eat the squirrel then they need the squirrel.\nFOL: all x. (NeedBaldEagle(x) & -Squirrel(eatsBaldEagle)(x) -> NeedSquirrel(x))\nTEXT: If the bald eagle eats the squirrel then the squirrel does not see the bald eagle.\nFOL: BaldEagle(eatsSquirrel) -> -SeeSquirrel(BaldEagle)\nTEXT: If someone eats the squirrel then they need the bald eagle.\nFOL: all x. (Squirrel(eats(x)) -> NeedBaldEagle(x))\nTEXT: If someone needs the bald eagle and the bald eagle does not see the squirrel then the bald eagle is nice.\nFOL: all x. (NeedBaldEagle(x) & -SeeSquirrel(x) -> BaldEagle(isNice))\nTEXT: The bald eagle is nice.\nFOL: BaldEagle(isNice)\n</EVALUATE>"
  ]
 },
 {
  "index": 178,
  "responses": [
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(Alan)\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: exists x. (Young(x) & Cold(x) & Name(x, charlie))\nTEXT: Dave is nice and kind,though he's also rather cold.\nFOL: Nice(Dave) & Kind(Dave) & Cold(Dave)\nTEXT: Look, we know Gary is young and rough.\nFOL: exists x. (Gary(x) & Young(x) & Rough(x))\nTEXT: We have to accept he's also red, nice, cold, and blue.\nFOL: exists x. (Gary(x) & Red(x) & Nice(x) & Cold(x) & Blue(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x) | Cold(x) & Red(x))\nTEXT: A blue, cold natured person will be rough textured.\nFOL: Blue(x) & Cold(x) -> Rough(x)\nTEXT: People of young age are rough and cold but some are nice.\nFOL: Young(x) -> (Rough(x) & Cold(x) | Nice(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: Young(x) & Red(x) -> Rough(x)\nTEXT: People who are young are also blue.\nFOL: Young(x) -> Blue(x)\nTEXT: Gary is green.\nFOL: Gary(x) -> Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(Alan)\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: exists x. (Young(x) & Cold(x) & Name(x, charlie))\nTEXT: Dave is nice and kind,though he's also rather cold.\nFOL: Nice(Dave) & Kind(Dave) & Cold(Dave)\nTEXT: Look, we know Gary is young and rough.\nFOL: exists x. (Gary(x) & Young(x) & Rough(x))\nTEXT: We have to accept he's also red, nice, cold, and blue.\nFOL: exists x. (Gary(x) & Red(x) & Nice(x) & Cold(x) & Blue(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x) | Cold(x) & Red(x))\nTEXT: A blue, cold natured person will be rough textured.\nFOL: Blue(x) & Cold(x) -> Rough(x)\nTEXT: People of young age are rough and cold but some are nice.\nFOL: Young(x) -> (Rough(x) & Cold(x) | Nice(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: Young(x) & Red(x) -> Rough(x)\nTEXT: People who are young are also blue.\nFOL: Young(x) -> Blue(x)\nTEXT: Gary is green.\nFOL: Gary(green)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(Alan)\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: exists x. (Young(x) & Cold(x) & Name(x, charlie))\nTEXT: Dave is nice and kind,though he's also rather cold.\nFOL: Nice(Dave) & Kind(Dave) & Cold(Dave)\nTEXT: Look, we know Gary is young and rough.\nFOL: exists x. (Gary(x) & Young(x) & Rough(x))\nTEXT: We have to accept he's also red, nice, cold, and blue.\nFOL: exists x. (Gary(x) & Red(x) & Nice(x) & Cold(x) & Blue(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x) | Red(x))\nTEXT: A blue, cold natured person will be rough textured.\nFOL: Blue(x) & Cold(x) -> Rough(x)\nTEXT: People of young age are rough and cold but some are nice.\nFOL: Young(x) -> (Rough(x) & Cold(x) | Nice(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: Young(x) & Red(x) -> Rough(x)\nTEXT: People who are young are also blue.\nFOL: Young(x) -> Blue(x)\nTEXT: Gary is green.\nFOL: Gary(x) -> Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(Alan)\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: exists x. (Young(x) & Cold(x) & Name(x, charlie))\nTEXT: Dave is nice and kind,though he's also rather cold.\nFOL: Nice(Dave) & Kind(Dave) & Cold(Dave)\nTEXT: Look, we know Gary is young and rough.\nFOL: exists x. (Gary(x) & Young(x) & Rough(x))\nTEXT: We have to accept he's also red, nice, cold, and blue.\nFOL: exists x. (Gary(x) & Red(x) & Nice(x) & Cold(x) & Blue(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) & Nice(x) | Cold(x) & Red(x))\nTEXT: A blue, cold natured person will be rough textured.\nFOL: Blue(x) & Cold(x) -> Rough(x)\nTEXT: People of young age are rough and cold but some are nice.\nFOL: Young(x) -> (Rough(x) & Cold(x) | Nice(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: Young(x) & Red(x, hands) -> Rough(x)\nTEXT: People who are young are also blue.\nFOL: Young(x) -> Blue(x)\nTEXT: Gary is green.\nFOL: Gary(x) -> Green(x)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: That guy Alan sure is nice.\nFOL: Nice(Alan)\nTEXT: The young person who is always feeling cold is named Charlie.\nFOL: exists x. (Young(x) & Cold(x) & Name(x, charlie))\nTEXT: Dave is nice and kind,though he's also rather cold.\nFOL: Nice(Dave) & Kind(Dave) & Cold(Dave)\nTEXT: Look, we know Gary is young and rough.\nFOL: exists x. (Gary(x) & Young(x) & Rough(x))\nTEXT: We have to accept he's also red, nice, cold, and blue.\nFOL: exists x. (Gary(x) & Red(x) & Nice(x) & Cold(x) & Blue(x))\nTEXT: Some cold people can be nice at times,and red at at other times.\nFOL: exists x. (Cold(x) -> (Nice(x) | Red(x)))\nTEXT: A blue, cold natured person will be rough textured.\nFOL: Blue(x) & Cold(x) -> Rough(x)\nTEXT: People of young age are rough and cold but some are nice.\nFOL: Young(x) -> (Rough(x) & Cold(x) | Nice(x))\nTEXT: A young person with red hands is rough around the edges.\nFOL: Young(x) & Red(x) -> Rough(x)\nTEXT: People who are young are also blue.\nFOL: Young(x) -> Blue(x)\nTEXT: Gary is green.\nFOL: Gary(x) -> Green(x)\n</EVALUATE>"
  ]
 },
 {
  "index": 179,
  "responses": [
   "<EVALUATE>\nTEXT: Bob may be round, but he is also kind.\nFOL: Bob(Round) | Bob(Kind)\nTEXT: Charlie may be round, but he is also kind.\nFOL: Charlie(Round) | Charlie(Kind)\nTEXT: Dave may be round, but he is also kind.\nFOL: Dave(Round) | Dave(Kind)\nTEXT: Eric is green and cold too.\nFOL: Eric(Green) & Eric(Cold)\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. ((Green(x) & Young(x) & Round(x)) -> Rough(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> Green(x))\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: all x. ((Rough(x) & Kind(x)) -> Cold(x))\nTEXT: A kind person will certainly be rough as well.\nFOL: all x. (Kind(x) -> Rough(x))\nTEXT: Nice people who feel blue often look green when ill.\nFOL: all x. (Nice(x) & Blue(x) -> Green(x))\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: all x. (Cold(x) & Round(x) -> Red(x))\nTEXT: Dave is kind.\nFOL: Dave(Kind)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob may be round, but he is also kind.\nFOL: Bob(Round) | Bob(Kind)\nTEXT: Charlie may be round, but he is also kind.\nFOL: Charlie(Round) | Charlie(Kind)\nTEXT: Dave may be round, but he is also kind.\nFOL: Dave(Round) | Dave(Kind)\nTEXT: Eric is green and cold too.\nFOL: Eric(Green) & Eric(Cold)\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Nice(x) & Kind(x) -> Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. ((Green(x) & Young(x) & Round(x)) -> Rough(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> Green(x))\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: all x. ((Rough(x) & Kind(x)) -> Cold(x))\nTEXT: A kind person will certainly be rough as well.\nFOL: all x. (Kind(x) -> Rough(x))\nTEXT: Nice people who feel blue often look green when ill.\nFOL: all x. (Nice(x) & Blue(x) -> Green(x))\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: all x. (Cold(x) & Round(x) -> Red(x))\nTEXT: Dave is kind.\nFOL: Dave(Kind)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob may be round, but he is also kind.\nFOL: Bob(Round) | Bob(Kind)\n\nTEXT: Charlie may be round, but he is also kind.\nFOL: Charlie(Round) | Charlie(Kind)\n\nTEXT: Dave may be round, but he is also kind.\nFOL: Dave(Round) | Dave(Kind)\n\nTEXT: Eric is green and cold too.\nFOL: Eric(Green) & Eric(Cold)\n\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Nice(x) & Kind(x) -> Green(x))\n\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. ((Green(x) & Young(x) & Round(x)) -> Rough(x))\n\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> Green(x))\n\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: all x. ((Rough(x) & Kind(x)) -> Cold(x))\n\nTEXT: A kind person will certainly be rough as well.\nFOL: all x. (Kind(x) -> Rough(x))\n\nTEXT: Nice people who feel blue often look green when ill.\nFOL: all x. (Nice(x) & Blue(x) -> Green(x))\n\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: all x. (Cold(x) & Round(x) -> Red(x))\n\nTEXT: Dave is kind.\nFOL: Dave(Kind)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob may be round, but he is also kind.\nFOL: Bob(Round) | Bob(Kind)\nTEXT: Charlie may be round, but he is also kind.\nFOL: Charlie(Round) | Charlie(Kind)\nTEXT: Dave may be round, but he is also kind.\nFOL: Dave(Round) | Dave(Kind)\nTEXT: Eric is green and cold too.\nFOL: Eric(Green) & Eric(Cold)\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Nice(x) & Kind(x) -> Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. ((Green(x) & Young(x) & Round(x)) -> Rough(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> Green(x))\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: all x. ((Rough(x) & Kind(x)) -> Cold(x))\nTEXT: A kind person will certainly be rough as well.\nFOL: all x. (Kind(x) -> Rough(x))\nTEXT: Nice people who feel blue often look green when ill.\nFOL: all x. (Nice(x) & Blue(x) -> Green(x))\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: all x. ((Cold(x) & Round(x)) -> Red(x))\nTEXT: Dave is kind.\nFOL: Dave(Kind)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: Bob may be round, but he is also kind.\nFOL: Bob(Round) | Bob(Kind)\nTEXT: Charlie may be round, but he is also kind.\nFOL: Charlie(Round) | Charlie(Kind)\nTEXT: Dave may be round, but he is also kind.\nFOL: Dave(Round) | Dave(Kind)\nTEXT: Eric is green and cold too.\nFOL: Eric(Green) & Eric(Cold)\nTEXT: Every time you meet someone kind and nice, they'll be green, too.\nFOL: all x. (Kind(x) & Nice(x) -> Green(x))\nTEXT: When green, young and round fits a person, you'll see that rough will also fit.\nFOL: all x. ((Green(x) & Young(x) & Round(x)) -> Rough(x))\nTEXT: Every single big person is a little green in some areas.\nFOL: all x. (Big(x) -> Green(x))\nTEXT: When rough and kind can describe a person, then cold will describe them, too.\nFOL: all x. ((Rough(x) & Kind(x)) -> Cold(x))\nTEXT: A kind person will certainly be rough as well.\nFOL: all x. (Kind(x) -> Rough(x))\nTEXT: Nice people who feel blue often look green when ill.\nFOL: all x. (Nice(x) & Blue(x) -> Green(x))\nTEXT: If a person is both cold and round, that person is also someone who is red.\nFOL: all x. ((Cold(x) & Round(x)) -> Red(x))\nTEXT: Dave is kind.\nFOL: Dave(Kind)\n</EVALUATE>"
  ]
 },
 {
  "index": 180,
  "responses": [
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Cat(eats(rabbit))\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(eats(tiger))\nTEXT: The tiger sees the cat.\nFOL: Tiger(sees(cat))\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: -Tiger(sees(rabbit)) -> Round(Tiger)\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: Cat(needs(Tiger)) -> Round(Tiger)\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: Something(needs(cat)) -> -Cat(needs(Tiger))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: Something(sees(Tiger)) -> Big(Tiger)\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: Round(Tiger) -> Cat(needs(rabbit))\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: Something(eats(rabbit)) -> Cat(needs(Tiger))\nTEXT: The tiger is not round.\nFOL: -Round(Tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Cat(eats(rabbit))\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(eats(tiger))\nTEXT: The tiger sees the cat.\nFOL: Tiger(sees(cat))\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: -Tiger(sees(rabbit)) -> Round(Tiger)\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: Needs(Tiger, Cat) -> Round(Tiger)\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: Needs(x, Cat) -> -Needs(Tiger, x)\nTEXT: If something sees the tiger then the tiger is big.\nFOL: Sees(x, Tiger) -> Big(Tiger)\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: Round(Tiger) -> Needs(Rabbit, Tiger)\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: Eats(x, Rabbit) -> Needs(Tiger, x)\nTEXT: The tiger is not round.\nFOL: -Round(Tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Cat(eats(rabbit))\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(eats(tiger))\nTEXT: The tiger sees the cat.\nFOL: Tiger(sees(cat))\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: -Tiger(sees(rabbit)) -> Round(Tiger)\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: Cat(needs(Tiger)) -> Round(Tiger)\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: Something(needs(Cat)) -> -Cat(needs(Tiger))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: Something(sees(Tiger)) -> Big(Tiger)\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: Round(Tiger) -> Cat(needs(rabbit))\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: Something(eats(rabbit)) -> Cat(needs(Tiger))\nTEXT: The tiger is not round.\nFOL: -Round(Tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Cat(eats(rabbit))\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(eats(tiger))\nTEXT: The tiger sees the cat.\nFOL: Tiger(sees(cat))\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: -Tiger(sees(rabbit)) -> Round(Tiger)\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: Cat(needs(Tiger)) -> Round(Tiger)\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: Something(needs(Cat)) -> -Cat(needs(Tiger))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: Something(sees(Tiger)) -> Big(Tiger)\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: Round(Tiger) -> Tiger(needs(rabbit))\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: Something(eats(rabbit)) -> Tiger(needs(Something))\nTEXT: The tiger is not round.\nFOL: -Round(Tiger)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cat eats the rabbit.\nFOL: Cat(eats(rabbit))\nTEXT: The rabbit eats the tiger.\nFOL: Rabbit(eats(tiger))\nTEXT: The tiger sees the cat.\nFOL: Tiger(sees(cat))\nTEXT: If the tiger does not see the rabbit then the tiger is round.\nFOL: -Tiger(sees(rabbit)) -> Round(Tiger)\nTEXT: If the cat needs the tiger then the tiger is round.\nFOL: Cat(needs(Tiger)) -> Round(Tiger)\nTEXT: If something needs the cat then the cat does not need the tiger.\nFOL: Something(needs(cat)) -> -Cat(needs(Tiger))\nTEXT: If something sees the tiger then the tiger is big.\nFOL: Something(sees(Tiger)) -> Big(Tiger)\nTEXT: If the tiger is round then the tiger needs the rabbit.\nFOL: Round(Tiger) -> Tiger(needs(rabbit))\nTEXT: If something eats the rabbit then it needs the tiger.\nFOL: Something(eats(rabbit)) -> Tiger(needs(Something))\nTEXT: The tiger is not round.\nFOL: -Round(Tiger)\n</EVALUATE>"
  ]
 },
 {
  "index": 181,
  "responses": [
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: Cold(cow)\nTEXT: The dog is cold.\nFOL: Cold(dog)\nTEXT: The dog likes the cow.\nFOL: Likes(dog, cow)\nTEXT: If someone is big and nice then they need the dog.\nFOL: all x. (Big(x) & Nice(x) -> NeedsDog(x))\nTEXT: If someone chases the cow then the cow does not need the dog.\nFOL: all x. (Chases(x, cow) -> -NeedsDog(x))\nTEXT: If the cow needs the dog and the dog likes the cow then the cow chases the dog.\nFOL: (NeedsDog(cow) & Likes(dog, cow)) -> Chases(cow, dog)\nTEXT: If someone likes the cow then they do not chase the cow.\nFOL: all x. (Likes(x, cow) -> -Chases(x, cow))\nTEXT: If someone chases the dog and they are not green then they are nice.\nFOL: all x. (Chases(x, dog) & -Green(x) -> Nice(x))\nTEXT: If someone needs the cow then the cow is not young.\nFOL: all x. (Needs(x, cow) -> -Young(cow))\nTEXT: If the dog does not chase the cow then the cow likes the dog.\nFOL: -Chases(dog, cow) -> Likes(cow, dog)\nTEXT: If someone likes the dog then the dog needs the cow.\nFOL: all x. (Likes(x, dog) -> Needs(x, cow))\nTEXT: The cow is big.\nFOL: Big(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: Cold(cow)\n\nTEXT: The dog is cold.\nFOL: Cold(dog)\n\nTEXT: The dog likes the cow.\nFOL: Likes(dog, cow)\n\nTEXT: If someone is big and nice then they need the dog.\nFOL: all x. (Big(x) & Nice(x) -> NeedsDog(x))\n\nTEXT: If someone chases the cow then the cow does not need the dog.\nFOL: all x. (Chases(x, cow) -> -NeedsDog(x))\n\nTEXT: If the cow needs the dog and the dog likes the cow then the cow chases the dog.\nFOL: NeedsDog(cow) & Likes(dog, cow) -> Chases(cow, dog)\n\nTEXT: If someone likes the cow then they do not chase the cow.\nFOL: Likes(x, cow) -> -Chases(x, cow)\n\nTEXT: If someone chases the dog and they are not green then they are nice.\nFOL: Chases(x, dog) & -Green(x) -> Nice(x)\n\nTEXT: If someone needs the cow then the cow is not young.\nFOL: Needs(x, cow) -> -Young(cow)\n\nTEXT: If the dog does not chase the cow then the cow likes the dog.\nFOL: -Chases(dog, cow) -> Likes(cow, dog)\n\nTEXT: If someone likes the dog then the dog needs the cow.\nFOL: Likes(x, dog) -> Needs(x, cow)\n\nTEXT: The cow is big.\nFOL: Big(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: Cold(cow)\nTEXT: The dog is cold.\nFOL: Cold(dog)\nTEXT: The dog likes the cow.\nFOL: Likes(dog, cow)\nTEXT: If someone is big and nice then they need the dog.\nFOL: all x. (Big(x) & Nice(x) -> NeedsDog(x))\nTEXT: If someone chases the cow then the cow does not need the dog.\nFOL: all x. (Chases(x, cow) -> -NeedsDog(x))\nTEXT: If the cow needs the dog and the dog likes the cow then the cow chases the dog.\nFOL: NeedsDog(cow) & Likes(dog, cow) & Chases(cow, dog)\nTEXT: If someone likes the cow then they do not chase the cow.\nFOL: all x. (Likes(x, cow) -> -Chases(x, cow))\nTEXT: If someone chases the dog and they are not green then they are nice.\nFOL: all x. (Chases(x, dog) & -Green(x) -> Nice(x))\nTEXT: If someone needs the cow then the cow is not young.\nFOL: all x. (Needs(x, cow) -> -Young(x))\nTEXT: If the dog does not chase the cow then the cow likes the dog.\nFOL: -Chases(dog, cow) -> Likes(cow, dog)\nTEXT: If someone likes the dog then the dog needs the cow.\nFOL: all x. (Likes(x, dog) -> Needs(x, cow))\nTEXT: The cow is big.\nFOL: Big(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: Cold(cow)\nTEXT: The dog is cold.\nFOL: Cold(dog)\nTEXT: The dog likes the cow.\nFOL: Likes(dog, cow)\nTEXT: If someone is big and nice then they need the dog.\nFOL: all x. (Big(x) & Nice(x) -> NeedsDog(x))\nTEXT: If someone chases the cow then the cow does not need the dog.\nFOL: all x. (Chases(x, cow) -> -NeedsDog(x))\nTEXT: If the cow needs the dog and the dog likes the cow then the cow chases the dog.\nFOL: (NeedsDog(cow) & Likes(dog, cow)) -> Chases(cow, dog)\nTEXT: If someone likes the cow then they do not chase the cow.\nFOL: all x. (Likes(x, cow) -> -Chases(x, cow))\nTEXT: If someone chases the dog and they are not green then they are nice.\nFOL: all x. (Chases(x, dog) & -Green(x) -> Nice(x))\nTEXT: If someone needs the cow then the cow is not young.\nFOL: all x. (Needs(x, cow) -> -Young(cow))\nTEXT: If the dog does not chase the cow then the cow likes the dog.\nFOL: -Chases(dog, cow) -> Likes(cow, dog)\nTEXT: If someone likes the dog then the dog needs the cow.\nFOL: all x. (Likes(x, dog) -> NeedsCow(x))\nTEXT: The cow is big.\nFOL: Big(cow)\n</EVALUATE>",
   "<EVALUATE>\nTEXT: The cow is cold.\nFOL: Cold(cow)\nTEXT: The dog is cold.\nFOL: Cold(dog)\nTEXT: The dog likes the cow.\nFOL: Likes(dog, cow)\nTEXT: If someone is big and nice then they need the dog.\nFOL: all x. (Big(x) & Nice(x) -> NeedsDog(x))\nTEXT: If someone chases the cow then the cow does not need the dog.\nFOL: all x. (Chases(x, cow) -> -NeedsDog(x))\nTEXT: If the cow needs the dog and the dog likes the cow then the cow chases the dog.\nFOL: (NeedsDog(cow) & Likes(dog, cow)) -> Chases(cow, dog)\nTEXT: If someone likes the cow then they do not chase the cow.\nFOL: all x. (Likes(x, cow) -> -Chases(x, cow))\nTEXT: If someone chases the dog and they are not green then they are nice.\nFOL: all x. (Chases(x, dog) & -Green(x) -> Nice(x))\nTEXT: If someone needs the cow then the cow is not young.\nFOL: all x. (Needs(x, cow) -> -Young(cow))\nTEXT: If the dog does not chase the cow then the cow likes the dog.\nFOL: -Chases(dog, cow) -> Likes(cow, dog)\nTEXT: If someone likes the dog then the dog needs the cow.\nFOL: all x. (Likes(x, dog) -> NeedsDog(x))\nTEXT: The cow is big.\nFOL: Big(cow)\n</EVALUATE>"
  ]
 }
]